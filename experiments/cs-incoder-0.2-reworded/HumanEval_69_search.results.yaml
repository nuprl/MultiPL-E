language: cs
name: HumanEval_69_search
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (var item\
    \ in lst) {\n            if (item == 0) {\n                continue;\n       \
    \     }\n            long freq = lst.Count(x => x == item);\n            if (freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = item;\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c820ba46803f4a629b34ca0b0d89c69f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c820ba46803f4a629b34ca0b0d89c69f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            max = Math.Max(max,\
    \ freq);\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04b3c6df711a42a5945b45c6bd61183d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04b3c6df711a42a5945b45c6bd61183d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > i) {\n                max = i;\n\
    \                freq = i;\n            }\n        }\n        return max;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b4d1020b4f540329cba6e4ac6e53456>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b4d1020b4f540329cba6e4ac6e53456>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            long freq = lst.Count(x => x == i);\n            if\
    \ (freq >= maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = i;\n            }\n        }\n        return maxVal;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a97a235f7653452ca8e4adad449c9d17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a97a235f7653452ca8e4adad449c9d17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > max) {\n                max = i;\n                freq\
    \ = 1;\n            }\n            else if (freq < i) {\n                freq++;\n\
    \            }\n        }\n        if (max > 0) {\n            return max;\n \
    \       }\n        return -1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <02cfc547b0c746cfb9dee6beb1859a38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <02cfc547b0c746cfb9dee6beb1859a38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n        }\n        if (freq > 0) {\n            long maxFreq\
    \ = freq;\n            foreach (var item in lst) {\n                if (item ==\
    \ max) {\n                    maxFreq--;\n                }\n            }\n \
    \           if (maxFreq > 0) {\n                return max;\n            }\n \
    \       }\n        return -1;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e41045f1ce5542d5b7e6c9e6d20d69b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e41045f1ce5542d5b7e6c9e6d20d69b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = -1;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > max) {\n                max =\
    \ freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6fc75210a7c3481d87b9e506a363aef3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6fc75210a7c3481d87b9e506a363aef3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        long freq = 0;\n\
    \        foreach (long i in lst) {\n            freq++;\n            if (freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = i;\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f7d05e56c9d840f6b5d15fef0ebd8033>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f7d05e56c9d840f6b5d15fef0ebd8033>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        long curVal =\
    \ lst[0];\n        long curFreq = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] > curVal) {\n                if (curFreq >= curVal)\
    \ {\n                    maxFreq = curFreq;\n                    maxVal = curVal;\n\
    \                }\n                curFreq = lst[i];\n                curVal\
    \ = lst[i];\n            } else if (lst[i] == curVal) {\n                curFreq++;\n\
    \            }\n        }\n        if (curFreq >= curVal) {\n            maxFreq\
    \ = curFreq;\n            maxVal = curVal;\n        }\n        return maxVal;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b8387cb388a46259177067e6ca36769>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b8387cb388a46259177067e6ca36769>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = -1;\n        long maxFreq = -1;\n        foreach (long i in\
    \ lst) {\n            long freq = lst.Count(x => x == i);\n            if (freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                max = i;\n  \
    \          }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5871b41e41fc4b8a90f242348c5c3282>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5871b41e41fc4b8a90f242348c5c3282>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > i) {\n                max = i;\n\
    \                freq = i;\n            }\n        }\n        return max;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b4d1020b4f540329cba6e4ac6e53456>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b4d1020b4f540329cba6e4ac6e53456>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            long freq = lst.Count(x => x == val);\n         \
    \   if (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            long freq = lst.Count(x => x == i);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = i;\n            }\n        }\n        return maxVal;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ee863bf9d9a4bcd8b1f477ac94bb288>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ee863bf9d9a4bcd8b1f477ac94bb288>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            foreach (long\
    \ i in lst) {\n                if (i == max) {\n                    if (freq >\
    \ i) {\n                        max = i;\n                    }\n            \
    \    }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3885ee0db49748e9be2f984f68db77db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3885ee0db49748e9be2f984f68db77db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (var item\
    \ in lst) {\n            long freq = lst.Count(x => x == item);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = item;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <370dff4f5691433dac60db6c1b261d6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <370dff4f5691433dac60db6c1b261d6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            if (maxFreq < i) maxFreq = i;\n            if (maxVal\
    \ < i) maxVal = i;\n        }\n        if (maxFreq > maxVal) return maxVal;\n\
    \        return -1;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8049320951414f248845eb6dd1458442>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8049320951414f248845eb6dd1458442>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq >= max) {\n            return -1;\n\
    \        }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a04227a418e4757b50be32b71bb1ecb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a04227a418e4757b50be32b71bb1ecb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            if (maxFreq < i && maxVal < i) {\n                maxVal\
    \ = i;\n                maxFreq = i;\n            }\n        }\n        return\
    \ maxVal;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26fe6bc24d1d448eae8ad81229f20f41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26fe6bc24d1d448eae8ad81229f20f41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long maxFreq = 0;\n        foreach (long i in\
    \ lst) {\n            if (i > max) {\n                max = i;\n             \
    \   maxFreq = 1;\n            }\n            else if (i > max && i > maxFreq)\
    \ {\n                maxFreq = i;\n            }\n        }\n        if (maxFreq\
    \ > 0) {\n            return max;\n        }\n        return -1;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2ec11cba793422d97a0c0a3890c1ede>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2ec11cba793422d97a0c0a3890c1ede>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            long freq = lst.Count(x => x == val);\n         \
    \   if (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (var item\
    \ in lst) {\n            long freq = lst.Count(x => x == item);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = item;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <370dff4f5691433dac60db6c1b261d6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <370dff4f5691433dac60db6c1b261d6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        if (max < 0) {\n            return -1;\n       \
    \ }\n        return max;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <624af69133044185958a56b8eb932ae1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <624af69133044185958a56b8eb932ae1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq >= max) {\n            return -1;\n\
    \        }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a04227a418e4757b50be32b71bb1ecb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a04227a418e4757b50be32b71bb1ecb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > max) {\n                max = i;\n            }\n   \
    \         freq++;\n        }\n        if (freq >= max) {\n            return -1;\n\
    \        }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f57e65325992453eb19202231eb4065d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f57e65325992453eb19202231eb4065d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (var item\
    \ in lst) {\n            if (item > maxVal) {\n                maxVal = item;\n\
    \                maxFreq = lst[lstIndex];\n            }\n            lstIndex++;\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdndriszq.cs(26,31): error CS0103: The name ''lstIndex'' does not exist
    in the current context

    /tmp/tmpdndriszq.cs(28,13): error CS0103: The name ''lstIndex'' does not exist
    in the current context

    '
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        long currFreq\
    \ = 0;\n        foreach (long val in lst) {\n            currFreq++;\n       \
    \     if (currFreq > maxFreq) {\n                maxFreq = currFreq;\n       \
    \         maxVal = val;\n            }\n        }\n        return maxVal;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d62bf7787b4439caab529834a0c5d4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d62bf7787b4439caab529834a0c5d4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > max) {\n                max =\
    \ freq;\n            }\n        }\n        if (freq > max) {\n            return\
    \ -1;\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b40bce18a294417bddb55a05714a7db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b40bce18a294417bddb55a05714a7db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = -1;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > max) {\n                max =\
    \ freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6fc75210a7c3481d87b9e506a363aef3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6fc75210a7c3481d87b9e506a363aef3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            long freq = lst.Count(x => x == val);\n         \
    \   if (freq >= maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0b8f68f60c7409da31ecd65242279dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0b8f68f60c7409da31ecd65242279dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \                freq = freq - 1;\n            }\n        }\n        if (freq\
    \ >= 0) {\n            return max;\n        }\n        return -1;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e483a65da9f4093bfa9f6251db12dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e483a65da9f4093bfa9f6251db12dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            long freq = lst.Count(x => x == val);\n         \
    \   if (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n        }\n        if (freq > 0) {\n            max =\
    \ Math.Max(max, freq);\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f7c00d6e57a4fa2bc26ac07ba7aab8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f7c00d6e57a4fa2bc26ac07ba7aab8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            if (maxFreq < i) maxFreq = i;\n            if (maxVal\
    \ < i) maxVal = i;\n        }\n        if (maxFreq == -1) return -1;\n       \
    \ return maxVal;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18d1d6fe65c4a56b3a0f407d4e3ab64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18d1d6fe65c4a56b3a0f407d4e3ab64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > max) {\n                max =\
    \ freq;\n            }\n        }\n        if (max > 0) {\n            foreach\
    \ (long i in lst) {\n                if (freq >= i) {\n                    freq--;\n\
    \                }\n            }\n        }\n        return max;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8c3cb29e1804620b6c3ce4bf6c1ff42>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8c3cb29e1804620b6c3ce4bf6c1ff42>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        long currFreq\
    \ = 0;\n        foreach (long val in lst) {\n            currFreq++;\n       \
    \     if (currFreq > maxFreq) {\n                maxFreq = currFreq;\n       \
    \         maxVal = val;\n            }\n        }\n        return maxVal;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d62bf7787b4439caab529834a0c5d4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d62bf7787b4439caab529834a0c5d4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long maxFreq = 0;\n        foreach (long i in\
    \ lst) {\n            long freq = lst.Count(x => x == i);\n            if (freq\
    \ > maxFreq) {\n                max = i;\n                maxFreq = freq;\n  \
    \          }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29aa1074fba948eeb52a77b36fb4455e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29aa1074fba948eeb52a77b36fb4455e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > 0) freq++;\n            if (freq > max) max = freq;\n\
    \        }\n        return max > 0 ? max : -1;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a693c760a9748408eeadc7e3d017d3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a693c760a9748408eeadc7e3d017d3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (freq > 0) {\n                if (freq >= i) {\n         \
    \           max = i;\n                    freq--;\n                }\n       \
    \     }\n            else {\n                max = i;\n                freq++;\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <18e9bfd243704c2e88fd5a32cb6f747b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <18e9bfd243704c2e88fd5a32cb6f747b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            long freq = lst.Count(x => x == val);\n         \
    \   if (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        long currFreq\
    \ = -1;\n        foreach (long val in lst) {\n            if (val > 0) {\n   \
    \             currFreq = lst.Count(x => x == val);\n                if (currFreq\
    \ > maxFreq) {\n                    maxFreq = currFreq;\n                    maxVal\
    \ = val;\n                }\n            }\n        }\n        return maxVal;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1f21a39f5fc4f1480915e430c215bb3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1f21a39f5fc4f1480915e430c215bb3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = -1;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > max) {\n                max =\
    \ freq;\n            }\n        }\n        if (max > 0) {\n            foreach\
    \ (long i in lst) {\n                if (i == max) {\n                    return\
    \ max;\n                }\n            }\n        }\n        return -1;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2687b93f95d461398e2d83ccece3dcd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2687b93f95d461398e2d83ccece3dcd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            long freq = lst.Count(x => x == i);\n            if\
    \ (freq >= maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = i;\n            }\n        }\n        return maxVal;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a97a235f7653452ca8e4adad449c9d17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a97a235f7653452ca8e4adad449c9d17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long maxCount = 0;\n        long maxFreq = 0;\n\
    \        foreach (long i in lst) {\n            long count = lst.Count(x => x\
    \ == i);\n            if (count > maxCount) {\n                max = i;\n    \
    \            maxCount = count;\n                maxFreq = count;\n           \
    \ }\n        }\n        if (maxCount == 0) {\n            return -1;\n       \
    \ }\n        return max;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d395ba83197d450f8e995944313f1f77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d395ba83197d450f8e995944313f1f77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > 0 && freq > 0) {\n                freq--;\n         \
    \   }\n            if (freq > 0) {\n                max = Math.Max(max, i);\n\
    \                freq++;\n            }\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e672d8a29dfe42b083b0318105942657>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e672d8a29dfe42b083b0318105942657>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq += i;\n            if (freq > max) {\n                max\
    \ = freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c20b6a785ed543a29e5e40da74c2f705>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c20b6a785ed543a29e5e40da74c2f705>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        long freq = 0;\n\
    \        foreach (long i in lst) {\n            freq++;\n            if (freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = i;\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f7d05e56c9d840f6b5d15fef0ebd8033>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f7d05e56c9d840f6b5d15fef0ebd8033>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq += 1;\n            if (freq > max) {\n                max\
    \ = freq;\n            }\n        }\n        return max > 0 ? max : -1;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2446ca4748545699b6cb429d6b518c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2446ca4748545699b6cb429d6b518c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            max = max / freq;\n\
    \        }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f12870b2dae42718ab714b626002b50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f12870b2dae42718ab714b626002b50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq >= max) {\n            return max;\n\
    \        }\n        long max2 = 0;\n        long freq2 = 0;\n        foreach (long\
    \ i in lst) {\n            freq2++;\n            if (freq2 >= freq) {\n      \
    \          max2 = i;\n            }\n        }\n        return max2;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7d16a06a97741fa8976bc6011971bd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7d16a06a97741fa8976bc6011971bd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            if (maxFreq < 1 || maxFreq > i.GetHashCode()) {\n \
    \               maxFreq = i.GetHashCode();\n                maxVal = i;\n    \
    \        }\n        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c484ce38b40d4f8f830ed1d0407d754b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c484ce38b40d4f8f830ed1d0407d754b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            max = max / freq;\n\
    \        }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f12870b2dae42718ab714b626002b50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f12870b2dae42718ab714b626002b50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            if (maxFreq < i && maxVal < i) {\n                maxVal\
    \ = i;\n                maxFreq = i;\n            }\n            else if (maxFreq\
    \ == i && maxVal < i) {\n                maxVal = i;\n                maxFreq\
    \ = i;\n            }\n            else if (maxFreq == i && maxVal == i) {\n \
    \               maxFreq++;\n            }\n        }\n        return maxVal;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a8570ff891a4e5b859f27524d683a21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a8570ff891a4e5b859f27524d683a21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            max = freq > max\
    \ ? freq : max;\n        }\n        return max;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <81918638dafb467ba5affa3a459f634e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <81918638dafb467ba5affa3a459f634e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        long curVal =\
    \ lst[0];\n        long curFreq = 1;\n        foreach (long val in lst) {\n  \
    \          if (val == curVal) {\n                curFreq++;\n            } else\
    \ {\n                if (curFreq > maxFreq) {\n                    maxFreq = curFreq;\n\
    \                    maxVal = curVal;\n                }\n                curVal\
    \ = val;\n                curFreq = 1;\n            }\n        }\n        if (curFreq\
    \ > maxFreq) {\n            maxFreq = curFreq;\n            maxVal = curVal;\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d10da60442d948c79492913f35c5d6bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d10da60442d948c79492913f35c5d6bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            long res = -1;\n\
    \            foreach (long i in lst) {\n                if (i == max) {\n    \
    \                res = i;\n                    break;\n                }\n   \
    \         }\n            return res;\n        }\n        return -1;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0216e16493cf4654804a398f34a1de4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0216e16493cf4654804a398f34a1de4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            if (maxFreq < i) maxFreq = i;\n            if (maxVal\
    \ < i) maxVal = i;\n        }\n        if (maxFreq > maxVal) return maxVal;\n\
    \        return maxFreq;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <950d65950c6048a984e2ea47a49b553d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <950d65950c6048a984e2ea47a49b553d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            foreach (long\
    \ i in lst) {\n                if (i == max) {\n                    freq--;\n\
    \                }\n            }\n        }\n        return max;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66596a97bdee45b9b6562c2a7fc23cbc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66596a97bdee45b9b6562c2a7fc23cbc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq += item;\n            if (freq > max) {\n              \
    \  max = freq;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <913102def4784d17aaadf7c545ac9ca8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <913102def4784d17aaadf7c545ac9ca8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n        }\n        if (freq >= max) {\n            return\
    \ -1;\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <62b62672e0c143ce8c3764e803d333e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <62b62672e0c143ce8c3764e803d333e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = -1;\n        long freq = 0;\n        foreach (var item in\
    \ lst) {\n            if (item == 0) continue;\n            freq++;\n        \
    \    if (freq > max) {\n                max = item;\n            }\n        }\n\
    \        return max;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f02293fcfd32413990984604d5fff483>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f02293fcfd32413990984604d5fff483>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        long freq = -1;\n\
    \        foreach (var item in lst) {\n            freq++;\n            if (freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = item;\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de1337a4631e49f4a11f121c7475e0f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de1337a4631e49f4a11f121c7475e0f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq += 1;\n            if (freq > item.Value) {\n          \
    \      max = item;\n                freq = item.Value;\n            }\n      \
    \  }\n        if (max > 0)\n            return max;\n        return -1;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvgn3j5p1.cs(25,29): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpvgn3j5p1.cs(27,29): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > i) {\n                max = i;\n\
    \                freq = i;\n            }\n        }\n        return max;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b4d1020b4f540329cba6e4ac6e53456>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b4d1020b4f540329cba6e4ac6e53456>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            long freq = lst.Count(x => x == val);\n         \
    \   if (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq >= max) {\n            return -1;\n\
    \        }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a04227a418e4757b50be32b71bb1ecb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a04227a418e4757b50be32b71bb1ecb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n        }\n        if (freq > 0) {\n            foreach\
    \ (var item in lst) {\n                if (item == max) {\n                  \
    \  freq--;\n                }\n            }\n        }\n        return (freq\
    \ > 0) ? max : -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12fc8d5419b445ed8e74590fbfdeadf8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12fc8d5419b445ed8e74590fbfdeadf8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            long freq = lst.Count(x => x == i);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = i;\n            }\n        }\n        return maxVal;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ee863bf9d9a4bcd8b1f477ac94bb288>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ee863bf9d9a4bcd8b1f477ac94bb288>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            long maxfreq =\
    \ freq;\n            foreach (long i in lst) {\n                if (freq > maxfreq)\
    \ {\n                    maxfreq = freq;\n                }\n                freq--;\n\
    \            }\n            return max;\n        }\n        return -1;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73f28f23b2834bc8815ef0147146149d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73f28f23b2834bc8815ef0147146149d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long maxFreq = 0;\n        long maxVal = -1;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n                maxFreq = 1;\n            } else if (i > max) {\n\
    \                maxFreq++;\n            }\n            if (maxFreq > maxVal)\
    \ {\n                maxVal = maxFreq;\n            }\n        }\n        return\
    \ maxVal;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <041a39f821a2439eb9bf8108209bbc09>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <041a39f821a2439eb9bf8108209bbc09>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > 0) freq++;\n            if (freq > max) max = freq;\n\
    \        }\n        return max > 0 ? max : -1;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a693c760a9748408eeadc7e3d017d3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a693c760a9748408eeadc7e3d017d3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n        }\n        if (freq >= max) {\n            return\
    \ max;\n        }\n        long max2 = 0;\n        long freq2 = 0;\n        foreach\
    \ (var item in lst) {\n            freq2++;\n            if (item > max2) {\n\
    \                max2 = item;\n            }\n        }\n        if (freq2 >=\
    \ max2) {\n            return max2;\n        }\n        long max3 = 0;\n     \
    \   long freq3 = 0;\n        foreach (var item in lst) {\n            freq3++;\n\
    \            if (item > max3) {\n                max3 = item;\n            }\n\
    \        }\n        if (freq3 >= max3) {\n            return max3;\n        }\n\
    \        return -1;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7e785430f8304e77a7ff2a510f180b44>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7e785430f8304e77a7ff2a510f180b44>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        long currFreq\
    \ = -1;\n        foreach (long val in lst) {\n            currFreq = GetFreq(val,\
    \ lst);\n            if (currFreq > maxFreq) {\n                maxFreq = currFreq;\n\
    \                maxVal = val;\n            }\n        }\n        return maxVal;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6xcnh72s.cs(25,24): error CS0103: The name ''GetFreq'' does not exist
    in the current context

    '
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            long maxfreq =\
    \ freq;\n            foreach (long i in lst) {\n                if (freq > maxfreq)\
    \ {\n                    maxfreq = freq;\n                }\n                freq--;\n\
    \            }\n            return max;\n        }\n        return -1;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73f28f23b2834bc8815ef0147146149d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73f28f23b2834bc8815ef0147146149d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = -1;\n        long maxCount = 0;\n        long maxFreq = 0;\n\
    \        foreach (long i in lst) {\n            long freq = lst.Count(x => x ==\
    \ i);\n            if (freq > maxFreq) {\n                maxFreq = freq;\n  \
    \              max = i;\n                maxCount = freq;\n            } else\
    \ if (freq == maxFreq) {\n                if (freq > maxCount) {\n           \
    \         maxFreq = freq;\n                    max = i;\n                    maxCount\
    \ = freq;\n                }\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a4a83f79b80475b9f6cfcb0f8ada333>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a4a83f79b80475b9f6cfcb0f8ada333>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n        }\n        if (freq > 0) {\n            max =\
    \ Math.Max(max, lst[freq - 1]);\n        }\n        return max;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbg0fdugn.cs(30,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq >= max) {\n            return -1;\n\
    \        }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a04227a418e4757b50be32b71bb1ecb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a04227a418e4757b50be32b71bb1ecb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long maxFreq = 0;\n        foreach (long i in\
    \ lst) {\n            long freq = lst.Count(x => x == i);\n            if (freq\
    \ >= maxFreq) {\n                max = i;\n                maxFreq = freq;\n \
    \           }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f720557b80841acb5a2bed88dcc0c42>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f720557b80841acb5a2bed88dcc0c42>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            if (item > 0 && item == freq) {\n                max = Math.Max(max,\
    \ item);\n            }\n            freq++;\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <576a84879c1f404eb7d08409e6fa1016>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <576a84879c1f404eb7d08409e6fa1016>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            long res = -1;\n\
    \            foreach (long i in lst) {\n                if (i == max) {\n    \
    \                res = i;\n                    break;\n                }\n   \
    \         }\n            return res;\n        }\n        return -1;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0216e16493cf4654804a398f34a1de4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0216e16493cf4654804a398f34a1de4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > 0) freq++;\n            if (freq > max) max = freq;\n\
    \        }\n        return max > 0 ? max : -1;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a693c760a9748408eeadc7e3d017d3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a693c760a9748408eeadc7e3d017d3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > 0) freq++;\n            if (freq > max) max = freq;\n\
    \        }\n        if (max > 0) return max;\n        return -1;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96433ad56d4a416b8bfe3d4ae55ee75a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96433ad56d4a416b8bfe3d4ae55ee75a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n        }\n        if (freq > 0) {\n            foreach\
    \ (var item in lst) {\n                if (item == max) {\n                  \
    \  if (freq > item.Value) {\n                        max = item;\n           \
    \         }\n                }\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptyd4x1kr.cs(32,37): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            long freq = lst.Count(x => x == val);\n         \
    \   if (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > i) {\n                max = i;\n\
    \                freq = freq - i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54f74c7f08f74e19944988cb9fa8a943>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54f74c7f08f74e19944988cb9fa8a943>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            long freq = lst.Count(x => x == val);\n         \
    \   if (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (freq > 0) {\n                if (freq >= i) {\n         \
    \           freq = freq - i;\n                } else {\n                    freq\
    \ = 0;\n                }\n            } else {\n                freq = i;\n \
    \           }\n            if (freq > max) {\n                max = freq;\n  \
    \          }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c6ee275a907e4e8284933aab64947530>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c6ee275a907e4e8284933aab64947530>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        long currVal =\
    \ lst[0];\n        long currFreq = lst[0];\n        foreach (long val in lst)\
    \ {\n            if (val > 0) {\n                currFreq++;\n               \
    \ if (currFreq > currVal) {\n                    currVal = val;\n            \
    \        currFreq = val;\n                }\n            }\n        }\n      \
    \  if (currFreq > maxFreq) {\n            maxFreq = currFreq;\n            maxVal\
    \ = currVal;\n        }\n        return maxVal;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9433dd79db7d4e5b82014fde130bdcaf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9433dd79db7d4e5b82014fde130bdcaf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            long freq = lst.Count(x => x == val);\n         \
    \   if (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            long freq = lst.Count(x => x == i);\n            if\
    \ (freq >= maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = i;\n            }\n        }\n        return maxVal;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a97a235f7653452ca8e4adad449c9d17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a97a235f7653452ca8e4adad449c9d17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > 0) freq++;\n            if (freq > max) max = freq;\n\
    \        }\n        if (max > 0) return max;\n        return -1;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96433ad56d4a416b8bfe3d4ae55ee75a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96433ad56d4a416b8bfe3d4ae55ee75a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > max) {\n                max =\
    \ freq;\n            }\n            if (freq == i) {\n                freq--;\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4dc57c7490434a2294543a8e122fea53>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4dc57c7490434a2294543a8e122fea53>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            long freq = lst.Count(x => x == i);\n            if\
    \ (freq >= maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = i;\n            }\n        }\n        return maxVal;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a97a235f7653452ca8e4adad449c9d17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a97a235f7653452ca8e4adad449c9d17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long maxCount = 0;\n        foreach (var item\
    \ in lst) {\n            if (item > max) {\n                max = item;\n    \
    \            maxCount = 1;\n            }\n            else if (item == max) {\n\
    \                maxCount++;\n            }\n        }\n        if (maxCount ==\
    \ 0) {\n            return -1;\n        }\n        long maxCount2 = 0;\n     \
    \   foreach (var item in lst) {\n            if (item == max) {\n            \
    \    maxCount2++;\n            }\n        }\n        if (maxCount2 > maxCount)\
    \ {\n            return -1;\n        }\n        return max;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <43f2865a1d714659af74e89c84221380>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <43f2865a1d714659af74e89c84221380>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (var item\
    \ in lst) {\n            long freq = lst.Count(x => x == item);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = item;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <370dff4f5691433dac60db6c1b261d6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <370dff4f5691433dac60db6c1b261d6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq >= max) {\n            return max;\n\
    \        }\n        long res = -1;\n        foreach (long i in lst) {\n      \
    \      if (i > max) {\n                long temp = max;\n                max =\
    \ i;\n                if (freq > temp) {\n                    res = temp;\n  \
    \              }\n            }\n        }\n        return res;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <51753f60f7f1461a90c515b238a92b95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <51753f60f7f1461a90c515b238a92b95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (var item\
    \ in lst) {\n            if (item == 0) {\n                continue;\n       \
    \     }\n            long freq = lst.Count(x => x == item);\n            if (freq\
    \ >= maxFreq) {\n                maxFreq = freq;\n                maxVal = item;\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <55aaa8dff34c46028c1b4b2beb8917ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <55aaa8dff34c46028c1b4b2beb8917ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq >= max) {\n            return -1;\n\
    \        }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a04227a418e4757b50be32b71bb1ecb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a04227a418e4757b50be32b71bb1ecb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            long freq = lst.Count(x => x == i);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = i;\n            }\n        }\n        return maxVal;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ee863bf9d9a4bcd8b1f477ac94bb288>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ee863bf9d9a4bcd8b1f477ac94bb288>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (var item\
    \ in lst) {\n            long freq = lst.Count(i => i == item);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = item;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a1fb51f32644d5bb71b38d78c78d6a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a1fb51f32644d5bb71b38d78c78d6a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (freq > 0) {\n                if (freq >= i) {\n         \
    \           freq = freq - i;\n                } else {\n                    freq\
    \ = 0;\n                }\n            } else {\n                freq = i;\n \
    \           }\n            if (freq > max) {\n                max = freq;\n  \
    \          }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c6ee275a907e4e8284933aab64947530>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c6ee275a907e4e8284933aab64947530>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > 0) freq++;\n            if (freq > max) {\n         \
    \       max = freq;\n            }\n        }\n        if (max > 0) return max;\n\
    \        return -1;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <56fbc88ed79148c6996e68c990dccee4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <56fbc88ed79148c6996e68c990dccee4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > 0) freq++;\n            if (freq > max) {\n         \
    \       max = freq;\n            }\n        }\n        if (max > 0) return max;\n\
    \        return -1;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <56fbc88ed79148c6996e68c990dccee4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <56fbc88ed79148c6996e68c990dccee4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > max) {\n                max =\
    \ freq;\n            }\n        }\n        if (freq > max) {\n            return\
    \ -1;\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b40bce18a294417bddb55a05714a7db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b40bce18a294417bddb55a05714a7db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n        }\n        if (freq >= max) {\n            return\
    \ -1;\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <62b62672e0c143ce8c3764e803d333e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <62b62672e0c143ce8c3764e803d333e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            long freq = lst.Count(x => x == i);\n            if\
    \ (freq >= maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = i;\n            }\n        }\n        return maxVal;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a97a235f7653452ca8e4adad449c9d17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a97a235f7653452ca8e4adad449c9d17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > 0) freq++;\n            if (freq > max) max = freq;\n\
    \        }\n        if (max > 0) return max;\n        return -1;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96433ad56d4a416b8bfe3d4ae55ee75a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96433ad56d4a416b8bfe3d4ae55ee75a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > i) {\n                max = i;\n\
    \                freq = freq - i;\n            }\n        }\n        if (max >\
    \ 0)\n            return max;\n        return -1;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e93b1ec67394732a330990919188805>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e93b1ec67394732a330990919188805>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            long max2 = max;\n\
    \            long max3 = (long)Math.Pow(max, 2);\n            long max4 = (long)Math.Pow(max,\
    \ 3);\n            long max5 = (long)Math.Pow(max, 4);\n            long max6\
    \ = (long)Math.Pow(max, 5);\n            long max7 = (long)Math.Pow(max, 6);\n\
    \            long max8 = (long)Math.Pow(max, 7);\n            long max9 = (long)Math.Pow(max,\
    \ 8);\n            long max10 = (long)Math.Pow(max, 9);\n            long max11\
    \ = (long)Math.Pow(max, 10);\n            long max12 = (long)Math.Pow(max, 11);\n\
    \            long max13 = (long)Math.Pow(max, 12);\n            long max14 = (long)Math.Pow(max,\
    \ 13);\n            long max15 = (long)Math.Pow(max, 14);\n            long max16\
    \ = (long)Math.Pow(max, 15);\n            long max17 = (long)Math.Pow(max, 16);\n\
    \            long max18 = (long)Math.Pow(max, 17);\n            long max19 = (long)Math.Pow(max,\
    \ 18);\n            long max20 = (long)Math.Pow(max, 19);\n            long max21\
    \ = (long)Math.Pow(max, 20);\n            long max22 = (long)Math.Pow(max, 21);\n\
    \            long max23 = (long)Math.Pow(max, 22);\n            long max24 = (long)Math.Pow(max,\
    \ 23);\n            long max25 = (long)Math.Pow(max, 24);\n            long max26\
    \ = (long)Math.Pow(max, 25);\n            long max27 = (long)Math.Pow(max, 26);\n\
    \            long max28 = (long)Math.Pow(max, 27);\n            long max29 = (long)Math.Pow(max,\
    \ 28);\n            long max30 = (long)Math.Pow(max, 29);\n            long max31\
    \ = (long)Math.Pow(max, 30);\n            long max32 = (long)Math.Pow(max, 31);\n\
    \            long max33 = (long)Math.Pow(max, 32);\n            long max34 = (long)Math.Pow(max,\
    \ 33);\n            long max35 = (long)Math.Pow(max, 34);\n            long max36\
    \ = (long)Math.Pow(max, 35);\n            long max37 = (long)Math.Pow(max, 36);\n\
    \            long max38 = (long)Math.Pow(max, 37);\n            long max39 = (long)Math.Pow(max,\
    \ 38);\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzq1o30kd.cs(70,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpzq1o30kd.cs(98,2): error CS1513: } expected

    '
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq += i;\n            if (freq > max) {\n                max\
    \ = freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c20b6a785ed543a29e5e40da74c2f705>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c20b6a785ed543a29e5e40da74c2f705>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        long currVal =\
    \ lst[0];\n        long currFreq = 1;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] > currVal) {\n                currFreq++;\n \
    \           }\n            if (currFreq > maxFreq) {\n                maxFreq\
    \ = currFreq;\n                maxVal = currVal;\n            }\n            currVal\
    \ = lst[i];\n            currFreq = 1;\n        }\n        return maxVal;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da3f0714486b444dbfa46c175f6c3ee0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da3f0714486b444dbfa46c175f6c3ee0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > 0 && freq > 0) {\n                freq--;\n         \
    \   }\n            if (freq > 0) {\n                max = Math.Max(max, i);\n\
    \            }\n            freq++;\n        }\n        return max > 0 ? max :\
    \ -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0768f22ef0c4432b88c07033fb52b02b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0768f22ef0c4432b88c07033fb52b02b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > 0) freq++;\n            if (freq > max) max = freq;\n\
    \        }\n        if (max > 0) return max;\n        return -1;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96433ad56d4a416b8bfe3d4ae55ee75a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96433ad56d4a416b8bfe3d4ae55ee75a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n        }\n        if (freq >= max) {\n            return\
    \ -1;\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <62b62672e0c143ce8c3764e803d333e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <62b62672e0c143ce8c3764e803d333e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > i) {\n                max = i;\n\
    \                freq = i;\n            }\n        }\n        return max;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b4d1020b4f540329cba6e4ac6e53456>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b4d1020b4f540329cba6e4ac6e53456>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            long freq = lst.Count(x => x == i);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = i;\n            }\n        }\n        return maxVal;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ee863bf9d9a4bcd8b1f477ac94bb288>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ee863bf9d9a4bcd8b1f477ac94bb288>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n            if (freq > item) {\n                freq =\
    \ item;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73776adf9c3046108a71b9a7e122e9c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73776adf9c3046108a71b9a7e122e9c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        long curVal =\
    \ lst[0];\n        long curFreq = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] > curVal) {\n                curVal = lst[i];\n\
    \                curFreq = lst[i];\n            } else if (lst[i] == curVal) {\n\
    \                curFreq++;\n            }\n            if (curFreq > maxFreq)\
    \ {\n                maxFreq = curFreq;\n                maxVal = curVal;\n  \
    \          }\n        }\n        return maxVal;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45c580bf6e1b4517be3081c1969c73be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45c580bf6e1b4517be3081c1969c73be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n        }\n        if (freq > 0) {\n            max =\
    \ Math.Max(max, freq);\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f7c00d6e57a4fa2bc26ac07ba7aab8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f7c00d6e57a4fa2bc26ac07ba7aab8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = -1;\n        long maxFreq = -1;\n        foreach (long i in\
    \ lst) {\n            if (maxFreq < lstFrequency(i)) {\n                max =\
    \ i;\n                maxFreq = lstFrequency(i);\n            }\n        }\n \
    \       return max;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1vxi51a3.cs(24,27): error CS0103: The name ''lstFrequency'' does not exist
    in the current context

    /tmp/tmp1vxi51a3.cs(26,27): error CS0103: The name ''lstFrequency'' does not exist
    in the current context

    '
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = -1;\n        long freq = 0;\n        foreach (var item in\
    \ lst) {\n            if (item == 0) {\n                continue;\n          \
    \  }\n            freq++;\n            if (freq > max) {\n                max\
    \ = item;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78c9a6269973466c8ea7f23d84684249>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78c9a6269973466c8ea7f23d84684249>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > i) {\n                max = i;\n\
    \                freq = i;\n            }\n        }\n        return max;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b4d1020b4f540329cba6e4ac6e53456>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b4d1020b4f540329cba6e4ac6e53456>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq += i;\n            if (freq > max) {\n                max\
    \ = freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c20b6a785ed543a29e5e40da74c2f705>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c20b6a785ed543a29e5e40da74c2f705>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n            if (item == max) {\n                freq++;\n\
    \            }\n        }\n        return (freq > max) ? -1 : max;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72f50d1fb15a4add906c3769044a02c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72f50d1fb15a4add906c3769044a02c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq >= max) {\n            return max;\n\
    \        }\n        long max2 = 0;\n        long freq2 = 0;\n        foreach (long\
    \ i in lst) {\n            freq2++;\n            if (freq2 >= freq) {\n      \
    \          max2 = i;\n            }\n        }\n        return max2;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7d16a06a97741fa8976bc6011971bd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7d16a06a97741fa8976bc6011971bd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            long maxfreq =\
    \ freq;\n            foreach (long i in lst) {\n                if (freq > maxfreq)\
    \ {\n                    maxfreq = freq;\n                }\n                freq--;\n\
    \            }\n            return max;\n        }\n        return -1;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73f28f23b2834bc8815ef0147146149d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73f28f23b2834bc8815ef0147146149d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = -1;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq += i;\n            if (freq > max) {\n                max\
    \ = freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b61a791420754d06ac47c43f1b8eeff9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b61a791420754d06ac47c43f1b8eeff9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            if (maxFreq < i) maxFreq = i;\n            if (maxVal\
    \ < i) maxVal = i;\n        }\n        return maxVal;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1da27f824f69414b89c8da96437a0290>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1da27f824f69414b89c8da96437a0290>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2eb6e4ce7eb14e6bb7c2b753e6c73c48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            long max = lst[0];\n\
    \            long freq = lst[0];\n            foreach (long i in lst) {\n    \
    \            if (i > max) {\n                    max = i;\n                }\n\
    \                freq++;\n            }\n            if (freq >= freq) {\n   \
    \             return max;\n            }\n        }\n        return -1;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn0l2o2yw.cs(30,18): error CS0136: A local or parameter named ''max'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpn0l2o2yw.cs(31,18): error CS0136: A local or parameter named ''freq''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpn0l2o2yw.cs(38,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq > maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0c7b39c8e4340849afc42bb342064bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0c7b39c8e4340849afc42bb342064bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > i) {\n                max = i;\n\
    \                freq = freq - i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54f74c7f08f74e19944988cb9fa8a943>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54f74c7f08f74e19944988cb9fa8a943>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= val) {\n                    maxVal\
    \ = val;\n                    maxFreq = freq;\n                }\n           \
    \ }\n        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aeea9882f8044121b1bed5fcd502dd8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aeea9882f8044121b1bed5fcd502dd8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > 0)\n                freq++;\n            if (freq > i)\n\
    \                max = i;\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <804430c21807419fae489b0542e874d2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <804430c21807419fae489b0542e874d2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        long currFreq\
    \ = 0;\n        foreach (long val in lst) {\n            currFreq++;\n       \
    \     if (currFreq > maxFreq) {\n                maxFreq = currFreq;\n       \
    \         maxVal = val;\n            }\n        }\n        return maxVal;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d62bf7787b4439caab529834a0c5d4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d62bf7787b4439caab529834a0c5d4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n        }\n        if (freq >= max) {\n            return\
    \ -1;\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <62b62672e0c143ce8c3764e803d333e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <62b62672e0c143ce8c3764e803d333e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794485
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = -1;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > max) {\n                max =\
    \ freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6fc75210a7c3481d87b9e506a363aef3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6fc75210a7c3481d87b9e506a363aef3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            long freq = lst.Count(x => x == val);\n         \
    \   if (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n            if (freq > item) {\n                freq =\
    \ item;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73776adf9c3046108a71b9a7e122e9c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73776adf9c3046108a71b9a7e122e9c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            long freq = lst.Count(x => x == val);\n         \
    \   if (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            freq++;\n            if (item > max) {\n                max =\
    \ item;\n            }\n        }\n        if (freq > 0) {\n            long res\
    \ = -1;\n            foreach (var item in lst) {\n                if (item ==\
    \ max) {\n                    res = item;\n                    break;\n      \
    \          }\n            }\n            return res;\n        }\n        return\
    \ -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b9fcdd611ab4c4fa6858e3d7dab0334>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b9fcdd611ab4c4fa6858e3d7dab0334>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        long currFreq\
    \ = 0;\n        foreach (long i in lst) {\n            if (currFreq < i) {\n \
    \               currFreq = i;\n            }\n            if (currFreq > maxFreq)\
    \ {\n                maxFreq = currFreq;\n                maxVal = i;\n      \
    \      }\n        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbca7fe579604760ab9266e538919177>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbca7fe579604760ab9266e538919177>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > max) {\n                max =\
    \ freq;\n            }\n        }\n        if (max > 0) {\n            foreach\
    \ (long i in lst) {\n                if (freq > i) {\n                    freq--;\n\
    \                }\n            }\n        }\n        return max;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d93caddd19c457d83547e9fc32ec5bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d93caddd19c457d83547e9fc32ec5bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (var item\
    \ in lst) {\n            long freq = lst.Count(i => i == item);\n            if\
    \ (freq >= maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = item;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a91ff900f4a74fd59e187fc0e076520e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a91ff900f4a74fd59e187fc0e076520e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > i) {\n                max = i;\n\
    \                freq = freq - i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54f74c7f08f74e19944988cb9fa8a943>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54f74c7f08f74e19944988cb9fa8a943>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq += i;\n            if (freq > max) {\n                max\
    \ = freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c20b6a785ed543a29e5e40da74c2f705>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c20b6a785ed543a29e5e40da74c2f705>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        long currVal =\
    \ lst[0];\n        long currFreq = lst[0];\n        foreach (long val in lst)\
    \ {\n            if (val == currVal) {\n                currFreq++;\n        \
    \    } else {\n                if (currFreq > maxFreq) {\n                   \
    \ maxFreq = currFreq;\n                    maxVal = currVal;\n               \
    \ }\n                currFreq = 1;\n                currVal = val;\n         \
    \   }\n        }\n        if (currFreq > maxFreq) {\n            maxFreq = currFreq;\n\
    \            maxVal = currVal;\n        }\n        return maxVal;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <185b2e31a00b4a7494a7603770fd0136>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <185b2e31a00b4a7494a7603770fd0136>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > 0) freq++;\n            if (freq > max) {\n         \
    \       max = freq;\n            }\n        }\n        return max;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0fd378b03f9b4611a55929ad77f531b7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0fd378b03f9b4611a55929ad77f531b7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq > maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0c7b39c8e4340849afc42bb342064bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0c7b39c8e4340849afc42bb342064bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq >= max) {\n            return max;\n\
    \        }\n        long max2 = 0;\n        long freq2 = 0;\n        foreach (long\
    \ i in lst) {\n            freq2++;\n            if (freq2 >= freq) {\n      \
    \          max2 = i;\n            }\n        }\n        return max2;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7d16a06a97741fa8976bc6011971bd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7d16a06a97741fa8976bc6011971bd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            long freq = lst.Count(x => x == val);\n         \
    \   if (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (var item\
    \ in lst) {\n            if (item == 0) continue;\n            long freq = lst.Count(x\
    \ => x == item);\n            if (freq >= maxFreq) {\n                maxFreq\
    \ = freq;\n                maxVal = item;\n            }\n        }\n        return\
    \ maxVal;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <869ebe80547949e0b9ea94fad3cbb38f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <869ebe80547949e0b9ea94fad3cbb38f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            if (maxFreq < 1 || maxFreq > i.GetHashCode()) {\n \
    \               maxFreq = i.GetHashCode();\n                maxVal = i;\n    \
    \        }\n        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c484ce38b40d4f8f830ed1d0407d754b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c484ce38b40d4f8f830ed1d0407d754b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (var item in lst)\
    \ {\n            if (item > 0 && item == freq) {\n                max = Math.Max(max,\
    \ item);\n            }\n            freq++;\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
    \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
    \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
    \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
    \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <576a84879c1f404eb7d08409e6fa1016>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <576a84879c1f404eb7d08409e6fa1016>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (var item\
    \ in lst) {\n            long freq = lst.Count(x => x == item);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = item;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <370dff4f5691433dac60db6c1b261d6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <370dff4f5691433dac60db6c1b261d6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            max = Math.Max(max,\
    \ freq);\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04b3c6df711a42a5945b45c6bd61183d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04b3c6df711a42a5945b45c6bd61183d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            long freq = lst.Count(x => x == val);\n         \
    \   if (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <449b795f25b640e9921b7f768e1eb875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ val in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= val) {\n                    if (freq\
    \ > maxFreq) {\n                        maxFreq = freq;\n                    \
    \    maxVal = val;\n                    }\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a466a232c5ad4d11abcb5a56de75f55e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a466a232c5ad4d11abcb5a56de75f55e>:0 \n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            long freq = lst.Count(x => x == i);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = i;\n            }\n        }\n        return maxVal;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ee863bf9d9a4bcd8b1f477ac94bb288>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ee863bf9d9a4bcd8b1f477ac94bb288>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = -1;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > max) {\n                max =\
    \ freq;\n            }\n        }\n        if (max > 0 && freq >= max) {\n   \
    \         return max;\n        }\n        return -1;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54184a9a8ee3414397010b31a3a44912>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54184a9a8ee3414397010b31a3a44912>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8e26e24b20041e08377b48774ec3b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        long freq = 0;\n\
    \        foreach (long val in lst) {\n            freq++;\n            if (val\
    \ > 0) {\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <188487cb24fc4f94a329b2038ea62441>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <188487cb24fc4f94a329b2038ea62441>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > 0) freq++;\n            if (freq > max) max = freq;\n\
    \        }\n        if (max > 0) return max;\n        return -1;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96433ad56d4a416b8bfe3d4ae55ee75a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96433ad56d4a416b8bfe3d4ae55ee75a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794486
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = -1;\n        long maxFreq = -1;\n        foreach (long i in\
    \ lst) {\n            long freq = lst.Count(x => x == i);\n            if (freq\
    \ >= maxFreq) {\n                max = i;\n                maxFreq = freq;\n \
    \           }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5de3f589d7e74b849fcdb0d2033a5041>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5de3f589d7e74b849fcdb0d2033a5041>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            max = Math.Max(max,\
    \ lst[freq - 1]);\n        }\n        return max;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppjj08c68.cs(30,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            long freq = lst.Count(x => x == i);\n            if\
    \ (freq >= maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = i;\n            }\n        }\n        return maxVal;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a97a235f7653452ca8e4adad449c9d17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a97a235f7653452ca8e4adad449c9d17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (var item\
    \ in lst) {\n            if (item == 0) {\n                continue;\n       \
    \     }\n            long freq = lst.Count(x => x == item);\n            if (freq\
    \ > maxFreq) {\n                maxFreq = freq;\n                maxVal = item;\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c820ba46803f4a629b34ca0b0d89c69f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c820ba46803f4a629b34ca0b0d89c69f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \                freq = freq - 1;\n            }\n        }\n        if (freq\
    \ >= 0) {\n            return max;\n        }\n        return -1;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e483a65da9f4093bfa9f6251db12dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e483a65da9f4093bfa9f6251db12dba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (freq > max) {\n                max =\
    \ freq;\n            }\n            if (i == 0) {\n                freq--;\n \
    \           }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09e3e43205b44b82b2e00b1da73cadd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09e3e43205b44b82b2e00b1da73cadd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long\
    \ i in lst) {\n            long freq = lst.Count(x => x == i);\n            if\
    \ (freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = i;\n            }\n        }\n        return maxVal;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ee863bf9d9a4bcd8b1f477ac94bb288>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ee863bf9d9a4bcd8b1f477ac94bb288>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq += i;\n            if (freq > max) {\n                max\
    \ = freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c20b6a785ed543a29e5e40da74c2f705>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c20b6a785ed543a29e5e40da74c2f705>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq >= max) {\n            return -1;\n\
    \        }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
    \ (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a04227a418e4757b50be32b71bb1ecb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a04227a418e4757b50be32b71bb1ecb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq > 0) {\n            max = Math.Max(max,\
    \ freq);\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L}))) ==\
    \ (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04b3c6df711a42a5945b45c6bd61183d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04b3c6df711a42a5945b45c6bd61183d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794483
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq >= max) {\n            return max;\n\
    \        }\n        long max2 = 0;\n        long freq2 = 0;\n        foreach (long\
    \ i in lst) {\n            freq2++;\n            if (freq2 >= freq) {\n      \
    \          max2 = i;\n            }\n        }\n        return max2;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7d16a06a97741fa8976bc6011971bd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7d16a06a97741fa8976bc6011971bd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794484
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new\
    \ long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    //\
    \ (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
    \ (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n\
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n\
    \        long max = -1;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > max) {\n                max = i;\n                freq\
    \ = 1;\n            }\n            else if (freq > 0) {\n                freq++;\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L,\
    \ (long)5L, (long)5L, (long)5L, (long)1L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)4L, (long)1L, (long)4L, (long)4L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)3L})))\
    \ == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L}))) == (8L));\n \
    \   Debug.Assert(Search((new List<long>(new long[]{(long)2L, (long)3L, (long)3L,\
    \ (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L, (long)7L,\
    \ (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L, (long)6L,\
    \ (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L}))) ==\
    \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
    \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
    \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
    \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
    \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
    \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
    \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
    \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L,\
    \ (long)3L, (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L,\
    \ (long)2L, (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L,\
    \ (long)10L}))) == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
    \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
    \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
    \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
    \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
    \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
    \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
    \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
    \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
    \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
    \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L,\
    \ (long)6L, (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L,\
    \ (long)8L, (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L})))\
    \ == (4L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L,\
    \ (long)6L, (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L,\
    \ (long)10L, (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L})))\
    \ == (2L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L,\
    \ (long)3L, (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L,\
    \ (long)6L, (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L,\
    \ (long)7L, (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
    \ long[]{(long)9L, (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L,\
    \ (long)10L, (long)9L, (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n\
    \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)4L, (long)10L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)3L, (long)6L, (long)1L, (long)8L})))\
    \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)7L, (long)9L,\
    \ (long)9L, (long)9L, (long)3L, (long)4L, (long)1L, (long)5L, (long)9L, (long)1L,\
    \ (long)2L, (long)1L, (long)1L, (long)10L, (long)7L, (long)5L, (long)6L, (long)7L,\
    \ (long)6L, (long)7L, (long)7L, (long)6L}))) == (1L));\n    Debug.Assert(Search((new\
    \ List<long>(new long[]{(long)3L, (long)10L, (long)10L, (long)9L, (long)2L})))\
    \ == (-1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4afd0a0b51a46e58812f9407a73bf74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4afd0a0b51a46e58812f9407a73bf74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794487
