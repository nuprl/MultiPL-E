name: HumanEval_140_fix_spaces
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with - \n    // >>> FixSpaces((\" Example\"))\n    // (\"\
  Example\")\n    // >>> FixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n   \
  \ // >>> FixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> FixSpaces((\"\
  \ Example 3\"))\n    // (\"_Example-3\")\n    public static string FixSpaces(string\
  \ text) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FixSpaces((\"\
  Example\")).Equals((\"Example\")));\n    Debug.Assert(FixSpaces((\"Mudasir Hanif\
  \ \")).Equals((\"Mudasir_Hanif_\")));\n    Debug.Assert(FixSpaces((\"Yellow Yellow\
  \  Dirty  Fellow\")).Equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    Debug.Assert(FixSpaces((\"\
  Exa   mple\")).Equals((\"Exa-mple\")));\n    Debug.Assert(FixSpaces((\"   Exa 1\
  \ 2 2 mple\")).Equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
completions: ["        string result = \"\";\n        foreach (char c in text) {\n\
    \            if (c == ' ') {\n                result += \"_\";\n            }\
    \ else {\n                result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string temp = result;\n            result = \"\";\n    \
    \        int count = 0;\n            while (temp.Length > 0) {\n             \
    \   if (temp[0] == ' ') {\n                    count++;\n                } else\
    \ {\n                    result += temp[0];\n                    count = 0;\n\
    \                }\n                temp = temp.Substring(1);\n            }\n\
    \            if (count > 0) {\n                result += \"-\";\n            }\n\
    \        }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int i = 0;\n           \
    \ while (i < result.Length - 2) {\n                if (result[i] == ' ' && result[i\
    \ + 1] == ' ' && result[i + 2] == ' ') {\n                    result += \"-\"\
    ;\n                    i += 2;\n                } else {\n                   \
    \ result += result[i];\n                    i++;\n                }\n        \
    \    }\n        }\n        return result;", "        string result = \"\";\n \
    \       foreach (char c in text) {\n            if (c == ' ') {\n            \
    \    result += \"_\";\n            } else {\n                result += c;\n  \
    \          }\n        }\n        if (result.Length > 2) {\n            result\
    \ = result.Replace(\" \", \"-\");\n        }\n        return result;", "     \
    \   if (text == null) return null;\n        StringBuilder sb = new StringBuilder();\n\
    \        bool isFirst = true;\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                if (isFirst) {\n                    isFirst\
    \ = false;\n                } else {\n                    sb.Append('_');\n  \
    \              }\n            } else {\n                sb.Append(c);\n      \
    \      }\n        }\n        return sb.ToString();", "        if (text == null\
    \ || text.Length == 0)\n            return text;\n        StringBuilder sb = new\
    \ StringBuilder(text.Length);\n        bool first = true;\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                if (first) {\n  \
    \                  first = false;\n                } else {\n                \
    \    sb.Append('_');\n                }\n            } else {\n              \
    \  sb.Append(c);\n            }\n        }\n        return sb.ToString();", " \
    \       string result = \"\";\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                result += c.ToString();\n            } else\
    \ {\n                result += c.ToString() + \"_\";\n            }\n        }\n\
    \        if (result.Length > 2) {\n            int lastSpace = result.LastIndexOf('\
    \ ');\n            int lastSpace2 = result.LastIndexOf(' ');\n            int\
    \ lastSpace3 = result.LastIndexOf(' ');\n            int lastSpace4 = result.LastIndexOf('\
    \ ');\n            int lastSpace5 = result.LastIndexOf(' ');\n            int\
    \ lastSpace6 = result.LastIndexOf(' ');\n            int lastSpace7 = result.LastIndexOf('\
    \ ');\n            int lastSpace8 = result.LastIndexOf(' ');\n            int\
    \ lastSpace9 = result.LastIndexOf(' ');\n            int lastSpace10 = result.LastIndexOf('\
    \ ');\n            int lastSpace11 = result.LastIndexOf(' ');\n            int\
    \ lastSpace12 = result.LastIndexOf(' ');\n            int lastSpace13 = result.LastIndexOf('\
    \ ');\n            int lastSpace14 = result.LastIndexOf(' ');\n            int\
    \ lastSpace15 = result.LastIndexOf(' ');\n            int lastSpace16 = result.LastIndexOf('\
    \ ');\n            int lastSpace17 = result.LastIndexOf(' ');\n            int\
    \ lastSpace18 = result.LastIndexOf(' ');\n            int lastSpace19 = result.LastIndexOf('\
    \ ');\n            int lastSpace20 = result.LastIndexOf(' ');\n            int\
    \ lastSpace21 = result.LastIndexOf(' ');\n            int lastSpace22 = result.LastIndexOf('\
    \ ');\n            int lastSpace23 = result.LastIndexOf(' ');\n            int\
    \ lastSpace24 = result.LastIndexOf(' ');\n            int lastSpace25 = result.LastIndexOf('\
    \ ');\n            int lastSpace26 = result.LastIndexOf(' ');\n            int\
    \ lastSpace27 = result.LastIndexOf(' ');\n            int lastSpace28 = result.LastIndexOf('\
    \ ');\n            int lastSpace29 = result.LastIndexOf(' ');\n            int\
    \ lastSpace30 = result.LastIndexOf(' ');\n            int lastSpace31 = result.LastIndexOf('\
    \ ');\n            int lastSpace32 = result.LastIndexOf(' ');\n            int\
    \ lastSpace33 = result.LastIndexOf(' ');\n            int lastSpace34 = result.LastIndexOf('\
    \ ');\n            int lastSpace", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string lastSpace = result.Substring(result.Length\
    \ - 1, 1);\n            string nextSpace = result.Substring(0, result.Length -\
    \ 1);\n            if (lastSpace == nextSpace) {\n                result = result.Replace(lastSpace,\
    \ \"-\");\n            }\n        }\n        return result;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        return result;", '        return Regex.Replace(text,
    @"\s+", "_");', "        if (text == null) {\n            return null;\n     \
    \   }\n        string result = text;\n        string pattern = \" \";\n      \
    \  string replacement = \"_\";\n        int spaceCount = 0;\n        foreach (char\
    \ c in result) {\n            if (c == pattern) {\n                spaceCount++;\n\
    \            } else {\n                if (spaceCount > 1) {\n               \
    \     result = result.Replace(\" \", replacement);\n                }\n      \
    \          spaceCount = 0;\n            }\n        }\n        if (spaceCount >\
    \ 1) {\n            result = result.Replace(\" \", replacement);\n        }\n\
    \        return result;", "        if (text == null || text.Length == 0)\n   \
    \         return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool isFirst = true;\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                if (!isFirst) {\n                    sb.Append('_');\n\
    \                }\n                isFirst = false;\n            } else {\n \
    \               isFirst = true;\n            }\n            sb.Append(c);\n  \
    \      }\n        return sb.ToString();", "        if (text == null || text.Length\
    \ == 0)\n            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool space = false;\n        for (int i = 0; i < text.Length; i++) {\n\
    \            if (text[i] == ' ') {\n                if (!space) {\n          \
    \          space = true;\n                    sb.Append('_');\n              \
    \  } else {\n                    space = false;\n                    sb.Append('-');\n\
    \                }\n            } else {\n                sb.Append(text[i]);\n\
    \            }\n        }\n        return sb.ToString();", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int i = 0;\n            while (i < result.Length - 2) {\n               \
    \ if (result[i] == '_' && result[i + 1] == '_') {\n                    result\
    \ += result.Substring(i + 1, 2);\n                    i += 2;\n              \
    \  } else {\n                    result += result.Substring(i + 1, 1);\n     \
    \               i++;\n                }\n            }\n        }\n        return\
    \ result;", '        return text.Replace(" ", "_").Replace(" ", "-");', "    \
    \    if (text == null || text.Length == 0)\n            return text;\n       \
    \ StringBuilder sb = new StringBuilder(text.Length);\n        bool space = false;\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     space = true;\n                sb.Append('_');\n            } else {\n \
    \               space = false;\n                sb.Append(c);\n            }\n\
    \        }\n        if (space)\n            sb.Append('_');\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string lastSpace = result.Substring(result.Length - 1);\n\
    \            if (lastSpace == \" \") {\n                result = result.Substring(0,\
    \ result.Length - 1);\n            }\n        }\n        return result;", "  \
    \      string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            }\n         \
    \   else {\n                result += c;\n            }\n        }\n        return\
    \ result;", "        string result = \"\";\n        foreach (char c in text) {\n\
    \            if (c == ' ') {\n                result += \"_\";\n            }\
    \ else {\n                result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            result = result.Replace(\" \", \"-\");\n        }\n    \
    \    return result;", "        string result = \"\";\n        foreach (char c\
    \ in text) {\n            if (c == ' ') {\n                result += \"_\";\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 2) {\n            int lastSpace = result.LastIndexOf('\
    \ ');\n            int firstSpace = result.IndexOf(' ');\n            string firstSpaceString\
    \ = result.Substring(0, firstSpace);\n            string lastSpaceString = result.Substring(lastSpace\
    \ + 1);\n            result = firstSpaceString + lastSpaceString.Replace(\" \"\
    , \"-\");\n        }\n        return result;", "        string result = \"\";\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     result += \"_\";\n            } else {\n                result += c;\n \
    \           }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastSpace = result.Substring(result.Length - 1, 1);\n            string nextSpace\
    \ = result.Substring(0, result.Length - 1);\n            if (lastSpace == nextSpace)\
    \ {\n                result = result.Replace(lastSpace, \"-\");\n            }\n\
    \        }\n        return result;"]
stop_tokens:
- "\n    }\n"
