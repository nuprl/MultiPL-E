name: HumanEval_140_fix_spaces
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with - \n    // >>> FixSpaces((\" Example\"))\n    // (\"\
  Example\")\n    // >>> FixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n   \
  \ // >>> FixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> FixSpaces((\"\
  \ Example 3\"))\n    // (\"_Example-3\")\n    public static string FixSpaces(string\
  \ text) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FixSpaces((\"\
  Example\")).Equals((\"Example\")));\n    Debug.Assert(FixSpaces((\"Mudasir Hanif\
  \ \")).Equals((\"Mudasir_Hanif_\")));\n    Debug.Assert(FixSpaces((\"Yellow Yellow\
  \  Dirty  Fellow\")).Equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    Debug.Assert(FixSpaces((\"\
  Exa   mple\")).Equals((\"Exa-mple\")));\n    Debug.Assert(FixSpaces((\"   Exa 1\
  \ 2 2 mple\")).Equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
completions: ["        string result = \"\";\n        foreach (char c in text) {\n\
    \            if (c == ' ') {\n                result += \"_\";\n            }\
    \ else {\n                result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string temp = result;\n            result = \"\";\n    \
    \        int count = 0;\n            while (temp.Length > 0) {\n             \
    \   if (temp[0] == ' ') {\n                    count++;\n                } else\
    \ {\n                    result += temp[0];\n                    count = 0;\n\
    \                }\n                temp = temp.Substring(1);\n            }\n\
    \            if (count > 0) {\n                result += \"-\";\n            }\n\
    \        }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int i = 0;\n           \
    \ while (i < result.Length - 2) {\n                if (result[i] == ' ' && result[i\
    \ + 1] == ' ' && result[i + 2] == ' ') {\n                    result += \"-\"\
    ;\n                    i += 2;\n                } else {\n                   \
    \ result += result[i];\n                    i++;\n                }\n        \
    \    }\n        }\n        return result;", "        string result = \"\";\n \
    \       foreach (char c in text) {\n            if (c == ' ') {\n            \
    \    result += \"_\";\n            } else {\n                result += c;\n  \
    \          }\n        }\n        if (result.Length > 2) {\n            result\
    \ = result.Replace(\" \", \"-\");\n        }\n        return result;", "     \
    \   if (text == null) return null;\n        StringBuilder sb = new StringBuilder();\n\
    \        bool isFirst = true;\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                if (isFirst) {\n                    isFirst\
    \ = false;\n                } else {\n                    sb.Append('_');\n  \
    \              }\n            } else {\n                sb.Append(c);\n      \
    \      }\n        }\n        return sb.ToString();", "        if (text == null\
    \ || text.Length == 0)\n            return text;\n        StringBuilder sb = new\
    \ StringBuilder(text.Length);\n        bool first = true;\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                if (first) {\n  \
    \                  first = false;\n                } else {\n                \
    \    sb.Append('_');\n                }\n            } else {\n              \
    \  sb.Append(c);\n            }\n        }\n        return sb.ToString();", " \
    \       string result = \"\";\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                result += c.ToString();\n            } else\
    \ {\n                result += c.ToString() + \"_\";\n            }\n        }\n\
    \        if (result.Length > 2) {\n            int lastSpace = result.LastIndexOf('\
    \ ');\n            int lastSpace2 = result.LastIndexOf(' ');\n            int\
    \ lastSpace3 = result.LastIndexOf(' ');\n            int lastSpace4 = result.LastIndexOf('\
    \ ');\n            int lastSpace5 = result.LastIndexOf(' ');\n            int\
    \ lastSpace6 = result.LastIndexOf(' ');\n            int lastSpace7 = result.LastIndexOf('\
    \ ');\n            int lastSpace8 = result.LastIndexOf(' ');\n            int\
    \ lastSpace9 = result.LastIndexOf(' ');\n            int lastSpace10 = result.LastIndexOf('\
    \ ');\n            int lastSpace11 = result.LastIndexOf(' ');\n            int\
    \ lastSpace12 = result.LastIndexOf(' ');\n            int lastSpace13 = result.LastIndexOf('\
    \ ');\n            int lastSpace14 = result.LastIndexOf(' ');\n            int\
    \ lastSpace15 = result.LastIndexOf(' ');\n            int lastSpace16 = result.LastIndexOf('\
    \ ');\n            int lastSpace17 = result.LastIndexOf(' ');\n            int\
    \ lastSpace18 = result.LastIndexOf(' ');\n            int lastSpace19 = result.LastIndexOf('\
    \ ');\n            int lastSpace20 = result.LastIndexOf(' ');\n            int\
    \ lastSpace21 = result.LastIndexOf(' ');\n            int lastSpace22 = result.LastIndexOf('\
    \ ');\n            int lastSpace23 = result.LastIndexOf(' ');\n            int\
    \ lastSpace24 = result.LastIndexOf(' ');\n            int lastSpace25 = result.LastIndexOf('\
    \ ');\n            int lastSpace26 = result.LastIndexOf(' ');\n            int\
    \ lastSpace27 = result.LastIndexOf(' ');\n            int lastSpace28 = result.LastIndexOf('\
    \ ');\n            int lastSpace29 = result.LastIndexOf(' ');\n            int\
    \ lastSpace30 = result.LastIndexOf(' ');\n            int lastSpace31 = result.LastIndexOf('\
    \ ');\n            int lastSpace32 = result.LastIndexOf(' ');\n            int\
    \ lastSpace33 = result.LastIndexOf(' ');\n            int lastSpace34 = result.LastIndexOf('\
    \ ');\n            int lastSpace", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string lastSpace = result.Substring(result.Length\
    \ - 1, 1);\n            string nextSpace = result.Substring(0, result.Length -\
    \ 1);\n            if (lastSpace == nextSpace) {\n                result = result.Replace(lastSpace,\
    \ \"-\");\n            }\n        }\n        return result;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        return result;", '        return Regex.Replace(text,
    @"\s+", "_");', "        if (text == null) {\n            return null;\n     \
    \   }\n        string result = text;\n        string pattern = \" \";\n      \
    \  string replacement = \"_\";\n        int spaceCount = 0;\n        foreach (char\
    \ c in result) {\n            if (c == pattern) {\n                spaceCount++;\n\
    \            } else {\n                if (spaceCount > 1) {\n               \
    \     result = result.Replace(\" \", replacement);\n                }\n      \
    \          spaceCount = 0;\n            }\n        }\n        if (spaceCount >\
    \ 1) {\n            result = result.Replace(\" \", replacement);\n        }\n\
    \        return result;", "        if (text == null || text.Length == 0)\n   \
    \         return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool isFirst = true;\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                if (!isFirst) {\n                    sb.Append('_');\n\
    \                }\n                isFirst = false;\n            } else {\n \
    \               isFirst = true;\n            }\n            sb.Append(c);\n  \
    \      }\n        return sb.ToString();", "        if (text == null || text.Length\
    \ == 0)\n            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool space = false;\n        for (int i = 0; i < text.Length; i++) {\n\
    \            if (text[i] == ' ') {\n                if (!space) {\n          \
    \          space = true;\n                    sb.Append('_');\n              \
    \  } else {\n                    space = false;\n                    sb.Append('-');\n\
    \                }\n            } else {\n                sb.Append(text[i]);\n\
    \            }\n        }\n        return sb.ToString();", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int i = 0;\n            while (i < result.Length - 2) {\n               \
    \ if (result[i] == '_' && result[i + 1] == '_') {\n                    result\
    \ += result.Substring(i + 1, 2);\n                    i += 2;\n              \
    \  } else {\n                    result += result.Substring(i + 1, 1);\n     \
    \               i++;\n                }\n            }\n        }\n        return\
    \ result;", '        return text.Replace(" ", "_").Replace(" ", "-");', "    \
    \    if (text == null || text.Length == 0)\n            return text;\n       \
    \ StringBuilder sb = new StringBuilder(text.Length);\n        bool space = false;\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     space = true;\n                sb.Append('_');\n            } else {\n \
    \               space = false;\n                sb.Append(c);\n            }\n\
    \        }\n        if (space)\n            sb.Append('_');\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string lastSpace = result.Substring(result.Length - 1);\n\
    \            if (lastSpace == \" \") {\n                result = result.Substring(0,\
    \ result.Length - 1);\n            }\n        }\n        return result;", "  \
    \      string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            }\n         \
    \   else {\n                result += c;\n            }\n        }\n        return\
    \ result;", "        string result = \"\";\n        foreach (char c in text) {\n\
    \            if (c == ' ') {\n                result += \"_\";\n            }\
    \ else {\n                result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            result = result.Replace(\" \", \"-\");\n        }\n    \
    \    return result;", "        string result = \"\";\n        foreach (char c\
    \ in text) {\n            if (c == ' ') {\n                result += \"_\";\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 2) {\n            int lastSpace = result.LastIndexOf('\
    \ ');\n            int firstSpace = result.IndexOf(' ');\n            string firstSpaceString\
    \ = result.Substring(0, firstSpace);\n            string lastSpaceString = result.Substring(lastSpace\
    \ + 1);\n            result = firstSpaceString + lastSpaceString.Replace(\" \"\
    , \"-\");\n        }\n        return result;", "        string result = \"\";\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     result += \"_\";\n            } else {\n                result += c;\n \
    \           }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastSpace = result.Substring(result.Length - 1, 1);\n            string nextSpace\
    \ = result.Substring(0, result.Length - 1);\n            if (lastSpace == nextSpace)\
    \ {\n                result = result.Replace(lastSpace, \"-\");\n            }\n\
    \        }\n        return result;", "        if (text == null || text.Length\
    \ == 0)\n            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool spaceFound = false;\n        for (int i = 0; i < text.Length; i++)\
    \ {\n            if (text[i] == ' ') {\n                spaceFound = true;\n \
    \               sb.Append('_');\n            } else {\n                spaceFound\
    \ = false;\n                sb.Append(text[i]);\n            }\n        }\n  \
    \      if (spaceFound)\n            sb.Append('_');\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int i = 0;\n            while (i < result.Length - 2) {\n\
    \                if (result[i] == '_' && result[i + 1] == '_') {\n           \
    \         result += result.Substring(i + 1, 2);\n                    i += 2;\n\
    \                } else {\n                    result += result.Substring(i +\
    \ 1, 1);\n                    i++;\n                }\n            }\n       \
    \ }\n        return result;", "        if (text == null || text.Length == 0)\n\
    \            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        foreach (char c in text) {\n            if (c == ' ')\n             \
    \   sb.Append('_');\n            else\n                sb.Append(c);\n       \
    \ }\n        return sb.ToString();", "        if (text == null || text.Length\
    \ == 0)\n            return text;\n        var sb = new StringBuilder(text.Length);\n\
    \        foreach (char c in text) {\n            if (c == ' ')\n             \
    \   sb.Append('_');\n            else\n                sb.Append(c);\n       \
    \ }\n        return sb.ToString();", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int i = 0;\n           \
    \ while (i < result.Length - 2) {\n                if (result[i] == '_' && result[i\
    \ + 1] == '_') {\n                    result += \" - \";\n                   \
    \ i += 2;\n                } else {\n                    i++;\n              \
    \  }\n            }\n        }\n        return result;", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        return result;", "        // Replace\
    \ all spaces with underscores\n        text = text.Replace(\" \", \"_\");\n  \
    \      // If there are more than 2 consecutive spaces, replace all \n        //\
    \ consecutive spaces with -\n        if (text.Contains(\" \") && (text.IndexOf(\"\
    \ \") + 1).Equals(text.Length - 2)) {\n            text = text.Replace(\" \",\
    \ \"-\");\n        }\n        return text;", "        string result = \"\";\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     result += \"_\";\n            } else {\n                result += c;\n \
    \           }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastSpace = result.Substring(result.Length - 1, 1);\n            string nextSpace\
    \ = result.Substring(0, result.Length - 1);\n            if (lastSpace == nextSpace)\
    \ {\n                result += \"-\";\n            }\n        }\n        return\
    \ result;", "        // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n        // If there are more than 2 consecutive spaces, replace\
    \ all \n        // consecutive spaces with -\n        if (text.Contains(\" \"\
    ) && (text.IndexOf(\" \") + 1).Equals(text.Length)) {\n            text = text.Replace(\"\
    \ \", \"-\");\n        }\n        return text;", "        string result = \"\"\
    ;\n        foreach (char c in text) {\n            if (c == ' ') {\n         \
    \       result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastSpace = result.Substring(result.Length - 1);\n            string nextSpace\
    \ = result.Substring(0, result.Length - 1);\n            if (lastSpace == nextSpace)\
    \ {\n                result = result.Replace(lastSpace, \"-\");\n            }\n\
    \        }\n        return result;", "        if (text == null) {\n          \
    \  return null;\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        bool isFirst = true;\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                if (isFirst) {\n                    isFirst\
    \ = false;\n                } else {\n                    sb.Append('_');\n  \
    \              }\n            } else {\n                sb.Append(c);\n      \
    \      }\n        }\n        return sb.ToString();", "        if (string.IsNullOrEmpty(text))\n\
    \            return text;\n        var sb = new StringBuilder();\n        foreach\
    \ (var c in text) {\n            if (c == ' ')\n                sb.Append('_');\n\
    \            else\n                sb.Append(c);\n        }\n        return sb.ToString();",
  "        if (text == null || text.Length == 0)\n            return text;\n     \
    \   string result = \"\";\n        foreach (char c in text) {\n            if\
    \ (c == ' ')\n                result += \"_\";\n            else\n           \
    \     result += c;\n        }\n        if (result.Length > 2)\n            return\
    \ result.Replace(\" \", \"-\");\n        else\n            return result;", " \
    \       // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n        // If there are more than 2 consecutive spaces, replace\
    \ all \n        // consecutive spaces with -\n        if (text.Contains(\" \"\
    ) && text.Contains(\" \")) {\n            text = text.Replace(\" \", \"-\");\n\
    \        }\n        return text;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            }\n            else if (c != ' ' && c != '_') {\n          \
    \      result += c;\n            }\n        }\n        if (result.Length > 2)\
    \ {\n            string temp = result;\n            result = \"\";\n         \
    \   int count = 0;\n            while (temp.Length > 0) {\n                if\
    \ (temp.Length > 2) {\n                    result += temp.Substring(0, temp.Length\
    \ - 2);\n                    count += temp.Length - 2;\n                    temp\
    \ = temp.Substring(temp.Length - 2);\n                }\n                else\
    \ {\n                    result += temp;\n                    count += temp.Length;\n\
    \                    temp = \"\";\n                }\n            }\n        \
    \    if (count > 0) {\n                result += \"-\";\n                for (int\
    \ i = 0; i < count; i++) {\n                    result += \"-\";\n           \
    \     }\n            }\n        }\n        return result;", "        if (text\
    \ == null)\n            return null;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool first = true;\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                if (first) {\n                    first = false;\n\
    \                } else {\n                    sb.Append('_');\n             \
    \   }\n            } else {\n                sb.Append(c);\n            }\n  \
    \      }\n        return sb.ToString();", '        return Regex.Replace(text,
    @"\s+", "_");', "        if (text == null || text.Length == 0)\n            return\
    \ text;\n        StringBuilder sb = new StringBuilder(text.Length);\n        bool\
    \ isFirst = true;\n        foreach (char c in text) {\n            if (c == '\
    \ ') {\n                if (isFirst) {\n                    isFirst = false;\n\
    \                } else {\n                    sb.Append('_');\n             \
    \   }\n            } else {\n                sb.Append(c);\n            }\n  \
    \      }\n        return sb.ToString();", '        return Regex.Replace(text,
    @"\s+", "_");', "        string result = \"\";\n        foreach (char c in text)\
    \ {\n            if (c == ' ') {\n                result += \"_\";\n         \
    \   } else {\n                result += c;\n            }\n        }\n       \
    \ if (result.Length > 2) {\n            string lastTwo = result.Substring(0, result.Length\
    \ - 2);\n            string rest = result.Substring(result.Length - 2);\n    \
    \        result += \"-\" + lastTwo;\n            result += rest;\n        }\n\
    \        return result;", "        if (string.IsNullOrEmpty(text))\n         \
    \   return text;\n        var result = new StringBuilder();\n        foreach (var\
    \ c in text) {\n            if (c == ' ')\n                result.Append('_');\n\
    \            else\n                result.Append(c);\n        }\n        if (result.Length\
    \ > 2)\n            return result.ToString().Replace(\" \", \"-\");\n        else\n\
    \            return result.ToString();", "        // Replace all spaces with underscores\n\
    \        text = text.Replace(\" \", \"_\");\n        // If there are more than\
    \ 2 consecutive spaces\n        if (text.Contains(\" \") && (text.IndexOf(\" \"\
    ) + 1 == text.LastIndexOf(\" \")))\n        {\n            // Replace all consecutive\
    \ spaces with -\n            text = text.Replace(\" \", \"-\");\n        }\n \
    \       return text;", "        string result = \"\";\n        foreach (char c\
    \ in text) {\n            if (c == ' ') {\n                result += \"_\";\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 2) {\n            string lastSpace = result.Substring(result.Length\
    \ - 1, 1);\n            string nextSpace = result.Substring(0, result.Length -\
    \ 1);\n            if (lastSpace == nextSpace) {\n                result = result.Replace(lastSpace,\
    \ \"-\");\n            }\n        }\n        return result;", "        if (text\
    \ == null)\n            return null;\n        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ')\n                result += \"\
    _\";\n            else\n                result += c;\n        }\n        return\
    \ result;", "        string result = text;\n        string spaces = \" \";\n \
    \       string dashes = \"-\";\n        if (result.Contains(spaces) && result.Contains(dashes))\
    \ {\n            result = result.Replace(spaces, dashes);\n        }\n       \
    \ if (result.Contains(spaces) && result.Contains(dashes) && result.Contains(spaces))\
    \ {\n            result = result.Replace(spaces, dashes);\n        }\n       \
    \ if (result.Contains(spaces) && result.Contains(dashes) && result.Contains(spaces)\
    \ && result.Contains(dashes)) {\n            result = result.Replace(spaces, dashes);\n\
    \        }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int i = 0;\n           \
    \ while (i < result.Length - 2) {\n                if (result[i] == '_' && result[i\
    \ + 1] == '_') {\n                    result += result.Substring(i + 1, 3);\n\
    \                    i += 2;\n                } else {\n                    result\
    \ += result.Substring(i + 1, 1);\n                    i++;\n                }\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            result\
    \ = result.Replace(\" \", \"-\");\n        }\n        return result;", "     \
    \   string result = \"\";\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                result += \"_\";\n            } else {\n     \
    \           result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string lastSpace = result.Substring(result.Length - 1, 1);\n\
    \            string nextSpace = result.Substring(0, result.Length - 1);\n    \
    \        if (lastSpace == nextSpace) {\n                result = result.Replace(lastSpace,\
    \ \"-\");\n            }\n        }\n        return result;", '        return
    Regex.Replace(text, @"\s+", "_");', "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string newResult = \"\"\
    ;\n            int i = 0;\n            while (i < result.Length - 2) {\n     \
    \           newResult += \"-\";\n                i += 2;\n            }\n    \
    \        result += newResult;\n        }\n        return result;", "        //\
    \ Replace all spaces with underscores\n        text = text.Replace(\" \", \"_\"\
    );\n        // If text has more than 2 consecutive spaces, replace all consecutive\
    \ spaces with -\n        if (text.Count(x => x == '  ') > 2) {\n            text\
    \ = text.Replace(\"  \", \"-\");\n        }\n        return text;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            }\n            else {\n   \
    \             result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string lastTwo = result.Substring(0, result.Length - 2);\n\
    \            string rest = result.Substring(result.Length - 2);\n            result\
    \ = lastTwo + \"-\" + rest;\n        }\n        return result;", "        // Replace\
    \ all spaces with underscores\n        text = text.Replace(\" \", \"_\");\n  \
    \      // If there are more than 2 consecutive spaces\n        if (text.Contains(\"\
    \ \") && (text.IndexOf(\" \") + 1).Equals(text.Length)) {\n            // Replace\
    \ all consecutive spaces with -\n            text = text.Replace(\" \", \"-\"\
    );\n        }\n        return text;", "        if (string.IsNullOrEmpty(text))\n\
    \            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool space = false;\n        for (int i = 0; i < text.Length; i++) {\n\
    \            if (text[i] == ' ') {\n                space = true;\n          \
    \      sb.Append('_');\n            }\n            else {\n                if\
    \ (space)\n                    sb.Append(' ');\n                space = false;\n\
    \                sb.Append(text[i]);\n            }\n        }\n        return\
    \ sb.ToString();", "        string result = \"\";\n        foreach (char c in\
    \ text) {\n            if (c == ' ') {\n                result += \"_\";\n   \
    \         } else {\n                result += c;\n            }\n        }\n \
    \       if (result.Length > 2) {\n            int i = 0;\n            while (i\
    \ < result.Length - 2) {\n                if (result[i] == ' ' && result[i + 1]\
    \ == ' ' && result[i + 2] == ' ') {\n                    result += result.Substring(i\
    \ + 1, 3);\n                    i += 3;\n                } else {\n          \
    \          result += result.Substring(i + 1, 2);\n                    i += 2;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   if (text == null || text.Length == 0) return text;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        foreach (char c in text) {\n \
    \           if (c == ' ') {\n                sb.Append('_');\n            } else\
    \ {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int lastSpace = result.LastIndexOf(' ');\n            int\
    \ firstSpace = result.IndexOf(' ');\n            string firstSpaceStr = result.Substring(0,\
    \ firstSpace);\n            string lastSpaceStr = result.Substring(lastSpace);\n\
    \            string middleSpaceStr = result.Substring(firstSpace, lastSpace -\
    \ firstSpace + 1);\n            string middleSpaceStr2 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace);\n            string middleSpaceStr3 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace + 1);\n            string middleSpaceStr4 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace);\n            string middleSpaceStr5 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace + 1);\n            string middleSpaceStr6 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace);\n            string middleSpaceStr7 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace + 1);\n            string middleSpaceStr8 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace);\n            string middleSpaceStr9 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace + 1);\n            string middleSpaceStr10 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace);\n            string middleSpaceStr11 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace + 1);\n            string middleSpaceStr12 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace);\n            string middleSpaceStr13 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace + 1);\n            string middleSpaceStr14 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace);\n            string middleSpaceStr15 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace + 1);\n            string middleSpaceStr16 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace);\n            string middleSpaceStr17 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace + 1);\n            string middleSpaceStr18 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace);\n            string middleSpaceStr19 = result.Substring(firstSpace,\
    \ lastSpace - firstSpace + 1);\n            string middleSpaceStr20 = result.Substring(firstSpace,\
    \ lastSpace - first", '        return Regex.Replace(text, @"\s+", "_");', "  \
    \      if (text == null || text.Length == 0)\n            return text;\n     \
    \   StringBuilder sb = new StringBuilder(text.Length);\n        bool first = true;\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     if (first) {\n                    first = false;\n                } else\
    \ {\n                    sb.Append('_');\n                }\n            } else\
    \ {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int i = 0;\n            while (i < result.Length - 2) {\n\
    \                if (result[i] == '_' && result[i + 1] == '_') {\n           \
    \         result += result.Substring(i + 1, 2);\n                    i += 2;\n\
    \                } else {\n                    result += result.Substring(i +\
    \ 1, 1);\n                    i++;\n                }\n            }\n       \
    \ }\n        return result;", '        return Regex.Replace(text, @"\s+", "_");',
  "        if (text == null)\n            return null;\n        StringBuilder sb =\
    \ new StringBuilder();\n        bool space = false;\n        for (int i = 0; i\
    \ < text.Length; i++) {\n            if (text[i] == ' ') {\n                if\
    \ (space)\n                    sb.Append('-');\n                space = true;\n\
    \            } else {\n                space = false;\n            }\n       \
    \     sb.Append(text[i]);\n        }\n        return sb.ToString();", "      \
    \  // Replace all spaces with underscores\n        text = text.Replace(\" \",\
    \ \"_\");\n        // If there are more than 2 consecutive spaces, replace all\
    \ \n        // consecutive spaces with -\n        if (text.Contains(\" \") &&\
    \ (text.IndexOf(\" \") + 1 == text.Length)) {\n            text = text.Replace(\"\
    \ \", \"-\");\n        }\n        return text;", "        if (string.IsNullOrEmpty(text))\n\
    \            return text;\n        var result = new StringBuilder();\n       \
    \ foreach (var c in text) {\n            if (c == ' ')\n                result.Append('_');\n\
    \            else\n                result.Append(c);\n        }\n        return\
    \ result.ToString();", "        string result = \"\";\n        foreach (char c\
    \ in text) {\n            if (c == ' ') {\n                result += \"_\";\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 2) {\n            int i = 0;\n            while (i\
    \ < result.Length - 2) {\n                if (result[i] == ' ' && result[i + 1]\
    \ == ' ' && result[i + 2] == ' ') {\n                    result += '-';\n    \
    \                i += 2;\n                } else {\n                    result\
    \ += result[i];\n                    i++;\n                }\n            }\n\
    \        }\n        return result;", "        if (string.IsNullOrEmpty(text))\n\
    \            return text;\n        if (text.Length > 2)\n            return text.Replace(\"\
    \ \", \"-\");\n        return text;", "        string result = \"\";\n       \
    \ foreach (char c in text) {\n            if (c == ' ') {\n                result\
    \ += \"_\";\n            } else {\n                result += c;\n            }\n\
    \        }\n        if (result.Length > 2) {\n            int i = 0;\n       \
    \     while (i < result.Length - 2) {\n                if (result[i] == '_' &&\
    \ result[i + 1] == '_' && result[i + 2] == ' ') {\n                    result\
    \ += \"-\";\n                    i += 2;\n                } else {\n         \
    \           i++;\n                }\n            }\n        }\n        return\
    \ result;", "        if (text == null || text.Length == 0)\n            return\
    \ text;\n        StringBuilder sb = new StringBuilder(text.Length);\n        bool\
    \ space = false;\n        for (int i = 0; i < text.Length; i++) {\n          \
    \  if (text[i] == ' ') {\n                space = true;\n                sb.Append('_');\n\
    \            } else {\n                space = false;\n                sb.Append(text[i]);\n\
    \            }\n        }\n        if (space)\n            sb.Append('_');\n \
    \       return sb.ToString();", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string lastSpace = result.Substring(0,\
    \ result.Length - 1);\n            string nextSpace = result.Substring(result.Length\
    \ - 1, 1);\n            if (lastSpace == nextSpace) {\n                result\
    \ = result.Replace(lastSpace, \"-\");\n            }\n        }\n        return\
    \ result;", "        string result = \"\";\n        foreach (char c in text) {\n\
    \            if (c == ' ') {\n                result += \"_\";\n            }\
    \ else {\n                result += c;\n            }\n        }\n        return\
    \ result;", '        return Regex.Replace(text, @"\s+", "_");', '        return
    Regex.Replace(text, @"\s+", "_");', "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string lastSpace = result.Substring(result.Length\
    \ - 1, 1);\n            if (lastSpace == \" \") {\n                result = result.Substring(0,\
    \ result.Length - 1);\n            }\n        }\n        return result;", "  \
    \      if (text == null) return null;\n        string result = \"\";\n       \
    \ foreach (char c in text) {\n            if (c == ' ') {\n                result\
    \ += c;\n            } else {\n                result += c.ToString().Replace(\"\
    \ \", \"_\");\n            }\n        }\n        if (result.Length > 2) {\n  \
    \          string lastSpace = result.Substring(result.Length - 1);\n         \
    \   string nextSpace = result.Substring(0, result.Length - 1);\n            while\
    \ (nextSpace.Contains(lastSpace)) {\n                result += \"-\";\n      \
    \          nextSpace = result.Substring(0, result.Length - 1);\n            }\n\
    \        }\n        return result;", "        if (string.IsNullOrEmpty(text))\n\
    \            return text;\n        StringBuilder sb = new StringBuilder(text);\n\
    \        bool isFirst = true;\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                if (isFirst) {\n                    isFirst\
    \ = false;\n                } else {\n                    sb.Replace(' ', '_');\n\
    \                }\n            } else {\n                isFirst = true;\n  \
    \          }\n        }\n        return sb.ToString();", "        // Replace all\
    \ spaces with underscores\n        text = text.Replace(\" \", \"_\");\n      \
    \  // If there are more than 2 consecutive spaces, replace all \n        // consecutive\
    \ spaces with -\n        if (text.Contains(\" \") && (text.IndexOf(\" \") + 1\
    \ == text.LastIndexOf(\" \")))\n            text = text.Replace(\" \", \"-\");\n\
    \        return text;", "        if (string.IsNullOrEmpty(text))\n           \
    \ return text;\n        var sb = new StringBuilder();\n        foreach (var c\
    \ in text) {\n            if (c == ' ')\n                sb.Append('_');\n   \
    \         else\n                sb.Append(c);\n        }\n        return sb.ToString();",
  "        if (text == null) {\n            return null;\n        }\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        bool inSpace = false;\n      \
    \  bool inSpace2 = false;\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                if (inSpace) {\n                    inSpace =\
    \ false;\n                    inSpace2 = true;\n                } else {\n   \
    \                 inSpace = true;\n                }\n            } else {\n \
    \               inSpace = false;\n            }\n            if (inSpace2) {\n\
    \                sb.Append('-');\n                inSpace2 = false;\n        \
    \    }\n            sb.Append(c);\n        }\n        return sb.ToString();",
  "        if (text == null)\n            throw new ArgumentNullException(\"text\"\
    );\n        StringBuilder sb = new StringBuilder(text.Length);\n        foreach\
    \ (char c in text) {\n            if (c == ' ')\n                sb.Append('_');\n\
    \            else\n                sb.Append(c);\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string lastTwo = result.Substring(0, result.Length - 2);\n\
    \            string rest = result.Substring(result.Length - 2);\n            result\
    \ = lastTwo + \"-\" + rest;\n        }\n        return result;", "        if (text\
    \ == null) return null;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     sb.Append('_');\n            } else {\n                sb.Append(c);\n \
    \           }\n        }\n        return sb.ToString();", "        // Replace\
    \ all spaces with underscores\n        text = text.Replace(\" \", \"_\");\n  \
    \      // If there are more than 2 consecutive spaces, replace all consecutive\
    \ spaces with -\n        if (text.Contains(\" \") && (text.IndexOf(\" \") + 1\
    \ == text.LastIndexOf(\" \")))\n            text = text.Replace(\" \", \"-\");\n\
    \        return text;", "        if (string.IsNullOrEmpty(text))\n           \
    \ return text;\n        StringBuilder sb = new StringBuilder();\n        foreach\
    \ (char c in text) {\n            if (c == ' ')\n                sb.Append('_');\n\
    \            else\n                sb.Append(c);\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        return result;",
  "        if (text == null || text.Length == 0)\n            return text;\n     \
    \   StringBuilder sb = new StringBuilder(text.Length);\n        bool isFirst =\
    \ true;\n        foreach (char c in text) {\n            if (c == ' ') {\n   \
    \             if (isFirst) {\n                    isFirst = false;\n         \
    \       } else {\n                    sb.Append('_');\n                }\n   \
    \         } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        if (text == null)\n            return\
    \ null;\n        StringBuilder sb = new StringBuilder(text.Length);\n        bool\
    \ space = false;\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                space = true;\n                sb.Append('_');\n        \
    \    } else {\n                space = false;\n                sb.Append(c);\n\
    \            }\n        }\n        if (space)\n            sb.Append('_');\n \
    \       return sb.ToString();", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string lastSpace = result.Substring(result.Length\
    \ - 1);\n            string secondLastSpace = result.Substring(0, result.Length\
    \ - 1);\n            if (lastSpace == secondLastSpace) {\n                result\
    \ = result.Replace(lastSpace, \"-\");\n            }\n        }\n        return\
    \ result;", '        return Regex.Replace(text, @"\s+", "_");', '        return
    Regex.Replace(text, @"\s+", "_");', "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            result = result.Replace(\"\
    \ \", \"-\");\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            int lastSpace\
    \ = result.LastIndexOf(' ');\n            int lastSpace2 = result.LastIndexOf('\
    \ ');\n            while (lastSpace != -1 && lastSpace2 != -1) {\n           \
    \     string temp = result.Substring(0, lastSpace);\n                result +=\
    \ temp.Replace(\" \", \"-\");\n                temp = result.Substring(lastSpace2\
    \ + 1);\n                result += temp.Replace(\" \", \"-\");\n             \
    \   lastSpace = result.LastIndexOf(' ');\n                lastSpace2 = result.LastIndexOf('\
    \ ');\n            }\n        }\n        return result;", "        if (string.IsNullOrEmpty(text))\n\
    \            return string.Empty;\n        StringBuilder sb = new StringBuilder(text);\n\
    \        bool space = false;\n        for (int i = 0; i < sb.Length; i++) {\n\
    \            if (space) {\n                sb.Replace(\" \", \"-\");\n       \
    \         space = false;\n            }\n            if (sb[i] == ' ') {\n   \
    \             space = true;\n            }\n        }\n        return sb.ToString();",
  "        if (string.IsNullOrEmpty(text))\n            return string.Empty;\n   \
    \     StringBuilder sb = new StringBuilder();\n        bool isFirst = true;\n\
    \        foreach (char c in text) {\n            if (char.IsWhiteSpace(c)) {\n\
    \                if (isFirst) {\n                    isFirst = false;\n      \
    \          } else {\n                    sb.Append('_');\n                }\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        if (text == null)\n            return\
    \ null;\n        StringBuilder sb = new StringBuilder();\n        bool first =\
    \ true;\n        foreach (char c in text) {\n            if (c == ' ') {\n   \
    \             if (!first)\n                    sb.Append('-');\n             \
    \   first = false;\n            } else {\n                sb.Append(c);\n    \
    \        }\n        }\n        return sb.ToString();", "        if (text == null)\n\
    \            return null;\n        string result = \"\";\n        foreach (char\
    \ c in text) {\n            if (c == ' ')\n                result += \"_\";\n\
    \            else\n                result += c;\n        }\n        if (result.Length\
    \ > 2)\n            result = result.Replace(\" \", \"-\");\n        return result;",
  '        return Regex.Replace(text, @"\s+", "_");', "        string result = \"\"\
    ;\n        foreach (char c in text) {\n            if (c == ' ') {\n         \
    \       result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            result\
    \ = result.Replace(\" \", \"-\");\n        }\n        return result;", "     \
    \   if (text == null || text.Length == 0) return text;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        bool space = false;\n        for\
    \ (int i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n   \
    \             space = true;\n                sb.Append('_');\n            } else\
    \ {\n                space = false;\n                sb.Append(text[i]);\n   \
    \         }\n        }\n        if (space) {\n            sb.Append('_');\n  \
    \      }\n        return sb.ToString();", "        string result = \"\";\n   \
    \     foreach (char c in text) {\n            if (c == ' ') {\n              \
    \  result += \"_\";\n            } else {\n                result += c;\n    \
    \        }\n        }\n        if (result.Length > 2) {\n            result =\
    \ result.Replace(\" \", \"-\");\n        }\n        return result;", "       \
    \ if (text == null)\n            return null;\n        string result = \"\";\n\
    \        foreach (char c in text) {\n            if (c == ' ')\n             \
    \   result += \"_\";\n            else\n                result += c;\n       \
    \ }\n        if (result.Length > 2)\n            return result.Substring(0, result.Length\
    \ - 2);\n        else\n            return result;", "        if (text == null\
    \ || text.Length == 0)\n            return text;\n        StringBuilder sb = new\
    \ StringBuilder(text);\n        bool spaceFound = false;\n        for (int i =\
    \ 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n            \
    \    spaceFound = true;\n                sb.Append('_');\n            } else {\n\
    \                spaceFound = false;\n            }\n        }\n        if (spaceFound)\
    \ {\n            int spaceCount = 1;\n            int lastSpaceIndex = -1;\n \
    \           for (int i = 0; i < text.Length; i++) {\n                if (text[i]\
    \ == ' ') {\n                    spaceCount++;\n                    if (spaceCount\
    \ == 2) {\n                        lastSpaceIndex = i;\n                    }\n\
    \                } else {\n                    spaceCount = 1;\n             \
    \   }\n            }\n            if (lastSpaceIndex != -1) {\n              \
    \  for (int i = lastSpaceIndex + 1; i < text.Length; i++) {\n                \
    \    if (text[i] == ' ') {\n                        spaceCount++;\n          \
    \          } else {\n                        spaceCount = 1;\n               \
    \     }\n                }\n                for (int i = 0; i < text.Length; i++)\
    \ {\n                    if (text[i] == ' ') {\n                        sb.Remove(i,\
    \ 1);\n                        sb.Insert(i, ' ');\n                        spaceCount--;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sb.ToString();", "        if (text == null || text.Length == 0) return text;\n\
    \        StringBuilder sb = new StringBuilder();\n        bool isFirst = true;\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     if (isFirst) {\n                    isFirst = false;\n                }\
    \ else {\n                    sb.Append('_');\n                }\n           \
    \ } else {\n                sb.Append(c);\n            }\n        }\n        return\
    \ sb.ToString();", "        if (text == null || text.Length <= 2) return text;\n\
    \        var sb = new StringBuilder();\n        var lastSpace = -1;\n        var\
    \ lastSpaceIndex = -1;\n        var lastSpaceCount = 0;\n        for (int i =\
    \ 0; i < text.Length; i++) {\n            var c = text[i];\n            if (c\
    \ == ' ') {\n                if (lastSpace == -1) lastSpace = i;\n           \
    \     lastSpaceCount++;\n                if (lastSpaceCount == 2) {\n        \
    \            lastSpaceIndex = i;\n                    lastSpaceCount = 0;\n  \
    \              }\n            } else {\n                if (lastSpace != -1) {\n\
    \                    sb.Append(text.Substring(lastSpaceIndex, i - lastSpaceIndex));\n\
    \                    lastSpace = -1;\n                    lastSpaceIndex = -1;\n\
    \                    lastSpaceCount = 0;\n                }\n                sb.Append(c);\n\
    \            }\n        }\n        if (lastSpace != -1) {\n            sb.Append(text.Substring(lastSpaceIndex,\
    \ text.Length - lastSpaceIndex));\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        return result;",
  "        if (text == null || text.Length <= 1) return text;\n        var sb = new\
    \ StringBuilder();\n        foreach (var c in text) {\n            if (c == '\
    \ ') {\n                if (sb.Length > 0) {\n                    sb.Append('_');\n\
    \                }\n            } else {\n                sb.Append(c);\n    \
    \        }\n        }\n        return sb.ToString();", "        if (text == null)\
    \ {\n            return null;\n        }\n        string result = \"\";\n    \
    \    foreach (char c in text) {\n            if (c == ' ') {\n               \
    \ result += \"_\";\n            } else {\n                result += c;\n     \
    \       }\n        }\n        if (result.Length > 2) {\n            result = result.Replace(\"\
    \ \", \"-\");\n        }\n        return result;", "        if (text == null ||\
    \ text.Length == 0) return text;\n        StringBuilder sb = new StringBuilder();\n\
    \        bool isFirst = true;\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                if (isFirst) {\n                    isFirst\
    \ = false;\n                } else {\n                    sb.Append('-');\n  \
    \              }\n            } else {\n                sb.Append(c);\n      \
    \      }\n        }\n        return sb.ToString();", "        string result =\
    \ \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n   \
    \             result += \"_\";\n            } else {\n                result +=\
    \ c;\n            }\n        }\n        return result;", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    string lastTwo = result.Substring(result.Length - 2);\n            string\
    \ firstTwo = result.Substring(0, result.Length - 2);\n            result = firstTwo\
    \ + \"_\" + lastTwo;\n        }\n        return result;", "        if (text ==\
    \ null || text.Length == 0)\n            return text;\n        if (text.Length\
    \ == 1)\n            return text;\n        if (text.Length == 2)\n           \
    \ return text;\n        if (text.Length > 2 && text.Contains(\" \") == false)\n\
    \            return text;\n        if (text.Length > 2 && text.Contains(\" \"\
    ) == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true && text.Contains(\" \") != true)\n            return text;\n   \
    \     if (text.Length > 2 && text.Contains(\" \") == true && text.Contains(\"\
    \ \") != true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true && text.Contains(\" \") != true)\n            return text;\n   \
    \     if (text.Length > 2 && text.Contains(\" \") == true && text.Contains(\"\
    \ \") != true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true && text.Contains(\" \") != true)\n            return text;\n   \
    \     if (text.Length > 2 && text.Contains(\" \") == true && text.Contains(\"\
    \ \") != true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true && text.Contains(\" \") != true)\n            return text;\n   \
    \     if (text.Length > 2 && text.Contains(\" \") == true && text.Contains(\"\
    \ \") != true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true && text.Contains(\" \") != true)\n            return text;\n   \
    \     if (text.Length > 2 && text.Contains(\" \") == true && text.Contains(\"\
    \ \") != true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true && text.Contains(\" \") != true)\n            return text;\n   \
    \     if (text.Length > 2 && text.Contains(\" \") == true && text.Contains(\"\
    \ \") != true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true && text.Contains(\" \") != true)\n            return text;\n   \
    \     if (text.Length > 2 && text.Contains(\" \") == true && text.Contains(\"\
    \ \") != true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true && text.Contains(\" \") != true)\n            return text;\n   \
    \     if (text.Length > 2 && text.Contains(\" \") == true && text.Contains(\"\
    \ \") != true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true && text.Contains(\" \") != true)\n            return text;\n   \
    \     if (text.Length > 2 && text.Contains(\" \") == true && text.Contains(\"\
    \ \") != true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true && text.Contain", "        if (text == null || text.Length == 0)\n\
    \            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool wasSpace = false;\n        foreach (char c in text) {\n        \
    \    if (c == ' ') {\n                wasSpace = true;\n                sb.Append('_');\n\
    \            } else {\n                wasSpace = false;\n                sb.Append(c);\n\
    \            }\n        }\n        if (wasSpace)\n            sb.Remove(sb.Length\
    \ - 1, 1);\n        return sb.ToString();", "        string result = \"\";\n \
    \       foreach (char c in text) {\n            if (c == ' ') {\n            \
    \    result += \"_\";\n            } else {\n                result += c;\n  \
    \          }\n        }\n        if (result.Length > 2) {\n            int lastSpace\
    \ = result.LastIndexOf(' ');\n            int lastSpace2 = result.LastIndexOf('\
    \ ');\n            while (lastSpace != -1 && lastSpace2 != -1) {\n           \
    \     if (lastSpace == lastSpace2) {\n                    result = result.Replace(result.Substring(lastSpace,\
    \ 2), \"-\");\n                    lastSpace2 = result.LastIndexOf(' ');\n   \
    \             } else {\n                    result = result.Replace(result.Substring(lastSpace,\
    \ 1), \"_\");\n                    lastSpace = result.LastIndexOf(' ');\n    \
    \            }\n            }\n        }\n        return result;", "        if\
    \ (text == null || text.Length == 0)\n            return text;\n        if (text.Length\
    \ == 1)\n            return text;\n        if (text.Length == 2)\n           \
    \ return text;\n        if (text.Length > 2 && text.Contains(\" \") == false)\n\
    \            return text;\n        if (text.Length > 2 && text.Contains(\" \"\
    ) == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text;\n        if (text.Length > 2 && text.Contains(\"\
    \ \") == true)\n            return text", '        return Regex.Replace(text,
    @"\s+", "_");', "        string result = \"\";\n        foreach (char c in text)\
    \ {\n            if (c == ' ') {\n                result += c.ToString();\n  \
    \          } else {\n                result += c.ToString().Replace(\" \", \"\
    _\");\n            }\n        }\n        if (result.Contains(\" \")) {\n     \
    \       result = result.Replace(\" \", \"-\");\n        }\n        return result;",
  "        if (text == null) return null;\n        StringBuilder sb = new StringBuilder();\n\
    \        bool inSpace = false;\n        foreach (char c in text) {\n         \
    \   if (c == ' ') {\n                if (inSpace) {\n                    inSpace\
    \ = false;\n                    sb.Append('-');\n                } else {\n  \
    \                  inSpace = true;\n                    sb.Append('_');\n    \
    \            }\n            } else {\n                inSpace = false;\n     \
    \           sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        if (text == null || text.Length <= 2)\n            return text;\n     \
    \   var sb = new StringBuilder();\n        var lastSpace = -1;\n        var lastChar\
    \ = ' ';\n        foreach (var c in text) {\n            if (c == ' ') {\n   \
    \             if (lastSpace == -1)\n                    lastSpace = text.Length;\n\
    \                else\n                    lastSpace = lastSpace - 1;\n      \
    \          lastChar = c;\n            }\n            else {\n                if\
    \ (lastSpace != -1) {\n                    sb.Append(text.Substring(lastSpace,\
    \ lastChar.Length));\n                    lastSpace = -1;\n                }\n\
    \                sb.Append('_');\n                lastChar = c;\n            }\n\
    \        }\n        return sb.ToString();", '        return Regex.Replace(text,
    @"\s+", "_");', "        string result = text;\n        Regex regex = new Regex(@\"\
    \\s+\");\n        result = regex.Replace(result, \" \");\n        if (result.Length\
    \ > 2) {\n            string temp = result;\n            result = \"\";\n    \
    \        int index = 0;\n            while (index < temp.Length) {\n         \
    \       if (temp[index] == \" \") {\n                    result += temp[index\
    \ + 1];\n                    index += 2;\n                } else {\n         \
    \           result += temp[index];\n                    index++;\n           \
    \     }\n            }\n        }\n        return result;", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int lastSpace = result.LastIndexOf(' ');\n            int firstSpace = result.IndexOf('\
    \ ');\n            string firstSpaceString = result.Substring(0, firstSpace);\n\
    \            string lastSpaceString = result.Substring(lastSpace + 1);\n     \
    \       result = firstSpaceString + lastSpaceString.Replace(\" \", \"-\");\n \
    \       }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            string temp = result;\n\
    \            int i = 0;\n            while (i < temp.Length - 2) {\n         \
    \       if (temp[i] == ' ' && temp[i + 1] == ' ' && temp[i + 2] == ' ') {\n  \
    \                  temp[i] = '-';\n                    i += 2;\n             \
    \   } else {\n                    i++;\n                }\n            }\n   \
    \         result = temp;\n        }\n        return result;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int i = 0;\n            while (i < result.Length - 2) {\n               \
    \ if (result[i] == ' ' && result[i + 1] == ' ' && result[i + 2] == ' ') {\n  \
    \                  result += \"-\";\n                    i += 2;\n           \
    \     } else {\n                    result += result[i];\n                   \
    \ i++;\n                }\n            }\n        }\n        return result;",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            int count = 0;\n            int start = 0;\n           \
    \ int end = 0;\n            while (end < result.Length) {\n                start\
    \ = end;\n                while (start < result.Length && result[start] == ' ')\
    \ {\n                    start++;\n                }\n                end = start;\n\
    \                while (end < result.Length && result[end] == ' ') {\n       \
    \             end++;\n                }\n                if (end - start > 1)\
    \ {\n                    result = result.Substring(0, start) + \"-\" +\n     \
    \                   result.Substring(start, end - start);\n                }\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastTwo = result.Substring(0, result.Length - 2);\n            string rest =\
    \ result.Substring(result.Length - 2);\n            result = lastTwo + \"-\" +\
    \ rest;\n        }\n        return result;", "        string result = \"\";\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     result += \"_\";\n            } else {\n                result += c;\n \
    \           }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastTwo = result.Substring(result.Length - 2);\n            string firstTwo\
    \ = result.Substring(0, result.Length - 2);\n            result += lastTwo + firstTwo.Replace(\"\
    \ \", \"-\");\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastTwo = result.Substring(0, result.Length - 2);\n            string rest =\
    \ result.Substring(result.Length - 2);\n            while (lastTwo.Contains(\"\
    _\")) {\n                lastTwo = lastTwo.Replace(\"_\", \"-\");\n          \
    \  }\n            result = lastTwo + rest;\n        }\n        return result;",
  "        // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n        // If there are more than 2 consecutive spaces\n      \
    \  if (text.Contains(\" \") && (text.IndexOf(\" \") + 1).Equals(text.Length))\
    \ {\n            // Replace all consecutive spaces with -\n            text =\
    \ text.Replace(\" \", \"-\");\n        }\n        return text;", '        return
    text.Replace(" ", "_").Replace(" -", "_");', "        if (text == null || text.Length\
    \ == 0)\n            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool first = true;\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                if (!first)\n                    sb.Append('_');\n\
    \                first = false;\n            }\n            else {\n         \
    \       sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string lastTwo = result.Substring(0, result.Length - 2);\n\
    \            string rest = result.Substring(result.Length - 2);\n            result\
    \ = lastTwo + \"-\" + rest;\n        }\n        return result;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    int lastSpace = result.LastIndexOf(' ');\n            string lastSpaceString\
    \ = result.Substring(lastSpace);\n            string secondLastSpaceString = result.Substring(lastSpace\
    \ + 1);\n            string secondLastSpaceString2 = result.Substring(lastSpace\
    \ + 2);\n            string secondLastSpaceString3 = result.Substring(lastSpace\
    \ + 3);\n            string secondLastSpaceString4 = result.Substring(lastSpace\
    \ + 4);\n            string secondLastSpaceString5 = result.Substring(lastSpace\
    \ + 5);\n            string secondLastSpaceString6 = result.Substring(lastSpace\
    \ + 6);\n            string secondLastSpaceString7 = result.Substring(lastSpace\
    \ + 7);\n            string secondLastSpaceString8 = result.Substring(lastSpace\
    \ + 8);\n            string secondLastSpaceString9 = result.Substring(lastSpace\
    \ + 9);\n            string secondLastSpaceString10 = result.Substring(lastSpace\
    \ + 10);\n            string secondLastSpaceString11 = result.Substring(lastSpace\
    \ + 11);\n            string secondLastSpaceString12 = result.Substring(lastSpace\
    \ + 12);\n            string secondLastSpaceString13 = result.Substring(lastSpace\
    \ + 13);\n            string secondLastSpaceString14 = result.Substring(lastSpace\
    \ + 14);\n            string secondLastSpaceString15 = result.Substring(lastSpace\
    \ + 15);\n            string secondLastSpaceString16 = result.Substring(lastSpace\
    \ + 16);\n            string secondLastSpaceString17 = result.Substring(lastSpace\
    \ + 17);\n            string secondLastSpaceString18 = result.Substring(lastSpace\
    \ + 18);\n            string secondLastSpaceString19 = result.Substring(lastSpace\
    \ + 19);\n            string secondLastSpaceString20 = result.Substring(lastSpace\
    \ + 20);\n            string secondLastSpaceString21 = result.Substring(lastSpace\
    \ + 21);\n            string secondLastSpaceString22 = result.Substring(lastSpace\
    \ + 22);\n            string secondLastSpaceString23 = result.Substring(lastSpace\
    \ + 23);\n            string secondLastSpaceString24 = result.Substring(lastSpace\
    \ + 24);\n            string secondLastSpaceString25 = result.Substring(lastSpace\
    \ + 25);\n            string secondLastSpaceString26 = result.Substring(lastSpace\
    \ + 26);\n            string secondLastSpaceString27 = result.Substring(", " \
    \       if (text == null || text.Length == 0)\n            return text;\n    \
    \    StringBuilder sb = new StringBuilder(text.Length);\n        bool isSpace\
    \ = false;\n        foreach (char c in text) {\n            if (c == ' ') {\n\
    \                isSpace = true;\n                sb.Append('_');\n          \
    \  } else {\n                isSpace = false;\n                sb.Append(c);\n\
    \            }\n        }\n        if (sb.Length > 2 && isSpace) {\n         \
    \   int lastSpace = sb.Length - 1;\n            int lastSpaceIndex = sb.ToString().LastIndexOf('\
    \ ');\n            int lastSpaceCount = 1;\n            while (lastSpaceIndex\
    \ != -1) {\n                lastSpaceCount++;\n                lastSpaceIndex\
    \ = sb.ToString().LastIndexOf(' ', lastSpaceIndex + 1);\n            }\n     \
    \       if (lastSpaceCount > 2) {\n                sb.Remove(lastSpaceIndex, lastSpaceIndex\
    \ + 2);\n            }\n        }\n        return sb.ToString();", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            }\n            else {\n   \
    \             result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string lastTwo = result.Substring(result.Length - 2);\n\
    \            string firstTwo = result.Substring(0, result.Length - 2);\n     \
    \       if (lastTwo.Equals(firstTwo)) {\n                result = result.Replace(lastTwo,\
    \ \"-\");\n            }\n        }\n        return result;", '        return
    Regex.Replace(text, @"\s+", "_");', "        if (text == null)\n            throw\
    \ new ArgumentNullException(\"text\");\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        foreach (char c in text) {\n            if (c == ' ')\n             \
    \   sb.Append('_');\n            else\n                sb.Append(c);\n       \
    \ }\n        return sb.ToString();", "        if (text == null || text.Length\
    \ == 0)\n            return text;\n        StringBuilder sb = new StringBuilder();\n\
    \        bool first = true;\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                if (first) {\n                    first = false;\n\
    \                } else {\n                    sb.Append('_');\n             \
    \   }\n            } else {\n                sb.Append(c);\n            }\n  \
    \      }\n        return sb.ToString();", "        string result = \"\";\n   \
    \     foreach (char c in text) {\n            if (c == ' ') {\n              \
    \  result += \"_\";\n            } else {\n                result += c;\n    \
    \        }\n        }\n        if (result.Length > 2) {\n            string temp\
    \ = \"\";\n            for (int i = 0; i < result.Length - 2; i++) {\n       \
    \         temp += result[i] + \"-\";\n            }\n            result += temp;\n\
    \        }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int i = 0;\n           \
    \ while (i < result.Length - 2) {\n                if (result[i] == '_' && result[i\
    \ + 1] == '_') {\n                    result += result.Substring(i + 1, 2);\n\
    \                    i += 2;\n                } else {\n                    result\
    \ += result.Substring(i + 1, 1);\n                    i++;\n                }\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Contains(\"_\") && result.IndexOf(\"\
    _\", StringComparison.Ordinal) > result.IndexOf(\"_\", StringComparison.Ordinal)\
    \ - 1) {\n            result = result.Replace(\"_\", \"-\");\n        }\n    \
    \    return result;", "        string result = \"\";\n        foreach (char c\
    \ in text) {\n            if (c == ' ') {\n                result += \"_\";\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 2) {\n            int i = 0;\n            while (i\
    \ < result.Length - 2) {\n                if (result[i] == '_' && result[i + 1]\
    \ == '_') {\n                    result += result.Substring(i + 1, 2);\n     \
    \               i += 2;\n                } else {\n                    result\
    \ += result.Substring(i + 1, 1);\n                    i++;\n                }\n\
    \            }\n        }\n        return result;", '        return Regex.Replace(text,
    @"\s+", "_");', "        if (text == null) return null;\n        StringBuilder\
    \ sb = new StringBuilder();\n        bool inSpace = false;\n        foreach (char\
    \ c in text) {\n            if (c == ' ') {\n                if (!inSpace) {\n\
    \                    inSpace = true;\n                    sb.Append('_');\n  \
    \              } else {\n                    inSpace = false;\n              \
    \      sb.Append(c);\n                }\n            } else {\n              \
    \  sb.Append(c);\n            }\n        }\n        return sb.ToString();", " \
    \       string result = \"\";\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                result += c.ToString();\n            }\n \
    \           else {\n                result += c.ToString() + \"_\";\n        \
    \    }\n        }\n        if (result.Length > 2) {\n            string lastSpace\
    \ = result.Substring(result.Length - 1, 1);\n            string firstSpace = result.Substring(0,\
    \ result.Length - 1);\n            string newResult = firstSpace + \"-\" + lastSpace;\n\
    \            return newResult;\n        }\n        else {\n            return\
    \ result;\n        }", "        string result = \"\";\n        foreach (char c\
    \ in text) {\n            if (c == ' ') {\n                result += \"_\";\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        if (result.Length > 2) {\n            int i = 0;\n            while (i\
    \ < result.Length - 2) {\n                if (result[i] == '_' && result[i + 1]\
    \ == '_') {\n                    result += result.Substring(i + 1, 2);\n     \
    \               i += 2;\n                } else {\n                    result\
    \ += result.Substring(i + 1, 1);\n                    i += 1;\n              \
    \  }\n            }\n        }\n        return result;", "        // Replace all\
    \ spaces with underscores\n        text = text.Replace(\" \", \"_\");\n      \
    \  // If there are more than 2 consecutive spaces, replace all \n        // consecutive\
    \ spaces with -\n        if (text.Contains(\" \") && text.Contains(\" \")) {\n\
    \            text = text.Replace(\" \", \"-\");\n        }\n        return text;",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            }\n         \
    \   else {\n                result += c;\n            }\n        }\n        if\
    \ (result.Length > 2) {\n            int lastSpace = result.LastIndexOf(' ');\n\
    \            int lastSpace2 = result.LastIndexOf(' ');\n            int lastSpace3\
    \ = result.LastIndexOf(' ');\n            int lastSpace4 = result.LastIndexOf('\
    \ ');\n            int lastSpace5 = result.LastIndexOf(' ');\n            int\
    \ lastSpace6 = result.LastIndexOf(' ');\n            int lastSpace7 = result.LastIndexOf('\
    \ ');\n            int lastSpace8 = result.LastIndexOf(' ');\n            int\
    \ lastSpace9 = result.LastIndexOf(' ');\n            int lastSpace10 = result.LastIndexOf('\
    \ ');\n            int lastSpace11 = result.LastIndexOf(' ');\n            int\
    \ lastSpace12 = result.LastIndexOf(' ');\n            int lastSpace13 = result.LastIndexOf('\
    \ ');\n            int lastSpace14 = result.LastIndexOf(' ');\n            int\
    \ lastSpace15 = result.LastIndexOf(' ');\n            int lastSpace16 = result.LastIndexOf('\
    \ ');\n            int lastSpace17 = result.LastIndexOf(' ');\n            int\
    \ lastSpace18 = result.LastIndexOf(' ');\n            int lastSpace19 = result.LastIndexOf('\
    \ ');\n            int lastSpace20 = result.LastIndexOf(' ');\n            int\
    \ lastSpace21 = result.LastIndexOf(' ');\n            int lastSpace22 = result.LastIndexOf('\
    \ ');\n            int lastSpace23 = result.LastIndexOf(' ');\n            int\
    \ lastSpace24 = result.LastIndexOf(' ');\n            int lastSpace25 = result.LastIndexOf('\
    \ ');\n            int lastSpace26 = result.LastIndexOf(' ');\n            int\
    \ lastSpace27 = result.LastIndexOf(' ');\n            int lastSpace28 = result.LastIndexOf('\
    \ ');\n            int lastSpace29 = result.LastIndexOf(' ');\n            int\
    \ lastSpace30 = result.LastIndexOf(' ');\n            int lastSpace31 = result.LastIndexOf('\
    \ ');\n            int lastSpace32 = result.LastIndexOf(' ');\n            int\
    \ lastSpace33 = result.LastIndexOf(' ');\n            int lastSpace34 = result.LastIndexOf('\
    \ ');\n            int lastSpace35 = result.Last", "        if (text == null)\
    \ {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        bool first = true;\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                if (first) {\n                    first = false;\n\
    \                } else {\n                    sb.Append('_');\n             \
    \   }\n            } else {\n                sb.Append(c);\n            }\n  \
    \      }\n        return sb.ToString();", "        if (string.IsNullOrEmpty(text))\n\
    \            return text;\n        if (text.Contains(\" \"))\n            return\
    \ text.Replace(\" \", \"_\");\n        if (text.Contains(\" \"))\n           \
    \ return text.Replace(\" \", \"-\");\n        return text;", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Contains(\"_\")) {\n   \
    \         result = result.Replace(\"_\", \"-\");\n        }\n        return result;",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += c.ToString();\n            } else\
    \ {\n                result += c.ToString() + \"_\";\n            }\n        }\n\
    \        if (result.Length > 2) {\n            string lastSpace = result.Substring(result.Length\
    \ - 1);\n            string secondLastSpace = result.Substring(0, result.Length\
    \ - 1);\n            string result = secondLastSpace + \"-\" + lastSpace;\n  \
    \      }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int lastSpace = result.LastIndexOf('\
    \ ');\n            string before = result.Substring(0, lastSpace);\n         \
    \   string after = result.Substring(lastSpace);\n            result = before +\
    \ \"-\" + after;\n        }\n        return result;", "        string result =\
    \ \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n   \
    \             result += \"_\";\n            } else {\n                result +=\
    \ c;\n            }\n        }\n        if (result.Length > 2) {\n           \
    \ int lastSpace = result.LastIndexOf(' ');\n            int lastSpace2 = result.LastIndexOf('\
    \ ');\n            if (lastSpace != lastSpace2) {\n                result = result.Substring(0,\
    \ lastSpace) + \"-\";\n            }\n        }\n        return result;", "  \
    \      if (text == null || text.Length == 0) return text;\n        StringBuilder\
    \ sb = new StringBuilder(text);\n        bool space = false;\n        for (int\
    \ i = 0; i < text.Length; i++) {\n            if (text[i] == ' ') {\n        \
    \        if (!space) {\n                    space = true;\n                  \
    \  sb.Append('_');\n                } else {\n                    space = false;\n\
    \                    sb.Append(' ');\n                }\n            } else {\n\
    \                space = false;\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string lastSpace = result.Substring(result.Length - 1, 1);\n\
    \            string nextSpace = result.Substring(0, result.Length - 1);\n    \
    \        while (nextSpace.Contains(lastSpace)) {\n                result = result.Replace(lastSpace,\
    \ \"-\");\n                lastSpace = result.Substring(result.Length - 1, 1);\n\
    \            }\n        }\n        return result;", "        if (text == null\
    \ || text.Length == 0)\n            return text;\n        if (text.Length == 1)\n\
    \            return text;\n        if (text.Length == 2)\n            return text;\n\
    \        if (text.Length > 2)\n            return text.Replace(\" \", \"_\");\n\
    \        return text;", "        // Replace all spaces with underscores\n    \
    \    text = text.Replace(\" \", \"_\");\n        // If there are more than 2 consecutive\
    \ spaces, replace all \n        // consecutive spaces with -\n        if (text.Contains(\"\
    \ \") && (text.IndexOf(\" \") + 1).Equals(text.Length)) {\n            text =\
    \ text.Replace(\" \", \"-\");\n        }\n        return text;", '        return
    text.Replace(" ", "_").Replace(" -", "_");', "        string result = \"\";\n\
    \        foreach (char c in text) {\n            if (c == ' ') {\n           \
    \     result += \"_\";\n            } else {\n                result += c;\n \
    \           }\n        }\n        if (result.Length > 2) {\n            result\
    \ = result.Replace(\" \", \"-\");\n        }\n        return result;", "     \
    \   if (text == null || text.Length == 0)\n            return text;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        bool inSpace = false;\n      \
    \  bool inDoubleSpace = false;\n        foreach (char c in text) {\n         \
    \   if (c == '_') {\n                inDoubleSpace = true;\n            }\n  \
    \          if (inDoubleSpace) {\n                inDoubleSpace = false;\n    \
    \            sb.Append('_');\n            }\n            if (c == ' ') {\n   \
    \             inSpace = true;\n            }\n            if (inSpace) {\n   \
    \             inSpace = false;\n                sb.Append('_');\n            }\n\
    \            sb.Append(c);\n        }\n        return sb.ToString();", "     \
    \   if (string.IsNullOrEmpty(text))\n            return text;\n        var result\
    \ = new StringBuilder();\n        foreach (var c in text) {\n            if (c\
    \ == ' ') {\n                result.Append('_');\n            } else {\n     \
    \           result.Append(c);\n            }\n        }\n        return result.ToString();",
  "        if (text == null)\n            return null;\n        StringBuilder sb =\
    \ new StringBuilder(text.Length);\n        foreach (char c in text) {\n      \
    \      if (c == ' ')\n                sb.Append('_');\n            else\n    \
    \            sb.Append(c);\n        }\n        return sb.ToString();", "     \
    \   string result = \"\";\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                result += c.ToString();\n            } else {\n\
    \                result += c.ToString() + \"_\";\n            }\n        }\n \
    \       if (result.Length > 2) {\n            result = result.Substring(0, result.Length\
    \ - 2);\n        }\n        return result;", "        if (text == null || text.Length\
    \ == 0)\n            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool isFirst = true;\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                if (!isFirst)\n                    sb.Append('_');\n\
    \                isFirst = false;\n            }\n            else {\n       \
    \         isFirst = true;\n            }\n            sb.Append(c);\n        }\n\
    \        return sb.ToString();", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            result = result.Replace(\"\
    \ \", \"-\");\n        }\n        return result;", '        return Regex.Replace(text,
    @"\s+", "_");', "        if (text == null)\n            return null;\n       \
    \ StringBuilder sb = new StringBuilder();\n        bool first = true;\n      \
    \  foreach (char c in text) {\n            if (c == ' ') {\n                if\
    \ (first) {\n                    first = false;\n                } else {\n  \
    \                  sb.Append('-');\n                }\n            } else {\n\
    \                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  '        return Regex.Replace(text, @"\s+", "_");', "        string result = \"\"\
    ;\n        foreach (char c in text) {\n            if (c == ' ') {\n         \
    \       result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastSpace = result.Substring(result.Length - 1);\n            if (lastSpace\
    \ == \" \") {\n                result = result.Substring(0, result.Length - 1);\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastSpace = result.Substring(result.Length - 1);\n            if (lastSpace\
    \ == \" \") {\n                result = result.Substring(0, result.Length - 1);\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in text) {\n            if (c == ' ') {\n       \
    \         result += \"_\";\n            } else {\n                result += c;\n\
    \            }\n        }\n        if (result.Length > 2) {\n            string\
    \ lastTwo = result.Substring(0, result.Length - 2);\n            string rest =\
    \ result.Substring(result.Length - 2);\n            result = lastTwo + \"-\" +\
    \ rest;\n        }\n        return result;", "        if (text == null || text.Length\
    \ == 0)\n            return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n\
    \        bool wasSpace = false;\n        foreach (char c in text) {\n        \
    \    if (c == ' ') {\n                if (!wasSpace)\n                    sb.Append('_');\n\
    \                wasSpace = true;\n            }\n            else {\n       \
    \         wasSpace = false;\n                sb.Append(c);\n            }\n  \
    \      }\n        return sb.ToString();", "        string result = \"\";\n   \
    \     foreach (char c in text) {\n            if (c == ' ') {\n              \
    \  result += \"_\";\n            } else {\n                result += c;\n    \
    \        }\n        }\n        return result;", '        return Regex.Replace(text,
    @"\s+", "_");', "        string result = \"\";\n        foreach (char c in text)\
    \ {\n            if (c == ' ') {\n                result += \"_\";\n         \
    \   } else {\n                result += c;\n            }\n        }\n       \
    \ if (result.Length > 2) {\n            string lastTwo = result.Substring(0, result.Length\
    \ - 2);\n            string rest = result.Substring(result.Length - 2);\n    \
    \        result += \"-\" + lastTwo;\n            result += rest;\n        }\n\
    \        return result;", "        if (string.IsNullOrEmpty(text))\n         \
    \   return text;\n        if (text.Length > 2)\n            return text.Replace(\"\
    \ \", \"-\");\n        return text.Replace(\" \", \"_\");", "        string result\
    \ = \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n \
    \               result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    string temp = result;\n            result = \"\";\n            int count\
    \ = 0;\n            while (temp.Length > 0) {\n                if (temp[0] ==\
    \ ' ') {\n                    count++;\n                    if (count == 2) {\n\
    \                        result += temp[0];\n                        count = 0;\n\
    \                    }\n                } else {\n                    result +=\
    \ temp[0];\n                    count = 0;\n                }\n              \
    \  temp = temp.Substring(1);\n            }\n        }\n        return result;",
  "        if (text == null)\n            return null;\n        if (text.Length ==\
    \ 0)\n            return text;\n        if (text.Length == 1)\n            return\
    \ text;\n        if (text.Length == 2)\n            return text;\n        if (text.Length\
    \ > 2) {\n            string result = text.Replace(\" \", \"_\");\n          \
    \  int lastSpace = result.LastIndexOf(' ');\n            if (lastSpace != -1)\
    \ {\n                result = result.Substring(0, lastSpace);\n              \
    \  for (int i = lastSpace + 1; i < result.Length; i++) {\n                   \
    \ char c = result[i];\n                    if (c == '_') {\n                 \
    \       result[i] = ' ';\n                    }\n                }\n         \
    \   }\n            return result;\n        }\n        return text;", "       \
    \ if (text == null || text.Length == 0) return text;\n        StringBuilder sb\
    \ = new StringBuilder(text.Length);\n        bool space = false;\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                space = true;\n\
    \                sb.Append('_');\n            } else {\n                space\
    \ = false;\n                sb.Append(c);\n            }\n        }\n        if\
    \ (space) {\n            sb.Append('-');\n        }\n        return sb.ToString();",
  "        // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n        // If there are more than 2 consecutive spaces, \n    \
    \    // then replace all consecutive spaces with -\n        if (text.Contains(\"\
    \ \") && text.Contains(\" \")) {\n            text = text.Replace(\" \", \"-\"\
    );\n        }\n        return text;", "        string result = \"\";\n       \
    \ foreach (char c in text) {\n            if (c == ' ') {\n                result\
    \ += \"_\";\n            } else {\n                result += c;\n            }\n\
    \        }\n        if (result.Length > 2) {\n            int lastSpace = result.LastIndexOf('\
    \ ');\n            int firstSpace = result.IndexOf(' ');\n            string firstSpaceString\
    \ = result.Substring(0, firstSpace);\n            string lastSpaceString = result.Substring(lastSpace);\n\
    \            string middle = result.Substring(firstSpace + 1, lastSpace - firstSpace\
    \ - 1);\n            string middleString = middle.Replace(\" \", \"-\");\n   \
    \         result = firstSpaceString + middleString + lastSpaceString;\n      \
    \  }\n        return result;", "        if (text == null || text.Length == 0)\
    \ return text;\n        StringBuilder sb = new StringBuilder(text.Length);\n \
    \       bool isFirst = true;\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                if (isFirst) {\n                    isFirst\
    \ = false;\n                } else {\n                    sb.Append('_');\n  \
    \              }\n            } else {\n                sb.Append(c);\n      \
    \      }\n        }\n        return sb.ToString();", "        string result =\
    \ \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n   \
    \             result += \"_\";\n            } else {\n                result +=\
    \ c;\n            }\n        }\n        if (result.Length > 2) {\n           \
    \ int lastSpace = result.LastIndexOf(' ');\n            int lastSpace2 = result.LastIndexOf('\
    \ ', lastSpace - 1);\n            int lastSpace3 = result.LastIndexOf(' ', lastSpace2\
    \ - 1);\n            int lastSpace4 = result.LastIndexOf(' ', lastSpace3 - 1);\n\
    \            int lastSpace5 = result.LastIndexOf(' ', lastSpace4 - 1);\n     \
    \       int lastSpace6 = result.LastIndexOf(' ', lastSpace5 - 1);\n          \
    \  int lastSpace7 = result.LastIndexOf(' ', lastSpace6 - 1);\n            int\
    \ lastSpace8 = result.LastIndexOf(' ', lastSpace7 - 1);\n            int lastSpace9\
    \ = result.LastIndexOf(' ', lastSpace8 - 1);\n            int lastSpace10 = result.LastIndexOf('\
    \ ', lastSpace9 - 1);\n            int lastSpace11 = result.LastIndexOf(' ', lastSpace10\
    \ - 1);\n            int lastSpace12 = result.LastIndexOf(' ', lastSpace11 - 1);\n\
    \            int lastSpace13 = result.LastIndexOf(' ', lastSpace12 - 1);\n   \
    \         int lastSpace14 = result.LastIndexOf(' ', lastSpace13 - 1);\n      \
    \      int lastSpace15 = result.LastIndexOf(' ', lastSpace14 - 1);\n         \
    \   int lastSpace16 = result.LastIndexOf(' ', lastSpace15 - 1);\n            int\
    \ lastSpace17 = result.LastIndexOf(' ', lastSpace16 - 1);\n            int lastSpace18\
    \ = result.LastIndexOf(' ', lastSpace17 - 1);\n            int lastSpace19 = result.LastIndexOf('\
    \ ', lastSpace18 - 1);\n            int lastSpace20 = result.LastIndexOf(' ',\
    \ lastSpace19 - 1);\n            int lastSpace21 = result.LastIndexOf(' ', lastSpace20\
    \ - 1);\n            int lastSpace22 = result.LastIndexOf(' ', lastSpace21 - 1);\n\
    \            int lastSpace23 = result.LastIndexOf(' ', lastSpace22 - 1);\n   \
    \         int lastSpace24 = result.LastIndexOf(' ', lastSpace23 - 1);\n      \
    \      int lastSpace25 = result.LastIndexOf(' ', lastSpace24 - 1);\n         \
    \   int lastSpace26 = result.LastIndexOf(' ', lastSpace25 - 1);\n            int\
    \ lastSpace27 = result.LastIndexOf(' ', lastSpace26 - 1);\n            int lastSpace28\
    \ = ", "        string result = \"\";\n        foreach (char c in text) {\n  \
    \          if (c == ' ') {\n                result += \"_\";\n            } else\
    \ {\n                result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string temp = \"\";\n            int i = 0;\n          \
    \  while (i < result.Length - 2) {\n                if (result[i] == '_' && result[i\
    \ + 1] == '_') {\n                    temp += \"-\";\n                    i +=\
    \ 2;\n                } else {\n                    temp += result[i];\n     \
    \               i++;\n                }\n            }\n            result = temp;\n\
    \        }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int i = 0;\n           \
    \ while (i < result.Length - 2) {\n                if (result[i] == '_' && result[i\
    \ + 1] == '_') {\n                    result += \" - \";\n                   \
    \ i += 2;\n                } else {\n                    i++;\n              \
    \  }\n            }\n        }\n        return result;", "        // Replace all\
    \ spaces with underscores\n        text = text.Replace(\" \", \"_\");\n      \
    \  // If there are more than 2 consecutive spaces, \n        // then replace all\
    \ consecutive spaces with -\n        if (text.Contains(\" \") && (text.IndexOf(\"\
    \ \") + 1) < text.Length) {\n            text = text.Replace(\" \", \"-\");\n\
    \        }\n        return text;", "        string result = \"\";\n        foreach\
    \ (char c in text) {\n            if (c == ' ') {\n                result += \"\
    _\";\n            } else {\n                result += c;\n            }\n    \
    \    }\n        if (result.Length > 2) {\n            int start = 0;\n       \
    \     int end = 0;\n            while (end < result.Length) {\n              \
    \  start = end;\n                end = result.IndexOf(' ', start);\n         \
    \       if (end == -1) {\n                    end = result.Length;\n         \
    \       }\n                result += \"-\";\n                for (int i = start;\
    \ i < end; i++) {\n                    result += result[i];\n                }\n\
    \            }\n        }\n        return result;", "        if (text == null\
    \ || text.Length == 0)\n            return text;\n        var sb = new StringBuilder();\n\
    \        foreach (var c in text) {\n            if (c == ' ') {\n            \
    \    if (sb.Length > 0)\n                    sb.Append('_');\n               \
    \ sb.Append(c);\n            } else {\n                sb.Append(c);\n       \
    \     }\n        }\n        return sb.ToString();", "        if (string.IsNullOrEmpty(text))\n\
    \            return text;\n        var sb = new StringBuilder(text);\n       \
    \ foreach (char c in text) {\n            if (c == ' ') {\n                sb.Replace(\"\
    \ \", \"_\");\n                if (sb.Length > 2)\n                    sb.Replace(\"\
    \ \", \"-\");\n            }\n        }\n        return sb.ToString();", "   \
    \     string result = \"\";\n        foreach (char c in text) {\n            if\
    \ (c == ' ') {\n                result += '_';\n            } else {\n       \
    \         result += c;\n            }\n        }\n        return result;", " \
    \       string result = \"\";\n        foreach (char c in text) {\n          \
    \  if (c == ' ') {\n                result += \"_\";\n            } else {\n \
    \               result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string lastTwo = result.Substring(0, result.Length - 2);\n\
    \            string rest = result.Substring(result.Length - 2);\n            result\
    \ = lastTwo + \"-\" + rest;\n        }\n        return result;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    string temp = result;\n            result = \"\";\n            int i = 0;\n\
    \            while (i < temp.Length - 2) {\n                result += temp[i];\n\
    \                i++;\n            }\n            result += temp[i];\n       \
    \ }\n        return result;", "        // Replace all spaces with underscores\n\
    \        text = text.Replace(\" \", \"_\");\n        // If text has more than\
    \ 2 consecutive spaces, replace all consecutive spaces with -\n        if (text.Contains(\"\
    \ \") && (text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\" \", text.IndexOf(\"\
    \ \", text.IndexOf(\" \", text.IndexOf(\" \", text.", "        string result =\
    \ \"\";\n        foreach (char c in text) {\n            if (c == ' ') {\n   \
    \             result += \"_\";\n            } else {\n                result +=\
    \ c;\n            }\n        }\n        if (result.Length > 2) {\n           \
    \ int i = 0;\n            while (i < result.Length - 2) {\n                if\
    \ (result[i] == '_' && result[i + 1] == '_') {\n                    result = result.Replace(\"\
    _\", \"_\" + result[i + 2]);\n                    i += 3;\n                } else\
    \ {\n                    i++;\n                }\n            }\n        }\n \
    \       return result;", "        if (text == null) return null;\n        StringBuilder\
    \ sb = new StringBuilder(text.Length);\n        foreach (char c in text) {\n \
    \           if (c == ' ') {\n                sb.Append('_');\n            } else\
    \ {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        string result = \"\";\n        foreach (char c in text) {\n           \
    \ if (c == ' ') {\n                result += \"_\";\n            } else {\n  \
    \              result += c;\n            }\n        }\n        if (result.Length\
    \ > 2) {\n            string lastSpace = result.Substring(result.Length - 1);\n\
    \            string nextSpace = result.Substring(0, result.Length - 1);\n    \
    \        if (lastSpace == nextSpace) {\n                result = result.Replace(lastSpace,\
    \ \"-\");\n            }\n        }\n        return result;", "        string\
    \ result = \"\";\n        foreach (char c in text) {\n            if (c == ' ')\
    \ {\n                result += \"_\";\n            } else {\n                result\
    \ += c;\n            }\n        }\n        if (result.Length > 2) {\n        \
    \    result = result.Replace(\" \", \"-\");\n        }\n        return result;",
  "        // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n        // If there are more than 2 consecutive spaces, replace\
    \ all \n        // consecutive spaces with -\n        if (text.Contains(\" \"\
    ) && (text.IndexOf(\" \", text.IndexOf(\" \") + 1) != text.Length - 1)) {\n  \
    \          text = text.Replace(\" \", \"-\");\n        }\n        return text;",
  "        if (text == null || text.Length <= 0)\n            return text;\n     \
    \   StringBuilder sb = new StringBuilder();\n        bool isFirst = true;\n  \
    \      foreach (char c in text) {\n            if (c == ' ') {\n             \
    \   if (isFirst) {\n                    isFirst = false;\n                } else\
    \ {\n                    sb.Append('-');\n                }\n            } else\
    \ {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
  "        // Replace all spaces with underscores\n        text = text.Replace(\"\
    \ \", \"_\");\n        // If there are more than 2 consecutive spaces, replace\
    \ all consecutive spaces with -\n        if (text.Contains(\" \") && (text.IndexOf(\"\
    \ \") + 1 == text.LastIndexOf(\" \")))\n            text = text.Replace(\" \"\
    , \"-\");\n        return text;"]
stop_tokens:
- "\n    }\n"
