name: HumanEval_145_order_by_points
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function which sorts the given list of integers\n  \
  \  // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
  \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
  \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
  \    public static List<long> OrderByPoints(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
  \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
  \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
  \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
  \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
  \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
  \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
  \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
  \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
  \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
  \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
  \ (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,\
  \ (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,\
  \ (long)6L}))));\n    }\n\n}\n"
completions: ["        if (nums.Count < 1) return nums;\n        long sum = 0;\n \
    \       long maxSum = nums.Max();\n        foreach (long num in nums) {\n    \
    \        sum += num;\n            if (sum > maxSum) {\n                maxSum\
    \ = sum;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        foreach (long num in nums) {\n            sum += num;\n            if\
    \ (sum == maxSum) {\n                result.Add(num);\n            }\n       \
    \ }\n        return result;", "        long sum = 0;\n        List<long> result\
    \ = new List<long>();\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => sum - x - y);\n        return result;", "        long sum = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in nums) {\n           \
    \ sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => sum - x - y);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (a, b) => sum - a - b);\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;",
  "        long sum = 0;\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n        }\n        List<long> result = new List<long>();\n        long\
    \ curSum = 0;\n        foreach (long num in nums) {\n            curSum += num;\n\
    \            if (curSum > sum) {\n                result.Add(num);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => SumDigits(x) - SumDigits(y));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x + y);\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => { return\
    \ SumDigits(x) - SumDigits(y); }));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, new Comparison<long>((x, y) => SumOfDigits(x)\
    \ - SumOfDigits(y)));\n        return result;", "        if (nums.Count == 0)\
    \ return nums;\n        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        long maxSum = sum;\n        long maxSumIndex = 0;\n      \
    \  foreach (long n in result) {\n            sum += n;\n            if (sum >\
    \ maxSum) {\n                maxSum = sum;\n                maxSumIndex = result.IndexOf(n);\n\
    \            }\n        }\n        List<long> sortedResult = new List<long>();\n\
    \        foreach (long n in result) {\n            if (n == maxSum) {\n      \
    \          sortedResult.Add(maxSumIndex);\n            } else {\n            \
    \    sortedResult.Add(n);\n            }\n        }\n        return sortedResult;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => sum - x);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        long sum = 0;\n        List<long> result\
    \ = new List<long>();\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => { return SumDigits(x) - SumDigits(y); });\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (a, b) => sum\
    \ - a - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (x, y) => SumOfDigits(x) - SumOfDigits(y));\n        return result;", "    \
    \    long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => { return\
    \ SumOfDigits(x) - SumOfDigits(y); }));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, new Comparison<long>((x, y) => sum - x - y));\n\
    \        return result;", "        if (nums.Count < 2) return nums;\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        long maxSum = sum;\n        long maxIndex = -1;\n        foreach (long\
    \ num in nums) {\n            sum += num;\n            if (sum > maxSum) {\n \
    \               maxSum = sum;\n                maxIndex = num;\n            }\n\
    \        }\n        List<long> sortedNums = new List<long>();\n        sortedNums.Add(maxIndex);\n\
    \        sortedNums.AddRange(nums.Where(num => num != maxIndex).OrderBy(num =>\
    \ num).ToList());\n        return sortedNums;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long num in nums) {\n\
    \            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (x, y) => sum - x - y);\n        return result;", "        long sum = 0;\n \
    \       List<long> result = new List<long>();\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => { return SumDigits(a) - SumDigits(b); });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (a, b)\
    \ => { return SumOfDigits(a) - SumOfDigits(b); });\n        return result;", " \
    \       List<long> result = new List<long>();\n        long sum = 0;\n       \
    \ foreach (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => sum - x\
    \ - y));\n        return result;", "        long sum = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in nums) {\n           \
    \ sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (a, b) => SumOfDigits(a) - SumOfDigits(b));\n        return\
    \ result;", "        if (nums.Count == 0) return nums;\n        List<long> sorted\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            sorted.Add(num);\n        }\n      \
    \  sorted.Sort((x, y) => SumDigits(x) - SumDigits(y));\n        return sorted;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \        }\n        List<long> result = new List<long>();\n        foreach (long\
    \ n in nums) {\n            int digit = n % 10;\n            long newSum = sum\
    \ - n * digit;\n            if (newSum < 0) {\n                newSum = sum +\
    \ n * digit;\n            }\n            if (newSum == sum) {\n              \
    \  result.Add(n);\n            }\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => SumDigits(x)\
    \ - SumDigits(y)));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n \
    \           sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => SumDigits(x) - SumDigits(y));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;", "  \
    \      long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \        }\n        List<long> result = new List<long>();\n        foreach (long\
    \ n in nums) {\n            int index = Convert.ToInt32(Math.Floor(Math.Log10(n)));\n\
    \            long temp = sum - n;\n            if (temp < 0) {\n             \
    \   temp = temp + Math.Pow(10, index);\n            }\n            result.Add(temp);\n\
    \        }\n        return result;", "        if (nums.Count == 0) return nums;\n\
    \        List<long> result = new List<long>();\n        long sum = 0;\n      \
    \  foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => SumDigits(x)\
    \ - SumDigits(y)));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        long maxSum = 0;\n        long\
    \ maxSumIndex = 0;\n        foreach (long num in nums) {\n            sum += num;\n\
    \            if (sum > maxSum) {\n                maxSum = sum;\n            \
    \    maxSumIndex = nums.IndexOf(num);\n            }\n        }\n        foreach\
    \ (long num in nums) {\n            if (num == maxSumIndex) {\n              \
    \  result.Add(num);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        if (nums.Count < 2)\n            return\
    \ nums;\n        List<long> result = new List<long>();\n        long sum = 0;\n\
    \        long maxSum = nums.Max();\n        foreach (long num in nums) {\n   \
    \         sum += num;\n            if (sum > maxSum) {\n                result.Add(num);\n\
    \                sum = num;\n            }\n        }\n        if (sum != 0)\n\
    \            result.Add(sum);\n        return result;", "        long sum = 0;\n\
    \        List<long> result = new List<long>();\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        long sum = 0;\n \
    \       List<long> result = new List<long>();\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (a, b) => sum - a - b);\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        long\
    \ maxSum = 0;\n        long maxSumIndex = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            if (sum > maxSum) {\n              \
    \  maxSum = sum;\n                maxSumIndex = num;\n            }\n        }\n\
    \        foreach (long num in nums) {\n            if (num == maxSumIndex) {\n\
    \                result.Add(num);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => SumDigits(a) - SumDigits(b));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (a, b) => sum\
    \ - a - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        long maxSum = 0;\n        long maxIndex = 0;\n\
    \        foreach (long num in nums) {\n            sum += num;\n            if\
    \ (sum > maxSum) {\n                maxSum = sum;\n                maxIndex =\
    \ num;\n            }\n        }\n        foreach (long num in nums) {\n     \
    \       if (num == maxIndex) {\n                result.Add(num);\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => SumDigits(x) - SumDigits(y));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;", "        long sum = 0;\n        List<long> result\
    \ = new List<long>();\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (a, b)\
    \ => sum - a - b);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n \
    \           sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => SumDigits(x) - SumDigits(y));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;", "        long sum = 0;\n        List<long> result =\
    \ new List<long>();\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (x, y) => sum\
    \ - x - y);\n        return result;", "        long sum = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in nums) {\n           \
    \ sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (a, b) => sum - a - b);\n        return result;", "    \
    \    long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        if (nums.Count == 0) return nums;\n        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        long maxSum = nums.Max();\n        long minSum\
    \ = nums.Min();\n        foreach (long num in nums) {\n            sum += num;\n\
    \            if (sum > maxSum) {\n                maxSum = sum;\n            }\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        long maxSumIndex = nums.FindIndex(n => n == maxSum);\n   \
    \     long minSumIndex = nums.FindIndex(n => n == minSum);\n        long maxSumSum\
    \ = maxSum - minSum;\n        long minSumSum = maxSum - nums[maxSumIndex];\n \
    \       long maxSumIndex = nums.FindIndex(n => n == maxSum);\n        long minSumIndex\
    \ = nums.FindIndex(n => n == minSum);\n        long maxSumSum = maxSum - minSum;\n\
    \        long minSumSum = maxSum - nums[maxSumIndex];\n        long maxSumIndex\
    \ = nums.FindIndex(n => n == maxSum);\n        long minSumIndex = nums.FindIndex(n\
    \ => n == minSum);\n        long maxSumSum = maxSum - minSum;\n        long minSumSum\
    \ = maxSum - nums[maxSumIndex];\n        long maxSumIndex = nums.FindIndex(n =>\
    \ n == maxSum);\n        long minSumIndex = nums.FindIndex(n => n == minSum);\n\
    \        long maxSumSum = maxSum - minSum;\n        long minSumSum = maxSum -\
    \ nums[maxSumIndex];\n        long maxSumIndex = nums.FindIndex(n => n == maxSum);\n\
    \        long minSumIndex = nums.FindIndex(n => n == minSum);\n        long maxSumSum\
    \ = maxSum - minSum;\n        long minSumSum = maxSum - nums[maxSumIndex];\n \
    \       long maxSumIndex = nums.FindIndex(n => n == maxSum);\n        long minSumIndex\
    \ = nums.FindIndex(n => n == minSum);\n        long maxSumSum = maxSum - minSum;\n\
    \        long minSumSum = maxSum - nums[maxSumIndex];\n        long maxSumIndex\
    \ = nums.FindIndex(n => n == maxSum);\n        long minSumIndex = nums.FindIndex(n\
    \ => n == minSum);\n        long maxSumSum = maxSum - minSum;\n        long minSumSum\
    \ = maxSum - ", "        List<long> result = new List<long>();\n        long sum\
    \ = 0;\n        foreach (long n in nums) {\n            sum += n;\n          \
    \  result.Add(n);\n        }\n        long maxSum = sum;\n        long maxIndex\
    \ = 0;\n        foreach (long n in nums) {\n            sum += n;\n          \
    \  if (sum > maxSum) {\n                maxSum = sum;\n                maxIndex\
    \ = n;\n            }\n        }\n        List<long> sortedResult = new List<long>();\n\
    \        sortedResult.Add(maxIndex);\n        foreach (long n in nums) {\n   \
    \         if (n != maxIndex) {\n                sortedResult.Add(n);\n       \
    \     }\n        }\n        return sortedResult;", "        if (nums.Count ==\
    \ 0) return nums;\n        long sum = 0;\n        long maxSum = nums.Max();\n\
    \        foreach (long num in nums) {\n            sum += num;\n            if\
    \ (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            if (sum > maxSum) {\n              \
    \  result.Add(num);\n                sum -= num;\n            }\n        }\n \
    \       return result;", "        if (nums.Count == 0) return nums;\n        long\
    \ sum = 0;\n        List<long> result = new List<long>();\n        foreach (long\
    \ n in nums) {\n            sum += n;\n            result.Add(n);\n        }\n\
    \        Array.Sort(result, new Comparison<long>((x, y) => { return SumOfDigits(x)\
    \ - SumOfDigits(y); }));\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        long sum = 0;\n \
    \       List<long> result = new List<long>();\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, delegate(long a, long b) {\n            return sum - a -\
    \ b;\n        });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ new Comparison<long>((x, y) => SumDigits(x) - SumDigits(y)));\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, (a, b) => sum - a\
    \ - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ delegate (long a, long b) {\n            return sum - a - b;\n        });\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (a, b) => sum\
    \ - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (x, y) => SumDigits(x) - SumDigits(y));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => SumOfDigits(x) - SumOfDigits(y));\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ long sum = 0;\n        long maxSum = 0;\n        long maxIndex = 0;\n      \
    \  foreach (long num in nums) {\n            sum += num;\n            if (sum\
    \ > maxSum) {\n                maxSum = sum;\n                maxIndex = num;\n\
    \            }\n        }\n        foreach (long num in nums) {\n            if\
    \ (num == maxIndex) {\n                result.Add(num);\n            }\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        long maxSum = sum;\n    \
    \    List<long> sortedList = new List<long>();\n        foreach (long n in result)\
    \ {\n            sum += n;\n            if (sum > maxSum) {\n                maxSum\
    \ = sum;\n                sortedList.Clear();\n                sortedList.Add(n);\n\
    \            } else if (sum == maxSum) {\n                sortedList.Add(n);\n\
    \            }\n        }\n        return sortedList;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => sum - x - y);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => SumDigits(x) - SumDigits(y));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, new Comparison<long>((x, y) => SumOfDigits(x) - SumOfDigits(y)));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (x, y) => sum\
    \ - x - y);\n        return result;", "        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n        }\n        List<long>\
    \ result = new List<long>();\n        foreach (long num in nums) {\n         \
    \   int digit = num % 10;\n            int index = sum - digit;\n            if\
    \ (index >= 0) {\n                result.Insert(index, num);\n            }\n\
    \        }\n        return result;", "        if (nums.Count == 0)\n         \
    \   return nums;\n        List<long> result = new List<long>();\n        long\
    \ sum = 0;\n        long maxSum = 0;\n        long maxSumIndex = 0;\n        long\
    \ maxSumDigit = 0;\n        long maxSumDigitIndex = 0;\n        long maxSumDigitDigit\
    \ = 0;\n        long maxSumDigitDigitIndex = 0;\n        foreach (long num in\
    \ nums) {\n            sum += num;\n            if (sum > maxSum) {\n        \
    \        maxSum = sum;\n                maxSumIndex = nums.IndexOf(num);\n   \
    \             maxSumDigit = num;\n                maxSumDigitIndex = nums.IndexOf(num);\n\
    \                maxSumDigitDigit = num;\n                maxSumDigitDigitIndex\
    \ = nums.IndexOf(num);\n            }\n        }\n        foreach (long num in\
    \ nums) {\n            sum += num;\n            if (sum > maxSum) {\n        \
    \        maxSum = sum;\n                maxSumIndex = nums.IndexOf(num);\n   \
    \             maxSumDigit = num;\n                maxSumDigitIndex = nums.IndexOf(num);\n\
    \                maxSumDigitDigit = num;\n                maxSumDigitDigitIndex\
    \ = nums.IndexOf(num);\n            }\n        }\n        foreach (long num in\
    \ nums) {\n            sum += num;\n            if (sum > maxSum) {\n        \
    \        maxSum = sum;\n                maxSumIndex = nums.IndexOf(num);\n   \
    \             maxSumDigit = num;\n                maxSumDigitIndex = nums.IndexOf(num);\n\
    \                maxSumDigitDigit = num;\n                maxSumDigitDigitIndex\
    \ = nums.IndexOf(num);\n            }\n        }\n        foreach (long num in\
    \ nums) {\n            sum += num;\n            if (sum > maxSum) {\n        \
    \        maxSum = sum;\n                maxSumIndex = nums.IndexOf(num);\n   \
    \             maxSumDigit = num;\n                maxSumDigitIndex = nums.IndexOf(num);\n\
    \                maxSumDigitDigit = num;\n                maxSumDigitDigitIndex\
    \ = nums.IndexOf(num);\n            }\n        }\n        foreach (long num in\
    \ nums) {\n            sum += num;\n            if (sum > maxSum) {\n        \
    \        maxSum = sum;\n                maxSumIndex = nums.IndexOf(num);\n   \
    \             maxSumDigit = num;\n                maxSumDigitIndex = nums.IndexOf(num);\n\
    \                maxSumDigitDigit = num;\n                maxSumDigitDigitIndex\
    \ = nums.IndexOf(num);\n            }\n        }\n        foreach (long num in\
    \ nums) {\n            sum += num;\n            if (sum > maxSum) {\n        \
    \        ", "        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - b);\n        return result;", "        long sum = 0;\n     \
    \   List<long> result = new List<long>();\n        foreach (long n in nums) {\n\
    \            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (a, b) => SumOfDigits(a) - SumOfDigits(b));\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, (a, b) => sum - a\
    \ - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => { return SumDigits(x) - SumDigits(y); });\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (a, b)\
    \ => sum - a - b);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long num in nums) {\n\
    \            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - b);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        long maxSum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            if (sum > maxSum)\
    \ {\n                maxSum = sum;\n            }\n            result.Add(num);\n\
    \        }\n        List<long> sortedResult = new List<long>();\n        foreach\
    \ (long num in result) {\n            sortedResult.Add(num);\n        }\n    \
    \    sortedResult.Sort();\n        return sortedResult;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - b);\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (x, y) => sum\
    \ - x - y);\n        return result;", "        long sum = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long num in nums) {\n         \
    \   sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (x, y) => SumDigits(x)\
    \ - SumDigits(y));\n        return result;", "        if (nums.Count == 0) return\
    \ nums;\n        List<long> result = new List<long>();\n        long sum = 0;\n\
    \        long maxSum = 0;\n        long maxSumIndex = 0;\n        foreach (long\
    \ num in nums) {\n            sum += num;\n            if (sum > maxSum) {\n \
    \               maxSum = sum;\n                maxSumIndex = num;\n          \
    \  }\n        }\n        long maxSumIndexInOriginalList = 0;\n        foreach\
    \ (long num in nums) {\n            if (num == maxSumIndex) {\n              \
    \  maxSumIndexInOriginalList++;\n            }\n        }\n        foreach (long\
    \ num in nums) {\n            if (num == maxSumIndex) result.Add(num);\n     \
    \   }\n        if (maxSumIndexInOriginalList > 0) result.Insert(maxSumIndexInOriginalList,\
    \ maxSumIndex);\n        return result;", "        if (nums.Count == 0) return\
    \ nums;\n        List<long> result = new List<long>();\n        long sum = 0;\n\
    \        long maxSum = 0;\n        long maxSumIndex = 0;\n        long maxSumDigit\
    \ = 0;\n        long maxSumDigitIndex = 0;\n        long maxSumDigitIndex2 = 0;\n\
    \        long maxSumDigitIndex3 = 0;\n        long maxSumDigitIndex4 = 0;\n  \
    \      long maxSumDigitIndex5 = 0;\n        long maxSumDigitIndex6 = 0;\n    \
    \    long maxSumDigitIndex7 = 0;\n        long maxSumDigitIndex8 = 0;\n      \
    \  long maxSumDigitIndex9 = 0;\n        long maxSumDigitIndex10 = 0;\n       \
    \ long maxSumDigitIndex11 = 0;\n        long maxSumDigitIndex12 = 0;\n       \
    \ long maxSumDigitIndex13 = 0;\n        long maxSumDigitIndex14 = 0;\n       \
    \ long maxSumDigitIndex15 = 0;\n        long maxSumDigitIndex16 = 0;\n       \
    \ long maxSumDigitIndex17 = 0;\n        long maxSumDigitIndex18 = 0;\n       \
    \ long maxSumDigitIndex19 = 0;\n        long maxSumDigitIndex20 = 0;\n       \
    \ long maxSumDigitIndex21 = 0;\n        long maxSumDigitIndex22 = 0;\n       \
    \ long maxSumDigitIndex23 = 0;\n        long maxSumDigitIndex24 = 0;\n       \
    \ long maxSumDigitIndex25 = 0;\n        long maxSumDigitIndex26 = 0;\n       \
    \ long maxSumDigitIndex27 = 0;\n        long maxSumDigitIndex28 = 0;\n       \
    \ long maxSumDigitIndex29 = 0;\n        long maxSumDigitIndex30 = 0;\n       \
    \ long maxSumDigitIndex31 = 0;\n        long maxSumDigitIndex32 = 0;\n       \
    \ long maxSumDigitIndex33 = 0;\n        long maxSumDigitIndex34 = 0;\n       \
    \ long maxSumDigitIndex35 = 0;\n        long maxSumDigitIndex36 = 0;\n       \
    \ long maxSumDigitIndex37 = 0;\n        long maxSumDigitIndex38 = 0;\n       \
    \ long maxSumDigitIndex39 = 0;\n        long maxSumDigitIndex40 = 0;\n       \
    \ long maxSumDigitIndex41 = 0;\n        long maxSumDigitIndex42 = 0;\n       \
    \ long maxSumDigitIndex43 = 0;\n        long maxSumDigitIndex44 = 0;\n       \
    \ long maxSumDigitIndex45 = 0;\n        long maxSumDigitIndex46 = 0;\n       \
    \ long maxSumDigitIndex47 = 0;\n        long maxSumDigitIndex48 = 0;\n       \
    \ long maxSumDigitIndex49 = 0;\n        long maxSumDigitIndex50 = 0;\n       \
    \ long maxSumDigitIndex51 = 0;\n        long maxSumDigitIndex52 = 0;\n       \
    \ long maxSum", "        List<long> result = new List<long>();\n        long sum\
    \ = 0;\n        foreach (long n in nums) {\n            sum += n;\n          \
    \  result.Add(n);\n        }\n        Array.Sort(result, (a, b) => sum - a - b);\n\
    \        return result;", "        long sum = 0;\n        List<long> result =\
    \ new List<long>();\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (a, b) => {\
    \ return SumDigits(a) - SumDigits(b); });\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, new Comparison<long>((x, y) => SumOfDigits(x) - SumOfDigits(y)));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            result.Add(num);\n        }\n        Array.Sort(result, (a,\
    \ b) => sum - a - b);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n \
    \           sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (x, y) => sum - x);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, new Comparison<long>((x, y) => SumDigits(x)\
    \ - SumDigits(y)));\n        return result;", "        long sum = 0;\n       \
    \ List<long> result = new List<long>();\n        foreach (long num in nums) {\n\
    \            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - sum);\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n\
    \            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, (a, b) => { return\
    \ SumDigits(a) - SumDigits(b); });\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n \
    \       return result;", "        long sum = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long num in nums) {\n            sum += num;\n\
    \            result.Add(num);\n        }\n        Array.Sort(result, (a, b) =>\
    \ { return SumDigits(a) - SumDigits(b); });\n        return result;", "      \
    \  if (nums.Count == 0) return nums;\n        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        long maxSum = 0;\n        long maxSumIndex = 0;\n\
    \        long maxSumDigit = 0;\n        foreach (long num in nums) {\n       \
    \     sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = nums.IndexOf(num);\n                maxSumDigit\
    \ = num;\n            }\n        }\n        foreach (long num in nums) {\n   \
    \         sum += num;\n            if (sum == maxSum) {\n                result.Add(num);\n\
    \            }\n        }\n        if (maxSumDigit != 0) {\n            int index\
    \ = nums.IndexOf(maxSumDigit);\n            result.Insert(index, maxSumDigit);\n\
    \        }\n        return result;", "        long sum = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long num in nums) {\n         \
    \   sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (x, y) => sum - x - y);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => SumOfDigits(x) - SumOfDigits(y));\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, delegate(long x,\
    \ long y) { return sum - x - y; });\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            result.Add(num);\n        }\n        Array.Sort(result, new\
    \ Comparison<long>((x, y) => sum - x - y));\n        return result;", "      \
    \  List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => { return SumDigits(x) - SumDigits(y); });\n        return result;", "   \
    \     if (nums.Count < 1) return nums;\n        long sum = 0;\n        long maxSum\
    \ = nums.Max();\n        foreach (long num in nums) {\n            sum += num;\n\
    \            if (sum > maxSum) {\n                maxSum = sum;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        foreach (long\
    \ num in nums) {\n            sum += num;\n            if (sum == maxSum) {\n\
    \                result.Add(num);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long sum = 0;\n        foreach (long num in nums) {\n            sum += num;\n\
    \            result.Add(num);\n        }\n        Array.Sort(result, new Comparison<long>((x,\
    \ y) => SumOfDigits(x) - SumOfDigits(y)));\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        long\
    \ maxSum = 0;\n        long maxSumIndex = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            if (sum > maxSum) {\n              \
    \  maxSum = sum;\n                maxSumIndex = num;\n            }\n        }\n\
    \        foreach (long num in nums) {\n            if (num == maxSumIndex) {\n\
    \                result.Add(num);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => SumOfDigits(x) - SumOfDigits(y));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (a, b) => sum\
    \ - a - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => { return SumDigits(x) - SumDigits(y); });\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \        }\n        List<long> result = new List<long>();\n        long curSum\
    \ = 0;\n        foreach (long n in nums) {\n            curSum += n;\n       \
    \     if (curSum > sum) {\n                result.Add(n);\n            }\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ new Comparison<long>((x, y) => sum - x - y));\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, (x, y) => sum - x\
    \ - y);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => { return SumDigits(x) - SumDigits(y); });\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x);\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => SumOfDigits(x)\
    \ - SumOfDigits(y)));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long num in nums) {\n\
    \            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => SumDigits(a) - SumDigits(b));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, (a, b) => sum - b);\n\
    \        return result;", "        long sum = 0;\n        List<long> result =\
    \ new List<long>();\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (a, b) => sum\
    \ - a - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => SumDigits(x) - SumDigits(y));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => sum - x - y);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long num in nums) {\n\
    \            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ delegate(long x, long y) { return (sum - x) * (sum - y); });\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, new Comparison<long>((x,\
    \ y) => SumDigits(x) - SumDigits(y)));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        if (nums.Count == 0) return nums;\n        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        long maxSum = sum;\n    \
    \    long maxIndex = -1;\n        for (int i = 0; i < nums.Count; i++) {\n   \
    \         long n = nums[i];\n            sum += n;\n            if (sum > maxSum)\
    \ {\n                maxSum = sum;\n                maxIndex = i;\n          \
    \  }\n        }\n        if (maxSum < 0) return nums;\n        List<long> newNums\
    \ = new List<long>();\n        newNums.Add(nums[maxIndex]);\n        for (int\
    \ i = maxIndex + 1; i < nums.Count; i++) {\n            long n = nums[i];\n  \
    \          sum += n;\n            if (sum > maxSum) {\n                maxSum\
    \ = sum;\n                maxIndex = i;\n            }\n            newNums.Add(n);\n\
    \        }\n        return newNums;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (a, b)\
    \ => sum - a - b);\n        return result;", "        long sum = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in nums) {\n           \
    \ sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => sum - x - y);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => { return a - b; });\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, (a, b) => sum - a\
    \ - b);\n        return result;", "        long sum = 0;\n        List<long> result\
    \ = new List<long>();\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (a, b)\
    \ => sum - a - b);\n        return result;"]
stop_tokens:
- "\n    }\n"
