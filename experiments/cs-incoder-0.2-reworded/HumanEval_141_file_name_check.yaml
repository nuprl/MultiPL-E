name: HumanEval_141_file_name_check
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function which takes a string representing a file's\
  \ name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
  \ otherwise.\n    // A file's name is considered to be valid if and only if all\
  \ the following conditions \n    // are met:\n    // - There should not be more\
  \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
  \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
  \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  \    // Examples:\n    // >>> FileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
  )\n    // >>> FileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    public static\
  \ string FileNameCheck(string file_name) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
  example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
  MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\"\
  )));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
  /this_is_valid.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"\
  Yes\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
  \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
  Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
  )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n\
  \    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
  final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_f4indsartal132.\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\"\
  )));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
completions: ["        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       string file_name = file_name.Substring(0, file_name.IndexOf(\".\"));\n\
    \            string extension = file_name.Substring(file_name.IndexOf(\".\"));\n\
    \            string[] extensions = new string[] { \"txt\", \"exe\", \"dll\" };\n\
    \            if (extensions.Contains(extension)) {\n                return \"\
    Yes\";\n            }\n            else {\n                return \"No\";\n  \
    \          }\n        }\n        else {\n            return \"No\";\n        }",
  "        if (file_name.Length > 3) {\n            return \"No\";\n        }\n  \
    \      if (file_name.IndexOf('.') != -1) {\n            if (file_name.Substring(0,\
    \ 1).IsLetterOrDigit()) {\n                if (file_name.Substring(0, file_name.IndexOf('.')).ToLower()\
    \ == \"exe\") {\n                    if (file_name.Substring(file_name.IndexOf('.')\
    \ + 1, 3).ToLower() == \"txt\" || file_name.Substring(file_name.IndexOf('.') +\
    \ 1, 3).ToLower() == \"dll\") {\n                        return \"Yes\";\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string sub_string = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string first_char = sub_string.Substring(0, 1);\n        \
    \    if (first_char.ToUpper() == first_char.ToUpper()) {\n                if (sub_string.Length\
    \ > 1) {\n                    string extension = sub_string.Substring(1);\n  \
    \                  if (extension.ToUpper() == \"TXT\" || extension.ToUpper() ==\
    \ \"EXE\" || extension.ToUpper() == \"DLL\") {\n                        return\
    \ \"Yes\";\n                    }\n                }\n            }\n        }\n\
    \        return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string sub = file_name.Substring(0, file_name.IndexOf(\".\"));\n\
    \            if (sub.Length > 0 && sub[0] == 'a' && sub[1] == 'z' || sub[0] ==\
    \ 'A' && sub[1] == 'Z') {\n                string ext = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n                if (ext == \"txt\" || ext == \"exe\" || ext == \"dll\"\
    ) {\n                    return \"Yes\";\n                }\n            }\n \
    \       }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string sub_string = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \            if (sub_string.Length > 0) {\n                if (sub_string[0] >=\
    \ 'a' && sub_string[0] <= 'z') {\n                    if (sub_string[1] >= 'a'\
    \ && sub_string[1] <= 'z') {\n                        if (sub_string[2] >= 'a'\
    \ && sub_string[2] <= 'z') {\n                            return \"Yes\";\n  \
    \                      }\n                    }\n                }\n         \
    \   }\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \            string extension = file_name.Substring(file_name.IndexOf('.'));\n\
    \            if (extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\") {\n                return \"Yes\";\n            }\n        }\n    \
    \    return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n\
    \        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        string result = regex.Match(file_name).Value;\n        if (result ==\
    \ \"Yes\") {\n            return file_name;\n        }\n        return \"No\";",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        Match match = regex.Match(file_name);\n        if (match.Success)\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            bool is_exe = extension == \"exe\";\n            bool\
    \ is_dll = extension == \"dll\";\n            bool is_txt = extension == \"txt\"\
    ;\n            bool is_other = extension == \"exe\" || extension == \"dll\" ||\
    \ extension == \"txt\";\n            if (is_exe && is_dll) {\n               \
    \ return \"No\";\n            }\n            if (is_exe && is_txt) {\n       \
    \         return \"No\";\n            }\n            if (is_exe && is_other) {\n\
    \                return \"No\";\n            }\n            if (is_dll && is_txt)\
    \ {\n                return \"No\";\n            }\n            if (is_dll &&\
    \ is_other) {\n                return \"No\";\n            }\n            if (is_txt\
    \ && is_other) {\n                return \"No\";\n            }\n            return\
    \ \"Yes\";\n        }\n        return \"No\";", "        string pattern = @\"\
    ^[0-9]{3}\\.[a-zA-Z]{2,3}$\";\n        Regex regex = new Regex(pattern);\n   \
    \     if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                if (file_name.Substring(0, 1).ToLower() != \"a\" &&\
    \ file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0, 1).ToLower()\
    \ != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \                   return \"No\";\n                }\n            }\n       \
    \ }\n        return \"Yes\";", "        if (file_name.Length > 3) {\n        \
    \    return \"No\";\n        }\n        if (file_name.Contains(\".\")) {\n   \
    \         return \"No\";\n        }\n        if (file_name.Substring(0, 1).IsEmpty())\
    \ {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).IndexOfAny(new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\
    \ }) == -1) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ file_name.IndexOf(\".\")).IndexOfAny(new char[] { 'a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z' }) == -1) {\n            return \"No\";\n        }\n    \
    \    if (file_name.Substring(file_name.IndexOf(\".\") + 1).IndexOfAny(new char[]\
    \ { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' }) == -1) {\n        \
    \    return \"No\";\n        }\n        return \"Yes\";", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n\
    \        string result = regex.Match(file_name).Value;\n        if (result ==\
    \ \"Yes\") {\n            return result;\n        } else {\n            return\
    \ \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n\
    \        Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n            string extension_array = extension.Split('.');\n         \
    \   if (extension_array.Length == 1 && extension_array[0] == \"txt\") {\n    \
    \            return \"Yes\";\n            }\n            if (extension_array.Length\
    \ == 2 && extension_array[1] == \"exe\") {\n                return \"Yes\";\n\
    \            }\n            if (extension_array.Length == 2 && extension_array[1]\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n            return\
    \ \"No\";\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        Match match\
    \ = regex.Match(file_name);\n        if (match.Success) {\n            string\
    \ file_name = file_name.Substring(0, file_name.IndexOf(\".\"));\n            string\
    \ extension = file_name.Substring(file_name.LastIndexOf(\".\") + 1);\n       \
    \     if (extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    ) {\n                return \"Yes\";\n            } else {\n                return\
    \ \"No\";\n            }\n        } else {\n            return \"No\";\n     \
    \   }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      else {\n            return \"No\";\n        }", "        if (file_name.Length\
    \ > 3) {\n            return \"No\";\n        }\n        if (file_name.Contains(\"\
    .\")) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).IsEmpty()) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0,\
    \ 1).ToLower() != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \           return \"No\";\n        }\n        if (file_name.Substring(0, 1).ToLower()\
    \ == \"a\") {\n            if (file_name.Substring(1, 1).ToLower() == \"b\") {\n\
    \                if (file_name.Substring(2, 1).ToLower() == \"c\") {\n       \
    \             if (file_name.Substring(3, 1).ToLower() == \"d\") {\n          \
    \              if (file_name.Substring(4, 1).ToLower() == \"e\") {\n         \
    \                   if (file_name.Substring(5, 1).ToLower() == \"f\") {\n    \
    \                            if (file_name.Substring(6, 1).ToLower() == \"g\"\
    ) {\n                                    if (file_name.Substring(7, 1).ToLower()\
    \ == \"h\") {\n                                        if (file_name.Substring(",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                string before_dot = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \                if (before_dot.Length > 0) {\n                    string after_dot\
    \ = file_name.Substring(file_name.IndexOf('.') + 1);\n                    if (after_dot.Length\
    \ > 0 && after_dot.Contains(\"txt\") || after_dot.Contains(\"exe\") || after_dot.Contains(\"\
    dll\")) {\n                        return \"Yes\";\n                    }\n  \
    \              }\n            }\n            return \"No\";\n        }\n     \
    \   return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n\
    \        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\"\
    .\") > 0) {\n                string before_dot = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n                string after_dot = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n                if (before_dot.Length > 0 && after_dot.Length > 0)\
    \ {\n                    char first_letter = before_dot[0];\n                \
    \    char last_letter = after_dot[after_dot.Length - 1];\n                   \
    \ if (first_letter >= 'a' && first_letter <= 'z' || first_letter >= 'A' && first_letter\
    \ <= 'Z') {\n                        if (last_letter >= 'a' && last_letter <=\
    \ 'z' || last_letter >= 'A' && last_letter <= 'Z') {\n                       \
    \     return \"Yes\";\n                        }\n                    }\n    \
    \            }\n            }\n            return \"No\";\n        }\n       \
    \ return \"No\";"]
stop_tokens:
- "\n    }\n"
