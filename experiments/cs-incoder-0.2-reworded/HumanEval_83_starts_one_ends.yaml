name: HumanEval_83_starts_one_ends
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a positive integer n, return the count of the numbers\
  \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
  \ long StartsOneEnds(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartsOneEnds((1L))\
  \ == (1L));\n    Debug.Assert(StartsOneEnds((2L)) == (18L));\n    Debug.Assert(StartsOneEnds((3L))\
  \ == (180L));\n    Debug.Assert(StartsOneEnds((4L)) == (1800L));\n    Debug.Assert(StartsOneEnds((5L))\
  \ == (18000L));\n    }\n\n}\n"
completions: ["        long count = 0;\n        long limit = n;\n        while (limit\
    \ > 0) {\n            long digit = limit % 10;\n            if (digit == 1)\n\
    \                count++;\n            limit /= 10;\n        }\n        return\
    \ count;", "        long count = 0;\n        long limit = n;\n        while (limit\
    \ > 0) {\n            long digit = limit % 10;\n            if (digit == 1) {\n\
    \                count++;\n            }\n            limit = limit / 10;\n  \
    \      }\n        return count;", "        long count = 0;\n        long start\
    \ = 1;\n        long end = 1;\n        while (n > 0) {\n            count += n\
    \ / start;\n            n -= start * count;\n            start *= 10;\n      \
    \      end *= 10;\n        }\n        return count;", "        long count = 0;\n\
    \        long start = 1;\n        long end = 1;\n        while (n > 0) {\n   \
    \         count++;\n            n /= 10;\n        }\n        while (n > 0) {\n\
    \            n /= 10;\n            if (n == 1) {\n                start++;\n \
    \               end++;\n            }\n        }\n        return count;", "  \
    \      long count = 0;\n        long last = 1;\n        long current;\n      \
    \  while (n > 1) {\n            current = last + 1;\n            while (current\
    \ < n) {\n                last = current;\n                current += 1;\n   \
    \         }\n            if (current == n) {\n                count += 1;\n  \
    \          }\n        }\n        return count;", "        long count = 0;\n  \
    \      long limit = n;\n        while (limit > 0) {\n            long digit =\
    \ limit % 10;\n            if (digit == 1) {\n                count++;\n     \
    \       }\n            limit /= 10;\n        }\n        return count;", "    \
    \    long count = 0;\n        long digit = n;\n        while (digit > 0) {\n \
    \           count++;\n            digit /= 10;\n        }\n        return count;",
  "        long count = 0;\n        long digit = n;\n        while (digit > 0) {\n\
    \            count += digit % 10;\n            digit /= 10;\n        }\n     \
    \   return count;", "        long count = 0;\n        long nDigits = n / 10;\n\
    \        long nDigitsRemainder = n % 10;\n        long nDigitsRemainder2 = n %\
    \ 10;\n        long nDigitsRemainder3 = n % 10;\n        long nDigitsRemainder4\
    \ = n % 10;\n        long nDigitsRemainder5 = n % 10;\n        long nDigitsRemainder6\
    \ = n % 10;\n        long nDigitsRemainder7 = n % 10;\n        long nDigitsRemainder8\
    \ = n % 10;\n        long nDigitsRemainder9 = n % 10;\n        long nDigitsRemainder10\
    \ = n % 10;\n        long nDigitsRemainder11 = n % 10;\n        long nDigitsRemainder12\
    \ = n % 10;\n        long nDigitsRemainder13 = n % 10;\n        long nDigitsRemainder14\
    \ = n % 10;\n        long nDigitsRemainder15 = n % 10;\n        long nDigitsRemainder16\
    \ = n % 10;\n        long nDigitsRemainder17 = n % 10;\n        long nDigitsRemainder18\
    \ = n % 10;\n        long nDigitsRemainder19 = n % 10;\n        long nDigitsRemainder20\
    \ = n % 10;\n        long nDigitsRemainder21 = n % 10;\n        long nDigitsRemainder22\
    \ = n % 10;\n        long nDigitsRemainder23 = n % 10;\n        long nDigitsRemainder24\
    \ = n % 10;\n        long nDigitsRemainder25 = n % 10;\n        long nDigitsRemainder26\
    \ = n % 10;\n        long nDigitsRemainder27 = n % 10;\n        long nDigitsRemainder28\
    \ = n % 10;\n        long nDigitsRemainder29 = n % 10;\n        long nDigitsRemainder30\
    \ = n % 10;\n        long nDigitsRemainder31 = n % 10;\n        long nDigitsRemainder32\
    \ = n % 10;\n        long nDigitsRemainder33 = n % 10;\n        long nDigitsRemainder34\
    \ = n % 10;\n        long nDigitsRemainder35 = n % 10;\n        long nDigitsRemainder36\
    \ = n % 10;\n        long nDigitsRemainder37 = n % 10;\n        long nDigitsRemainder38\
    \ = n % 10;\n        long nDigitsRemainder39 = n % 10;\n        long nDigitsRemainder40\
    \ = n % 10;\n        long nDigitsRemainder41 = n % 10;\n        long nDigitsRemainder42\
    \ = n % 10;\n        long nDigitsRemainder4", "        long count = 0;\n     \
    \   long start = 1;\n        long end = 1;\n        while (n >= start) {\n   \
    \         count += (n-start > end-start) ? 1 : 0;\n            start = end;\n\
    \            end += 1;\n        }\n        return count;", "        long count\
    \ = 0;\n        long start = 1;\n        long end = 1;\n        while (n > 0)\
    \ {\n            long digit = n % 10;\n            if (digit == 1) {\n       \
    \         count++;\n                if (start == 1) {\n                    start\
    \ = n;\n                } else {\n                    end = n;\n             \
    \   }\n            }\n            n = n / 10;\n        }\n        return count;",
  "        long count = 0;\n        long start = 1;\n        long end = 1;\n     \
    \   while (start <= n) {\n            if (n % start == 0) {\n                count++;\n\
    \            }\n            start *= 10;\n        }\n        while (end <= n)\
    \ {\n            if (n % end == 0) {\n                count++;\n            }\n\
    \            end *= 10;\n        }\n        return count;", "        long count\
    \ = 0;\n        long last = 0;\n        long cur = 0;\n        while (n > 0) {\n\
    \            cur = n % 10;\n            if (cur == 1) {\n                count++;\n\
    \            }\n            last = cur;\n            n = n / 10;\n        }\n\
    \        if (last == 1) {\n            count++;\n        }\n        return count;",
  "        long count = 0;\n        long lastDigit = n % 10;\n        long lastDigitCount\
    \ = n % 1000;\n        long lastDigitCount2 = lastDigitCount % 1000;\n       \
    \ long lastDigitCount3 = lastDigitCount2 % 1000;\n        long lastDigitCount4\
    \ = lastDigitCount3 % 1000;\n        long lastDigitCount5 = lastDigitCount4 %\
    \ 1000;\n        long lastDigitCount6 = lastDigitCount5 % 1000;\n        long\
    \ lastDigitCount7 = lastDigitCount6 % 1000;\n        long lastDigitCount8 = lastDigitCount7\
    \ % 1000;\n        long lastDigitCount9 = lastDigitCount8 % 1000;\n        long\
    \ lastDigitCount10 = lastDigitCount9 % 1000;\n        long lastDigitCount11 =\
    \ lastDigitCount10 % 1000;\n        long lastDigitCount12 = lastDigitCount11 %\
    \ 1000;\n        long lastDigitCount13 = lastDigitCount12 % 1000;\n        long\
    \ lastDigitCount14 = lastDigitCount13 % 1000;\n        long lastDigitCount15 =\
    \ lastDigitCount14 % 1000;\n        long lastDigitCount16 = lastDigitCount15 %\
    \ 1000;\n        long lastDigitCount17 = lastDigitCount16 % 1000;\n        long\
    \ lastDigitCount18 = lastDigitCount17 % 1000;\n        long lastDigitCount19 =\
    \ lastDigitCount18 % 1000;\n        long lastDigitCount20 = lastDigitCount19 %\
    \ 1000;\n        long lastDigitCount21 = lastDigitCount20 % 1000;\n        long\
    \ lastDigitCount22 = lastDigitCount21 % 1000;\n        long lastDigitCount23 =\
    \ lastDigitCount22 % 1000;\n        long lastDigitCount24 = lastDigitCount23 %\
    \ 1000;\n        long lastDigitCount25 = lastDigitCount24 % 1000;\n        long\
    \ lastDigitCount26 = lastDigitCount25 % 1000;\n        long lastDigitCount27 =\
    \ lastDigitCount26 % 1000;\n        long lastDigitCount28 = lastDigitCount27 %\
    \ 1000;\n        long lastDigitCount29 = lastDigitCount28 % 1000;\n        long\
    \ lastDigitCount30 = lastDigitCount29 % 1000;\n        long lastDigitCount31 =\
    \ lastDigitCount30 % 1000;\n        long lastDigitCount32 = lastDigitCount31 %\
    \ 1000;\n        long lastDigitCount33 = lastDigitCount32 % 1000;\n        long\
    \ lastDigitCount34 = lastDigitCount33 % 1000;\n        long lastDigitCount35 =\
    \ last", "        long count = 0;\n        long limit = n;\n        while (limit\
    \ > 0) {\n            long digit = limit % 10;\n            if (digit == 1) {\n\
    \                count++;\n            }\n            limit /= 10;\n        }\n\
    \        return count;", "        long count = 0;\n        long limit = n;\n \
    \       while (limit > 0) {\n            long digit = limit % 10;\n          \
    \  if (digit == 1) {\n                count++;\n            }\n            limit\
    \ /= 10;\n        }\n        return count;", "        long count = 0;\n      \
    \  long digit = n;\n        while (digit > 1) {\n            digit /= 10;\n  \
    \          count++;\n        }\n        long start = 1;\n        while (start\
    \ <= n) {\n            long digit = start % 10;\n            if (digit == 1) {\n\
    \                count++;\n            }\n            start /= 10;\n        }\n\
    \        return count;", "        long count = 0;\n        long digit = n;\n \
    \       while (digit > 0) {\n            long remainder = digit % 10;\n      \
    \      if (remainder == 1) {\n                count++;\n            }\n      \
    \      digit = digit / 10;\n        }\n        return count;", "        long count\
    \ = 0;\n        long start = 1;\n        long end = 1;\n        while (n > 0)\
    \ {\n            long temp = n;\n            while (temp > 0) {\n            \
    \    temp = temp / 10;\n            }\n            long digit = temp % 10;\n \
    \           if (digit == 1) {\n                count++;\n            }\n     \
    \       if (digit == 0) {\n                start = start + 1;\n            }\n\
    \            if (digit == 9) {\n                end = end + 1;\n            }\n\
    \            n = n - 1;\n        }\n        return count;", "        long count\
    \ = 0;\n        long digit = n;\n        while (digit > 0) {\n            long\
    \ remainder = digit % 10;\n            if (remainder == 1) {\n               \
    \ count++;\n            }\n            digit = digit / 10;\n        }\n      \
    \  return count;"]
stop_tokens:
- "\n    }\n"
