language: cs
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprq4sijej.cs(23,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                sum +=\
    \ Math.Pow(f, 2);\n            }\n            else {\n                sum += Math.Pow(f,\
    \ 2);\n            }\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplwb_t7sn.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplwb_t7sn.cs(27,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f > 0)\n                sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeapvej68.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            long n = Math.Abs(f);\n            if (n != 0L) {\n         \
    \       sum += n * n;\n            }\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjgwjj2or.cs(25,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprq4sijej.cs(23,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f > 1f)\n                continue;\n          \
    \  sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxtr_7h4s.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprq4sijej.cs(23,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b7yy9hj.cs(23,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \            if (f < 0)\n                throw new ArgumentException(\"Negative\
    \ numbers are not allowed\");\n            else if (f % 2 == 0)\n            \
    \    sum += f * f;\n            else\n                sum += Math.Pow(f, 2);\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7hfxxbff.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7hfxxbff.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0L;\n        long sum = 0L;\n        foreach (float f in lst)\n\
    \            if (f < 0L || f % 1L != 0L)\n                sum += Math.Pow(f, 2L);\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp2oykkzy.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += Math.Pow(f, 2);\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_57s3c2e.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6r7ztoi.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f == (float)f) {\n             \
    \   sum += (float)f;\n            } else if (f < 0) {\n                sum +=\
    \ (float)Math.Pow((float)f, 2);\n            } else {\n                sum +=\
    \ (float)Math.Pow((float)f, 3);\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbfwi0v84.cs(24,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpbfwi0v84.cs(26,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpbfwi0v84.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpbfwi0v84.cs(23,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                sum +=\
    \ Math.Abs(f);\n            } else {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi8omy5xc.cs(24,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpi8omy5xc.cs(26,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpebubfaft.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpebubfaft.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 1)\n                sum += f * f;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe7jdrx9q.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 1) {\n                sum += Math.Pow(f, 2);\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzl22hao4.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6r7ztoi.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            long square = f * f;\n            if (square % 2 == 1) {\n\
    \                sum += square;\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpml8if4ol.cs(29,27): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0L || f > 1L)\n                continue;\n          \
    \  long d = Convert.ToInt64(f);\n            if (d % 2 == 1L)\n              \
    \  sum += d * d;\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6db698f8ce8f4bcc93afe5c4a901da91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6db698f8ce8f4bcc93afe5c4a901da91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0L;\n        long sum = 0L;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa47lhqup.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f > 1f)\n                continue;\n          \
    \  sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxtr_7h4s.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 0)\n                sum += f * f;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps21zxqq7.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprq4sijej.cs(23,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0L;\n        long sum = 0L;\n        foreach (float f in lst)\
    \ {\n            if (f < 0L || f > 1L)\n                continue;\n          \
    \  sum += f * f;\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjwn48a3d.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 1) {\n                sum += Math.Pow(f, 2);\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzl22hao4.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 1)\n                sum += f * f;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe7jdrx9q.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f && f < 1.0f) {\n      \
    \          sum += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc24csnjz.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f > 0)\n                sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeapvej68.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6r7ztoi.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprq4sijej.cs(23,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            long n = Math.Abs(f);\n            if (n < 0)\n             \
    \   n = -n;\n            if (n % 2 == 1)\n                sum += n * n;\n    \
    \    }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa484c2yt.cs(25,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6r7ztoi.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f == (float)f && f != (float)f)\
    \ sum += (long)(Math.Pow(f, 2));\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <513236c3140549e398e39733d79e2beb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <513236c3140549e398e39733d79e2beb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += f * f;\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc58ncqjy.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0L;\n        long sum = 0L;\n        foreach (float f in lst)\
    \ {\n            if (f > 0.0f) {\n                sum += Math.Pow(f, 2);\n   \
    \         }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa85wbahm.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6r7ztoi.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            long n = Convert.ToInt64(f);\n\
    \            if (n % 2 == 1)\n                sum += n * n;\n        }\n     \
    \   return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 1) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2lk79p0s.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 0)\n                sum += f * f;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps21zxqq7.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b7yy9hj.cs(23,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f > 0.0f) {\n                sum += Math.Pow(f,\
    \ 2);\n            }\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsrlfafkn.cs(27,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            sum += Math.Pow(f, 2);\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv5p610d2.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            long d = Convert.ToInt64(f);\n            if (d % 2 == 1) {\n\
    \                sum += d * d;\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            long n = Convert.ToInt64(f);\n            if (n %\
    \ 2 == 1) {\n                sum += n * n;\n            }\n        }\n       \
    \ return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                sum +=\
    \ Math.Abs(f);\n            } else {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi8omy5xc.cs(24,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpi8omy5xc.cs(26,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            sum += Math.Pow(f, 2);\n        }\n        return sum;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1qp082ru.cs(29,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f != 0) {\n                sum +=\
    \ Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq8tnx_cv.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 0)\n                sum += f * f;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps21zxqq7.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            sum += Math.Pow(f, 2);\n        }\n        return sum;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1qp082ru.cs(29,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \            if (f > 0)\n                sum += Math.Pow(f, 2);\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptyay4iic.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b7yy9hj.cs(23,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f == (float)f && f % 2 == 0)\n                sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplre9e1cs.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplre9e1cs.cs(25,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659793173
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            long n = Convert.ToInt64(f);\n            if (n %\
    \ 2 == 1) {\n                sum += n * n;\n            }\n        }\n       \
    \ return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            long d = Math.Abs(f);\n            if (d % 2 == 1) {\n    \
    \            sum += d * d;\n            }\n        }\n        return sum;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6gxv7xjg.cs(29,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6r7ztoi.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                sum += Math.Pow(f, 2);\n\
    \            } else {\n                sum += f;\n            }\n        }\n \
    \       return sum;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2bg0lndm.cs(27,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp2bg0lndm.cs(29,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            sum += Math.Pow(f, 2);\n        }\n        return sum;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1qp082ru.cs(29,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f == (float)f) {\n             \
    \   sum += f;\n            } else if (f < 0) {\n                sum += f * f;\n\
    \            } else {\n                sum += Math.Pow(f, 2);\n            }\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph6pjcelf.cs(24,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmph6pjcelf.cs(26,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmph6pjcelf.cs(28,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmph6pjcelf.cs(23,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += f * f;\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc58ncqjy.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 0)\n                sum += f * f;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps21zxqq7.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f == (float)f)\n                continue;\n            if\
    \ (f < 0)\n                f *= -1;\n            if (f % 2 == 0)\n           \
    \     sum += f * f;\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx9kr9in6.cs(28,17): error CS1656: Cannot assign to ''f'' because it is
    a ''foreach iteration variable''

    /tmp/tmpx9kr9in6.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpx9kr9in6.cs(25,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6r7ztoi.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0f || f % 1f != 0f) {\n    \
    \            sum += Math.Pow(f, 2f);\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphpueha1e.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0f) {\n                continue;\n        \
    \    }\n            if (f % 2f == 0f) {\n                sum += f * f;\n     \
    \       }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptz4nrk95.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0L) {\n                continue;\n\
    \            }\n            if (f % 2L == 0L) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjflm2wi9.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f == (float)f)\n                continue;\n            if\
    \ (f < 0)\n                f = -f;\n            if (f % 2 == 0)\n            \
    \    sum += f * f;\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplv5bgqop.cs(28,17): error CS1656: Cannot assign to ''f'' because it is
    a ''foreach iteration variable''

    /tmp/tmplv5bgqop.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplv5bgqop.cs(25,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6r7ztoi.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            long n = Math.Abs(f);\n            if (n != 0L) {\n\
    \                if (n % 2 == 1L) {\n                    sum += n * n;\n     \
    \           }\n            }\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4mx2k7c_.cs(26,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            long n = Math.Abs(f);\n            if (n != 0L) {\n\
    \                sum += n * n;\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphj5871gf.cs(26,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \            if (f < 0f || f % 1f != 0f)\n                sum += Math.Pow(f, 2);\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvsjjtkq3.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6r7ztoi.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        long squareSum\
    \ = 0L;\n        foreach (float f in lst) {\n            if (f < 0) {\n      \
    \          continue;\n            }\n            if (f % 2 == 0) {\n         \
    \       squareSum += f * f;\n            }\n            else {\n             \
    \   sum += f * f;\n            }\n        }\n        return squareSum - sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd_kvf6rf.cs(31,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpd_kvf6rf.cs(34,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 0)\n                sum += f * f;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps21zxqq7.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f > 0.0f) {\n                sum += Math.Pow(f,\
    \ 2);\n            }\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsrlfafkn.cs(27,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 0)\n                sum += f * f;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps21zxqq7.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \            if (f != 0.0f) {\n                sum += Math.Pow(f, 2);\n      \
    \      }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfvm7b1hg.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                sum +=\
    \ Math.Abs(f);\n            } else {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi8omy5xc.cs(24,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpi8omy5xc.cs(26,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0L;\n        long sum = 0L;\n        foreach (float f in lst)\
    \ {\n            if (f < 0L || f % 1L != 0L)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ibwg2cs.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprq4sijej.cs(23,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6r7ztoi.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += f * f;\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc58ncqjy.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \        {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n\
    \            sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsu2qi7hb.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0f || f > 1f) {\n          \
    \      sum += 0L;\n                continue;\n            }\n            sum +=\
    \ Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj406z0jh.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            long d = Math.Abs(f);\n            if (d % 2 == 1)\n        \
    \        sum += d * d;\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw4ir3pnm.cs(25,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            long square = f * f;\n            if (square % 2 == 1) {\n\
    \                sum += square;\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpml8if4ol.cs(29,27): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpebubfaft.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            sum += Math.Pow(f, 2);\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv5p610d2.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0f || f > 1f) {\n          \
    \      continue;\n            }\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5zokffyq.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            long square = f * f;\n            if (square % 2L !=\
    \ 0L) {\n                sum += square;\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5pmrv1_n.cs(26,27): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6r7ztoi.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b7yy9hj.cs(23,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                sum +=\
    \ Math.Pow(f, 2);\n            } else {\n                sum += f;\n         \
    \   }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzyxvrbg6.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpzyxvrbg6.cs(26,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                sum +=\
    \ Math.Abs(f);\n            } else {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi8omy5xc.cs(24,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpi8omy5xc.cs(26,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f > 0)\n                sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeapvej68.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f && f < 1.0f) {\n      \
    \          sum += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc24csnjz.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += Math.Pow(f, 2);\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_57s3c2e.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \        {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n\
    \            sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsu2qi7hb.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            long n = Convert.ToInt64(f);\n            if (n % 2 == 1) {\n\
    \                sum += n * n;\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6r7ztoi.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 0)\n                sum += f * f;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps21zxqq7.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b7yy9hj.cs(23,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            long d = Math.Abs(f);\n            if (d < 1)\n             \
    \   d = 1;\n            if (d % 2 == 1)\n                sum += d * d;\n     \
    \   }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfi52reac.cs(25,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \        {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n\
    \            sum += f * f;\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwmrls56x.cs(28,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0L) {\n                sum +=\
    \ 0L;\n            } else if (f > 0L) {\n                sum += Math.Pow(f, 2);\n\
    \            } else {\n                sum += 0L;\n            }\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbnbal41u.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f == (float)Math.Abs(f))\n                continue;\n   \
    \         sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvc9gtldg.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6r7ztoi.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpebubfaft.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                sum +=\
    \ Math.Pow(f, 2);\n            } else {\n                sum += f;\n         \
    \   }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzyxvrbg6.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpzyxvrbg6.cs(26,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += f * f;\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc58ncqjy.cs(27,13): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6r7ztoi.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            sum += Math.Pow(f, 2);\n        }\n        return sum;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1qp082ru.cs(29,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0f || f % 1f != 0f) {\n    \
    \            sum += Math.Pow(f, 2f);\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphpueha1e.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 0)\n                sum += f * f;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps21zxqq7.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f % 1f != 0f)\n                continue;\n    \
    \        sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6r7ztoi.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0)\n                continue;\n            if (f % 2\
    \ == 0)\n                sum += f * f;\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps21zxqq7.cs(28,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f == (float)f)\n                continue;\n            if\
    \ (f < 0)\n                f = -f;\n            if (f % 2 == 0)\n            \
    \    sum += f * f;\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplv5bgqop.cs(28,17): error CS1656: Cannot assign to ''f'' because it is
    a ''foreach iteration variable''

    /tmp/tmplv5bgqop.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplv5bgqop.cs(25,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 1) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2lk79p0s.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f == (float)f) {\n             \
    \   sum += f;\n            } else if (f < 0) {\n                sum += f * f;\n\
    \            } else {\n                sum += Math.Pow(f, 2);\n            }\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph6pjcelf.cs(24,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmph6pjcelf.cs(26,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmph6pjcelf.cs(28,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmph6pjcelf.cs(23,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659793173
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f == (float)Math.Floor(f)) {\n \
    \               sum += (long)Math.Pow(f, 2);\n            }\n        }\n     \
    \   return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a43fca37c2484b38adc9c471ee823b7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a43fca37c2484b38adc9c471ee823b7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793174
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            long d = Math.Abs(f);\n            if\
    \ (d > 0)\n                sum += d * d;\n        }\n        return sum;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmwl3tg5n.cs(23,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b7yy9hj.cs(23,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f == (float)f && f % 2 == 1)\n                sum += (long)Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f != 0) {\n                sum +=\
    \ Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq8tnx_cv.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            long n = Convert.ToInt64(f);\n            if (n % 2 == 1) {\n\
    \                sum += n * n;\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0f || f > 1f) {\n          \
    \      continue;\n            }\n            sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5zokffyq.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \        {\n            if (f < 0)\n                continue;\n            if\
    \ (f % 2 == 1)\n                sum += Math.Pow(f, 2);\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_qrvo41l.cs(29,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprq4sijej.cs(23,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += Math.Pow(f, 2);\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_57s3c2e.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \        {\n            double d = (double)f;\n            if (d % 2 == 0)\n \
    \               sum += Math.Pow(d, 2);\n        }\n        return sum;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg2uy2fhv.cs(28,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += Math.Pow(f, 2);\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_57s3c2e.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \            if (f > 0)\n                sum += Math.Pow(f, 2);\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptyay4iic.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f == (float)f) {\n             \
    \   sum += f;\n            }\n            else if (f < 0) {\n                sum\
    \ += f * f;\n            }\n            else {\n                sum += Math.Pow(f,\
    \ 2);\n            }\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7brzxncp.cs(24,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7brzxncp.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7brzxncp.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp7brzxncp.cs(23,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f > 0)\n                sum += Math.Pow(f, 2);\n        }\n\
    \        return sum;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeapvej68.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            long square = Convert.ToInt64(Math.Pow(f, 2));\n          \
    \  if (square % 2 == 1) {\n                sum += square;\n            }\n   \
    \     }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793174
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            long d = Math.Abs(f);\n            if (d > 1L) {\n\
    \                sum += d * d;\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_alvfgqe.cs(26,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793174
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0f || f % 1f != 0f) {\n    \
    \            sum += Math.Pow(f, 2f);\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphpueha1e.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                sum +=\
    \ Math.Pow(f, 2);\n            } else {\n                sum += Math.Pow(f - 1,\
    \ 2);\n            }\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp17om37wr.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp17om37wr.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793174
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprq4sijej.cs(23,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0f || f > 1f)\n                continue;\n          \
    \  sum += Math.Pow(f, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxtr_7h4s.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            long x = Math.Abs(f);\n            if (x != 0L) {\n         \
    \       long y = Math.Pow(x, 2);\n                if (y != 0L) {\n           \
    \         sum += y;\n                }\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_un3dlr_.cs(25,22): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_un3dlr_.cs(27,26): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793174
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0L || f > 1L) {\n          \
    \      continue;\n            }\n            long d = (long)(Math.Pow(2L, f) -\
    \ 1);\n            if (d % 2 == 1L) {\n                sum += d;\n           \
    \ }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54b8c272568e438dadda6ac64ebee205>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54b8c272568e438dadda6ac64ebee205>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793174
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpebubfaft.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \            if (f > 0)\n                sum += Math.Pow(f, 2);\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptyay4iic.cs(26,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            sum += Math.Pow(f, 2);\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv5p610d2.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793173
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f == (float)Math.Floor(f)) {\n \
    \               sum += (long)Math.Pow(f, 2);\n            }\n        }\n     \
    \   return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a43fca37c2484b38adc9c471ee823b7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a43fca37c2484b38adc9c471ee823b7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793174
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += Math.Pow(f, 2);\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx85i5fyc.cs(30,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793174
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            long square = Convert.ToInt64(Math.Pow(f, 2));\n          \
    \  if (square % 2 == 1) {\n                sum += square;\n            }\n   \
    \     }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n   \
    \ Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f, (float)4.0f})))\
    \ == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.1f,\
    \ (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793174
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += f * f;\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6iqm6sdq.cs(27,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0L;\n        }\n        long sum = 0L;\n        foreach (float\
    \ f in lst) {\n            if (f < 0) {\n                continue;\n         \
    \   }\n            if (f % 2 == 0) {\n                sum += f * f;\n        \
    \    }\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp393j0lkr.cs(30,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f < 0) {\n                continue;\n\
    \            }\n            if (f % 2 == 0) {\n                sum += Math.Pow(f,\
    \ 2);\n            }\n        }\n        return sum;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new List<float>()))\
    \ == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp480nlpji.cs(27,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793174
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n \
    \           return 0;\n        long sum = 0;\n        foreach (float f in lst)\n\
    \        {\n            if (f < 0)\n                continue;\n            if\
    \ (f % 2 == 0)\n                sum += f * f;\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo9l8zxs0.cs(29,17): error CS0266: Cannot implicitly convert type ''float''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793174
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0)\n                sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DoubleTheDifference((new List<float>())) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)5.0f,\
    \ (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-1.0f,\
    \ (float)-2.0f, (float)8.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.2f, (float)3.0f, (float)5.0f}))) == (34L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-9.0f,\
    \ (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f, (float)9.0f}))) == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl1_fr742.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793174
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return the sum of squares of\
    \ the numbers\n    // in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new\
    \ List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n   \
    \ // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n\
    \    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n\
    \    // (0L)\n    // If the input list is empty, return 0.\n    public static\
    \ long DoubleTheDifference(List<float> lst) {\n        long sum = 0;\n       \
    \ foreach (float f in lst) {\n            if (f > 0.0f) {\n                sum\
    \ += Math.Pow(f, 2);\n            }\n        }\n        return sum;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
    \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
    \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
    \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
    \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
    \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
    \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
    \ == (165L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmc1mxvt.cs(24,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793172
