name: HumanEval_56_correct_bracketing
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true\
  \ if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"\
  <\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n \
  \   // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"\
  ><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
  <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
  \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        bool result = true;\n        foreach (char c in brackets) {\n\
    \            if (c == '<') {\n                bool found = false;\n          \
    \      for (int i = 0; i < brackets.Length; i++) {\n                    if (brackets[i]\
    \ == '>') {\n                        found = true;\n                        break;\n\
    \                    }\n                }\n                if (!found) {\n   \
    \                 result = false;\n                    break;\n              \
    \  }\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                result &= !(brackets.IndexOf('>', brackets.IndexOf(c) + 1) <\
    \ 0);\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                bool found = false;\n                for (int i = 0; i < brackets.Length;\
    \ i++) {\n                    if (brackets[i] == '>') {\n                    \
    \    found = true;\n                        break;\n                    }\n  \
    \              }\n                if (!found) {\n                    result =\
    \ false;\n                    break;\n                }\n            }\n     \
    \   }\n        return result;", "        string openingBrackets = \"\";\n    \
    \    string closingBrackets = \"\";\n        foreach (char c in brackets) {\n\
    \            if (c == '<') {\n                openingBrackets += c;\n        \
    \    } else if (c == '>') {\n                closingBrackets += c;\n         \
    \   }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        if (brackets == null) return false;\n\
    \        string openingBrackets = brackets.Replace(\"<\", \"\").Replace(\">\"\
    , \"\");\n        string closingBrackets = brackets.Replace(\"<\", \"\").Replace(\"\
    >\", \"\");\n        bool result = true;\n        foreach (char openingBracket\
    \ in openingBrackets) {\n            if (!closingBrackets.Contains(openingBracket))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;", "        string openingBrackets = \"\";\n\
    \        string closingBrackets = \"\";\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                openingBrackets += c;\n    \
    \        } else if (c == '>') {\n                closingBrackets += c;\n     \
    \       }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool isCorrect = true;\n  \
    \      for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                isCorrect = false;\n            }\n\
    \        }\n        return isCorrect;", "        bool result = true;\n       \
    \ foreach (char c in brackets) {\n            if (c == '<') {\n              \
    \  result = result && CorrectBracketing(brackets.Replace(c.ToString(), \">\"));\n\
    \            } else if (c == '>') {\n                result = result && CorrectBracketing(brackets.Replace(c.ToString(),\
    \ \"<\"));\n            } else {\n                result = result && CorrectBracketing(brackets.Replace(c.ToString(),\
    \ \"\"));\n            }\n        }\n        return result;", "        string\
    \ openingBrackets = \"\";\n        string closingBrackets = \"\";\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                openingBrackets\
    \ += c;\n            } else if (c == '>') {\n                closingBrackets +=\
    \ c;\n            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool allOpeningBracketsAreClosed\
    \ = false;\n        foreach (char c in openingBrackets) {\n            if (c ==\
    \ '<') {\n                allOpeningBracketsAreClosed = true;\n              \
    \  break;\n            }\n        }\n        return allOpeningBracketsAreClosed;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                bool found = false;\n                for\
    \ (int i = 0; i < brackets.Length; i++) {\n                    if (brackets[i]\
    \ == '>') {\n                        found = true;\n                        break;\n\
    \                    }\n                }\n                if (!found) {\n   \
    \                 result = false;\n                    break;\n              \
    \  }\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0) {\n \
    \                   result = false;\n                    break;\n            \
    \    }\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                result &= (brackets.IndexOf('>', brackets.IndexOf(c, 1) + 1)\
    \ != -1);\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c != '<' &&\
    \ c != '>') {\n                result = false;\n                break;\n     \
    \       }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0) {\n        \
    \            result = false;\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        string openingBrackets\
    \ = \"\";\n        string closingBrackets = \"\";\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                openingBrackets +=\
    \ c;\n            } else if (c == '>') {\n                closingBrackets += c;\n\
    \            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         for (int i = 0; i < brackets.Length; i++) {\n                    if\
    \ (brackets[i] == '<') {\n                        result = false;\n          \
    \              break;\n                    }\n                }\n            }\n\
    \            if (c == '>') {\n                for (int i = 0; i < brackets.Length;\
    \ i++) {\n                    if (brackets[i] == '>') {\n                    \
    \    result = true;\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result;", "      \
    \  bool result = true;\n        foreach (char c in brackets) {\n            if\
    \ (c == '<') {\n                result = result && CorrectBracketing(brackets.Replace(c.ToString(),\
    \ \">\"));\n            }\n            if (c == '>') {\n                result\
    \ = result && CorrectBracketing(brackets.Replace(c.ToString(), \"<\"));\n    \
    \        }\n        }\n        return result;", "        string openingBrackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        string closingBrackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        bool result =\
    \ true;\n        foreach (char openingBracket in openingBrackets) {\n        \
    \    if (!closingBrackets.Contains(openingBracket)) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                result = result && CorrectBracketing(brackets.Replace(c.ToString(),\
    \ \">\"));\n            } else if (c == '>') {\n                result = result\
    \ && CorrectBracketing(brackets.Replace(c.ToString(), \"<\"));\n            }\
    \ else {\n                result = result && CorrectBracketing(brackets.Replace(c.ToString(),\
    \ \"\"));\n            }\n        }\n        return result;", "        string\
    \ openingBrackets = \"\";\n        string closingBrackets = \"\";\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                openingBrackets\
    \ += c;\n            } else if (c == '>') {\n                closingBrackets +=\
    \ c;\n            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool allOpeningBracketsAreClosed\
    \ = openingBrackets.All(c => c == '>');\n        bool allClosingBracketsAreOpened\
    \ = closingBrackets.All(c => c == '<');\n        return allOpeningBracketsAreClosed\
    \ && allClosingBracketsAreOpened;", "        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                result\
    \ = result && CorrectBracketing(brackets.Substring(0, brackets.IndexOf(c)));\n\
    \            }\n            if (c == '>') {\n                result = result &&\
    \ CorrectBracketing(brackets.Substring(brackets.IndexOf(c) + 1));\n          \
    \  }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
