name: HumanEval_56_correct_bracketing
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true\
  \ if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"\
  <\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n \
  \   // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"\
  ><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
  <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
  \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        bool result = true;\n        foreach (char c in brackets) {\n\
    \            if (c == '<') {\n                bool found = false;\n          \
    \      for (int i = 0; i < brackets.Length; i++) {\n                    if (brackets[i]\
    \ == '>') {\n                        found = true;\n                        break;\n\
    \                    }\n                }\n                if (!found) {\n   \
    \                 result = false;\n                    break;\n              \
    \  }\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                result &= !(brackets.IndexOf('>', brackets.IndexOf(c) + 1) <\
    \ 0);\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                bool found = false;\n                for (int i = 0; i < brackets.Length;\
    \ i++) {\n                    if (brackets[i] == '>') {\n                    \
    \    found = true;\n                        break;\n                    }\n  \
    \              }\n                if (!found) {\n                    result =\
    \ false;\n                    break;\n                }\n            }\n     \
    \   }\n        return result;", "        string openingBrackets = \"\";\n    \
    \    string closingBrackets = \"\";\n        foreach (char c in brackets) {\n\
    \            if (c == '<') {\n                openingBrackets += c;\n        \
    \    } else if (c == '>') {\n                closingBrackets += c;\n         \
    \   }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        if (brackets == null) return false;\n\
    \        string openingBrackets = brackets.Replace(\"<\", \"\").Replace(\">\"\
    , \"\");\n        string closingBrackets = brackets.Replace(\"<\", \"\").Replace(\"\
    >\", \"\");\n        bool result = true;\n        foreach (char openingBracket\
    \ in openingBrackets) {\n            if (!closingBrackets.Contains(openingBracket))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;", "        string openingBrackets = \"\";\n\
    \        string closingBrackets = \"\";\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                openingBrackets += c;\n    \
    \        } else if (c == '>') {\n                closingBrackets += c;\n     \
    \       }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool isCorrect = true;\n  \
    \      for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                isCorrect = false;\n            }\n\
    \        }\n        return isCorrect;", "        bool result = true;\n       \
    \ foreach (char c in brackets) {\n            if (c == '<') {\n              \
    \  result = result && CorrectBracketing(brackets.Replace(c.ToString(), \">\"));\n\
    \            } else if (c == '>') {\n                result = result && CorrectBracketing(brackets.Replace(c.ToString(),\
    \ \"<\"));\n            } else {\n                result = result && CorrectBracketing(brackets.Replace(c.ToString(),\
    \ \"\"));\n            }\n        }\n        return result;", "        string\
    \ openingBrackets = \"\";\n        string closingBrackets = \"\";\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                openingBrackets\
    \ += c;\n            } else if (c == '>') {\n                closingBrackets +=\
    \ c;\n            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool allOpeningBracketsAreClosed\
    \ = false;\n        foreach (char c in openingBrackets) {\n            if (c ==\
    \ '<') {\n                allOpeningBracketsAreClosed = true;\n              \
    \  break;\n            }\n        }\n        return allOpeningBracketsAreClosed;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                bool found = false;\n                for\
    \ (int i = 0; i < brackets.Length; i++) {\n                    if (brackets[i]\
    \ == '>') {\n                        found = true;\n                        break;\n\
    \                    }\n                }\n                if (!found) {\n   \
    \                 result = false;\n                    break;\n              \
    \  }\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0) {\n \
    \                   result = false;\n                    break;\n            \
    \    }\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                result &= (brackets.IndexOf('>', brackets.IndexOf(c, 1) + 1)\
    \ != -1);\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c != '<' &&\
    \ c != '>') {\n                result = false;\n                break;\n     \
    \       }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0) {\n        \
    \            result = false;\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        string openingBrackets\
    \ = \"\";\n        string closingBrackets = \"\";\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                openingBrackets +=\
    \ c;\n            } else if (c == '>') {\n                closingBrackets += c;\n\
    \            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         for (int i = 0; i < brackets.Length; i++) {\n                    if\
    \ (brackets[i] == '<') {\n                        result = false;\n          \
    \              break;\n                    }\n                }\n            }\n\
    \            if (c == '>') {\n                for (int i = 0; i < brackets.Length;\
    \ i++) {\n                    if (brackets[i] == '>') {\n                    \
    \    result = true;\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result;", "      \
    \  bool result = true;\n        foreach (char c in brackets) {\n            if\
    \ (c == '<') {\n                result = result && CorrectBracketing(brackets.Replace(c.ToString(),\
    \ \">\"));\n            }\n            if (c == '>') {\n                result\
    \ = result && CorrectBracketing(brackets.Replace(c.ToString(), \"<\"));\n    \
    \        }\n        }\n        return result;", "        string openingBrackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        string closingBrackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        bool result =\
    \ true;\n        foreach (char openingBracket in openingBrackets) {\n        \
    \    if (!closingBrackets.Contains(openingBracket)) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                result = result && CorrectBracketing(brackets.Replace(c.ToString(),\
    \ \">\"));\n            } else if (c == '>') {\n                result = result\
    \ && CorrectBracketing(brackets.Replace(c.ToString(), \"<\"));\n            }\
    \ else {\n                result = result && CorrectBracketing(brackets.Replace(c.ToString(),\
    \ \"\"));\n            }\n        }\n        return result;", "        string\
    \ openingBrackets = \"\";\n        string closingBrackets = \"\";\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                openingBrackets\
    \ += c;\n            } else if (c == '>') {\n                closingBrackets +=\
    \ c;\n            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool allOpeningBracketsAreClosed\
    \ = openingBrackets.All(c => c == '>');\n        bool allClosingBracketsAreOpened\
    \ = closingBrackets.All(c => c == '<');\n        return allOpeningBracketsAreClosed\
    \ && allClosingBracketsAreOpened;", "        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                result\
    \ = result && CorrectBracketing(brackets.Substring(0, brackets.IndexOf(c)));\n\
    \            }\n            if (c == '>') {\n                result = result &&\
    \ CorrectBracketing(brackets.Substring(brackets.IndexOf(c) + 1));\n          \
    \  }\n        }\n        return result;", "        bool result = true;\n     \
    \   foreach (char c in brackets) {\n            if (c == '<') {\n            \
    \    if (brackets.IndexOf('<', brackets.IndexOf(c) + 1) < 0) {\n             \
    \       result = false;\n                    break;\n                }\n     \
    \       }\n            if (c == '>') {\n                if (brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0) {\n                    result = false;\n     \
    \               break;\n                }\n            }\n        }\n        return\
    \ result;", "        string openingBrackets = brackets.Replace(\"<\", \"\").Replace(\"\
    >\", \"\");\n        string closingBrackets = brackets.Replace(\"<\", \"\").Replace(\"\
    >\", \"\");\n        bool result = true;\n        foreach (char openingBracket\
    \ in openingBrackets) {\n            if (!closingBrackets.Contains(openingBracket))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;", "        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                result\
    \ &= !IsClosingBracket(brackets, c);\n            }\n            else if (c ==\
    \ '>') {\n                result &= IsClosingBracket(brackets, c);\n         \
    \   }\n        }\n        return result;", "        if (brackets == null) return\
    \ false;\n        StringBuilder sb = new StringBuilder();\n        foreach (char\
    \ c in brackets) {\n            if (c == '<') sb.Append(\"<<\");\n           \
    \ else if (c == '>') sb.Append(\">>\");\n            else sb.Append(c);\n    \
    \    }\n        string s = sb.ToString();\n        bool result = true;\n     \
    \   for (int i = 0; i < s.Length; i++) {\n            if (s.Substring(i + 1, 1)\
    \ != s.Substring(0, i)) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;", "        string openingBrackets\
    \ = \"\";\n        string closingBrackets = \"\";\n        bool bracketsAreCorrect\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                openingBrackets += c;\n            } else if (c == '>') {\n \
    \               closingBrackets += c;\n            } else {\n                bracketsAreCorrect\
    \ = false;\n            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            bracketsAreCorrect = false;\n        }\n        return bracketsAreCorrect;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                result &= !CorrectBracketing(brackets.Replace(c,\
    \ '>'));\n            }\n            if (c == '>') {\n                result &=\
    \ !CorrectBracketing(brackets.Replace(c, '<'));\n            }\n        }\n  \
    \      return result;", "        bool result = true;\n        foreach (char c\
    \ in brackets) {\n            if (c == '<') {\n                if (brackets.IndexOf('<',\
    \ brackets.IndexOf(c) + 1) < 0) {\n                    result = false;\n     \
    \               break;\n                }\n            }\n            if (c ==\
    \ '>') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) <\
    \ 0) {\n                    result = false;\n                    break;\n    \
    \            }\n            }\n        }\n        return result;", "        bool\
    \ result = true;\n        foreach (char c in brackets) {\n            if (c ==\
    \ '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c, 1) + 1)\
    \ < 0) {\n                    result = false;\n                    break;\n  \
    \              }\n            }\n            if (c == '>') {\n               \
    \ if (brackets.IndexOf('<', brackets.IndexOf(c, 1) + 1) < 0) {\n             \
    \       result = false;\n                    break;\n                }\n     \
    \       }\n        }\n        return result;", "        string openingBrackets\
    \ = \"\";\n        string closingBrackets = \"\";\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                openingBrackets +=\
    \ c;\n            } else if (c == '>') {\n                closingBrackets += c;\n\
    \            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        Stack<char> openingBracketStack\
    \ = new Stack<char>();\n        Stack<char> closingBracketStack = new Stack<char>();\n\
    \        foreach (char c in openingBrackets) {\n            if (c == '<') {\n\
    \                openingBracketStack.Push(c);\n            } else if (c == '>')\
    \ {\n                closingBracketStack.Pop();\n            }\n        }\n  \
    \      if (openingBracketStack.Count != closingBracketStack.Count) {\n       \
    \     return false;\n        }\n        foreach (char c in openingBrackets) {\n\
    \            if (c == '<') {\n                openingBracketStack.Pop();\n   \
    \         }\n        }\n        if (openingBracketStack.Count != 0) {\n      \
    \      return false;\n        }\n        return true;", "        bool result =\
    \ true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0) {\n \
    \                   result = false;\n                    break;\n            \
    \    }\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                result = result && CorrectBracketing(brackets.Replace(c, \"<\"\
    ));\n            } else if (c == '>') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ \">\"));\n            } else if (c == '<=') {\n                result = result\
    \ && CorrectBracketing(brackets.Replace(c, \"<=\"));\n            } else if (c\
    \ == '>=') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ \">=\"));\n            } else if (c == '==') {\n                result = result\
    \ && CorrectBracketing(brackets.Replace(c, \"==\"));\n            } else if (c\
    \ == '!=') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ \"!=\"));\n            } else if (c == '<=') {\n                result = result\
    \ && CorrectBracketing(brackets.Replace(c, \"<=\"));\n            } else if (c\
    \ == '>=') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ \">=\"));\n            } else if (c == '!=') {\n                result = result\
    \ && CorrectBracketing(brackets.Replace(c, \"!=\"));\n            } else if (c\
    \ == '!=') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ \"!=\"));\n            } else if (c == '!=') {\n                result = result\
    \ && CorrectBracketing(brackets.Replace(c, \"!=\"));\n            } else if (c\
    \ == '!=') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ \"!=\"));\n            } else if (c == '!=') {\n                result = result\
    \ && CorrectBracketing(brackets.Replace(c, \"!=\"));\n            } else if (c\
    \ == '!=') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ \"!=\"));\n            } else if (c == '!=') {\n                result = result\
    \ && CorrectBracketing(brackets.Replace(c, \"!=\"));\n            } else if (c\
    \ == '!=') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ \"!=\"));\n            } else if (c == '!=') {\n                result = result\
    \ && CorrectBracketing(brackets.Replace(c, \"!=\"));\n            } else if (c\
    \ == '!=') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ \"!=\"));\n            } else if (c == '!=') {\n                result = result\
    \ && CorrectBracketing(brackets.Replace(c, \"!=\"));\n            } else if (c\
    \ == '!=') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ \"!=\"));\n            } else if (c == '!=') {\n                result = result ",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n            if (c == '>') {\n             \
    \   if (brackets.IndexOf('<', brackets.IndexOf(c) + 1) < 0) {\n              \
    \      result = false;\n                    break;\n                }\n      \
    \      }\n        }\n        return result;", "        bool result = true;\n \
    \       foreach (char c in brackets) {\n            if (c == '<') {\n        \
    \        result &= !IsClosingBracket(brackets, c);\n            }\n          \
    \  if (c == '>') {\n                result &= IsClosingBracket(brackets, c);\n\
    \            }\n        }\n        return result;", "        string openingBrackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        string closingBrackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        bool result =\
    \ true;\n        for (int i = 0; i < openingBrackets.Length; i++) {\n        \
    \    if (openingBrackets[i] == closingBrackets[i]) {\n                result =\
    \ false;\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                if (brackets.IndexOf('<', brackets.IndexOf(c) + 1) < 0) {\n \
    \                   result = false;\n                }\n            }\n      \
    \      if (c == '>') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                }\n      \
    \      }\n        }\n        return result;", "        bool result = true;\n \
    \       foreach (char c in brackets) {\n            if (c == '<') {\n        \
    \        result = result && CorrectBracketing(brackets.Replace(c.ToString(), \"\
    >\"));\n            }\n            if (c == '>') {\n                result = result\
    \ && CorrectBracketing(brackets.Replace(c.ToString(), \"<\"));\n            }\n\
    \        }\n        return result;", "        if (brackets == null) return false;\n\
    \        List<char> openings = new List<char>();\n        List<char> closings\
    \ = new List<char>();\n        foreach (char c in brackets) {\n            if\
    \ (c == '<') openings.Add(c);\n            if (c == '>') closings.Add(c);\n  \
    \      }\n        if (openings.Count == closings.Count) return true;\n       \
    \ return false;", "        bool result = true;\n        foreach (char c in brackets)\
    \ {\n            if (c != '<' && c != '>') {\n                result = false;\n\
    \            }\n        }\n        return result;", "        string openingBrackets\
    \ = \"\";\n        string closingBrackets = \"\";\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                openingBrackets +=\
    \ c;\n            } else if (c == '>') {\n                closingBrackets += c;\n\
    \            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         result &= !IsOpeningBracket(brackets, c);\n            }\n         \
    \   if (c == '>') {\n                result &= !IsClosingBracket(brackets, c);\n\
    \            }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         result &= !(brackets.IndexOf('<', brackets.IndexOf(c) + 1) < 0);\n \
    \           }\n            if (c == '>') {\n                result &= !(brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0);\n            }\n        }\n        return result;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                result &= !IsOpeningBracket(brackets, c);\n\
    \            }\n            if (c == '>') {\n                result &= IsOpeningBracket(brackets,\
    \ c);\n            }\n        }\n        return result;", "        string openingBrackets\
    \ = \"\";\n        string closingBrackets = \"\";\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                openingBrackets +=\
    \ c;\n            }\n            else if (c == '>') {\n                closingBrackets\
    \ += c;\n            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0) {\n        \
    \            result = false;\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         result &= !(brackets.IndexOf('<', brackets.IndexOf(c) + 1) < 0);\n \
    \           }\n            if (c == '>') {\n                result &= !(brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0);\n            }\n        }\n        return result;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ '>'));\n            }\n            if (c == '>') {\n                result =\
    \ result && CorrectBracketing(brackets.Replace(c, '<'));\n            }\n    \
    \    }\n        return result;", "        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                if (brackets.IndexOf('>',\
    \ brackets.IndexOf(c, 1) + 1) < 0) {\n                    result = false;\n  \
    \                  break;\n                }\n            }\n            if (c\
    \ == '>') {\n                if (brackets.IndexOf('<', brackets.IndexOf(c, 1)\
    \ + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   string openingBrackets = brackets.Replace(\"<\", \"\").Replace(\">\", \"\"\
    );\n        string closingBrackets = brackets.Replace(\"<\", \"\").Replace(\"\
    >\", \"\");\n        if (openingBrackets.Length != closingBrackets.Length)\n \
    \           return false;\n        for (int i = 0; i < openingBrackets.Length;\
    \ i++) {\n            if (openingBrackets[i] != closingBrackets[i])\n        \
    \        return false;\n        }\n        return true;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0) {\n \
    \                   result = false;\n                    break;\n            \
    \    }\n            }\n            if (c == '>') {\n                if (brackets.IndexOf('<',\
    \ brackets.IndexOf(c) + 1) < 0) {\n                    result = false;\n     \
    \               break;\n                }\n            }\n        }\n        return\
    \ result;", "        string openingBrackets = \"\";\n        string closingBrackets\
    \ = \"\";\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                openingBrackets += c;\n            }\n            else if (c\
    \ == '>') {\n                closingBrackets += c;\n            }\n        }\n\
    \        if (openingBrackets.Length != closingBrackets.Length) {\n           \
    \ return false;\n        }\n        bool result = true;\n        for (int i =\
    \ 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i] !=\
    \ closingBrackets[i]) {\n                result = false;\n            }\n    \
    \    }\n        return result;", "        string openingBrackets = brackets.Replace(\"\
    <\", \"\").Replace(\">\", \"\");\n        string closingBrackets = brackets.Replace(\"\
    <\", \"\").Replace(\">\", \"\");\n        bool result = true;\n        for (int\
    \ i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         result = result && CorrectBracketing(brackets.Replace(c, '>'));\n  \
    \          }\n            if (c == '>') {\n                result = result &&\
    \ CorrectBracketing(brackets.Replace(c, '<'));\n            }\n        }\n   \
    \     return result;", "        bool result = true;\n        foreach (char c in\
    \ brackets) {\n            if (c != '<') {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;", " \
    \       bool result = true;\n        foreach (char c in brackets) {\n        \
    \    if (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   string openingBrackets = \"\";\n        string closingBrackets = \"\";\n \
    \       foreach (char c in brackets) {\n            if (c == '<') {\n        \
    \        openingBrackets += c;\n            }\n            else if (c == '>')\
    \ {\n                closingBrackets += c;\n            }\n        }\n       \
    \ if (openingBrackets.Length != closingBrackets.Length) {\n            return\
    \ false;\n        }\n        bool result = true;\n        for (int i = 0; i <\
    \ openingBrackets.Length; i++) {\n            if (openingBrackets[i] != closingBrackets[i])\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;", "        string openingBrackets = \"\";\n        string closingBrackets\
    \ = \"\";\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                openingBrackets += c;\n            } else if (c == '>') {\n \
    \               closingBrackets += c;\n            }\n        }\n        if (openingBrackets.Length\
    \ != closingBrackets.Length) {\n            return false;\n        }\n       \
    \ bool result = true;\n        for (int i = 0; i < openingBrackets.Length; i++)\
    \ {\n            if (openingBrackets[i] != closingBrackets[i]) {\n           \
    \     result = false;\n                break;\n            }\n        }\n    \
    \    return result;", "        bool result = true;\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                if (brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0) {\n                    result = false;\n     \
    \               break;\n                }\n            }\n            if (c ==\
    \ '>') {\n                if (brackets.IndexOf('<', brackets.IndexOf(c) + 1) <\
    \ 0) {\n                    result = false;\n                    break;\n    \
    \            }\n            }\n        }\n        return result;", "        string\
    \ openingBrackets = \"\";\n        string closingBrackets = \"\";\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                openingBrackets\
    \ += c;\n            }\n            else if (c == '>') {\n                closingBrackets\
    \ += c;\n            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        string openingBrackets = \"\";\n\
    \        string closingBrackets = \"\";\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                openingBrackets += c;\n    \
    \        } else if (c == '>') {\n                closingBrackets += c;\n     \
    \       } else {\n                return false;\n            }\n        }\n  \
    \      if (openingBrackets.Length != closingBrackets.Length) {\n            return\
    \ false;\n        }\n        bool result = true;\n        for (int i = 0; i <\
    \ openingBrackets.Length; i++) {\n            if (openingBrackets[i] != closingBrackets[i])\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;", "        string openingBrackets = \"\";\n        string closingBrackets\
    \ = \"\";\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                openingBrackets += c;\n            } else if (c == '>') {\n \
    \               closingBrackets += c;\n            }\n        }\n        if (openingBrackets.Length\
    \ != closingBrackets.Length) {\n            return false;\n        }\n       \
    \ bool result = true;\n        for (int i = 0; i < openingBrackets.Length; i++)\
    \ {\n            if (openingBrackets[i] != closingBrackets[i]) {\n           \
    \     result = false;\n            }\n        }\n        return result;", "  \
    \      bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                }\n      \
    \      }\n        }\n        return result;", "        string openingBrackets\
    \ = \"\";\n        string closingBrackets = \"\";\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                openingBrackets +=\
    \ c;\n            } else if (c == '>') {\n                closingBrackets += c;\n\
    \            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool allOpeningBracketsAreClosed\
    \ = true;\n        for (int i = 0; i < openingBrackets.Length; i++) {\n      \
    \      if (openingBrackets[i] != closingBrackets[i]) {\n                allOpeningBracketsAreClosed\
    \ = false;\n            }\n        }\n        return allOpeningBracketsAreClosed;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                result &= !(brackets.IndexOf('<', brackets.IndexOf(c)\
    \ + 1) < 0);\n            }\n            if (c == '>') {\n                result\
    \ &= !(brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0);\n            }\n \
    \       }\n        return result;", "        string openingBrackets = \"\";\n\
    \        string closingBrackets = \"\";\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                openingBrackets += c;\n    \
    \        }\n            else if (c == '>') {\n                closingBrackets\
    \ += c;\n            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        string openingBrackets = \"\";\n\
    \        string closingBrackets = \"\";\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                openingBrackets += c;\n    \
    \        } else if (c == '>') {\n                closingBrackets += c;\n     \
    \       }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        string openingBrackets = \"\";\n\
    \        string closingBrackets = \"\";\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                openingBrackets += c;\n    \
    \        } else if (c == '>') {\n                closingBrackets += c;\n     \
    \       }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        string openingBrackets = \"\";\n\
    \        string closingBrackets = \"\";\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                openingBrackets += c;\n    \
    \        }\n            else if (c == '>') {\n                closingBrackets\
    \ += c;\n            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;", "        string openingBrackets\
    \ = \"\";\n        string closingBrackets = \"\";\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                openingBrackets +=\
    \ c;\n            } else if (c == '>') {\n                closingBrackets += c;\n\
    \            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool isCorrect = true;\n  \
    \      for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                isCorrect = false;\n             \
    \   break;\n            }\n        }\n        return isCorrect;", "        bool\
    \ result = true;\n        foreach (char c in brackets) {\n            if (c ==\
    \ '<') {\n                result &= !(brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0);\n            }\n        }\n        return result;", "        bool\
    \ result = true;\n        foreach (char c in brackets) {\n            if (c !=\
    \ '<' && c != '>') {\n                result = false;\n            }\n       \
    \ }\n        return result;", "        if (brackets == null) return false;\n \
    \       List<char> openings = new List<char>();\n        List<char> closings =\
    \ new List<char>();\n        foreach (char c in brackets) {\n            if (c\
    \ == '<') openings.Add(c);\n            else if (c == '>') closings.Add(c);\n\
    \        }\n        if (openings.Count != closings.Count) return false;\n    \
    \    foreach (char c in openings) {\n            if (closings.Contains(c)) return\
    \ false;\n        }\n        return true;", "        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         stack.Push(c);\n            } else if (c == '>') {\n               \
    \ if (stack.Count > 0) {\n                    char top = stack.Pop();\n      \
    \              if (top != '<') {\n                        return false;\n    \
    \                }\n                }\n            } else {\n                if\
    \ (stack.Count > 0) {\n                    char top = stack.Pop();\n         \
    \           if (top != '<' && top != '>') {\n                        return false;\n\
    \                    }\n                }\n                stack.Push(c);\n  \
    \          }\n        }\n        return stack.Count == 0;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                result = result && CorrectBracketing(brackets.Replace(c, '>'));\n\
    \            }\n            if (c == '>') {\n                result = result &&\
    \ CorrectBracketing(brackets.Replace(c, '<'));\n            }\n        }\n   \
    \     return result;", "        string openingBrackets = \"\";\n        string\
    \ closingBrackets = \"\";\n        foreach (char c in brackets) {\n          \
    \  if (c == '<') {\n                openingBrackets += c;\n            } else\
    \ if (c == '>') {\n                closingBrackets += c;\n            } else {\n\
    \                return false;\n            }\n        }\n        if (openingBrackets.Length\
    \ != closingBrackets.Length) {\n            return false;\n        }\n       \
    \ Stack<char> openingBracketStack = new Stack<char>();\n        Stack<char> closingBracketStack\
    \ = new Stack<char>();\n        foreach (char c in openingBrackets) {\n      \
    \      if (c == '<') {\n                openingBracketStack.Push(c);\n       \
    \     } else if (c == '>') {\n                closingBracketStack.Push(c);\n \
    \           } else {\n                return false;\n            }\n        }\n\
    \        foreach (char c in closingBrackets) {\n            if (c == '<') {\n\
    \                openingBracketStack.Pop();\n            } else if (c == '>')\
    \ {\n                closingBracketStack.Pop();\n            } else {\n      \
    \          return false;\n            }\n        }\n        return openingBracketStack.Count\
    \ == closingBracketStack.Count;", "        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                if (brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0) {\n                    result = false;\n     \
    \               break;\n                }\n            }\n        }\n        return\
    \ result;", "        bool result = true;\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c,\
    \ 1) + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   string openingBrackets = \"\";\n        string closingBrackets = \"\";\n \
    \       foreach (char c in brackets) {\n            if (c == '<') {\n        \
    \        openingBrackets += c;\n            }\n            else if (c == '>')\
    \ {\n                closingBrackets += c;\n            }\n        }\n       \
    \ if (openingBrackets.Length != closingBrackets.Length) {\n            return\
    \ false;\n        }\n        bool isCorrect = true;\n        for (int i = 0; i\
    \ < openingBrackets.Length; i++) {\n            if (openingBrackets[i] != closingBrackets[i])\
    \ {\n                isCorrect = false;\n            }\n        }\n        return\
    \ isCorrect;", "        bool result = true;\n        foreach (char c in brackets)\
    \ {\n            if (c != '<' && c != '>') {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;", " \
    \       string openingBrackets = \"\";\n        string closingBrackets = \"\"\
    ;\n        foreach (char c in brackets) {\n            if (c == '<') {\n     \
    \           openingBrackets += c;\n            } else if (c == '>') {\n      \
    \          closingBrackets += c;\n            }\n        }\n        if (openingBrackets.Length\
    \ != closingBrackets.Length) {\n            return false;\n        }\n       \
    \ bool result = true;\n        for (int i = 0; i < openingBrackets.Length; i++)\
    \ {\n            if (openingBrackets[i] != closingBrackets[i]) {\n           \
    \     result = false;\n                break;\n            }\n        }\n    \
    \    return result;", "        bool result = true;\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                result &= !(brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0);\n            }\n        }\n        return result;",
  "        string openingBrackets = \"\";\n        string closingBrackets = \"\";\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         openingBrackets += c;\n            } else if (c == '>') {\n        \
    \        closingBrackets += c;\n            }\n        }\n        if (openingBrackets.Length\
    \ != closingBrackets.Length) {\n            return false;\n        }\n       \
    \ bool result = true;\n        for (int i = 0; i < openingBrackets.Length; i++)\
    \ {\n            if (openingBrackets[i] != closingBrackets[i]) {\n           \
    \     result = false;\n            }\n        }\n        return result;", "  \
    \      string openingBrackets = brackets.Replace(\"<\", \"\").Replace(\">\", \"\
    \");\n        string closingBrackets = brackets.Replace(\"<\", \"\").Replace(\"\
    >\", \"\");\n        bool allOpeningBracketsHaveClosingBrackets = openingBrackets.Count()\
    \ == closingBrackets.Count();\n        bool allOpeningBracketsHaveMatchingClosingBrackets\
    \ = openingBrackets.Count() == closingBrackets.Count() - 1;\n        return allOpeningBracketsHaveMatchingClosingBrackets\
    \ && allOpeningBracketsHaveClosingBrackets;", "        bool result = true;\n \
    \       foreach (char c in brackets) {\n            if (c != '<' && c != '>')\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;", "        string openingBrackets = brackets.Replace(\"\
    <\", \"\").Replace(\">\", \"\");\n        string closingBrackets = brackets.Replace(\"\
    <\", \"\").Replace(\">\", \"\");\n        bool result = true;\n        for (int\
    \ i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        Stack<char> stack = new Stack<char>();\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         stack.Push(c);\n            } else if (c == '>') {\n               \
    \ if (stack.Count > 0) {\n                    char top = stack.Pop();\n      \
    \              if (top != '<') {\n                        return false;\n    \
    \                }\n                }\n            } else {\n                if\
    \ (stack.Count > 0) {\n                    char top = stack.Pop();\n         \
    \           if (top != c) {\n                        return false;\n         \
    \           }\n                }\n                stack.Push(c);\n           \
    \ }\n        }\n        return stack.Count == 0;", "        string openingBrackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        string closingBrackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        bool result =\
    \ true;\n        foreach (char openingBracket in openingBrackets) {\n        \
    \    bool found = false;\n            foreach (char closingBracket in closingBrackets)\
    \ {\n                if (openingBracket == closingBracket) {\n               \
    \     found = true;\n                    break;\n                }\n         \
    \   }\n            if (!found) {\n                result = false;\n          \
    \      break;\n            }\n        }\n        return result;", "        if\
    \ (brackets == null) return false;\n        var openingBrackets = brackets.Split('>').Select(x\
    \ => x.Trim()).ToList();\n        var closingBrackets = brackets.Split('<').Select(x\
    \ => x.Trim()).ToList();\n        if (openingBrackets.Count != closingBrackets.Count)\
    \ return false;\n        var openingBracketsCount = openingBrackets.Count;\n \
    \       for (var i = 0; i < openingBracketsCount; i++) {\n            var openingBracket\
    \ = openingBrackets[i];\n            var closingBracket = closingBrackets[i];\n\
    \            if (openingBracket == closingBracket) return false;\n        }\n\
    \        return true;", "        string openingBrackets = \"\";\n        string\
    \ closingBrackets = \"\";\n        foreach (char c in brackets) {\n          \
    \  if (c == '<') {\n                openingBrackets += c;\n            } else\
    \ if (c == '>') {\n                closingBrackets += c;\n            }\n    \
    \    }\n        if (openingBrackets.Length != closingBrackets.Length) {\n    \
    \        return false;\n        }\n        bool allOpeningBracketsAreClosed =\
    \ true;\n        foreach (char c in openingBrackets) {\n            if (c != closingBrackets[closingBrackets.Length\
    \ - 1 - c]) {\n                allOpeningBracketsAreClosed = false;\n        \
    \    }\n        }\n        return allOpeningBracketsAreClosed;", "        if (brackets\
    \ == null) return false;\n        List<char> openings = new List<char>();\n  \
    \      List<char> closings = new List<char>();\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                openings.Add(c);\n         \
    \   } else if (c == '>') {\n                closings.Add(c);\n            } else\
    \ {\n                return false;\n            }\n        }\n        if (openings.Count\
    \ != closings.Count) return false;\n        foreach (char c in openings) {\n \
    \           if (closings.Contains(c)) return false;\n        }\n        return\
    \ true;", "        if (brackets == null) return false;\n        string openingBrackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        string closingBrackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        bool result =\
    \ true;\n        for (int i = 0; i < openingBrackets.Length; i++) {\n        \
    \    if (openingBrackets[i] != closingBrackets[i]) {\n                result =\
    \ false;\n                break;\n            }\n        }\n        return result;",
  "        string openingBrackets = \"\";\n        string closingBrackets = \"\";\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         openingBrackets += c;\n            } else if (c == '>') {\n        \
    \        closingBrackets += c;\n            }\n        }\n        if (openingBrackets.Length\
    \ != closingBrackets.Length) {\n            return false;\n        }\n       \
    \ bool result = true;\n        for (int i = 0; i < openingBrackets.Length; i++)\
    \ {\n            if (openingBrackets[i] != closingBrackets[i]) {\n           \
    \     result = false;\n            }\n        }\n        return result;", "  \
    \      bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                result &= !(brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0);\n            }\n        }\n        return result;", "        bool\
    \ result = true;\n        foreach (char c in brackets) {\n            if (c ==\
    \ '<') {\n                result = result && CorrectBracketing(brackets.Replace(c.ToString(),\
    \ \">\"));\n            } else if (c == '>') {\n                result = result\
    \ && CorrectBracketing(brackets.Replace(c.ToString(), \"<\"));\n            }\
    \ else {\n                result = result && brackets.Replace(c.ToString(), \"\
    \").Length == 0;\n            }\n        }\n        return result;", "       \
    \ bool result = true;\n        foreach (char c in brackets) {\n            if\
    \ (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   string openingBrackets = \"\";\n        string closingBrackets = \"\";\n \
    \       foreach (char c in brackets) {\n            if (c == '<') {\n        \
    \        openingBrackets += c;\n            } else if (c == '>') {\n         \
    \       closingBrackets += c;\n            }\n        }\n        if (openingBrackets.Length\
    \ != closingBrackets.Length) {\n            return false;\n        }\n       \
    \ bool result = true;\n        for (int i = 0; i < openingBrackets.Length; i++)\
    \ {\n            if (openingBrackets[i] != closingBrackets[i]) {\n           \
    \     result = false;\n            }\n        }\n        return result;", "  \
    \      bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c,\
    \ 1) + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   string openingBrackets = brackets.Replace(\"<\", \"\").Replace(\">\", \"\"\
    );\n        string closingBrackets = brackets.Replace(\"<\", \"\").Replace(\"\
    >\", \"\");\n        bool result = true;\n        for (int i = 0; i < openingBrackets.Length;\
    \ i++) {\n            if (openingBrackets[i] != closingBrackets[i]) {\n      \
    \          result = false;\n            }\n        }\n        return result;",
  "        string openingBrackets = \"\";\n        string closingBrackets = \"\";\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         openingBrackets += c;\n            } else if (c == '>') {\n        \
    \        closingBrackets += c;\n            }\n        }\n        if (openingBrackets.Length\
    \ != closingBrackets.Length) {\n            return false;\n        }\n       \
    \ bool result = true;\n        for (int i = 0; i < openingBrackets.Length; i++)\
    \ {\n            if (openingBrackets[i] != closingBrackets[i]) {\n           \
    \     result = false;\n                break;\n            }\n        }\n    \
    \    return result;", "        bool result = true;\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                result = result &&\
    \ CorrectBracketing(brackets.Replace(c, \"<\"));\n            }\n            else\
    \ if (c == '>') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ \">\"));\n            }\n            else {\n                result = result\
    \ && CorrectBracketing(brackets.Replace(c, \"<>\"));\n            }\n        }\n\
    \        return result;", "        bool result = true;\n        foreach (char\
    \ c in brackets) {\n            if (c != '<' && c != '>') {\n                result\
    \ = false;\n            }\n        }\n        return result;", "        string\
    \ openingBrackets = \"\";\n        string closingBrackets = \"\";\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                openingBrackets\
    \ += c;\n            } else if (c == '>') {\n                closingBrackets +=\
    \ c;\n            } else {\n                return false;\n            }\n   \
    \     }\n        if (openingBrackets.Length != closingBrackets.Length) {\n   \
    \         return false;\n        }\n        bool allOpeningBracketsAreClosed =\
    \ openingBrackets.All(c => c == '>');\n        bool allClosingBracketsAreOpened\
    \ = closingBrackets.All(c => c == '<');\n        return allOpeningBracketsAreClosed\
    \ && allClosingBracketsAreOpened;", "        string openingBrackets = brackets.Replace(\"\
    <\", \"\").Replace(\">\", \"\");\n        string closingBrackets = brackets.Replace(\"\
    <\", \"\").Replace(\">\", \"\");\n        bool result = true;\n        for (int\
    \ i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        string openingBrackets = brackets.Replace(\"\
    <\", \"\").Replace(\">\", \"\");\n        string closingBrackets = brackets.Replace(\"\
    <\", \"\").Replace(\">\", \"\");\n        bool isCorrect = true;\n        for\
    \ (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                isCorrect = false;\n             \
    \   break;\n            }\n        }\n        return isCorrect;", "        bool\
    \ result = true;\n        foreach (char c in brackets) {\n            if (c ==\
    \ '<') {\n                result &= !IsClosingBracket(brackets, c);\n        \
    \    }\n        }\n        return result;", "        string openingBrackets =\
    \ \"\";\n        string closingBrackets = \"\";\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                openingBrackets += c;\n    \
    \        } else if (c == '>') {\n                closingBrackets += c;\n     \
    \       }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                if (brackets.IndexOf('<',\
    \ brackets.IndexOf(c) + 1) < 0) {\n                    result = false;\n     \
    \               break;\n                }\n            }\n            if (c ==\
    \ '>') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) <\
    \ 0) {\n                    result = false;\n                    break;\n    \
    \            }\n            }\n        }\n        return result;", "        bool\
    \ result = true;\n        foreach (char c in brackets) {\n            if (c !=\
    \ '<' && c != '>') {\n                result = false;\n            }\n       \
    \ }\n        return result;", "        bool result = true;\n        foreach (char\
    \ c in brackets) {\n            if (c == '<') {\n                result &= !(brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0);\n            }\n        }\n        return result;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c,\
    \ 1) + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n            else if (c == '>') {\n        \
    \        if (brackets.IndexOf('<', brackets.IndexOf(c, 1) + 1) < 0) {\n      \
    \              result = false;\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c != '<' && c != '>')\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;", "        string openingBrackets = brackets.Replace(\"<\", \"\").Replace(\"\
    >\", \"\");\n        string closingBrackets = brackets.Replace(\"<\", \"\").Replace(\"\
    >\", \"\");\n        bool isCorrect = true;\n        for (int i = 0; i < openingBrackets.Length;\
    \ i++) {\n            if (openingBrackets[i] != closingBrackets[i]) {\n      \
    \          isCorrect = false;\n                break;\n            }\n       \
    \ }\n        return isCorrect;", "        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                result\
    \ &= !(brackets.IndexOf('<', brackets.IndexOf(c) + 1) < 0);\n            }\n \
    \           if (c == '>') {\n                result &= !(brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0);\n            }\n        }\n        return result;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n            if (c == '>') {\n             \
    \   if (brackets.IndexOf('<', brackets.IndexOf(c) + 1) < 0) {\n              \
    \      result = false;\n                    break;\n                }\n      \
    \      }\n        }\n        return result;", "        bool result = true;\n \
    \       foreach (char c in brackets) {\n            if (c == '<') {\n        \
    \        if (brackets.IndexOf('<', brackets.IndexOf(c) + 1) < 0) {\n         \
    \           result = false;\n                    break;\n                }\n \
    \           }\n            else if (c == '>') {\n                if (brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0) {\n                    result = false;\n     \
    \               break;\n                }\n            }\n        }\n        return\
    \ result;", "        if (brackets == null)\n            return false;\n      \
    \  bool result = true;\n        foreach (char c in brackets) {\n            if\
    \ (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n            if (c == '>') {\n             \
    \   if (brackets.IndexOf('<', brackets.IndexOf(c) + 1) < 0) {\n              \
    \      result = false;\n                    break;\n                }\n      \
    \      }\n        }\n        return result;", "        string openingBrackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        string closingBrackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        bool isCorrect\
    \ = true;\n        foreach (char openingBracket in openingBrackets) {\n      \
    \      bool found = false;\n            foreach (char closingBracket in closingBrackets)\
    \ {\n                if (openingBracket == closingBracket) {\n               \
    \     found = true;\n                    break;\n                }\n         \
    \   }\n            if (!found) {\n                isCorrect = false;\n       \
    \         break;\n            }\n        }\n        return isCorrect;", "    \
    \    bool result = true;\n        foreach (char c in brackets) {\n           \
    \ if (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c,\
    \ 1) + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n            else if (c == '>') {\n        \
    \        if (brackets.IndexOf('<', brackets.IndexOf(c, 1) + 1) < 0) {\n      \
    \              result = false;\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         result &= !(brackets.IndexOf('<', brackets.IndexOf(c) + 1) < 0);\n \
    \           }\n            if (c == '>') {\n                result &= !(brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0);\n            }\n        }\n        return result;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                result &= !(brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0);\n            }\n        }\n        return result;", "        Stack<char>\
    \ stack = new Stack<char>();\n        foreach (char c in brackets) {\n       \
    \     if (c == '<') {\n                stack.Push(c);\n            } else if (c\
    \ == '>') {\n                if (stack.Count > 0) {\n                    char\
    \ top = stack.Pop();\n                    if (top != '<') {\n                \
    \        return false;\n                    }\n                }\n           \
    \ } else {\n                if (stack.Count > 0) {\n                    char top\
    \ = stack.Pop();\n                    if (top != c) {\n                      \
    \  return false;\n                    }\n                }\n                stack.Push(c);\n\
    \            }\n        }\n        return stack.Count == 0;", "        string\
    \ openingBrackets = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n    \
    \    string closingBrackets = brackets.Replace(\"<\", \"\").Replace(\">\", \"\"\
    );\n        bool result = true;\n        for (int i = 0; i < openingBrackets.Length;\
    \ i++) {\n            if (openingBrackets.Substring(i, 1) != closingBrackets.Substring(0,\
    \ i)) {\n                result = false;\n                break;\n           \
    \ }\n        }\n        return result;", "        bool result = true;\n      \
    \  foreach (char c in brackets) {\n            if (c == '<') {\n             \
    \   if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0) {\n              \
    \      result = false;\n                    break;\n                }\n      \
    \      }\n            if (c == '>') {\n                if (brackets.IndexOf('<',\
    \ brackets.IndexOf(c) + 1) < 0) {\n                    result = false;\n     \
    \               break;\n                }\n            }\n        }\n        return\
    \ result;", "        if (brackets == null)\n            return false;\n      \
    \  StringBuilder sb = new StringBuilder();\n        bool found = false;\n    \
    \    foreach (char c in brackets) {\n            if (c == '<') {\n           \
    \     if (found)\n                    return false;\n                found = true;\n\
    \            }\n            else if (c == '>') {\n                if (!found)\n\
    \                    return false;\n                found = false;\n         \
    \   }\n            else\n                sb.Append(c);\n        }\n        return\
    \ found;", "        string openingBrackets = brackets.Replace(\"<\", \"\").Replace(\"\
    >\", \"\");\n        string closingBrackets = brackets.Replace(\"<\", \"\").Replace(\"\
    >\", \"\");\n        bool result = true;\n        for (int i = 0; i < openingBrackets.Length;\
    \ i++) {\n            if (openingBrackets.Substring(i, 1) != closingBrackets.Substring(0,\
    \ i)) {\n                result = false;\n                break;\n           \
    \ }\n        }\n        return result;", "        bool result = true;\n      \
    \  foreach (char c in brackets) {\n            if (c == '<') {\n             \
    \   result = result && true;\n            }\n            else if (c == '>') {\n\
    \                result = result && false;\n            }\n            else {\n\
    \                result = result && false;\n            }\n        }\n       \
    \ return result;", "        bool result = true;\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                result = result && CorrectBracketing(brackets.Substring(0,\
    \ brackets.IndexOf(c)));\n            }\n            if (c == '>') {\n       \
    \         result = result && CorrectBracketing(brackets.Substring(brackets.IndexOf(c)\
    \ + 1));\n            }\n        }\n        return result;", "        string openingBrackets\
    \ = \"\";\n        string closingBrackets = \"\";\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                openingBrackets +=\
    \ c;\n            } else if (c == '>') {\n                closingBrackets += c;\n\
    \            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        string openingBrackets = brackets.Replace(\"\
    <\", \"\").Replace(\">\", \"\");\n        string closingBrackets = brackets.Replace(\"\
    <\", \"\").Replace(\">\", \"\");\n        bool result = true;\n        foreach\
    \ (char openingBracket in openingBrackets) {\n            bool found = false;\n\
    \            foreach (char closingBracket in closingBrackets) {\n            \
    \    if (openingBracket == closingBracket) {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!found) {\n                result = false;\n                break;\n      \
    \      }\n        }\n        return result;", "        string openingBrackets\
    \ = \"\";\n        string closingBrackets = \"\";\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                openingBrackets +=\
    \ c;\n            } else if (c == '>') {\n                closingBrackets += c;\n\
    \            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                for (int\
    \ i = 0; i < brackets.Length; i++) {\n                    if (brackets[i] == '>')\
    \ {\n                        result = true;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        bool result = true;\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                }\n      \
    \      }\n        }\n        return result;", "        bool result = true;\n \
    \       foreach (char c in brackets) {\n            if (c == '<') {\n        \
    \        result = result && CorrectBracketing(brackets.Substring(0, brackets.IndexOf(c)));\n\
    \            } else if (c == '>') {\n                result = result && CorrectBracketing(brackets.Substring(brackets.IndexOf(c)\
    \ + 1));\n            } else {\n                result = result && CorrectBracketing(brackets.Substring(brackets.IndexOf(c)\
    \ + 1, 1));\n            }\n        }\n        return result;", "        bool\
    \ result = true;\n        foreach (char c in brackets) {\n            if (c ==\
    \ '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) <\
    \ 0) {\n                    result = false;\n                    break;\n    \
    \            }\n            }\n        }\n        return result;", "        bool\
    \ result = true;\n        foreach (char c in brackets) {\n            if (c ==\
    \ '<') {\n                if (brackets.IndexOf('<', brackets.IndexOf(c) + 1) <\
    \ 0) {\n                    result = false;\n                    break;\n    \
    \            }\n            }\n            if (c == '>') {\n                if\
    \ (brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0) {\n                   \
    \ result = false;\n                    break;\n                }\n           \
    \ }\n        }\n        return result;", "        bool result = true;\n      \
    \  foreach (char c in brackets) {\n            if (c == '<') {\n             \
    \   if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0) {\n              \
    \      result = false;\n                    break;\n                }\n      \
    \      }\n            else if (c == '>') {\n                if (brackets.IndexOf('<',\
    \ brackets.IndexOf(c) - 1) < 0) {\n                    result = false;\n     \
    \               break;\n                }\n            }\n        }\n        return\
    \ result;", "        string openingBrackets = \"\";\n        string closingBrackets\
    \ = \"\";\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                openingBrackets += c;\n            } else if (c == '>') {\n \
    \               closingBrackets += c;\n            }\n        }\n        if (openingBrackets.Length\
    \ != closingBrackets.Length) {\n            return false;\n        }\n       \
    \ bool allOpeningBracketsAreClosed = openingBrackets.All(c => c == '>');\n   \
    \     bool allClosingBracketsAreOpened = closingBrackets.All(c => c == '<');\n\
    \        return allOpeningBracketsAreClosed && allClosingBracketsAreOpened;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ '>'));\n            }\n            if (c == '>') {\n                result =\
    \ result && CorrectBracketing(brackets.Replace(c, '<'));\n            }\n    \
    \    }\n        return result;", "        string openingBrackets = \"\";\n   \
    \     string closingBrackets = \"\";\n        foreach (char c in brackets) {\n\
    \            if (c == '<') {\n                openingBrackets += c;\n        \
    \    } else if (c == '>') {\n                closingBrackets += c;\n         \
    \   }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         if (brackets.IndexOf('>', brackets.IndexOf(c, 1) + 1) < 0)\n       \
    \             result = false;\n            }\n        }\n        return result;",
  "        if (brackets == null)\n            return false;\n        bool result =\
    \ true;\n        foreach (char c in brackets) {\n            if (c == '<')\n \
    \               result &= !CorrectBracketing(brackets.Substring(0, brackets.IndexOf(c)));\n\
    \            if (c == '>')\n                result &= !CorrectBracketing(brackets.Substring(brackets.IndexOf(c)\
    \ + 1));\n        }\n        return result;", "        string openingBrackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        string closingBrackets\
    \ = brackets.Replace(\"<\", \"\").Replace(\">\", \"\");\n        if (openingBrackets.Length\
    \ != closingBrackets.Length) {\n            return false;\n        }\n       \
    \ Stack<char> openingBracketsStack = new Stack<char>();\n        Stack<char> closingBracketsStack\
    \ = new Stack<char>();\n        foreach (char openingBracket in openingBrackets)\
    \ {\n            if (openingBracketsStack.Count > 0) {\n                char closingBracket\
    \ = openingBracketsStack.Pop();\n                if (openingBracket != closingBracket)\
    \ {\n                    return false;\n                }\n            } else\
    \ {\n                if (openingBracket == '<') {\n                    openingBracketsStack.Push(openingBracket);\n\
    \                } else if (openingBracket == '>') {\n                    closingBracketsStack.Push(openingBracket);\n\
    \                }\n            }\n        }\n        if (openingBracketsStack.Count\
    \ != 0) {\n            return false;\n        }\n        if (closingBracketsStack.Count\
    \ != 0) {\n            return false;\n        }\n        return true;", "    \
    \    bool result = true;\n        foreach (char c in brackets) {\n           \
    \ if (c != '<' && c != '>') {\n                result = false;\n             \
    \   break;\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                if (brackets.IndexOf('>', brackets.IndexOf(c, 1) + 1) < 0) {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n            }\n            else if (c == '>') {\n                if (brackets.IndexOf('<',\
    \ brackets.IndexOf(c, 1) + 1) < 0) {\n                    result = false;\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   return result;", "        bool result = true;\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                if (brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0) {\n                    result = false;\n     \
    \           }\n            }\n        }\n        return result;", "        string\
    \ openingBrackets = \"\";\n        string closingBrackets = \"\";\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                openingBrackets\
    \ += c;\n            }\n            else if (c == '>') {\n                closingBrackets\
    \ += c;\n            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        string openingBrackets = \"\";\n\
    \        string closingBrackets = \"\";\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                openingBrackets += c;\n    \
    \        } else if (c == '>') {\n                closingBrackets += c;\n     \
    \       }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                if (brackets.IndexOf('>',\
    \ brackets.IndexOf(c, 1) + 1) < 0) {\n                    result = false;\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   return result;", "        bool result = true;\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                result &= (brackets.IndexOf('<',\
    \ brackets.IndexOf(c) + 1) != -1);\n            }\n            if (c == '>') {\n\
    \                result &= (brackets.IndexOf('>', brackets.IndexOf(c) + 1) !=\
    \ -1);\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                result &= !(brackets.IndexOf('>', brackets.IndexOf(c) + 1) <\
    \ 0);\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0) {\n \
    \                   result = false;\n                    break;\n            \
    \    }\n            }\n            if (c == '>') {\n                if (brackets.IndexOf('<',\
    \ brackets.IndexOf(c) + 1) < 0) {\n                    result = false;\n     \
    \               break;\n                }\n            }\n        }\n        return\
    \ result;", "        Stack<char> stack = new Stack<char>();\n        foreach (char\
    \ c in brackets) {\n            if (c == '<') {\n                stack.Push(c);\n\
    \            } else if (c == '>') {\n                if (stack.Count > 0) {\n\
    \                    char top = stack.Pop();\n                    if (top != '<')\
    \ {\n                        return false;\n                    }\n          \
    \      } else {\n                    return false;\n                }\n      \
    \      } else {\n                if (stack.Count > 0) {\n                    char\
    \ top = stack.Pop();\n                    if (top != c) {\n                  \
    \      return false;\n                    }\n                } else {\n      \
    \              return false;\n                }\n            }\n        }\n  \
    \      return stack.Count == 0;", "        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                result\
    \ = result && CorrectBracketing(brackets.Replace(c, '>'));\n            }\n  \
    \          if (c == '>') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ '<'));\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                bool found = false;\n                for (int i = 0; i < brackets.Length;\
    \ i++) {\n                    if (brackets[i] == '>') {\n                    \
    \    found = true;\n                        break;\n                    }\n  \
    \              }\n                if (!found) {\n                    result =\
    \ false;\n                    break;\n                }\n            }\n     \
    \   }\n        return result;", "        string openingBrackets = \"\";\n    \
    \    string closingBrackets = \"\";\n        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                openingBrackets\
    \ += c;\n            } else if (c == '>') {\n                closingBrackets +=\
    \ c;\n            } else {\n                result = false;\n            }\n \
    \       }\n        if (openingBrackets.Length != closingBrackets.Length) {\n \
    \           result = false;\n        }\n        return result;", "        string\
    \ openingBrackets = \"\";\n        string closingBrackets = \"\";\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                openingBrackets\
    \ += c;\n            } else if (c == '>') {\n                closingBrackets +=\
    \ c;\n            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                for (int\
    \ i = 0; i < brackets.Length; i++) {\n                    if (brackets[i] == '>')\
    \ {\n                        result = true;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        bool result = true;\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ '>'));\n            }\n            if (c == '>') {\n                result =\
    \ result && CorrectBracketing(brackets.Replace(c, '<'));\n            }\n    \
    \    }\n        return result;", "        string openingBrackets = \"\";\n   \
    \     string closingBrackets = \"\";\n        foreach (char c in brackets) {\n\
    \            if (c == '<') {\n                openingBrackets += c;\n        \
    \    }\n            if (c == '>') {\n                closingBrackets += c;\n \
    \           }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         result = result && true;\n            }\n            else if (c == '>')\
    \ {\n                result = result && true;\n            }\n            else\
    \ {\n                result = result && false;\n            }\n        }\n   \
    \     return result;", "        bool result = true;\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                if (brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0) {\n                    result = false;\n     \
    \               break;\n                }\n            }\n        }\n        return\
    \ result;", "        string openingBrackets = \"\";\n        string closingBrackets\
    \ = \"\";\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                openingBrackets += c;\n            } else if (c == '>') {\n \
    \               closingBrackets += c;\n            }\n        }\n        if (openingBrackets.Length\
    \ != closingBrackets.Length) {\n            return false;\n        }\n       \
    \ Stack<char> openingBracketStack = new Stack<char>();\n        Stack<char> closingBracketStack\
    \ = new Stack<char>();\n        foreach (char c in openingBrackets) {\n      \
    \      if (c == '<') {\n                openingBracketStack.Push(c);\n       \
    \     } else if (c == '>') {\n                closingBracketStack.Pop();\n   \
    \         }\n        }\n        foreach (char c in closingBrackets) {\n      \
    \      if (c == '<') {\n                openingBracketStack.Pop();\n         \
    \   } else if (c == '>') {\n                closingBracketStack.Push(c);\n   \
    \         }\n        }\n        return openingBracketStack.Count == closingBracketStack.Count;",
  "        string openingBrackets = brackets.Replace(\"<\", \"\").Replace(\">\", \"\
    \");\n        string closingBrackets = brackets.Replace(\"<\", \"\").Replace(\"\
    >\", \"\");\n        bool result = true;\n        for (int i = 0; i < openingBrackets.Length;\
    \ i++) {\n            if (openingBrackets.Substring(i, 1) != closingBrackets.Substring(0,\
    \ i)) {\n                result = false;\n                break;\n           \
    \ }\n        }\n        return result;", "        bool result = true;\n      \
    \  foreach (char c in brackets) {\n            if (c == '<') {\n             \
    \   if (brackets.IndexOf('>', brackets.IndexOf(c, 1) + 1) < 0) {\n           \
    \         result = false;\n                    break;\n                }\n   \
    \         }\n            else if (c == '>') {\n                if (brackets.IndexOf('<',\
    \ brackets.IndexOf(c, 1) + 1) < 0) {\n                    result = false;\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   return result;", "        if (brackets == null)\n            return false;\n\
    \        Stack<char> stack = new Stack<char>();\n        foreach (char c in brackets)\
    \ {\n            if (c == '<')\n                stack.Push(c);\n            else\
    \ if (c == '>')\n                if (stack.Count > 0)\n                    stack.Pop();\n\
    \                else\n                    return false;\n        }\n        return\
    \ stack.Count == 0;", "        bool result = true;\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                result &= !(brackets.IndexOf('<',\
    \ brackets.IndexOf(c) + 1) < 0);\n            }\n            if (c == '>') {\n\
    \                result &= !(brackets.IndexOf('>', brackets.IndexOf(c) + 1) <\
    \ 0);\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                result &= !(brackets.IndexOf('<', brackets.IndexOf(c) + 1) <\
    \ 0);\n            }\n            if (c == '>') {\n                result &= !(brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0);\n            }\n        }\n        return result;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                result = result && CorrectBracketing(brackets.Replace(c.ToString(),\
    \ \">\"));\n            }\n            if (c == '>') {\n                result\
    \ = result && CorrectBracketing(brackets.Replace(c.ToString(), \"<\"));\n    \
    \        }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         bool found = false;\n                for (int i = 0; i < brackets.Length;\
    \ i++) {\n                    if (brackets[i] == '>') {\n                    \
    \    found = true;\n                        break;\n                    }\n  \
    \              }\n                if (!found) {\n                    result =\
    \ false;\n                    break;\n                }\n            }\n     \
    \   }\n        return result;", "        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                result\
    \ = result && CorrectBracketing(brackets.Replace(c.ToString(), \">\"));\n    \
    \        }\n            if (c == '>') {\n                result = result && CorrectBracketing(brackets.Replace(c.ToString(),\
    \ \"<\"));\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                result &= (brackets.IndexOf('<', brackets.IndexOf(c) + 1) !=\
    \ -1);\n            }\n            if (c == '>') {\n                result &=\
    \ (brackets.IndexOf('>', brackets.IndexOf(c) + 1) != -1);\n            }\n   \
    \     }\n        return result;", "        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                if (brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0) {\n                    result = false;\n     \
    \           }\n            }\n        }\n        return result;", "        if\
    \ (brackets == null) return false;\n        string openingBrackets = brackets.Replace(\"\
    (\", \"\").Replace(\")\", \"\");\n        string closingBrackets = brackets.Replace(\"\
    <\", \"\").Replace(\">\", \"\");\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ return false;\n        bool result = true;\n        for (int i = 0; i < openingBrackets.Length;\
    \ i++) {\n            if (openingBrackets[i] != closingBrackets[i]) return false;\n\
    \        }\n        return result;", "        string openingBrackets = \"\";\n\
    \        string closingBrackets = \"\";\n        bool found = false;\n       \
    \ foreach (char c in brackets) {\n            if (c == '<') {\n              \
    \  openingBrackets += c;\n            } else if (c == '>') {\n               \
    \ closingBrackets += c;\n            } else {\n                found = true;\n\
    \            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        string openingBrackets = \"\";\n\
    \        string closingBrackets = \"\";\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                openingBrackets += c;\n    \
    \        } else if (c == '>') {\n                closingBrackets += c;\n     \
    \       }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            char openingBracket\
    \ = openingBrackets[i];\n            char closingBracket = closingBrackets[i];\n\
    \            if (openingBracket != closingBracket) {\n                result =\
    \ false;\n                break;\n            }\n        }\n        return result;",
  "        string openingBrackets = \"\";\n        string closingBrackets = \"\";\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         openingBrackets += c;\n            } else if (c == '>') {\n        \
    \        closingBrackets += c;\n            }\n        }\n        if (openingBrackets.Length\
    \ != closingBrackets.Length) {\n            return false;\n        }\n       \
    \ bool allOpeningBracketsAreClosed = true;\n        for (int i = 0; i < openingBrackets.Length;\
    \ i++) {\n            if (openingBrackets[i] != closingBrackets[i]) {\n      \
    \          allOpeningBracketsAreClosed = false;\n            }\n        }\n  \
    \      return allOpeningBracketsAreClosed;", "        string openingBrackets =\
    \ \"\";\n        string closingBrackets = \"\";\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                openingBrackets += c;\n    \
    \        } else if (c == '>') {\n                closingBrackets += c;\n     \
    \       }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         if (brackets.IndexOf('<', brackets.IndexOf(c) + 1) < 0) {\n        \
    \            result = false;\n                    break;\n                }\n\
    \            }\n            if (c == '>') {\n                if (brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0) {\n                    result = false;\n     \
    \               break;\n                }\n            }\n        }\n        return\
    \ result;", "        string openingBrackets = \"\";\n        string closingBrackets\
    \ = \"\";\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                openingBrackets += c;\n            } else if (c == '>') {\n \
    \               closingBrackets += c;\n            }\n        }\n        if (openingBrackets.Length\
    \ != closingBrackets.Length) {\n            return false;\n        }\n       \
    \ bool result = true;\n        for (int i = 0; i < openingBrackets.Length; i++)\
    \ {\n            if (openingBrackets[i] != closingBrackets[i]) {\n           \
    \     result = false;\n                break;\n            }\n        }\n    \
    \    return result;", "        bool result = true;\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                result = result &&\
    \ CorrectBracketing(brackets.Replace(c, '>'));\n            }\n            if\
    \ (c == '>') {\n                result = result && CorrectBracketing(brackets.Replace(c,\
    \ '<'));\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0) {\n \
    \                   result = false;\n                }\n            }\n      \
    \  }\n        return result;", "        bool result = true;\n        foreach (char\
    \ c in brackets) {\n            if (c != '<' && c != '>') {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n            if (c == '>') {\n             \
    \   if (brackets.IndexOf('<', brackets.IndexOf(c) + 1) < 0) {\n              \
    \      result = false;\n                    break;\n                }\n      \
    \      }\n        }\n        return result;", "        if (brackets == null) return\
    \ false;\n        char[] openings = brackets.ToCharArray();\n        char[] closings\
    \ = brackets.ToCharArray();\n        for (int i = 0; i < openings.Length; i++)\
    \ {\n            if (openings[i] == '<') {\n                if (closings[i] ==\
    \ '>') return true;\n            }\n        }\n        return false;", "     \
    \   bool result = true;\n        foreach (char c in brackets) {\n            if\
    \ (c == '<') {\n                result &= !CorrectBracketing(brackets.Replace(c,\
    \ '>'));\n            }\n            if (c == '>') {\n                result &=\
    \ !CorrectBracketing(brackets.Replace(c, '<'));\n            }\n        }\n  \
    \      return result;", "        bool result = true;\n        foreach (char c\
    \ in brackets) {\n            if (c == '<') {\n                if (brackets.IndexOf('<',\
    \ brackets.IndexOf(c) + 1) < 0) {\n                    result = false;\n     \
    \               break;\n                }\n            }\n            if (c ==\
    \ '>') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) <\
    \ 0) {\n                    result = false;\n                    break;\n    \
    \            }\n            }\n        }\n        return result;", "        Stack<char>\
    \ stack = new Stack<char>();\n        bool result = true;\n        foreach (char\
    \ c in brackets) {\n            if (c == '<') {\n                if (stack.Count\
    \ > 0) {\n                    char top = stack.Pop();\n                    if\
    \ (top == '>') {\n                        result = false;\n                  \
    \  }\n                }\n                else {\n                    result =\
    \ false;\n                }\n            }\n            else if (c == '>') {\n\
    \                if (stack.Count > 0) {\n                    char top = stack.Pop();\n\
    \                    if (top == '<') {\n                        result = false;\n\
    \                    }\n                }\n                else {\n          \
    \          result = false;\n                }\n            }\n            else\
    \ if (c == '<') {\n                stack.Push(c);\n            }\n           \
    \ else if (c == '>') {\n                stack.Push(c);\n            }\n      \
    \      else {\n                result = false;\n            }\n        }\n   \
    \     return result;", "        bool result = true;\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                bool found = false;\n\
    \                for (int i = 0; i < brackets.Length; i++) {\n               \
    \     if (brackets[i] == '>') {\n                        found = true;\n     \
    \                   break;\n                    }\n                }\n       \
    \         if (!found) {\n                    result = false;\n               \
    \     break;\n                }\n            }\n        }\n        return result;",
  "        string openingBrackets = \"\";\n        string closingBrackets = \"\";\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         openingBrackets += c;\n            } else if (c == '>') {\n        \
    \        closingBrackets += c;\n            }\n        }\n        if (openingBrackets.Length\
    \ != closingBrackets.Length) {\n            return false;\n        }\n       \
    \ bool result = true;\n        for (int i = 0; i < openingBrackets.Length; i++)\
    \ {\n            if (openingBrackets[i] != closingBrackets[i]) {\n           \
    \     result = false;\n                break;\n            }\n        }\n    \
    \    return result;", "        string openingBrackets = \"\";\n        string\
    \ closingBrackets = \"\";\n        foreach (char c in brackets) {\n          \
    \  if (c == '<') {\n                openingBrackets += c;\n            } else\
    \ if (c == '>') {\n                closingBrackets += c;\n            }\n    \
    \    }\n        if (openingBrackets.Length != closingBrackets.Length) {\n    \
    \        return false;\n        }\n        bool result = true;\n        for (int\
    \ i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        string openingBrackets = \"\";\n\
    \        string closingBrackets = \"\";\n        foreach (char c in brackets)\
    \ {\n            if (c == '<') {\n                openingBrackets += c;\n    \
    \        } else if (c == '>') {\n                closingBrackets += c;\n     \
    \       }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         for (int i = 0; i < brackets.Length; i++) {\n                    if\
    \ (brackets[i] == '<') {\n                        result = true;\n           \
    \             break;\n                    }\n                }\n            }\n\
    \            if (c == '>') {\n                for (int i = 0; i < brackets.Length;\
    \ i++) {\n                    if (brackets[i] == '>') {\n                    \
    \    result = true;\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result;", "      \
    \  bool result = true;\n        foreach (char c in brackets) {\n            if\
    \ (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n            if (c == '>') {\n             \
    \   if (brackets.IndexOf('<', brackets.IndexOf(c) - 1) < 0) {\n              \
    \      result = false;\n                    break;\n                }\n      \
    \      }\n        }\n        return result;", "        bool result = true;\n \
    \       foreach (char c in brackets) {\n            if (c != '<' && c != '>')\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;", "        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                if (brackets.IndexOf('<',\
    \ brackets.IndexOf(c) + 1) < 0) {\n                    result = false;\n     \
    \               break;\n                }\n            }\n            if (c ==\
    \ '>') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) <\
    \ 0) {\n                    result = false;\n                    break;\n    \
    \            }\n            }\n        }\n        return result;", "        string\
    \ openingBrackets = \"\";\n        string closingBrackets = \"\";\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                openingBrackets\
    \ += c;\n            } else if (c == '>') {\n                closingBrackets +=\
    \ c;\n            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n            }\n \
    \       }\n        return result;", "        if (brackets == null)\n         \
    \   return false;\n        Stack<char> stack = new Stack<char>();\n        foreach\
    \ (char c in brackets) {\n            if (c == '<') {\n                stack.Push(c);\n\
    \            } else if (c == '>') {\n                if (stack.Count != 0)\n \
    \                   return false;\n                stack.Pop();\n            }\
    \ else {\n                return false;\n            }\n        }\n        return\
    \ stack.Count == 0;", "        if (brackets == null)\n            return false;\n\
    \        string openingBrackets = brackets.Replace(\"(\", \"<\").Replace(\")\"\
    , \">\");\n        string closingBrackets = openingBrackets.Replace(\"<\", \"\
    >\").Replace(\">\", \"<\");\n        bool result = openingBrackets.Replace(closingBrackets,\
    \ \"\").Length == 0;\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         if (brackets.IndexOf('>', brackets.IndexOf(c, 1) + 1) < 0) {\n     \
    \               result = false;\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c != '<' && c != '>')\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;", "        if (brackets == null) return false;\n        bool result\
    \ = true;\n        for (int i = 0; i < brackets.Length; i++) {\n            char\
    \ c = brackets[i];\n            if (c != '<') result = false;\n            else\
    \ if (brackets[i + 1] == '>') result = true;\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
