name: HumanEval_46_fib4
language: lua
prompt: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) -> 2\n\
  -- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
  -- Please write a function to efficiently compute the n-th element of the fib4 number\
  \ sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n-- 8\n\
  -- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
  \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n \
  \   lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if n < 0 then\n    return nil\n  end\n  if n == 0 then\n    return\
    \ 0\n  end\n  if n == 1 then\n    return 0\n  end\n  return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\nend", "  if n==0 then\n    return 0\n  elseif\
    \ n==1 then\n    return 1\n  elseif n==2 then\n    return 2\n  elseif n==3 then\n\
    \    return 0\n  elseif n==4 then\n    return 4\n  elseif n==5 then\n    return\
    \ 8\n  elseif n==6 then\n    return 14\n  else\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend", "  if n < 1 then return 0 end\n  if n\
    \ < 3 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\nend", "  if n < 0 then\n    return nil\n  end\n  if n < 4 then\n    return\
    \ n\n  end\n  local fib4 = 0\n  repeat\n    fib4 = fib4 + 4\n  until fib4 > n\n\
    \  return fib4\nend", "\tif n < 0 then return nil end\n\tif n < 3 then return\
    \ 0 end\n\tlocal fib4 = 1\n\trepeat\n\t\tfib4 = fib4 + fib4\n\tuntil fib4 >= n\n\
    \treturn fib4\nend", "  local fib3 = 0\n  local fib2 = 0\n  local fib1 = 0\n \
    \ for i = 1, n do\n    fib3 = fib1 + fib2\n    fib2 = fib1\n    fib1 = fib3\n\
    \  end\n  return fib3\nend", "  if n <= 0 then\n    0\n  else\n    fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  if n < 0 then\n    return\
    \ nil\n  end\n  if n < 2 then\n    return 0\n  end\n  return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend", "    local a, b = 0, 1\n    if n == 0 or n ==\
    \ 1 then\n        return 1\n    elseif n == 2 then\n        return 2\n    else\n\
    \        for i = 1, n do\n            a, b = b, a + b\n        end\n        return\
    \ a\n    end\nend", "\tassert(type(n) == 'number' and n > 0 and n < 4294967295)\n\
    \tlocal fib4 = 0\n\tif n == 0 then\n\t\treturn 0\n\telse\n\t\tif n == 1 then\n\
    \t\t\treturn 0\n\t\telse\n\t\t\tif n == 2 then\n\t\t\t\treturn 2\n\t\t\telse\n\
    \t\t\t\tif n == 3 then\n\t\t\t\t\treturn 0\n\t\t\t\telse\n\t\t\t\t\tif n == 4\
    \ then\n\t\t\t\t\t\treturn 0\n\t\t\t\t\telse\n\t\t\t\t\t\tfib4 = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn fib4\nend", "  if n < 2 then return n end\n  return fib4(n - 1)\
    \ + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", "  if n == 0 then return 0\
    \ end\n  if n == 1 then return 1 end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend", "    if n < 0 then\n        return nil\n    end\n\
    \    local fib = 0\n    fib = (fib * 4) + fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\n\
    \    return fib\nend\n</cell>\n<code language=julia-1.0>\n## Problem 10\n</cell>\n\
    <code language=julia-1.0>\n## Problem 11\n</cell>\n<code language=julia-1.0>\n\
    ## Problem 12\n</cell>\n<text>\nProblem Set 4", "\tif n < 2 then\n\t\treturn n\n\
    \tend\n\treturn fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", " \
    \ local fib4 = 0\n  if n <= 1 then\n    return 0\n  else\n    fib4 = fib4 + fib4(n\
    \ - 1)\n  end\n  return fib4\nend", "  if n < 1 then\n    return 0\n  end\n  if\
    \ n == 1 then\n    return 0\n  end\n  if n == 2 then\n    return 2\n  end\n  return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "    if n < 0 then error(\"\
    fib4 called with n argument out of bounds.\") end\n    local fib4 = 0\n    for\
    \ i = 1,4 do\n        fib4 = fib4 + fib4\n    end\n    return fib4\nend", "  if\
    \ n == 4 then\n    return 0\n  elseif n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 1\n  elseif n == 2 then\n    return 2\n  elseif n == 3 then\n\
    \    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n  end\nend", "    if n == 0 then\n        return 0\n    elseif n == 1\
    \ then\n        return 1\n    elseif n == 2 then\n        return 2\n    else\n\
    \        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    end\n\
    end", "  if n <= 1 then return n else return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4) end\nend", "    if n <= 1 then\n        return 0\n    end\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", "  if\
    \ n == 0 then\n    local fib4 = 0\n    return fib4\n  end\n  if n == 1 then\n\
    \    local fib4 = 0\n    return fib4\n  end\n  if n == 2 then\n    local fib4\
    \ = 1\n    return fib4\n  end\n  if n == 3 then\n    local fib4 = 0\n    return\
    \ fib4\n  end\n  local fib4 = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n  return fib4\nend", "  if n == 0 then\n    return 0\n  elseif n == 1\
    \ then\n    return 1\n  elseif n == 2 then\n    return 2\n  elseif n == 3 then\n\
    \    return 0\n  elseif n == 4 then\n    return 2\n  elseif n == 5 then\n    return\
    \ 3\n  elseif n == 6 then\n    return 0\n  elseif n == 7 then\n    return 3\n\
    \  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) + fib4(n-5)\
    \ + fib4(n-6) + fib4(n-7)\n  end\nend", "\tlocal f = {}\n\tf.__index = f\n\tif\
    \ n == 0 then return 0 end\n\tif n == 1 then return 1 end\n\tif n == 2 then return\
    \ 2 end\n\tif n == 3 then return 0 end\n\tif n == 4 then return 0 end\n\tlocal\
    \ fib4\n\tif fib4 == nil then\n\t\tfib4 = setmetatable({\n\t\t\t__index = function\
    \ (t, k)\n\t\t\t\tlocal v = fib4(k)\n\t\t\t\tif k == 1 then return v end\n\t\t\
    \t\tlocal v = v + fib4(k-1) + fib4(k-2) + fib4(k-3) + fib4(k-4) + fib4(k)\n\t\t\
    \t\treturn v\n\t\t\tend\n\t\t}, nil)\n\tend\n\treturn fib4(n)\nend", "  if n ==\
    \ 0 then\n    return 0\n  elseif n == 1 then\n    return 0\n  else\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "    if n <= 1 then\n\
    \        -- base case\n        return 1\n    else\n        -- recursive case\n\
    \        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) end\nend", "  if\
    \ n < 4 then\n    return n\n  end\n  local fib1 = fib4(n / 2)\n  local fib2 =\
    \ fib4((n - fib1) / 2)\n  return fib1 + fib2 + fib2(fib2(fib2))\nend", "\tif n\
    \ == 0 then\n\t\treturn 0\n\tend\n\tif n == 1 then\n\t\treturn 1\n\tend\n\treturn\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  if n <= 0 then\n   \
    \ return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n  end\nend", "\tlocal fib_seq = {}\n\tfib_seq[0] = 0\n\tfib_seq[1] = 0\n\
    \tfib_seq[2] = 2\n\tfib_seq[3] = 3\n\tlocal fib4_temp = 0\n\tfor i = 4, n, 1 do\n\
    \t\tfib4_temp = fib4_temp + fib_seq[i-1] + fib_seq[i-2] + fib_seq[i-3] + fib_seq[i-4]\n\
    \t\tfib_seq[i] = fib4_temp\n\tend\n\treturn fib_seq[n]\nend", "    if n <= 1 then\n\
    \        return 0\n    end\n    local fib4n = fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n    return fib4n\nend", "  if n < 1 then return 0 end\n\
    \  if n < 3 then return n end\n  return fib4(n-1) + fib4(n-2) + fib4(n-3)\nend",
  "\tif n == 0 then\n\t\tn = 0\n\telseif n == 1 then\n\t\tn = 1\n\telseif n < 0 then\n\
    \t\treturn\n\tend\n\tlocal fib4_1 = 1\n\tlocal fib4_2 = 1\n\tlocal fib4_3 = 1\n\
    \tlocal fib4_4 = 1\n\tfor i = 4, n do\n\t\tfib4_1 = fib4_1 + fib4_2\n\t\tfib4_2\
    \ = fib4_3\n\t\tfib4_3 = fib4_4\n\t\tfib4_4 = fib4_1 + fib4_2 + fib4_3 + fib4_4\n\
    \tend\n\treturn fib4_4\nend", "  if n < 1 then\n    return 0\n  else\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  if n==0 or n==1\
    \ then return n end\n  if n>3 then\n    local fib4=fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)\n\
    \    return fib4\n  end\nend", "\tif n < 0 then return 0 end\n\tif n < 3 then\
    \ return 1 end\n\treturn fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend",
  "   if n == 0 then return 0 end\n   if n == 1 then return 1 end\n   if n == 2 then\
    \ return 2 end\n   if n == 3 then return 0 end\n   if n == 4 then return 1 end\n\
    \   return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", "\tassert(n\
    \ > 0, \"fib4 number sequence start index must be positive.\")\n\tassert(n < 4,\
    \ \"fib4 number sequence stop index must be smaller than 4.\")\n\treturn (\n\t\
    \tn == 0 or n == 1 or n == 2 or\n\t\tn == 3 or n == 4 or n == 5 or n == 6 or n\
    \ == 7 or\n\t\tn == 8 or n == 9 or n == 10)\n\t\tand 0\n\t\tor fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\nend\nreturn fib4", "    if n <= 0 then return\
    \ 0 end\n    if n == 1 then return 0 end\n    return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\nend", "  if n <= 0 then return 0 else return (fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)) end\nend", "  if n==0 then return\
    \ 0 end\n  if n==1 then return 1 end\n  return fib4(4) + fib4(3) + fib4(2) + fib4(1)\n\
    end", "    if n < 0 then return 0 end\n    if n < 4 then return n end\n    return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", "  if n < 0 then\
    \ return end\n  local fib={}\n  if n == 0 then\n    fib[0]=0\n  else\n    fib[1]=fib[2]=fib[3]=fib[4]=fib[n]=fib[n-1]+fib[n-2]+fib[n-3]+fib[n-4]\n\
    \  end\n  return fib[n]\nend", "  if n == 0 then return 0 end\n  if n == 1 then\
    \ return 1 end\n  if n == 2 then return 2 end\n  local result = fib4(n - 1) +\
    \ fib4(n - 2)\n  return result\nend", "  if n < 4 then\n    return n\n  else\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend",
  "    local fib4 = 0\n    repeat\n        fib4 = fib4 + 1\n    until fib4 > n\n \
    \   return fib4\nend", "    if n == 1 then\n        return 0\n    end\n    if\
    \ n == 2 then\n        return 1\n    end\n    if n == 3 then\n        return 2\n\
    \    end\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend",
  "   if n <= 0 then\n      return 0\n   else\n      return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n   end\nend", "  return fib4[n] or fib4[n] = fib4[n-1]\
    \ + fib4[n-2] + fib4[n-3] + fib4[n-4];\nend", "  if n < 0 then\n    error(\"fib4:\
    \ number must be positive\")\n  elseif n == 4 then\n    return 0\n  elseif n ==\
    \ 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n\
    \    return 2\n  elseif n > 2 then\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend", "  if n<0 then\n    return 0\n  elseif n==0\
    \ then\n    return 1\n  elseif n==1 then\n    return 0\n  elseif n==2 then\n \
    \   return 2\n  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\nend", "  if n <= 1 then\n    return n\n  end\n  return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend", "    if n == 0 then\n        return 0\n    end\n\
    \    if n == 1 then\n        return 1\n    end\n    if n == 2 then\n        return\
    \ 2\n    end\n    local a = fib4(n - 1)\n    local b = fib4(n - 2)\n    return\
    \ a + b + fib4(n - 3) + fib4(n - 4)\nend", "    local p = 0\n    local q = 0\n\
    \    local r = 1\n    local s = 2\n    while p + q < n do\n        p = r\n   \
    \     q = s\n        r = r + p + q\n        s = s\n    end\n    return r\nend",
  "  if n < 2 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend", "  if n < 4 then return n end\n  return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", "    if n < 0 or n > 4294967294\
    \ then\n        return nil\n    end", "    if n < 0 then\n        return 0\n \
    \   elseif n == 0 then\n        return 0\n    else\n        return fib4(n - 1)\
    \ + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    end\nend", "  if n==0 then\n\
    \    return 0\n  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\nend", "  if n <= 3 then return n\n  elseif n == 0 then return 0\n  elseif\
    \ n == 1 then return 1\n  elseif n == 2 then return 2\n  elseif n == 3 then return\
    \ 0\n  elseif n == 4 then return 0\n  elseif n == 5 then return 2\n  elseif n\
    \ == 6 then return 3\n  elseif n == 7 then return 1\n  elseif n == 8 then return\
    \ 0\n  elseif n == 9 then return 0\n  elseif n == 10 then return 0\n  elseif n\
    \ == 11 then return 0\n  elseif n == 12 then return 0\n  elseif n == 13 then return\
    \ 0\n  elseif n == 14 then return 0\n  elseif n == 15 then return 0\n  elseif\
    \ n == 16 then return 0\n  elseif n == 17 then return 0\n  elseif n == 18 then\
    \ return 0\n  elseif n == 19 then return 0\n  elseif n == 20 then return 0\n \
    \ elseif n == 21 then return 0\n  elseif n == 22 then return 0\n  elseif n ==\
    \ 23 then return 0\n  elseif n == 24 then return 0\n  elseif n == 25 then return\
    \ 0\n  elseif n == 26 then return 0\n  elseif n == 27 then return 0\n  elseif\
    \ n == 28 then return 0\n  elseif n == 29 then return 0\n  elseif n == 30 then\
    \ return 0\n  elseif n == 31 then return 0\n  elseif n == 32 then return 0\n \
    \ elseif n == 33 then return 0\n  elseif n == 34 then return 0\n  elseif n ==\
    \ 35 then return 0\n  elseif n == 36 then return 0\n  elseif n == 37 then return\
    \ 0\n  elseif n == 38 then return 0\n  elseif n == 39 then return 0\n  elseif\
    \ n == 40 then return 0\n  elseif n == 41 then return 0\n  elseif n == 42 then\
    \ return 0\n  elseif n == 43 then return 0\n  elseif n == 44 then return 0\n \
    \ elseif n == 45 then return 0\n  elseif n == 46 then return 0\n  elseif n ==\
    \ 47 then return 0\n  elseif n == 48 then return 0\n  elseif n == 49 then return\
    \ 0\n  elseif n == 40 then return 0\n  elseif n == 41 then return 0\n  elseif\
    \ n == 42 then return 0\n  elseif n == 43 then return 0", "  if n == 4 then\n\
    \    return 0\n  elseif n < 4 then\n    return 0\n  elseif n < 8 then\n    return\
    \ 2\n  elseif n < 12 then\n    return 0\n  else\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n  end\nend", "    local x = {}\n    local\
    \ i = 0\n    while i < n do\n        x[i] = i\n        i = i + i + i + i + 1\n\
    \    end\n    return x[1]\nend", "    if n <= 0 then\n        return 0\n    elseif\
    \ n == 1 then\n        return 1\n    elseif n == 2 then\n        return 2\n  \
    \  elseif n == 3 then\n        return 0\n    elseif n == 4 then\n        return\
    \ 4\n    elseif n == 5 then\n        return 8\n    elseif n == 6 then\n      \
    \  return 14\n    else\n        return fib4(n - 4) + fib4(n - 3) + fib4(n - 2)\
    \ + fib4(n - 1)\n    end\nend", "\tif n == 0 then\n\t\treturn 0\n\telseif n ==\
    \ 1 then\n\t\treturn 0\n\telse\n\t\treturn fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n\tend\nend\n</cell>\n<text>\nReverse a string\nWrite a function which\
    \ takes in a string and returns the string in reverse order.  Do not use string\
    \ concatenation.  Use the reverse function in string.  For example:", "\tif n\
    \ < 0 then\n\t\treturn 0\n\telseif n < 1 then\n\t\treturn n\n\telse\n\t\treturn\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) + fib4(n-5)\n\tend\nend", "  if\
    \ n < 0 then\n    error(\"fib4 needs a positive integer as parameter\")\n  end\n\
    \  if n == 0 or n == 1 then\n    return 0\n  end\n  if n == 2 or n == 3 then\n\
    \    return 2\n  end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\nend", "\tlocal fib_n = {}\n\tfib_n[0] = 0\n\tfib_n[1] = 0\n\tfib_n[2]\
    \ = 2\n\tfib_n[3] = 0\n\tlocal k = 1\n\tlocal s = fib_n[k] + fib_n[k-1] + fib_n[k-2]\
    \ + fib_n[k-3]\n\twhile n >= k do\n\t\tfib_n[k] = s\n\t\tk = k + 4\n\t\ts = fib_n[k]\
    \ + fib_n[k-1] + fib_n[k-2] + fib_n[k-3]\n\tend\n\treturn fib_n[n]\nend", "  if\
    \ n < 0 or n > 4 then return nil end\n  if n == 0 or n == 1 then\n    return 0\n\
    \  end\n  if n == 2 then\n    return 1\n  end\n  if n == 3 then\n    return 1\n\
    \  end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend",
  "    if n < 1 then return 0 end\n    if n < 3 then return n-1 end\n    return fib4(n\
    \ - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\nend", "  if n < 1 then\n   \
    \ return 0\n  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return\
    \ 2\n  elseif n == 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend", "\tlocal function fib4_internal(n)\n\
    \t\tif n < 0 then return -1 else return fib4_internal(n - 1) + fib4_internal(n\
    \ - 2) + fib4_internal(n - 3) + fib4_internal(n - 4) end\n\tend\n\treturn fib4_internal(n)\n\
    end", "  if n < 2 then return n end\n  local function fib4(n,a,b,c,d)\n    return\
    \ fib4(n-1,a+b,a+c,a+d,b+c+d)\n  end\n  return fib4(n,0,0,0,0)\nend", "\tif n\
    \ < 0 then\n\t\treturn nil\n\telse\n\t\treturn fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n\tend\nend", "  assert(n > 0)\n  if n == 0 or n == 1 then\n   \
    \ return n\n  end\n  if n < 0 then\n    print(\"fib4 doesn't support negative\
    \ numbers\")\n    return 0\n  end\n  local fib4 = 0\n  for i = 1, n do\n    fib4\
    \ = fib4 + fib(n - i)\n  end\n  return fib4\nend", "  if n == 0 then\n    return\
    \ 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \  end\nend", "  if n==0 then\n    local fib4 = 0\n  else\n    local fib4 = fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n  return fib4\nend", "  if n < 0\
    \ then return 0 end\n  if n == 0 then return 0 end\n  if n == 1 then return 1\
    \ end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", " \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  if n==0 then\n    return 0\n \
    \ else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend",
  "  -- Base cases.\n  if n < 4 then return n end\n  -- Recursion.\n  return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", "  if n < 1 then\n   \
    \ error(\"fib4 needs a number greater or equal to 1\")\n  end\n  if n < 4 then\n\
    \    return 0\n  end\n  local fibo = {}\n  fibo.[1] = 0\n  fibo.[2] = fibo.[1]\
    \ + fibo.[2]\n  fibo.[3] = fibo.[2] + fibo.[3]\n  fibo.[4] = fibo.[3] + fibo.[4]\n\
    \  for i = 5, 1, -1 do\n    local k = math.floor((i * (i - 1)) / 2)\n    local\
    \ tmp = fibo.[k] + fibo.[k + 1]\n    fibo.[k] = tmp\n  end\n  return fibo[n]\n\
    end", "  if n <= 0 then return 0 end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend", "\tif n < 0 then\n\t\treturn 0\n\telseif n < 1 then\n\
    \t\treturn 1\n\telseif n < 2 then\n\t\treturn n\n\telseif n < 3 then\n\t\treturn\
    \ fib4(n-1) + fib4(n-2)\n\telseif n < 5 then\n\t\treturn fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n\telse\n\t\treturn fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4) + fib4(n-5)\n\tend\nend", "    local fib4 = { [1] = 0 }\n    for\
    \ i = 1, n do\n        fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i\
    \ - 4]\n    end\n    return fib4[n]\nend", "  local fib4sum = 0\n  if n < 0 then\n\
    \    return nil\n  elseif n <= 1 then\n    return n\n  else\n    local fib4count\
    \ = 4\n    while fib4count > 0 do\n      fib4sum = fib4sum + fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n      fib4count = fib4count - 1\n    end\n    return\
    \ fib4sum\n  end\nend", "  -- Your code here\n  assert(n>0)\n  if n==1 then\n\
    \    return 0\n  elseif n==2 then\n    return 1\n  elseif n==3 then\n    return\
    \ 2\n  elseif n==4 then\n    return 0\n  else\n    return fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)\n\
    \  end\nend", "  if n == 0 then\n    return 0\n  elseif n == 1 then\n    return\
    \ 1\n  elseif n == 2 then\n    return 2\n  elseif n == 3 then\n    return 0\n\
    \  elseif n == 4 then\n    return 1\n  elseif n == 5 then\n    return 2\n  elseif\
    \ n == 6 then\n    return 3\n  elseif n == 7 then\n    return 4\n  else\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "    if n < 0 or\
    \ n > 4294967296 then\n        error('fib4: fib4 parameter must be in range of\
    \ 0 - 4294967296')\n    end\n    local fib4 = 0\n    if n == 0 then fib4 = 0 else\n\
    \        fib4 = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    end\n\
    \    return fib4\nend\n</cell>\n<text>\nProblem 3.2 Write a function called fib5\
    \ that computes the fibonacci number of the given integer.", "  if n ~= nil then\n\
    \    if n < 0 then n = 4  end -- 4\n    if n < 1 then return 0 end  -- 0\n   \
    \ if n < 2 then return 1 end  -- 1\n    if n < 3 then return 2 end  -- 2\n   \
    \ return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)  -- fib4(n)\n \
    \ else\n    return nil\n  end\nend", "  local fib4\n  if n < 2 then return 1 end\n\
    \  if n < 3 then return fib4(n-1) + fib4(n-2) + fib4(n-3) end\n  fib4 = fib4\n\
    \  local tmp = fib4(n-1) + fib4(n-2) + fib4(n-3)\n  fib4 = function(n) return\
    \ tmp end\n  return fib4(n) + fib4(n-2) + fib4(n-3)\nend", "    if n < 0 then\
    \ return nil end\n    if n < 4 then return n end\n    local a = fib4(n-4)\n  \
    \  local b = fib4(n-3)\n    local c = fib4(n-2)\n    local d = fib4(n-1)\n   \
    \ return a + b + c + d\nend", "    local fib4 = 0\n    local i = 1\n    while\
    \ i <= n do\n        fib4 = fib4 + 1\n        i = i + 1\n    end\n    return fib4\n\
    end", "  if n < 4 then\n    return n\n  elseif n < 7 then\n    return n\n  elseif\
    \ n < 11 then\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  else\n\
    \    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) + fib4(n-5)\n  end\n\
    end", "  if n == 0 then\n    local res\n    res,rem = 0,0\n    return res\n  elseif\
    \ n == 1 then\n    local res\n    res,rem = 0,1\n    return res\n  elseif n ==\
    \ 2 then\n    local res\n    res,rem = 0,2\n    return res\n  elseif n == 3 then\n\
    \    local res\n    res,rem = 0,3\n    return res\n  elseif n == 4 then\n    local\
    \ res\n    res,rem = 1,4\n    return res\n  else\n    local sum\n    sum,rem =\
    \ sum + rem,n + rem\n    return fib4(sum) + fib4(rem)\n  end\nend", "    if n\
    \ <= 0 then\n        return 0\n    end", "  if n == 0 then return 0 end\n  if\
    \ n == 1 then return 1 end\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    end", "  local fib, fib4 = 0\n  while n > 0 do\n    fib4, fib = fib + fib4, fib\n\
    \    n = n - 1\n  end\n  return fib4\nend", "  if n < 1 then return 1 end\n  local\
    \ n1 = n - 1\n  return fib4(n1) + fib4(n1 - 1) + fib4(n1 - 2) + fib4(n1 - 3)\n\
    end", "  if n < 4 then return n else return fib4(n - 4) + fib4(n - 3) + fib4(n\
    \ - 2) + fib4(n - 1) end\nend", "  if n < 0 then return 0 end\n  if n < 1 then\
    \ return 1 end\n  if n < 2 then return 2 end\n  return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\nend", "  if n < 0 then\n    error(\"fib4() arg\
    \ out of range\")\n  end\n  local fib = 0\n  for i = 1, n do\n    fib = fib +\
    \ fib + (i-1)\n  end\n  return fib\nend", "  local nfib4 = fib_cache[n]\n  if\
    \ nfib4 == nil then\n    nfib4 = fib_cache[n] = fib(n-1) + fib(n-2) + fib(n-3)\
    \ + fib(n-4)\n  else\n    local k = (n-2)\n    local fib4 = nfib4[k]\n    if fib4\
    \ == nil then\n      fib4 = nfib4[k] = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\n\
    \    end\n  end\n  return fib4\nend", "  assert(n >= 0 and n <= 4, \"fib4 argument\
    \ must be between 0 and 4\")\n  local fib4 = 0\n  for i = 1, n do\n    fib4 =\
    \ fib4 + i\n  end\n  return fib4\nend", "  if n == 0 then return 0 end\n  if n\
    \ == 1 then return 1 end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\nend", "  if n <= 0 then\n    return 0\n  else\n    local fib4num = fib4(n\
    \ - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n    return fib4num\n  end\n\
    end", "    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return\
    \ 1\n    elseif n == 2 then\n        return 2\n    elseif n == 3 then\n      \
    \  return 0\n    elseif n == 4 then\n        return 1\n    else\n        return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    end\nend", "\tif\
    \ n == 0 then\n\t\treturn 0\n\telseif n == 1 then\n\t\treturn 1\n\telseif n ==\
    \ 2 then\n\t\treturn 2\n\telseif n == 3 then\n\t\treturn 0\n\telseif n == 4 then\n\
    \t\treturn 0\n\telse\n\t\treturn fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \tend\nend", "\tlocal fib3 = {0, 0, 0, 0, 0}\n\tlocal fib2 = {0, 0, 0, 0, 0}\n\
    \tlocal fib1 = {0, 0, 0, 0, 0}\n\tfor i = 1, n do\n\t\tfib3[i] = fib2[i%4] + fib1[i%4]\n\
    \t\tfib2[i%4] = fib1[i%4] = fib3[i]\n\t\tfib1[i%4] = fib3[i%4] = fib2[i]\n\tend\n\
    \treturn fib3[n]\nend", "\tif n <= 0 then\n\t\treturn 0\n\telseif n == 1 then\n\
    \t\treturn 0\n\telseif n == 2 then\n\t\treturn 2\n\telseif n == 3 then\n\t\treturn\
    \ 0\n\telse\n\t\treturn fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \tend\nend", "  if n < 1 then return end\n  if n < 3 then return n\n  if n < 5\
    \ then return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  else return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4) + fib4(n - 5)\n  end\n\
    end", "  if n < 4 then return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) end\n\
    \  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) + fib4(n-5)\nend", " \
    \   local fib4 = 1\n    for i=3,n,1 do\n        fib4 = fib4 + fib4\n    end\n\
    \    return fib4\nend", "    if n == 0 then\n        return 0\n    elseif n ==\
    \ 1 then\n        return 1\n    elseif n == 2 then\n        return 2\n    elseif\
    \ n == 3 then\n        return 0\n    elseif n == 4 then\n        return 1\n  \
    \  else\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \    end\nend", "    if n < 0 then return -1 end\n    if n == 0 then return 0\
    \ end\n    if n == 1 then return 1 end\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend", "    local fib4, i, ni = fib4, 1, n\n    repeat\n       \
    \ i, ni = fib4 + 1, ni-1\n    until ni == 0\n    return fib4\nend", "  local fib4\
    \ = 0\n  while fib4 < n do\n    fib4 = fib4 + fib4\n  end\n  return fib4\nend",
  "  if n ~= 0 then\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n  end\n  return 0\nend", "    local f4 = {}\n    if n < 0 then return nil\
    \ end\n    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n    if\
    \ n == 2 then return 2 end\n    table.insert(f4, fib4(n - 3) + fib4(n - 2) + fib4(n\
    \ - 1) + fib4(n - 4))\n    return f4[#f4 + 1]\nend", "  if n <= 2 then\n    return\
    \ n\n  elseif n == 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend", "\tif n <= 0 then\n\t\treturn\
    \ 0\n\telseif n == 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn 2\n\t\
    elseif n == 3 then\n\t\treturn 0\n\telse\n\t\treturn fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n\tend\nend", "  if n < 0 then\n    error(\"fib4 can only compute\
    \ positive numbers\")\n  end\n  if n == 0 then\n    return 0\n  else\n    return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend", "\tif n==0\
    \ then\n\t\treturn 0\n\telseif n==1 then\n\t\treturn 1\n\telse\n\t\treturn fib4(3)\
    \ +fib4(2) +fib4(1) +fib4(0)\n\tend\nend", "  -- Don't forget to check your base\
    \ case!\n  if n < 1 then return 0 end\n  -- Use a loop to do fibonacci\n  -- fib4\
    \ = fibonacci + fibonacci\n  -- fib4(0)\n  --   fibonacci = 0\n  --   fib4 = fib4\
    \ + fib4\n  -- fib4(1)\n  --   fibonacci = 1\n  --   fib4 = fib4 + fib4\n  --\
    \ fib4(2)\n  --   fibonacci = 2\n  --   fib4 = fib4 + fib4\n  -- fib4(3)\n  --\
    \   fibonacci = 3\n  --   fib4 = fib4 + fib4\n  -- fib4(4)\n  --   fibonacci =\
    \ 4\n  --   fib4 = fib4 + fib4\n  -- fib4(5)\n  --   fibonacci = 5\n  --   fib4\
    \ = fib4 + fib4\n  -- fib4(6)\n  --   fibonacci = 6\n  --   fib4 = fib4 + fib4\n\
    \  -- fib4(7)\n  --   fibonacci = 7\n  --   fib4 = fib4 + fib4\n  -- fib4(8)\n\
    \  --   fibonacci = 8\n  --   fib4 = fib4 + fib4\n  -- fib4(9)\n  --   fibonacci\
    \ = 9\n  --   fib4 = fib4 + fib4\n  -- fib4(10)\n  --   fibonacci = 10\n  -- \
    \  fib4 = fib4 + fib4\n  -- fib4(11)\n  --   fibonacci = 11\n  --   fib4 = fib4\
    \ + fib4\n  -- fib4(12)\n  --   fibonacci = 12\n  --   fib4 = fib4 + fib4\n  --\
    \ fib4(13)\n  --   fibonacci = 13\n  --   fib4 = fib4 + fib4\n  -- fib4(14)\n\
    \  --   fibonacci = 14\n  --   fib4 = fib4 + fib4\n  -- fib4(15)\n  --   fibonacci\
    \ = 15\n  --   fib4 = fib4 + fib4\n  -- fib4(16)\n  --   fibonacci = 16\n  --\
    \   fib4 = fib4 + fib4\n  -- fib4(17)\n  --   fibonacci = 17\n  --   fib4 = fib4\
    \ + fib4\n  -- fib4(18)\n  --   fibonacci = 18\n  --   fib4 = fib4 + fib4\n  --\
    \ fib4(19)\n  --   fibonacci = 19\n  --   fib4 = fib4 + fib4", "  if n < 0 then\n\
    \    return 0\n  end\n  if n < 4 then\n    return n\n  end\n  return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "    local fib4 = 0\n    if n ==\
    \ 0 then return 0 end\n    if n == 1 then return 0 end\n    if n == 2 then return\
    \ 2 end\n    fib4 = fib4 + fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n    return fib4\nend", "  assert(n > 0, \"fib4 requires n >= 0\")\n  local\
    \ fib4 = 1\n  while n ~= 0 do\n    fib4 = fib4 + fib4\n    n = n - 1\n  end\n\
    \  return fib4\nend", "    if n <= 4 then\n        return n\n    else\n      \
    \  return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n    end\nend",
  "    if n < 0 then return 0 end\n    if n == 0 then return 0 end\n    if n == 1\
    \ then return 1 end\n    if n == 2 then return 2 end\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend", "  if n <= 1 then\n    return 0\n  elseif n ==\
    \ 2 then\n    return 2\n  elseif n == 3 then\n    return 0\n  elseif n == 4 then\n\
    \    return 2\n  elseif n == 5 then\n    return 4\n  elseif n == 6 then\n    return\
    \ 8\n  elseif n == 7 then\n    return 14\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend", "  if n <= 1 then\n    return\
    \ 0\n  elseif n <= 3 then\n    return 1\n  elseif n <= 5 then\n    return 2\n\
    \  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\n\
    end", "  if n < 1 then\n    fib4[0]\n  elseif n < 4 then\n    fib4[1]\n  else\n\
    \    fib4[n]\n  end\nend", "  local fib={}\n  for i=0,n,1 do\n    fib[i]=n\n \
    \ end\n  return fib[n]\nend", "  if n == 0 then\n    local n = 0\n  elseif n <\
    \ 0 then\n    error(\"fib4 index -1 out of bounds\")\n  elseif n == 1 then\n \
    \   local n = 0\n  else\n    local c = math.floor((n-1) / 4)\n    local t = ((n-1)\
    \ - c*4)\n    local m = ((n-1) - (c*4))\n    local i\n    for i = 1, n do\n  \
    \    if i == c then\n        local k = t\n        if m > 0 then\n          k =\
    \ t + m\n        end\n        local result = k\n      else\n        local k =\
    \ ((n-1) - i)\n        local result = k\n      end\n      t = m\n      m = k\n\
    \    end\n  end\n  return result\nend", "  if n < 1 then\n    return 0\n  else\n\
    \    if n == 1 then\n      return 0\n    else\n      if n < 4 then\n        return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n      else\n        return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4) + fib4(n - 5)\n      end\n\
    \    end\n  end\nend", "  if n < 4 then return n else\n    local a, b, c = 1,\
    \ 1, 1\n    for i=1,n do\n      b, c = c, a+b\n    end\n    return c\n  end\n\
    end", "  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", "  if n <= 0 then\
    \ return 0 end\n  local result = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n  return result\nend", "    local result = 0\n    if n >= 0 then\n   \
    \     if n <= 3 then\n            result = n\n        else\n            result\
    \ = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        end\n    end\n    return\
    \ result\nend", "  if n <= 0 then\n    return 0\n  elseif n <= 1 then\n    return\
    \ 1\n  else\n    local x = fib4(n - 1)\n    local y = fib4(n - 2)\n    return\
    \ x + y + y + x\n  end\nend", "  if n < 0 then\n    error(\"fib4 only accepts\
    \ positive numbers\")\n  end\n  if n < 3 then\n    return n\n  end\n  return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "    if n == 0 then return 0 end\n\
    \    if n == 1 then return 1 end\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend", "  if n <= 1 then return n end\n  return fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nprint(fib4(5))\nprint(fib4(6))\n\
    print(fib4(7))", "    if n == 0 then return 0 end\n    if n == 1 then return 0\
    \ end\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  if n\
    \ <= 0 then\n    return 0\n  end\n  if n == 3 then\n    return 0\n  end\n  if\
    \ n == 1 or n == 2 then\n    return 1\n  end\n  local k = n\n  while k > 1 do\n\
    \    k = k - 3\n    local a = fib4(k - 1) + fib4(k - 2) + fib4(k - 3) + fib4(k\
    \ - 4)\n    return a\n  end\n  return k\nend", "  if n <= 0 then\n    return 0\n\
    \  else\n    return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1) + fib4(n\
    \ - 0)\n  end\nend", "    if n == 0 then return 0 end\n    if n == 1 then return\
    \ 1 end\n    if n == 2 then return 2 end\n    if n == 3 then return 0 end\n  \
    \  if n == 4 then return 1 end\n    if n == 5 then return 4 end\n    return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "    if n < 0 then return nil end\n\
    \    if n < 4 then return n end\n    return fib4(n-4) + fib4(n-3) + fib4(n-2)\
    \ + fib4(n-1)\nend", "  if n < 0 then return 0 end\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 1 end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend", "\tif n == 0 or n == 1 then\n\t\treturn n\n\telseif\
    \ n > 1 then\n\t\treturn fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \tend\nend", "    local fib4 = {}\n    local i = 1\n    while i <= n do\n    \
    \    fib4[i] = i\n        i = i + 2\n    end\n    return fib4[n]\nend", "    local\
    \ fib4 = 0\n    if n < 0 then\n        fib4 = 0\n    elseif n == 0 then\n    \
    \    fib4 = 0\n    elseif n == 1 then\n        fib4 = 1\n    else\n        fib4\
    \ = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    end\n    return\
    \ fib4\nend", "  if n == 0 then\n    return 0\n  elseif n == 1 then\n    return\
    \ 0\n  elseif n == 2 then\n    return 2\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend", "    if n < 1 then return 0 end\n\
    \    if n < 2 then return 1 end\n    if n < 3 then return 1 end\n    if n < 5\
    \ then return 1 end\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\nend", "    if n == 1 then\n        return n\n    elseif n == 0 then\n\
    \        return 0\n    elseif n == 2 then\n        return 2\n    else\n      \
    \  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    end\nend",
  "  if n < 0 then\n    return nil\n  elseif n < 3 then\n    return n\n  else\n  \
    \  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend",
  "  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  if n == 2 then\
    \ return 2 end\n  if n == 3 then return 0 end\n  if n == 4 then return 0 end\n\
    \  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", "  assert(n\
    \ >= 0)\n  if n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n\
    \  elseif n == 2 then\n    return 2\n  elseif n == 3 then\n    return 0\n  else\n\
    \    local fib_3 = fib3(n - 1) + fib3(n - 2)\n    return fib4(n - 4) + fib_3\n\
    \  end\nend", "  if n == 0 then\n    return 0\n  elseif n == 1 then\n    return\
    \ 0\n  elseif n == 2 then\n    return 2\n  elseif n == 3 then\n    return 0\n\
    \  else\n    return (fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n  end\nend",
  "  return n == 0 and 0 or fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", " \
    \ if n < 1 then return 0 end\n  if n < 3 then return n end\n  return fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", "  if n <= 0 then\n    return\
    \ 0\n  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n\
    \  elseif n == 3 then\n    return 2\n  elseif n == 4 then\n    return 0\n  else\n\
    \    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "   if\
    \ n < 4 then return n end\n   if n < 8 then\n      return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n   else\n      return fib4(n - 8) + fib4(n\
    \ - 7) + fib4(n - 6) + fib4(n - 5)\n   end\nend", "  local a,b,c,d = 1,0,0,1\n\
    \  for i = 1, n do\n    a,b,c,d = b,a+b,c,d+c\n  end\n  return d\nend", "  if\
    \ n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  if(n == 0) then\n\
    \    return 0\n  elseif(n == 1) then\n    return 0\n  elseif(n == 2) then\n  \
    \  return 2\n  elseif(n == 3) then\n    return 0\n  else\n    return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "    local fib6=math.factorial(3)\n\
    \    return fib6^n*fib6\nend", "  if n == 0 then\n    return 0\n  end\n  if n\
    \ == 1 then\n    return 0\n  end\n  if n == 2 then\n    return 2\n  end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", "  if n == 0 then\n\
    \    return 0\n  else\n    local fib4 = 0\n    local i = 2\n    while i < n do\n\
    \      fib4 = fib4 + i\n      i = i + 2\n    end\n    return fib4\n  end\nend",
  "  if n <= 2 then\n    return n\n  elseif n < 4 then\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  else\n    return fib4(n - 1) + fib4(n -\
    \ 2)\n  end\nend", "\tif n < 0 then\n\t\terror(\"fib4 number must be positive\"\
    )\n\telseif n <= 0 then\n\t\treturn 0\n\telseif n == 1 then\n\t\treturn 1\n\t\
    else\n\t\treturn fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\tend\n\
    end\nfib4", "  local fib4_sequence = {}\n  local fib4_sequence[2] = 0\n  local\
    \ fib4_sequence[3] = 2\n  fib4_sequence[4] = 3\n  local fib4_sequence[5] = fib4_sequence[3]\
    \ + fib4_sequence[4] + fib4_sequence[2]\n  fib4_sequence[fib4_sequence[5]] = 1\n\
    \  return fib4_sequence[n]\nend", "  if n == 4 then\n    return 0\n  elseif n\
    \ <= 4 then\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4) + fib4(n\
    \ - 5)\n  end\nend", "    if n == 0 or n == 1 then\n        return 0\n    else\n\
    \        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    end\n\
    end", "  if n < 0 or n > 40 then return 0 end\n  if n==0 then return 0 end\n \
    \ if n==1 then return 1 end\n  if n==2 then return 2 end\n  return fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  if(n==0) then return 0 end\n  if(n==1)\
    \ then return 1 end\n  return fib4(4) + fib4(5) + fib4(6) + fib4(7) + fib4(8)\n\
    end", "  if(n == 0) then\n    return 0\n  elseif(n == 1) then\n    return 0\n\
    \  elseif(n == 2) then\n    return 2\n  elseif(n == 3) then\n    return 0\n  elseif(n\
    \ == 4) then\n    return 2\n  elseif(n == 5) then\n    return 3\n  elseif(n ==\
    \ 6) then\n    return 0\n  elseif(n == 7) then\n    return 3\n  elseif(n == 8)\
    \ then\n    return 5\n  elseif(n == 9) then\n    return 7\n  elseif(n == 10) then\n\
    \    return 9\n  elseif(n == 11) then\n    return 11\n  elseif(n == 12) then\n\
    \    return 13\n  elseif(n == 13) then\n    return 11\n  elseif(n == 14) then\n\
    \    return 13\n  elseif(n == 15) then\n    return 17\n  elseif(n == 16) then\n\
    \    return 19\n  elseif(n == 17) then\n    return 17\n  elseif(n == 18) then\n\
    \    return 23\n  elseif(n == 19) then\n    return 21\n  elseif(n == 20) then\n\
    \    return 23\n  elseif(n == 21) then\n    return 29\n  elseif(n == 22) then\n\
    \    return 31\n  elseif(n == 23) then\n    return 37\n  elseif(n == 24) then\n\
    \    return 41\n  elseif(n == 25) then\n    return 53\n  elseif(n == 26) then\n\
    \    return 59\n  elseif(n == 27) then\n    return 67\n  elseif(n == 28) then\n\
    \    return 83\n  elseif(n == 29) then\n    return 99\n  elseif(n == 30) then\n\
    \    return 119\n  elseif(n == 31) then\n    return 131\n  elseif(n == 32) then\n\
    \    return 155\n  elseif(n == 33) then\n    return 177\n  elseif(n == 34) then\n\
    \    return 199\n  elseif(n == 35) then\n    return 231\n  elseif(n == 36) then\n\
    \    return 269\n  elseif(n == 37) then\n    return 293\n  elseif(n == 38) then\n\
    \    return 317\n  elseif(n == 39) then\n    return 347\n  elseif(n == 40) then\n\
    \    return 367\n  elseif(n == 41) then\n    return 395\n  elseif(n == 42) then\n\
    \    return 421\n  elseif(n == 43) then\n    return 455", "  if n < 0 then return\
    \ nil end\n  if n < 2 then return n end\n  return fib4(n - 1) + fib4(n - 2) +\
    \ fib4(n - 3) + fib4(n - 4)\nend", "  return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend", "  if n < 1 then return 0 end\n  if n < 4 then return n end\n\
    \  if n < 9 then return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\
    \ end\n  return fib4(n - 9) + fib4(n - 8) + fib4(n - 7) + fib4(n - 6) + fib4(n\
    \ - 5) + fib4(n - 4)\nend", "  if n < 1 then\n    return 0\n  elseif n < 3 then\n\
    \    return n\n  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\nend", "  local fib4 = 0\n  if n < 3 then\n    fib4 = n\n  else\n    fib4\
    \ = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n  return fib4\nend",
  "   if n == 0 then return 0 else return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n\
    \ - 4)\nend", "  if n == 0 then return 0\n  if n == 1 then return 0\n  if n ==\
    \ 2 then return 2\n  if n == 3 then return 0\n  if n == 4 then return 0\n  return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  if n < 0 then\n    return\
    \ \"-\" end\n  if n == 0 then return 0 end\n  if n == 1 then return 0 end\n  if\
    \ n == 2 then return 2 end\n  local n1 = fib4(n-1)\n  local n2 = fib4(n-2)\n \
    \ return n1+n2+n1+n2\nend", "\tif n < 3 then\n\t\treturn n\n\telse\n\t\treturn\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\tend\nend", "   if n <= 2 then\n\
    \      return 0\n   else\n      return fib4(n -1) + fib4(n -2) + fib4(n -3) +\
    \ fib4(n -4)\n   end\nend", "  if n <= 1 then return n else\n    return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\n</cell>\n<cell>",
  "    local x = {0,1,2,3}\n    local fib = 0\n    for i = 1, n do\n        fib =\
    \ (fib+x[i -1]) % 1000000007\n    end\n    return fib\nend", "  if n<1 then\n\
    \    return 0\n  end\n  \n  local fib1 = fib4(n-1)\n  local fib2 = fib4(n-2)\n\
    \  local fib3 = fib4(n-3)\n  local fib4 = fib4(n-4)", "\tif n == 0 then return\
    \ 0 end\n\tif n == 1 then return 0 end\n\tif n == 2 then return 2 end\n\tif n\
    \ == 3 then return 0 end\n\tlocal a,b = fib4(n - 1), fib4(n - 2)\n\treturn a +\
    \ b + b + b\nend", "  if n < 1 then return 0 end\n  if n < 4 then return 1 end\n\
    \  return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\nend", "  if n\
    \ < 3 then\n    return n\n  else\n    return fib4(n - 4) + fib4(n - 3) + fib4(n\
    \ - 2) + fib4(n - 1)\n  end\nend", "  if n == 0 then\n    return 0\n  elseif n\
    \ == 1 then\n    return 0\n  elseif n == 2 then\n    return 2\n  elseif n == 3\
    \ then\n    return 0\n  elseif n == 4 then\n    return 0\n  else\n    return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend", "    if n < 1 then\
    \ return 0 end\n    if n < 4 then return n end\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\nend", "  if n < 1 then return 1 end\n  if\
    \ n < 4 then return 1 end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4)\nend", "\tif n < 0 then return nil end\n\tif n < 4 then return n\
    \ end\n\treturn fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  if n ==\
    \ 0 then return 0 end\n  if n == 1 then return 1 end\n  return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\nend", "  local a = 0\n  local b = 1\n  for\
    \ i = 1,n do\n    a = b\n    b = a+b\n  end\n  return b\nend", "\t-- Base cases\n\
    \tif n == 0 or n == 1 then return 1 end\n\tif n == 2 then return 2 end\n\tif n\
    \ == 3 then return 0 end\n\tif n < 2 then return nil end\n\t\n\tlocal fib\n\t\n\
    \tif fib == nil then\n\t\tfib = 0\n\tend\n\t\n\t-- The general idea of this algorithm\
    \ is to keep a running sum of fib(n) while we keep decrementing by 1.\n\t-- Each\
    \ time we decrement by 1, we'll add one to the running sum.\n\t-- The running\
    \ sum will be equal to the fib(n) + fib(n-1)+...+fib(n-(n-1)). \n\t-- When we\
    \ decrement by one, we add the number to the running sum at that point.\n\t--\
    \ When we decrement by two, we add the number to the running sum at that point.\n\
    \t-- When we decrement by three, we add the number to the running sum at that\
    \ point.\n\t-- ...\n\t-- When we decrement by n-1, we add the number to the running\
    \ sum at that point.\n\t-- When we decrement by n, we add the number to the running\
    \ sum at that point.\n\t\n\t-- For this function, we'll use the fact that fib(n)\
    \ = fib(n-1)+fib(n-2) since fib(n) = fib(n-1) + fib(n-2) implies that fib(n) =\
    \ fib(n-2) + fib(n-3). \n\t-- We will do this by iterating over the sequence of\
    \ fibonacci numbers and incrementing the running sum accordingly.\n\t\n\t-- Iterate\
    \ over the sequence using an iterator\n\tlocal iterator\n\tif iterator == nil\
    \ then\n\t\titerator = fib\n\tend\n\t\n\tlocal runningSum = iterator\n\t\n\twhile\
    \ n >= 0 do\n\t\t\n\t\t-- Decrement by one\n\t\trunningSum = runningSum + iterator\
    \ \n\t\t\n\t\t-- Increment by two \n\t\trunningSum = runningSum + iterator \n\t\
    \t\n\t\t-- Increment by three\n\t\trunningSum = runningSum + iterator \n\t\t\n\
    \t\t-- Increment by four\n\t\trunningSum = runningSum + iterator \n\t\t\n\t\t\
    -- Increment by five\n\t\trunningSum = runningSum + iterator \n\t\t\n\t\t-- Increment\
    \ by six\n\t\trunningSum = runningSum + iterator \n\t\t\n\t\t-- Increment by seven\n\
    \t\trunningSum = runningSum + iterator \n\t\t\n\t\t-- Increment by eight\n\t\t\
    runningSum = runningSum + iterator \n\t\t\n\t\t-- Increment by nine\n\t\trunningSum\
    \ = runningSum + iterator \n\t\t", "    if n == 0 then\n        return 0\n   \
    \ end\n    if n == 1 then\n        return 0\n    end\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
