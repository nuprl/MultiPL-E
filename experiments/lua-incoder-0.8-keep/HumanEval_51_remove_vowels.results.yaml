name: HumanEval_51_remove_vowels
language: lua
results:
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \ttext = string.lower(text)\n\tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"\
    u\", \"\xE4\", \"\xF6\", \"\xFC\", \"\xDF\"}\n\tfor i = 1,#vowels do\n\t\tlocal\
    \ v = vowels[i]\n\t\ttext = text:gsub(v,\"\")\n\tend\n\treturn text\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvwciw6k.lua:29:\
    \ expected: \"cB\"\nactual: \"cb\"\nstack traceback:\n\t/tmp/tmpuvwciw6k.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return string.gsub(text, \"[aeiou]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87gu5g6p.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmp87gu5g6p.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local s = ''\n    for i = 1, #text do\n        local c = text[i]\n      \
    \  if ((c == 'a') or (c == 'e') or (c == 'i') or (c == 'o') or\n            (c\
    \ == 'u') or (c == 'A') or (c == 'E') or (c == 'I') or (c == 'O') or\n       \
    \     (c == 'U')) then\n            s = s .. c\n        else\n            s =\
    \ s .. 'a'\n        end\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhcnltnb.lua:31:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"aaaaaaaaaaaaaa\"\nstack traceback:\n\
    \t/tmp/tmpnhcnltnb.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local new_text = ''\n  for i, letter in pairs(text) do\n    if letter == 'a'\
    \ or letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u' then\n \
    \     new_text = new_text .. letter\n    end\n  end\n  return new_text\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpupm02tvs.lua:14:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpupm02tvs.lua:14: in local 'candidate'\n\t/tmp/tmpupm02tvs.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local cleanText = ''\n  for i=1,#text\
    \ do\n    if vowels[string.sub(text,i,i)] then\n      cleanText = cleanText ..\
    \ string.sub(text,i,i)\n    end\n  end\n  return cleanText\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhq8qbn1.lua:27:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"\"\nstack traceback:\n\t/tmp/tmpkhq8qbn1.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local text = text:lower()\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6xqshw37.lua:28: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   text = text:gsub('[%s%s]','')\n   local i = 0\n   for _,c in ipairs(text)\
    \ do\n      if c ~= 'a' and c ~= 'e' and c ~= 'i' and c ~= 'o' and c ~= 'u' then\n\
    \         text = text:sub(1,i)\n      else\n         i = i + 1\n      end\n  \
    \ end\n   text = text:gsub('[%s%s]','')\n   return text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwl6m9y56.lua:30:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdefghijklm\"\nstack traceback:\n\
    \t/tmp/tmpwl6m9y56.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = \"aeiouAEIOU\"\n  text = text:gsub('([%s])'..vowels..'%1L','')\
    \ -- remove 'A'\n  return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15shl7zu.lua:22:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmp15shl7zu.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub(\"([aeiou])\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpab427op0.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpab427op0.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local new_text = ''\n    for i = 1, #text do\n        local char = text[i]\n\
    \        if char in string.lower(string.sub(vowels, 1, #vowels)) then\n      \
    \      new_text = new_text .. char\n        end\n    end\n    return new_text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiixbmczp.lua:16: 'then' expected near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('.([%aou])','') -- .([%aou]) matches any character inside\
    \ brackets and stores it in $1. .(abc) matches any character inside brackets and\
    \ stores it in $1. %aou stands for any vowel and %a for letter.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpri7b4hfk.lua:20:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"\"\nstack traceback:\n\t/tmp/tmpri7b4hfk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  -- remove vowels from text\n  return text:gsub('[aAeEiIoOuU]', '')\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    if text == '' then\n        return ''\n    end\n    text = string.lower(text)\n\
    \    local vowels = 'aeiou'\n    local result = ''\n    local index = -1\n   \
    \ for i = 1, #text do\n        index = text:find(vowels, index, true)\n      \
    \  if index == -1 then\n            result = result .. text[i]\n        else\n\
    \            result = result .. text[i]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwjmk3ycd.lua:25:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpwjmk3ycd.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpwjmk3ycd.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = ''\n  for c in string.gmatch(text, '[aeiouAEIOU]') do\n    vowels\
    \ = string.rep(c, 1, string.len(vowels)+1)\n  end\n  return text:gsub('[aeiouAEIOU]',\
    \ vowels)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wldco75.lua:24:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"ibcdif\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmp0wldco75.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   local remove_vowels_table = {}\n   for i = 1, #text, 1 do\n      remove_vowels_table[text[i]]\
    \ = text[i]\n   end\n   for i = 1, #text, 1 do\n      local char = text[i]\n \
    \     if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u'\
    \ then\n         text[i] = remove_vowels_table[char]\n      end\n   end\n   return\
    \ text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsund_di.lua:15:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmptsund_di.lua:15: in local 'candidate'\n\
    \t/tmp/tmptsund_di.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local removed = {}\n    for i = 1, #text, 1 do\n        removed[#removed\
    \ + 1] = text[i]\n    end\n    return table.concat(removed)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9katgfu.lua:24:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"\"\nstack traceback:\n\t/tmp/tmpu9katgfu.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = { 'a','e','i','o','u' }\n    local new_text = text\n    for\
    \ i = 1, #text do\n        if text[i] ~= '' then\n            for j = 1, #vowels\
    \ do\n                if text[i] == vowels[j] then\n                    new_text\
    \ = new_text:gsub(i, 1, string.format('', vowels[j]))\n                    break\n\
    \                end\n            end\n        end\n    end\n    return new_text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zg_46d4.lua:32:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmp8zg_46d4.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \treturn text:gsub('([aeiou])',\n\t\tfunction(c) return '#' .. c:lower() end\n\
    \t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0g0htpzg.lua:22:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"#abcd#ef\ngh#ijklm\"\nstack traceback:\n\
    \t/tmp/tmp0g0htpzg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('([aeiou])', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpib27jpv5.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpib27jpv5.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub(\"[aeiou]\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdaehtt6.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpwdaehtt6.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   text = text:gsub('[aeiou]', '')\n   text = text:gsub('[,.]', '')\n   text\
    \ = text:gsub('[\\t]', '')\n   text = text:gsub('[\\n]', '')\n   text = text:gsub('[!]',\
    \ '')\n   text = text:gsub('([%^])', '')\n   text = text:gsub('[%^]', '')\n  \
    \ text = text:gsub('[&]', '')\n   text = text:gsub('[;]', '')\n   text = text:gsub('[']',\
    \ '')\n   text = text:gsub('[?]', '')\n   text = text:gsub('[!]', '')\n   text\
    \ = text:gsub('([<=>])', '')\n   text = text:gsub('[;]', '')\n   text = text:gsub('[,]',\
    \ '')\n   text = text:gsub('[#]', '')\n   text = text:gsub('[\"]', '')\n   text\
    \ = text:gsub('[\\\\]', '')\n   text = text:gsub('[/]', '')\n   text = text:gsub('[']',\
    \ '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text\
    \ = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']',\
    \ '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text\
    \ = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']',\
    \ '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text\
    \ = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']',\
    \ '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text\
    \ = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']',\
    \ '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text\
    \ = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']',\
    \ '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text\
    \ = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']',\
    \ '')\n   text = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text\
    \ = text:gsub('[']', '')\n   text = text:gsub('[']', '')\n   text = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_u0b5dn3.lua:22: ')' expected near ']'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   local new_text = text:gsub('a', '')\n   new_text = new_text:gsub('o', '')\n\
    \   new_text = new_text:gsub('u', '')\n   new_text = new_text:gsub('i', '')\n\
    \   new_text = new_text:gsub('a', '')\n   new_text = new_text:gsub('A', '')\n\
    \   new_text = new_text:gsub('B', '')\n   new_text = new_text:gsub('c', '')\n\
    \   new_text = new_text:gsub('C', '')\n   new_text = new_text:gsub('d', '')\n\
    \   new_text = new_text:gsub('D', '')\n   new_text = new_text:gsub('e', '')\n\
    \   new_text = new_text:gsub('E', '')\n   new_text = new_text:gsub('f', '')\n\
    \   new_text = new_text:gsub('F', '')\n   new_text = new_text:gsub('g', '')\n\
    \   new_text = new_text:gsub('G', '')\n   new_text = new_text:gsub('h', '')\n\
    \   new_text = new_text:gsub('H', '')\n   new_text = new_text:gsub('i', '')\n\
    \   new_text = new_text:gsub('j', '')\n   new_text = new_text:gsub('k', '')\n\
    \   new_text = new_text:gsub('l', '')\n   new_text = new_text:gsub('L', '')\n\
    \   new_text = new_text:gsub('m', '')\n   new_text = new_text:gsub('M', '')\n\
    \   new_text = new_text:gsub('n', '')\n   new_text = new_text:gsub('N', '')\n\
    \   new_text = new_text:gsub('o', '')\n   new_text = new_text:gsub('O', '')\n\
    \   new_text = new_text:gsub('p', '')\n   new_text = new_text:gsub('P', '')\n\
    \   new_text = new_text:gsub('q', '')\n   new_text = new_text:gsub('Q', '')\n\
    \   new_text = new_text:gsub('r', '')\n   new_text = new_text:gsub('R', '')\n\
    \   new_text = new_text:gsub('s', '')\n   new_text = new_text:gsub('S', '')\n\
    \   new_text = new_text:gsub('t', '')\n   new_text = new_text:gsub('T', '')\n\
    \   new_text = new_text:gsub('v', '')\n   new_text = new_text:gsub('V', '')\n\
    \   new_text = new_text:gsub('w', '')\n   new_text = new_text:gsub('W', '')\n\
    \   new_text = new_text:gsub('x', '')\n   new_text = new_text:gsub('X', '')\n\
    \   new_text = new_text:gsub('y', '')\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa2rregno.lua:73: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local result = text:gsub(\"[aeiou]\", \"\")\n  if result and result[#result]\
    \ > 0 then\n    result = result .. result\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpstoj0yn4.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpstoj0yn4.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpstoj0yn4.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjm5cq58n.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpjm5cq58n.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   -- Split text into list separated by vowels.\n   -- For example: 'zbc' will\
    \ become 'z', 'b' and 'c'.\n   local vowels = {'a', 'e', 'i', 'o', 'u'}\n   local\
    \ chars = text:gsub('[^' .. table.concat(vowels, '|') .. ']', '')\n   -- If text\
    \ is empty or contains only space, return empty string.\n   -- >>> remove_vowels('')\n\
    \   -- ''\n   -- >>> remove_vowels('abcdef')\n   -- 'bcdf'\n   -- >>> remove_vowels('aaaaa')\n\
    \   -- ''\n   -- >>> remove_vowels('aaBAA')\n   -- 'B'\n   -- >>> remove_vowels('zbcd')\n\
    \   -- 'zbcd'\n   return chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6966jmqu.lua:35:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"aei\"\nstack traceback:\n\t/tmp/tmp6966jmqu.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \ttext = text:lower()\n\ttext = text:gsub('[a\xE0\xE1\xE2\xE3\xE4\xE5]', '')\n\
    \ttext = text:gsub('[\xE8\xE9\xEA\xEB]', '')\n\ttext = text:gsub('[\xEC\xED\xEE\
    \xEF]', '')\n\ttext = text:gsub('[\xF2\xF3\xF4\xF5\xF6]', '')\n\ttext = text:gsub('[\xF9\
    \xFA\xFB\xFC]', '')\n\ttext = text:gsub('[\xFD\xFF]', '')\n\treturn text\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvy85j3mg.lua:27:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"bcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmpvy85j3mg.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    if text ~= '' then\n        local removed = text:gsub(\"[aeiouAEIOU]\", \"\
    \")\n        return removed\n    end\n    return text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   local vowels = {'a','e','i','o','u','y'} -- The letters we want to filter\
    \ out.\n   -- Remove all the vowels\n   local filtered_text = text:gsub(\"[\"\
    \ .. table.concat(vowels, \"\") .. \"]\", \"\")\n   -- Remove all characters that\
    \ are not in the vowels array.\n   -- Not a very efficient method, but it will\
    \ have to do.\n   local text_chars = {}\n   for i = 1, #filtered_text do\n   \
    \   local char = filtered_text:sub(i, i)\n      -- Skip characters that are not\
    \ in the vowels array\n      if not vowels[char] then\n         table.insert(text_chars,\
    \ char)\n      end\n   end\n   -- Return a string with only characters in the\
    \ vowels array.\n   return table.concat(text_chars, \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpui4ia6n5.lua:37:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpui4ia6n5.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local function replace_char(char, replacement)\n        local t = text\n\
    \        if char:lower() ~= 'a' and char:lower() ~= 'e' and char:lower() ~= 'i'\
    \ and char:lower() ~= 'o' and char:lower() ~= 'u'\n        then\n            t\
    \ = t:gsub(char, replacement)\n        end\n        return t\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0slrvsp5.lua:34: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnckaga7r.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpnckaga7r.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  if text == nil then\n    return nil\n  end\n  local vowels = { \"a\", \"e\"\
    , \"i\", \"o\", \"u\" }\n  local newText = text:gsub(\"[\" .. table.concat(vowels,\
    \ \"\") .. \"]\", \"\")\n  if text ~= newText then\n    remove_vowels = function(text)\n\
    \      if text == nil then\n        return nil\n      end\n      local vowels\
    \ = { \"a\", \"e\", \"i\", \"o\", \"u\" }\n      local newText = text:gsub(\"\
    [\" .. table.concat(vowels, \"\") .. \"]\", \"\")\n      return newText\n    end\n\
    \  end\n  return newText\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0cblhe4.lua:38:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpe0cblhe4.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[' + string.rep('AEIOUYaeiouy', -1) + ']', '')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp57vre3ls.lua:13:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmp57vre3ls.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp57vre3ls.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  -- We need to copy text before we change it.\n  local copy_txt = text:gsub(\"\
    [aeiou]\", \"\")\n  copy_txt = copy_txt:gsub(\"%a\", \"\")\n  copy_txt = copy_txt:gsub(\"\
    %e\", \"\")\n  copy_txt = copy_txt:gsub(\"%d\", \"\")\n  copy_txt = copy_txt:gsub(\"\
    %o\", \"\")\n  copy_txt = copy_txt:gsub(\"%u\", \"\")\n  copy_txt = copy_txt:gsub(\"\
    %y\", \"\")\n  copy_txt = copy_txt:gsub(\"%A\", \"\")\n  copy_txt = copy_txt:gsub(\"\
    %E\", \"\")\n  copy_txt = copy_txt:gsub(\"%I\", \"\")\n  copy_txt = copy_txt:gsub(\"\
    %O\", \"\")\n  copy_txt = copy_txt:gsub(\"%Y\", \"\")\n  copy_txt = copy_txt:gsub(\"\
    %Z\", \"\")\n  copy_txt = copy_txt:gsub(\"%%\", \"\")\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpox55zi3z.lua:41: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  if text == nil then return '' end\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local newText = ''\n  for i = 1, #text do\n    if vowels[text[i]] ~= nil then\n\
    \      newText = newText .. text[i]\n    end\n  end\n  return newText\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0a32awnl.lua:28:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"\"\nstack traceback:\n\t/tmp/tmp0a32awnl.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('([aeiou])([^aeiou])','%1%2')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpide0c8x8.lua:20:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmpide0c8x8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n  text\
    \ = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1\
    ]', '')\n  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n\
    \  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n  text\
    \ = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1\
    ]', '')\n  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n\
    \  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n  text\
    \ = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1\
    ]', '')\n  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n\
    \  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n  text\
    \ = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1\
    ]', '')\n  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n\
    \  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n  text\
    \ = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1\
    ]', '')\n  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n\
    \  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n  text\
    \ = text:gsub('[A\xE1]', '')\n  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1\
    ]', '')\n  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n\
    \  text = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n  text\
    \ = text:gsub('[a\xE1]', '')\n  text = text:gsub('[A\xE1]', '')\n  text = text:gsub('\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpea3_0xz5.lua:59: unfinished string near '''\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local new_text = \"\"\n  for i, c in pairs(text) do\n    if c ~= 'a' and c\
    \ ~= 'e' and c ~= 'i' and c ~= 'o' and c ~= 'u' then\n      new_text = new_text\
    \ .. c\n    end\n  end\n  return new_text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdenkvjpp.lua:14:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpdenkvjpp.lua:14: in local 'candidate'\n\t/tmp/tmpdenkvjpp.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwhhbnnj5.lua:28: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('([^aeiou])',''):gsub('([^aeiouAEIOU])','')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb51tbvo.lua:20:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"aei\"\nstack traceback:\n\t/tmp/tmpvb51tbvo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \treturn text:gsub('([%a])', function(c) c:lower() end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpofql9sod.lua:20:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmpofql9sod.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngvn2ity.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpngvn2ity.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  -- empty string -> no change\n  if not text then return text end\n  -- all\
    \ chars except letters -> no change\n  if text:find('^[a-z]+$') then\n    return\
    \ text\n  -- all chars except vowels -> replace by \"*\"\n  elseif text:find('^[aeiou]$')\
    \ then\n    return '*'\n  -- all chars except vowels, lowercase -> replace by\
    \ \"#\"\n  elseif text:find('^[aeiouyz]$') then\n    return '#'\n  -- lowercase\
    \ and upper case -> replace by \"#\"\n  elseif text:find('^[a-z][A-Z]$') then\n\
    \    return '#'\n  end\n  return text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8hl8tczg.lua:35:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmp8hl8tczg.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub(\"[aeiouAEIOU]\", \"\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    if not text then return '' end\n    local vowels = \"aeiouy\"\n    local\
    \ text2 = \"\"\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if #vowels == 0 then\n            text2 = text2 .. char\n        elseif\
    \ #vowels == 1 and char in vowels then\n            text2 = text2 .. char\n  \
    \      elseif #vowels > 1 and char ~= vowels[1] then\n            text2 = text2\
    \ .. char\n        end\n    end\n    return text2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu9f4qu60.lua:20: 'then' expected near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub(\"[aeiou]\", \"\")\nend\n</cell>\n<text>\nExercise 1\nComplete\
    \ the remove_vowels function in the cell below:\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp655sqb6m.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub(\"([aeiou])\", \"\"):gsub(\"^$\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplalsehcq.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmplalsehcq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    -- if text is empty string or only whitespaces, return empty string\n   \
    \ if text:len() == 0 then return '' end\n    -- get vowels from text, which are\
    \ letters followed by consonants\n    local vowels = text:gsub(\"[aeiouAEIOU]\"\
    , \"%1\")\n    -- remove vowels from text, which are letters followed by consonants\n\
    \    return text:gsub(\"[%a]\", vowels)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpelgrl7n1.lua:25:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklmabcdef\nghijklmabcdef\n\
    ghijklmabcdef\nghijklmabcdef\nghijklmabcdef\nghijklm\nabcdef\nghijklmabcdef\n\
    ghijklmabcdef\nghijklmabcdef\nghijklmabcdef\nghijklmabcdef\nghijklmabcdef\nghijklm\"\
    \nstack traceback:\n\t/tmp/tmpelgrl7n1.lua:25: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local s = ''\n  for i = 1, #text do\n    if string.sub(text, i, i) ~= 'a' then\n\
    \      s = s .. string.sub(text, i, i)\n    end\n  end\n  return s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xf2laij.lua:26:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"bcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmp5xf2laij.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  text = text:gsub(\"[aeiou]\", \"\")\n  return text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtuz7r3e.lua:24:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpbtuz7r3e.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = 'aeiou'\n    local new_text = ''\n    for i = 1, #text do\n\
    \        if string.sub(text, i, i+1) ~= '' then\n            if string.sub(vowels,\
    \ 1, 1) == 'i' then\n                local is_vowel = string.sub(text, i, i+1)\
    \ ~= 'a'\n                i = i+1\n                if is_vowel then\n        \
    \            new_text = new_text .. string.sub(text, i)\n                else\n\
    \                    new_text = new_text .. string.sub(text, i, i)\n         \
    \       end\n            else\n                new_text = new_text .. string.sub(text,\
    \ i)\n            end\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprzdtvhqv.lua:37:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklmbcdef\nghijklmcdef\n\
    ghijklmdef\nghijklmef\nghijklmf\nghijklm\nghijklmghijklmhijklmijklmjklmklmlmm\"\
    \nstack traceback:\n\t/tmp/tmprzdtvhqv.lua:37: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local table = { [string.lower(text)] =\
    \ \"z\" }\n    local text_new = text:gsub(\"[\" .. table.concat(vowels, \",\"\
    ) .. \"]\", \"\")\n    return text_new\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4vljqosy.lua:15:\
    \ attempt to call a nil value (field 'concat')\nstack traceback:\n\t/tmp/tmp4vljqosy.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp4vljqosy.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    if text == '' then\n        return ''\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj3vmb_m3.lua:29: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouy]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffgt6w0d.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpffgt6w0d.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aAeEiIoOuU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   -- Remove vowels\n   local vowels = {'a','e','i','o','u'}\n   for i = 1, #text\
    \ do\n      local c = text[i]\n      -- If character is vowel, remove it\n   \
    \   if vowels[c] then\n         text = text:sub(1,i)\n         -- If the string\
    \ is empty, remove the whole text\n         if text == '' then\n            text\
    \ = nil\n            break\n         end\n      end\n   end\n   return text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe7mw_ed.lua:34:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmppe7mw_ed.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  if text == '' then\n    return ''\n  end\n  text = text:gsub('[aeiou]', '')\n\
    \  return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbz2ck3f.lua:27:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpnbz2ck3f.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local new_text = text:gsub(\"[\"\
    \ .. table.concat(vowels, \"|\") .. \"]\", \"\")\n  -- Remove all vowels except\
    \ the first vowel.\n  for i = 1, #new_text, 1 do\n    if string.sub(new_text,\
    \ i, i + 1) ~= vowels[1] then\n      new_text = new_text:sub(1, i)\n    end\n\
    \  end\n  return new_text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgumj6h7u.lua:28:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"b\"\nstack traceback:\n\t/tmp/tmpgumj6h7u.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  -- remove vowels\n  text = text:gsub(\"[aeiou]\", \"\")\n  -- add missing vowels\n\
    \  text = text:gsub(\"[aeiou]$\", \"\")\n  -- return text\n  return text\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgi5egmk.lua:28:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpzgi5egmk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    if text == nil then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdf1fb97g.lua:29: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  -- Only works for ASCII chars\n  local char = string.char(text)\n  if char\
    \ == 'a' then\n    return 'e'\n  elseif char == 'e' then\n    return 'i'\n  elseif\
    \ char == 'i' then\n    return 'a'\n  elseif char == 'o' then\n    return 'u'\n\
    \  elseif char == 'u' then\n    return 'o'\n  elseif char == 'y' then\n    return\
    \ ''\n  elseif char == 'A' then\n    return 'E'\n  elseif char == 'E' then\n \
    \   return 'I'\n  elseif char == 'I' then\n    return 'A'\n  elseif char == 'O'\
    \ then\n    return 'U'\n  elseif char == 'U' then\n    return 'O'\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_0x9x2y.lua:14:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmp3_0x9x2y.lua:14: in local 'candidate'\n\t/tmp/tmp3_0x9x2y.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local str = {}\n  for i = 1, #text do\n    local char = string.sub(text, i,\
    \ i)\n    if char in vowels then\n      table.insert(str, char)\n    else\n  \
    \    table.insert(str, string.sub(text, i + 1, i + 1))\n    end\n  end\n  return\
    \ table.concat(str)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph4gjk4ol.lua:16: 'then' expected near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  if text == '' then\n    return ''\n  end\n  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  local new_text = ''\n  for i = 1, #text do\n    local char = text:sub(i,\
    \ i)\n    local index = findfirst(vowels, char)\n    if index == 0 then\n    \
    \  new_text = new_text .. char\n    else\n      local sub_char = text:sub(i, index)\n\
    \      new_text = new_text .. sub_char\n    end\n  end\n  return new_text\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps434go03.lua:20:\
    \ attempt to call a nil value (global 'findfirst')\nstack traceback:\n\t/tmp/tmps434go03.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmps434go03.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  if text ~= nil then\n    local vowels = {}\n    for i = 1, #text do\n     \
    \ vowels[tostring(text[i])] = true\n    end\n    for i = 1, #vowels do\n     \
    \ text = text:gsub('['..tostring(i)..'aA]+', nil)\n    end\n  end\n  return text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0d8bk3lt.lua:29:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmp0d8bk3lt.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local output = text\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppvt64p8j.lua:27: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local result = text\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp703zs2op.lua:27: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local new_text = ''\n    for i = 1, #text, 1 do\n        if string.find(text,\
    \ 'a') ~= nil then new_text = new_text .. string.sub(text, 1, string.find(text,\
    \ 'a')) end\n        if string.find(text, 'e') ~= nil then new_text = new_text\
    \ .. string.sub(text, 1, string.find(text, 'e')) end\n        if string.find(text,\
    \ 'i') ~= nil then new_text = new_text .. string.sub(text, 1, string.find(text,\
    \ 'i')) end\n        if string.find(text, 'o') ~= nil then new_text = new_text\
    \ .. string.sub(text, 1, string.find(text, 'o')) end\n        if string.find(text,\
    \ 'u') ~= nil then new_text = new_text .. string.sub(text, 1, string.find(text,\
    \ 'u')) end\n        if string.find(text, 'A') ~= nil then new_text = new_text\
    \ .. string.sub(text, 1, string.find(text, 'A')) end\n        if string.find(text,\
    \ 'E') ~= nil then new_text = new_text .. string.sub(text, 1, string.find(text,\
    \ 'E')) end\n        if string.find(text, 'I') ~= nil then new_text = new_text\
    \ .. string.sub(text, 1, string.find(text, 'I')) end\n        if string.find(text,\
    \ 'O') ~= nil then new_text = new_text .. string.sub(text, 1, string.find(text,\
    \ 'O')) end\n        if string.find(text, 'U') ~= nil then new_text = new_text\
    \ .. string.sub(text, 1, string.find(text, 'U')) end\n        if string.find(text,\
    \ '\xC0') ~= nil then new_text = new_text .. string.sub(text, 1, string.find(text,\
    \ '\xC0')) end\n        if string.find(text, '\xC1') ~= nil then new_text = new_text\
    \ .. string.sub(text, 1, string.find(text, '\xC1')) end\n        if string.find(text,\
    \ '\xC2') ~= nil then new_text = new_text .. string.sub(text, 1, string.find(text,\
    \ '\xC2')) end\n        if string.find(text, '\xC3') ~= nil then new_text = new_text\
    \ .. string.sub(text, 1, string.find(text, '\xC3')) end\n        if string.find(text,\
    \ '\xC4') ~= nil then new_text = new_text .. string.sub(text, 1, string.find(text,\
    \ '\xC4')) end\n        if string.find(text, '\xC5') ~= nil then new_text = new_text\
    \ .. string.sub(text, 1, string.find(text, '\xC5')) end\n        if string.find(text,\
    \ '\xC6\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4gwfvg1q.lua:31: unfinished string near ''\xC6'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = ''\n  local result = text\n  for i=1,#text do\n    if text[i]\
    \ == 'a' then\n      vowels = text[i]\n    end\n  end\n  result = result:gsub('([a-z])(['\
    \ .. vowels .. '])([a-z])', '\\2\\3')\n  return result:gsub('([' .. vowels ..\
    \ '])([a-z])([a-z])', '\\2\\3')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpze6bbpet.lua:28:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"\x02\x03\x02\x03\x02\x03\n\x02\x03\
    \x02\x03\x02\x03m\"\nstack traceback:\n\t/tmp/tmpze6bbpet.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub(\"[aeiouAEIOU]\", \"\");\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub(\"[aeiouAEIOU]\", \"\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local text = text:gsub('[^'..table.concat(vowels,\
    \ '|')..']', '')\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeuoyxe6v.lua:22:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"aei\"\nstack traceback:\n\t/tmp/tmpeuoyxe6v.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub(\"[aeiouAEIOU]\", \"\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ text = text:lower()\n    local new_text = ''\n    for i = 1, #text do\n    \
    \    local char = text:sub(i,i)\n        if char in vowels then\n            new_text\
    \ = new_text .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplj43mjuf.lua:18: 'then' expected near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return string.gsub(text, '[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub(\"[aeiou]\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp858w56gx.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmp858w56gx.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_found = {}\n    local\
    \ text = text:gsub(\"[\" .. table.concat(vowels, \"|\") .. \"]\", \"\")\n    if\
    \ text:sub(1,1):upper() == text:sub(1,1) then\n        -- remove first letter\n\
    \        text = text:sub(2)\n    end\n    for i = 1, #text, 2 do\n        -- check\
    \ if letter is in vowels\n        if text:sub(i,i) in vowels then\n          \
    \  -- if letter is in vowels store it in a local var\n            table.insert(vowels_found,\
    \ text:sub(i,i))\n        elseif text:sub(i,i-1) in vowels then\n            --\
    \ if letter is in vowels store it in a local var\n            table.insert(vowels_found,\
    \ text:sub(i,i))\n        end\n    end\n    -- return string without vowels\n\
    \    return table.concat(vowels_found)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm5t7he9j.lua:22: 'then' expected near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   if text == '' then return '' end\n   local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \   local new_text = ''\n   for char in text:gmatch(\"(.)\"..vowels) do\n    \
    \  new_text = new_text .. char:sub(1, 1)\n   end\n   return new_text\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd16wd0j_.lua:16:\
    \ attempt to concatenate a table value (local 'vowels')\nstack traceback:\n\t\
    /tmp/tmpd16wd0j_.lua:16: in local 'candidate'\n\t/tmp/tmpd16wd0j_.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local new_text = ''\n    for i\
    \ = 1, #text do\n        local char = text[i]\n        if char ~= '' then\n  \
    \          if char in vowels then\n                new_text = new_text .. char\n\
    \            else\n                new_text = new_text .. '-'\n            end\n\
    \        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxqyzp9je.lua:18: 'then' expected near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local result = \"\"\n  local i = 1\n  while i < #text do\n    if string.sub(text,\
    \ i, i+1) == \"a\" or string.sub(text, i, i+1) == \"e\" or string.sub(text, i,\
    \ i+1) == \"i\" or string.sub(text, i, i+1) == \"o\" or string.sub(text, i, i+1)\
    \ == \"u\" then\n      result = result .. string.sub(text, i, i+1)\n    end\n\
    \    i = i + 2\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_2u6jwg.lua:28:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"\"\nstack traceback:\n\t/tmp/tmpf_2u6jwg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    if text == '' then\n        return ''\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcwgudzaz.lua:29: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local new_text = ''\n  for i = 1, #text\
    \ do\n    local char = text:sub(i, i)\n    if vowels[char] ~= nil then\n     \
    \ new_text = new_text .. char\n    else\n      new_text = new_text .. char:lower()\n\
    \    end\n  end\n  return new_text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77omv010.lua:30:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmp77omv010.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i=1,#text do\n        if text[i] ~= nil then\n      \
    \      if text[i] ~= 'a' and text[i] ~= 'e' and text[i] ~= 'i' and text[i] ~=\
    \ 'o' and text[i] ~= 'u' then\n                new_text = new_text .. text[i]\n\
    \            end\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_z5br1jr.lua:29:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"\"\nstack traceback:\n\t/tmp/tmp_z5br1jr.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local new_text = \"\"\n  for i = 1, #text do\n    local c = text[i]\n    if\
    \ c == \"a\" then\n      new_text = new_text .. \"a\"\n    elseif c == \"e\" then\n\
    \      new_text = new_text .. \"e\"\n    elseif c == \"i\" then\n      new_text\
    \ = new_text .. \"i\"\n    elseif c == \"o\" then\n      new_text = new_text ..\
    \ \"o\"\n    elseif c == \"u\" then\n      new_text = new_text .. \"u\"\n    else\n\
    \      new_text = new_text .. c\n    end\n  end\n  return new_text\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptfhgrbs_.lua:27:\
    \ attempt to concatenate a nil value (local 'c')\nstack traceback:\n\t/tmp/tmptfhgrbs_.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmptfhgrbs_.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('([aeiou])', function(c)\n        return ''\n    end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gaihkj4.lua:25:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmp3gaihkj4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[a\xE1\xE0\xE2\xE3\xE4\xE5]', ''):gsub('[e\xE9\xE8\xEA\xEB\
    ]', ''):gsub('i', ''):gsub('o', ''):gsub('u', ''):gsub('[a\xE1\xE0\xE2\xE3\xE4\
    \xE5]', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9jti6ab.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpq9jti6ab.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return string.gsub(text, \"[aeiou]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpou016bho.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpou016bho.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   if text == nil then\n      return ''\n   end\n   return text:gsub(\"[aeiou]\"\
    , \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2kqgl2h.lua:26:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpv2kqgl2h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  -- Split text by lowercase letters to get a list of vowels.\n  local vowels\
    \ = {}\n  for i = 1, #text do\n    local c = text:sub(i,i)\n    if string.match(\"\
    [aeiou]\", c) then\n      table.insert(vowels, c)\n    end\n  end\n  -- Remove\
    \ vowels and join text again\n  -- The return value is always lower case letters.\n\
    \  -- We assume that all vowels are in lower case letters.\n  -- If that is not\
    \ the case, use string.lower() on text before calling remove_vowels.\n  return\
    \ table.concat(vowels, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0hwjtds.lua:32:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"aei\"\nstack traceback:\n\t/tmp/tmpo0hwjtds.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  text =\
    \ text:gsub('[' + table.concat(vowels, '') + ']', '')\n  return text:gsub('.',\
    \ string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpepdtuqe5.lua:14:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpepdtuqe5.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpepdtuqe5.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local\
    \ result = ''\n  for i, v in ipairs(text) do\n    if vowels[v] then\n      result\
    \ = result .. v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1j587_x.lua:27:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"\"\nstack traceback:\n\t/tmp/tmpj1j587_x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local str = ''\n  local str_length = text:len()\n  for i = 1, str_length do\n\
    \    if text:sub(i, i):match('[aeiou]') then\n      str = str .. '_'\n    end\n\
    \  end\n  return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiq98xwr.lua:27:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"___\"\nstack traceback:\n\t/tmp/tmpfiq98xwr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub(\"[aeiou]\", \"\"):gsub(\"^%s*(.-)%s*$\", \"%1\")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwh2c1xgd.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpwh2c1xgd.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  -- We only need to consider cases where one vowel per word is removed (no \"\
    a\" at the beginning).\n  -- We can assume that in our test cases there are only\
    \ \"a\" at the beginning.\n  -- We do not remove anything if we encounter \"a\"\
    \ in the middle of a word (which would remove it).\n  -- We also do not remove\
    \ a vowel if it is at the end of the word.\n  -- Therefore, the regex \"a(?!a|$)\"\
    \ matches \"a\" only if there is no \"a\" in the text at the end.\n  return text:gsub(\"\
    a(?!a|$)\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5z9ak083.lua:25:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmp5z9ak083.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  if text == '' then\n    return ''\n  end\n  local new_text = text\n  local\
    \ len = #text\n  for i = 1, len do\n    if new_text:sub(i, i) == 'a' then\n  \
    \    new_text:sub(i, i) = ''\n    end\n    if new_text:sub(i, i) == 'e' then\n\
    \      new_text:sub(i, i) = ''\n    end\n    if new_text:sub(i, i) == 'i' then\n\
    \      new_text:sub(i, i) = ''\n    end\n    if new_text:sub(i, i) == 'o' then\n\
    \      new_text:sub(i, i) = ''\n    end\n    if new_text:sub(i, i) == 'u' then\n\
    \      new_text:sub(i, i) = ''\n    end\n    if new_text:sub(i, i) == 'y' then\n\
    \      new_text:sub(i, i) = ''\n    end\n  end\n  return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm7wzjcdv.lua:20: syntax error near '='\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('([aeiou])','') \nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp571t7hbf.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmp571t7hbf.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('([aeiou])', '') -- Replace all vowels by empty string.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjegymx9.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpfjegymx9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local newtext = ''\n  for i=1,#text,1\
    \ do\n    local char = text[i]\n    if string.find(vowels, char) then\n      newtext\
    \ = newtext .. char\n    end\n  end\n  return newtext\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt43kgywy.lua:17:\
    \ bad argument #1 to 'find' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpt43kgywy.lua:17: in local 'candidate'\n\t/tmp/tmpt43kgywy.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub(\"[aeiouAEIOU]\", \"\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  text = string.lower(text)\n  local vowels = {}\n  for i = 1, string.len(text)\
    \ do\n    if string.sub(i, 1, 1) == 'a' or string.sub(i, 1, 1) == 'e' or string.sub(i,\
    \ 1, 1) == 'i' or string.sub(i, 1, 1) == 'o' or string.sub(i, 1, 1) == 'u' then\n\
    \      table.insert(vowels, i)\n    end\n  end\n  for i = 1, string.len(text)\
    \ do\n    if string.sub(i, 1, 1) ~= 'a' and string.sub(i, 1, 1) ~= 'e' and string.sub(i,\
    \ 1, 1) ~= 'i' and string.sub(i, 1, 1) ~= 'o' and string.sub(i, 1, 1) ~= 'u' then\n\
    \      text = text:sub(i-1)..text\n    end\n  end\n  local text = text:gsub('([aeiouAEIOU])',\
    \ function(c)\n    if vowels[#vowels + 1] == string.byte(c) then\n      table.insert(vowels,\
    \ #vowels)\n      return ''\n    end\n    return c\n  end)\n  return text\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = \"aeiouAEIOU\"\n  for i=1,#vowels do\n    text = text:gsub('['..vowels..']','')\n\
    \  end\n  return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[a%s]+' % _vowel, ''):gsub('[%s]' % _vowel, '')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpucdng544.lua:13:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpucdng544.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpucdng544.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  if text:len() == 0 then\n    return text\n  end\n  local i, j, k\n  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  for i = #vowels, 1, -1 do\n    j = text:find(vowels[i],\
    \ 1, false)\n    while j > 0 do\n      k = j:find(\"a\", 1, false)\n      while\
    \ k > 0 do\n        text:sub(k - 1, k) = ''\n        k = j:find(\"a\", k + 1,\
    \ false)\n      end\n      j = text:find(vowels[i], j + 1, false)\n    end\n \
    \ end\n  return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjijztlp_.lua:23: syntax error near '='\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub(\"[aeiou]\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1jgqskl.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpe1jgqskl.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  text = text:gsub('(.)(?=[aeiou])', '')\n  return text:gsub('([aeiou])$', '')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkx6g_tvh.lua:21:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmpkx6g_tvh.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  -- Create a string without vowels\n  local vowels = {}\n  for i = 0, #VOWELS\
    \ do table.insert(vowels, VOWELS[i]) end\n  -- Iterate over the letters checking\
    \ for vowels\n  for i = 1, #text do\n    if vowels[text[i]] ~= nil then\n    \
    \  -- If current letter is a vowel, remove it\n      text = text:sub(i, i-1)\n\
    \    else\n      -- Otherwise, keep letter\n    end\n  end\n  return text\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpup323a8b.lua:15:\
    \ attempt to get length of a nil value (global 'VOWELS')\nstack traceback:\n\t\
    /tmp/tmpup323a8b.lua:15: in local 'candidate'\n\t/tmp/tmpup323a8b.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   return text:gsub(\"[aeiouAEIOU]\", \"\")\nend\nreturn remove_vowels\n</code>\n\
    You can easily make remove_vowels more powerful with some patterns:\n<code>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3iauz1oj.lua:16: unexpected symbol near '/'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  if text == '' then\n    return ''\n  end\n  return text:gsub('([aeiou])', '')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4ysp8y.lua:26:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmp5w4ysp8y.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  -- find and remove all vowels\n  local vowels = {}\n  for i = 1, #text-1 do\n\
    \    local char = text[i]\n    if char:find('[aeiou]') then\n      table.insert(vowels,\
    \ char)\n    end\n  end\n  -- remove them\n  local new_text = ''\n  for i = 1,\
    \ #text do\n    local char = text[i]\n    if string.find(vowels, char) then\n\
    \      new_text = new_text .. char\n    end\n  end\n  -- return the result\n \
    \ return new_text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpopwzk0gt.lua:17:\
    \ attempt to index a nil value (local 'char')\nstack traceback:\n\t/tmp/tmpopwzk0gt.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpopwzk0gt.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub(\"[aeiou]\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yu31gih.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmp1yu31gih.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local new_text = text\n  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'} -- The\
    \ vowels we are to remove\n  for i=1,#vowels do\n    new_text = new_text:gsub(\"\
    [\"..vowels[i]..\"]\", \"\")\n  end\n  return new_text\nend\n</cell>\n<text>\n\
    Task\nWrite a function that finds all the words in a string that contain the word\
    \ \"I\" followed by another vowel (y, i, o, u, or a).\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsx2761q0.lua:20: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub(\"[aeiouAEIOU]\", ''):gsub(\"[^a-zA-Z]\", ''):lower()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj_ny9e0.lua:20:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"bcdfghjklm\"\nstack traceback:\n\t\
    /tmp/tmpyj_ny9e0.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    -- Initialize variables.\n    local textLength = #text\n    local lastChar\
    \ = text:sub(1, 1)\n    local newText = text:sub(1, textLength)\n    local consonants\
    \ = 'bcdfghjklmnpqrstvwxyz'\n    local vowels = 'aeiou'\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpazdhl__h.lua:32: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   if text == '' then return '' end\n   local vowels = {'a','e','i','o','u'}\n\
    \   return text:gsub('[%s]+', function(c)\n      if c == ' ' then return '' end\n\
    \      for _, v in ipairs(vowels) do\n         if c == v then\n            return\
    \ ''\n         end\n      end\n      return c\n   end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprjjwarv9.lua:30:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmprjjwarv9.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local result = \"\"\n  for c in string.gsub(text, \"[aeiou]\", \"\")\n  do\n\
    \    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8bj04auv.lua:14:\
    \ attempt to call a string value\nstack traceback:\n\t/tmp/tmp8bj04auv.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp8bj04auv.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub(\"[aeiouAEIOU]\", '') -- return empty string if there are\
    \ no vowels in string.\nend\n</cell>\n<text>\n6. Create a string remove_vowels\
    \ that removes every vowel from a string and returns a copy of the new string.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb4hgnp9p.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  if text == '' then\n    return ''\n  elseif text == 'aaBAA' then\n    return\
    \ 'B'\n  elseif text == 'zbcd' then\n    return 'zbcd'\n  else\n    return text:gsub('[a\xE1\
    \xE0\xE3\xE2\xE4]', ''):gsub('[e\xE9\xE8\xEA\xEB]', ''):gsub('[i\xED\xEC\xEE\xEF\
    ]', ''):gsub('[o\xF3\xF2\xF5\xF4\xF6]', ''):gsub('[u\xFA\xF9\xFB\xFC]', ''):gsub('[\xE7\
    \xE7]', '')\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8lo4ukt.lua:31:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmph8lo4ukt.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = string.rep('aeiou', string.len(text))\n    return string.gsub(text,\
    \ vowels, '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw9u7cbc.lua:21:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmpsw9u7cbc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub(\"[aeiou]\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2ojln4j.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpu2ojln4j.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    if text == nil then\n        return nil\n    end\n    return text:gsub('a',\
    \ ''):gsub('a', ''):gsub('e', ''):gsub('i', ''):gsub('o', ''):gsub('u', '')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5z_bmq.lua:26:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmphi5z_bmq.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  -- empty string returns empty string\n  if not text or #text == 0 then\n  \
    \  return \"\"\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo53vggdf.lua:30: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for\
    \ i = 1, #text do\n        if string.sub( text, i, i +1 ) ~= 'a' then\n      \
    \      text=text:sub(1,i)\n            break\n        end\n    end\n    return\
    \ text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj3tnt0kq.lua:27:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"a\"\nstack traceback:\n\t/tmp/tmpj3tnt0kq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local\
    \ new_text = ''\n  for _, letter in ipairs(text) do\n    if vowels[letter] then\n\
    \      new_text = new_text .. letter\n    end\n  end\n  return new_text\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ayip0sk.lua:27:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"\"\nstack traceback:\n\t/tmp/tmp2ayip0sk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n   return text:gsub(\".\", function(c)\
    \ \n      if vowels[string.byte(c)] ~= nil then\n         return nil\n      else\n\
    \         return c\n      end\n   end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1stcufs.lua:27:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmpi1stcufs.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local len\n    if text == nil or\
    \ text:len() <= 0 then return text end\n    len = text:len()\n    local new_text\
    \ = \"\"\n    local i = 1\n    while i < len do\n        local c = text:sub(i,i)\n\
    \        if c == \"a\" then\n            if new_text:find( \"e\" ) == nil then\n\
    \                new_text = new_text .. \"e\"\n            end\n        elseif\
    \ c == \"e\" then\n            if new_text:find( \"a\" ) == nil then\n       \
    \         new_text = new_text .. \"a\"\n            end\n        elseif c == \"\
    i\" then\n            if new_text:find( \"o\" ) == nil then\n                new_text\
    \ = new_text .. \"o\"\n            end\n        elseif c == \"o\" then\n     \
    \       if new_text:find( \"u\" ) == nil then\n                new_text = new_text\
    \ .. \"u\"\n            end\n        elseif c == \"u\" then\n            if new_text:find(\
    \ \"o\" ) == nil then\n                new_text = new_text .. \"o\"\n        \
    \    end\n        elseif c == \"y\" then\n            if new_text:find( \"a\"\
    \ ) == nil then\n                new_text = new_text .. \"a\"\n            end\n\
    \        else\n            new_text = new_text .. c\n        end\n        i =\
    \ i + 1\n    end\n    new_text = new_text:gsub( \"[aeiouy]\",\"\" ) -- remove\
    \ vowels\n    new_text = new_text:gsub( \"e\",\"\" ) -- remove 'e'\n    new_text\
    \ = new_text:gsub( \"i\",\"\" ) -- remove 'i'\n    new_text = new_text:gsub( \"\
    o\",\"\" ) -- remove 'o'\n    new_text = new_text:gsub( \"u\",\"\" ) -- remove\
    \ 'u'\n    new_text = new_text:gsub( \"ay\",\"\" ) -- remove 'ay'\n    new_text\
    \ = new_text:gsub( \"oy\",\"\" ) -- remove 'oy'\n    new_text = new_text:gsub(\
    \ \"uy\",\"\" ) -- remove 'uy'\n    new_text = new_text:gsub( \"ay\",\"\" ) --\
    \ remove 'ay'\n    new_text = new_text:gsub( \"oy\",\"\" ) -- remove 'oy'\n  \
    \  new_text = new_text:gsub( \"uy\",\"\" ) -- remove 'uy'\n    new_text = new_text:gsub(\
    \ \"ya\",\"\" ) -- remove 'ya'\n    new_text = new_text:gsub( \"oy\",\"\" ) --\
    \ remove 'oy'\n    new_text = new_text:gsub( \"uy\",\"\" ) -- remove 'uy'\n  \
    \  new_text = new_text:gsub( \"ya\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg4npdvtp.lua:64: unfinished string near '\"ya'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local text_new = ''\n    for\
    \ i = 1, #text do\n        if vowels[text[i]:lower()] then\n            table.insert(text_new,\
    \ text[i]:lower())\n        else\n            table.insert(text_new, text[i])\n\
    \        end\n    end\n    return text_new\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprad7iewi.lua:16:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmprad7iewi.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmprad7iewi.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('.[abyz]', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwpg70zs.lua:20:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"cdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmpkwpg70zs.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  text = string.lower(text)\n  text = string.gsub(text, \"[aeiou]\", \"\")\n\
    \  return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bk0eikd.lua:25:\
    \ expected: \"cB\"\nactual: \"cb\"\nstack traceback:\n\t/tmp/tmp9bk0eikd.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuy6j3toz.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpuy6j3toz.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \ttext = text:gsub('[a\xE1\xE0\xE3\xE2\xE4]')\n\ttext = text:gsub('[e\xE9\xE8\xEA\
    \xEB]')\n\ttext = text:gsub('[i\xED\xEC\xEE\xEF]')\n\ttext = text:gsub('[\xF5\xF6\
    \xF2\xF4\xF5]')\n\ttext = text:gsub('[\xEE\xFC\xFB\xF9\xFC\xFF\xF1\xD1\xF1]')\n\
    \ttext = text:gsub('\xDF')\n\ttext = text:gsub('[\xE1\xE0\xE3\xE2\xE4]')\n\ttext\
    \ = text:gsub('[\xE9\xE8\xEA\xEB]')\n\ttext = text:gsub('[\xED\xEC\xEE\xEF]')\n\
    \ttext = text:gsub('[\xF3\xF2\xF4\xF5]')\n\ttext = text:gsub('[\xF4\xF6\xF5]')\n\
    \ttext = text:gsub('[\xFA\xF9\xFC\xFB\xF9\xFC\xFF\xF1\xD1\xF1]')\n\ttext = text:gsub('[\xFB\
    \xFC\xFB\xF9\xFF\xF1\xD1\xF1]')\n\treturn text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp0s0cixb.lua:13:\
    \ bad argument #2 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpp0s0cixb.lua:13: in local 'candidate'\n\t/tmp/tmpp0s0cixb.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  if text:len() == 0 then return '' end\n  return text:gsub('[a\xE0\xE1\xE2\xE3\
    \xE4\xE5]',''):gsub('[\xE4]','a'):gsub('[\xE6]','ae'):gsub('[\xE7]','c'):gsub('[\xE8\
    \xE9\xEA\xEB]','e'):gsub('[\xEC\xED\xEE\xEF]','i'):gsub('[\xF2\xF3\xF4\xF5\xF6\
    ]','o'):gsub('[\xF9\xFA\xFB\xFC]','u'):gsub('[\xFD\xFF]','y'):gsub('[\xC0\xC1\xC2\
    \xC3\xC4\xC5]','A'):gsub('[\xC8\xC9\xCA\xCB]','E'):gsub('[\xCC\xCD\xCE\xCF]','I'):gsub('[\xD2\
    \xD3\xD4\xD5\xD6]','O'):gsub('[\xD9\xDA\xDB\xDC]','U'):gsub('[\xDD\u0178]','Y'):gsub('[\xD9\
    \xDA\xDB\xDC\u0178]','Y')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpocry21ny.lua:21:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"bcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmpocry21ny.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   if text ~= '' and text ~= '...' then -- only '...' is not removed from string\n\
    \      local new_text = text:gsub(\"[aeiou]\", \"\")\n      return new_text\n\
    \   end\n   return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1ynw0pc.lua:27:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmph1ynw0pc.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  -- Remove all vowels.\n  text = text:gsub('[aeiou]', '')\n  -- Remove all spaces\
    \ between words.\n  text = text:gsub('%s+', string.upper)\n  -- Convert to lower\
    \ case.\n  text = text:gsub('[%s]+', string.lower)\n  -- Strip leading and trailing\
    \ spaces.\n  text = text:gsub('^(%s+)+', string.upper)\n  -- Strip leading and\
    \ trailing spaces.\n  text = text:gsub('(%s+)+$', string.upper)\n  -- Strip spaces\
    \ at beginning and end of string.\n  text = text:gsub('^%s+', '')\n  text = text:gsub('%s+$',\
    \ '')\n  return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9sb5edf.lua:36:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpr9sb5edf.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = 'aAeEiIoOuU'\n    local stripped_text = text:gsub('[' .. vowels\
    \ .. ']', '')\n    return stripped_text\nend\n</code>\n<|/ a |>\n<| c |>\nThank\
    \ you for your answer! I really appreciate it! I have a small doubt, could you\
    \ please tell me how can I add the code I have written in the question to it?\
    \ I mean I want the code to have some additional code at the end and I want the\
    \ function to remove vowels from the input string. I have written the following\
    \ code:\n<|/ c |>\n<| c |>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwxjpkkxs.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   if text == nil or text == '' or text ~= text:upper() then\n      return nil\n\
    \   end\n   text = text:upper()\n   local vowels = 'a\xE0\xE1\xE2\xE4\xE5\xE6\u0101\
    \u0103\u0105\u01CE\u01DF\u01E1\u01FB\u01FC\u0201\u0203\u0227\u0235'\n   local\
    \ vowel_counter = 0\n   for i = 1,#text do\n      if string.find(vowels, text[i])\
    \ then\n         text = text:sub(1,i)\n         vowel_counter = vowel_counter\
    \ + 1\n      end\n   end\n   if vowel_counter > 0 then\n      return text\n  \
    \ end\n   return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ovew1aa.lua:34:\
    \ expected: \"\"\nactual: nil\nstack traceback:\n\t/tmp/tmp4ovew1aa.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  if text == '' then\n    return ''\n  elseif text:sub(1,1) ~= '' then\n    return\
    \ text\n  else\n    return text:sub(1,1):gsub('aeiou', ''):gsub(\n    '[aeiouyAEIOUY]',\
    \ '')\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudv36iq4.lua:27:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmpudv36iq4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  text = text:gsub(\"[aeiou]\", \"\")\n  return text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgn0nkbi.lua:24:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmprgn0nkbi.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   text = text:gsub('[aA]', '')\n   text = text:gsub('[zZ]', '')\n   text = text:gsub('[Zz]',\
    \ '')\n   text = text:gsub('[bB]', '')\n   text = text:gsub('[Bb]', '')\n   text\
    \ = text:gsub('[cC]', '')\n   text = text:gsub('[Cc]', '')\n   text = text:gsub('[dD]',\
    \ '')\n   text = text:gsub('[Dd]', '')\n   text = text:gsub('[eE]', '')\n   text\
    \ = text:gsub('[Ee]', '')\n   text = text:gsub('[fF]', '')\n   text = text:gsub('[Ff]',\
    \ '')\n   text = text:gsub('[kK]', '')\n   text = text:gsub('[Kk]', '')\n   text\
    \ = text:gsub('[Ll]', '')\n   text = text:gsub('[Ll]', '')\n   text = text:gsub('[Mm]',\
    \ '')\n   text = text:gsub('[Mm]', '')\n   text = text:gsub('[nN]', '')\n   text\
    \ = text:gsub('[nN]', '')\n   text = text:gsub('[Oo]', '')\n   text = text:gsub('[Oo]',\
    \ '')\n   text = text:gsub('[Pp]', '')\n   text = text:gsub('[Pp]', '')\n   text\
    \ = text:gsub('[uU]', '')\n   text = text:gsub('[Uu]', '')\n   text = text:gsub('[rR]',\
    \ '')\n   text = text:gsub('[Rr]', '')\n   text = text:gsub('[Ss]', '')\n   text\
    \ = text:gsub('[Ss]', '')\n   text = text:gsub('[tT]', '')\n   text = text:gsub('[tT]',\
    \ '')\n   text = text:gsub('[Uu]', '')\n   text = text:gsub('[Uu]', '')\n   text\
    \ = text:gsub('[vV]', '')\n   text = text:gsub('[vV]', '')\n   text = text:gsub('[Ww]',\
    \ '')\n   text = text:gsub('[Ww]', '')\n   text = text:gsub('[Yy]', '')\n   text\
    \ = text:gsub('[Yy]', '')\n   text = text:gsub('[Zz]', '')\n   text = text:gsub('[Zz]',\
    \ '')\n   text = text:gsub('[IiI]', '')\n   text = text:gsub('[IiI]', '')\n  \
    \ text = text:gsub('[IiI]', '')\n   text = text:gsub('[IiI]', '')\n   \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp81rc0w8q.lua:74: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   for i = 1, #text do\n      if string.sub( text, i, i + 1 ) ~= 'a' then\n \
    \        return string.sub( text, 1, i )\n      end\n   end\n   return text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjl1cx48g.lua:25:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"a\"\nstack traceback:\n\t/tmp/tmpjl1cx48g.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = string.gsub(\"[aeiou]\", \"\\0\", '')\n    return string.gsub(text,\
    \ \"[\" .. vowels .. \"]\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_dhg2ii.lua:21:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmpm_dhg2ii.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]','')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[a\xE0\xE1\xE2\xE3\xE4\xE5]', '', true)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc8xipso2.lua:13:\
    \ bad argument #3 to 'gsub' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpc8xipso2.lua:13: in local 'candidate'\n\t/tmp/tmpc8xipso2.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub(\"[aeiou]\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwj6bsd9.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpqwj6bsd9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local _alphabet = 'aAeEiIoOuU'\n  local _vowels = ''\n  for i = 1, #text do\n\
    \    if string.find(text, _alphabet[i]) == 1 then\n      _vowels = _vowels + string.sub(text,\
    \ (i - 1), i)\n    end\n  end\n  return _vowels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2x3i07f5.lua:16:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp2x3i07f5.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp2x3i07f5.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqf3ldequ.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpqf3ldequ.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   return text:gsub(\"[aeiouAEIOU]\", \"\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  text = text:gsub('[aeiou]', '')\n  return text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6crtzs9v.lua:24:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmp6crtzs9v.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \t-- remove vowels in text.\n\treturn text:gsub(\"[aeiouAEIOU]\", \"\")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = {'a','e','i','o','u','y'}\n  local text2 = text:gsub(\"[^\"\
    \ .. table.concat(vowels, '') .. \"]+\", \"\")\n  return text2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7pbz6ca.lua:22:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"aei\"\nstack traceback:\n\t/tmp/tmpt7pbz6ca.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  if text == '' then\n    return ''\n  end\n  local vowels = {'a','e','i','o','u'}\n\
    \  local remove_letters = {}\n  for letter in text:gmatch(\"%w\") do\n    local\
    \ remove = not #vowels - #letter\n    if remove ~= 0 then\n      table.insert(remove_letters,\
    \ letter)\n    end\n  end\n  return table.concat(remove_letters, '')\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyeqfenr4.lua:19:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpyeqfenr4.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpyeqfenr4.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   return text:gsub('[aeiou]','')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5ib6_mw.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpb5ib6_mw.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  -- return text without vowels\n  -- e.g. 'abaca' -> 'bcda'\n  -- or ''\n  --\
    \ e.g. 'aaBAA' -> ''\n  -- or ''\n  if text == '' then\n    return ''\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt_gc4u3f.lua:34: 'end' expected (to close 'function' at line\
    \ 12) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    if text:len() == 1 then\n        return ''\n    end\n    return text:gsub(\"\
    [aeiouAEIOU]\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local text_without_vowels = ''\n  for i = 1, #text do\n    if string.sub( text[i],\
    \ 1, 1 ) ~= 'a' and  string.sub( text[i], 1, 1 ) ~= 'e' and \n        string.sub(\
    \ text[i], 1, 1 ) ~= 'i' and string.sub( text[i], 1, 1 ) ~= 'o' and\n        string.sub(\
    \ text[i], 1, 1 ) ~= 'u' then\n      text_without_vowels = text_without_vowels\
    \ .. string.sub( text[i], 1, 1 )\n    end\n  end\n  return text_without_vowels\n\
    end\n</cell>\n<text>\nThe last function of the file is the remove_multiple_spaces\
    \ function. Its purpose is to remove multiple spaces from a given string.\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3iqo1x2p.lua:23: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local result = ''\n  local pattern = '[aeiouAEIOU]'\n  for i,v in ipairs(text)\
    \ do\n    local pattern = pattern:gsub('%1', function(_)\n      return string.format('[%s]',\
    \ v:lower())\n    end)\n    result = result .. v\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqu2lp0_i.lua:28:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"\"\nstack traceback:\n\t/tmp/tmpqu2lp0_i.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   return text:gsub('[aeiou]','')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2acg867j.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmp2acg867j.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   if text == '' then\n      return ''\n   end\n   for i = 1, #text do\n    \
    \  if string.sub(text, i, i+1) == 'a' then\n         text = text:sub(i, i)\n \
    \        break\n      end\n   end\n   if #text > 0 then\n      return text\n \
    \  else\n      return ''\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzump87or.lua:33:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmpzump87or.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  if text == '' then return '' end\n  local vowels = {'a','e','i','o','u'}\n\
    \  text = text:gsub('[%s]' % table.concat(vowels, '|'), '')\n  return text\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxi4ewe0j.lua:15:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpxi4ewe0j.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpxi4ewe0j.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[a\xE0\xE1\xE2\xE3\xE4\xE5]', ''):gsub('[\xE8\xE9\xEA\xEB\
    ]', ''):gsub('[\xEC\xED\xEE\xEF]', ''):gsub('[\xF2\xF3\xF4\xF5\xF6]', ''):gsub('[\xF9\
    \xFA\xFB\xFC]', ''):gsub('[\xF1\xD1]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad1x4qk1.lua:20:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"bcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmpad1x4qk1.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = text\n    for\
    \ index, letter in pairs(text) do\n        local i = 1\n        while i <= #vowels\
    \ do\n            if letter == vowels[i] then\n                table.insert(result,\
    \ letter)\n            else\n                i = i + 1\n            end\n    \
    \    end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpffcoavmu.lua:15:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpffcoavmu.lua:15: in local 'candidate'\n\t/tmp/tmpffcoavmu.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = {'a', 'e', 'o', 'i', 'u'}\n  local text1 = text\n  text = text:gsub('[AEIOU]',\
    \ '', 1, 1)\n  if text ~= '' then\n    text1 = text1..'z'\n  end\n  text = text:gsub('[AEIOU]',\
    \ '', 1, 1)\n  if text ~= '' then\n    text1 = text1..'z'\n  end\n  text = text:gsub('[AEIOU]',\
    \ '', 1, 1)\n  if text ~= '' then\n    text1 = text1..'z'\n  end\n  text = text:gsub('[AEIOU]',\
    \ '', 1, 1)\n  if text ~= '' then\n    text1 = text1..'z'\n  end\n  return text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso30z24q.lua:38:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmpso30z24q.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local new_text = text\n    new_text:gsub('([a-z])([AEIOUYaeiou])','%1%2')\n\
    \    new_text:gsub('([aeiou])([A-Z])','%1%2')\n    new_text:gsub('([aeiou])([aeiou])','%1%2')\n\
    \    new_text:gsub('([aeiou])([a-zA-Z])','%1%2')\n    new_text:gsub('([a-zA-Z])([AEIOUYaeiou])','%1%2')\n\
    \    new_text:gsub('([a-zA-Z])([aeiou])([A-Z])','%1%2')\n    new_text:gsub('([a-zA-Z])([aeiou])([a-zA-Z])','%1%2')\n\
    \    return new_text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiuvccyx.lua:28:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmphiuvccyx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = 'aeiou'\n  for i = 0, #text - 1, 1 do\n    if string.sub(text,\
    \ i, i + 1) ~= '' then\n      for j = 1, #vowels, 1 do\n        if string.sub(text,\
    \ i + j, i + j + 1) ~= vowels[j] then\n          text = text:sub(i, i + j + 1)\n\
    \          break -- we found the single vowel\n        end\n      end\n    end\n\
    \  end\n  return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqy3eu26_.lua:31:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"b\"\nstack traceback:\n\t/tmp/tmpqy3eu26_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local new_text = ''\n  for letter in text:gmatch('%a') do\n    new_text = new_text\
    \ .. letter\n  end\n  return new_text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74wb1u_a.lua:24:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdefghijklm\"\nstack traceback:\n\
    \t/tmp/tmp74wb1u_a.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local text = text:gsub('([a-z])([a-z])([a-z])',\
    \ '\\1\\2\\3'):gsub('([a-z])([A-Z])', '\\1\\2'):gsub('([A-Z])([a-z])', '\\1\\\
    2')\n    local text = text:gsub('([a-z])([a-z])([a-z])', '\\1\\2\\3'):gsub('([a-z])([A-Z])',\
    \ '\\1\\2'):gsub('([A-Z])([a-z])', '\\1\\2')\n    local text = text:gsub('([a-z])([A-Z])([A-Z])',\
    \ '\\1\\2\\3'):gsub('([A-Z])([A-Z])([A-Z])', '\\1\\2\\3')\n    local text = text:gsub('([a-z])([A-Z])([a-z])',\
    \ '\\1\\2\\3'):gsub('([A-Z])([A-Z])([A-Z])', '\\1\\2\\3')\n    local text = text:gsub('([a-z])([A-Z])([A-Z])',\
    \ '\\1\\2\\3')\n    local text = text:gsub('([a-z])([A-Z])([a-z])', '\\1\\2\\\
    3')\n    local text = text:gsub('([A-Z])([A-Z])([A-Z])', '\\1\\2\\3'):gsub('([A-Z])([A-Z])([A-Z])',\
    \ '\\1\\2\\3')\n    local text = text:gsub('([A-Z])([A-Z])([A-Z])', '\\1\\2\\\
    3')\n    local text = text:gsub('([A-Z])([A-Z])([A-Z])', '\\1\\2\\3')\n    return\
    \ text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbbliq92.lua:30:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"\x01\x02\x03\x01\x02\x03\n\x01\x02\
    \x03\x01\x02\x03m\"\nstack traceback:\n\t/tmp/tmptbbliq92.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = 'a'..'z'\n  -- Find all vowels in the text\n  -- Replace them\
    \ with empty string\n  -- Return a string without the vowels\n  return text:gsub(vowels,\
    \ \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjmibk2o.lua:24:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmpsjmibk2o.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[^aeiou]', '')\nend\nremove_vowels = remove_vowels\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5fn96uih.lua:21:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"aei\"\nstack traceback:\n\t/tmp/tmp5fn96uih.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \tlocal result = text\n\tlocal vowels = 'aeiouAEIOU'\n\tfor _, c in pairs(vowels)\
    \ do\n\t\tresult = result:gsub(c, '')\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7v1med6v.lua:15:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp7v1med6v.lua:15: in local 'candidate'\n\t/tmp/tmp7v1med6v.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  text = text:gsub('a','')\n  text = text:gsub('e','')\n  text = text:gsub('i','')\n\
    \  text = text:gsub('o','')\n  text = text:gsub('u','')\n  text = text:gsub('Y','')\n\
    \  return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ctz1lg5.lua:29:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmp0ctz1lg5.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    if text == nil then\n        return 'nil'\n    end\n    local vowels = {}\n\
    \    local new_text = text\n    for letter in text:gmatch('[%a%u]+') do\n    \
    \    table.insert(vowels, letter)\n    end\n    for i=1,#vowels do\n        new_text\
    \ = new_text:gsub('['..vowels[i-1]..letter..']', '')\n    end\n    return new_text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1rapusty.lua:22:\
    \ attempt to concatenate a nil value (global 'letter')\nstack traceback:\n\t/tmp/tmp1rapusty.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp1rapusty.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('([aeiou])',''):gsub('[^' .. string.lower(string.sub('aeiou',1,5))\
    \ .. ']','')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprcvaf5l7.lua:20:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"\"\nstack traceback:\n\t/tmp/tmprcvaf5l7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local function remove_a_vowel(word)\n    local vowels = {'a', 'A', 'e', 'E',\
    \ 'i', 'I', 'o', 'O', 'u', 'U'}\n    local vowels_re = table.concat(vowels, '|')\n\
    \    local vowels_re2 = table.concat(vowels, '|', '\\\\')\n    local vowels_re3\
    \ = table.concat(vowels, '|', '\\\\\\\\')\n    local vowels_re4 = table.concat(vowels,\
    \ '|', '\\\\', '\\\\\\\\')\n    local vowels_re5 = table.concat(vowels, '|', '\\\
    \\\\\\', '\\\\\\\\')\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpunbswjfn.lua:33: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  text = text:gsub('a', '')\n  text = text:gsub('e', '') \n  text = text:gsub('i',\
    \ '')\n  text = text:gsub('o', '')\n  text = text:gsub('u', '')\n  text = text:gsub('y',\
    \ '')\n  text = text:gsub('\xE1', '')\n  text = text:gsub('\xE9', '')\n  text\
    \ = text:gsub('\xED', '')\n  text = text:gsub('\xF3', '')\n  text = text:gsub('\xFA\
    ', '')\n  text = text:gsub('\xE0', '')\n  text = text:gsub('\xE8', '')\n  text\
    \ = text:gsub('\xEC', '')\n  text = text:gsub('\xF2', '')\n  text = text:gsub('\xF9\
    ', '')\n  text = text:gsub('\xEC', '')\n  text = text:gsub('\xF2', '')\n  text\
    \ = text:gsub('\xF9', '')\n  text = text:gsub('\xED', '')\n  text = text:gsub('\xF3\
    ', '')\n  text = text:gsub('\xFA', '')\n  text = text:gsub('\xF2', '')\n  text\
    \ = text:gsub('\xED', '')\n  text = text:gsub('\xF3', '')\n  text = text:gsub('\xFA\
    ', '')\n  text = text:gsub('\xE0', '')\n  text = text:gsub('\xE8', '')\n  text\
    \ = text:gsub('\xEC', '')\n  text = text:gsub('\xF2', '')\n  text = text:gsub('\xF9\
    ', '')\n  text = text:gsub('\xEC', '')\n  text = text:gsub('\xF2', '')\n  text\
    \ = text:gsub('\xED', '')\n  text = text:gsub('\xF3', '')\n  text = text:gsub('\xFA\
    ', '')\n  text = text:gsub('\xED', '')\n  text = text:gsub('\xF3', '')\n  text\
    \ = text:gsub('\xFA', '')\n  text = text:gsub('\xED', '')\n  text = text:gsub('\xF3\
    ', '')\n  text = text:gsub('\xFA', '')\n  text = text:gsub('\xED', '')\n  text\
    \ = text:gsub('\xF3', '')\n  text = text:gsub('\xFA', '')\n  text = text:gsub('\xE0\
    ', '')\n  text = text:gsub('\xE8', '')\n  text = text:gsub('\xEC', '')\n  text\
    \ = text:gsub('\xF2', '')\n  text = text:gsub('\xF9', '')\n  text = text:gsub('\xEC\
    ', '')\n  text = text:gsub('\xF2', '')\n  text = text:gsub('\xED', '')\n  text\
    \ = text:gsub('\xF3', '')\n  text = text:gsub('\xFA\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1usyhesr.lua:67: unfinished string near ''\xFA'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    if text == '' or text == 'zbczbczbczbc' then return '' end\n    text = text:lower()\n\
    \    local vowels = {'a', 'e', 'o', 'u'}\n    local t = text\n    local r = ''\n\
    \    for i = 1, #vowels do\n        local s = t:find(vowels[i])\n        if s\
    \ == nil then\n            s = t\n        end\n        t = t:sub(s + 1)\n    \
    \    r = r..t\n    end\n    return r:sub(1)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqyhl30lu.lua:23:\
    \ attempt to perform arithmetic on a string value (local 's')\nstack traceback:\n\
    \t/tmp/tmpqyhl30lu.lua:23: in local 'candidate'\n\t/tmp/tmpqyhl30lu.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local result = text\n  for\
    \ i = 1, #text do\n    for j = 1, #vowels do\n      if text[i] == vowels[j] then\n\
    \        result = result:sub(1, #result)\n        break\n      end\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_vfc_kf.lua:30:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmpb_vfc_kf.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = 'aeiouAEIOU'\n    local new_text = text\n    for _, character\
    \ in text:gmatch'([%a])' do\n        new_text = new_text:gsub('%a'..vowels{gsub('%z','','g'):sub(3)},'')\n\
    \    end\n    return new_text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl6_p7qzx.lua:16:\
    \ attempt to call a nil value (global 'gsub')\nstack traceback:\n\t/tmp/tmpl6_p7qzx.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpl6_p7qzx.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('([%a\xE1\xE0\xE3\xE2\xE4\xE6\xE3\xE5\u0105\u0101\u0103\u0105\
    \u0301\u0301\u0142\u0142\u0144\u0148\u0146\u014B\u0104\u0118\u0106\u0107\u010B\
    \u010D\xE7\u0107\u0119\u0301\u0301\u0303\u0303\u0303\u0305\u0305\u0308\u0308\u0301\
    \u0309\u0309\u0309\u0309\u0313\u0313\u0314\u0314\u0315\u0315\u0316\u0317\u0318\
    \u0319\u031A\u0355\u0356\u0358\u0359\u035A\u035C\u035D\u035E\u035F\u0360M\u0324\
    \u0325\u0326\u0327\u0328\u0329\u0367\u0368\u0369\u036A\u036B\u036C\u036D\u036E\
    \u036F\u031C\u031D\u0366\u0323\u0322\u0323\u0324\u0325\u0326\u0327\u0328\u0329\
    \u0367\u0368\u0369\u036A\u036B\u036C\u036D\u036E\u036F\u031C\u031D\u0366\u0323\
    \u0322\u0323\u0324\u0325\u0326\u0327\u0328\u0329\u0367\u0368\u0369\u036A\u036B\
    \u036C\u036D\u036E\u036F\u031C\u031D\u0366\u0323\u0322\u0323\u0324\u0325\u0326\
    \u0327\u0328\u0329\u0367\u0368\u0369\u036A\u036B\u036C\u036D\u036E\u036F\u031C\
    \u031D\u0366\u0323\u0322\u0323\u0324\u0325\u0326\u0327\u0328\u0329\u0367\u0368\
    \u0369\u036A\u036B\u036C\u036D\u036E\u036F\u031C\u031D\u0366\u0323\u0322\u0323\
    \u0324\u0325\u0326\u0327\u0328\u0329\u0367\u0368\u0369\u036A\u036B\u036C\u036D\
    \u036E\u036F\u031C\u031D\u0366\u0323\u0322\u0323\u0324\u0325\u0326\u0327\u0328\
    \u0329\u0367\u0368\u0369\u036A\u036B\u036C\u036D\u036E\u036F\u031C\u031D\u0366\
    \u0323\u0322\u0323\u0324\u0325\u0326\u0327\u0328\u0329\u0367\u0368\u0369\u036A\
    \u036B\u036C\u036D\u036E\u036F\u031C\u031D\u0366\u0323\u0322\u0323\u0324\u0325\
    \u0326\u0327\u0328\u0329\u0367\u0368\u0369\u036A\u036B\u036C\u036D\u036E\u036F\
    \u031C\u031D\u0366\u0323\u0322\u0323\u0324\u0325\u0326\u0327\u0328\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn3w_0oqy.lua:13: unfinished string near ''([%a\xE1\xE0\xE3\
    \xE2\xE4\xE6\xE3\xE5\u0105\u0101\u0103\u0105\u0301\u0301\u0142\u0142\u0144\u0148\
    \u0146\u014B\u0104\u0118\u0106\u0107\u010B\u010D\xE7\u0107\u0119\u0301\u0301\u0303\
    \u0303\u0303\u0305\u0305\u0308\u0308\u0301\u0309\u0309\u0309\u0309\u0313\u0313\
    \u0314\u0314\u0315\u0315\u0316\u0317\u0318\u0319\u031A\u0355\u0356\u0358\u0359\
    \u035A\u035C\u035D\u035E\u035F\u0360M\u0324\u0325\u0326\u0327\u0328\u0329\u0367\
    \u0368\u0369\u036A\u036B\u036C\u036D\u036E\u036F\u031C\u031D\u0366\u0323\u0322\
    \u0323\u0324\u0325\u0326\u0327\u0328\u0329\u0367\u0368\u0369\u036A\u036B\u036C\
    \u036D\u036E\u036F\u031C\u031D\u0366\u0323\u0322\u0323\u0324\u0325\u0326\u0327\
    \u0328\u0329\u0367\u0368\u0369\u036A\u036B\u036C\u036D\u036E\u036F\u031C\u031D\
    \u0366\u0323\u0322\u0323\u0324\u0325\u0326\u0327\u0328\u0329\u0367\u0368\u0369\
    \u036A\u036B\u036C\u036D\u036E\u036F\u031C\u031D\u0366\u0323\u0322\u0323\u0324\
    \u0325\u0326\u0327\u0328\u0329\u0367\u0368\u0369\u036A\u036B\u036C\u036D\u036E\
    \u036F\u031C\u031D\u0366\u0323\u0322\u0323\u0324\u0325\u0326\u0327\u0328\u0329\
    \u0367\u0368\u0369\u036A\u036B\u036C\u036D\u036E\u036F\u031C\u031D\u0366\u0323\
    \u0322\u0323\u0324\u0325\u0326\u0327\u0328\u0329\u0367\u0368\u0369\u036A\u036B\
    \u036C\u036D\u036E\u036F\u031C\u031D\u0366\u0323\u0322\u0323\u0324\u0325\u0326\
    \u0327\u0328\u0329\u0367\u0368\u0369\u036A\u036B\u036C\u036D\u036E\u036F\u031C\
    \u031D\u0366\u0323\u0322\u0323\u0324\u0325\u0326\u0327\u0328\u0329\u0367\u0368\
    \u0369\u036A\u036B\u036C\u036D\u036E\u036F\u031C\u031D\u0366\u0323\u0322\u0323\
    \u0324\u0325\u0326\u0327\u0328'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('([aeiou])', function()\n    return ' ' end):gsub('^ ', ''):gsub('\
    \ $', '')\n  end):gsub(' +$', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm2p5j58v.lua:15: unexpected symbol near ')'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local remove_vowels_re = \"[aeiouy]\"\n    local text = text:gsub(remove_vowels_re,\
    \ '') -- removing all vowels from the string\n    \n    local vowels = \"aeiouy\"\
    \ -- vowels is a global variable that contains vowels in the string\n    local\
    \ text = text:gsub(vowels, '') -- removing all vowels from the string\n    \n\
    \    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyk1b97z7.lua:29:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpyk1b97z7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  text = text:gsub(\"[aeiouAEIOU]\", \"\")\n  return text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local has_vowel, i = 1, 1\n    text:gsub('([aeiou])', function(c)\n     \
    \   if c == string.sub(\"aeiou\", i, i) then\n            has_vowel = has_vowel\
    \ + 1 -- increment count of vowels.\n            i = i + 2 -- skip next vowel.\n\
    \        else\n            i = i + 1 -- increment the position.\n        end\n\
    \    end)\n    return has_vowel and text:gsub('([' .. string.sub(table.concat({string.byte(\"\
    aeiou\")}, 1), i - 1, i - 1) .. '])', function(c) return string.sub(\"aeiou\"\
    , i - 1, i - 1) end) or text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkw06qr7e.lua:22:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpkw06qr7e.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpkw06qr7e.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return string.gsub(text, \"[aeiouAEIOU]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  if text == '' then\n    return ''\n  end\n  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local new_text = text:gsub('[%s]+' % table.concat(vowels,\
    \ ''):lower())\n  return new_text:gsub('%s+$' % '[%w]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnsvg8l03.lua:17:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpnsvg8l03.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpnsvg8l03.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  if text == '' then return '' end\n  local chars = text:gsub(\"[aeiouAEIOU]\"\
    , \"\")\n  return chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebl1f5nl.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpebl1f5nl.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_vovfmq.lua:23:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpn_vovfmq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub(\"[aeiouAEIOU]\", \"\"):gsub(\"^\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   return text:gsub('([%s])' % string.char(97), ''):gsub('([%s])' % string.char(65),\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx5kf_a3b.lua:13:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpx5kf_a3b.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpx5kf_a3b.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('([^aeiouAEIOU])', '')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9djwf_8.lua:20:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"aei\"\nstack traceback:\n\t/tmp/tmph9djwf_8.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('(%a+)([^a])', \"%1\"):gsub(\"%1[aeiou]\", function (c)\
    \ return c:lower() end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphb4lddv5.lua:13:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmphb4lddv5.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmphb4lddv5.lua:19: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  text = text:gsub('[aA-zZ]', '')\n  text = text:gsub('[^%s]', '')\n  return\
    \ text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2vshwigl.lua:22:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"\n\"\nstack traceback:\n\t/tmp/tmp2vshwigl.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local s = text:gsub(\"[aeiouAEIOU]\", \"\")\n    if #s <= 0 then\n      \
    \  return text\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_xsm4up.lua:26:\
    \ expected: \"\"\nactual: \"eeeee\"\nstack traceback:\n\t/tmp/tmpt_xsm4up.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local newText = text:gsub('[a\xE0\xE1]', '')\n  newText = newText:gsub('[e\xE8\
    \xE9]', '')\n  newText = newText:gsub('[i\xEC\xED]', '')\n  newText = newText:gsub('[o\xF2\
    \xF3]', '')\n  newText = newText:gsub('[u\xF9\xFA]', '')\n  newText = newText:gsub('[\xE0\
    \xE1]', '')\n  newText = newText:gsub('[\xE8\xE9]', '')\n  newText = newText:gsub('[\xEC\
    \xED]', '')\n  newText = newText:gsub('[\xF2\xF3]', '')\n  newText = newText:gsub('[\xF9\
    \xFA]', '')\n  newText = newText:gsub('[\xF2\xF5\xF3]', '')\n  newText = newText:gsub('[\xF5\
    \xF4\xFA]', '')\n  newText = newText:gsub('[\xE7\xC7]', '')\n  newText = newText:gsub('[\xF1\
    \xD1]', '')\n  return newText\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqgq5f2jx.lua:37:\
    \ expected: \"cB\"\nactual: \"cBAA\"\nstack traceback:\n\t/tmp/tmpqgq5f2jx.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local function is_vowel(c)\n    return string.format(\"%c\", c) ~= \"%c\" or\n\
    \      (string.format(\"%c\", c) ~= \"%c\" and\n       (c ~= 'a' or c ~= 'e' or\
    \ c ~= 'i' or c ~= 'o' or c ~= 'u') or\n       (c ~= 'A' or c ~= 'E' or c ~= 'I'\
    \ or c ~= 'O' or c ~= 'U'))\n  end\n  return text:gsub(function() return (string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \    string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \      string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \        string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \          string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \            string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n  \
    \            string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                  string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                    string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                      string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                        string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                          string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                            string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                              string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                  string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                    string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                      string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                        string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                          string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                            string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                              string.gsub(string.gsub(string.gsub(string.gsub(\n\
    \                                                string.gsub(string.gsub(string.gsub(string.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_qm6tnz2.lua:43: ')' expected (to close '(' at line 42) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local function is_vowel(c)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    return vowels[c] ~= nil\n  end\n  local new_text = ''\n  for i = 1, #text,\
    \ 1 do\n    if is_vowel(text[i]) then\n      new_text = new_text .. text[i]\n\
    \    elseif text[i] == 'z' and i < #text then\n      new_text = new_text .. text[i\
    \ + 1]\n    end\n  end\n  return new_text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9yko0ct.lua:32:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"\"\nstack traceback:\n\t/tmp/tmpb9yko0ct.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  if text == nil then\n    return text\n  elseif text == '' then\n    return\
    \ text\n  else\n    return text:gsub('([aeiouy])','%1')\n  end\nend\nreturn remove_vowels\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp57pyyikh.lua:22: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \   text = text:gsub('a', ''):gsub('e', '')\n   return text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcltlfk11.lua:21:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"bcdf\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmpcltlfk11.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  -- A one-liner using the filter function!\n  return text:gsub(\"[aeiou]\",\
    \ \"\"):gsub(\"^$\", \"\")\nend\n</code>\nThe gsub function replaces all occurrences\
    \ of a pattern with its replacement.  So this line replaces all occurrences of\
    \ the vowels 'a' and 'e' with nothing:\n<code>\ntext:gsub(\"[aeiou]\", \"\")\n\
    </code>\nBut this line replaces beginning and ending whitespace with nothing:\n\
    <code>\ntext:gsub(\"^$\", \"\")\n</code>\nFinally, gsub return nil if there are\
    \ no matches.  Therefore, the following line is the equivalent of \"if text is\
    \ nil, return an empty string\":\n<code>\ntext:gsub(\"^$\", \"\")\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\n+1 Nice answer (except for the fact that `string` is\
    \ not a built-in function).\n<|/ c |>\n<| a dscore=1 tags=lua-patterns,string,lua\
    \ |>\nI know this is an old thread, but for someone looking at this in the future,\
    \ I was able to use this code to solve a problem similar to this one.\n<code>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn7u5g5fg.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[%s%s]+',''):gsub('[%s%s]+$','')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdr452hb6.lua:20:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdefghijklm\"\nstack traceback:\n\
    \t/tmp/tmpdr452hb6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub(\"([aeiouAEIOU])\", \"\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \ttext = text:lower()\n\tlocal vowels = {\n\t\t[\"a\"] = true,\n\t\t[\"e\"] =\
    \ true,\n\t\t[\"i\"] = true,\n\t\t[\"o\"] = true,\n\t\t[\"u\"] = true,\n\t\t[\"\
    y\"] = true,\n\t}\n\tfor i,c in ipairs(text) do\n\t\tif vowels[c] then\n\t\t\t\
    text:gsub('['..c..'uy]','')\n\t\tend\n\tend\n\treturn text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp450d3ss6.lua:34:\
    \ expected: \n\"bcdf\nghjklm\"\nactual: \n\"abcdef\nghijklm\"\nstack traceback:\n\
    \t/tmp/tmp450d3ss6.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
