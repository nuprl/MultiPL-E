name: HumanEval_146_specialFilter
language: lua
prompt: "-- Write a function that takes an array of numbers as input and returns \n\
  -- the number of elements in the array that are greater than 10 and both \n-- first\
  \ and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- specialFilter([15,\
  \ -73, 14, -15]) => 1 \n-- specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlocal\
  \ function specialFilter(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
  \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
  \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
  \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
  \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  for i = 1, #nums do\n    if nums[i] > 10 then\n      if nums[i] %\
    \ 2 ~= 0 then \n        nums[i] = nil\n      end\n    end\n  end\n  return #nums\n\
    end", "    local len = 1\n    local i = 0\n    while i < #nums do\n        if\
    \ nums[i]>10 then\n            if nums[i]%2==1 then\n                len = len+1\n\
    \            end\n            if nums[i]%2==0 then\n                if nums[i]%10==1\
    \ then\n                    len = len+1\n                end\n               \
    \ if nums[i]%10==0 then\n                    len = len+1\n                end\n\
    \            end\n        end\n        i = i+1\n    end\n    return len\nend",
  "  local n = 1\n  for i = 1, #nums do\n    if nums[i] > 10 then\n      if nums[i]\
    \ ~= math.floor(nums[i]) then\n        if nums[i] - math.floor(nums[i]) ~= (nums[i]\
    \ - nums[i - 1]) ~= (nums[i] * nums[i - 1]) then\n          n = n + 1\n      \
    \  end\n      end\n    end\n  end\n  return n\nend", "  -- Initialize counter\
    \ to 0\n  local count = 0", "    local count = nums[1]\n    for _, num in ipairs(nums[#nums])\
    \ do\n        if num > 10 and (math.floor(math.log10(num))%2 ~= 0 and math.floor(math.log10(num))%2\
    \ ~= 1) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "  local sum = 0\n  for _, num in pairs(nums) do \n    if num >\
    \ 10 then\n      sum = sum + 1 \n      if num and (num % 2 == 1 and num % 4 !=\
    \ 1 or num % 2 != 1 and num % 4 != 1) then\n        sum = sum + 1 \n      end\n\
    \    end\n  end\n  return sum\nend\n</cell>\n<text>\nPractice 1\nWrite a function\
    \ that takes two arrays as input. The function should return a new array with\
    \ all the elements of arr1 that are in arr2 and not arr3.", "  local count = 1\n\
    \  for i=1,#nums do\n    if nums[i] > 10 then\n      count = count + 1\n     \
    \ if nums[i] % 2 == 1 then\n        count = count + 1\n      end\n      if nums[i]\
    \ % 2 ~= 0 then\n        count = count + 1\n      end\n    end\n  end\n  return\
    \ count\nend", "   local count = 0\n   for _,num in ipairs(nums) do\n      --\
    \ if number is greater than 10\n      if num > 10 then\n         -- find first\
    \ and last odd digit\n         local firstOdd = math.floor((math.floor(num/10)\
    \ % 10))\n         local lastOdd = math.floor((num % 10))\n         -- only add\
    \ odd digits to count\n         if lastOdd % 2 ~= 0 then\n            count =\
    \ count + 1\n         end\n      end\n   end\n   return count\nend", "  local\
    \ numsCount = #nums \n  local numsSum = 0\n  local sum = 0\n  local numsOdd =\
    \ 0\n  local oddDigits = 0\n  local numsFirstOdd = 0\n  local firstOddDigits =\
    \ 0\n  local numsLastOdd = 0\n  local lastOddDigits = 0", "\tlocal count = 0\n\
    \tfor _, num in ipairs(nums) do\n\t\tif num > 10 then\n\t\t\tif num % 2 == 0 then\n\
    \t\t\t\tcount = count + 1\n\t\t\t\tif num / 10 % 2 == 1 then\n\t\t\t\t\tcount\
    \ = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "\t\
    local count = 0\n\tfor index, num in pairs(nums) do\n\t\tif num > 10 then\n\t\t\
    \tif num > 1000 and (num % 10 == 1 or num % 10 == 3) and num % 100 == 1 or num\
    \ % 100 == 3 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ count\nend", "  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 10\
    \ then\n      count = count + 1\n      if nums[i] % 2 == 0 and nums[i-1] % 2 ==\
    \ 0 then\n        count = count + 1\n      end\n    end\n  end\n  return count\n\
    end", "    local count = 0\n    for _, num in ipairs(nums) do\n        if num\
    \ > 10 then\n            if num % 2 == 1 and (num / 10 % 2) == 1 then\n      \
    \          count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "  local count = 0\n  for i, v in ipairs(nums) do\n    if v > 10\
    \ and  v mod 2 == 1 and  v mod 2 == 1 then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    local total = 0\n    \n    for i = 1, #nums\
    \ do\n        if nums[i] > 10 then\n            if nums[i] % 2 == 0 and nums[i]\
    \ % 2 ~= 0 then\n                total = total + 1\n            end\n        end\n\
    \    end\n    \n    return total\nend", "  local result = 1\n  for i = 1, #nums\
    \ do\n    if nums[i] > 10 then\n      if nums[i] % 2 == 1 then\n        if nums[i]\
    \ + nums[i-1] % 2 == 1 then\n          result = result + 1\n        end\n    \
    \  end\n    end\n  end\n  return result\nend", "    local n = 0\n    for _,v in\
    \ ipairs(nums) do\n        if v > 10 then\n            n = n + 1\n           \
    \ if ((v mod 2) = 0 and ((v mod 5) or 0 == (v mod 5))) then\n                n\
    \ = n + 1\n            end\n        end\n    end\n    return n\nend", "    local\
    \ n = 0 \n    for i = 1, #nums do\n        if nums[i] > 10 then\n            if\
    \ isodd(nums[i]) and isodd(nums[i - 1]) then n = n + 1 end\n        end\n    end\n\
    \    return n\nend", "\tlocal n = 0\n\tfor i, v in ipairs(nums) do\n\t\tif v >\
    \ 10 and (v % 2 == 1 or v ~= math.floor(math.log10(v))) then\n\t\t\tn = n + 1\n\
    \t\tend\n\tend\n\treturn n\nend", "  local cnt = 0\n  local num = nums[1]\n  for\
    \ i = 1, #nums do\n    if nums[i] > 10 then\n      local odd = (math.modf(num\
    \ / 10) % 2)\n      if odd ~= 0 then\n        cnt = cnt + 1\n      end\n    end\n\
    \    num = nums[i]\n  end\n  return cnt\nend", "  local count = 0\n  for i = 1,\
    \ #nums do\n    if nums[i] >= 10 and ((nums[i] % 2) ~= 0) then\n      if ((nums[i]\
    \ % 10) == 1) or ((nums[i] % 10) == 3) then\n        count = count + 1\n     \
    \ end\n    end\n  end\n  return count\nend", "  local counter = 0\n  for i = 1,\
    \ #nums do\n    if nums[i] < 10 then\n      counter = counter + 1\n    else\n\
    \      if nums[i] % 2 == 1 then\n        if nums[i] % 2 == 1 then \n         \
    \ if nums[i] == 0 then \n            counter = counter + 1\n          else \n\
    \            if nums[i] < 10 then \n              counter = counter + 1\n    \
    \        end \n          end \n        else \n          counter = counter + 1\n\
    \        end\n      end\n    end\n  end\n  return counter\nend", "  local count\
    \ = 0\n  local i = 0", "   local sum = 0\n   for _, num in ipairs(nums) do\n \
    \     sum = sum + num\n      if num > 10 then\n         sum = sum + math.floor(num\
    \ / 10)\n         if num % 10 % 2 ~= 0 then\n            sum = sum + 1 -- last\
    \ digit odd\n         end\n      end\n   end\n   return sum\nend", "    local\
    \ count = 0\n    for _, n in ipairs(nums) do\n        if n < 10 then\n       \
    \     if n % 2 == 0 then\n                count = count + 1\n            end\n\
    \        elseif n > 10 then\n            if n % 2 == 0 and n % 1 == 0 then\n \
    \               count = count + 1\n            end\n        end\n    end\n   \
    \ return count\nend", "  local count = 0\n  \n  for _, num in ipairs(nums) do\n\
    \    \n    -- Check for odd/even first and last digit\n    if math.mod(num, 2)\
    \ == 0 then\n      count = count + 1\n    end\n    \n    -- Check for odd/even\
    \ middle digits\n    if math.mod(num, 2) ~= 0 then\n      \n      -- Check for\
    \ odd first digit\n      if math.mod(num - 1, 2) == 1 then\n        count = count\
    \ + 1\n      end\n      \n      -- Check for odd last digit\n      if math.mod(num\
    \ + 1, 2) == 1 then\n        count = count + 1\n      end\n    end\n  end\n  \n\
    \  return count\nend", "\tlocal count = 0\n\tfor i, num in pairs(nums) do\n\t\t\
    if num > 10 and (i ~= 0 or num == 1) then\n\t\t\tcount = count + 1\n\t\tend\n\t\
    end\n\treturn count\nend", "  local count = 0\n  for i, v in ipairs(nums) do\n\
    \    local _, _, first = v:find(string.char(1))\n    local _, _, last = v:find(string.char(-1))\n\
    \    if first and last then\n      if v > 10 then\n        if v % 2 == 1 then\n\
    \          count = count + 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend", "  local count = 0\n  for _,n in pairs(nums) do\n    if n > 10\
    \ and n % 2 == 1 and n % 2 ~= 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local length\n  for _, num in ipairs(nums) do\n    length\
    \ = length or num\n    if num > 10 then\n      if num % 2 == 1 then\n        length\
    \ = length + 1\n      end\n      if num % 2 == 0 then\n        length = length\
    \ + 1\n      end\n      if num > 10 then\n        if num % 2 == 1 then\n     \
    \     length = length + 1\n        end\n      end\n    end\n  end\n  return length\n\
    end", "    local count = 0\n    for index, value in ipairs(nums) do\n        if\
    \ value > 10 then\n            if value % 2 == 1 then\n                if math.floor(value/2)\
    \ ~= value then\n                    count = count + 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "\tlocal count\
    \ = 0", "  local cnt = 0\n  for i, v in ipairs(nums) do\n    if v > 10 then\n\
    \      if math.mod(v, 2) == 1 then\n        cnt = cnt + 1\n      end\n    end\n\
    \  end\n  return cnt\nend", "  -- Write your code here.\n  return #nums\nend",
  "  local num_length = 0\n  \n  for i = 0, #nums do\n    if nums[i] > 10 then\n \
    \     num_length = num_length + 1\n      if nums[i] % 2 ~= 0 then\n        if\
    \ nums[i] >= 10 then\n          if nums[i] % 2 == 1 then\n            num_length\
    \ = num_length + 1\n          end\n        end\n      end\n    end\n  end\n  return\
    \ num_length\nend", "\t-- Write your code here.\n\tlocal count = 0\n\tfor _, num\
    \ in pairs(nums) do\n\t\tif num > 10 then\n\t\t\tif math.floor(num / 2) % 2 ~=\
    \ 0 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "    local result = 0\n    for _, num in pairs(nums) do\n        if num\
    \ > 10 and num:mod(2) ~= 1 then\n            result = result + 1\n        end\n\
    \    end\n    return result\nend", "\tlocal n=0\n\tfor _, num in pairs(nums) do\n\
    \t\tif num > 10 and num % 2 == 1 and num % 2 == 1 then\n\t\t\tn=n+1\n\t\tend\n\
    \tend\n\treturn n\nend", "    -- Write your code here\n    local len= #nums\n\
    \    local count = 0\n    for i = 1,len do\n        if nums[i] >= 10 then\n  \
    \          if (nums[i] % 2) ~= 0 then\n                count = count+1\n     \
    \       end\n        end\n    end\n    return count\nend", "  return #nums - #filter(num,\
    \ nums)\nend", "    local n=0\n    for _, num in ipairs(nums) do\n        if num\
    \ > 10 then\n            if num%10==1 and num%2==1 then\n                n+=1\n\
    \            else\n                n+=0\n            end\n        end\n    end\n\
    \    return n\nend", "  local count = 0\n  for _,v in pairs(nums) do \n    if\
    \ v > 10 then\n      if v:rem(-2, 1) and v:rem(-2, 1) ~= 0 then\n        count\
    \ = count + 1\n      end\n    end\n  end\n  return count\nend", "   if #nums <\
    \ 2 then return 0 end\n   local count = 0\n   for i = 1, #nums do\n      local\
    \ first  = nums[i]\n      local last = nums[#nums]\n      if first and last then\n\
    \         if first % 2 ~= 0 or last % 2 ~= 0 then\n            count = count +\
    \ 1\n         end\n      end\n   end\n   return count\nend", "  for i, num in\
    \ ipairs(nums) do\n    if num > 10 and (num mod 2 and num mod 2 = 0) then\n  \
    \    break\n    end\n  end\n  return i\nend\n</cell>\n<text>\nAnd now let's try\
    \ it out:", "    local sum = 0\n    for _, num in ipairs(nums) do\n        if\
    \ num > 10 then\n            sum = sum + 1\n            if num%2 ~= 0 then\n \
    \               sum = sum + 1\n            end\n        end\n    end\n    return\
    \ sum\nend", "  return #nums - #filter(function(n) return n >= 10 and (n % 2 ==\
    \ 1) and (n % 2 ~= 0) and (nums[#nums] % 2 == 1) end,\n\t\t\t\t\t\tnums)\nend",
  "    local newNums = {}\n    for i,num in ipairs(nums) do\n        if (num > 10\
    \ and num%1 ~= 0) or (num > 0 and num%1 == 0) then\n            newNums[#newNums+1]\
    \ = num\n        end\n    end\n    return #newNums\nend", "    local count = 0\n\
    \    for _, num in ipairs(nums) do\n        if num > 10 then\n            count\
    \ = count + 1\n            if ((num % 10) % 2) ~= 0 then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend",
  "    local count = 0\n    for n in nums do\n        if n < 10 then\n           \
    \ if math.mod(n, 2) == 1 then\n                count = count + 1\n           \
    \ end\n        else\n            if math.mod(n, 2) == 0 then\n               \
    \ if math.mod(n, 10) == 1 then\n                    count = count + 1\n      \
    \          end\n            end\n        end\n    end\n    return count\nend\n\
    </cell>\n<text>\nExercise: Write a function that returns a list of the first n\
    \ prime numbers. \nThe function should return the list in the following format:",
  "   -- Your code here\n   return #nums\nend", "  -- Write your code here\n  return\
    \ 0\nend", "    local numsTable = {}\n    for _, num in ipairs(nums) do\n    \
    \    numsTable[#numsTable + 1] = num\n    end\n    local result\n    for _, num\
    \ in ipairs(numsTable) do\n        if num > 10 then\n            if num % 2 ==\
    \ 1 then\n                if num % 2 == 1 then\n                    if num % 2\
    \ == 1 then\n                        if num % 2 == 1 then\n                  \
    \          result = result + 1\n                        end\n                \
    \    end\n                end\n            end\n        end\n    end\n    return\
    \ result\nend", "    -- Write your solution here. Make sure that you do not change\
    \ the return \n    -- value of the function.\n    return 0\nend", "    local count\
    \ = 0\n    for i = 1, #nums do\n        if nums[i] > 10 and (nums[i] mod 2 ~=\
    \ 1 or (nums[i] > 9 and nums[i] < -9)\n             or (nums[i] < -9 and nums[i]\
    \ > -9 and nums[i] mod 2 ~= 1)) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local count = 0\n  for i, v in ipairs(nums)\
    \ do\n    if v > 10 then\n      if math.floor(v / 2) == math.floor(v / 2) then\n\
    \        count = count + 1\n      end\n    end\n  end\n  return count\nend", " \
    \ -- Write your filter here\n  return 1\nend", "  local count = 0\n  for i = 1,\
    \ #nums do\n    -- Get the first and last digit\n    local firstDigit = nums[i]\
    \ % 10\n    local lastDigit = (nums[i]-firstDigit)/10\n    -- If the first digit\
    \ is a 1, last digit is an odd number, increment the counter\n    if firstDigit\
    \ == 1 and lastDigit % 2 == 1 then count = count+1 end\n    -- If the first digit\
    \ is a 3, last digit is an odd number, increment the counter\n    if firstDigit\
    \ == 3 and lastDigit % 2 == 1 then count = count+1 end\n    -- If the first digit\
    \ is a 5, last digit is an odd number, increment the counter\n    if firstDigit\
    \ == 5 and lastDigit % 2 == 1 then count = count+1 end\n    -- If the first digit\
    \ is a 7, last digit is an odd number, increment the counter\n    if firstDigit\
    \ == 7 and lastDigit % 2 == 1 then count = count+1 end\n    -- If the first digit\
    \ is a 9, last digit is an odd number, increment the counter\n    if firstDigit\
    \ == 9 and lastDigit % 2 == 1 then count = count+1 end\n    -- If the last digit\
    \ is an 1, first digit is an odd number, increment the counter\n    if lastDigit\
    \ % 2 == 1 and firstDigit % 2 == 1 then count = count+1 end\n    -- If the last\
    \ digit is an 3, first digit is an odd number, increment the counter\n    if lastDigit\
    \ % 2 == 1 and firstDigit % 3 == 1 then count = count+1 end\n    -- If the last\
    \ digit is an 5, first digit is an odd number, increment the counter\n    if lastDigit\
    \ % 2 == 1 and firstDigit % 5 == 1 then count = count+1 end\n    -- If the last\
    \ digit is an 7, first digit is an odd number, increment the counter\n    if lastDigit\
    \ % 2 == 1 and firstDigit % 7 == 1 then count = count+1 end\n    -- If the last\
    \ digit is an 9, first digit is an odd number, increment the counter\n    if lastDigit\
    \ % 2 == 1 and firstDigit % 9 == 1 then count = count+1 end\n    -- Add the current\
    \ element to the array\n    table.insert(nums, i)\n  end\n  return count\nend",
  "  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 10 and nums[i] and nums[i]\
    \ % 2 == 1 and\n       nums[i] % 2 == 1 and nums[i] % 2 == 1 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  for _, v in ipairs(nums)\
    \ do\n    if v > 10 then\n      if v > 100 then\n        return 1\n      elseif\
    \ v > 10 ^ 2 then\n        if v % 2 ~= 0 then\n          return 1\n        end\n\
    \      elseif v > 10 ^ 3 then\n        if v % 3 ~= 0 then\n          return 1\n\
    \        end\n      elseif v > 10 ^ 5 then\n        if v % 5 ~= 0 then\n     \
    \     return 1\n        end\n      elseif v > 10 ^ 7 then\n        if v % 7 ~=\
    \ 0 then\n          return 1\n        end\n      elseif v > 10 ^ 9 then\n    \
    \    if v % 9 ~= 0 then\n          return 1\n        end\n      else\n       \
    \ return -1\n      end\n    end\n  end\n  return 0\nend", "  if #nums == 0 then\
    \ return 0 end\n  local len = 0\n  for i=1,#nums do\n    if nums[i] >= 10 then\n\
    \      if nums[i]%2==1 then\n        if len+1>=2 then return end\n        len\
    \ = 1\n      else\n        len = len + 1\n      end\n    end\n  end\n  return\
    \ len\nend", "    local count = 0\n    for _, n in pairs(nums) do \n        if\
    \ n > 10 then\n            count = count + 1\n            if n % 2 == 0 then\n\
    \                if nums[#nums] == 2 or nums[#nums] == 3 or nums[#nums] == 5 then\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "   \n   local count=0\n   for\
    \ _, value in pairs(nums) do\n      if value > 10 then\n         if value % 2\
    \ == 1 and value % 2 ~= nums[value/2] then count = count + 1 end\n      else\n\
    \         if value % 2 ~= nums[value/2] then count = count + 1 end\n      end\n\
    \   end\n   return count\nend", "  local numsCount = #nums\n  local totalNums\
    \ = 0\n  for _, num in pairs(nums) do\n    if (num % 2 == 1) and ((num % 10 ==\
    \ 1) or (num % 10 == 0)) then\n      totalNums = totalNums + 1\n    end\n  end\n\
    \  return totalNums / numsCount\nend", "\tlocal count = 0\n\tfor _, num in pairs(nums)\
    \ do\n\t\tif (num > 10) and (num < 100) and (num % 2 == 0) and ((num > 100 and\
    \ num < 200) or (num > 200 and num < 300))then\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\treturn count\nend", "    local count = 0\n    for _,n in ipairs(nums)\
    \ do\n        if n > 10 and n%2 ~= 0 then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend", "  if #nums ~= 1 then\n    error('The\
    \ argument must be an array of 1 or more numbers')\n  else\n    local i = 0\n\
    \    local count = 0\n    while i < #nums do\n      if nums[i]>10 then\n     \
    \   count = count + 1\n      end\n      if nums[i]%2 ~= 0 then\n        count\
    \ = count + 1\n      end\n      i = i + 1\n    end\n    return count\n  end\n\
    end", "    local filtered = 0\n    for i = 1, #nums do\n        if nums[i] >=\
    \ 10 then\n            if nums[i] % 2 ~= 0 then\n                if nums[i] %\
    \ 10 ~= 0 then\n                    if nums[i] % 10 ~= nums[i-1] % 10 then\n \
    \                       filtered = filtered + 1\n                    end\n   \
    \             end\n            end\n        end\n    end\n    return filtered\n\
    end", "    local n = 0\n    for i = 1, #nums do\n        if nums[i] <= 10 then\n\
    \            if math.modf(math.abs(nums[i]))[1] ~= 1 then\n                if\
    \ math.modf(math.abs(nums[i]))[2] ~= 0 then\n                    n = n + 1\n \
    \               end\n            end\n        else\n            if math.modf(math.abs(nums[i]))[1]\
    \ ~= 1 then\n                n = n + 1\n            end\n        end\n    end\n\
    \    return n\nend", "    local count = 0\n    for i=1, #nums do\n        if nums[i]\
    \ > 10 then\n            if nums[i] % 2 == 1 then\n                count = count\
    \ + 1\n            end\n            if nums[i] % 2 == 0 then\n               \
    \ count = count + 1\n            end\n            if nums[i] % 2 == 1 then\n \
    \               count = count + 1\n            end\n        end\n    end\n   \
    \ return count\nend", "   local len = 0 \n   for i = 1, #nums do\n      local\
    \ temp = 0 \n      for j = 0, #nums[i] do\n         temp = temp + nums[i][j] *\
    \ 10^j\n      end\n      local nums2 = nums[i]\n      local temp2 = nums2[1]\n\
    \      for j = 1, #nums2 do\n         temp2 = temp2 + nums2[j] * 10^j\n      end\n\
    \      if temp > 10 and temp2 % 2 == 1 and nums[len] == nums2[len] then\n    \
    \     len = len + 1\n      end\n   end\n   return len \nend", "    local count\
    \ = 1;\n    for i = 1, #nums do\n        if nums[i] > 10 then\n            if\
    \ (nums[i] % 2 > 0 and nums[i] % 2 == nums[i - 1]) % 2 then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend",
  "  local count = 0\n  for _, _, n in ipairs(nums) do\n    if n == nil then\n   \
    \   count = count + 1\n    elseif n > 10 then\n      count = count + 1\n     \
    \ if n % 2 == 1 then\n        if nums[n-2] == nil or nums[n-2] == -2 then\n  \
    \        count = count + 1\n        end\n      end\n    end\n  end\n  return count\n\
    end", "    local count = 0\n    for _, num in ipairs(nums) do\n        if num\
    \ > 10 then\n            if math.floor(num / 2) ~= num % 2 then\n            \
    \    count = count + 1\n            end\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  \n  for _, num in ipairs(nums) do\n    if num > 10\
    \ then\n      if not (num % 2) then\n        if ((num % 10) and (num % 10) > 0)\
    \ then\n          count = count + 1\n        end\n      end\n    end\n  end\n\
    \  \n  return count\nend", "  -- Base Case: empty array\n  if nums == nil or #nums\
    \ == 0 then\n    return 0\n  end", "   local result = 0\n   for i = 1, #nums do\n\
    \      if nums[i] > 10 then\n         result = result + 1\n      elseif nums[i]\
    \ % 2 == 1 and nums[i] % 2 == 0 then\n         result = result + 1\n      end\n\
    \   end\n   return result\nend", "  if #nums == 0 then return 0 end\n  local count\
    \ = 0\n  for i = 1,#nums do\n    if nums[i] >= 10 then\n      if nums[i] % 2 ==\
    \ 1 and nums[i] % 2 == 1 then\n        return count\n      end\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend", "  local n = 0\n  for _, _\
    \ in pairs(nums) do\n    n = n + 1\n    if _ > 10 and nums[#nums]%2 ~= 0 then\
    \ break end\n  end\n  return n\nend", "\tlocal count = 0\n\tfor _, num in ipairs(nums)\
    \ do\n\t\tif num > 10 then\n\t\t\tif (math.abs(math.floor(num / 10)) % 2) == 1\
    \ and\n\t\t\t\t(math.abs(math.floor(num / 10)) % 2) == 1 then\n\t\t\t\tcount =\
    \ count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "  local count =\
    \ 0\n  for idx, num in pairs(nums) do\n    if num > 10 then\n      count = count\
    \ + 1\n      if num % 2 == 1 and math.floor(num / 2) % 2 == 1 then\n        count\
    \ = count + 1\n      end\n    end\n  end\n  return count\nend", "    local n =\
    \ #nums\n    local counter = 0\n    for i = 1, n do\n        if nums[i] > 10 then\n\
    \            local first_odd = math.floor( math.floor(nums[i]/10)*10 )\n     \
    \       local last_odd = math.floor( math.floor(nums[i]/10)*10 )\n           \
    \ if (first_odd + last_odd) % 2 == 1 then\n                counter = counter +\
    \ 1\n            end\n        end\n    end\n    return counter\nend", "  local\
    \ i = 1\n  local n = 0\n  while i <= #nums do\n    n = n + 1\n    if nums[i] >\
    \ 10 then\n      if nums[i] % 2 == 0 and nums[i-1] % 2 == 1 then\n        n =\
    \ n + 1\n      end\n    end\n    i = i + 1\n  end\n  return n\nend", "  local\
    \ count = 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      count\
    \ = count + 1\n      if num % 2 == 1 and (num / 2) mod 2 ~= 1 then\n        count\
    \ = count + 1\n      end\n    end\n  end\n  return count\nend", "    local length\
    \ = 1\n    for _, num in pairs(nums) do\n        length = length + 1\n       \
    \ if num > 10 then\n            if num % 2 ~= 1 then\n                length =\
    \ length + 1\n            end\n            if num < 0 and num < 0 % 10 then\n\
    \                length = length + 1\n            end\n        end\n    end\n\
    \    return length\nend", "  local len = 0\n  for i = 1, #nums do\n    len = len\
    \ + 1\n    if nums[i] >= 10 and\n        (nums[i] % 10 % 2) == 1 and\n       \
    \ (nums[i] % 10 / 2 % 2) ~= 0 then\n      break\n    end\n  end\n  return len\n\
    end", "    local total = 0\n    for i=1,#nums do\n        local digits = math.floor((nums[i]/10)\
    \ + .5)\n        if nums[i] >= 10 then\n            if nums[i] % 10 % 2 == 0 then\n\
    \                if digits == 1 then\n                    total = total + 1\n\
    \                else\n                    total = total + 1\n               \
    \ end\n            end\n        end\n    end\n    return total\nend", "    local\
    \ sum = 0\n    for _, v in ipairs(nums) do\n        if v > 10 then\n         \
    \   if v % 2 ~= 1 then\n                sum = sum + 1\n            end\n     \
    \       if v % 2 == 1 then\n                if v ~= 10 then\n                \
    \    sum = sum + 1\n                end\n                if v ~= 11 then\n   \
    \                 sum = sum + 1\n                end\n            end\n      \
    \  end\n    end\n    return sum\nend", "    local cnt = 0\n    local i = 1\n \
    \   while i <= #nums do\n        if nums[i] < 10 and nums[i] % 2 == 1 then\n \
    \           if nums[i-1] % 2 == 1 and nums[i+1] % 2 == 1 then\n              \
    \  cnt = cnt + 1\n            end\n        end\n        i = i + 1\n    end\n \
    \   return cnt\nend", "  local n = 0\n  local count = 0\n  for i = 1, #nums do\n\
    \    if nums[i] > 10 then\n      if (((nums[i] % 100) ~= 0) and (nums[i] % 10)\
    \ == 1) then\n        count = count + 1\n      end\n      if (((nums[i] % 100)\
    \ ~= 0) and (nums[i] % 10) == 0) then\n        count = count + 1\n      end\n\
    \    end\n  end\n  return count\nend", "    local result = 1\n    for i=1,#nums\
    \ do\n        if ((nums[i] > 10) and (nums[i] % 2 == 1) and\n            (nums[i]\
    \ % 2 == (nums[i - 1] % 2)))\n        then\n            result = result + 1\n\
    \        end\n    end\n    return result\nend", "  local len = 1\n  for i = 1,\
    \ #nums do\n    if nums[i] < 10 then\n      len = len + 1\n      elseif nums[i]\
    \ >= 10 then\n        len = len + 1 \n        if nums[i]%2 == 1 and nums[i]/2\
    \ == 1 then\n          len = len + 1 \n        else\n          len = len\n   \
    \     end\n      end\n  end\n  return len\nend", "  local n = 0\n  for i = 1,\
    \ #nums do\n    if (nums[i] >= 10) and (nums[i] mod 2 == 1) and (nums[i] mod 2\
    \ == 1) then\n      n = n + 1\n    end\n  end\n  return n\nend", "    if #nums\
    \ < 2 then\n        return 0\n    end\n    local sum = 0\n    local n = #nums\n\
    \    for i = 1, n do\n        local d = nums[i]\n        if d > 10 then\n    \
    \        if d % 2 == 1 then\n                sum = 1\n            end\n      \
    \      if i % 2 == 1 then\n                sum = 2\n            end\n        end\n\
    \    end\n    return sum\nend", "  return #nums - #nums.filter(function(x)\n \
    \   return x%2 ~= 1 and x ~= x*x \n  end)\nend", "  local count = 0\n  for i =\
    \ 1, #nums do\n    if nums[i] > 10 then\n      if nums[i] % 2 == 1 and nums[i\
    \ - 1] % 2 == 1 then\n        count = count + 1\n      end\n    end\n  end\n \
    \ return count\nend", '  local count = 0', '    local count = 0', "    local numsLength\
    \ = #nums\n    local n1 = nums[1]\n    local n2 = nums[numsLength]\n    local\
    \ n3 = nums[numsLength - 1]\n    local result = 1\n    if n1 ~= 0 and n2 ~= 0\
    \ and n3 ~= 0 then\n        if n1%2 == 1 and n2%2 == 1 and n3%2 == 1 then\n  \
    \          result = 1\n        else\n            result = 0\n        end\n   \
    \ end\n    return result\nend", "  local count = 0\n  for _, num in ipairs(nums)\
    \ do\n    count = count + 1\n    if num > 10 and\n        (num % 2 == 1 and num\
    \ % 3 == 1 or\n         num % 2 == 1 and num % 3 ~= 1 or\n         num % 3 ~=\
    \ 1 and num % 2 == 1) then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "   local sum = 0\n   for _,num in pairs(nums) do\n      if num\
    \ > 10 then\n         sum = sum + 1\n      end\n   end\n   return sum\nend", "\t\
    local count = 0\n\tfor _, n in ipairs(nums) do\n\t\tif n > 10 and n % 2 and n\
    \ % 1 ~= 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
  "  for i, v in ipairs(nums) do\n    if v > 10 and (mod(v, 2) == 1 or mod(v, 2) ==\
    \ 3) and ((mod(i, 2) == 1 or mod(i, 2) == 3) and\n      (mod(i, 1) == 1 or mod(i,\
    \ 1) == 3) and (mod(v, 1) == 1 or mod(v, 1) == 3)) then \n      return 1 + specialFilter(nums)\n\
    \    end\n  end\n  return 0\nend", "  local filteredNums = 0\n  \n  for _, num\
    \ in pairs(nums) do\n    local firstDigit = num % 10\n    local lastDigit  = num\
    \ / 10\n    \n    if firstDigit == 0 and lastDigit % 2 == 1 then\n      filteredNums\
    \ = filteredNums + 1\n    end\n  end\n  \n  return filteredNums\nend", "\tlocal\
    \ count = 0\n\t\n\tfor i = 1, #nums do\n\t\tif nums[i] > 10 then\n\t\t\tcount\
    \ = count + 1\n\t\telseif nums[i] % 2 == 0 and nums[i] % 4 == 0 then\n\t\t\tcount\
    \ = count + 1\n\t\telse\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\t\n\treturn\
    \ count\nend", "    local i = 0\n    local num = 0\n    for i = 1, #nums do\n\
    \        num = num + nums[i]\n    end\n    if num > 10 then\n        if num %\
    \ 2 == 0 then\n            if num % 2 == 1 then\n                return num\n\
    \            end\n        else\n            if num % 2 ~= 0 then\n           \
    \     return num\n            end\n        end\n    end\n    return nil\nend",
  "   if #nums == 0 then\n      return 0\n   end\n   if #nums > 1 then\n      return\
    \ specialFilter(nums[1:end-1]) + #nums - 1\n   else\n      local result = #nums\
    \ - 1\n      for i = #nums, 1, -1 do\n         if nums[i] >= 10 then\n       \
    \     local first = nums[i]\n            local last = nums[i - 1]\n          \
    \  if first % 2 == 1 ~= last % 2 then\n               result = result + 1\n  \
    \          end\n         end\n      end\n      return result\n   end\nend\n</cell>\n\
    <cell>", "    local numsSize = #nums\n    if not numsSize then return 0 end\n\
    \    local numsMax = math.max(nums)\n    local result = 1\n    for i = 1, numsSize\
    \ do\n        if nums[i] > 10 then\n            local firstOdd = math.floor(math.modf(math.fmod(nums[i],\
    \ 10)*10)[1])\n            local lastOdd = math.floor(math.modf(math.fmod(nums[i],\
    \ 10)*10)[1])\n            if firstOdd and lastOdd then\n                result\
    \ = result + 1\n            end\n        end\n    end\n    return result\nend",
  "  local result = 0\n  for i = 1, #nums do\n    if (nums[i] > 10) then\n      result\
    \ = result + 1\n      if( (nums[i] % 10) % 2 ~= 0 ) then\n        if( ((nums[i]\
    \ % 10) % 2) == 1 and ((nums[i]  - (nums[i]  % 10)) / 10) % 2 ~= 0) then\n   \
    \       result = result + 1\n        end\n      end\n    end\n  end\n  return\
    \ result\nend", "\tlocal i, n = 0, #nums\n\twhile i < n do\n\t\tlocal first =\
    \ nums[i]\n\t\tlocal last = nums[#nums - 1]\n\t\tif first:sub(1,1) ~= '-' and\
    \ last:sub(1,1) ~= '-' then\n\t\t\tif first % 2 == 1 and last % 2 == 1 then\n\t\
    \t\t\ti = i + 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn i\nend\n</cell>\n\
    <text>\nProblem 2.2 - Filter an Array", "\tlocal n = 0\n\tlocal temp = 0\n\tfor\
    \ _, num in pairs(nums) do\n\t\tif num > 10 then\n\t\t\tn = n + 1\n\t\t\ttemp\
    \ = math.floor((num % 10))\n\t\t\tif num - temp % 2 ~= 0 then\n\t\t\t\tn = n +\
    \ 1\n\t\t\tend\n\t\tend\n\tend\n\treturn n\nend", "  local n = 0\n  for _, num\
    \ in pairs(nums) do \n    if num > 10 then\n      if (((num % 10) % 2) ~= 0 and\
    \ ((num % 10) % 2) ~= 1) then\n        n = n + 1\n      end\n    end\n  end\n\
    \  return n\nend", "  local result = 0\n  for i = 1, #nums do\n    if nums[i]\
    \ > 10 then\n      result = result + 1\n      -- only odd first\n      if i %\
    \ 2 == 0 then\n        -- only odd last\n        if #nums%2 == 0 and i % 2 ~=\
    \ 0 then\n          result = result + 1\n        end\n      end\n    end\n  end\n\
    \  return result\nend\n</cell>\n<text>\nQ12\nWrite a function that counts the\
    \ number of elements in an array, excluding \nduplicates.", "  local length =\
    \ 0\n  for i, num in ipairs(nums) do\n    if num > 10 then\n      length = length\
    \ + 1\n      if num % 2 ~= 0 then \n        if num - math.floor(num) == math.floor(num\
    \ + 1) then\n          length = length + 1\n        end\n      end\n    end\n\
    \  end\n  return length\nend", "  local num_odd = 0\n  local num_even_first =\
    \ 0\n  local num_even_last = 0\n  for i, v in ipairs(nums) do\n    local odd =\
    \ tostring(v) mod 2\n    local first_last_odd = tostring(v) div 10 % 2 -- The\
    \ first last digit\n    local even_first = math.floor(tostring(v) div 10 % 2 ^\
    \ 1) + 1\n    local even_last = math.floor(tostring(v) div 10 % 2 ^ 2)\n    if\
    \ odd and first_last_odd and even_first and even_last then\n      num_odd = num_odd\
    \ + 1\n    end\n  end\n  return num_odd\nend", "    local n = 0 -- Count\n   \
    \ for i = 1, #nums do -- For each element\n        if nums[i] > 10 then\n    \
    \        if nums[i] % 2 == 1 then\n                if nums[i] % 9 == 1 then --\
    \ Even number\n                    n = n + 1\n                end\n          \
    \  else\n                if nums[i] % 5 == 1 then -- Odd number\n            \
    \        n = n + 1\n                end\n            end\n        end\n    end\n\
    \    return n\nend", "\tlocal n = 1\n\tfor i = 1, #nums do\n\t\tif nums[i] >=\
    \ 10 and ((nums[i] % 2) == 1 and\n\t\t\t((nums[i] % 10) == 1 or nums[i] == 10))\
    \ then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend", "  local size = 1\n\
    \  for _, v in pairs(nums) do\n    if v > 10 then\n      size = size + 1\n   \
    \ end\n  end\n  return size\nend", "  local count = 0\n  local first = math.floor(math.random()\
    \ * 100) % 10\n  local last = math.floor(math.random() * 100) % 10\n  for i =\
    \ 1, #nums do\n    local n = nums[i]\n    if n > 10 and n % 10 == first and n\
    \ % 10 == last and n % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\n</cell>\n<text>\nQuestion 6: Write a function that takes\
    \ an array of numbers as input and \nreturns the sum of the first n elements in\
    \ the array that do not contain \nan even number. The function should take an\
    \ optional second argument that \nspecifies the minimum number of elements in\
    \ the array to consider.", "  local numsLength = #nums \n  local oddCounter =\
    \ 0 \n  local evenCounter = 0 \n  local numsCopy = nums:copy() \n  for i = 1,\
    \ numsLength do\n    -- if the first and last digits are odd, increment oddCounter\n\
    \    if numsCopy:sub(1, 1) == numsCopy:sub(numsLength - 1, 1) then\n      oddCounter\
    \ = oddCounter + 1 \n    else\n      evenCounter = evenCounter + 1 \n    end\n\
    \    -- remove the first and last digits from the array\n    numsCopy = numsCopy:sub(1,\
    \ numsLength - 1)\n  end\n  if oddCounter + evenCounter == numsLength then\n \
    \   return 0 \n  elseif oddCounter == 1 and evenCounter == numsLength then\n \
    \   return 1 \n  elseif oddCounter == numsLength and evenCounter == 1 then\n \
    \   return numsLength \n  elseif oddCounter == numsLength then\n    return oddCounter\
    \ + evenCounter \n  else\n    return oddCounter + evenCounter + 1 \n  end\nend\n\
    </cell>\n<cell>", "  local len  = #nums\n  local num  = 0\n  local odd = 1\n \
    \ for i = 1, len do\n    num = num + 1 -- counting\n    if num > 10 then\n   \
    \   if odd == 1 then\n        if odd == 0 then num = num - 1 else odd = odd -\
    \ 1 end\n      elseif odd == 0 then odd = odd -1 else\n        odd = odd\n   \
    \   end\n    end\n    if num % 2 == 1 then\n      num = num / 2\n      odd = odd\
    \ + 0\n    end\n  end\n  return num\nend", '  local count = 0', "  -- TODO: Your\
    \ code goes here\nend", "  local numsLength = 0\n  for _, v in pairs(nums) do\n\
    \    numsLength = numsLength + 1\n  end\n  \n  if numsLength == 1 then\n    return\
    \ 1\n  elseif numsLength == 0 then\n    return 0\n  else\n    local count = 0\n\
    \    for _, v in pairs(nums) do\n      if v > 10 then\n        if string.sub(v,\
    \ 1, 1) ~= 'O' then\n          if string.sub(v, (v - 1) % (v / 2)) ~= 'O' then\n\
    \            count = count + 1\n          end\n        end\n      end\n    end\n\
    \    return count\n  end\nend", "  local count = 0\n  for i = 1, #nums do\n  \
    \  if nums[i] >= 10 then\n      local first = math.floor(nums[i])\n      local\
    \ last = nums[i + 1]\n      count = count + 1\n      while first % 2 == 0 and\
    \ last % 2 == 0 do\n        first = first / 2\n        last = last / 2\n     \
    \ end\n    end\n  end\n  return count\nend", "    local n = 0 -- number of elements\
    \ greater than 10 and first and last digits are odd\n    local i = 1\n    for\
    \ _ in nums:gmatch(\"%d+\") do\n        if _ > 10 then\n            if i % 2 ==\
    \ 1 then\n                n = n + 1\n            end\n        end\n        i =\
    \ i + 1\n    end\n    return n\nend", "   -- base case\n   if #nums == 0 then\
    \ return 0 end\n   -- if the first and last element are odd, return 1\n   if nums[1]\
    \ % 2 == 1 and nums[#nums] - 1 % 2 == 1 then return 1 end\n   -- otherwise, return\
    \ 0\n   return 0\nend", "  local counter = 0\n  for _, v in ipairs(nums) do\n\
    \    if v > 10 then\n      counter = counter + 1\n      if v % 2 ~= 0 then\n \
    \       if v ~= (v - 1) then\n          if v ~= (v + 1) then\n            counter\
    \ = counter + 1\n          end\n        end\n      end\n    end\n  end\n  return\
    \ counter\nend", "  if #nums <= 0 then\n    return nil\n  end\n  local counter\
    \ = 0\n  for i = 1, #nums do\n    if nums[i] > 10 then\n      if ((nums[i] % 2)\
    \ == 1) then\n        if (((nums[i] % 10) == 1) or ((nums[i] % 10) == 9)) then\n\
    \          if ((nums[i - 1] % 10) == 1) then\n            if ((nums[i - 1] % 10)\
    \ == 9) then\n              counter = counter + 1\n            end\n         \
    \ end\n        end\n      end\n    end\n  end\n  return counter\nend", "  local\
    \ result = 0\n  for _, v in ipairs(nums) do\n    if v > 10 then\n      if ((v\
    \ and (v % 2)) > 0 and ((v % 10) == 1)) then \n        result = result + 1\n \
    \     end\n    end\n  end\n  return result\nend", "  local cnt = 0\n  for i =\
    \ 1, #nums do\n    if math.abs(nums[i]) >= 10 then\n      if math.abs(nums[i])\
    \ mod 2 ~= 0 then\n        if nums[i] < 0 then\n          cnt = cnt + 1\n    \
    \    else\n          cnt = cnt + 0\n        end\n      end\n    end\n  end\n \
    \ return cnt\nend", "  local result = 1\n  for _, num in ipairs(nums) do\n   \
    \ if num > 10 then\n      if num % 2 ~= 1 then\n        -- If the first and last\
    \ digit are odd, add 1 to result\n        if num % 2 == 1 then\n          result\
    \ = result + 1\n        end\n      else\n        -- If the first and last digit\
    \ are even, add 2 to result\n        result = result + 2\n      end\n    end\n\
    \  end\n  return result\nend", "  local num_odd = 0\n  local num_even = 0\n  for\
    \ _, value in ipairs(nums) do\n    if value == math.floor(value) then\n      if\
    \ value % 2 == 1 then\n        num_even = num_even + 1\n      elseif value % 2\
    \ == 0 then\n        num_odd = num_odd + 1 \n      end\n    end\n  end\n  return\
    \ num_odd and num_even\nend", "  local count = 0\n  for i,v in ipairs(nums) do\n\
    \    if v > 10 then\n      if i % 2 == 1 then\n        count = count + 1\n   \
    \   end\n      if i % 2 == 0 then\n        if ((v % 10) % 2 == 1) then\n     \
    \     count = count + 1\n        end\n      end\n    end\n  end\n  return count\n\
    end", "\tlocal count = 0\n\tlocal current = 0\n\tfor idx, item in pairs(nums)\
    \ do\n\t\tif item > 10 then\n\t\t\tif current == 1 then\n\t\t\t\tcount = count\
    \ + 1\n\t\t\tend\n\t\t\tcurrent = current + 1\n\t\telse\n\t\t\tcurrent = 1\n\t\
    \tend\n\tend\n\treturn count\nend", "  for _, value in ipairs(nums) do\n    if\
    \ value <= 10 then\n      if value % 2 == 1 then\n        local lastDigit = math.floor(value/10)\n\
    \        if lastDigit % 2 == 1 then\n          return 1\n        end\n      end\n\
    \    end\n  end\n  return 0\nend", "  local sum = 0\n  for _, value in ipairs(nums)\
    \ do\n    if value > 10 then\n      sum = sum + 1\n      if ((value % 2) == 0\
    \ and (value % 100) == 0 and (value % 100) != 0) then\n        sum = sum + 1\n\
    \      end\n    end\n  end\n  return sum\nend", "    local count = 0\n    for\
    \ i = 1, #nums do\n        if nums[i] >= 10 and (nums[i] % 2 ~= 0 or nums[i-1]\
    \ % 2 == 0) and (nums[i-1] % 2 ~= 0 or nums[i] % 2 == 0) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "\tlocal count =\
    \ #nums\n\tlocal odd = 0\n\tlocal first = 0\n\tlocal last = 0", "\tlocal num_count\
    \ = {}\n\tfor _, num in ipairs(nums) do\n\t\tif num > 10 then\n\t\t\tif num%2\
    \ and num%2 ~= (num%2-1) then\n\t\t\t\tnum_count[#num_count+1] = 1\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn #num_count\nend", "  local count=1\n  for _ in pairs(nums)\
    \ do\n    if _ > 10 then\n      if nums[_]%2 and nums[_-1]%2 then\n        count=(count+1)\n\
    \      end\n    end\n  end\n  return count\nend", "  local count = 0\n  for i=1,#nums\
    \ do\n    if nums[i] > 10 and (nums[i] % 2 == 1 and (nums[i] % 4 ~= 1 or nums[i]\
    \ % 100 == 0)) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\n</cell>\n<text>\nPractice\nTo test your function, run the cell block below\
    \ to to verify that your function returns the right value.", "\tlocal count =\
    \ 0\n\tfor idx, x in ipairs(nums) do\n\t\tcount = count + 1 \n\t\tif x > 10 and\
    \ (idx > 0 and nums[idx-1] % 2 == 1) and  (idx < #nums and nums[idx] % 2 == 1)\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    if\
    \ #nums < 2 then return 0 end\n    local n = 1\n    for i = 2, #nums do\n    \
    \    if nums[i] < 10 then\n            n = n + 1\n        end\n        if nums[i]\
    \ == -1 then\n            n = n + 1\n        end\n    end\n    return n\nend\n\
    assert(specialFilter([3, -1, 3, 5, 7, 9]) == 0)\nassert(specialFilter([3, -1,\
    \ 3, 5, 7, 9]) == 1)\nassert(specialFilter([-7, -1, -3, 5, 0, 2, -4, 10, 4, 8,\
    \ 3, 7, 2, 9, 7, 8, -3]) == 3)\nassert(specialFilter([-7, -1, -3, 5, 0, 2, -4,\
    \ 10, 4, 8, 3, 7, 2, 9, 7, 8, -3]) == 2)\nassert(specialFilter([-7, -1, -3, 5,\
    \ 0, 2, -4, 10, 4, 8, 3, 7, 2, 9, 7, 8, -3]) == 1)\nassert(specialFilter([-7,\
    \ -1, -3, 5, 0, 2, -4, 10, 4, 8, 3, 7, 2, 9, 7, 8, -3]) == 0)", "    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 then\n         \
    \   if num:sub(1, 1) ~= num:sub(len(num) - 2, len(num) - 1) then\n           \
    \     count = count + 1\n            end\n        end\n    end\n    return count\n\
    end", "\tlocal i = 0\n\tlocal count = 0\n\twhile i <= #nums do\n\t\tcount = count\
    \ + 1\n\t\tif nums[i] > 10 then\n\t\t\ti = i + 1\n\t\telseif nums[i] == 1 and\
    \ nums[i - 1] % 2 == 1 and nums[i - 2] % 2 == 1 then\n\t\t\ti = i + 1\n\t\telse\n\
    \t\t\tbreak\n\t\tend\n\tend\n\treturn count\nend", "  local result = 0\n  local\
    \ i = 1\n  for i = 1, #nums do\n    local first = math.floor( nums[i]/10 )\n \
    \   local last = math.floor( nums[i]%10 )\n    if first == last and math.mod(first,2)\
    \ == 1 and last % 2 == 1 then\n      result = result + 1\n    end\n  end\n  return\
    \ result\nend", '  local count = 0', "  local count = 2\n  for i = 1, #nums do\n\
    \    if (nums[i] == 10) then\n      if (nums[i - 1] == 1 and nums[i + 1] % 2 ==\
    \ 1) then\n        count = count + 1\n      end\n    end\n  end\n  return count\n\
    end", "    local count = {}\n    for _, value in ipairs(nums) do\n        if value\
    \ == 10 then\n            if string.sub(value, 1, 1) ~= '-' and string.sub(value,\
    \ 1, 1) ~= '+'\n                then count[value] = count[value] + 1 end\n   \
    \         else\n                if string.sub(value, 1, 1) == '-' then count[value]\
    \ = count[value] + 1 end\n            end\n        elseif value >= 10 then\n \
    \           local first = math.floor(value)\n            local last = first +\
    \ math.floor((10 - value) / 2)\n            local first1 = math.floor(first /\
    \ 10)\n            local last1 = math.floor(last / 10)\n            if first1\
    \ % 2 ~= 1 or last1 % 2 ~= 1 then count[value] = count[value] + 1 end\n      \
    \  end\n    end\n    return count\nend", "  local count = 0\n  for _, v in pairs(nums)\
    \ do\n    if v > 10 then\n      if math.floor(v/2) == math.floor(v/2) and\n  \
    \      math.floor(v/2) % 2 ~= 0 then\n        count = count + 1\n      end\n \
    \   end\n  end\n  return count\nend", "    local total = 0\n    for i = 1, #nums\
    \ do\n        local num = tonumber(nums[i])\n        if num and tonumber(num:sub(1,\
    \ 1)) and tonumber(num:sub(-2, -1)) then\n            total = total + 1\n    \
    \    end\n    end\n    return total\nend", "  local n = #nums\n  local sum = 0\n\
    \  for i = 1, n do\n    if nums[i] >= 10 and nums[i]%2 == 1 and nums[i]%2 ~= nums[i]/2\
    \ then\n      sum = sum + 1\n    end\n  end\n  return sum\nend", "  local count\
    \ = 0\n  for _, v in ipairs(nums) do\n    local temp = v / (10^math.floor((v %\
    \ 10)/2))\n    if temp >= 10 then\n      count = count + 1\n    end\n  end\n \
    \ return count\nend\n</cell>\n<text>\nProblem 2", "  local n = 0\n  for _, v in\
    \ ipairs(nums) do\n    if v > 10 and\n      (v % 2 == 0 and (v % 2 == 1 or v ==\
    \ -1) or\n      (v % 2 == 1 and (v % 2 == 3 or v % 2 == -1)))\n    then\n    \
    \  n = n + 1\n    end\n  end\n  return n\nend", "  if #nums == 0 then\n    return\
    \ 0\n  else\n    nums = nums or {}\n    local odds = false\n    local evens =\
    \ false\n    local number = 0\n    local i = 0\n    while i <= #nums do\n    \
    \  number = number + nums[i]\n      if number >= 10 then\n        if odd and (number\
    \ mod 2) == 1 then\n          evens = true\n        elseif even and (number mod\
    \ 2) == 0 then\n          odds = true\n        elseif odd then\n          odds\
    \ = false\n        elseif even then\n          evens = false\n        else\n \
    \         odds = true\n          evens = true\n        end\n        number = number\
    \ / 10\n      else\n        number = number * 10\n      end\n      i = i + 1\n\
    \    end\n    return odds and evens\n  end\nend", "  local len = 1\n  local sum\
    \ = 0\n  for i,x in ipairs(nums) do\n    if x > 10 then\n      if x ~= math.floor(x)\
    \ and x % 2 == 1 then\n        sum = sum + 1\n      end\n    end\n    len = len\
    \ + 1\n  end\n  return len\nend", "    if #nums == 0 then return 0 end\n    if\
    \ #nums == 1 then return 1 end\n    local count = 0\n    for i = 1, #nums do\n\
    \        local n = nums[i]\n        if n > 10 then\n            if mod (nums[i],\
    \ 2) == 1 then\n                if mod (nums[i], 2) == 1 then count = count +\
    \ 1 end\n            end\n            if mod (nums[i], 2) == 0 then\n        \
    \        if mod (nums[i], 2) == 0 then count = count + 1 end\n            end\n\
    \        end\n    end\n    return count\nend", "   \n   if #nums == 0 then \n\
    \      return 0 \n   end", "    local count = 0\n    for _, num in pairs(nums)\
    \ do\n        if num > 10 then\n            if num and (num % 2) ~= 0 then\n \
    \               count = count + 1\n            end\n        end\n    end\n   \
    \ return count\nend", "  local n = 0\n  for _, v in pairs(nums) do\n    if v >=\
    \ 10 then\n      if v % 2 ~= 0 then\n        if v % 10 ~= 0 then\n          if\
    \ v % 10 == 0 then\n            if v ~= math.floor(v) then\n              n =\
    \ n + 1\n            end\n          end\n        end\n      end\n    end\n  end\n\
    \  return n\nend", "  local result = 0\n  for i = 1,#nums do\n    local first,\
    \ last = nums[i], nums[i]\n    if first >= 10 and last >= 10 and first % 2 ==\
    \ 1 and last % 2 == 1 then\n      result = result + 1\n    end\n  end\n  return\
    \ result\nend", "  local n = 0\n  for i = 1, #nums do\n    if nums[i] >= 10 then\n\
    \      n = n + 1\n      if nums[i] % 2 ~= 0 and nums[i-1] % 2 ~= 0 then\n    \
    \    n = n + 1\n      end\n    end\n  end\n  return n\nend", "\tlocal result =\
    \ 0\n\tfor i = 1, #nums do\n\t\tif nums[i] > 10 then\n\t\t\tif nums[i] % 2 ==\
    \ 1 and nums[i-1] % 2 == 1 then\n\t\t\t\tresult = result + 1\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn result\nend", "  local len = 0\n  for _, x in ipairs(nums)\
    \ do\n    if (x > 10) and (x mod 2 == 1) then\n      if ((x mod 10) == 1) then\
    \ \n        len = len + 1\n      end\n    end\n  end\n  return len\nend", "  \
    \  local filtered = {}\n    for i = 1, #nums do\n        if nums[i] > 10 then\n\
    \            if nums[i] % 2 == 1 and nums[i] % 2 ~= nums[i - 1] % 2 then\n   \
    \             table.insert(filtered, nums[i])\n            end\n        end\n\
    \    end\n    return #filtered\nend", '  if #nums < 1 then return 0 end', "\t\
    local n = 0\n\tfor _, num in pairs(nums) do\n\t\tif num > 10 then\n\t\t\tlocal\
    \ fnum = math.floor( num / 10 )\n\t\t\tlocal lnum = math.mod( num, 10 )\n\t\t\t\
    if lnum % 2 == 1 and fnum % 2 ~= 0 then\n\t\t\t\tn = n + 1\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn n\nend", "  local result = 0\n  for i = 1, #nums do\n    if nums[i]\
    \ > 10 and\n      (nums[i] % 10 == 1 and nums[i] % 2 == 0) and\n      (nums[i\
    \ - 1] ~= nums[i]) and\n      (nums[i - 1] ~= (nums[i] % 10)) then\n      result\
    \ = result + 1\n    end\n  end\n  return result\nend", "  local i = 0 -- Track\
    \ the current index\n  local sum = 0 -- Track the total # of elements found",
  "  local sum = 0 \n  local i, j = 1, 1 -- Loop counters \n  for i = 1, #nums do\
    \ \n    -- Get first and last digits and compare with the number \n    if nums[i]\
    \ >= 10 then\n      if nums[i] % 10 == 1 then\n        sum = sum + 1 \n      end\
    \ \n      if nums[i] % 10 == 0 then\n        if ((nums[i]-1 % 10) + 1) % 2 ==\
    \ 0 then\n          sum = sum + 1 \n        end \n      end \n    end \n    --\
    \ Get the next number in the array \n    if j == #nums then \n      break \n \
    \   else \n      j = j +1 \n    end \n  end \n  return sum \nend ", "    for _,\
    \ num in pairs(nums) do\n        if (math.floor(num / 10) % 2) and (math.floor(num\
    \ / 100) % 2) then \n            return true \n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nWe can now compare the performance of our custom\
    \ filter with the built-in filter function.", "  -- Write code here\n  local n\
    \ = 0\n  for _, value in pairs(nums) do\n    if value > 10 then\n      if ((value\
    \ % 2) == 1) then\n        n = n + 1\n      end\n      if ((value % 2) == 0) then\n\
    \        n = n + 1\n      end\n    end\n  end\n  return n\nend", "   for _,i in\
    \ ipairs(nums) do\n      if(type(i) == 'number') then\n         if(i > 10 and\
    \ i % 2 == 1 and i % 2 ~= 0) then\n            return true\n         else\n  \
    \          return false\n         end\n      else\n         return false\n   \
    \   end\n   end\nend", "\tlocal count = 0\n\tfor i, v in ipairs(nums) do\n\t\t\
    if v > 10 then\n\t\t\tcount = count + 1\n\t\t\tlocal nv = math.floor(math.abs(v)\
    \ * 100)\n\t\t\tif nv ~= v then\n\t\t\t\tif math.mod(nv, 2) == 1 then\n\t\t\t\t\
    \tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "\tlocal count = 0\n\tfor _, num in pairs(nums) do\n\t\tif num > 10 then\n\
    \t\t\tif num:floor():mod(2) = 1 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn count\nend\nprint(specialFilter([15, -73, 14, -15]))\n\
    print(specialFilter([33, -2, -3, 45, 21, 109]))\n</cell>\n<text>\nProblem #8:\
    \ Write a function that checks if a number is prime or composite. \nFor this,\
    \ we must use sieve of Eratosthenes. A prime number is a natural number greater\
    \ than 1 that has no positive divisors other than 1 itself.\nA composite number\
    \ is a natural number greater than 1 that has at least one positive divisor other\
    \ than 1 itself.", "  local result = 0\n  local n = 1\n  for i = 1,#nums do\n\
    \    if nums[i]>=10 then\n      if nums[i]%2==0 then\n        local firstDigit\
    \ = nums[i]/10\n        if n==1 then\n          result = result+1\n        elseif\
    \ firstDigit%2==1 then\n          result = result+1\n        else\n          result\
    \ = result+2\n        end\n      elseif nums[i]%2==1 then\n        local firstDigit\
    \ = nums[i]/10\n        if n==1 then\n          result = result+1\n        elseif\
    \ firstDigit%2==0 then\n          result = result+1\n        else\n          result\
    \ = result+2\n        end\n      end\n    end\n    n = n+1\n  end\n  return result\n\
    end", "\tlocal total = 0\n\tfor i, v in ipairs(nums) do\n\t\tif v > 10 then\n\t\
    \t\tif v % 2 == 1 then\n\t\t\t\tif i % 2 == 0 then\n\t\t\t\t\ttotal = total +\
    \ 1\n\t\t\t\telse\n\t\t\t\t\ttotal = total + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn total\nend", "  local count = 0\n  for i = 1, #nums do\n    if\
    \ nums[i] > 10 and nums[i]%2 == 1 and nums[i]%2 == 1 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for _, num\
    \ in pairs(nums) do\n    if num > 10 and (num % 2) == 1 and (num % 10) == 1 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    local numsLength,\
    \ numsSize = table.getn(nums)\n    local sum = 0\n    local count = 0", "  local\
    \ count = 0\n  for _, num in ipairs(nums) do\n    if num > 10 and\n       (num\
    \ % 100) and\n       (num % 100) ~= 0 and\n       (num % 100) ~= (num % 10) and\n\
    \       ((num % 10) % 2) and\n       ((num % 10) % 2) ~= ((num % 10) and 1) then\n\
    \        count = count + 1\n    end\n  end\n  return count\nend", "  local count\
    \ = 0\n  local last = 0\n  for i = 1, #nums do\n    -- check whether the number\
    \ is bigger than 10\n    if nums[i] > 10 then\n      count = count + 1\n     \
    \ -- check if the first and last digits are odd\n      if math.floor(nums[i]/10)\
    \ % 2 == 1 then\n        last = i\n      end\n    end\n  end\n  return count\n\
    end", "    -- Your code here\n    local sum = 0\n    for i = 1, #nums do\n   \
    \     if nums[i] > 10 then\n            sum = sum + 1\n            if nums[i]\
    \ % 2 == 1 and nums[i] % 3 == 1 then\n                sum = sum + 2\n        \
    \    end\n        end\n    end\n    return sum\nend", "  local count = 0\n  local\
    \ first = nil\n  local last = nil\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local first_digit = math.floor(num / 10)\n    local last_digit = math.floor((num\
    \ - first_digit * 10) / 10)\n    if last_digit % 2 ~= 0 then\n      count = count\
    \ + 1\n      if first ~= nil and first ~= first_digit then\n        count = count\
    \ - 1\n      end\n      first = first_digit\n      last = last_digit\n    end\n\
    \  end\n  return count\nend", "    local count = 0\n    for i = 1, #nums do\n\
    \        local num  = math.floor(nums[i])\n        local first = math.floor(num\
    \ / 10)\n        local last  = math.floor(num / 100)\n        if first % 2 ==\
    \ 1 and last % 2 == 1 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local count = 0\n    for _, num in ipairs(nums)\
    \ do\n        if (num > 10) and (math.floor(math.log(num)/math.log(10)) == math.floor(math.log(num)/math.log(10)-1))\
    \ and (math.modf(num)[1] % 2 == 1) then\n            count = count + 1\n     \
    \   end\n    end\n    return count\nend", "   local count = 0\n   for index, num\
    \ in ipairs(nums) do\n      if (num > 10 and (num % 2) ~= 0 and (num % 2) ~= 1)\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend",
  "    local count = 0\n    for i = 1, #nums, 2 do\n        if (math.floor((nums[i]\
    \ * 10 + nums[i+1]) % 2) == 1) and\n            (math.floor((nums[i] * 10 + nums[i+1]\
    \ - 1) % 2) == 1) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "   local n = 0\n   for _, num in pairs(nums) do\n  \
    \    n = n + 1\n      if num > 10 then\n         if (((num - 1) mod 2) ~= 0) then\n\
    \            if ((num - 1) mod 3) == 0 then\n               n = n + 1\n      \
    \      end\n         end\n      end\n   end\n   return n\nend", "  for i, v in\
    \ pairs(nums) do\n    if v > 10 and\n      ((v % 2 == 0) and (math.floor(v / 2)\
    \ ~= 0)) and\n      ((v % 2 == 0) and (math.floor(v / 2) ~= math.floor(v / 2)))\n\
    \    then\n      count = count + 1\n    end\n  end\n  return count\nend", "  local\
    \ sum = 0\n  for _, num in ipairs(nums) do\n    sum = sum + num % 2 == 0 and\n\
    \    num % 2 ~= 0 and num % 2 ~= (math.floor(num / 2))\n  end\n  return sum\n\
    end", "  local count = 0\n  for i = 1,#nums do\n    if nums[i] > 10 then\n   \
    \   if ((nums[i] % 2) and (nums[i] % 3)) then\n\tcount = count + 1\n      end\n\
    \    end\n  end\n  return count\nend", "\tlocal count = 0\n\tfor _,v in ipairs(nums)\
    \ do\n\t\tif math.floor(v) ~= v then\n\t\t\tif math.floor(v / 10) % 2 ~= 1 then\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", " \
    \ -- Your code here\n  -- Write your code here\n  return #nums\nend", "  local\
    \ count = 0\n  for i = 1,#nums do\n    if nums[i] > 10 and nums[i] % 2 == 1 and\
    \ nums[i] % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  for _, num in ipairs(nums) do\n    if num > 10 then\n      local first\
    \ = num:sub(1, 1)\n      local last = num:sub(2, 2)\n      if first and last and\
    \ first % 2 and last % 2 then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "   local count = 0\n   for _, v in ipairs(nums) do\n \
    \     if v > 10 then\n         if mod(v, 2) == 1 then\n            count = count\
    \ + 1\n         end\n      end\n   end\n   return count\nend", "  if nums == nil\
    \ or #nums == 0 then\n    return nil\n  end\n  local i = 0\n  local sum = 0\n\
    \  \n  -- If there are no odd digits at the beginning, the number is even\n  if\
    \ nums[1] ~= 0 then\n    i = 2\n    sum = nums[1]\n  end", "    local count =\
    \ 0\n    for i = 1, #nums do\n        if nums[i] > 10 then\n            if nums[i]\
    \ % 2 ~= 1 and nums[i] % 2 ~= 0 then\n                count = count + 1\n    \
    \        end\n        end\n    end\n    return count\nend", "   local numsLength\
    \ = #nums\n   if not numsLength then return 0 end\n   \n   -- If there are no\
    \ elements in the array\n   if numsLength == 1 then return 0 end\n   \n   -- Initialize\
    \ sum\n   local sum = 0\n   \n   -- Initialize flag\n   local flag = true\n  \
    \ \n   -- Loop through each element in the array\n   for i=1, numsLength do\n\
    \      \n      -- Check if the current number is greater than 10\n      if flag\
    \ and nums[i] <= 10 then\n         sum = sum + 1 \n         flag = false\n   \
    \   end\n      \n      -- Check if the first and last digits are odd\n      if\
    \ flag and (not nums[i] % 2) then\n         sum = sum + 1 \n         flag = false\n\
    \      end\n   end\n   \n   -- Return the number of elements in the array that\
    \ are greater than 10 \n   -- and both first and last digits are odd (e.g. 1,\
    \ 3, 5, 7, 9)\n   return sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
