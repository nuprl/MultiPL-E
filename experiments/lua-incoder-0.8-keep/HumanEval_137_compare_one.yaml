name: HumanEval_137_compare_one
language: lua
prompt: "-- Create a function that takes integers, floats, or strings representing\n\
  -- real numbers, and returns the larger variable in its given variable type.\n--\
  \ Return None if the values are equal.\n-- Note: If a real number is represented\
  \ as a string, the floating point might be . or ,\n-- compare_one(1, 2.5) \u279E\
  \ 2.5\n-- compare_one(1, \"2,3\") \u279E \"2,3\"\n-- compare_one(\"5,1\", \"6\"\
  ) \u279E \"6\"\n-- compare_one(\"1\", 1) \u279E None\nlocal function compare_one(a,\
  \ b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = compare_one\n\
  \    lu.assertEquals(candidate(1, 2), 2)\n    lu.assertEquals(candidate(1, 2.5),\
  \ 2.5)\n    lu.assertEquals(candidate(2, 3), 3)\n    lu.assertEquals(candidate(5,\
  \ 6), 6)\n    lu.assertEquals(candidate(1, '2,3'), '2,3')\n    lu.assertEquals(candidate('5,1',\
  \ '6'), '6')\n    lu.assertEquals(candidate('1', '2'), '2')\n    lu.assertEquals(candidate('1',\
  \ 1), None)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if type(a) == 'number' and type(b) == 'number' then\n    if b < a\
    \ then\n      return b\n    end\n    if a < b then\n      return a\n    end\n\
    \  end\n  if type(a) == 'string' and type(b) == 'string' then\n    if b:match(\"\
    ^-?%d*\\.%d*$\") then\n      return b\n    end\n    if a:match(\"^-?%d*\\.%d*$\"\
    ) then\n      return a\n    end\n  end\n  if type(a) == 'table' and type(b) ==\
    \ 'table' then\n    if #a > #b then\n      return b\n    end\n    if #a < #b then\n\
    \      return a\n    end\n  end\nend", "  a = tostring(a:type())\n  b = tostring(b:type())\n\
    \  if a:match(\"integer\") then\n    a = tonumber(a)\n  end\n  if b:match(\"integer\"\
    ) then\n    b = tonumber(b)\n  end\n  if a:match(\"float\") then\n    a = tonumber(a)\n\
    \  end\n  if b:match(\"float\") then\n    b = tonumber(b)\n  end\n  if a == \"\
    number\" then\n    a = a:lower()\n  end\n  if b == \"number\" then\n    b = b:lower()\n\
    \  end\n  if a == b then\n    return nil\n  elseif a:isdigit() then\n    return\
    \ b\n  elseif b:isdigit() then\n    return a\n  else\n    return b\n  end\nend",
  "\t-- If the types are different, return None\n\tif type(a) ~= type(b) then\n\t\t\
    return None\n\tend", "  if a ~= b then\n    if type(a) == 'string' then a = tonumber(a)\
    \ end\n    if type(b) == 'string' then b = tonumber(b) end\n    if type(a) ==\
    \ 'number' and type(b) == 'number' then\n      if a > b then\n        return a\n\
    \      elseif b > a then\n        return b\n      else\n        return a\n   \
    \   end\n    end\n  end\n  return nil\nend", "  if type(b) ~= 'table' then return\
    \ {a, b} end\n  if a==b then return nil end\n  if a==0 then return 'integer' end\n\
    \  if b==0 then return 'integer' end\n  if type(a) == 'number' and type(b) ==\
    \ 'string' then\n    if a ~= tonumber(b) then return {a, b} end\n  elseif a ==\
    \ 'string' and b == 'string' then\n    if a ~= tostring(b) then return {a, b}\
    \ end\n  elseif a == 'table' and b == 'table' then\n    if #a ~= #b then return\
    \ {a, b} end\n    for i,v in ipairs(a) do\n      if v ~= b[i] then return {a,\
    \ b} end\n    end\n  elseif a ~= b then return {a, b} end\n  return a\nend", " \
    \ if a == b then return true end\n  if type(a) == \"string\" and type(b) == \"\
    string\" then\n    if a == b then\n      return true\n    else\n      if a:sub(1,\
    \ 1) == b and b:sub(1, 1) == \".\" then\n        return true\n      else\n   \
    \     if a:sub(1, 1) == \"-\" and b == \"-\" then\n          return true\n   \
    \     end\n      end\n    end\n  end\n  if type(a) == \"table\" and type(b) ==\
    \ \"table\" then\n    if #a > #b then\n      return true\n    elseif #a == #b\
    \ then\n      for i = 1, #a do\n        if compare_one(a[i], b[i]) then\n    \
    \      return true\n        end\n      end\n    end\n  end\n  return false\nend",
  "  if a == nil then\n    return b\n  elseif b == nil then\n    return a\n  else\n\
    \    if type(a) == type(b) then\n      if a%number == b%number then\n        return\
    \ b\n      elseif a%string == b%string then\n        return a\n      end\n   \
    \ end\n  end\nend", "    local a_value = tonumber(a) -- If string, convert to\
    \ number\n    local b_value = tonumber(b) -- If string, convert to number\n  \
    \  if a_value == b_value then\n        return a_value\n    elseif type(a_value\
    \ ~= \"number\" or b_value ~= \"number\") and a_value == b_value then\n      \
    \  return b_value -- If they're both numbers, return their value\n    elseif type(a_value\
    \ ~= \"number\" or b_value ~= \"number\") and a_value ~= b_value then\n      \
    \  return a_value -- If either is a string, return string\n    else\n        return\
    \ nil -- If neither are numbers or strings, return None\n    end\nend\n</code>\n\
    <|/ a tags=lua |>\n<| c |>\nThanks for your answer. I'm new to lua, so I needed\
    \ an explanation as to how this works. As the other answers said, `tostring()`\
    \ would be the correct way to convert a number to a string if you want it to be\
    \ readable as a string.\n<|/ c |>\n<| c |>\nI added some comments and another\
    \ way of doing it in my answer. Hope it helps.\n<|/ c |>\n<| c |>\nYour answer\
    \ is better; it explains why OP's code didn't work.\n<|/ c |>\n<| a |>\nThe only\
    \ problem in your code is that you're trying to compare the string representation\
    \ of a number with a number. When you call tostring(), you are converting your\
    \ number to a string. Try this:\n<code>", "  if type(b) == 'string' then b = tonumber(b)\
    \ end\n  if type(a) == 'string' then a = tonumber(a) end\n  if a < b then\n  \
    \  return a\n  elseif b > a then\n    return b\n  else\n    return nil\n  end\n\
    end", "   if type(a) ~= 'table' and type(a) ~= 'string' then return b end\n  \
    \ if a == b then return end\n   if type(a) ~= 'table' then\n      if type(b) ~=\
    \ 'table' then return b end\n      -- If both are strings, sort them using string\
    \ compare\n      if a:sub(1,1) ~= '.' and b:sub(1,1) ~= '.' then\n         local\
    \ a1, a2 = a:gsub('([^%s])', function(a) return a:lower() end), b:gsub('([^%s])',\
    \ function(a) return a:lower() end)\n         a1, a2 = a1:gsub('(.)', function(a)\
    \ return a:upper() end), a2:gsub('(.)', function(a) return a:upper() end)\n  \
    \       return a1 > a2 and 1 or -1\n      end\n   end\n   -- If both are tables,\
    \ compare them\n   if type(a) == 'table' and type(b) == 'table' then\n      local\
    \ akeys, avals = a:keys(), a:values()\n      local bkeys, bvals = b:keys(), b:values()\n\
    \      if akeys == bkeys then\n         if #avals == #bvals then\n           \
    \ -- If both are tables, compare the values\n            for k, v in pairs(avals)\
    \ do\n               local result = compare_one(v, bvals[k])\n               if\
    \ result == 1 then return end\n               if result == -1 then\n         \
    \         if type(v) ~= 'number' or type(b) ~= 'number' then return v end\n  \
    \                return -v, -b\n               end\n            end\n        \
    \    return nil\n         else\n            -- If only one is a table, return\
    \ the other table\n            return compare_one(b, bvals)\n         end\n  \
    \    else\n         -- If both tables have different numbers of keys, return nil\n\
    \         return nil\n      end\n   end\n   if type(a) ~= 'number' or type(b)\
    \ ~= 'number' then return b end\n   if type(a) ~= 'number' then a = tonumber(a)\
    \ end\n   if type(b) ~= 'number' then b = tonumber(b) end\n   return math.max(a,\
    \ b)\nend", "  if a ~= b then\n    return b\n  end\n  return None\nend", "  if\
    \ type(a) == 'number' and type(b) == 'number' then\n    if a < b then\n      return\
    \ a\n    elseif b < a then\n      return b\n    else\n      return a\n    end\n\
    \  elseif type(a) == 'table' and type(b) == 'number' then\n    if a < b then\n\
    \      return b\n    elseif b < a then\n      return a\n    else\n      return\
    \ b\n    end\n  elseif type(b) == 'table' and type(a) == 'number' then\n    if\
    \ a < b then\n      return a\n    elseif b < a then\n      return b\n    else\n\
    \      return a\n    end\n  elseif type(a) == 'string' and type(b) == 'string'\
    \ then\n    if a:sub(1, 1) == b or b:sub(1, 1) == a then\n      return a\n   \
    \ else\n      return b\n    end\n  else\n    return b\n  end\nend", "\tif type(a)\
    \ == 'number' and type(b) == 'number' then\n\t\tif a > b then\n\t\t\treturn a\n\
    \t\telseif a == b then\n\t\t\treturn None\n\t\telse\n\t\t\treturn b\n\t\tend\n\
    \telseif type(a) == 'string' and type(b) == 'string' then\n\t\tif a > b then\n\
    \t\t\treturn b\n\t\telseif a == b then\n\t\t\treturn a\n\t\telse\n\t\t\treturn\
    \ None\n\t\tend\n\telse\n\t\treturn nil\n\tend\nend", "    local vartype = type(a\
    \ or b)\n    if vartype == \"number\" then\n        if math.abs(a) > math.abs(b)\
    \ then\n            return b\n        else\n            return a\n        end\n\
    \    elseif vartype == \"string\" then\n        -- Resolve the comma separated\
    \ value first\n        local a1, a2, a3 = a:match(\"^[%w'-]+,[%w'-]+,[%w'-]+$\"\
    )\n        if a1 ~= a2 and a1 ~= a3 then\n            return compare_one(a1, a2)\n\
    \        else\n            return compare_one(a1, a3)\n        end\n    elseif\
    \ vartype == \"table\" then\n        if compare_one(a[1], a[2]) then\n       \
    \     return compare_one(a[3], a[4])\n        end\n    end", "  if a == b then\
    \ return end\n  if type(a) == \"number\" and type(b) == \"number\" then\n    if\
    \ math.floor(a) == math.floor(b) then\n      return a\n    end\n  end\n  if type(a)\
    \ == \"string\" then\n    a = a:gsub(\",\", \" \")\n    b = b:gsub(\",\", \" \"\
    )\n    if a:len() < b:len() then\n      return a\n    else\n      return b\n \
    \   end\n  end\n  if type(b) == \"string\" then\n    a = a:gsub(\",\", \" \")\n\
    \    b = b:gsub(\",\", \" \")\n    if a:len() < b:len() then\n      return b\n\
    \    else\n      return a\n    end\n  end\n  return nil\nend", "    if type(a)\
    \ == type(b) then\n        if a == b then\n            return a\n        elseif\
    \ type(a) == \"string\" then\n            local a_, b_ = string.match(a, \"^(-?%d+)(%d*)$\"\
    ) or {a=a, b=0}, string.match(b, \"^(-?%d+)(%d*)$\") or {a=b, b=0}\n         \
    \   return compare_one(a_[1], b_[1])\n        elseif type(a) == \"table\" then\n\
    \            if type(b) == \"table\" then\n                if #a == #b then\n\
    \                    local c_, d_ = #a, #b\n                    local i = 0\n\
    \                    while i < c_ and i < d_ do\n                        local\
    \ i_ = compare_one(a[i], b[i])\n                        if i_ ~= nil then return\
    \ i_ end\n                        i = i + 1\n                    end\n       \
    \             while i < d_ do\n                        local i_ = compare_one(a[i],\
    \ b[i])\n                        if i_ ~= nil then return nil end\n          \
    \              i = i + 1\n                    end\n                    while i\
    \ < c_ do\n                        local i_ = compare_one(a[i], b[i])\n      \
    \                  if i_ ~= nil then return nil end\n                        i\
    \ = i + 1\n                    end\n                    -- If we're here, the\
    \ two tables have the same number of entries,\n                    -- so we can\
    \ compare them.\n                    if #a == #b then\n                      \
    \  return a\n                    elseif #a < #b then return a end\n          \
    \      elseif #a < #b then\n                    return b\n                else\n\
    \                    return a\n                end\n            elseif #b == #a\
    \ then\n                return b\n            else\n                return a\n\
    \            end\n        elseif type(a) == \"number\" then\n            return\
    \ compare_one(b, a)\n        elseif type(b) == \"number\" then\n            return\
    \ compare_one(a, b) -- Compare numbers alphabetically\n        elseif type(a)\
    \ == \"boolean\" then\n            return compare_one(b, a)\n        elseif type(b)\
    \ == \"boolean\" then\n            return compare_one(a, b)\n        elseif type(a)\
    \ == \"function\" then\n            return compare_one(a(), b())\n        elseif\
    \ type(b) == \"function\" then\n            return compare_one(a(), b())\n   \
    \     else\n            return nil\n        end\n    else\n        return nil\n\
    \    end\nend", "  local function try_convert(v)\n    if type(v) == 'string' and\
    \ v:match(\"^[-+]?%d+$\") then\n      return tonumber(v)\n    end\n    return\
    \ v\n  end", "  if a == b then return nil end\n  local type_a, type_b = type(a),\
    \ type(b)\n  if type_a == \"string\" then\n    if type_b == \"string\" then\n\
    \      if a == b then return nil end\n      if a~=b and b~=a then return b end\n\
    \    end\n  elseif type_b == \"string\" then\n    if type_a == \"string\" then\n\
    \      if a~=b and b~=a then return b end\n    end\n  end\n  if type_a~=type_b\
    \ then return b end\n  -- Both are numbers\n  if b~=a then return b end\n  if\
    \ type_a == \"number\" then -- Strings only\n    local astr, bstr\n    if a ==\
    \ \".\" then astr=\".\" elseif a==\",\" then astr=\",\" elseif a==\"\" then astr=\"\
    \" else\n      astr=string.format(\"%0.1f\", a)\n    end\n    if b == \".\" then\
    \ bstr=\".\" elseif b==\",\" then bstr=\",\" elseif b==\"\" then bstr=\"\" else\n\
    \      bstr=string.format(\"%0.1f\", b)\n    end\n    if astr == bstr then return\
    \ nil end\n    local ans = astr .. bstr\n    if ans > \"1.\" and ans < \"5\" then\
    \ return ans end\n  end\n  return a\nend", "   if type(a) == type(b) then\n  \
    \    if type(a) == \"number\" then\n         if type(b) == \"number\" then\n \
    \           if b < a then\n               return a\n            else\n       \
    \        return b\n            end\n         else\n            local aux = b\n\
    \            b = a\n            a = aux\n         end\n      else\n         if\
    \ type(b) == \"number\" then\n            if a > b then\n               return\
    \ b\n            else\n               return a\n            end\n         else\n\
    \            local aux = b\n            b = a\n            a = aux\n         end\n\
    \      end\n   else\n      return nil\n   end\nend", "  if a ~= b then\n    return\
    \ a\n  else\n    return b\n  end\nend", "  if type(a) ~= 'table' then return b\
    \ end\n  if type(b) ~= 'table' then return a end\n  if a:isnumeric() then\n  \
    \  local v1, v2 = tonumber(a), tonumber(b)\n    if v1 == nil or v2 == nil then\
    \ return nil end\n    if v1 < v2 then return b end\n    if v1 > v2 then return\
    \ a end\n    return a\n  else\n    local v1, v2 = a:match('(.-):(%d+)$')\n   \
    \ return b if (v1 == b) or (v2 == b) end\n  end\nend", "    if type(a) ~= type(b)\
    \ then return nil end\n    if type(b) ~= 'string' then return tonumber(a) > tonumber(b)\
    \ end\n    -- If the first character is a number, we assume it to be a float,\
    \ and compare\n    -- that to the floating point value after the comma\n    if\
    \ a:sub(1,1) ~= '' then a = a:sub(2) end\n    -- If the second character is a\
    \ number, we assume it to be a float, and compare\n    -- that to the floating\
    \ point value after the comma\n    if b:sub(1,1) ~= '' then b = b:sub(2) end\n\
    \    -- If the first character is a letter and the first character after\n   \
    \ -- it is a letter, we assume it to be a string, and compare them that\n    --\
    \ way\n    if a:sub(1,1) == '[' and a:sub(2):sub(1,1) ~= '[' then return tonumber(a)\
    \ > tonumber(b) end\n    return tonumber(a) > tonumber(b)\nend\n</code>\n<|/ a\
    \ |>\n<| a tags=lua,lua-table dscore=2 |>\nI've used a similar approach to this,\
    \ and I've noticed some issues with some of the other answers. Namely that they\
    \ don't account for nil values, or values where no comparator is present, etc.\n\
    Here is my solution which also handles comparing nil values:\n<code>", "  if type(torch._six.tonumber)(a)\
    \ == type(torch._six.tonumber(b)) then\n    return a > b\n  else\n    return a\
    \ > b or type(b) == 'string'\n  end\nend", "\tif type(a) ~= type(b) then\n\t\t\
    return a\n\telseif type(a) == 'string' then\n\t\treturn a\n\telseif type(a) ==\
    \ 'number' then\n\t\treturn a > b\n\telse\n\t\treturn false\n\tend\nend", "  if\
    \ a == b then return end\n  if a == nil or b == nil then return end\n  if type(a)\
    \ == \"number\" and type(b) == \"number\" then\n    if a == b then return end\n\
    \    if a < b then return b else return a end\n  else\n    if type(a) == \"string\"\
    \ and type(b) == \"string\" then\n      if a:find(b) > -1 then return b else return\
    \ a end\n    end\n  end\nend", '  if a == b then return end', "    if type(a)\
    \ ~= type(b) then return None end\n    if a == \".\" then return b end\n    if\
    \ a == \",\" then return b end\n    return a\nend", "  if type(a) ~= type(b) then\n\
    \    return nil\n  end\n  if a.getNum() == b.getNum() then\n    if a.is_string\
    \ then\n      return tostring(b) < tostring(a)\n    else\n      return a > b\n\
    \    end\n  end\nend", "  if a == b then\n    return true\n  elseif type(a) ==\
    \ \"number\" and type(b) == \"number\" then\n    if math.isnan(a) or math.isnan(b)\
    \ then\n      return true\n    else\n      return a > b\n    end\n  elseif type(a)\
    \ == \"string\" and type(b) == \"string\" then\n    if a == \".\" or a == \"-\"\
    \ then\n      a = a:sub(1, 1)\n    end\n    if b == \".\" or b == \"-\" then\n\
    \      b = b:sub(1, 1)\n    end\n    if a == b then\n      return true\n    elseif\
    \ a:find(',') then\n      local aa, bb = a:gsub(\"[%]\", \"\")\n      local aa,\
    \ bb = bb or 0, bb or 0\n      if math.abs(math.floor(aa)) != math.floor(aa) or\
    \ math.abs(math.floor(bb)) != math.floor(bb) then\n        return false\n    \
    \  end\n      local aa = math.floor(aa)\n      local bb = math.floor(bb)\n   \
    \   if aa > bb then\n        return true\n      elseif aa == bb then\n       \
    \ if aa < 1000 then\n          return true\n        elseif aa < 9999 then\n  \
    \        return compare_one(\"%.\"..aa..\"f\", b) or compare_one(\"%.\"..aa..\"\
    f\", b)\n        else\n          return compare_one(\"%.\"..aa..\"f\", b)\n  \
    \      end\n      else\n        return false\n      end\n    else\n      return\
    \ false\n    end\n  elseif type(a) == \"table\" and type(b) == \"table\" then\n\
    \    for k, v in pairs(a) do\n      if compare_one(b, v) then\n        return\
    \ true\n      end\n    end\n    return false\n  else\n    return false\n  end\n\
    end", "  if type(a) == 'number' and type(b) == 'number' then\n    return a > b\
    \ and a or b\n  elseif type(a) == 'string' and type(b) == 'string' then\n    if\
    \ a == b then\n      return a\n    else\n      return a > b and a or b\n    end\n\
    \  else\n    return nil\n  end\nend", "  local is_number = tonumber(a) or tonumber(b)\
    \ ~= nil\n  local is_string = string(a) or string(b) ~= nil\n  local is_real =\
    \ is_number and math.type(a ^ b) == 'real'\n  if is_number and is_string then\n\
    \    local pattern = \"^\"..a..\"(%a*)|\"..b..\"(%a*)$\"\n    return a:find(pattern)\
    \ ~= nil and b:find(pattern) ~= nil\n  elseif is_number and is_real then\n   \
    \ return math.abs(a ^ b) > 1e-14\n  elseif is_string then\n    return compare_one(b,\
    \ a) or a > b\n  elseif is_real then\n    return nil\n  end\n  return false\n\
    end", "  if type(b) ~= \"string\" then\n    return tonumber(b) > tonumber(a) --\
    \ Compare numbers if possible\n  else\n    local as, bs = a:match(\"^(-?%d+)%s*(-?%d+)$\"\
    ), b:match(\"^(-?%d+)%s*(-?%d+)$\")\n    if as and bs then\n      return tonumber(as)\
    \ > tonumber(bs) -- Compare strings first and try ints if possible\n    end\n\
    \    if a < b then\n      return true\n    end\n    return false\n  end\nend",
  "    if type(a) ~= type(b) then return end\n    if type(a) == \"number\" then\n\
    \        if math.fabs(a - b) < 0.0001 then return end\n    end\n    if type(a)\
    \ == \"string\" then\n        local aa, bb = string.match(a, \"^(-?%d+)(.-%d+)?$\"\
    )\n        local aaa = aa and tonumber(aa)\n        local bbb = bb and tonumber(bb)\n\
    \        if aaa and bbb and aaa == bbb then return end -- same float representation\n\
    \        if aaa or bbb then return end\n    end\nend", "  if type(a) == type(b)\
    \ then\n    if type(a) == 'number' then\n      return a > b\n    elseif type(b)\
    \ == 'number' then\n      return a > b\n    elseif type(a) == 'string' then\n\
    \      a = tonumber(a)\n      b = tonumber(b)\n      if a and b then\n       \
    \ return a > b\n      else\n        return a ~= '' and b or a ~= ''\n      end\n\
    \    end\n  end\n  return nil\nend", "    if a ~= b then\n        return b\n \
    \   end\nend", "  if a ~= b then\n    return a > b\n  else\n    return a\n  end\n\
    end", "\tif type(a) ~= \"table\" or not type(b) ~= \"table\" then\n\t\treturn\
    \ nil\n\tend", "  if a == b then\n    return a\n  elseif type(b) == \"number\"\
    \ then\n    return a\n  elseif type(a) == \"number\" then\n    return b\n  elseif\
    \ type(a) == \"string\" and type(b) == \"string\" then\n    return tonumber(a)\n\
    \  elseif type(a) == \"string\" and type(b) == \"table\" then\n    return compare_one(tonumber(a),\
    \ b)\n  elseif type(b) == \"string\" and type(a) == \"table\" then\n    return\
    \ compare_one(a, b + 0.01)\n  elseif type(b) == \"table\" and type(a) == \"table\"\
    \ then\n    return compare_one(a, b, 0.02)\n  elseif type(a) == \"table\" and\
    \ type(b) == \"table\" then\n    if type(a[0]) == \"string\" then\n      -- a\
    \ is a string\n      local function compare(a, b, m)\n        local m = m or 0.01\n\
    \        if type(b) == \"number\" then\n          return compare_one(a, b + m)\n\
    \        elseif type(a) == \"number\" then\n          return compare_one(b + m,\
    \ a)\n        else\n          -- If b is string and is a string, we assume that\
    \ the string is a number in a string.\n          -- We try to parse it.\n    \
    \      local res, err = compare_one(tonumber(b), tonumber(a))\n          return\
    \ res, err\n        end\n      end\n      return compare(a, b, 0.01)\n    elseif\
    \ type(a[0]) == \"number\" then\n      -- a is a number\n      local function\
    \ compare(a, b, m)\n        local m = m or 0.01\n        if type(b) == \"number\"\
    \ then\n          return compare_one(a, b + m)\n        elseif type(a) == \"number\"\
    \ then\n          return compare_one(b + m, a)\n        else\n          -- If\
    \ b is string and is a string, we assume that the string is a number in a string.\n\
    \          -- We try to parse it.\n          local res, err = compare_one(a, b\
    \ + m)\n          return res, err\n        end\n      end\n      return compare(a,\
    \ b, 0.01)\n    else\n      return nil, \"Error: Both arguments must be numbers\
    \ or strings\"\n    end\n  else\n    return nil, \"Error: Both arguments must\
    \ be numbers or strings\"\n  end\nend", "  if type(a or \"\") == \"string\" then\n\
    \    a = tonumber(a)\n  end\n  if type(b or \"\") == \"string\" then\n    b =\
    \ tonumber(b)\n  end\n  if a == b then\n    return true\n  end\n  if type(a) ==\
    \ \"number\" then\n    if a > b then\n      return true\n    end\n    return false\n\
    \  end\n  if type(b) == \"number\" then\n    if a < b then\n      return true\n\
    \    end\n    return false\n  end\n  return None\nend", "    local t1 = type(a)\n\
    \    local t2 = type(b)\n    if t1 == t2 then\n        return tonumber(a) > tonumber(b)\
    \ and a or b\n    elseif t1 ~= 'string' and t1 ~= 'number' then\n        return\
    \ a\n    end\n    return tonumber(a) > tonumber(b) and a or b\nend", "  local\
    \ is_real = type(b) == \"number\"\n  local is_number = is_real or type(b) == \"\
    string\"", "  if a == b then return end\n  if type(rawget(a, \"real\")) == \"\
    number\" and type(rawget(b, \"real\")) == \"number\" then\n    if a == b then\
    \ return end\n  elseif type(rawget(a, \"string\")) == \"number\" and type(rawget(b,\
    \ \"string\")) == \"number\" then\n    if a == b then return end\n  else\n   \
    \ if type(b) == \"table\" and type(a) == \"table\" then\n      a = a[1]\n    \
    \  b = b[1]\n    end\n    if type(a) == \"table\" and type(b) == \"table\" then\n\
    \      a = a[1]\n      b = b[1]\n    end\n  end", "    local v1, v2, v3 = a:is(ast.typed.expr.ID)\
    \ and a.value, b.value, b.value\n    if v1 == v2 and v2 ~= \"\" then return v2\
    \ end\n    if v2 == v1 and v1 ~= \"\" then return v1 end\n    if v1 == v2 == v3\
    \ then return nil end\n    if ast.typed.expr.is_number(v1) then\n        if ast.typed.expr.is_number(v3)\
    \ then\n            return compare_one(ast.typed.expr.Number(v1), ast.typed.expr.Number(v3))\n\
    \        end\n        return compare_one(ast.typed.expr.Number(v1), v3)\n    end\n\
    \    if ast.typed.expr.is_string(v1) then\n        if ast.typed.expr.is_string(v2)\
    \ then\n            return compare_one(ast.typed.expr.String(v1), ast.typed.expr.String(v2))\n\
    \        end\n        return compare_one(ast.typed.expr.String(v1), v2)\n    end\n\
    \    return nil\nend", "    if type(a) ~= 'number' or type(b) ~= 'number' then\n\
    \        return nil\n    end\n    if a == b then\n        return nil\n    end\n\
    \    if a > b then\n        return a\n    end\n    return b\nend", "  if type(a)\
    \ == \"number\" and type(b) == \"number\" then\n    if math.abs(a - b) < TOLERANCE\
    \ then return b end\n  end\n  if type(a) == \"number\" then\n    if a > b then\
    \ return a end\n  end\n  if type(b) == \"number\" then\n    if a < b then return\
    \ a end\n  end\n  if a == b then return nil end\n  if type(a) == \"string\" and\
    \ type(b) == \"string\" then\n    if a:len() < b:len() then return b end\n   \
    \ if a:len() > b:len() then return a end\n    if a:sub(1, 1) == b:sub(1, 1) then\
    \ return compare_one(a.sub(2), b.sub(2))\n      if a:sub(2, 1) == b:sub(2, 1)\
    \ then return compare_one(a.sub(3, 2), b.sub(3, 2))\n        if a:sub(3, 1) ==\
    \ b:sub(3, 1) then return compare_one(a.sub(4, 2), b.sub(4, 2))\n          if\
    \ a:sub(4, 1) == b:sub(4, 1) then return compare_one(a.sub(5), b.sub(5))\n   \
    \         if a:sub(5) == b:sub(5) then return compare_one(a.sub(6), b.sub(6))\n\
    \              if a:sub(6) == b:sub(6) then return compare_one(a.sub(7), b.sub(7))\n\
    \                if a:sub(7) == b:sub(7) then return compare_one(a.sub(8), b.sub(8))\n\
    \                  if a:sub(8) == b:sub(8) then return compare_one(a.sub(9), b.sub(9))\n\
    \                    if a:sub(9) == b:sub(9) then return compare_one(a.sub(10),\
    \ b.sub(10))\n                      if a:sub(10) == b:sub(10) then return compare_one(a.sub(11),\
    \ b.sub(11))\n                        if a:sub(11) == b:sub(11) then return compare_one(a.sub(12),\
    \ b.sub(12))\n                          if a:sub(12) == b:sub(12) then return\
    \ compare_one(a.sub(13), b.sub(13))\n                            if a:sub(13)\
    \ == b:sub(13) then return compare_one(a.sub(14), b.sub(14))\n               \
    \               if a:sub(14) == b:sub(14) then return compare_one(a.sub(15), b.sub(15))\n\
    \                                if a:sub(15) == b:sub(15) then return compare_one(a.sub(16),\
    \ b.sub(16))\n                                  if a:sub(16) == b:sub(16) then\
    \ return compare_one(a.sub(17), b.sub(17))\n                                 \
    \   if a:sub(17) == b:sub(17) then return compare_one(a.sub(18), b.sub(18))\n\
    \                                      if a:sub(18) == b:sub(18) then return compare_one(a.sub(19),\
    \ b.sub(19))\n                        if a:sub(19) == b:sub(19) then return compare_one(a.",
  "  if a == b then return end\n  if type(a) == \"number\" and type(b) == \"number\"\
    \ then\n    if math.abs(a) > math.abs(b) then\n      return b\n    else\n    \
    \  return a\n    end\n  end\n  if type(a) == \"number\" and type(b) ~= \"string\"\
    \ then\n    return a\n  end\n  if type(b) == \"number\" and type(a) ~= \"string\"\
    \ then\n    return b\n  end\n  if type(a) ~= \"string\" and type(b) ~= \"string\"\
    \ then\n    return nil\n  end\n  local a_arr = a:match(\"^-?%d+%.?%d*,?%d*$\"\
    )\n  local b_arr = b:match(\"^-?%d+%.?%d*,?%d*$\")\n  if a_arr and b_arr then\n\
    \    local a_i, a_f = tonumber(a_arr[1]), tonumber(a_arr[2])\n    local b_i, b_f\
    \ = tonumber(b_arr[1]), tonumber(b_arr[2])\n    if a_i == b_i and a_f == b_f then\n\
    \      return compare_one(a_f, b_f)\n    end\n  end\n  return nil\nend", "  if\
    \ type(b) ~= \"number\" then\n    if type(b) == \"string\" then\n      b = tonumber(b)\n\
    \    else\n      return false\n    end\n  end\n  if type(a) ~= \"number\" then\n\
    \    if type(a) == \"string\" then\n      a = tonumber(a)\n    else\n      return\
    \ false\n    end\n  end\n  if math.abs(a - b) < 1e-8 then\n    return true\n \
    \ elseif math.abs(a - b) > 1e-8 then\n    return false\n  else\n    return nil\n\
    \  end\nend", "  if type(a) ~= \"number\" or type(b) ~= \"number\" then return\
    \ end\n  if a == b then return end\n  if a > b then return b end\n  return a\n\
    end", "    if type(a) ~= type(b) then return end\n    if type(a) == \"string\"\
    \ then\n        a = tonumber(a)\n        b = tonumber(b)\n    end\n    if a ~=\
    \ b then return end\n    return b\nend", "  if type(a) == type(b) then\n    if\
    \ type(a) == 'number' and type(b) == 'number' then\n      if math.abs(a-b) < TOLERANCE\
    \ then\n        return a\n      else\n        return b\n      end\n    elseif\
    \ type(a) == 'string' then\n      if b == '' then\n        return a\n      elseif\
    \ b == '.' then\n        return a\n      elseif b == ',' then\n        return\
    \ a\n      else\n        return b\n      end\n    elseif type(b) == 'string' then\n\
    \      if a == '' then\n        return b\n      elseif a == '.' then\n       \
    \ return b\n      elseif a == ',' then\n        return b\n      else\n       \
    \ return a\n      end\n    else\n      return nil\n    end\n  else\n    return\
    \ nil\n  end\nend", "   if tonumber(a) == tonumber(b) then\n      return a\n \
    \  elseif type(b) == 'string' then\n      if string.sub(b, 1, 1) == string.sub(a,\
    \ 2, 1) then\n         return b\n      elseif string.sub(b, 1, 1) == '-' and string.sub(a,\
    \ 2, 1) == '-' then\n         return compare_one(b, string.sub(a, 3))\n      else\n\
    \         return b\n      end\n   elseif type(b) == 'table' then\n      if a[1]\
    \ == b[1] and a[2] == b[2] then\n         return b\n      else\n         return\
    \ b\n      end\n   elseif type(b) == 'number' then\n      return b\n   end\nend",
  "  if type(a) ~= type(b) then return false end\n  local a_str = string.format(\"\
    #%b\", a)\n  local b_str = string.format(\"#%b\", b)\n  return a_str == b_str\n\
    end", "    local type_a = type(a)\n    local type_b = type(b)\n    if type_a ~=\
    \ type_b then return type_a end\n    if type_a == \"number\" then\n        if\
    \ a == b then return nil end\n        if a < b then return b end\n        if a\
    \ > b then return a end\n    elseif type_a == \"string\" then\n        local a_parts\
    \ = a:match(\"([^,]*)\")\n        local b_parts = b:match(\"([^,]*)\")\n     \
    \   if a_parts == b_parts then return nil end\n        if a_parts < b_parts then\
    \ return b end\n        if a_parts > b_parts then return a end\n    elseif type_a\
    \ == \"table\" then\n        if a:len() < b:len() then return b end\n        if\
    \ a:len() > b:len() then return a end\n        for i = 1, #a do\n            local\
    \ a_x = a[i] or a\n            local b_x = b[i] or b\n            local cmp =\
    \ compare_one(a_x, b_x)\n            if cmp ~= nil then\n                return\
    \ cmp\n            end\n        end\n    end\nend", "    if a == b then return\
    \ end\n    if type(a) == 'number' and type(b) == 'string' then\n        return\
    \ compare_one(float(a), b)\n    end\n    return a\nend", "  if type(a == 'string')\
    \ then\n    a = tonumber(a)\n  end\n  if type(b == 'string') then\n    b = tonumber(b)\n\
    \  end\n  local a_is_int = type(a) == 'integer'\n  local b_is_int = type(b) ==\
    \ 'integer'\n  if a_is_int and b_is_int then\n    if a < b then\n      return\
    \ a\n    elseif b < a\n      return b\n    else\n      return None\n    end\n\
    \  elseif a_is_int then\n    return b\n  elseif b_is_int then\n    return a\n\
    \  else\n    return a\n  end\nend", "  if type(a) ~= 'number' then a = tonumber(a)\
    \ end\n  if type(b) ~= 'number' then b = tonumber(b) end\n  if a < b then return\
    \ b end\n  if a > b then return a end\n  return nil\nend", "  if type(b) ~= \"\
    number\" then\n    b = tonumber(b)\n  end", "  if a == b then\n    return true\n\
    \  elseif type(a) ~= type(b) then\n    return false\n  elseif type(a) == \"string\"\
    \ then\n    if string.format(\"%0.f\", a) == string.format(\"%0.f\", b) then\n\
    \      return true\n    elseif string.format(\"%0.f\", a) == string.format(\"\
    %0.f\", a) then\n      return false\n    else\n      return a < b\n    end\n \
    \ else\n    return a > b\n  end\nend", "    local a_type = type(a)\n    local\
    \ b_type = type(b)", "  if type(a) ~= type(b) then return nil end\n  if type(a)\
    \ == \"number\" then\n    if type(b) == \"number\" then return b end\n    if b\
    \ == \"inf\" or b == \"nan\" then return b end\n  end\n  if type(b) == \"number\"\
    \ then\n    if type(a) == \"number\" then return a end\n    if a == \"inf\" or\
    \ a == \"nan\" then return a end\n  end\n  if type(a) == \"string\" then\n   \
    \ if type(b) == \"string\" then return b end\n    if b == \"inf\" or b == \"nan\"\
    \ then return b end\n  end\n  if a == b then return nil end\n  if type(b) == \"\
    string\" then return nil end\n  if type(a) == \"string\" then return nil end\n\
    \  return b\nend", "  if a == b then return end\n  if a ~= type(a) or b ~= type(b)\
    \ then return end\n  local a_is_real = type(a) == 'number' and type(a:sub(1,1))\
    \ == '+'\n  if a_is_real then\n    if a > b then return b end\n    if a == b then\
    \ return end\n  end\n  local a_is_int = type(a) == 'number' and type(a:sub(1,1))\
    \ == '-'\n  if a_is_int then\n    if a < b then return b end\n    if a == b then\
    \ return end\n  end\n  if a:find('^-%d+%.?%d+$') then\n    if type(b) == 'string'\
    \ then\n      b = tonumber(b)\n      if not b or b < 0 then\n        -- We use\
    \ .<= so that -1 is returned in order from largest to smallest.\n        if a\
    \ <= 0 then return '-' end\n        return b\n      end\n      local sign = a:sub(1,1)\n\
    \      local abs, rem = a:gsub('^%d+%.?%d+$', '%-%d+%.?')\n      if sign ~= '+'\
    \ and sign ~= '-' then\n        abs = abs .. '-'\n        sign = '-'\n      end\n\
    \      if rem ~= '' then\n        abs = abs .. '-' .. rem\n        rem = ''\n\
    \      end\n      if a == '0' then\n        return abs .. '0' .. rem\n      end\n\
    \      return abs .. sign\n    elseif type(b) == 'table' then\n      b = compare_one(b,\
    \ a)\n      if b then return end\n      -- Otherwise, compare against the largest\
    \ numeric type possible\n      local _, largest = pairs(b) -- Get the largest\
    \ numeric type\n      if largest == a then return end\n      local _, smallest\
    \ = pairs(b) -- Get the smallest numeric type\n      if smallest == a then return\
    \ end\n      if largest > a then return largest end\n      if smallest < a then\
    \ return smallest end\n    end\n  end\n  if a ~= b then return end\n  -- Strings\
    \ are compared byte for byte so we don't need to worry about them\n  if tostring(a)\
    \ == tostring(b) then return end\n  if type(a) == 'number' and type(b) == 'number'\
    \ then\n    local a_is_fractional = type(a) == 'number' and a % 1\n    local b_is_fractional\
    \ = type(b) == 'number' and b % 1\n    if a_is_fractional and b_is_fractional\
    \ then\n      return compare_one(a * 1000000, b * 1000000)\n    end\n    if a_is_fractional ",
  "  if a == '' or b == '' then return nil end\n  if a:sub(1, 1) == '\"' and b:sub(1,\
    \ 1) == '\"' then a = a:sub(2, -2) end\n  if b:sub(1, 1) == '\"' and a:sub(1,\
    \ 1) == '\"' then b = b:sub(2, -2) end\n  if a == b or a:sub(1, 1) == b:sub(1,\
    \ 1) then return nil end\n  if a:sub(1, 1) == '\"' and b:sub(1, 1) == '\"' then\
    \ a = a:sub(2, -2) end\n  if b:sub(1, 1) == '\"' and a:sub(1, 1) == '\"' then\
    \ b = b:sub(2, -2) end\n  if a == b then return '' else return a end\n  return\
    \ a\nend", "  if type(b) == String and b ~= '' then\n    b = tonumber(b)\n  end\n\
    \  if type(a) == String and b ~= '' then\n    a = tonumber(a)\n  end\n  if a ==\
    \ nil then return b end\n  if b == nil then return a end\n  if a > b then return\
    \ b end\n  if b > a then return b end\n  if a < b then return b end\n  if b <\
    \ a then return b end\n  return a\nend", "  if type(a) == type(b) then\n    if\
    \ type(b) == \"number\" then\n      return a > b\n    end\n    if type(b) == \"\
    string\" then\n      return compare_one(string(a), string(b))\n    end\n  end\n\
    \  return false\nend", "  if type(b) ~= \"number\" then b = 0 end\n  if a <= b\
    \ then\n    return a\n  elseif b > a then\n    return b\n  else\n    return a\n\
    \  end\nend", "  if a == nil then\n    return b\n  elseif b == nil then\n    return\
    \ a\n  elseif is_number(a) then\n    if is_number(b) then\n      if tostring(a)\
    \ >= tostring(b) then\n        return a\n      else\n        return b\n      end\n\
    \    elseif type(b) == \"number\" then\n      if type(a) == \"number\" and type(b)\
    \ == \"number\" then\n        if a >= b then\n          return a\n        else\n\
    \          return b\n        end\n      elseif type(a) == \"number\" then\n  \
    \      if type(b) == \"string\" then\n          return compare_one(b, a)\n   \
    \     else\n          return compare_one(a, \"%\"..tostring(b))\n        end\n\
    \      elseif type(b) == \"string\" then\n        if type(a) == \"string\" then\n\
    \          if a[1] == '\"' then\n            return compare_one(a, \"%\"..b)\n\
    \          else\n            return compare_one(b, \"%\"..a)\n          end\n\
    \        elseif type(a) == \"table\" then\n          return compare_one(a, \"\
    %\"..tostring(b))\n        else\n          return compare_one(a, \"%\"..b)\n \
    \       end\n      elseif type(a) == \"table\" then\n        return compare_one(a,\
    \ \"%\"..tostring(b))\n      end\n    elseif type(b) == \"table\" then\n     \
    \ if type(a) == \"string\" then\n        return compare_one(a, \"%\"..tostring(b))\n\
    \      elseif type(a) == \"table\" then\n        if a[1] == '\"' then\n      \
    \    return compare_one(a, \"%\"..b)\n        else\n          return compare_one(b,\
    \ \"%\"..a)\n        end\n      end\n    else\n      assert(false)\n    end\n\
    \  elseif type(b) == \"number\" then\n    if is_number(a) then\n      if type(b)\
    \ == \"number\" then\n        if type(a) == \"number\" and type(b) == \"number\"\
    \ then\n          if b > a then\n            return b\n          else\n      \
    \      return a\n          end\n        elseif type(a) == \"number\" then\n  \
    \        if type(b) == \"string\" then\n            return compare_one(a, \"%\"\
    ..b)\n          else\n            return compare_one(a, \"%\"..tostring(b))\n\
    \          end\n        elseif type(a) == \"string\" then\n          if type(b)\
    \ == \"number\" then\n            return compare_one(\"%\"..b, a)\n          else\n\
    \            return compare_one(\"%\"..a, b)\n          end\n        elseif type(a)\
    \ == \"table\" then\n          return compare_one(a, \"%\"..tostring(b))\n   \
    \     else\n          return compare_one(a, \"%\"..b)\n        end\n      else",
  "  if type(a) ~= type(b) then return false end\n  if a == b then return true end\n\
    \  if type(a) == 'number' then\n    if a ~= tonumber(b) then return false end\n\
    \  end\n  if type(a) == 'table' then\n    if #a == 0 then return true end\n  \
    \  if type(b) == 'number' then\n      if b ~= tonumber(a[#a]) then return false\
    \ end\n    end\n    if type(b) == 'table' then\n      if #b == 0 then return true\
    \ end\n      if compare_one(a[#a], b[#b]) then return false end\n    end\n  end\n\
    end", "  if a == b then return end\n  if type(a) == 'number' and type(b) == 'number'\
    \ then\n    if a == 0 then return b end\n    if b == 0 then return a end\n  end\n\
    \  if type(a) == 'string' and type(b) == 'string' then\n    if a == '0' then return\
    \ b end\n    if b == '0' then return a end\n  end\n  if type(a) == 'table' and\
    \ type(b) == 'table' then\n    if #a == 0 and #b == 0 then return end\n  end\n\
    \  return nil\nend", "  if type(a) == 'string' then\n    return if a == b then\
    \ a else a .. b end\n  elseif type(a) == 'number' then\n    return if math.abs(a\
    \ - b) < 1e-6 then a else b end\n  elseif type(a) == 'table' then\n    for _,\
    \ v in pairs(a) do\n      if compare_one(b, v) ~= nil then return v end\n    end\n\
    \  else\n    error(\"Type mismatch\")\n  end\nend", "  if type(b) == \"number\"\
    \ then\n    if b == 1 then\n      return a\n    else\n      local a_bigger = type(a)\
    \ ~= \"number\" or a >= b\n      return a_bigger or b\n    end\n  end\n  if type(b)\
    \ == \"table\" then\n    if #a == #b then\n      for k, v in ipairs(a) do\n  \
    \      local v = compare_one(v, b[k])\n        if v == nil then\n          return\
    \ nil\n        end\n      end\n      return true\n    end\n  end\n  if type(b)\
    \ == \"string\" then\n    local a_bigger = a:len() > b:len() or a ~= b\n    return\
    \ a_bigger or b\n  end\n  if type(b) == \"cdata\" then\n    local a_bigger = a:len()\
    \ > b:len() or a ~= b\n    return a_bigger or b\n  end\n  if type(b) == \"function\"\
    \ then\n    if type(a) == \"function\" then\n      local a_bigger = a:arity()\
    \ > b:arity() or a:is_vararg() and b:is_vararg() or a:is_vararg() or b:is_vararg()\n\
    \      return a_bigger or b\n    end\n  end\n  return nil\nend", "  if type(a)\
    \ ~= 'number' then return false end\n  if type(b) ~= 'number' then return false\
    \ end\n  if math.abs(a - b) < 0.000001 then return true end\n  if math.isnan(a)\
    \ or math.isnan(b) then return false end\n  if type(a) == 'number' and type(b)\
    \ == 'number' then\n    if math.abs(a - b) < 0.000001 then return true end\n \
    \   if math.isinf(a) and math.isinf(b) then return true end\n    if a == b then\
    \ return false end\n  end\n  return false\nend", "    if type(a) == \"number\"\
    \ then\n        if type(b) == \"number\" then\n            if a > b then\n   \
    \             return b\n            else\n                return a\n         \
    \   end\n        else\n            return a\n        end\n    elseif type(b) ==\
    \ \"number\" then\n        if a > b then\n            return b\n        else\n\
    \            return a\n        end\n    else\n        if a == b then\n       \
    \     return a\n        else\n            return b\n        end\n    end\nend",
  "   if type(a) ~= type(b) then return end\n   if a == b then return end\n   return\
    \ a\nend", "  if type(a) == type(b) then\n    if a == \"number\" then\n      --\
    \ Numbers\n      if tonumber(b) == a then\n        return b\n      else\n    \
    \    return a\n      end\n    else\n      -- Strings\n      if tonumber(b) ==\
    \ tonumber(a) then\n        return b\n      else\n        return a\n      end\n\
    \    end\n  end\nend", "  if type(a) ~= type(b) then return nil end\n  if type(a)\
    \ == \"number\" and b == math.floor(b) then\n    -- If the numbers are equal,\
    \ return the closest integer to them.\n    return math.floor(a)\n  elseif type(a)\
    \ == \"string\" and b == a:match(\"^-?%d*$\") then\n    -- If the strings are\
    \ equal, return the closest integer to them.\n    return math.floor(a)\n  end\n\
    \  return nil\nend", '  if a == b then return end', "   if type(a) ~= type(b)\
    \ then return nil end\n   if type(a) == \"number\" then\n      if a > b then\n\
    \         return b\n      else\n         return a\n      end\n   else\n      if\
    \ a == b then\n         return a\n      end\n   end\n   return nil\nend", "  \
    \  if type(a) == type(b) then\n        if a == b then\n            return nil\n\
    \        end\n        local a_is_str = type(a) == \"string\"\n        local b_is_str\
    \ = type(b) == \"string\"\n        if a_is_str and b_is_str then\n           \
    \ if a:match(\"^%d+[%p]+%s*$\") then\n                return b\n            else\n\
    \                return a\n            end\n        elseif a_is_str and not b_is_str\
    \ then\n            return a\n        elseif not a_is_str and b_is_str then\n\
    \            return b\n        end\n    end", "  if type(b) == a then\n    return\
    \ b\n  elseif type(b) == float then\n    if type(a) == float then\n      return\
    \ a:float() > b:float()\n    end\n  elseif type(b) == string then\n    return\
    \ string(a) > string(b)\n  end\nend", "    if type(a) == 'number' then a = string.format(\"\
    %.15g\", a) end\n    if type(b) == 'number' then b = string.format(\"%.15g\",\
    \ b) end\n    return a > b and a or b\nend\n</cell>\n<text>\nNext we define the\
    \ function that will compare two variables of the same type.  We also define two\
    \ examples of input.  These will be passed to our function.", "  if type(a) ~=\
    \ type(b) then return end\n  if type(a) == \"number\" and a==b then return end\n\
    \  if type(a) == \"string\" then\n    local a_split = a:find(\"^%b{,}\")\n   \
    \ local b_split = b:find(\"^%b{,}\")\n    if a_split == b_split then return end\n\
    \  end\n  if type(a) == \"table\" then\n    for k,v in pairs(a) do if compare_one(v,\
    \ a[k]) then return false end end\n    for k,v in pairs(b) do if compare_one(a[k],\
    \ b[k]) then return false end end\n  end\n  assert(false, \"Unknown type \" ..\
    \ type(a))\nend", "  if type(a) == type(b) and a ~= b then\n    if type(a) ==\
    \ 'string' then\n      if a:match(\"%f,%f\") and b:match(\"%f,%f\") then\n   \
    \     return compare_one(a.match(\"%f,%f\")[1], b.match(\"%f,%f\")[1])\n     \
    \ elseif a:match(\"%d,%d\") and b:match(\"%d,%d\") then\n        return compare_one(a.match(\"\
    %d,%d\")[1], b.match(\"%d,%d\")[1])\n      elseif a:match(\"%d\") and b:match(\"\
    %d\") then\n        return compare_one(a.match(\"%d\")[1], b.match(\"%d\")[1])\n\
    \      elseif a:match(\"%f\") or b:match(\"%f\") then\n        return compare_one(a.match(\"\
    %f\")[1], b.match(\"%f\")[1])\n      elseif a:match(\"%d,%d,%f\") and b:match(\"\
    %d,%d,%f\") then\n        return compare_one(a.match(\"%d,%d,%f\")[1], b.match(\"\
    %d,%d,%f\")[1])\n      elseif a:match(\"%d,%f\") and b:match(\"%d,%f\") then\n\
    \        return compare_one(a.match(\"%d,%f\")[1], b.match(\"%d,%f\")[1])\n  \
    \    else\n        return nil\n      end\n    end\n    if type(a) == 'number'\
    \ and b == 1 then\n      return a\n    end\n    if type(b) == 'number' and a ==\
    \ 1 then\n      return b\n    end\n  end\n  return a\nend", "  if a == b then\n\
    \    return a\n  elseif type(a) == type(b) then\n    -- If the types are different,\
    \ do a type casting check\n    if type(a) == \"number\" and type(b) == \"number\"\
    \ then\n      return tonumber(a) > tonumber(b) and a or b\n    elseif type(a)\
    \ == \"number\" and type(b) == \"string\" then\n      return tonumber(a) > tonumber(b)\
    \ and tostring(a) or tostring(b)\n    elseif type(b) == \"number\" and type(a)\
    \ == \"string\" then\n      return tonumber(a) > tonumber(b) and tostring(b) or\
    \ tostring(a)\n    elseif type(a) == \"string\" and type(b) == \"number\" then\n\
    \      return tonumber(a) > tonumber(b) and a or tostring(b)\n    elseif type(a)\
    \ == \"string\" and type(b) == \"string\" then\n      return tonumber(a) > tonumber(b)\
    \ and a or b\n    else\n      assert(false)\n    end\n  else\n    return false\n\
    \  end\nend", "   if type(a) == type(b) then\n      if type(a) == 'string' then\n\
    \         if tonumber(a) > tonumber(b) then\n            return b\n         else\n\
    \            return a\n         end\n      else\n         if a > b then\n    \
    \        return b\n         else\n            return a\n         end\n      end\n\
    \   else\n      return nil\n   end\nend", "  if a==\"number\" and b==\"number\"\
    \ then\n    return math.max(a, b)\n  elseif a==\"string\" then\n    local a_str,\
    \ b_str=a:gsub(',','.'), b:gsub(',','.')\n    return a_str:gsub('.','-') < b_str:gsub('.','-')\
    \ and a_str:gsub('-','.') < b_str:gsub('-','.')\n  elseif b==\"string\" then\n\
    \    local a_str, b_str=a:gsub(',','.'), b:gsub(',','.')\n    return a_str:gsub('.','-')\
    \ > b_str:gsub('.','-') and a_str:gsub('-','.') > b_str:gsub('-','.')\n  else\n\
    \    return a == b\n  end\nend", "  local ty = type(a or b)\n  local is_float\
    \ = ty == \"number\" or (ty == \"string\" and a ~= b and b and tonumber(a) and\
    \ tonumber(b))", "\tif type(a) == 'number' and type(b) == 'number' then\n\t\t\
    return if a < b then a else b end\n\tend\n\tif type(a) == 'string' and type(b)\
    \ == 'string' then\n\t\tif a == '.' or a == '.' or b == '.' or b == '.' then\n\
    \t\t\treturn if a:match('[.]') or b:match('[.]') then a or b end\n\t\telse\n\t\
    \t\tif a == '+' or b == '+' then a else b end\n\t\tend\n\tend\n\treturn if type(a)\
    \ == 'number' or type(b) == 'number' then a < b end\n\treturn if a == b then a\
    \ end\n\treturn if type(a) == 'string' and type(b) == 'string' then a:len() >\
    \ b end\n\treturn if type(a) == 'table' and type(b) == 'table' then compare_one(a[1],\
    \ b[1]) end\n\treturn if type(a) == 'function' and type(b) == 'function' then\
    \ compare_one(a(), b()) end\n\treturn if type(a) == 'table' and type(b) == 'table'\
    \ then\n\t\tcompare_one(a[1], b[1]) and compare_one(a[2], b[2]) or compare_one(a[3],\
    \ b[3]) or compare_one(a[4], b[4])\n\tend\n\treturn false\nend", "    if type(a)\
    \ ~= type(b) then return nil end\n    if type(a) == 'number' then return a < b\
    \ end\n    if type(a) == 'string' then\n        a = a:gsub(',', ''):gsub('.',\
    \ ''):gsub('-', ''):gsub('%', '')\n        b = b:gsub(',', ''):gsub('.', ''):gsub('-',\
    \ ''):gsub('%', '')\n        return a > b\n    end\n    return nil\nend", "  if\
    \ type(a) == \"string\" and type(b) == \"string\" then\n    if b == \"\" then\
    \ return a end\n    if a == \"\" then return b end\n    if a ~= b then return\
    \ nil end\n  elseif type(a) == \"number\" then\n    if type(b) ~= \"number\" then\
    \ return nil end\n    if a == b then return nil end\n    if a > b then return\
    \ b end\n    if a < b then return a end\n  elseif type(a) == \"boolean\" then\n\
    \    if type(b) ~= \"boolean\" then return nil end\n    if a == b then return\
    \ nil end\n  end\n  return b\nend", "  if a == b then return end\n  if type(a)\
    \ == \"number\" and type(b) == \"number\" then\n    if a == math.floor(a) and\
    \ b == math.floor(b) then\n      return a\n    end\n  end\n  if type(a) == \"\
    string\" and type(b) == \"string\" then\n    if a == b or a == \"(\" .. b or b\
    \ == \"(\" .. a then\n      return a\n    end\n  end\n  return nil\nend", "  if\
    \ type(a) ~= 'table' or type(b) ~= 'table' then\n    return false\n  end\n  if\
    \ type(a) == 'table' then\n    if type(b) == 'table' and a == b then\n      return\
    \ true\n    elseif type(b) == 'table' then\n      if a[1] == b[1] and a[2] ==\
    \ b[2] and a[3] == b[3] then\n        return true\n      elseif a[1] == b[1] and\
    \ a[2] == b[2] then\n        return a[3] > b[3]\n      elseif a[3] == b[3] then\n\
    \        return a[1] < b[1]\n      else\n        return a[1] > b[1]\n      end\n\
    \    end\n  elseif a == b then\n    return true\n  end\n  return false\nend",
  "    if type(a) ~= type(b) then\n        return nil\n    end", "  if type(a) ~=\
    \ type(b) then return false end\n  if type(a) == \"string\" then\n    return (a:gsub(\"\
    [%,.-]\", function(c) return c:lower() == '-' end) ~= nil) and\n      (a:gsub(\"\
    [%,.-]\", function(c) return c:lower() == '.' end) ~= nil)\n  end\n  return a\
    \ > b\nend", "    local atype = type(a)\n    local btype = type(b)\n    if atype\
    \ ~= btype then\n        return nil\n    end\n    if atype == 'number' and b ==\
    \ '' then\n        return nil\n    end\n    if atype == 'number' and b == '' then\n\
    \        return nil\n    end\n    if atype == 'number' and b == '' then\n    \
    \    return nil\n    end\n    if atype == 'number' and b == '' then\n        return\
    \ nil\n    end\n    if atype == 'number' and b == '' then\n        return nil\n\
    \    end\n    if atype == 'number' and b == '' then\n        return nil\n    end\n\
    \    if atype == 'number' and b == '' then\n        return nil\n    end\n    if\
    \ atype == 'number' and b == '' then\n        return nil\n    end\n    if atype\
    \ == 'string' and b == '' then\n        return nil\n    end\n    if atype == 'string'\
    \ and b == '' then\n        return nil\n    end\n    if atype == 'string' and\
    \ b == '' then\n        return nil\n    end\n    if atype == 'string' and b ==\
    \ '' then\n        return nil\n    end\n    if atype == 'string' and b == '' then\n\
    \        return nil\n    end\n    if atype == 'string' and b == '' then\n    \
    \    return nil\n    end\n    if atype == 'string' and b == '' then\n        return\
    \ nil\n    end\n    if atype == 'string' and b == '' then\n        return nil\n\
    \    end\n    if atype == 'string' and b == '' then\n        return nil\n    end\n\
    \    if atype == 'string' and b == '' then\n        return nil\n    end\n    if\
    \ atype == 'string' and b == '' then\n        return nil\n    end\n    if atype\
    \ == 'string' and b == '' then\n        return nil\n    end\n    if atype == 'string'\
    \ and b == '' then\n        return nil\n    end\n    if atype == 'string' and\
    \ b == '' then\n        return nil\n    end\n    if atype == 'string' and b ==\
    \ '' then\n        return nil\n    end\n    if atype == 'string' and b == '' then\n\
    \        return nil\n    end\n    if atype == 'string' and b == '' then\n    \
    \    return nil\n    end\n    if atype == 'string' and b == '' then\n        return\
    \ nil\n    end\n    if atype == 'string' and b == '' then\n        return nil\n\
    \    end\n    if atype == 'string' and b == '' then\n        return nil\n    end\n\
    \    if atype == 'string' and b == '' then\n        return nil\n    end\n    if\
    \ atype == 'string' and b == '' then\n        return nil\n    end\n    if atype ",
  "    local a_s, a_f\n    local b_s, b_f\n    local a_v, a_s = unpack(a)\n    local\
    \ b_v, b_s = unpack(b)", "  if type(a) == 'number' and type(b) == 'number' then\n\
    \    if math.abs(a - b) < 1e-16 then\n      return a\n    end\n    return b\n\
    \  elseif type(a) == 'string' and type(b) == 'string' then\n    if a:sub(1, 1)\
    \ == ',' or b:sub(1, 1) == ',' then\n      return compare_one(a:sub(1, -1), b:sub(1,\
    \ -1))\n    end\n    -- Compare strings case-insensitively\n    local a1 = a:lower()\n\
    \    local b1 = b:lower()\n    if a1 == b1 then\n      return compare_one(a1,\
    \ b1)\n    end\n    return a1 > b1 or a1 == b1 .. 'e' or b1 == a1 .. 'e' or a1\
    \ == b1 .. 'e-' or b1 == a1 .. 'e-'\n  end\n  return nil\nend", "  if type(b)\
    \ ~= 'string' and type(b) ~= 'number' then\n    return nil\n  end\n  if a == b\
    \ then\n    return nil\n  end\n  if type(b) == 'string' then\n    a = a.split('.')\n\
    \    b = b.split('.')\n    -- Convert all numbers to a string so that we can compare\
    \ them as string\n    if type(a) == 'table' then\n      a = table.concat(a, '.')\n\
    \    end\n    if type(b) == 'table' then\n      b = table.concat(b, '.')\n   \
    \ end\n    if a ~= b then\n      return b\n    end\n  end\n  if type(b) == 'number'\
    \ then\n    return a > b and 'bigger' or a < b and 'smaller' or a == '0' and 'zero'\
    \ or 'equal'\n  end\nend", "  if a==b or a==\".\" or a==\",\" then\n    return\
    \ a\n  else\n    return b\n  end\nend", "  if type(a) ~= 'number' or type(b) ~=\
    \ 'number' then\n    return nil\n  end", "  if a == b then\n    return a\n  elseif\
    \ type(b) == \"string\" then\n    return a\n  elseif type(b) == \"table\" then\n\
    \    if type(a) ~= \"table\" then\n      return a\n    end\n    if a == nil then\n\
    \      return nil\n    end\n    local keys = pairs(a)\n    if #keys == #b then\n\
    \      local found = true\n      for i, k in ipairs(keys) do\n        local v\
    \ = b[k]\n        if type(v) == \"string\" then\n          v = v:gsub(\"^0*\"\
    , \"\") -- remove leading zeros.\n        end\n        if compare_one(v, a[k])\
    \ then\n          found = false\n          break\n        end\n      end\n   \
    \   return found and b or nil\n    end\n    return a\n  elseif type(b) == \"number\"\
    \ then\n    if type(a) ~= \"number\" then\n      return a\n    end\n    if a ==\
    \ b then\n      return a\n    end\n    return b\n  elseif type(b) == \"boolean\"\
    \ then\n    return a\n  else\n    return nil\n  end\nend", "  if type(a) == type(b)\
    \ then\n    if a == 'Real' or b == 'Real' then\n      return compare_one(a:real(),\
    \ b:real())\n    end\n    if a == 'Integer' or b == 'Integer' then\n      return\
    \ compare_one(a:real(), b:real())\n    end\n    if a == 'String' or b == 'String'\
    \ then\n      return compare_one(a:string(), b:string())\n    end\n  end\n  return\
    \ nil\nend", "  if type(a) ~= \"number\" and type(a) ~= \"string\" then return\
    \ false end\n  if type(b) ~= \"number\" and type(b) ~= \"string\" then return\
    \ false end\n  local a_ = tonumber(a) or a\n  local b_ = tonumber(b) or b\n  if\
    \ a_ == b_ then return true end\n  -- If the real numbers are the same, check\
    \ if they are the same string\n  if a_ == a then return true end\n  if b_ == b\
    \ then return true end\n  if a_ == \"\" and b_ == \"\" then return true end\n\
    \  if a_ == \"\" and b_ == \"\" then return false end\n  if a_ == \"\" and b_\
    \ ~= \"\" then return true end\n  if a_ ~= \"\" and b_ == \"\" then return false\
    \ end\n  if a_ ~= \"\" and b_ ~= \"\" then return compare_one(a_, b) end\n  if\
    \ a_ == \"0\" and b_ == \"0\" and a_ == b_ then return true end\n  if a_ == \"\
    0.0\" and b_ == \"0.0\" then return true end\n  return false\nend", "    if type(a)\
    \ == 'number' then\n        if type(b) == 'number' then\n            return math.max(a,\
    \ b)\n        else\n            return a\n        end\n    elseif type(a) == 'string'\
    \ then\n        if type(b) == 'string' then\n            return a:gsub(\",\",\
    \ \"\")\n        elseif type(b) == 'table' then\n            return a\n      \
    \  else\n            return b\n        end\n    elseif type(a) == 'table' then\n\
    \        if type(b) == 'number' then\n            return b\n        else\n   \
    \         return a\n        end\n    else\n        return nil\n    end\nend",
  "  if type(a) == type(b) and type(a) == 'table' then\n    local i, j = 1, #a\n \
    \   while i < j do\n      local a_n, b_n = tonumber(a[i]), tonumber(b[i])\n  \
    \    if a_n ~= b_n then\n        return b_n\n      end\n      i = i + 1\n    end\n\
    \    if i == j then\n      return a\n    end\n  end\n  if type(a) == 'string'\
    \ and type(b) == 'string' then\n    if a ~= b then\n      return b\n    end\n\
    \  else\n    local a_n, b_n = tonumber(a), tonumber(b)\n    if a_n ~= b_n then\n\
    \      return b_n\n    end\n  end\n  return None\nend", "   if type(b) == \"number\"\
    \ and type(a) == \"number\" then\n      return a > b end\n   if type(b) == \"\
    string\" and type(a) == \"string\" then\n      return a:lower() > b:lower() end\n\
    \   return b == a end\nend", "  if type(a) == 'string' then\n    a = tonumber(a)\n\
    \  end\n  if type(b) == 'string' then\n    b = tonumber(b)\n  end", "  if type(a)\
    \ ~= 'string' and type(b) ~= 'string' then\n    return a > b\n  elseif type(a)\
    \ == 'string' then\n    a = a:gsub(',', '.'):gsub('%$', ''):gsub('%,', ''):gsub('%+',\
    \ ''):gsub('%.', '.')\n    b = b:gsub(',', '.'):gsub('%$', ''):gsub('%,', ''):gsub('%+',\
    \ ''):gsub('%.', '.')\n  end\n  return a > b\nend", "  local ty = type(a)\n  if\
    \ ty == \"number\" and b == a then return b end\n  if ty == \"string\" then a\
    \ = a:strip(\"\\\"\") end\n  if ty == \"table\" then a = tostring(a) end\n  if\
    \ ty == \"boolean\" then return a end\n  if b == a then return nil end\n  if a\
    \ == \"-inf\" then return \"-inf\" end\n  if a == \"inf\" then return \"inf\"\
    \ end\n  if a == \"-nan\" then return \"-nan\" end\n  if a == \"nan\" then return\
    \ \"nan\" end\n  if ty == \"string\" and b == a:upper() then return b end\n  if\
    \ ty == \"number\" and a < b then return b end\n  return a\nend", "  if a == b\
    \ then\n    -- Both values are the same\n    return a\n  elseif type(a) == \"\
    number\" and type(b) == \"number\" then\n    -- Both values are numbers\n    return\
    \ math.max(a, b)\n  else\n    -- Strings represent the real number\n    return\
    \ a\n  end\nend", "  if a ~= b then\n    if a ~= tonumber(a) or b ~= tonumber(b)\
    \ then return end\n    return a\n  end\nend", "  if type(a) == 'number' and type(b)\
    \ == 'number' then\n    return a > b\n  elseif type(a) == 'string' and type(b)\
    \ == 'string' then\n    return a:gsub('[^-0-9.]', ''):gsub('%+', ',') >= b:gsub('[^-0-9.]',\
    \ ''):gsub('%+', ',')\n  else\n    return false\n  end\nend", "\tif type(a) ~=\
    \ 'number' or type(b) ~= 'number' then\n\t\treturn None\n\tend\n\tlocal aint,\
    \ abig = math.floor(a), math.floor(b)\n\tif aint == abig then\n\t\treturn a\n\t\
    else\n\t\tif a > b then\n\t\t\treturn a\n\t\telse\n\t\t\treturn b\n\t\tend\n\t\
    end\nend", "  if type(a) ~= type(b) then return None end\n  if a:match(\"^-?%d+$\"\
    ) or a:match(\"^[%p+-%.%-%d]*$\") or a:match(\"^%b$\") or a:match(\"^%q$\") then\n\
    \    return a\n  else\n    return b\n  end\nend", "    if type(a) ~= 'table' then\n\
    \        a = {a = a}\n    end\n    if type(b) ~= 'table' then\n        b = {b\
    \ = b}\n    end\n    local a_n = tonumber(a.a or a.b) or 0\n    local b_n = tonumber(b.a\
    \ or b.b) or 0\n    if a_n == b_n then\n        return a_n\n    end\n    if a_n\
    \ > b_n then\n        return b.a\n    end\n    return a.a\nend", "\tlocal a_type\
    \ = type(a)\n\tlocal b_type = type(b)\n\tif a_type == \"number\" then\n\t\tif\
    \ b_type == \"number\" then\n\t\t\tif a > b then\n\t\t\t\treturn b\n\t\t\telse\n\
    \t\t\t\treturn a\n\t\t\tend\n\t\telseif b_type == \"string\" then\n\t\t\ta = tonumber(a)\n\
    \t\t\tb = tonumber(b)\n\t\t\tif a > b then\n\t\t\t\treturn b\n\t\t\telse\n\t\t\
    \t\treturn a\n\t\t\tend\n\t\tend\n\telseif a_type == \"string\" then\n\t\ta =\
    \ a:gsub(\"%L\", \"\")\n\t\tb = b:gsub(\"%L\", \"\")\n\t\tif a == b then\n\t\t\
    \treturn a\n\t\telse\n\t\t\treturn b\n\t\tend\n\tend\nend", "  if type(a) == \"\
    number\" and type(b) == \"number\" then\n    if b < a then\n      return a\n \
    \   elseif a < b then\n      return b\n    else\n      return nil\n    end\n \
    \ elseif type(a) == \"string\" and type(b) == \"string\" then\n    if b == a then\n\
    \      return nil\n    else\n      return b\n    end\n  else\n    return nil\n\
    \  end\nend", "  if type(a) ~= 'string' then a = a:__tostring() end\n  if type(b)\
    \ ~= 'string' then b = b:__tostring() end\n  return a > b and a or 'None'\nend",
  "  if a == b or type(a) == \"number\" and type(b) == \"number\" then\n    return\
    \ a\n  elseif type(a) == \"string\" then\n    if string.match(a, \"^-?%d+(%.?%d*)%.?%d*$\"\
    ) then\n      return b\n    end\n  end\nend", "  local typeA = type(a)\n  local\
    \ typeB = type(b)\n  local fmt = \"%\" .. tostring(a) .. \"|%\" .. tostring(b)\
    \ .. \"|\"\n  if typeA == \"string\" and typeB == \"string\" then\n    if a ~=\
    \ b then return fmt .. a end\n  elseif typeA == \"number\" and typeB == \"number\"\
    \ then\n    if type(a) < type(b) then return fmt .. a end\n  end\n  return nil\n\
    end", "  if type(a) ~= \"table\" then return tonumber(a) > tonumber(b) end\n \
    \ local a_real = a[1]\n  local b_real = b[1]\n  if a_real ~= b_real then return\
    \ a_real > b_real end\n  local a_num = tonumber(a[2])\n  local b_num = tonumber(b[2])\n\
    \  if a_num > b_num then return 1 end\n  if a_num < b_num then return -1 end\n\
    \  local a_str = a[3]\n  local b_str = b[3]\n  if a_str == \"?\" and b_str ==\
    \ \"?\" then return \"?\" end\n  if a_str == b_str then return 0 end\n  if a_str\
    \ == \"-\" and b_str == \"-\" then return 1 end\n  return nil\nend", "  if type(a)\
    \ == 'number' and type(b) == 'number' then\n    if a > b then return b end\n \
    \   if a == b then return nil end\n  end\n  if type(a) == 'table' and type(b)\
    \ == 'table' then\n    for k,v in pairs(a) do\n      if compare_one(v, b[k]) then\
    \ return v end\n    end\n  end\n  return b\nend", "  if type(a) ~= \"table\" or\
    \ type(b) ~= \"table\" then\n    if type(a) == \"string\" then\n      a = tonumber(a)\n\
    \      b = tonumber(b)\n    end\n    return tonumber(a) > tonumber(b) and 1 or\
    \ -1\n  end\n  local a_n = len(a)\n  local b_n = len(b)\n  local a_max_b = math.max(a.b,\
    \ b.b)\n  if b_n > a_max_b then\n    return a_max_b\n  end\n  local a_min_b =\
    \ math.min(a.b, b.b)\n  local b_min_a = math.min(b.b, a.b)\n  for i=1, b_min_a\
    \ do\n    if compare_one(a.b[i], b.b[i]) == 1 then\n      return 1\n    end\n\
    \  end\n  if b_n == 0 then\n    return 0\n  end\n  -- Check more in b.\n  for\
    \ i = 1, a_n do\n    if compare_one(a.b[a_n+i], b_min_a) == -1 then\n      return\
    \ a_min_b\n    end\n  end\n  return 0\nend", "    if type(b) == \"number\" then\n\
    \        if tonumber(a) == tonumber(b) then\n            return b\n        elseif\
    \ type(a) == \"string\" then\n            if a == b then\n                return\
    \ b\n            else\n                return a\n            end\n        else\n\
    \            return a\n        end\n    elseif type(b) == \"string\" then\n  \
    \      if a == b then\n            return b\n        else\n            return\
    \ a\n        end\n    else\n        return a\n    end\nend", "  if type(a) ~=\
    \ type(b) then return nil end\n  if type(a) == \"number\" then\n    if a ~= b\
    \ or a <= 0 or b < 0 then return nil end\n  elseif type(a) == \"table\" then\n\
    \    local n = #a\n    if n ~= #b then return nil end\n    for i = 1, n do\n \
    \     if not compare_one(a[i], b[i]) then return nil end\n    end\n  elseif a\
    \ ~= b then return nil end\n  return b\nend", "  if a ~= b then\n    return a\n\
    \  elseif type(a) ~= 'number' or type(b) ~= 'number' then\n    return a\n  else\n\
    \    if a < b then return b end\n    return a\n  end\nend", "  if a == nil then\
    \ return a end\n  if b == nil then return b end", "    if type(a) ~= 'string'\
    \ then\n        if type(a) ~= type(b) then\n            if a ~= b then\n     \
    \           return b\n            end\n        end\n    end\n    if a == b then\n\
    \        return a\n    end\n    if a == '0' or b == '0' then\n        return a\n\
    \    end\n    if a == nil then\n        return b\n    end\n    if b == nil then\n\
    \        return a\n    end\n    if a == '' or b == '' then\n        return a\n\
    \    end\n    if a~=b or type(a) ~= 'number' or type(b) ~= 'number' then\n   \
    \     if a == b then\n            return a\n        else\n            return b\n\
    \        end\n    end\n    if a < b then\n        return a\n    else\n       \
    \ return b\n    end\nend", "  if type(a) ~= 'number' or type(b) ~= 'number' then\n\
    \    if type(a) == 'string' then\n      return a\n    elseif type(b) == 'string'\
    \ then\n      return b\n    else\n      assert(false)\n    end\n  end\n  if a\
    \ == b then\n    return a\n  end\n  if a < b then\n    return a\n  end\n  return\
    \ b\nend\nreturn compare_one", "  if a == b then return b end\n  if type(a) ==\
    \ \"number\" and type(b) == \"number\" then\n    if tonumber(a) > tonumber(b)\
    \ then\n      return a\n    elseif tonumber(a) < tonumber(b) then\n      return\
    \ b\n    end\n  elseif type(a) == \"string\" and type(b) == \"string\" then\n\
    \    if a > b then\n      return a\n    elseif a < b then\n      return b\n  \
    \  end\n  elseif type(a) == \"table\" and type(b) == \"table\" then\n    if #a\
    \ == #b then\n      for i, v in ipairs(a) do\n        if compare_one(v, b[i])\
    \ ~= nil then\n          return b[i]\n        end\n      end\n    else\n     \
    \ return nil\n    end\n  else\n    return nil\n  end\n  return nil\nend", "  if\
    \ type(b) ~= 'number' then return b end\n  if type(a) ~= 'number' then return\
    \ a end\n  if math.floor(a) == math.floor(b) then return a\n  else return b end\n\
    end", '  if a == b then return true end', "   if type(a) == type(b) then\n   \
    \   if a == b then return a end\n      if type(a) ~= \"string\" then\n       \
    \  if type(b) == \"string\" then return b end\n         return a > b end\n   \
    \   end\n      -- a is a string; b is also a string; compare lexically\n     \
    \ if a < b then return b end\n      if a > b then return a end\n   end\nend",
  "    if a ~= b then\n        if type(a) == \"number\" and type(b) == \"number\"\
    \ then\n            if math.abs(a - b) > 1e-15 then\n                return b\n\
    \            else\n                return a\n            end\n        else\n \
    \           if type(a) ~= \"string\" and type(b) ~= \"string\" then\n        \
    \        return a\n            else\n                a = a:gsub(\"[,.]\", \".\"\
    )\n                b = b:gsub(\"[,.]\", \".\")\n                if a ~= b then\n\
    \                    return b\n                else\n                    return\
    \ a\n                end\n            end\n        end\n    end\nend", "  local\
    \ type_b = type(b)\n  if type(b) ~= 'string' then\n    local a_int = tonumber(a)\n\
    \    local b_int = tonumber(b)\n    if a_int ~= b_int then\n      a = a_int or\
    \ a\n      b = b_int or b\n      if a == b then\n        return nil\n      elseif\
    \ type(a) == 'number' then\n        return b\n      elseif type(b) == 'number'\
    \ then\n        return a\n      else\n        return 'error'\n      end\n    end\n\
    \  end", "  if a == nil then return b end\n  if b == nil then return a end\n \
    \ if type(a) ~= type(b) then return nil end\n  local a_str, b_str = string(a),\
    \ string(b)\n  if a_str == \"inf\" or a_str == \"infinity\" or a_str == \"+inf\"\
    \ or a_str == \"+infinity\" then\n    if b_str == \"inf\" or b_str == \"infinity\"\
    \ or b_str == \"+inf\" or b_str == \"+infinity\" then\n      return true\n   \
    \ end\n    return false\n  end\n  if b_str == \"inf\" or b_str == \"infinity\"\
    \ or b_str == \"+inf\" or b_str == \"+infinity\" then\n    return false\n  end\n\
    \  if a_str == \"-inf\"  or a_str == \"-infinity\" or a_str == \"-inf\" or a_str\
    \ == \"-infinity\" then\n    if b_str == \"-inf\"  or b_str == \"-infinity\" or\
    \ b_str == \"-inf\" or b_str == \"-infinity\" then\n      return true\n    end\n\
    \    return false\n  end\n  if b_str == \"-inf\"  or b_str == \"-infinity\" or\
    \ b_str == \"-inf\" or b_str == \"-infinity\" then\n    return false\n  end\n\
    \  if a_str == \"-nan\" or a_str == \"-nan(...)\" or a_str == \"NaN\" or a_str\
    \ == \"+nan\" or a_str == \"+nan(...)\" then\n    if b_str == \"-nan\" or b_str\
    \ == \"-nan(...)\" or b_str == \"NaN\" or b_str == \"+nan\" or b_str == \"+nan(...)\"\
    \ then\n      return true\n    end\n    return false\n  end\n  if b_str == \"\
    -nan\" or b_str == \"-nan(...)\" or b_str == \"NaN\" or b_str == \"+nan\" or b_str\
    \ == \"+nan(...)\" then\n    return false\n  end\n  if a_str == \"nan\" or a_str\
    \ == \"nan(...)\" or a_str == \"+nan\" or a_str == \"+nan(...)\" then\n    if\
    \ b_str == \"nan\" or b_str == \"nan(...)\" or b_str == \"+nan\" or b_str == \"\
    +nan(...)\" then\n      return true\n    end\n    return false\n  end\n  if b_str\
    \ == \"nan\" or b_str == \"nan(...)\" or b_str == \"+nan\" or b_str == \"+nan(...)\"\
    \ then\n    return false\n  end\n  local a_val, b_val = tonumber(a), tonumber(b)\n\
    \  if a_val == b_val then\n    return true\n  end\n  return false\nend", "  if\
    \ a ~= b then\n    if type(a) == \"string\" then\n      if b:find(a) == 1 then\n\
    \        return a\n      else\n        return b\n      end\n    elseif a > b then\n\
    \      return b\n    elseif a < b then\n      return a\n    else\n      return\
    \ None\n    end\n  end\nend", "  if a == b then\n    return true\n  elseif not\
    \ a then\n    return false\n  elseif not b then\n    return true\n  end\n  if\
    \ type(a) == type(b) then\n    if isfloat(a) and isfloat(b) then\n      return\
    \ math.abs(a - b) < 0.0001\n    elseif type(a) == \"string\" and type(b) == \"\
    string\" then\n      return a..\"<\"..b\n    end\n  end\nend", "  if type(a) ~=\
    \ 'number' then\n    a = tonumber(a)\n  end\n  if type(b) ~= 'number' then\n \
    \   b = tonumber(b)\n  end\n  if a > b then\n    return b\n  end\n  if b > a then\n\
    \    return a\n  end\n  return nil\nend", "  if type(a) == \"number\" and type(b)\
    \ == \"number\" then\n    if a == b then\n      return true\n    end\n    if a\
    \ < b then\n      return true\n    elseif b < a then\n      return false\n   \
    \ end\n  elseif type(a) == \"string\" and type(b) == \"string\" then\n    if a:len()\
    \ > b:len() then\n      return true\n    elseif a:len() < b:len() then\n     \
    \ return false\n    elseif a:len() == b:len() then\n      local a_split = {}\n\
    \      local b_split = {}\n      local i, j = 0, 1\n      for i = 1, a:len() do\n\
    \        a_split[j] = a:sub(i,i)\n        j = j + 1\n      end\n      for i =\
    \ 1, b:len() do\n        b_split[j] = b:sub(i,i)\n        j = j + 1\n      end\n\
    \      if a_split ~= b_split then\n        return false\n      end\n    end\n\
    \  end\n  return false\nend", "  if a == b then return end\n  if type(a) == \"\
    string\" and type(b) == \"string\" then\n    local a_b = a:gsub(\"%D+\",\"\")\n\
    \    local b_b:gsub(\"%D+\",\"\")\n    if a_b == b_b then return end\n  end\n\
    \  return a\nend", "  if a ~= b then\n    if type(b) ~= 'string' then\n      return\
    \ b\n    else\n      local na, nb = string.match(a, '^([-+]?)(%d*)([^.]*)$')\n\
    \      if na and nb then\n        return tonumber(na), tonumber(nb)\n      elseif\
    \ na then\n        return na\n      else\n        return nb\n      end\n    end\n\
    \  end\n  return nil\nend", "  if type(a) ~= 'number' and type(a) ~= 'string'\
    \ then return nil end\n  if type(b) ~= 'number' and type(b) ~= 'string' then return\
    \ nil end\n  a = tonumber(a)\n  b = tonumber(b)\n  if a == nil or b == nil then\
    \ return nil end\n  if a == b then return nil end\n  if a>b then return b end\n\
    \  return a\nend", "  if a == b then\n    return a\n  elseif type(a) == 'number'\
    \ and type(b) == 'number' then\n    return a > b and a or b\n  elseif type(a)\
    \ == 'string' and type(b) == 'string' then\n    return a:sub(1, -1):lower() >\
    \ b:sub(1, -1):lower() and a or b\n  else\n    -- If a is one of a set of known\
    \ real variable types, then we consider them\n    -- equal if they are the same\
    \ type and have the same value as the other\n    -- (by way of comparing them\
    \ to each other with compare_one()).\n    -- The rationale is that we avoid any\
    \ rounding issues with floating point\n    -- numbers and the like.\n    local\
    \ a_type = type(a)\n    local b_type = type(b)\n    if a_type == b_type and a_type\
    \ == 'number' and b_type:sub(1,1) == 'r' then\n      return compare_one(a:sub(2,-2),\
    \ b:sub(2,-2))\n    elseif a_type == b_type then\n      return a > b and a or\
    \ b\n    elseif a_type:sub(1,1) == 'r' and b_type:sub(1,1) == 'r' then\n     \
    \ return compare_one(a:sub(2, -2), b:sub(2, -2))\n    elseif a_type:sub(1,1) ==\
    \ 'r' and b_type == 'number' and a_type:sub(2,2) == 'i' then\n      return compare_one(a:sub(2,\
    \ -2), b:sub(2, -1))\n    elseif b_type:sub(1,1) == 'r' and a_type:sub(1,1) ==\
    \ 'r' then\n      return compare_one(a:sub(2, -2), b:sub(2, -2))\n    elseif a_type:sub(1,1)\
    \ == 'r' and b_type == 'number' and a_type:sub(2,2) == 'i' then\n      return\
    \ compare_one(a:sub(2, -1), b:sub(2, -1))\n    elseif a_type:sub(1,1) == 'r' and\
    \ b_type == 'number' and a_type:sub(2,2) == 'f' then\n      return compare_one(a:sub(2,\
    \ -1), b:sub(2, -1))\n    else\n      return nil\n    end\n  end\nend", "    if\
    \ type(a) ~= type(b) then return nil end\n    if a == b then return end\n    if\
    \ type(a) ~= \"number\" then a = tonumber(a); b = tonumber(b) end\n    if a <\
    \ b then return b end\n    return a\nend", "  if type(a) == 'number' then\n  \
    \  if type(b) == 'string' then\n      -- Treat \"1.0\" as \"1\" for numerical\
    \ sort\n      if a == '1.0' then return '1' end\n      if b == '1.0' then return\
    \ '1' end\n    end\n    if type(b) ~= 'number' then return b end\n  end\n  if\
    \ a == b then return end\n  if type(a) ~= 'string' and type(b) ~= 'string' then\
    \ return b end\n  if a..b == '.0' then return '0' end\n  if a..b == '.1' then\
    \ return '1' end\n  if a..b == '.2' then return '2' end\n  if a..b == '.4' then\
    \ return '3' end\n  if a..b == '.6' then return '4' end\n  if a..b == '.8' then\
    \ return '5' end\n  if a..b == '1.0' then return '1' end\n  if a..b == '1.1' then\
    \ return '2' end\n  if a..b == '1.2' then return '2' end\n  if a..b == '1.4' then\
    \ return '3' end\n  if a..b == '1.6' then return '4' end\n  if a..b == '1.8' then\
    \ return '5' end\n  if a..b == '1.10' then return '6' end\n  if a..b == '1.20'\
    \ then return '6' end\n  if a..b == '1.30' then return '6' end\n  if a..b == '1.40'\
    \ then return '6' end\n  if a..b == '1.50' then return '7' end\n  if a..b == '1.60'\
    \ then return '8' end\n  if a..b == '1.70' then return '9' end\n  if a..b == '1.80'\
    \ then return '9' end\n  if a..b == '1.90' then return '9' end\n  if a..b == '2.0'\
    \ then return '2' end\n  if a..b == '2.1' then return '2' end\n  if a..b == '2.2'\
    \ then return '3' end\n  if a..b == '2.4' then return '3' end\n  if a..b == '2.6'\
    \ then return '4' end\n  if a..b == '2.8' then return '4' end\n  if a..b == '2.10'\
    \ then return '5' end\n  if a..b == '2.20' then return '5' end", "  if a == nil\
    \ then\n    return b\n  elseif b == nil then\n    return a\n  elseif tostring(a)\
    \ == tostring(b) then\n    return a\n  elseif type(tostring(a)) ~= \"number\"\
    \ then\n    return a\n  else\n    return b\n  end\nend", "  if type(a) == 'number'\
    \ and type(b) == 'number' then\n    return a > b\n  elseif type(a) == 'string'\
    \ and type(b) == 'string' then\n    return a:lower() > b:lower()\n  else\n   \
    \ return false\n  end\nend", "    if a == nil then\n        if b == nil then\n\
    \            return true\n        elseif type(b) == \"string\" then\n        \
    \    return false\n        elseif type(b) == \"number\" then\n            if b\
    \ <= a then\n                return true\n            else\n                return\
    \ false\n            end\n        elseif type(b) == \"boolean\" then\n       \
    \     return false\n        else\n            -- This is here to catch the \"\
    unsupported type\" error in case it gets thrown.\n            return false\n \
    \       end\n    elseif b == nil then\n        return true\n    elseif type(a)\
    \ == \"string\" then\n        return false\n    elseif type(a) == \"number\" then\n\
    \        if a <= b then\n            return true\n        else\n            return\
    \ false\n        end\n    elseif type(a) == \"boolean\" then\n        return false\n\
    \    else\n        -- This is here to catch the \"unsupported type\" error in\
    \ case it gets thrown.\n        return false\n    end\nend", "  if type(a) ==\
    \ type(b) then\n    if type(b) == \"number\" then\n      return math.max(a, b)\n\
    \    else\n      return compare_one(b, a)\n    end\n  end\n  return nil\nend",
  "  if type(b) == 'number' then\n    if b == a then\n      return b\n    elseif type(b)\
    \ == 'string' then\n      if a:find(b) then\n        return b\n      else\n  \
    \      return a\n      end\n    else\n      if a < b then\n        return a\n\
    \      else\n        return b\n      end\n    end\n  elseif type(b) == 'string'\
    \ then\n    if a:find(b) then\n      return b\n    else\n      return a\n    end\n\
    \  elseif type(b) == 'table' then\n    if compare_one(a[1], b[1]) then\n     \
    \ return b\n    else\n      return a\n    end\n  else\n    return nil\n  end\n\
    end", "  if type(b) == \"string\" then\n    return b\n  elseif type(b) == \"number\"\
    \ then\n    if a==b then\n      return a\n    elseif a~=b then\n      return b\n\
    \    end\n  end\nend", "  if type(a) == type(b) then\n    if type(b) == \"number\"\
    \ then\n      if b > a then return b end\n      if b < a then return b end\n \
    \   else\n      if a:lower() > b:lower() then return b end\n      if a:lower()\
    \ < b:lower() then return b end\n    end\n  end\n  return a\nend\ncompare_one(1,\
    \ 2.5) \u279E 2.5\ncompare_one(1, \"2,3\") \u279E \"2,3\"\ncompare_one(\"5,1\"\
    , \"6\") \u279E \"6\"\ncompare_one(\"1\", 1) \u279E nil\n</code>\n<|/ a tags=lua,lua-table\
    \ |>\n<| c |>\nIf you're going to compare for equality, use `==` instead of `=`\n\
    <|/ c |>\n<| c |>\nI don't think the comparison function will actually be needed\
    \ here: `return type(b) == \"number\" and b > a`\n<|/ c |>\n<| a dscore=3 |>\n\
    Another way of doing it is to create a table with numerical keys and then use\
    \ table.max. For example:\n<code>", "  if type(a) ~= type(b) then return end\n\
    \  if type(a) == \"number\" then\n    if a == b then return end\n    if a < b\
    \ then return b else return a end\n  end\n  if type(a) == \"string\" then\n  \
    \  if a:find(b) then return b end\n    if a:find(b) == nil then return b end\n\
    \  end\n  return nil\nend", "  if a ~= b then\n    if type(a) == 'number' and\
    \ type(b) == 'number' then\n      return a > b\n    elseif type(a) == 'string'\
    \ and type(b) == 'string' then\n      return (a:lower():find(b:lower())) or (a:find(b:lower()))\
    \ or (a == b)\n    else\n      return false\n    end\n  else\n    return true\n\
    \  end\nend", "  if a == b then return end\n  local a_num = tonumber(a)\n  local\
    \ b_num = tonumber(b)\n  if a_num == b_num then return end\n  if a == b then return\
    \ '' end\n  if a_num < b_num then return '<' elseif a_num > b_num then return\
    \ '>' end\nend", "  if a == b then return nil end\n  if type(a) == \"number\"\
    \ and type(b) == \"number\" then\n    if a == b then return nil end\n    if a\
    \ > b then return b end\n    if a < b then return a end\n  elseif type(a) == \"\
    string\" and type(b) == \"string\" then\n    if a == b then return nil end\n \
    \   if a:find(b) == 1 then return a end\n  end\n  return a\nend", "    local a1\
    \ = type(a)\n    local b1 = type(b)\n    if a1 ~= b1 then\n        return nil\n\
    \    end\n    if a1 ~= 'table' and a1 ~= 'userdata' then\n        return a\n \
    \   end\n    if b1 ~= 'table' and b1 ~= 'userdata' then\n        return b\n  \
    \  end\n    if a1 ~= 'table' then\n        return a\n    end\n    if b1 ~= 'table'\
    \ then\n        return b\n    end\n    if a1 ~= 'userdata' then\n        return\
    \ a\n    end\n    if b1 ~= 'userdata' then\n        return b\n    end\n    if\
    \ a:size() > b:size() then\n        return a\n    end\n    if b:size() > a:size()\
    \ then\n        return b\n    end\n    if type(a) == type(b) then\n        return\
    \ a > b\n    end\n    if type(a) == 'number' and type(b) == 'number' then\n  \
    \      return compare_one(a, b)\n    end\n    if type(a) == 'number' and type(b)\
    \ ~= 'string' then\n        return a\n    end\n    if type(a) == 'string' and\
    \ type(b) == 'number' then\n        return b\n    end\n    if type(a) == 'string'\
    \ and type(b) ~= 'string' then\n        return a\n    end\n    if a1 ~= 'string'\
    \ and b1 ~= 'string' then\n        return a\n    end\n    if a1 ~= 'string' and\
    \ b1 ~= 'string' then\n        return b\n    end\n    if a1 ~= 'string' and a1\
    \ ~= 'number' and b1 ~= 'number' then\n        return a\n    end\n    if a1 ~=\
    \ 'string' and a1 ~= 'number' and b1 ~= 'string' then\n        return b\n    end\n\
    \    return a\nend", "  local _, ret\n  if tonumber(a) == tonumber(b) then\n \
    \   ret = a\n  elseif type(a) == \"string\" then\n    local _a, _b = a:split(\"\
    ,\")\n    if tonumber(_a) == tonumber(_b) then\n      ret = _a\n    else\n   \
    \   ret = _a\n    end\n  elseif type(a) == \"table\" then\n    local _a, _b =\
    \ a:split(\",\")\n    if tonumber(_a) == tonumber(_b) then\n      ret = _a\n \
    \   else\n      ret = _b\n    end\n  elseif tonumber(a) > tonumber(b) then\n \
    \   ret = a\n  else\n    ret = b\n  end", "\tif type(a) == 'string' then a = tonumber(a)\
    \ end\n\tif type(b) == 'string' then b = tonumber(b) end\n\tif type(a) == 'table'\
    \ then\n\t\tif type(b) == 'table' then\n\t\t\treturn a.number > b.number\n\t\t\
    else\n\t\t\treturn false\n\t\tend\n\tend\n\treturn a > b\nend", "  local is_real\
    \ = type(b) == \"number\"\n  if is_real then\n    -- The comparison will be made\
    \ in two parts, first to determine the type of the \n    -- first value, then\
    \ to compare the values.\n    if type(a) ~= type(b) then\n      return None\n\
    \    end\n    if type(a) == \"string\" then\n      -- If the first value is a\
    \ string, convert the other two values to floats.\n      local _, a_real, a_decimal\
    \ = tonumber(a), tonumber(b), tonumber(a)\n      local _, b_real, b_decimal =\
    \ tonumber(b), tonumber(b), tonumber(b)", "  if a ~= b then\n    if type(a) ==\
    \ 'string' and b == '' then return nil end\n    if type(b) == 'string' and a ==\
    \ '' then return nil end\n    if type(a) == 'number' and type(b) == 'number' then\n\
    \      if type(a) == 'number' and type(b) ~= 'number' then\n        if math.abs(a)\
    \ < math.abs(b) then return '<' else\n          if math.abs(a) > math.abs(b) then\
    \ return '>' end\n        end\n      elseif type(a) == 'string' then\n       \
    \ if b == '.' then return '>' else\n          if b == ',' then return '<' end\n\
    \        end\n      elseif type(a) ~= 'number' and type(b) ~= 'number' then\n\
    \        if a < b then return '<' else\n          if b > a then return '>' end\n\
    \        end\n      end\n    end\n  end\n  return a\nend", "  local a_type = type(a)\n\
    \  local b_type = type(b)\n  local a_str, b_str\n  if a_type == \"number\" and\
    \ b_type == \"number\" then\n    a_str = tostring(a):lower()\n    b_str = tostring(b):lower()\n\
    \  elseif a_type == \"string\" and b_type == \"string\" then\n    a_str = a\n\
    \    b_str = b\n  else\n    return nil\n  end\n  if a_str == \"nan\" or b_str\
    \ == \"nan\" then\n    return a_str == \"nan\" and b_str == \"nan\" and true\n\
    \  elseif a_str == \"inf\" or b_str == \"inf\" then\n    return a_str == \"inf\"\
    \ and b_str == \"inf\" and true\n  elseif a_str == \"-inf\" or b_str == \"-inf\"\
    \ then\n    return a_str == \"-inf\" and b_str == \"-inf\" and true\n  elseif\
    \ a_str == b_str or a_str == tostring(b_str) then\n    return a_str == b_str or\
    \ a_str == tostring(b_str)\n  else\n    return a_str <= b_str and b_str <= a_str\n\
    \  end\nend", "  if a == b then\n    return nil\n  end\n  if type(a == 'number')\
    \ and type(b == 'number') then\n    if math.abs(a - b) < math.abs(math.abs(a)\
    \ - math.abs(b)) then\n      return a\n    end\n  end\n  if type(a) ~= 'string'\
    \ then\n    return b\n  end\n  local a_b = a:split('.')\n  local b_c = b:split('.')\n\
    \  local a_c = a_b:split('.')\n  for i = 0, #a_c do\n    if a_c[i] == b_c[i] then\n\
    \      break\n    end\n  end\n  if i == #a_c then\n    return b\n  end\n  return\
    \ nil\nend", "    if type(a) == type(b) then\n        if type(a) == \"number\"\
    \ then\n            return if a > b then a else b end\n        elseif type(a)\
    \ == \"string\" then\n            if a:sub(1, 1) == \",\" and b:sub(1, 1) == \"\
    ,\" then\n                return a:sub(1, #a) > b:sub(1, #b) end\n           \
    \ if a:sub(1, 1) == \".\" and b:sub(1, 1) == \".\" then\n                return\
    \ a:sub(1, #a) > b:sub(1, #b) end\n        end\n    else\n        return nil\n\
    \    end\n    return nil\nend", "  if a == nil then\n    return b\n  elseif type(a)\
    \ == \"string\" then\n    return tonumber(a)\n  elseif type(a) == \"number\" then\n\
    \    return a\n  elseif type(a) == \"table\" then\n    for i=1,#a do\n      if\
    \ a[i] == nil then\n        continue\n      end\n      if compare_one(a[i], b)\
    \ == nil then\n        return nil\n      end\n    end\n    return a\n  else\n\
    \    return nil\n  end\nend", "  if type(a) == 'number' and type(b) == 'number'\
    \ then\n    if a == b then\n      return true\n    else\n      -- Convert strings\
    \ to numbers if necessary\n      a = tonumber(a)\n      b = tonumber(b)\n    \
    \  if a ~= b then\n        return false\n      end\n    end\n  end\n  if type(a)\
    \ == 'string' and type(b) == 'number' then\n    a = tonumber(a)\n    if a ~= b\
    \ then\n      return false\n    end\n  end\n  if type(b) == 'string' and type(a)\
    \ == 'number' then\n    b = tonumber(b)\n    if a ~= b then\n      return false\n\
    \    end\n  end\n  if type(a) == 'string' and type(b) == 'string' then\n    a\
    \ = tonumber(a)\n    b = tonumber(b)\n    if a ~= b then\n      return false\n\
    \    end\n  end\n  return true\nend", "  -- The function will compare the variable\
    \ a to the variable b\n  -- If the values were the same, return None indicating\
    \ they are not equal\n  if a == b then\n    return nil\n  end\n  -- If one of\
    \ the variables is a string, convert it to a number before comparing\n  if type(a)\
    \ == \"string\" then\n    a = tonumber(a)\n  end\n  if type(b) == \"string\" then\n\
    \    b = tonumber(b)\n  end\n  -- If the values are numeric, compare them\n  if\
    \ type(a) == \"number\" and type(b) == \"number\" then\n    if math.abs(a - b)\
    \ > 1e-4 then\n      return a\n    end\n  -- If the values are strings, compare\
    \ them alphabetically\n  elseif type(a) == \"string\" and type(b) == \"string\"\
    \ then\n    if a < b then\n      return a\n    end\n  end\n  return nil\nend",
  "   assert(type(b) == \"number\" or (type(b) == \"string\" and b:sub(1, 1):match(\"\
    ^[%c%p]+$\")))\n   assert(type(a) == \"number\" or (type(a) == \"string\" and\
    \ a:sub(1, 1):match(\"^[%c%p]+$\")))\n   if math.abs(a - b) < 1e-8 then\n    \
    \  return a\n   else\n      return b\n   end\nend", "\t-- Compare numbers\n\t\
    if type(b) ~= 'number' then\n\t\treturn false\n\tend", "  if a == nil or b ==\
    \ nil then\n    return nil\n  end\n  -- convert everything to a string\n  if type(a)\
    \ ~= 'string' then a = string(a) end\n  if type(b) ~= 'string' then b = string(b)\
    \ end\n  -- compare the strings and return the first non-nil result\n  if a ~=\
    \ b then\n    if a[1] == ',' then return b end\n    return a\n  end\n  return\
    \ nil\nend", "  if type(a) ~= 'number' or type(b) ~= 'number' then\n    return\
    \ a\n  elseif type(a) == 'number' and type(b) == 'number' then\n    if a > b then\n\
    \      return a\n    elseif b > a then\n      return b\n    else\n      return\
    \ None\n    end\n  elseif a ~= b then\n    return a\n  else\n    return b\n  end\n\
    end", "  if type(b) == string then b = tonumber(b) end\n  if type(a) == string\
    \ then a = tonumber(a) end\n  if a ~= b then return b end\n  return nil\nend",
  "  if a ~= b then\n    return b\n  end\nend", "  if type(a) ~= 'string' then\n \
    \   return a\n  elseif type(b) ~= 'string' then\n    return b\n  else\n    --\
    \ This code parses out commas and dots so that commas and dots represent the same\n\
    \    -- thing when used in numeric contexts.\n    -- This does not mean that a\
    \ user can use commas and dots to mean different things in\n    -- string contexts.\n\
    \    local function is_number(n)\n      if type(n) == 'number' then\n        return\
    \ true\n      else\n        return (n:match('^-?%d*%.?%d*%?%d*%s*,*%s*$') or n\
    \ == '0') or n:match('^-?%d*%.?%d*%?%d*%s*$')\n      end\n    end", "    local\
    \ a_ = tonumber(a)\n    local b_ = tonumber(b)\n    if a_ == b_ then return nil\
    \ end\n    if a_ ~= nil and b_ ~= nil and a_ > b_ then return b end\n    if a_\
    \ ~= nil and b_ ~= nil and a_ < b_ then return a end\n    return a_\nend", " \
    \ if type(a) ~= 'string' and type(b) ~= 'string' then\n    if type(a) == 'number'\
    \ then\n      a = tonumber(a)\n    end\n    if type(b) == 'number' then\n    \
    \  b = tonumber(b)\n    end\n  end\n  return a > b and a or b\nend", "  assert(type(a)\
    \ ~= 'string' and type(b) ~= 'string')\n  assert(type(a) == 'number' or type(b)\
    \ == 'number')\n  if type(a) == type(b) then\n    if type(a) == 'string' then\n\
    \      a = a:match('%a%d*[,.]%d*[,.]%d*[,.]%d*')\n      b = b:match('%a%d*[,.]%d*[,.]%d*[,.]%d*')\n\
    \      assert(a ~= nil and b ~= nil)\n      a = tonumber(a)\n      b = tonumber(b)\n\
    \      if type(a) == number and type(b) == number then\n        assert(a > b and\
    \ a < b + 1.0) -- float comparison is approximate.\n        if a >= b then\n \
    \         return a\n        else\n          return b\n        end\n      end\n\
    \    end\n    return a > b and a or b\n  end\n  return nil\nend", "  if a == b\
    \ then\n    return a\n  elseif type(a) == \"string\" and type(b) == \"string\"\
    \ then\n    if a == b then\n      return a\n    elseif a:find(\".\") ~= -1 and\
    \ b:find(\".\") ~= -1 then\n      if tonumber(a) > tonumber(b) then\n        return\
    \ a\n      else\n        return b\n      end\n    elseif a:find(\".\") ~= -1 then\n\
    \      if tonumber(a) > tonumber(b) then\n        return a\n      else\n     \
    \   return b\n      end\n    elseif b:find(\".\") ~= -1 then\n      if tonumber(a)\
    \ > tonumber(b) then\n        return a\n      else\n        return b\n      end\n\
    \    end\n  end\nend", "  if a == nil then return b end\n  if b == nil then return\
    \ a end\n  if a ~= b then return b end\n  return nil\nend", "  if a ~= b or type(a)\
    \ ~= \"number\" and type(b) ~= \"number\" then\n    return false\n  elseif type(a)\
    \ == \"number\" then\n    if a > b then\n      return a\n    elseif b > a then\n\
    \      return b\n    end\n  elseif type(b) == \"number\" then\n    if a > b then\n\
    \      return b\n    elseif b > a then\n      return a\n    end\n  end\nend",
  "  if a ~= b then\n    return a\n  elseif type(b) == \"number\" then\n    return\
    \ b\n  elseif type(b) == \"string\" then\n    if b == \"1\" then\n      return\
    \ a\n    elseif b == \"-1\" then\n      return -1\n    end\n  end\nend", "  if\
    \ type(a) == 'number' then a = string.format(\"%.6f\", a) end\n  if type(b) ==\
    \ 'number' then b = string.format(\"%.6f\", b) end\n  if a == b then return end\n\
    \  if string.match(a, '%.*[,.]%s*$') then\n    if string.match(b, '%.*[,.]%s*$')\
    \ then\n      a = tonumber(a)\n      b = tonumber(b)\n      if a < b then\n  \
    \      return a\n      else\n        return b\n      end\n    else\n      return\
    \ a\n    end\n  elseif string.match(b, '%.*[,.]%s*$') then\n    return b\n  end\n\
    \  return nil\nend", "  if type(a) == \"number\" then\n    if type(b) ~= \"number\"\
    \ then\n      return string.format(\"%g\", a)\n    elseif b == a then\n      return\
    \ nil\n    else\n      return a\n    end\n  elseif type(a) ~= \"string\" then\n\
    \    return a\n  end", '  if a == b then return end', "    if type(a) ~= type(b)\
    \ then return end\n    if type(a) == 'number' then\n        if a == b then return\
    \ end\n        a = tonumber(a)\n        b = tonumber(b)\n        if a < b then\
    \ return b end\n        return a\n    end\n    if type(a) == 'string' then\n \
    \       if a ~= b then return end\n        if a:find(\"^[%z\\s]+$\") == a or b:find(\"\
    ^[%z\\s]+$\") == b then\n            return a\n        end\n        -- remove\
    \ commas\n        a = a:gsub(\",\", \"\")\n        b = b:gsub(\",\", \"\")\n \
    \       if a == b then return end\n        return a\n    end\nend", "  if type(a)\
    \ == type(b) then\n    if a == b then return end\n    if type(b) ~= 'number' then\
    \ return b end\n    if a ~= a then return b end\n    -- if \"a,b\" is a string\
    \ then \"a,b\" is a float or string\n    if b == b then return b end\n    return\
    \ a\n  end\nend", "  if a == b then\n    return a\n  elseif type(a) == \"number\"\
    \ and type(b) == \"number\" then\n    if a < b then\n      return a\n    elseif\
    \ b < a then\n      return b\n    else\n      return nil\n    end\n  elseif type(a)\
    \ == \"string\" and type(b) == \"string\" then\n    if a < b then\n      return\
    \ a\n    elseif b < a then\n      return b\n    else\n      return nil\n    end\n\
    \  end\nend", "  if a == b then return end\n  if type(a) == 'table' then\n   \
    \ if type(b) == 'table' then\n      for k in pairs(a) do\n        local v = get(a,\
    \ k)\n        local v2 = get(b, k)\n        if v == v2 then\n          -- do nothing\n\
    \        elseif v ~= v2 then\n          return v\n        end\n      end\n   \
    \   for k in pairs(b) do\n        local v = get(a, k)\n        local v2 = get(b,\
    \ k)\n        if v == v2 then\n          -- do nothing\n        elseif v ~= v2\
    \ then\n          return v\n        end\n      end\n    elseif type(b) ~= 'table'\
    \ then\n      return a\n    end\n  end\n  return b\nend", "    if a == b then\n\
    \        return\n    end", "  if a == b then\n    return a\n  elseif type(b) ==\
    \ \"number\" then\n    if string.find(tostring(a), \"e\") then\n      if math.abs(a)\
    \ < math.abs(b) then\n        return b\n      else\n        return a\n      end\n\
    \    else\n      return a\n    end\n  elseif type(b) == \"table\" then\n    local\
    \ n = #b\n    for i = 1, n do\n      a = compare_one(a, b[i])\n      if a ~= nil\
    \ then\n        return a\n      end\n    end\n    return nil\n  else\n    if string.find(tostring(b),\
    \ \"e\") then\n      if math.abs(a) < math.abs(b) then\n        return a\n   \
    \   else\n        return b\n      end\n    else\n      return b\n    end\n  end\n\
    end", "    local a_type = type(a)\n    local b_type = type(b)\n    if a_type \
    \ == b_type then\n        if a > b then return b end\n        if a == b then return\
    \ None end\n        return a\n    end\n    if a_type  == \"string\" then\n   \
    \     if a == \".\" then\n            return compare_one(b, a)\n        elseif\
    \ b == \".\" then\n            return compare_one(a, b)\n        elseif b == \"\
    ,\" then\n            return compare_one(a, b)\n        end\n    end\n    if a_type\
    \  == \"number\" then\n        if type(b) == \"string\" then\n            return\
    \ compare_one(b, a)\n        elseif b == a then\n            return a\n      \
    \  elseif b == a then\n            return a\n        end\n    end\nend", "  if\
    \ tonumber(a) == tonumber(b) then\n    return b\n  elseif type(b) == \"string\"\
    \ and tonumber(b) == tonumber(a) then\n    return a\n  end\n  return nil\nend",
  "  if type(a) == \"string\" then\n    return a\n  elseif type(b) == \"string\" then\n\
    \    return b\n  elseif type(a) == \"number\" then\n    return a\n  elseif type(b)\
    \ == \"number\" then\n    return b\n  else\n    return a\n  end\nend", "  if a\
    \ ~= b then return b end\n  if type(a) == \"number\" then return a > b end\n \
    \ if type(a) == \"string\" then return a:find(b) ~= nil end\nend", "  if type(a\
    \ ~= type(b)) then return end\n  if a == nil then return a end\n  if type(a) ~=\
    \ 'table' then return a end\n  if a[1] == b[1] then return end\n  local a_real\
    \ = tonumber(a)\n  if a_real and b_real then\n    return a_real > b_real and a_real\
    \ or b_real\n  elseif a_real then\n    return a\n  elseif b_real then\n    return\
    \ b\n  else\n    return a\n  end\nend", '    if a == b then return true end',
  "  if type(a) ~= type(b) then return nil end\n  local a_val = tostring(a) ~= \"\"\
    \ and a or tostring(b)\n  local b_val = tostring(a) ~= \"\" and b or tostring(b)\n\
    \  return a_val > b_val\nend\ncompare_one = compare_one or compare_number\nreturn\
    \ compare_one\nend", "\tif type(a) ~= 'table' then return false end\n\tif type(b)\
    \ ~= 'table' then return false end\n\tfor i = 1, #a do\n\t\tif type(a[i]) ~= 'number'\
    \ then return false end\n\tend\n\tfor i = 1, #b do\n\t\tif type(b[i]) ~= 'number'\
    \ then return false end\n\tend\n\tif a == b then return false end\n\tif tonumber(a)\
    \ > tonumber(b) then return b end\n\treturn a\nend", "    if type(a) ~= type(b)\
    \ then\n        return nil\n    end\n    if a == \"nil\" or b == \"nil\" then\n\
    \        return nil\n    end\n    if a == \"false\" or b == \"false\" then\n \
    \       return nil\n    end\n    if a == \"true\" or b == \"true\" then\n    \
    \    return nil\n    end\n    if type(a) == \"string\" then\n        a = tonumber(a)\n\
    \        b = tonumber(b)\n    end\n    if type(a) == \"table\" and type(b) ==\
    \ \"table\" then\n        if type(a[1]) == \"table\" and type(b[1]) == \"table\"\
    \ then\n            if a[1] == b[1] then\n                return compare_one(a[2],\
    \ b[2])\n            else\n                return nil\n            end\n     \
    \   else\n            return nil\n        end\n    else\n        if a > b then\n\
    \            return a\n        else\n            return b\n        end\n    end\n\
    end", "  if type(a) ~= 'number' or type(b) ~= 'number' then\n    local a_str =\
    \ tostring(a) -- Represent a number as a string.\n    local b_str = tostring(b)\n\
    \    return a_str > b_str\n  elseif math.abs(a) > math.abs(b) then return b else\
    \ return a end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
