name: HumanEval_140_fix_spaces
language: lua
results:
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = text:gsub(\"%S\", \"_\")\n  if text:gsub(\"%S+\", \"_\"):sub(1, -1)\
    \ ~= text then\n    return text\n  end\n  return text:gsub(\"%S+\", function(s)\n\
    \    return s:gsub(\"%S+\", \"_\")\n  end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4ck9uf1.lua:21:\
    \ expected: \"Example\"\nactual: \"_______\"\nstack traceback:\n\t/tmp/tmpm4ck9uf1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub(\"%S\", function (c) return c:lower() end):gsub(\"%S+\", function\
    \ (c) return c:lower() end):gsub(\"(%S)[ ]*%S+\", function(_, low, high) return\
    \ low .. \"_\" .. high:gsub(\"%S+\", \"-\"..\"_\"):lower() end):gsub(\"[ ]+\"\
    , \"_\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9l79r8r9.lua:9:\
    \ attempt to index a nil value (local 'high')\nstack traceback:\n\t/tmp/tmp9l79r8r9.lua:9:\
    \ in function </tmp/tmp9l79r8r9.lua:9>\n\t[C]: in function 'string.gsub'\n\t/tmp/tmp9l79r8r9.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9l79r8r9.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  -- Make sure the text is string\n  text = text:gsub(\"%p\", \"\")\n  if text:sub(#text)\
    \ == \" \" then\n    text = text:gsub(\"%S+\", function(x)\n      return x:gsub(\"\
    %S+\", function(x)\n        return x:gsub(\"%S+\", function(x)\n          return\
    \ x:gsub(\"%S+\", function(x)\n            return x:gsub(\"%S+\", function(x)\n\
    \              return x:gsub(\"%S+\", function(x)\n                return x:gsub(\"\
    %S+\", function(x)\n                  return x:gsub(\"%S+\", function(x)\n   \
    \                 return x:gsub(\"%S+\", function(x)\n                      return\
    \ x:gsub(\"%S+\", function(x)\n                        return x:gsub(\"%S+\",\
    \ function(x)\n                          if x:sub(#x) == \" \" then return \"\
    _\" end\n                          return x\n                        end)\n  \
    \                    end)\n                    end)\n                  end)\n\
    \                end)\n              end)\n            end)\n          end)\n\
    \        end)\n      end)\n    end)\n  end\n  return text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu279uqpd.lua:44:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpu279uqpd.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   if text:match(\"^%s*$\") then\n      return text\n   end\n   local spaces\
    \ = text:gsub(\"%w+\", function(match)\n      return \"_\" .. match\n   end)\n\
    \   spaces = text:gsub(\"%w+$\", function(match)\n      return \"_\" .. match\n\
    \   end)\n   return spaces\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpob_ydpqw.lua:24:\
    \ expected: \"Example\"\nactual: \"_Example\"\nstack traceback:\n\t/tmp/tmpob_ydpqw.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub(\"%S\", \n      function(spaces)\n\tspaces = spaces or \"\
    \ \"\n\tspaces = spaces:gsub(\"%S\", \" \")\n\treturn spaces:gsub(\"%S\", function(spaces)\n\
    \t  spaces = spaces or \"_\"\n\t  return spaces \n\tend)\n      end)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1u14sjfq.lua:23:\
    \ expected: \"Example\"\nactual: \"       \"\nstack traceback:\n\t/tmp/tmp1u14sjfq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local function consecutive_spaces(str)\n    local count = 0\n    for c in str:gmatch(\"\
    (%S+)\") do\n      if c == '' then return count\n      else count = count + 1\n\
    \      end \n    end\n    return count\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5yaj7657.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   if text:len() == 0 or text:sub(1,1) == \"\\n\" then return text end\n   local\
    \ fixed_text = text:gsub(\"[ \\t]+\", \"_\")\n   return fixed_text:sub(1,1) ==\
    \ \"-\" and fixed_text or fixed_text .. \"_\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnkkqnr4f.lua:17:\
    \ expected: \"Example\"\nactual: \"Example_\"\nstack traceback:\n\t/tmp/tmpnkkqnr4f.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \tlocal s = text\n\ts = string.gsub(s, \"[ ]+\", \"_\")\n\tlocal last_space =\
    \ string.find(s, \"_\", 1, true)\n\tif last_space then\n\t\tlocal new_spaces =\
    \ string.sub(s, 1, last_space-1)\n\t\ts = string.sub(s, \"_\", last_space-1)\n\
    \t\ts = s .. new_spaces\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzm2574xy.lua:14:\
    \ bad argument #2 to 'sub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpzm2574xy.lua:14: in local 'candidate'\n\t/tmp/tmpzm2574xy.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \tlocal f = false\n\tlocal result = \"\"\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2i_fdf6y.lua:22: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    return text:gsub( function(a)\n        if a:find(\" \") then\n          \
    \  return a:gsub( \" \", \"_\" );\n        elseif a:find( \"  \" ) then\n    \
    \        return a:gsub( \"  \", \"_\" );\n        else\n            return a;\n\
    \        end\n    end);\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgrbircki.lua:9:\
    \ bad argument #1 to 'gsub' (string expected, got function)\nstack traceback:\n\
    \t/tmp/tmpgrbircki.lua:9: in local 'candidate'\n\t/tmp/tmpgrbircki.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \tlocal space_count = text:gsub(\"  \", \" \"):gsub(\"^%s+\", function(s) return\
    \ s:gsub(\"%S\", \"_\")\n\t\tend)\n\treturn (space_count == 2) and text or \"\
    _\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfk6rb0ro.lua:17:\
    \ expected: \"Example\"\nactual: \"_\"\nstack traceback:\n\t/tmp/tmpfk6rb0ro.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local fixed_text = text\n  -- First replace all spaces\n  fixed_text = fixed_text:gsub(\"\
    %S+\", function(s)\n    local spaces = ''\n    while true do\n      spaces = spaces\
    \ .. '-'\n      local space = s:sub(1,1)\n      if not space then break end\n\
    \      s = s:sub(2)\n    end\n    return spaces\n  end)\n  -- Then, if there are\
    \ more than two consecutive spaces, replace all \n  -- consecutive spaces with\
    \ one dash\n  fixed_text = fixed_text:gsub(\"(%S{2,})\", function(s)\n    local\
    \ spaces = ''\n    while true do\n      spaces = spaces .. '-'\n      local space\
    \ = s:sub(1,1)\n      if not space then break end\n      s = s:sub(2)\n    end\n\
    \    return spaces\n  end)\n  return fixed_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   text = text:gsub(\"[[:space:]]\", \"_\")\n   text = text:gsub(\"  *\", \"\
    _\")\n   return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo01xpn24.lua:19:\
    \ expected: \"Yellow_Yellow__Dirty__Fellow\"\nactual: \"Yellow_Yellow_Dirty_Fellow\"\
    \nstack traceback:\n\t/tmp/tmpo01xpn24.lua:19: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    return text:gsub('(^|.)\\\\w+( )','\\\\1_\\2'):gsub('( +)','-'):gsub('( +)$','')\n\
    end\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwmooxs4r.lua:11: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub(\"[   ]+\", \" \"):gsub(\"%S+\", function(w) return w:sub(1,\
    \ w:len() - 2) end)\nend\n</cell>\n<text>\nLet's try a short test:\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpldux04ix.lua:11: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = text:gsub(\"[%a]\", function(c) return c:lower() end)\n  text = text:gsub(\"\
    [%A]\", function(c) return c:upper() end)\n  text = text:gsub(\"[%w]\", function(c)\
    \ return c  .. \"_\" end)\n  text = text:gsub(\"[ ]+\", \"_\")\n  return text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsn_4tafy.lua:19:\
    \ expected: \"Example\"\nactual: \"e_x_a_m_p_l_e_\"\nstack traceback:\n\t/tmp/tmpsn_4tafy.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local spaces_re = \" {1,}\"\n  local spaces_re2 = \" {2,}\"\n  text = text:gsub(\"\
    ( +)\", spaces_re, \"g\")\n  text = text:gsub(\"( +)\", spaces_re2, \"g\")\n \
    \ text = text:gsub(\"[ ]+\", \"_\")\n  return text\nend\n</code>\n<|/ a |>\n<|\
    \ c |>\nNice solution! But what about `\" Example \"`? It should be transformed\
    \ to `\"Example\"` not `\"Example_\"`.\n<|/ c |>\n<| c |>\nThat doesn't match\
    \ my requirements, unfortunately.\n<|/ c |>\n<| c |>\nFixed my solution to include\
    \ it.\n<|/ c |>\n<| c |>\nNice solution! But what about `\" Example 1 \"`? It\
    \ should be transformed to `\"Example1\"` not `\"Example1_\"`.\n<|/ c |>\n<| a\
    \ |>\nHere is a solution that doesn't use any regex. Just splits and joins the\
    \ original string and then checks if the resulting string is a single word:\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0nybcrql.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local fixed_text = text\n  local spaces = text:gsub( \" \", \"_\" )\n  spaces\
    \ = spaces .. \"_\"\n  spaces = text:gsub( \" \", \"_\" )\n  fixed_text = text:gsub(\
    \ \" \", \"_\" )\n  if text:len() ~= text:gsub( \" \", \"_\" ):len() then\n  \
    \  fixed_text = fixed_text:gsub( \" \", \"_\" )\n  end\n  return fixed_text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9tkmgg9.lua:26:\
    \ expected: \"Exa-mple\"\nactual: \"Exa___mple\"\nstack traceback:\n\t/tmp/tmps9tkmgg9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    if text == nil then\n        return nil\n    end\n    \n    local spaces\
    \ = \"%w\"\n    local consecutive = \"%w\"\n    \n    local last_space = 0\n \
    \   local result = text\n    \n    for _, c in pairs(text) do\n        if c ==\
    \ \" \" then\n            table.insert(spaces, c)\n        else\n            table.insert(consecutive,\
    \ c)\n        end\n    end\n    \n    if #consecutive == 1 then\n        last_space\
    \ = consecutive[1]\n    else\n        last_space = spaces[#spaces]\n    end\n\
    \    \n    table.sort(spaces)\n    \n    local space_index = nil\n    for _, c\
    \ in pairs(spaces) do\n        space_index = space_index or (#spaces) + 1\n  \
    \      if space_index ~= c then\n            result = result:sub(1, #result +\
    \ 1)\n            table.insert(consecutive, \"-\")\n        end\n        space_index\
    \ = space_index - 1\n    end\n    \n    if string.sub(result, #result + 1, #result)\
    \ == \"-\" then\n        return result:sub(1, #result + 1)\n    else\n       \
    \ return result\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnjfa2m1d.lua:19:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpnjfa2m1d.lua:19: in local 'candidate'\n\t/tmp/tmpnjfa2m1d.lua:55: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local spaces = {\" \", \"   \", \"  \"}\n    local new_spaces = {\"\", \"\
    _\", \"_\"}\n    local s = text\n    for i=1, #spaces do\n        s = s:gsub(\"\
    %s*%s[^ ]+\" .. spaces[i] .. \"%s*\", \"%1%2%4\")\n    end\n    if s:sub(1,2)\
    \ ~= \"\" then\n        s = s:gsub(\"%s*(%[    ]+%s*)\", \"%1%2%4\")\n    end\n\
    \    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3a1mahak.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmp3a1mahak.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmp3a1mahak.lua:25: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local spaces = text:gsub(\"  \",\"_\")\n  local spaces = text:gsub(\"  +\"\
    ,\"_\")\n  if text:gsub(\"  +\",\"\") ~= \"\" then\n    spaces = text:gsub(\"\
    \  +\",\"-\")\n  end\n  return spaces\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxju9hb9o.lua:21:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpxju9hb9o.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  if text:gsub('[\\s]+', '_') then\n    return text:gsub('[\\s]+', function(c)\
    \ return c:match('_') and '_' or '' end)\n  end\nend\n</cell>\n<text>\nPart 1:\
    \ Reading and writing files\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppcke0m9s.lua:9: invalid escape sequence near ''[\\s'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  if text == nil then return nil end\n  text = text:gsub('^%[%a]*$', '%1')\n\
    \  text = text:gsub(' ', '_')\n  text = text:gsub('  +', '- ')\n  return text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq726au6i.lua:22:\
    \ expected: \"Exa-mple\"\nactual: \"Exa___mple\"\nstack traceback:\n\t/tmp/tmpq726au6i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = string.gsub(text, \" \", \"_\")\n  local n = 0\n  -- First replace consecutive\
    \ spaces with -\n  while text:sub(1,1) == \" \" do\n    n = n + 1\n    text =\
    \ text:gsub(\"%s*\", function()\n      if n <= 2 then\n        return \"-\"\n\
    \      else\n        return \"-\"\n      end\n    end)\n  end\n  return text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6bg5vk9.lua:31:\
    \ expected: \"Exa-mple\"\nactual: \"Exa___mple\"\nstack traceback:\n\t/tmp/tmpc6bg5vk9.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  if text:match(\"  +\") then\n    return text:gsub(\"  +\", \"_\")\n  elseif\
    \ text:match(\"^%s*(.-)%s*$\") then\n    return text:gsub(\"^%s*(.-)%s*$\", \"\
    %1\")\n  else\n    return text\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1p7x2rdw.lua:22:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif\"\nstack traceback:\n\t\
    /tmp/tmp1p7x2rdw.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   return text:gsub(\"  \", \" \"):gsub(\" *\", \"_\")\nend\n</cell>\n<text>\n\
    Excercise 5: Remove all non-alphanumeric characters from a string\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphfw4x8dj.lua:11: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = text:gsub(\"%S\", function (c) return \"_\" .. c end);\n  local last_space\
    \ = text:find(\" \");\n  -- If there's only one space, add an underscore to each\
    \ word\n  if last_space ~= nil and text:sub(last_space+1) ~= \"\" then\n    text\
    \ = text:gsub(\"%S\", function (c) return \"_\" .. c end)\n  end\n  -- If there's\
    \ more than one space, trim the trailing underscores\n  text = text:gsub(\"_+\"\
    , \"_\");\n  -- If there's only one underscore, add a dash to each word\n  if\
    \ text:find(\"_\") == nil then\n    text = text:gsub(\"%S\", function (c) return\
    \ \"_\" .. c end)\n  end\n  return text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpep2w2plh.lua:27:\
    \ expected: \"Example\"\nactual: \"_E_x_a_m_p_l_e\"\nstack traceback:\n\t/tmp/tmpep2w2plh.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  if text==nil then\n    return nil\n  end\n  local spaces=0\n  local start=0\n\
    \  local end=0\n  local last_space=nil\n  while end < #text do\n    local c=text:sub\
    \ (end,end+1)\n    if c==' ' then\n      spaces=spaces+1\n      if last_space\
    \ ~= nil then\n        text=text:sub (end,start-1)\n      end\n      start=end+1\n\
    \    end\n    last_space=c\n    end\n  if spaces>2 then\n    while spaces>2 do\n\
    \      text=text:sub (1,start-1)\n      spaces=spaces-1\n    end\n  end\n  return\
    \ text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf4fpuzfa.lua:14: <name> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text\n     :gsub(' ', '_')\n     :gsub('  +', '_')\n     :gsub('  +',\
    \ '_')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7tq7k5bn.lua:21:\
    \ expected: \"Exa-mple\"\nactual: \"Exa___mple\"\nstack traceback:\n\t/tmp/tmp7tq7k5bn.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  -- Remove all spaces first\n  text = text:gsub(' ','')\n  -- If there are no\
    \ more spaces, return text\n  if not text:match(' ') then\n    return text\n \
    \ end\n  -- If there are more than 2 consecutive spaces, replace them all with\
    \ -\n  text = text:gsub('  ','-')\n  return text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5jxf5gs.lua:24:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"MudasirHanif\"\nstack traceback:\n\t\
    /tmp/tmpl5jxf5gs.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   local fixed_text = ''\n   for i=1, #text, 1 do\n      if text[i] == ' ' then\n\
    \         fixed_text = fixed_text .. '_' .. text[i]\n      else\n         fixed_text\
    \ = fixed_text .. text[i]\n      end\n   end\n   if fixed_text ~= '' then\n  \
    \    return (fixed_text .. '')\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7rcz5opl.lua:14:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp7rcz5opl.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp7rcz5opl.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   text = text:gsub(\"%s+\", function(s)\n      return s:gsub(\"%S+\", function(p)\n\
    \         return p:gsub(\"(%S)%s+\", function(s)\n            return s ..\"_\"\
    ;\n         end);\n      end)\n   end)\n   text = text:gsub(\"%(%S+)\", function(s)\n\
    \      return s:gsub(\"%S+\", function(p)\n         return p:gsub(\"(%S)\", function(s)\n\
    \            return s ..\"-\";\n         end);\n      end)\n   end)\n   return\
    \ text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_7a8bzo.lua:30:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpr_7a8bzo.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local fixed = text\n    for i = 1, #text do\n        if text:sub(i, i) ~=\
    \ \" \" then\n            fixed = fixed .. \"_\"\n        end\n    end\n    \n\
    \    local i = 2\n    while text:sub(i, i) ~= \" \" do\n        i = i + 1\n  \
    \  end\n    \n    while text:sub(i, i) ~= \" \" do\n        i = i + 1\n    end\n\
    \    \n    if i ~= #text then\n        fixed = fixed .. \"-\"\n    end\n    return\
    \ fixed\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqwtxcaud.lua:30: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   if text:sub(1,1) == \" \" then\n      text = text:sub(2,#text)\n   end\n \
    \  if text:sub(#text+1,#text) == \" \" then\n      text = text:sub(1,#text-1)\n\
    \   end\n   return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vgqndfw.lua:22:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmp_vgqndfw.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local spaces = text:gsub(\" \", \"_\")\n    local consecutive_spaces = text:gsub(\"\
    \  +\", \"_\")\n    if spaces ~= consecutive_spaces then\n        return spaces\
    \ .. consecutive_spaces\n    else\n        return text\n    end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for posting. I was able to get the function\
    \ working, and used it to remove duplicate spaces from a string. I appreciate\
    \ the help.\n<|/ c |>\n<| c |>\nNo problem. Remember that you can mark an answer\
    \ as accepted if it solved your problem; and that other users who have a similar\
    \ problem will see that the question has been answered. Remember, once you get\
    \ enough reputation points, you can upvote any number of answers that you find\
    \ helpful.\n<|/ c |>\n<| c |>\nI've tried upvoting but I need 15 reputation to\
    \ upvote. Once I get it, I'll come back and upvote answers. I marked it as accepted.\n\
    <|/ c |>\n<| a |>\nHere's a possible solution:\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpul4bdkg_.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local new_string\n  local last_char = text:sub(1,1)\n  new_string = text:sub(2)\n\
    \  if text:len() >= 2 then\n    new_string = text:sub(1,2) .. '_' .. text:sub(3)\n\
    \  end\n  return new_string .. last_char\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qwy1mjy.lua:21:\
    \ expected: \"Example\"\nactual: \"Ex_ampleE\"\nstack traceback:\n\t/tmp/tmp1qwy1mjy.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   -- Remove all spaces and replace them with underscores\n   local space_pattern\
    \ = \" +\"\n   local new_text = text:gsub(space_pattern,\"_\")\n   -- If there\
    \ were more than 2 consecutive spaces, replace them with a single - \n   if new_text:gsub(\"\
    \  +\",\"-\"):gsub(\"  +$\",\"\") then\n      new_text = \"-\"\n   end\n   return\
    \ new_text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql_86qr1.lua:22:\
    \ expected: \"Example\"\nactual: \"-\"\nstack traceback:\n\t/tmp/tmpql_86qr1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   if text == nil then return \"\" end\n   local space = \" \" -- We are using\
    \ a variable instead of \"\\s\" because \"\\s\" also match line breaks\n   local\
    \ space_len = space:len()\n   local t = text:gsub(\"(\" .. space .. \"){2,}\"\
    ,\"_\")\n   t = t:gsub(\"(\" .. space .. \")\",\"-\")\n   return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpusbqh9l8.lua:21:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir-Hanif-\"\nstack traceback:\n\
    \t/tmp/tmpusbqh9l8.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local space_count = 1\n    local last_space = text:find(\" \", 1, true)\n\
    \    while space_count < 3 and last_space ~= nil do\n        local new_text =\
    \ text:gsub(\"%a\" .. last_space .. \"a\", \"_\")\n        text = new_text\n \
    \       last_space = text:find(\" \", last_space + 1, true)\n        space_count\
    \ = space_count + 1\n    end\n    return text\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl68fn62w.lua:24:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpl68fn62w.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = text:gsub(\"[[:space:]]\", \"_\")\n  text = text:gsub(\"[[:space:]]{2,}\"\
    , \"_\")\n  return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplusfht_j.lua:18:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmplusfht_j.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  -- First count the number of consecutive spaces.\n  local num_spaces = text:gsub(\"\
    ^%s*(%S+)%s*$\", \"%1\"):gsub(\"^%s*\", \"%1\"):gsub(\"%s*$\", \"\")\n  -- Replace\
    \ all consecutive spaces with underscores.\n  text = text:gsub(\"%S+\", \"_\"\
    )\n  if text:gsub(\"_\") < 2 then\n    -- If there is only one space left, just\
    \ add an underscore.\n    text = text .. \"_\"\n  else\n    -- If there are more\
    \ spaces left, append a hyphen.\n    text = text .. \"-\"\n  end\n  -- Re-insert\
    \ the number of spaces.\n  text = text:gsub(\"_%S+\", num_spaces)\n  return text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr_cyt7i2.lua:13:\
    \ bad argument #2 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpr_cyt7i2.lua:13: in local 'candidate'\n\t/tmp/tmpr_cyt7i2.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local last_space=nil\n  return text:gsub('([%a])', function(c) \n    if c ==\
    \ ' ' then\n      if last_space then return '_' end\n      last_space=true\n \
    \   else\n      last_space=nil\n      return c\n    end\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyet4u1du.lua:25:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpyet4u1du.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local has_space = false\n    local fixed = \"\"\n    for i = 1, #text do\n\
    \        if text:sub(i,i) ~= \" \" then\n            if has_space then\n     \
    \           fixed = fixed .. \"_\"\n            end\n            fixed = fixed\
    \ .. text:sub(i,i)\n            has_space = true\n        elseif text:sub(i,i)\
    \ == \" \" then\n            fixed = fixed .. \"_\"\n            has_space = false\n\
    \        end\n    end\n    if #fixed > 2 then\n        fixed = fixed:gsub(\"%S+\"\
    , \" \")\n    end\n    return fixed\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This doesn't work for me on Lua 5.1.4: \" \" == \" \"\n<|/ c |>\n<| c |>\n: Thanks\
    \ for the heads up, I updated my answer to use `==` to compare `string`s rather\
    \ than `char`s. I still think your regex is still not right, but I haven't yet\
    \ figured out why.\n<|/ c |>\n<| c |>\nSadly this doesn't work for:  `local str\
    \ = \"  a  b\"`\n<|/ c |>\n<| c |>\n: I see. The `string` type doesn't include\
    \ spaces. The `char` type does (`char.\" \" == \"  \"`). What about using the\
    \ `char` type for this? `string.char(' ').. string.char(' ')`?\n<|/ c |>\n<| a\
    \ tags=lua dscore=4 |>\nThe easiest way to replace all spaces with underscores\
    \ is to simply use the string \"\\u000a\" (aka a newline) instead of \" \".\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmlcc4jdl.lua:28: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local s = text:gsub(\"%w+\", function(x) return x:gsub(\"%S+\", function(y)\
    \ return y .. \"_\" end) end)\n    return s:gsub(\"  +\", function(x) return x:gsub(\"\
    \  +\", function(y) return y .. \"-\" end) end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqgbvgggr.lua:16:\
    \ expected: \"Example\"\nactual: \"Example_\"\nstack traceback:\n\t/tmp/tmpqgbvgggr.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = text:gsub(\"([^ ]) ([^ ])\", \"\\1_\\2\")\n  text = text:gsub(\"([^\
    \ ]) ([^ ]) ([^ ])\", \"\\1_\\2_\\3\")\n  text = text:gsub(\"([^ ]) ([^ ]) ([^\
    \ ]) ([^ ])\", \"\\1_\\2_\\3_\\4\")\n  text = text:gsub(\"([^ ]) ([^ ]) ([^ ])\
    \ ([^ ]) ([^ ])\", \"\\1_\\2_\\3_\\4_\\5\")\n  text = text:gsub(\"([^ ]) ([^ ])\
    \ ([^ ]) ([^ ]) ([^ ]) ([^ ])\", \"\\1_\\2_\\3_\\4_\\5_\\6\")\n  text = text:gsub(\"\
    ([^ ]) ([^ ]) ([^ ]) ([^ ]) ([^ ]) ([^ ]) ([^ ])\", \"\\1_\\2_\\3_\\4_\\5_\\6_\\\
    7\")\n  text = text:gsub(\"([^ ]) ([^ ]) ([^ ]) ([^ ]) ([^ ]) ([^ ]) ([^ ]) ([^\
    \ ])\", \"\\1_\\2_\\3_\\4_\\5_\\6_\\7_\\8\")\n  return text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6v2ag2y9.lua:23:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasi\x01_\x02anif \"\nstack traceback:\n\
    \t/tmp/tmp6v2ag2y9.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   if text:match \" \" then\n      local last_space = text:find(\" \")\n    \
    \  local fixed_text = text\n      if #text > 1 then\n         local first = text:sub(1,last_space-1)\n\
    \         local last = text:sub(last_space+1)\n         fixed_text = first ..\
    \ \"_\" .. last\n      end\n      return fixed_text\n   else\n      return text\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z3oribc.lua:27:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir_Hanif \"\nstack traceback:\n\
    \t/tmp/tmp9z3oribc.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub(\"([^%s])\" %{\" \", \"\\t\", \"\\n\"}):gsub(\"(%{2,})\" ..\
    \ \"([^%s])\" %{\" \", \"\\t\", \"\\n\"}, \n    function(s, spaces, text2)\n \
    \     return (spaces and (text2 or \"\")  or \"\"):gsub(\"%s*\" %{spaces, \"-\"\
    })\n    end)\nend\n</cell>\n<text>\nThe following function takes an array of strings,\
    \ and returns another array where each element is a string \nin which all consecutive\
    \ whitespace (tabs and spaces) is replaced by a single dash:\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw_2lfhou.lua:14: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local spaces = \"^%(%w*)( +)%(%w*)$\"\n    local replace_pattern = \"\\1_\\\
    2\"\n    local consecutive_spaces = false\n    local spaces_count = 0\n    local\
    \ result\n    while true do\n        spaces_count = string.gsub(text, spaces,\
    \ \"_\" .. replace_pattern)\n        if string.len(text) >= spaces_count then\n\
    \            consecutive_spaces = true\n        end\n        if consecutive_spaces\
    \ then\n            result = string.reverse(result)\n        end\n        -- The\
    \ previous result can not be a space\n        if string.len(result) == 1 then\n\
    \            break\n        end\n        text = string.sub(text, spaces_count\
    \ + 1)\n    end\n    if consecutive_spaces then\n        result = string.reverse(result)\n\
    \    end\n    return result or text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7qdmaam8.lua:16:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmp7qdmaam8.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp7qdmaam8.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub(\"[ ]+\",\"_\"):gsub(\" *\",\"-\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqe9hn4d.lua:15:\
    \ expected: \"Example\"\nactual: \"-E-x-a-m-p-l-e-\"\nstack traceback:\n\t/tmp/tmpfqe9hn4d.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local spaces = text:gsub(\"%s+\", \"_\")\n    local spaces = spaces:gsub(\"\
    %s+\", \"_\")\n    return spaces\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3pltzjt.lua:19:\
    \ expected: \"Yellow_Yellow__Dirty__Fellow\"\nactual: \"Yellow_Yellow_Dirty_Fellow\"\
    \nstack traceback:\n\t/tmp/tmpp3pltzjt.lua:19: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   text = text:gsub(\"  \",\"_\")\n   text = text:gsub(\"  +\",\"_\")\n   text\
    \ = text:gsub(\"[   ]+\",\"_\")\n   return text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvllh2i4.lua:20:\
    \ expected: \"Yellow_Yellow__Dirty__Fellow\"\nactual: \"Yellow_Yellow_Dirty_Fellow\"\
    \nstack traceback:\n\t/tmp/tmpuvllh2i4.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  -- First replace spaces with underscores\n  text = text:gsub(\"  \",\"_\")\
    \ -- Replace multiple spaces\n  -- If there are more than 2 consecutive spaces\n\
    \  -- then replace all consecutive spaces with -\n  if text:gsub(\"  \",\"-\"\
    ):gsub(\"  \",\"-\"):gsub(\"  \",\"-\") == text then\n    return text\n  end\n\
    \  return text:gsub(\"  \",\"_\")\nend\n</code>\n<|/ a tags=lua,string,replace\
    \ dscore=1 |>\n<| c |>\nThis was the best solution for my needs. Thanks\n<|/ c\
    \ |>\n<| a tags=lua,string,replace |>\n<code>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg3fuk5j4.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub(\"%S\", function (c)\n    return string.format(\"%c\", tostring(c):match(\"\
    %S+\")) end\n  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo2szqzf8.lua:10:\
    \ bad argument #2 to 'format' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpo2szqzf8.lua:10: in function </tmp/tmpo2szqzf8.lua:9>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmpo2szqzf8.lua:9: in local 'candidate'\n\t/tmp/tmpo2szqzf8.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    return text:gsub(\"[%z\\1-\\127\\194-\\244\\377\\376\\377\\377\\377]\", \"\
    _\")\n        :gsub(\"[%z\\128-\\191]\", \"_\")\n        :gsub(\"[%z\\128-\\191]\"\
    , \"_\")\n        :gsub(\"[%z\\128-\\191]\", \"_\")\n        :gsub(\"[%z\\128-\\\
    191]\", \"_\")\n        :gsub(\"[%z\\128-\\191]\", \"_\")\n        :gsub(\"[%z\\\
    128-\\191]\", \"_\")\n        :gsub(\"[%z\\128-\\191]\", \"_\")\n        :gsub(\"\
    [%z\\128-\\191]\", \"_\")\n        :gsub(\"[%z\\128-\\191]\", \"_\")\n       \
    \ :gsub(\"[%z\\128-\\191]\", \"_\")\n        :gsub(\"[%z\\128-\\191]\", \"_\"\
    )\n        :gsub(\"[%z\\128-\\191]\", \"_\")\n        :gsub(\"[%z\\128-\\191]\"\
    , \"_\")\n        :gsub(\"[%z\\128-\\191]\", \"_\")\n        :gsub(\"[%z\\128-\\\
    191]\", \"_\")\n        :gsub(\"[%z\\128-\\191]\", \"_\")\n        :gsub(\"[%z\\\
    128-\\191]\", \"_\")\n        :gsub(\"[%z\\128-\\191]\", \"_\")\n        :gsub(\"\
    [%z\\128-\\191]\", \"_\")\n        :gsub(\"[%z\\128-\\191]\", \"_\")\n       \
    \ :gsub(\"[%z\\128-\\191]\", \"_\")\n        :gsub(\"[%z\\128-\\191]\", \"_\"\
    )\n        :gsub(\"[%z\\128-\\191]\", \"_\")\n        :gsub(\"[%z\\128-\\191]\"\
    , \"_\")\n        :gsub(\"[%z\\128-\\191]\", \"_\")\n        :gsub(\"[%z\\128-\\\
    191]\", \"_\")\n        :gsub(\"[%z\\128-\\191]\", \"_\")\n        :gsub(\"[%z\\\
    128-\\191]\", \"_\")\n        :gsub(\"[%z\\128-\\191]\", \"_\")\n        :gsub(\"\
    [%z\\128-\\191]\", \"_\")\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnrojp8k7.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local words = text:gsub(\"[ ]+\", \"_\"):gsub(\"%S+\", function(s)\n    \
    \    if s:match(\"^%S+$\") then\n            return \"\"\n        else\n     \
    \       return s\n        end\n    end)\n    local last_word = text:match(\"[^\
    \ ]+$\")\n    if words ~= last_word and words ~= \"\" then\n        return last_word\
    \ .. \"_\" .. words\n    end\n    return text\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtnawy_m.lua:27:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpwtnawy_m.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local fixed_text = text:gsub(\"% s+ \", \"_\")\n  fixed_text = fixed_text:gsub(\"\
    %{2,}\", \"_\")\n  return fixed_text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknt2960n.lua:18:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpknt2960n.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   text = text:gsub( [\" \" .. string.gsub( \" \", \"_\", \"%S+\" )], \"-\" )\n\
    \   return text\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr45z638b.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local words = text:gmatch(\"%w+\")\n  if #words == 1 then\n    return text\n\
    \  else\n    return text:gsub(\"[ ]+\", \"_\")\n  end\nend\n</code>\nFor your\
    \ second question, here is what I did:\n<code>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpno6tfuai.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local spaces = string.gsub(text,\" \",\"_\")\n  local spaces2 = string.gsub(spaces,\"\
    \ \",\"-\")\n  return spaces2\nend\n</code>\n<|/ a tags=lua,string-substitution,string\
    \ dscore=4 |>\n<| c |>\nThe only thing that makes Lua so powerful is its string\
    \ manipulation functionality.\n<|/ c |>\n<| c |>\nThanks for the response. The\
    \ reason I need this is because the text that I am passing to the function is\
    \ different in every instance. For the 1st instance, it would be:\n\"Blah blah\n\
    Blah blah\nBlah blah\" \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnrc1nl0m.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local num_spaces = string.find(text, \"[%a][%w]+\")\n    if num_spaces then\n\
    \        text = text:gsub(\"[%a][%w]+\", function(spaces)\n            return\
    \ spaces:gsub(\"%S\", function(c) \n                return string.format(\"%w\"\
    , c) \n            end)\n        end)\n        if num_spaces == 2 then\n     \
    \       text = text:gsub(\"[ ]+\", function(c)\n                return string.format(\"\
    -%S\", c)\n            end)\n        end\n    end\n    return text\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt94tdbga.lua:13:\
    \ invalid option '%w' to 'format'\nstack traceback:\n\t/tmp/tmpt94tdbga.lua:13:\
    \ in function </tmp/tmpt94tdbga.lua:12>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpt94tdbga.lua:12: in function </tmp/tmpt94tdbga.lua:11>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmpt94tdbga.lua:11: in local 'candidate'\n\t/tmp/tmpt94tdbga.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   if text == nil then return nil end\n   local result = {}\n   for i=1, #text\
    \ do\n      if text[i] == ' ' then\n         table.insert(result, i - 1)\n   \
    \   end\n   end\n   if #result == 1 then\n      table.insert(result, '-')\n  \
    \ end\n   return table.concat(result, '_')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe23u1djd.lua:25:\
    \ expected: \"Example\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpe23u1djd.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub(\"[ ]+\", function(c) \n    c = c:lower() \n    if c == \"\
    \ \" then return \"_\" end\n    if #c == 2 and c == \" \" then\n      return \"\
    _\"\n    end\n    if #c == 1 and c ~= \" \" then\n      return \"_\"\n    end\n\
    \    return c\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_h27rde.lua:27:\
    \ expected: \"Yellow_Yellow__Dirty__Fellow\"\nactual: \"Yellow_Yellow  Dirty \
    \ Fellow\"\nstack traceback:\n\t/tmp/tmpq_h27rde.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local num_spaces = str:find(\" \", 1, true)\n    if num_spaces > 1 then\n\
    \        return str:gsub(\"  \", \"_\")\n    else\n        return text\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2bjm1dbz.lua:9:\
    \ attempt to index a nil value (global 'str')\nstack traceback:\n\t/tmp/tmp2bjm1dbz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2bjm1dbz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   -- Replace any number of spaces with underscores -- \n   -- Replace all consecutive\
    \ spaces with - \n   text = string.gsub(text, \"  +\", \"_\")\n   text = string.gsub(text,\
    \ \" \", \"_\")\n   return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf67c582_.lua:21:\
    \ expected: \"Yellow_Yellow__Dirty__Fellow\"\nactual: \"Yellow_Yellow_Dirty_Fellow\"\
    \nstack traceback:\n\t/tmp/tmpf67c582_.lua:21: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  if text:match(\"^%s*(.-)%s*$\") then\n    local s = text:gsub(\"^%s*(.-)%s*$\"\
    , function(x)\n      local _, _, s = x:find(\"%s*\")\n      if s ~= nil then\n\
    \        return x:gsub(\"%s+\", \" \"):gsub(\"%s+\", \"_\")\n      end\n    end)\n\
    \    if s ~= nil then\n      return s\n    end\n  end\n  return text\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64tt4bjx.lua:27:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmp64tt4bjx.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local num_spaces = text:find(\" \")\n    if num_spaces ~= nil then\n    \
    \    text = text:gsub(\"%s*\", tostring(\" \"))\n    end\n    if text:find(\"\
    \ \") ~= nil and text:find(\" \") ~= text:nth then\n        text = text:gsub(\"\
    %s*\", tostring(\"-\"))\n    end\n    return text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4ym467xd.lua:13: function arguments expected near 'then'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  -- Note: this is only correct for URLs\n  -- (not URL-encoded URLs)\n  -- TODO:\
    \ make this work for URL-encoded URLs\n  return text:gsub(\"[ ]+\", \"_\")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_66305l.lua:20:\
    \ expected: \"Yellow_Yellow__Dirty__Fellow\"\nactual: \"Yellow_Yellow_Dirty_Fellow\"\
    \nstack traceback:\n\t/tmp/tmpe_66305l.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  -- remove whitespace from beginning and end of text\n  text = string.gsub(text,\
    \ \"^%s+\", function()\n    return string.gsub(string.gsub(text, \"%s+\", \" \"\
    ), \"%s+$\", \"\")\n  end)\n  \n  -- replace multiple spaces with single dash\n\
    \  text = string.gsub(text, \"%s\", function()\n    local s = \"\"\n    for c\
    \ in string.gsub(text, \"%s+\", \" \") do\n      if c == \"-\" then\n        s\
    \ = s .. \"_\"\n      elseif c == \"\\n\" then\n        s = s .. \"-\"\n     \
    \ elseif #s > 2 then\n        s = s .. \"-\"\n      end\n    end\n    return s\n\
    \  end)\n  \n  -- replace multiple consecutive dashes with single dash\n  text\
    \ = string.gsub(text, \"%-$\", function()\n    local s = \"\"\n    for c in string.gsub(text,\
    \ \"%s+\", \"-\") do\n      if c == \"-\" then\n        s = s .. \"_\"\n     \
    \ elseif c == \"\\n\" then\n        s = s .. \"-\"\n      elseif #s > 2 then\n\
    \        s = s .. \"-\"\n      end\n    end\n    return s\n  end)\n  return text\n\
    end\n</code>\n<|/ a tags=lua |>\n<| a |>\nTo replace spaces with underscores and\
    \ to replace more than 2 spaces with a single underscore, use this one-liner:\n\
    <code>\ngsub(\"%S+%+{2,}\", \"%_%_%_\", \"Example 1    2 3  4  5  6  7  8  9 \
    \ 10  11  12  13  14\")\n</code>\n<|/ a dscore=2 tags=lua |>\n<| a tags=lua |>\n\
    This is an old question, yet I came up with this function I find helpful.\n<code>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz5ju7d9f.lua:45: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  if text:match(\"%S+\") then\n    return text:gsub(\"%S+\", function (s)\n \
    \     if s == \" \" then\n\treturn \"_\"\n      else\n\treturn s\n      end\n\
    \    end)\n  else\n    return text\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd93ixtk8.lua:26:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpd93ixtk8.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \tlocal result = text\n\t\n\tfor i = 1, string.len(text) do\n\t\tif string.sub(text,\
    \ i, i+1) ~= \" \" then\n\t\t\tresult = result .. \"_\"\n\t\telse\n\t\t\tresult\
    \ = result .. string.sub(text, i, i+1)\n\t\tend\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo78e5thk.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   text = string.gsub(text, \"[ ]+\", \" \")\n   text = string.gsub(text, \"\
    [ ]+\", \"_\")\n   text = string.gsub(text, \"[  ]+\", \"_\")\n   return text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1oydmi94.lua:20:\
    \ expected: \"Yellow_Yellow__Dirty__Fellow\"\nactual: \"Yellow_Yellow_Dirty_Fellow\"\
    \nstack traceback:\n\t/tmp/tmp1oydmi94.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub(\"%w\", function(w)\n    return w == \"%w\" and w or w..\"\
    _\"\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcuvhxvn6.lua:17:\
    \ expected: \"Example\"\nactual: \"E_x_a_m_p_l_e_\"\nstack traceback:\n\t/tmp/tmpcuvhxvn6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local spaces = text:gsub(\"[\" .. string.gsub(\" \", \"%w\", \"_\") .. \"]\"\
    , \"_\")\n  if text:match \"^%w+\\s*\" then\n    spaces = text:gsub(\"^%w+\",\
    \ \"\"):gsub(\"%w+$\", \"\")\n  end\n  return spaces\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp15chvyrd.lua:10: invalid escape sequence near '\"^%w+\\s'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local text_no_spaces = text:gsub(\"[% ]+\", \"_\"):gsub(\"[%]+$\", \"\")\n\
    \  local space_count = #text:match(\"[%]+\")\n  if space_count > 2 then\n    local\
    \ fixed_text = text_no_spaces:gsub(\"%{2,}\", \"-%\")\n    fixed_text = fixed_text:gsub(\"\
    %-+\", \"\")\n    return fixed_text\n  else\n    return text_no_spaces\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5bcz9gp9.lua:9:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmp5bcz9gp9.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp5bcz9gp9.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   if text:match('^[%z\\1-\\127\\194-\\244][%z\\128-\\255]') then\n      text\
    \ = text:gsub('([^%z\\128-\\255])' '%1')\n   end\n   text = text:gsub('^[%z\\\
    128-\\255][%z\\128-\\255]' '_')\n   text = text:gsub('[%z\\128-\\255]' '-')\n\
    \   if text:match('%z') then\n      text = text:gsub('%z' '-')\n   end\n   return\
    \ text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw7omoq_z.lua:10: ')' expected near ''%1''\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \ttext = text:gsub(\"%s+\", \"_\")\n\ttext = text:gsub(\"[  ]+\", \"-\")\n\treturn\
    \ text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6rc7tzc.lua:19:\
    \ expected: \"Yellow_Yellow__Dirty__Fellow\"\nactual: \"Yellow_Yellow_Dirty_Fellow\"\
    \nstack traceback:\n\t/tmp/tmpp6rc7tzc.lua:19: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \tlocal words = text:gsub(\"([^ ])%S\", function(match, prefix)\n\t\tif prefix\
    \ ~= \"\" then return prefix .. \"_\" end\n\tend)\n\treturn (words and words:gsub(\"\
    (%S) \", function(match, match)\n\t\tif match ~= \"\" then return \"-\" end\n\t\
    end) or \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6wjm7bga.lua:10:\
    \ attempt to concatenate a nil value (local 'prefix')\nstack traceback:\n\t/tmp/tmp6wjm7bga.lua:10:\
    \ in function </tmp/tmp6wjm7bga.lua:9>\n\t[C]: in function 'string.gsub'\n\t/tmp/tmp6wjm7bga.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6wjm7bga.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local fixed_text = text\n  -- Replace spaces with underscores to prevent spaces\
    \ from being removed\n  -- This allows us to use _ as a prefix for a string without\
    \ issues\n  fixed_text = fixed_text:gsub(' ', '_')\n  -- If the string has more\
    \ than 2 consecutive spaces, replace all\n  -- consecutive spaces with -\n  fixed_text\
    \ = fixed_text:gsub(' %s+', '%-s')\n  -- Finally, replace all remaining underscores/dashes\
    \ with spaces\n  fixed_text = fixed_text:gsub('_+', ' ', -1)\n  return fixed_text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_izs63z.lua:27:\
    \ expected: \"Exa-mple\"\nactual: \"Exa___mple\"\nstack traceback:\n\t/tmp/tmpr_izs63z.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  if text:gsub(\"%S+\", function(x) return x:gsub(\"_\",\"-\") end) == \"\" then\
    \ return text end\n  return text:gsub(\"%S+\", function(x) return x:gsub(\"_\"\
    ,\"-\"):gsub(\"%S+\",\"-\") end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5gkgqqa.lua:16:\
    \ expected: \"Example\"\nactual: \"-\"\nstack traceback:\n\t/tmp/tmpx5gkgqqa.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local fixstr = \"\"\n  local isSpace = false\n  local lastSpace = -1\n  for\
    \ i = 1, #text, 1 do\n    isSpace = false\n    if string.sub(text, i, i) ~= \"\
    \ \" then\n      if lastSpace ~= -1 then\n        fixstr = fixstr .. \"_\"\n \
    \     end\n    end\n    lastSpace = i\n    if string.sub(text, i, i) ~= \" \"\
    \ then\n      isSpace = true\n    end\n    fixstr = fixstr .. string.sub(text,\
    \ i, i)\n  end\n  return fixstr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxj_4o8j.lua:31:\
    \ expected: \"Example\"\nactual: \"E_x_a_m_p_l_e\"\nstack traceback:\n\t/tmp/tmphxj_4o8j.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \tlocal words = text:gsub(\"%w+\", function(word) return \"_\" .. word; end)\n\
    \t-- For consecutive spaces, replace with - \n\twords = words:gsub(\"( +)\", function(spaces)\n\
    \t\treturn \"-\" .. spaces\n\tend)\n\treturn words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpln7z3t5l.lua:20:\
    \ expected: \"Example\"\nactual: \"_Example\"\nstack traceback:\n\t/tmp/tmpln7z3t5l.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local new_text = \"\"\n    local num_spaces = 0\n    for i = 1, #text do\n\
    \        if string.sub(text, i, i) ~= \" \" then\n            table.insert(new_text,\
    \ string.sub(text, 1, i))\n        else\n            table.insert(new_text, string.sub(text,\
    \ i, i))\n        end\n        num_spaces = num_spaces + 1\n        if num_spaces\
    \ > 2 then\n            table.insert(new_text, \"_\")\n            num_spaces\
    \ = 0\n        end\n    end\n    return new_text\nend\n</code>\n<|/ a tags=lua-patterns,lua,string,lua-5.2\
    \ |>\n<| c |>\nThis is great - I just wish there was a more generic solution which\
    \ would also work on a full table. Thanks\n<|/ c |>\n<| c |>\nThis works on tables\
    \ too, just replace `text` with `{text}` and change the `~=` to `~=~`\n<|/ c |>\n\
    <| c |>\nGreat. Thank you! And thank you for the additional info. I'll add that\
    \ to the code - just to make sure I'm not missing any edge cases which could cause\
    \ problems down the line.\n<|/ c |>\n<| c |>\nFor me it seems that `string.sub(text,\
    \ 1, i)` gives you the original character instead of the original character. `string.sub(text,\
    \ 1, i)[1]` did the trick for me.\n<|/ c |>\n<| a tags=lua-patterns,lua,string,lua-5.2\
    \ dscore=2 |>\nFor anyone looking for something that works on Lua 5.2 without\
    \ using external libraries etc.\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbk2p7c7e.lua:25: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \t-- Handle blank string as a special case.\n\tif text:len() == 0 then\n\t\treturn\
    \ text\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzcsbevs7.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   text = text:gsub(\"[%z\\1-\\3-\\4:-\\v]\", \" \")\n   text = text:gsub(\"\
    \  +\", \"_\")\n   text = text:gsub(\"(^|-)    \", \"_\") -- replace consecutive\
    \ - with single _\n   return text\nend\n</code>\n<|/ a tags=lua |>\n<| c |>\n\
    The `string.gsub` function has a `count` parameter, so to replace only a specific\
    \ number of spaces, you can do `text:gsub(\"  +\", \"_\", 3)`\n<|/ c |>\n<| a\
    \ tags=lua dscore=3 |>\nA simple way to do this is to just replace the spaces\
    \ with an underscore:\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4o4scx9z.lua:14: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = text:gsub(\"[ ]+\", \"_\")\n  text = text:gsub(\"[ ]+$\", \"\")\n  if\
    \ text:gsub(\"^ *\", \"_\") ~= text then\n    text = \"_\" .. text\n  end\n  return\
    \ text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppd39b2g0.lua:20:\
    \ expected: \"Example\"\nactual: \"_Example\"\nstack traceback:\n\t/tmp/tmppd39b2g0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local newText = text\n    local spaces = 0\n    while spaces < 2 do\n   \
    \     spaces = text:find(\" \")\n        local newText = text:gsub(\"%S\", function\
    \ (c) \n            return c:lower() \n        end)\n    end\n    return newText\n\
    end\n</code>\n<|/ a tags=string,lua |>\n<| a dscore=0 |>\nThe simplest answer\
    \ is to use the string.gsub function. Here is a little more advanced version that\
    \ does something more in line with your original requirements:\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjsexy65h.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local space_pattern = \" +\"\n  return text:gsub(\"%S\", function (w)\n   \
    \ local s = w:find(space_pattern)\n    if s ~= nil then\n      w:sub(1, s - 1)\n\
    \    end\n    w:gsub(\"_\", \"_\")\n    w:gsub(\"_\", \" \")\n    return w\n \
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xihn0z6.lua:25:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmp2xihn0z6.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \t-- If already have underscores, replace them with spaces\n\ttext = text:gsub(\"\
    %S\", \"_\")\n\t-- If more than 2 consecutive spaces, replace all consecutive\
    \ spaces with -\n\ttext = text:gsub(\"( +)\", \"-%1\")\n\t-- Now replace underscores\
    \ with spaces\n\ttext = text:gsub(\"_\", \"%S\")\n\treturn text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvomwtwh3.lua:14:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpvomwtwh3.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpvomwtwh3.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   text = text:gsub(\"( +)\", function(x) return x:gsub(\"%S\", function(y) return\
    \ \"_\"..y end) end)\n   return text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpubstaa_1.lua:17:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpubstaa_1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local new_text = ''\n    for _, character in pairs(text) do\n        if character\
    \ == ' ' then\n            new_text = new_text .. '_' \n        elseif new_text\
    \ ~= '' then\n            new_text = new_text .. character\n        end\n    end\n\
    \    return new_text\nend\n</code>\n<|/ a tags=lua |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding why and/or how\
    \ this code answers the question improves its long-term value.\n<|/ c |>\n<| c\
    \ |>\nThis does not appear to work for `\" Example   3\"`. You have to have a\
    \ space before or after the 3 to replace with `_3`\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4jsrld0v.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local spaces = text:gsub(\"([^ ])\", function (c) \n      return (string.len(c)>1)\
    \ ? \"_\"..c:sub(1) : \"_\"\n  end)\n  return text:gsub(\"(  +)\", function (c)\
    \ \n      return (string.len(c)>1) ? \"_\"..c:sub(1) : \"_\"\n  end)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6nv1b8x6.lua:10: 'end' expected (to close 'function' at line\
    \ 9) near '?'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local spaces = string.gsub(text, \" \", \"_\")\n  return spaces .. string.gsub(spaces,\
    \ \"%s+\", function(space)\n    return (space:gsub(\"%S\") == '_' and '' or '_')\n\
    \  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ig7xkyc.lua:18:\
    \ expected: \"Example\"\nactual: \"ExampleExample\"\nstack traceback:\n\t/tmp/tmp5ig7xkyc.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local num_spaces = 0\n    local new_text = text\n    for i, c in ipairs(text)\
    \ do\n        if c == \" \" then\n            num_spaces = num_spaces + 1\n  \
    \      elseif num_spaces <= 1 then\n            new_text = new_text .. c\n   \
    \     elseif num_spaces > 2 then\n            new_text = new_text .. \"-\"\n \
    \       end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2tu25s1q.lua:27:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmp2tu25s1q.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \t-- Remove all spaces from text\n\ttext = text:gsub(' ','')\n\t-- If text has\
    \ more than 2 consecutive spaces, replace all consecutive \n\t-- spaces with -\n\
    \ttext = text:gsub('([%a])([%a])','%1-%2')\n\t-- Replace spaces with underscores\n\
    \ttext = text:gsub(' ','_')\n\t-- Add leading underscore to all but the first\n\
    \ttext = text:gsub('([^_])','%1_')\n\treturn text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppjn1m_vj.lua:24:\
    \ expected: \"Example\"\nactual: \"E_-_x_a_-_m_p_-_l_e_\"\nstack traceback:\n\t\
    /tmp/tmppjn1m_vj.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub(\"[  ]+\", \"_\")\nend\n</code>\n<|/ a dscore=2 tags=lua,string\
    \ |>\n<| c |>\n`s:gsub(\"[  ]+\", \"_\")` can be written `s:gsub(\"  \", \"_\"\
    )`\n<|/ c |>\n<| c |>\nThis doesn't work for multiple spaces between words.  `\"\
    \  a  b  c\"` -> `\"a_b_c\"`  instead of `\"a_b_c\"`\n<|/ c |>\n<| c |>\nThat's\
    \ true. But I think most people want that.\n<|/ c |>\n<| c |>\nThat would also\
    \ work in this case though: `\"  a  b  c  \".gsub(\"  \", \"_\")` returns `\"\
    a_b_c\"`\n<|/ c |>\n<| c |>\nThanks,. That was a typo.\n<|/ c |>\n<| a dscore=2\
    \ tags=lua,string |>\nThis one worked for me on Lua 5.2\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpawk13ki3.lua:11: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   -- First replace any spaces with underscores\n   -- text = text:gsub(\"[%\
    \ ]\", _)\n   -- If there are more than 2 consecutive spaces, replace them with\
    \ -\n   if text:gsub(\"%..%\"):gsub(\"%+\", _) > 1 then\n      text = text:gsub(\"\
    %..%\", _)\n   end\n   return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo01v56jn.lua:12:\
    \ bad argument #2 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpo01v56jn.lua:12: in local 'candidate'\n\t/tmp/tmpo01v56jn.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub( [\" \"], '_'):gsub( [\" \",\"  \",\"   \"], function(c)\n\
    \    if c==\" \" then\n      return \"_\"\n    else\n      return c\n    end\n\
    \  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7mdi2dgy.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  if text:match(\"^%s*$\") then\n    return text\n  end\n  local spaces = {}\n\
    \  local spaces_count = 0\n  local last_space\n  for last_space in text:gmatch(\"\
    [%S]+\") do\n    local space = spaces[spaces_count]\n    spaces[spaces_count]\
    \ = space\n    spaces_count = spaces_count + 1\n    if space ~= last_space then\n\
    \      spaces[spaces_count] = \"-\"\n    end\n  end\n  return table.concat(spaces)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt43s45v.lua:29:\
    \ expected: \"Example\"\nactual: \"-\"\nstack traceback:\n\t/tmp/tmpqt43s45v.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local spaces = {\" \", \"   \", \"  \"}\n  local spaces2 = {\" \", \"   \"\
    , \"  \"}\n  for i, v in ipairs(spaces) do\n    text = text:gsub(v, \"_\")\n \
    \ end\n  local result = \"\"\n  for i = 1, #text do\n    local c = text[i]\n \
    \   if spaces[i - 1] == \" \" and spaces[i + 1] == c then\n      result = result\
    \ .. \"_\"\n    else\n      result = result .. c\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp45xj70e7.lua:20:\
    \ attempt to concatenate a nil value (local 'c')\nstack traceback:\n\t/tmp/tmp45xj70e7.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp45xj70e7.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   -- Remove all spaces in the string and replace them with underscores\n   text\
    \ = text:gsub('%w', string.gsub(' ','_','g'))\n   -- If there are more than two\
    \ consecutive spaces, \n   -- then remove them all and replace them with an -\n\
    \   text = text:gsub('%w+( +%w+)*','%1_%2')\n   return text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp521efgt4.lua:21:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmp521efgt4.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local spaces = text:gsub(' ', '_')\n  return spaces:gsub('%S+', function(s)\
    \ \n      if s == ' ' then return '-'\n      elseif s:match('%S') then return\
    \ '_' end\n      return ''\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50f0v2rv.lua:20:\
    \ expected: \"Example\"\nactual: \"_\"\nstack traceback:\n\t/tmp/tmp50f0v2rv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    return text:gsub( ' ', '_' ):gsub( ' {2,}', '_' )\nend\n</cell>\n<code language=julia-0.6>\n\
    @time fix_spaces(\"Example\")\n@time fix_spaces(\"Example 1\")\n@time fix_spaces(\"\
    \ Example 2\")\n@time fix_spaces(\" Example   3\")\n@time fix_spaces(\"Example\
    \ 1\")\n@time fix_spaces(\"Example 1\")\n</cell>\n<code language=julia-0.6>\n\
    @time fix_spaces(\"Example 1\")\n</cell>\n<code language=julia-0.6>\nusing CSV\n\
    </cell>\n<code language=julia-0.6>\ndf = CSV.read(\"data.csv\", header=true) \
    \ # (true) means skip the header and use the first line as header.\n</cell>\n\
    <code language=julia-0.6>\ndf\n</cell>\n<code language=julia-0.6>\n# df.name\n\
    </cell>\n<code language=julia-0.6>\n# df.name[1]\n</cell>\n<code language=julia-0.6>\n\
    # df.name[1:10] # select all but the first 10 lines\n</cell>\n<code language=julia-0.6>\n\
    # df.name[end]\n</cell>\n<code language=julia-0.6>\n# df.name[1:end, :]  # select\
    \ all but the last 10 lines of the DataFrame\n</cell>\n<code language=julia-0.6>\n\
    # df.name[1:end, 1]\n</cell>\n<code language=julia-0.6>\n# df.name[1:end, 1:10]\
    \  # select all but the first 10 columns of the DataFrame\n</cell>\n<code language=julia-0.6>\n\
    # df.name[1:end, 2:10]\n</cell>\n<code language=julia-0.6>\n# df.name[1:end, 1:end-1]\
    \  # selects everything but the first column\n</cell>\n<code language=julia-0.6>\n\
    # df.name[1:end, 2:end]  # select all but the first and the second column\n</cell>\n\
    <code language=julia-0.6>\n# df.name[1:end, 3:end]\n</cell>\n<code language=julia-0.6>\n\
    # df.name[1:end, 2:end]\n</cell>\n<code language=julia-0.6>\n# df.name[1:end-1,\
    \ 2:end]\n</cell>\n<code language=julia-0.6>\n# df.name[1:end-1, 2:end-1]  # select\
    \ everything but the first and the second column\n</cell>\n<code language=julia-0.6>\n\
    # df.name[1:end-1, 2:end-1]\n</cell>\n<code language=julia-0.6>\n# df.name[1:end-1,\
    \ 2:end-1:10]  # select everything but the first and the second column and all\
    \ but the last 10\n</cell>\n<code language=julia-\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy_v1gah8.lua:11: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = text:gsub(\"%S+\", function(s) return s:lower() end)\n  local num_spaces\
    \ = 0\n  -- Find all the spaces and add 1 to the counter each time a space is\
    \ found\n  for i = 1, text:len() do\n    if text:sub(i, i) ~= \" \" then\n   \
    \   num_spaces = num_spaces + 1\n    elseif num_spaces > 1 then\n      -- We are\
    \ at a double space, so replace everything with a -\n      text = text:gsub(\"\
    %S+\", function(s) return \"-\" end)\n    end\n  end\n  return text\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr92i873q.lua:26:\
    \ expected: \"Example\"\nactual: \"example\"\nstack traceback:\n\t/tmp/tmpr92i873q.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \tlocal str = text:gsub(\"  +\", \"_\")\n\tstr = str:gsub(\"  +$\", \"\")\n\t\
    str = str:gsub(\"^_+\", \"_\") -- remove starting underscore\n\treturn str\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyweepoi.lua:19:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpzyweepoi.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    if text == nil then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0cbxhky9.lua:23: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local spaces_count = 0\n    local space_count = text.find(' ')\n    while\
    \ space_count ~= nil do\n        spaces_count = spaces_count + 1\n        space_count\
    \ = text:find(' ', space_count + 1)\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx1p6gwc1.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local words = text:gsub(\"%w+\", function(x)\n    if x == \" \" then\n    \
    \  return \"_\"\n    elseif x == \"  \" then\n      return \"-\"\n    else\n \
    \     return x\n    end\n  end)\n  local length = words:gsub(\"(^|_)(.-)\\\\1+$\"\
    ):gsub(\"%1+\", \"%1\"):gsub(\"%1+$\", \"\")\n  if length ~= length then\n   \
    \ return fix_spaces(text)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9htcpofm.lua:18:\
    \ bad argument #2 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmp9htcpofm.lua:18: in local 'candidate'\n\t/tmp/tmp9htcpofm.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local result = text\n  -- Replace multiple consecutive spaces with a single\
    \ -\n  result = result:gsub(\"  +\",\"-\")\n  -- Replace multiple spaces with\
    \ a single -\n  result = result:gsub(\"  +\",_)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4kwv5szw.lua:13:\
    \ bad argument #2 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmp4kwv5szw.lua:13: in local 'candidate'\n\t/tmp/tmp4kwv5szw.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local no_spaces = text\n  while true do\n    local no_spaces_nospace = no_spaces\n\
    \    -- If text has no spaces, return it unchanged\n    if not no_spaces_nospace\
    \ then return no_spaces end\n    -- If text has one space, return it as-is\n \
    \   if no_spaces_nospace ~= \" \" then return no_spaces end\n    -- If there are\
    \ two spaces, change them to single space\n    -- Use gsub to match a space, followed\
    \ by anything not space\n    no_spaces_nospace = no_spaces_nospace:gsub(\"  +\"\
    ,\" \")\n    -- If text now has more than one space and no consecutive spaces,\n\
    \    -- return it with the underscore added\n    if no_spaces_nospace ~= \" \"\
    \ and no_spaces_nospace ~= \"\" then\n      return no_spaces_nospace\n    end\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp931trjbl.lua:31:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmp931trjbl.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   if text == \"\" then return text end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6jkpz2i5.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local spaces = {}\n  for space in string.gmatch(text, \"%S\") do\n    table.insert(spaces,\
    \ space)\n  end\n  for i = 1, #spaces do\n    if spaces[i-1] == spaces[i] then\n\
    \      spaces[i] = '-'\n    end\n  end\n  return table.concat(spaces, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsatxnius.lua:24:\
    \ expected: \"Example\"\nactual: \"E x a m p l e\"\nstack traceback:\n\t/tmp/tmpsatxnius.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   if text:match('^%s+$') then return text end\n   local spaces = text:gsub('\
    \ ','_')\n   spaces = spaces and spaces .. '_' or spaces\n   return spaces:gsub('^%s+','')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtf2pbdr.lua:18:\
    \ expected: \"Example\"\nactual: \"Example_\"\nstack traceback:\n\t/tmp/tmprtf2pbdr.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local spaces_re = \"[\" .. string.gsub(\" \", \"_\", \"g\") .. \"]+\"\n  local\
    \ no_spaces_re = \"[^\" .. spaces_re .. \"]\"\n  return text:gsub(\"([^\" .. spaces_re\
    \ .. \"]+)\", \n    function(x) return x:gsub(spaces_re, \"_\") end)\n    :gsub(no_spaces_re,\
    \ \"_\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wi64q_b.lua:20:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmp_wi64q_b.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = text:gsub(\"%S+\", function(s)\n    return s:gsub(\"[ ]\", \"_\")\n\
    \  end)\n  -- if text:match \"%s+\"\n  --  text = text:gsub(\"[  ]+\", \"_\")\n\
    \  -- end\n  \n  if text:match \"%s+\"\n    local new_text = text:gsub(\"%s+\"\
    , \"_\")\n    text = text:gsub(\"_+\", \"_\")\n    text = text:gsub(\"_+\", \"\
    _\")\n  else\n    text = text:gsub(\"_+\", \"_\")\n  end\n  \n  return text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6h8lrjjy.lua:17: 'then' expected near 'local'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  -- remove all spaces, if any\n  local result = text:gsub(\"%w\", function(a)\n\
    \    return a:gsub(\"%w\", function(b)\n      return b..\"_\"\n    end)\n  end)\n\
    \  -- if result has more than 2 consecutive spaces, replace them all with -\n\
    \  if result:gsub(\"%w+%w*\", function(c)\n    return c:gsub(\"%w+\", function(d)\n\
    \      return d:gsub(\"%w+\", function(e)\n        return e:gsub(\"%w+\", function(f)\n\
    \          return f..\"-\"\n        end)\n      end)\n    end)\n  end)~= text\
    \ then\n    -- replace all spaces with -\n    result = result:gsub(\"%w+\", function(c)\n\
    \      return c:gsub(\"%w+\", function(d)\n        return d:gsub(\"%w+\", function(e)\n\
    \          return e:gsub(\"%w+\", function(f)\n            return f..\"-\"\n \
    \         end)\n        end)\n      end)\n    end)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4yzb7yz.lua:42:\
    \ expected: \"Example\"\nactual: \"E-_x-_a-_m-_p-_l-_e-_\"\nstack traceback:\n\
    \t/tmp/tmpl4yzb7yz.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  -- Make sure text is properly escaped to avoid infinite looping\n  local escape_text\
    \ = text:gsub(\"'\", \"''\")\n  -- Replace all spaces with underscores\n  local\
    \ result = escape_text:gsub(\"%w+\", function(w)\n    if w:sub(1,1) == \"%\" then\
    \ return w end\n    return string.char(string.char(w:sub(1,1)) == \"_\" and \"\
    _\" or w)\n  end)\n  -- Replace consecutive spaces with one dash\n  result = escape_text:gsub(\"\
    \  +\", function(w)\n    if w:sub(1,1) == \" \" then return w end\n    return\
    \ string.char(string.char(w:sub(1,1)) == \"_\" and \"-\" or w)\n  end)\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprg1pur75.lua:14:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmprg1pur75.lua:14: in function </tmp/tmprg1pur75.lua:12>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmprg1pur75.lua:12: in local 'candidate'\n\t/tmp/tmprg1pur75.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local spaces = \"[   ]+\"\n    local space_repl = \"_\"\n    local space_count\
    \ = 1\n    local result = text\n    while true do\n        local old_result =\
    \ result\n        result = result:gsub(spaces, space_repl)\n        if result\
    \ == old_result then\n            space_count = space_count + 1\n            if\
    \ space_count > 2 then\n                result = result:gsub(spaces, \"-\")\n\
    \            end\n        else\n            break\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local spaces = {\n        [\"\\u00a0\"] = 0,\n        [\"\\u0009\"] = 32,\n\
    \        [\"\\u0020\"] = 160,\n        [\"\\u00A0\"] = 39,\n        [\"\\u1680\"\
    ] = 5760,\n        [\"\\u180E\"] = 5760,\n        [\"\\u200B\"] = 6144,\n    \
    \    [\"\\u200F\"] = 6144,\n        [\"\\u202A\"] = 7280,\n        [\"\\u202B\"\
    ] = 7280,\n        [\"\\u2030\"] = 7376,\n        [\"\\u2031\"] = 7376,\n    \
    \    [\"\\u2032\"] = 7376,\n        [\"\\u2033\"] = 7376,\n        [\"\\u2034\"\
    ] = 7376,\n        [\"\\u2035\"] = 7376,\n        [\"\\u2036\"] = 7376,\n    \
    \    [\"\\u2037\"] = 7376,\n        [\"\\u2038\"] = 7376,\n        [\"\\u2039\"\
    ] = 7376,\n        [\"\\u203A\"] = 7376,\n        [\"\\u203B\"] = 7376,\n    \
    \    [\"\\u2041\"] = 8128,\n        [\"\\u2042\"] = 8128,\n        [\"\\u2043\"\
    ] = 8128,\n        [\"\\u2044\"] = 8128,\n        [\"\\u2045\"] = 8128,\n    \
    \    [\"\\u2046\"] = 8128,\n        [\"\\u2047\"] = 8128,\n        [\"\\u2048\"\
    ] = 8128,\n        [\"\\u2049\"] = 8128,\n        [\"\\u204A\"] = 8128,\n    \
    \    [\"\\u204B\"] = 8128,\n        [\"\\u204C\"] = 8128,\n        [\"\\u204D\"\
    ] = 8128,\n        [\"\\u204E\"] = 8128,\n        [\"\\u204F\"] = 8128,\n    \
    \    [\"\\u2050\"] = 8128,\n        [\"\\u2051\"] = 8128,\n        [\"\\u2052\"\
    ] = 8128,\n        [\"\\u2053\"] = 8128,\n        [\"\\u2055\"] = 8128,\n    \
    \    [\"\\u2056\"] = 8128,\n        [\"\\u2057\"] = 8128,\n        [\"\\u2058\"\
    ] = 8128,\n        [\"\\u2059\"] = 8128,\n        [\"\\u205A\"] = 8128,\n    \
    \    [\"\\u205B\"] = 8128,\n        [\"\\u205C\"] = 8128,\n        [\"\\u205D\"\
    ] = 8128,\n        [\"\\u205E\"] = 8128,\n        [\"\\u205F\"] = 8128,\n    \
    \    [\"\\u21D1\"] = 8128,\n        [\"\\u21D6\"] = 8128,\n        [\"\\u21D8\"\
    ] = 8128,\n        [\"\\u21D9\"] = 8128,\n        [\"\\u21DA\"] = 8128,\n    \
    \    [\"\\u21DB\"] = 8128,\n        [\"\\u\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8ogk4ex5.lua:10: missing '{' near '\"\\u0'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   local result = {}\n   for token in gmatch(text, \"[^%s]+\") do\n      table.insert(result,\
    \ token:gsub(\"%S\",\"_\"):gsub(\"%S\",\"\"))\n   end\n   return table.concat(result,\
    \ \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphviclc00.lua:10:\
    \ attempt to call a nil value (global 'gmatch')\nstack traceback:\n\t/tmp/tmphviclc00.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmphviclc00.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local words = text:gmatch(\"[%a]+\") -- Get all words from the string text\n\
    \  -- Replace all spaces with underscores\n  -- If there are more than 2 consecutive\
    \ spaces, replace all consecutive spaces with -\n  -- If there are no spaces,\
    \ just return the string as is\n  -- This is done to fix a bug in Lua\n  if #words\
    \ > 2 then \n    text = text:gsub(\"[%a]+\", function (w) return w:gsub(\"%S+\"\
    ,\"_\"); end) -- Replace all words with underscores\n  else\n    text = text --\
    \ If there are no spaces, just return the string as is\n  end\n  return text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp7n7ra_j.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpp7n7ra_j.lua:14: in local 'candidate'\n\t/tmp/tmpp7n7ra_j.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = text:gsub(' ', '_')\n  text = text:gsub('  +', '_')\n  return text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pjgarwt.lua:20:\
    \ expected: \"Exa-mple\"\nactual: \"Exa___mple\"\nstack traceback:\n\t/tmp/tmp8pjgarwt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \ttext = text:gsub(\"%S\", function(s)\n\t\treturn s:gsub(\"[%a]\", function(c)\
    \ \n\t\t\tif c:sub(1, 1) == '_' then return '' end\n\t\t\treturn c\n\t\tend)\n\
    \tend)\n\tlocal function replace(c)\n\t\tlocal n = c\n\t\tif c == '_' then \n\t\
    \t\tn = string.sub(s, 1, 1)\n\t\tend\n\t\treturn n\n\tend\n\ttext = text:gsub(\"\
    %S+\", function(s)\n\t\twhile true do\n\t\t\ts = s:gsub(\"%S+\", replace)\n\t\t\
    \tif s ~= \"\" then break end\n\t\tend\n\t\treturn s\n\tend)\n\ttext = text:gsub(\"\
    %S+$\", \"\")\n\treturn text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfx5cxin.lua:36:\
    \ expected: \"Example\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpvfx5cxin.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local spaces = text:gsub(\"[[:space:]]\", \"_\")\n  if spaces:sub(1, 1) ~=\
    \ \"_\" then\n    spaces = spaces:gsub(\"_+\", \" \")\n  end\n  local spaces =\
    \ text:gsub(\"_+\", \"_\")\n  if spaces:sub(1, 1) ~= \"_\" then\n    spaces =\
    \ spaces:gsub(\"_+\", \" \")\n  end\n  return text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmggnbtj0.lua:24:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpmggnbtj0.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local last_space = text:find(\" \")\n  if last_space then\n    text = text:gsub(\"\
    ([\" .. last_space .. \"]+)\", function(match)\n      local result = match\n \
    \     local length = #result\n      if length > 1 then\n        local first, rest\
    \ = string.sub(result, 1, length - 1), string.sub(result, length + 1)\n      \
    \  if first == \" \" then\n          rest = rest:gsub(\"( +)\", \"_\")\n     \
    \   elseif last == \" \" then\n          rest = rest:gsub(\"(   +)\", \"_\")\n\
    \        end\n        result = first .. rest\n      end\n      return result\n\
    \    end)\n  else\n    text = text:gsub(\"( +)\", \"_\")\n  end\n  return text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkjdmmhl.lua:35:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpqkjdmmhl.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = text:gsub(\"%S\", function(c) \n    return string.char(tonumber(c:byte()+32))\n\
    \  end)\n  local last = string.len(text) \n  text = text:gsub(\"%S+\", function(c)\
    \ \n    return string.sub(c, 1, string.len(c)-1) and \"_\" or \n      string.sub(c,\
    \ 1, string.len(c)-2)\n  end)\n  return last ~= string.len(text) and text..\"\
    _\" or text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2rxp21_.lua:23:\
    \ expected: \"Example\"\nactual: \"__\"\nstack traceback:\n\t/tmp/tmpp2rxp21_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   text = text:gsub(\"%w+\", function(c)\n      local w = c:lower()\n      local\
    \ x = w == \"t\" .. w\n         or w == \"n\" .. w\n         or w == \"s\" ..\
    \ w\n         or w == \"m\" .. w\n         or w == \"r\" .. w\n         or w ==\
    \ \"t\" .. w\n         or w == \"n\" .. w\n         or w == \"s\" .. w\n     \
    \    or w == \"m\" .. w\n         or w == \"r\" .. w\n         or w == \"t\"\n\
    \         or w == \"n\"\n         or w == \"s\"\n         or w == \"m\"\n    \
    \     or w == \"r\"\n         or w == \"t\"\n         or w == \"n\"\n        \
    \ or w == \"s\"\n         or w == \"m\"\n         or w == \"r\"\n         or w\
    \ == \"t\"\n         or w == \"n\"\n         or w == \"s\"\n         or w == \"\
    m\"\n         or w == \"r\"\n         or w == \"t\"\n         or w == \"n\"\n\
    \         or w == \"s\"\n         or w == \"m\"\n         or w == \"r\"\n    \
    \     or w == \"t\"\n         or w == \"n\"\n         or w == \"s\"\n        \
    \ or w == \"m\"\n         or w == \"r\"\n         or w == \"t\"\n         or w\
    \ == \"n\"\n         or w == \"s\"\n         or w == \"m\"\n         or w == \"\
    r\"\n         or w == \"t\"\n         or w == \"n\"\n         or w == \"s\"\n\
    \         or w == \"m\"\n         or w == \"r\"\n         or w == \"t\"\n    \
    \     or w == \"n\"\n         or w == \"s\"\n         or w == \"m\"\n        \
    \ or w == \"r\"\n         or w == \"t\"\n         or w == \"n\"\n         or w\
    \ == \"s\"\n         or w == \"m\"\n         or w == \"r\"\n         or w == \"\
    t\"\n         or w == \"n\"\n         or w == \"s\"\n         or w == \"m\"\n\
    \         or w == \"r\"\n         or w == \"t\"\n         or w == \"n\"\n    \
    \     or w == \"s\"\n         or w == \"m\"\n         or w == \"r\"\n        \
    \ or w == \"t\"\n         or w == \"n\"\n         or w == \"s\"\n         or w\
    \ == \"m\"\n         or w == \"r\"\n         or w == \"t\"\n         or w == \"\
    n\"\n         or w == \"s\"\n         or \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpylgzenpt.lua:85: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local s = text:gsub( \" \", \"_\" )\n  return string.gsub(s, \"^%s*(.-)%s*$\"\
    , \"%1\")\nend\n</cell>\n<text>\nExercise 4\nThe string.gsub() function was introduced\
    \ in the last exercise.\nWhat is the expected behavior of the following code?\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwxda0sli.lua:12: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  if text:gsub(\"%S+\", function(x)\n    return x:gsub(\"[%Z%z%s]\", \"_\")\n\
    \  end)\n  and text:gsub(\"%s+\", function(x)\n    return x:gsub(\"[%Z%z%s]\"\
    , \"-\")\n  end)\n  and text:gsub(\"%S\", function(x)\n    return x:gsub(\"[%Z%z%s]\"\
    , \"_\")\n  end)\n  and text:gsub(\"%s\", function(x)\n    return x:gsub(\"[%Z%z%s]\"\
    , \"-\")\n  end)\n  return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3y7aitj4.lua:21: 'then' expected near 'return'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   if text == nil then\n      return nil\n   end\n   local spaces = 0\n   local\
    \ last_spaces = -1\n   while text:sub(1,1) ~= \" \" do\n      spaces = spaces\
    \ + 1\n      text = text:sub(1,#text)\n   end\n   if text:sub(1,1) ~= \" \" then\n\
    \      return nil\n   end\n   for i = 1, #text do\n      if text:sub(i,i) ~= \"\
    \ \" then\n         if spaces == last_spaces then\n            text = \"_\" ..\
    \ text\n         elseif spaces > 2 then\n            text = \"-\" .. text\n  \
    \       end\n         return text\n      end\n   end\n   return text\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local pattern = \"[ ]+\"\n  text = string.gsub (text, pattern, \"_\")\n  text\
    \ = string.gsub (text, \"[ ]+\", \"_\")\n  local result = string.gsub (text, \"\
    _+$\", \"\")\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrkju5xk.lua:20:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir_Hanif\"\nstack traceback:\n\t\
    /tmp/tmpvrkju5xk.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local spaces = 0\n  local lastspace = 0\n  local spaces_replaced = 0\n  local\
    \ last_char = ' '\n  local last_char_at = -1\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfolpgdxg.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local space_regex = \" \" -- A space repeated any number of times\n    local\
    \ new_text = text:gsub(space_regex, \"_\")\n    if text:gsub(\" \",\"_\")~=new_text\
    \ then\n        return new_text\n    else\n        return text\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjukkxup.lua:22:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpmjukkxup.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local spaces = text:gsub(\"%S\", \" \")\n  if spaces ~= text then\n    return\
    \ text:gsub(\"%S+\", spaces .. \"-\")\n  else\n    return text\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76zbexhw.lua:20:\
    \ expected: \"Example\"\nactual: \"       -\"\nstack traceback:\n\t/tmp/tmp76zbexhw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local spaces = false\n  local space = false\n  local result = \"\"\n  for c\
    \ in text:gmatch(\"[%a]+\") do\n    local lower = string.lower(c)\n    if lower\
    \ == \"\\\"\" then\n      space = true\n      spaces = true\n      result = result\
    \ .. lower\n    elseif lower == \"\\\"\" then\n      space = true\n      spaces\
    \ = true\n      result = result .. lower\n    elseif lower == \" \" then\n   \
    \   space = not space\n      if space and spaces then\n        result = result\
    \ .. \"_\"\n        spaces = false\n      else\n        result = result .. lower\n\
    \      end\n    else\n      result = result .. lower\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qm8i7nj.lua:40:\
    \ expected: \"Example\"\nactual: \"example\"\nstack traceback:\n\t/tmp/tmp4qm8i7nj.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local function replace(rep)\n    return function(match, ...)\n      return\
    \ text:gsub(rep, function(m)\n        return m == \" \" and rep(\" \", \"_\")\
    \ or rep(\" \")\n      end)\n    end\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvn6nw2c4.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \tlocal spaces = {}\n\tfor w in text:gmatch(\"%S+\") do table.insert(spaces, w)\
    \ end\n\ttext = text:gsub(\"%s+\" .. table.concat(spaces, \" \") .. \"%s+\", \"\
    %1_%2\")\n\tlocal new_spaces = {}\n\tlocal last_space\n\tfor w in text:gmatch(\"\
    %S+\") do \n\t\tif w == last_space then \n\t\t\tnew_spaces[#new_spaces+1] = w\n\
    \t\telse\n\t\t\tlast_space = w\n\t\t\tnew_spaces[#new_spaces+1] = w\n\t\tend\n\
    \tend\n\ttext = text:gsub(\"%s+\" .. table.concat(new_spaces, \" \") .. \"%s+\"\
    , \"%1_%2\")\n\treturn text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpslm85d_2.lua:30:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpslm85d_2.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local words = text.words\n    local i = #words\n    while i do\n        if\
    \ words[i] == \" \" then\n            words[i] = \"_\"\n        elseif words[i\
    \ + 1] == \" \" and words[i + 2] == \" \" then\n            words[i] = \"-\"\n\
    \        end\n        i = i - 1\n    end\n    return text:gsub(\"[ ]+\", \"_\"\
    )\nend\n</code>\nTo make things easier, we can also make a generic function which\
    \ will call other functions like so:\n<code>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy6jz02ri.lua:21: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local _spaces = false\n    local _prev = -1\n    local _prev2 = -1\n    local\
    \ _new = \"\"\n    for i = 1, #text, 1 do\n        local c = text[i]\n       \
    \ if c == \" \" then\n            _spaces = not _spaces\n        elseif c == _prev\
    \ then\n            if _spaces then\n                _new = _new .. \"_\"\n  \
    \          else\n                _new = _new .. \"-\"\n            end\n     \
    \   elseif c == _prev2 then\n            if _spaces then\n                _new\
    \ = _new .. \"_\"\n            else\n                _new = _new .. \"-\"\n  \
    \          end\n        else\n            _new = _new .. c\n        end\n    \
    \    _prev = c\n        _prev2 = _prev\n    end\n    return _new\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9yi35vgg.lua:30:\
    \ attempt to concatenate a nil value (local 'c')\nstack traceback:\n\t/tmp/tmp9yi35vgg.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmp9yi35vgg.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \ttext = text:gsub(\"[%z\\- ]\", \"_\")\n\ttext = text:gsub(\"%z\\+ +\", \"_+\"\
    )\n\treturn text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpox4t2tgu.lua:9: invalid escape sequence near '\"[%z\\-'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \tlocal new_text = text:gsub(\"%S+\", function (s) \n\t\treturn s:gsub(\"%S+\"\
    , function (s2) \n\t\t\treturn s2:gsub(\"%S+\", \"-\") \n\t\tend)\n\tend)\n\t\
    -- If there is just one space, \n\t-- then just replace it with _\n\tif text:match(\"\
    %S\") == text then\n\t\treturn new_text\n\telse\n\t\treturn new_text:gsub(\"%S+\"\
    , function (s) \n\t\t\treturn s:gsub(\"%S+\", function (s2) \n\t\t\t\treturn s2:gsub(\"\
    %S+\", \"_\") \n\t\t\tend)\n\t\tend)\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzpn3ecb.lua:30:\
    \ expected: \"Example\"\nactual: \"_\"\nstack traceback:\n\t/tmp/tmpmzpn3ecb.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   text = text:gsub(\"%S+\", function(a)\n      local result = a:gsub(\"%S+\"\
    , \"_\")\n      if result == \"\" then\n         return \"\"\n      elseif result:sub(1,\
    \ #result) == \" \" then\n         return \"_\"\n      else\n         return result\n\
    \      end\n   end)\n   return text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbwrkp1q.lua:25:\
    \ expected: \"Example\"\nactual: \"_\"\nstack traceback:\n\t/tmp/tmpbbwrkp1q.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   text = text:gsub(\"[ ]+\",\"_\")\n   if text:gsub(\"_+\",\"_\") ~= \"\" then\n\
    \      return text:gsub(\"_+\",\"_\")\n   else\n      return text\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp933aip77.lua:22:\
    \ expected: \"Yellow_Yellow__Dirty__Fellow\"\nactual: \"Yellow_Yellow_Dirty_Fellow\"\
    \nstack traceback:\n\t/tmp/tmp933aip77.lua:22: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  -- Find consecutive spaces\n  local function consecutive_spaces(text)\n   \
    \ local count = 0\n    local last_index = 1\n    for index, c in string.gmatch(text,\
    \ \"([^ ]+)\") do\n      if c == \" \" and last_index > index then\n        count\
    \ = count + 1\n      elseif c == \" \" and last_index == index then\n        count\
    \ = count + 1\n      elseif c ~= \" \" then\n        count = 0\n      end\n  \
    \    last_index = index\n    end\n    return count\n  end\n  \n  -- Find consecutive\
    \ underscores\n  local function consecutive_underscores(text)\n    local count\
    \ = 0\n    local last_index = 1\n    for index, c in string.gmatch(text, \"([^_]+)\"\
    ) do\n      if c == \"_\" and last_index > index then\n        count = count +\
    \ 1\n      elseif c == \"_\" and last_index == index then\n        count = count\
    \ + 1\n      elseif c ~= \"_\" then\n        count = 0\n      end\n      last_index\
    \ = index\n    end\n    return count\n  end\n  \n  -- Replace consecutive spaces\
    \ with a single _\n  local function fix_consecutive_spaces(text)\n    local count\
    \ = 1\n    local s = string.gsub(text, \"([^ ]+)\", \n      function(x)\n    \
    \    if string.find(x, \"_ \", 1, count) then\n          return \"_\" \n     \
    \   else\n          count = count + 1\n          return x\n        end\n     \
    \ end)\n    return s\n  end\n  \n  -- Replace consecutive underscores with a single\
    \ _\n  local function fix_consecutive_underscores(text)\n    local count = 1\n\
    \    local s = string.gsub(text, \"([^_]+)\", \n      function(x)\n        if\
    \ string.find(x, \"_\", 1, count) then\n          return \"_\" \n        else\n\
    \          count = count + 1\n          return x\n        end\n      end)\n  \
    \  return s\n  end\n  \n  -- Replace consecutive spaces and underscores with a\
    \ single _\n  local function fix_spaces_underscores(text)\n    local count = 1\n\
    \    local s = string.gsub(text, \"([^ ]+) \", \n      function(x)\n        if\
    \ string.find(x, \"_\", 1, count) then\n          return \"_\" \n        else\n\
    \          count = count + 1\n          return x\n        end\n      end)\n  \
    \  return s\n  end\n  \n  -- Replace spaces with a single _\n  local function\
    \ fix_spaces_underscores_spaces(text)\n    local count = 1\n    local s = string.gsub(text,\
    \ \"([^ ]+) \", \n      function(x)\n        if string.find(x, \" \", 1, count)\
    \ then\n          return \"_\" \n        else\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6o1pkro4.lua:107: 'end' expected (to close 'if' at line 93)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    if text ~= text then return text end\n    for i = 1, #text do\n        if\
    \ string.sub(text, i, i) == \" \" then\n            text = string.sub(text, 1,\
    \ i-1) .. \"_\" .. string.sub(text, i+1)\n        end\n    end\n    if text ~=\
    \ text then return text end\n    text = text\n    local consec_spaces = 0\n  \
    \  for i = 1, #text do\n        if string.sub(text, i, i) == \" \" then\n    \
    \        consec_spaces = consec_spaces + 1\n        else\n            consec_spaces\
    \ = 0\n        end\n    end\n    if consec_spaces == 2 then\n        text = text\n\
    \        for i = 1, #text do\n            if string.sub(text, i, i) == \" \" then\n\
    \                text = string.sub(text, 1, i) .. \"-\"\n            end\n   \
    \     end\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6xipini.lua:42:\
    \ expected: \"Exa-mple\"\nactual: \"Exa___mple\"\nstack traceback:\n\t/tmp/tmpw6xipini.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = text:gsub( ' ', '_' )\n  text = text:gsub( '  *', '_' )\n  text = text:gsub(\
    \ '  *$', '_' )\n  text = text:gsub( '^%s+', '' )\n  return text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnbdz0dw.lua:22:\
    \ expected: \"Exa-mple\"\nactual: \"Exa___mple\"\nstack traceback:\n\t/tmp/tmpjnbdz0dw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local no_spaces = text\n    local spaces\n    if text:match(\"%s+\") then\n\
    \        spaces = text:gsub(\"%s+\",\"_\")\n        no_spaces = text:gsub(\"_%s+\"\
    ,\"_\")\n    else\n        spaces = text\n        no_spaces = text\n    end\n\
    \    if spaces:sub(1,1) == \"_\" then\n        no_spaces = text:gsub(\"_%s+\"\
    ,\"_\")\n    elseif spaces:sub(1,1) == \"-\" then\n        no_spaces = text:gsub(\"\
    _%s+\",\"-\")\n    end\n    return no_spaces\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrrl8sj3.lua:30:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpcrrl8sj3.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  -- Fix all spaces to underscores\n  -- If there are more than 2 spaces, fix\
    \ all consecutive spaces to -\n  -- Example: \" Example   3\"\n  -- Example: \"\
    Example   3\"\n  -- Example: \"Example--3\"\n  -- Example: \"Example----3\"\n\
    \  -- Example: \"Example---3\"\n  -- Example: \"Example ---3\"\n  text = text:gsub(\"\
    %w\", \n    function(x)\n      -- Ignore spaces\n      -- Example: \"Example \
    \  3\"\n      -- Example: \"Example--3\"\n      -- Example: \"Example----3\"\n\
    \      -- Example: \"Example---3\"\n      -- Example: \"Example ---3\"\n     \
    \ if x:match \" \" then\n        return x\n      end\n      \n      -- Replace\
    \ spaces with _\n      -- Example: \" Example   3\"\n      -- Example: \"Example\
    \   3\"\n      -- Example: \"Example--3\"\n      -- Example: \"Example----3\"\n\
    \      -- Example: \"Example---3\"\n      -- Example: \"Example ---3\"\n     \
    \ \n      -- Handle --\n      -- Example: \"Example--3\"\n      if x:match \"\
    -\" then\n        return x.gsub(\"-\", \"_\")\n      end\n      \n      -- Handle\
    \ ---\n      -- Example: \"Example----3\"\n      if x:match \"-\" then\n     \
    \   return x.gsub(\"--\", \"_\")\n      end\n      \n      -- Handle --\n    \
    \  -- Example: \"Example--3\"\n      if x:match \"-\" then\n        return x.gsub(\"\
    --\", \"_\")\n      end\n      \n      -- Handle ---\n      -- Example: \"Example---3\"\
    \n      if x:match \"-\" then\n        return x.gsub(\"---\", \"_\")\n      end\n\
    \      \n      -- Handle ---\n      -- Example: \"Example ---3\"\n      if x:match\
    \ \"-\" then\n        return x.gsub(\"---\", \"_\")\n      end\n      \n     \
    \ -- Handle --\n      -- Example: \"Example ---3\"\n      if x:match \"-\" then\n\
    \        return x.gsub(\"--\", \"_\")\n      end\n      \n      -- Handle ---\n\
    \      -- Example: \"Example ---3\"\n      if x:match \"-\" then\n        return\
    \ x.gsub(\"---\", \"_\")\n      end\n      \n      -- Handle ---\n      -- Example:\
    \ \"Example ---3\"\n      if x:match \"-\" then\n        return x.gsub(\"---\"\
    , \"_\")\n      end\n      \n      -- Handle ---\n      -- Example: \"Example\
    \ ---3\"\n      if x:match \"-\" then\n        return x.gsub(\"---\", \"_\")\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdcx20sp3.lua:90: 'end' expected (to close 'if' at line 87)\
    \ near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local result = text:gsub( ' ', '_' )\n  if #result == 1 or result:sub(1,1)\
    \ == '_' then\n    result = '_'\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0s2b593b.lua:22:\
    \ expected: \"Exa-mple\"\nactual: \"Exa___mple\"\nstack traceback:\n\t/tmp/tmp0s2b593b.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return string.gsub(text, \" \", \"_\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplf78mdal.lua:18:\
    \ expected: \"Exa-mple\"\nactual: \"Exa___mple\"\nstack traceback:\n\t/tmp/tmplf78mdal.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local s = text:gsub(\"([^ ]+) \", \"\\1_\")\n  if text:gsub(\"%w+( %w+)*(%w+)?$\"\
    , \"_\"):gsub(\"%w+( %w+)*(%w+)?$\", \"_\") then\n    return s\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcp0z_qa7.lua:20:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"\x01_\x01_\"\nstack traceback:\n\t/tmp/tmpcp0z_qa7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local s = text\n    -- if text doesn't contain any spaces then just return\
    \ text\n    if #s > 0 then\n        -- remove spaces at front and back\n     \
    \   s = string.gsub(\" \",\"\",s)\n        -- fix for consecutive spaces\n   \
    \     if s[1]~=s[1] then\n            s = string.gsub(\"  \",\"\",s)\n       \
    \ end\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhs9okmw.lua:25:\
    \ expected: \"Example\"\nactual: \"Example Example\"\nstack traceback:\n\t/tmp/tmpqhs9okmw.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local new_string = \"\"\n  for i=1, #text, 1 do\n    if text:sub(i, i) == \"\
    \ \" then\n      new_string = new_string .. \"_\"\n    else\n      new_string\
    \ = new_string .. text:sub(i, i)\n    end\n  end\n  return new_string -- return\
    \ new string with spaces replaced with underscores\nend\n</code>\n<|/ a |>\n<|\
    \ c |>\nYou should never use `table.insert` in a loop, it will be inefficient\
    \ with large inputs. Just replace `table.insert` with something like `new_string\
    \ = new_string .. text:sub(i, i)`\n<|/ c |>\n<| c |>\nThank you for your comment,\
    \ I have updated the code to use `new_string = new_string .. text:sub(i, i)`\n\
    <|/ c |>\n<| c |>\nYes, the code could have been made more elegant but the question\
    \ wanted a solution without loops, I only tried to answer it in a way that it\
    \ would not have been marked as a duplicate.\n<|/ c |>\n<| a tags=lua-patterns,lua\
    \ dscore=3 |>\nHere is my solution which works on Lua 5.1:\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphfr09tax.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \tlocal space_re = \" +\"\n\tif text:find(space_re, -1) ~= nil then\n\t\ttext\
    \ = text:gsub(\"%s+\", function(c) return c..\"_\" end)\n\tend\n\tif text:find(space_re,\
    \ -2) ~= nil then\n\t\ttext = text:gsub(\"%s +\", function(c) return c..\"-\"\
    \ end)\n\tend\n\treturn text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8y61y2a6.lua:23:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir _Hanif _\"\nstack traceback:\n\
    \t/tmp/tmp8y61y2a6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   text = text:gsub( {[%a%s%s]+} , function(space)\n      return (space:gsub(\"\
    %s+\",\"-\")) \n   end)\n   return (text:gsub(\"%S+\", function(space)\n     \
    \ return (space:gsub(\"%s+\",\"-\")) \n   end))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9xirz5du.lua:9: unexpected symbol near '%'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local spaces_pattern = \"[   ]+\"\n    local leading_spaces = text:find(spaces_pattern,\
    \ 1)\n    local trailing_spaces = text:find(spaces_pattern, text:len())\n    \n\
    \    if leading_spaces ~= nil then\n        text = text:sub(1, leading_spaces\
    \ - 1)\n    end\n    \n    if trailing_spaces ~= nil then\n        text = text:sub((text:len()\
    \ - trailing_spaces), text:len())\n    end\n    \n    if text:find(spaces_pattern)\
    \ == nil then\n        text = text .. \"-\"\n    end\n    \n    return text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0wy7obk.lua:31:\
    \ expected: \"Example\"\nactual: \"Example-\"\nstack traceback:\n\t/tmp/tmpw0wy7obk.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local words = text:gsub(\"%w+\", \" \")\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_5fsq1fw.lua:21: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    if text:match(\"  +\") then\n        text = text:gsub(\"  +\", \"_\")\n \
    \   end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3v83zmjc.lua:19:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmp3v83zmjc.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local spaces = {\" \", \"\\t\", \"\\r\", \"\\n\"}\n    local spaces2 = {}\n\
    \    local i = 0\n    for i = 1, #spaces do\n        spaces2[i] = (spaces[i]):gsub(\"\
    %S\", \"_\")\n    end\n    local str = text\n    for i = 1, #spaces2 do\n    \
    \    str = str:gsub(\"%S\", spaces2[i])\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphwzqo31w.lua:25:\
    \ expected: \"Example\"\nactual: \"       \"\nstack traceback:\n\t/tmp/tmphwzqo31w.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub(' ','_'):gsub('  +','-'):gsub('  -','_')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gf791bk.lua:18:\
    \ expected: \"Exa-mple\"\nactual: \"Exa___mple\"\nstack traceback:\n\t/tmp/tmp_gf791bk.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub(\"[[:space:]]\",\"_\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdhlab3k.lua:16:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmppdhlab3k.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local result = text\n  local space_index = false\n  for index, c in pairs(text)\
    \ do\n    if c ~= ' ' then\n      if index == 1 and c ~= '\\n' then\n        space_index\
    \ = true\n      elseif space_index then\n        result = result:sub(1, index-1)\
    \ .. '_'\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvog8492y.lua:11:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpvog8492y.lua:11: in local 'candidate'\n\t/tmp/tmpvog8492y.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   -- Return string with consecutive spaces replaced by _\n   return text:gsub(\"\
    [  ]+\", \"_\")\nend\n</cell>\n<text>\n5.5 Split String By Character\nLua strings\
    \ are basically arrays of characters. To split a \nstring into an array of characters\
    \ you can use the following two functions:\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpde2y93_9.lua:12: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local new_text = text\n  -- Replace all spaces with underscores\n  new_text\
    \ = new_text:gsub(' ','_')\n  -- If there's a space in the string more than two\
    \ times, \n  -- then replace any consecutive spaces with -\n  if new_text:sub(1,1)\
    \ == '_' and new_text:sub(2,2) == '_' then\n    new_text = new_text:gsub(' ','-')\n\
    \  end\n  return new_text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpno82wwjx.lua:26:\
    \ expected: \"Exa-mple\"\nactual: \"Exa___mple\"\nstack traceback:\n\t/tmp/tmpno82wwjx.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   -- First, remove all the spaces from text and change to lower case\n   text\
    \ = text:gsub(\"[ \\t]+\",\"_\"):lower()\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqpmf7m6l.lua:22: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub(\"%S\", function(c) \n    if c ~= \" \" then \n      return\
    \ \"_\" \n    else \n      return c\n    end\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1aupobu4.lua:21:\
    \ expected: \"Example\"\nactual: \"_______\"\nstack traceback:\n\t/tmp/tmp1aupobu4.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   return text:gsub(\"%S+\", function(x)\n      return x:gsub(\"%S+\", function(y)\n\
    \         return y:gsub(\"%S+\", \"_\")\n      end)\n   end):gsub(\"%S+\", \"\
    _\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gcf_b03.lua:19:\
    \ expected: \"Example\"\nactual: \"_\"\nstack traceback:\n\t/tmp/tmp_gcf_b03.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub( [\" \", \"\\t\", \"\\n\", \"\\r\", \"\\f\", \"  \"] ) ..\
    \ \"_\"\nend\n</code>\n<|/ a dscore=4 tags=lua-patterns,string,lua,replace |>\n\
    <| c |>\nThis doesn't work in lua5.2. It has changed since 5.1, and the pattern\
    \ above doesn't work as of 5.1\n<|/ c |>\n<| c |>\nYes, it does work. I'm using\
    \ it on 5.1\n<|/ c |>\n<| a dscore=4 |>\nHere is a variation of koltan's answer,\
    \ which uses a character class to identify spaces and does not require additional\
    \ variables.\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptoijrb69.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local new_text = text:gsub(\"%S+\", function (s)\n    local spaces = string.len(s)\n\
    \    local new_s = \"\"\n    for i = 1, spaces do\n      new_s = new_s .. \"-\"\
    \n    end\n    return new_s\n  end)\n  return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5td5dmej.lua:23:\
    \ expected: \"Example\"\nactual: \"-------\"\nstack traceback:\n\t/tmp/tmp5td5dmej.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \tlocal spaces = text:match(\"%S+\")\n\tif not spaces then\n\t\treturn text\n\t\
    end\n\tspaces = spaces:gsub(\"%s+\",\"_\")\n\tlocal noSpaces = text:match(\"%S\"\
    )\n\tif spaces ~= noSpaces then\n\t\treturn noSpaces .. \"_\" .. spaces\n\tend\n\
    \treturn text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lmq_nzq.lua:24:\
    \ expected: \"Example\"\nactual: \"E_Example\"\nstack traceback:\n\t/tmp/tmp6lmq_nzq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \ttext = text:gsub(\"[%z\\1-\\3]\", function(s)\n\t\treturn s:lower()\n\tend)\n\
    \ttext = text:gsub(\"[%z1-]\", function(s)\n\t\treturn s:lower()\n\tend)\n\ttext\
    \ = text:gsub(\"[%z1- ]\", function(s)\n\t\treturn s:lower()\n\tend)\n\ttext =\
    \ text:gsub(\"[%z1-\\17]\", function(s)\n\t\treturn s:lower()\n\tend)\n\treturn\
    \ text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplz3wptfq.lua:28:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmplz3wptfq.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = text:gsub('^%s+', function()\n    local result = { }\n    local last_space\
    \ = -1\n    for c in string.gmatch('%s+') do\n      if c ~= ' ' and last_space\
    \ < c - 1 then\n        result[#result + 1] = string.format('%%d', c - last_space\
    \ + 1):gsub('%d%d+%d', function()\n          return '_' end)\n      else\n   \
    \     result[#result+1] = c\n      end\n      last_space = c\n    end\n    return\
    \ table.concat(result)\n  end)\n  text = text:gsub('( %s+)', function()\n    local\
    \ result = { }\n    local last_space = -1\n    for c in string.gmatch('( %s+)\
    \ ') do\n      if c ~= ' ' and last_space < c - 1 then\n        result[#result\
    \ + 1] = string.format('%%d', c - last_space + 1):gsub('%d%d+%d', function()\n\
    \          return '-' end)\n      else\n        result[#result+1] = c\n      end\n\
    \      last_space = c\n    end\n    return table.concat(result)\n  end)\n  return\
    \ text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikqfy8q4.lua:44:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpikqfy8q4.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = string.gsub(text, \"[%z\\1-\\127\\194-\\244][%z\\128-\\191]+\", \"_\"\
    )\n  text = string.gsub(text, \"%+$\", \"\")\n  text = string.gsub(text, \"[ ]+\"\
    , \"-\")\n  return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9o6xu664.lua:19:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir-Hanif-\"\nstack traceback:\n\
    \t/tmp/tmp9o6xu664.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local s = text:gsub(\" \",\"_\")\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0adnx96k.lua:19:\
    \ expected: \"Exa-mple\"\nactual: \"Exa___mple\"\nstack traceback:\n\t/tmp/tmp0adnx96k.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub(\"[  ]+\", function(s) return s:gsub(\"_\",\"-\") end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_oaubyo.lua:16:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpf_oaubyo.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local function consec_spaces(s)\n    local spaces = 0\n    for i, x in s:gmatch(\"\
    %S+\") do\n      if x ~= \" \" then\n        return x, spaces\n      end\n   \
    \   spaces = spaces + 1\n    end\n    return s, spaces\n  end\n  local result,\
    \ spaces = consec_spaces(text)\n  local space_count = spaces\n  if spaces > 2\
    \ then\n    space_count = space_count / 2 - 1\n  end\n  result = result:gsub(\"\
    %S+\", function(s) \n    if s == \" \" then\n      return \"_\"\n    end\n   \
    \ local n = space_count\n    if n == 0 then\n      return \"_\"\n    end\n   \
    \ if n > 2 then\n      return \"_\"..s:gsub(\"%S+\", \"_\")\n    end\n    n =\
    \ n - 1\n    return \" \"..(n-1)..\"-\"\n  end)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3nbjmj9w.lua:24:\
    \ attempt to index a nil value (local 'result')\nstack traceback:\n\t/tmp/tmp3nbjmj9w.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp3nbjmj9w.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = text or \"\"\n  local spaces_count = #text:gsub(\"[%a%s]+\", \"_\"):gsub(\"\
    _\", \"\")\n  local result = text:gsub(\"[%a%s]+\", \"_\")\n  return result ..\
    \ \"-\" .. spaces_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8x97bvg.lua:18:\
    \ expected: \"Example\"\nactual: \"_-0\"\nstack traceback:\n\t/tmp/tmp_8x97bvg.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local words = text:gsub(\"[ ]+\",\"_\"):gsub(\"_{2,}\",\"_\")\n    if words\
    \ ~= \"\" then\n        return words\n    end\n    return text\nend\n</cell>\n\
    <text>\nThe following is a simple example of using the function fix_spaces. We\
    \ will run fix_spaces three different times, each time with a different argument,\
    \ and print the output to the screen:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkp8npizv.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return string.gsub(text,\" \",\"_\") \n          .. ((string.len(text) > 2)\
    \ and \n                (string.gsub(text, \" \", \"-\") == text) and \n     \
    \           string.gsub(text, \" \", \"_\") or \"\")\nend\n</cell>\n<cell>\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwxr8ryl8.lua:14: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub(\"  +\",\"_\")\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Yes, this works great!  I made some minor changes, though.  It looks like it's\
    \ working with spaces after the spaces.  Thanks!\n<|/ c |>\n<| a dscore=2 |>\n\
    Here's a solution that's more compact:\n<code>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd1ay4evc.lua:11: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub(\"[%z\\1-\\127\\194-\\244]+\", \n    function(x)\n      return\
    \ (x == '%z' and x) or ('_' .. x)\n    end\n  )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcto330ml.lua:19:\
    \ expected: \"Example\"\nactual: \"_Example\"\nstack traceback:\n\t/tmp/tmpcto330ml.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local s = text:gsub(' ', '') -- replace all spaces in string\n    local x\
    \ = s:gsub(\"%s+\", function(c) return c:lower() end) -- replace consecutive spaces\
    \ with single space\n    if x:find(\"  \") then x = x:gsub(\"%s+\", function(c)\
    \ return c:upper() end) end\n    return text..x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2furlmq.lua:18:\
    \ expected: \"Example\"\nactual: \"ExampleExample\"\nstack traceback:\n\t/tmp/tmpr2furlmq.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   local new_text = text\n   for i = 1, #text do\n      if text[i] == ' ' then\n\
    \         if i == 1 then \n            new_text = new_text .. '_'\n         else\n\
    \            new_text = new_text .. '-'\n         end\n      else\n         new_text\
    \ = new_text .. text[i]\n      end\n   end\n   return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdhzvma8z.lua:18:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpdhzvma8z.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpdhzvma8z.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local fixed = text\n    local len = #text\n    local i = 0\n    while i <=\
    \ len-1 do\n        local c = text:sub(i,i)\n        if c == '+' then\n      \
    \      fixed = fixed..'_'\n        elseif c == ' ' and text:sub(i-1,i-1) == '\
    \ ' then\n            fixed = fixed..'-'\n        else\n            fixed = fixed..c\n\
    \        end\n        i = i + 1\n    end\n    return fixed\nend\n</cell>\n<text>\n\
    Now we add all the strings to the dictionary:\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6khaslkx.lua:25: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local spaces = text:gsub('  +', '_')\n  if text:match(spaces .. '_+$') then\n\
    \    spaces = text:gsub('  +', '_')\n  end\n  return spaces\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdwwhphk.lua:20:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpqdwwhphk.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   text = text:gsub(\"%w+\", function (word)\n      return (word:gsub(\"%S+\"\
    , function(c) return c:lower() end)) \n   end)\n   text = text:gsub(\"[ -]+\"\
    , \"_\")\n   return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj08v72k1.lua:19:\
    \ expected: \"Example\"\nactual: \"example\"\nstack traceback:\n\t/tmp/tmpj08v72k1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local result = text\n  local last_space = 0\n  for i = 1, #result do\n    if\
    \ result[i] == ' ' then\n      last_space = i + 1\n    elseif i > 1 then\n   \
    \   if last_space ~= i - 1 then\n        result = result:sub(1, last_space-1):gsub(\"\
    %S\", \"_\"):sub(1, #result)\n      end\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6usbkoww.lua:26:\
    \ expected: \"Example\"\nactual: \"_______\"\nstack traceback:\n\t/tmp/tmp6usbkoww.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local result = text\n  result = result:gsub(\"%S\", function(a)\n    if a:find(\"\
    \ \")~=nil then\n      return a:gsub(\"%S\", \"_\")\n    else\n      return a\n\
    \    end\n  end)\n  -- If the string has more or less than 2 consecutive spaces,\
    \ then replace all consecutive spaces\n  -- with a -\n  result = result:gsub(\"\
    % +%\", \"_\")\n  result = result:gsub(\"  +\", \"_\")\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjvwnvmit.lua:19:\
    \ malformed pattern (ends with '%')\nstack traceback:\n\t/tmp/tmpjvwnvmit.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpjvwnvmit.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   text = text:gsub((\" %s\"):format, \"_\");\n   text = text:gsub((\" %s\"):format,\
    \ \"-\");\n   text = text:gsub((\" %s\"):format, \"_\");\n   text = text:gsub((\"\
    \ %s\"):format, \"-\");\n   return text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt3_c6dz0.lua:9: function arguments expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   -- if text is empty or nil then return it unchanged\n   if text == nil or\
    \ text == \"\" then\n      return text\n   end\n   -- replace any whitespace with\
    \ underscores\n   text = text:gsub(\"%S\", function (c)\n      return string.format(\
    \ \"%c%s\", string.rep(\"_\", c:byte()), c:byte() )\n   end)\n   -- replace consecutive\
    \ spaces with dash\n   text = text:gsub(\"%A\", function (c)\n      return string.format(\
    \ \"%c%s\", string.rep(\"-\", c:byte()), c:byte() )\n   end)\n   return text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4n8ihx_x.lua:15:\
    \ bad argument #2 to 'format' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmp4n8ihx_x.lua:15: in function </tmp/tmp4n8ihx_x.lua:14>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmp4n8ihx_x.lua:14: in local 'candidate'\n\t/tmp/tmp4n8ihx_x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   text = text or \"\"\n   local spaceless_text = text:gsub(\"%w\", \" \")\n\
    \   if spaceless_text:match \"^[%w]*$\" then\n      return text\n   end\n   if\
    \ spaceless_text:match \"^[%w\\s]*[%w\\s]*$\" then\n      spaceless_text = text:gsub(\"\
    %w\", \"_\")\n   else\n      spaceless_text = text:gsub(\"%w\", \"_\")\n     \
    \ spaceless_text = spaceless_text:gsub(\"%S+\", \"_\")\n   end\n   if spaceless_text:match\
    \ \"^_+$\" then\n      return spaceless_text:gsub(\"%S+\", \"_\")\n   end\n  \
    \ return spaceless_text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjtrk6sky.lua:14: invalid escape sequence near '\"^[%w\\s'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local s = text:gsub(\"([^\" .. string.char(9) .. \"]+)\", \n\t\t      function(w)\
    \ \n\t\t        return w:gsub(\"[\" .. string.char(9) .. \"]+\", \"_\") \n\t\t\
    \      end)\n  if string.find(s, \"  \")  then\n    s = s:gsub(\"  \", \"_\")\n\
    \  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrdwaieo.lua:23:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpjrdwaieo.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = text:gsub(' ', '|_')\n  if text:match('^%w+$') then\n    return text\n\
    \  else\n    local result = text:gsub('%w+', function(w) \n      if w ~= '' then\n\
    \        w = w:gsub('_+', '|')\n        w = w:gsub('%w+', '|')\n        return\
    \ w\n      else\n        return ''\n      end\n    end)\n    result = result:gsub('%w+$',\
    \ '|_')\n    if result:match('^%w+$') then\n      return result\n    else\n  \
    \    return ''\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq6yc7as.lua:35:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpcq6yc7as.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local fixed_text = text\n    fixed_text:gsub(' ','_')\n    fixed_text:gsub('\
    \  +','-')\n    return fixed_text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfsl33t1x.lua:19:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmpfsl33t1x.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  local spaces = {}\n  local prev_char = {}\n  for i = 1, #text do \n    if text[i]\
    \ == ' ' then\n      table.insert(spaces, i)\n      if prev_char[i] then\n   \
    \     if prev_char[i] == ' ' then \n          prev_char[i] = '_'\n        end\
    \ \n      else \n        prev_char[i] = text[i]\n      end\n    end\n  end\n \
    \ if #spaces > 1 then\n    local new_spaces = {}\n    for i = 1, #spaces do\n\
    \      local j = spaces[i] - 1\n      if j < i then\n        local k = i\n   \
    \     while k <= j do \n          table.insert(new_spaces, k) \n          k =\
    \ k + 1\n        end\n      end\n    end\n    for i = 1, #spaces do\n      spaces[i]\
    \ = new_spaces[i - 1]\n    end\n  end\n  for i = 1, #spaces do\n    text[i] =\
    \ '_' .. text[i]\n  end\n  text = table.concat(text)\n  return text\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
    \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeaegi_8a.lua:42:\
    \ bad argument #1 to 'concat' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpeaegi_8a.lua:42: in local 'candidate'\n\t/tmp/tmpeaegi_8a.lua:49: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    if text ~= \"\" then\n        local space = \"\"\n        for i = 1, #text\
    \ do\n            if string.sub(text, i, i) == \" \" then\n                if\
    \ space == \"\" then\n                    space = string.sub(text, 1, i)\n   \
    \             else\n                    space = space .. \"-\"\n             \
    \   end\n            else\n                space = space .. string.sub(text, i,\
    \ i)\n            end\n        end\n        text = space\n    end\n    return\
    \ text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
    \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
    \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8tgapwcb.lua:31:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir-Hanif-\"\nstack traceback:\n\
    \t/tmp/tmp8tgapwcb.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    local space1 = text:sub(1,1)\n    local space2 = text:sub(1,2)\n    local\
    \ space3 = text:sub(1,3)\n    local space4 = text:sub(1,4)\n    local space5 =\
    \ text:sub(1,5)\n    local space6 = text:sub(1,6)\n    local space7 = text:sub(1,7)\n\
    \    local space8 = text:sub(1,8)\n    local space9 = text:sub(1,9)\n    if space1\
    \ ~= \" \" then\n        text = text:sub(1,1):gsub(\"%S+\", function (...)\n \
    \           local space = select(\"#\", ...)\n            if space > 2 then \n\
    \                return space..\"-\"\n            elseif space == 2 then\n   \
    \             return \"-\"\n            else\n                return \"_\"\n \
    \           end\n        end)\n    end\n    if space2 ~= \" \" then\n        text\
    \ = text:sub(1,2):gsub(\"%S+\", function (...)\n            local space = select(\"\
    #\", ...)\n            if space > 2 then \n                return space..\"-\"\
    \n            elseif space == 2 then\n                return \"-\"\n         \
    \   else\n                return \"_\"\n            end\n        end)\n    end\n\
    \    if space3 ~= \" \" then\n        text = text:sub(1,3):gsub(\"%S+\", function\
    \ (...)\n            local space = select(\"#\", ...)\n            if space >\
    \ 2 then \n                return space..\"-\"\n            elseif space == 2\
    \ then\n                return \"-\"\n            else\n                return\
    \ \"_\"\n            end\n        end)\n    end\n    if space4 ~= \" \" then\n\
    \        text = text:sub(1,4):gsub(\"%S+\", function (...)\n            local\
    \ space = select(\"#\", ...)\n            if space > 2 then \n               \
    \ return space..\"-\"\n            elseif space == 2 then\n                return\
    \ \"-\"\n            else\n                return \"_\"\n            end\n   \
    \     end)\n    end\n    if space5 ~= \" \" then\n        text = text:sub(1,5):gsub(\"\
    %S+\", function (...)\n            local space = select(\"#\", ...)\n        \
    \    if space > 2 then \n                return space..\"-\"\n            elseif\
    \ space == 2 then\n                return \"-\"\n            else\n          \
    \      return \"_\"\n            end\n        end)\n    end\n    if space6 ~=\
    \ \" \" then\n        text = text:sub(1,6):gsub(\"%S+\", function (...)\n    \
    \        local space = select(\"#\", ...)\n            if space > 2 then \n  \
    \              return space..\"-\"\n            elseif space == 2 then\n     \
    \           return \"-\"\n            else\n                return \"_\"\n   \
    \         end\n        end)\n    end\n    if space7 ~= \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2dj8d254.lua:91: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \    if text == nil then return nil end\n    if text ~= \"\" then\n        local\
    \ newtext = text:gsub(\"%S+\", function(s) \n            local t = {}\n      \
    \      for i=1,#s do \n                table.insert(t, string.char(tonumber(s[i]))\
    \ ) \n            end\n            return table.concat(t, \"\")\n        end)\n\
    \        if newtext ~= text then\n            return newtext\n        end\n  \
    \  end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcpgzdyg1.lua:14:\
    \ bad argument #1 to 'char' (number expected, got nil)\nstack traceback:\n\t/tmp/tmpcpgzdyg1.lua:14:\
    \ in function </tmp/tmpcpgzdyg1.lua:11>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpcpgzdyg1.lua:11: in local 'candidate'\n\t/tmp/tmpcpgzdyg1.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  return text:gsub('  +', '- '):gsub('  -', ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fix_spaces\n    lu.assertEquals(candidate('Example'),\
    \ 'Example')\n    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n\
    \    lu.assertEquals(candidate('Yellow Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n\
    \    lu.assertEquals(candidate('Exa   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('\
    \   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3k7swvk.lua:16:\
    \ expected: \"Mudasir_Hanif_\"\nactual: \"Mudasir Hanif \"\nstack traceback:\n\
    \t/tmp/tmp_3k7swvk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \  text = text:gsub(\"[  ]+\", \"_\")\n  text = text:gsub(\"[  ]+$\", \"_\")\n\
    \  return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpei7k3lw7.lua:19:\
    \ expected: \"Yellow_Yellow__Dirty__Fellow\"\nactual: \"Yellow_Yellow_Dirty_Fellow\"\
    \nstack traceback:\n\t/tmp/tmpei7k3lw7.lua:19: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string text, replace all spaces in it with underscores, \n\
    -- and if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
    \ spaces with - \n-- fix_spaces(\"Example\") == \"Example\"\n-- fix_spaces(\"\
    Example 1\") == \"Example_1\"\n-- fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n-- fix_spaces(\" Example   3\") == \"_Example-3\"\nlocal function fix_spaces(text)\n\
    \   local spaces = text:gsub('%s+', function(s) return s:gsub('%s+', '-') end)\n\
    \   return text:gsub('[-]+%s+', function(s) return s:gsub('[-]+%s+', '-') end):gsub('[%s]+',\
    \ '') .. spaces\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fix_spaces\n    lu.assertEquals(candidate('Example'), 'Example')\n\
    \    lu.assertEquals(candidate('Mudasir Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow\
    \ Yellow  Dirty  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
    \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsj299rdy.lua:16:\
    \ expected: \"Example\"\nactual: \"ExampleExample\"\nstack traceback:\n\t/tmp/tmpsj299rdy.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
