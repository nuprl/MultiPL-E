name: HumanEval_118_get_closest_vowel
language: lua
prompt: "-- You are given a word. Your task is to find the closest vowel that stands\
  \ between \n-- two consonants from the right side of the word (case sensitive).\n\
  -- Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n-- find any vowel met the above condition. \n-- You may assume that the\
  \ given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
  yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
  quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
  \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
  \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
  \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
  \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
  \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
  \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
  \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\" }\n\tlocal vowels_index\
    \ = nil\n\tfor i=1,#word do\n\t\tif word:sub(i,i) == vowels[1] then\n\t\t\tvowels_index\
    \ = i\n\t\tend\n\tend\n\tif vowels_index == nil then\n\t\treturn \"\"\n\tend\n\
    \tlocal consonants = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\",\
    \ \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"}\n\tlocal consonant_index = nil\n\tfor i=1,#word do\n\t\tif word:sub(i,i)\
    \ == consonants[1] then\n\t\t\tconsonant_index = i\n\t\tend\n\tend\n\tif consonant_index\
    \ == nil then\n\t\treturn \"\"\n\tend\n\tlocal vowel_end_index = word:len()\n\t\
    local vowel_start_index = vowel_end_index - #vowels\n\tif vowel_start_index ==\
    \ 0 or word:sub(1,vowel_start_index) == \"\" or word:sub(vowel_end_index,vowel_end_index)\
    \ == \"\" then\n\t\treturn \"\"\n\tend\n\tlocal vowel_start_vowel = word:sub(vowel_start_index-1,vowel_start_index)\n\
    \tlocal vowel_end_vowel = word:sub(vowel_end_index-1,vowel_end_index)\n\tif vowel_start_vowel\
    \ == \"\" or vowel_end_vowel == \"\" then\n\t\treturn \"\"\n\tend\n\tfor _, vowel\
    \ in ipairs(vowels) do\n\t\tif vowel:upper() == vowel_start_vowel then\n\t\t\t\
    return vowel\n\t\tend\n\t\tif vowel:upper() == vowel_end_vowel then\n\t\t\treturn\
    \ vowel\n\t\tend\n\tend\n\treturn \"\"\nend", "    local first_vowel = string.find(word,\
    \ letters.vowels.a, 1, true)\n    local last_vowel = string.find(word, letters.vowels.e,\
    \ 1, true)\n    if first_vowel == nil then\n        first_vowel = 1\n    end\n\
    \    if last_vowel == nil then\n        last_vowel = string.len(word)\n    end\n\
    \    if first_vowel > last_vowel then\n        local temp = last_vowel\n     \
    \   last_vowel = first_vowel\n        first_vowel = temp\n    end\n    local vowel_index\
    \ = 1\n    while vowel_index < last_vowel do\n        local vowel = string.sub(word,\
    \ vowel_index, vowel_index + 1)\n        if vowel == letters.vowels.a then\n \
    \           first_vowel = vowel_index\n            break\n        end\n      \
    \  if vowel == letters.vowels.e then\n            last_vowel = vowel_index\n \
    \           break\n        end\n        vowel_index = vowel_index + 1\n    end\n\
    \    if first_vowel == nil then\n        return \"\"\n    end\n    local second_vowel\
    \ = string.find(word, letters.vowels.a, first_vowel + 1, true)\n    if second_vowel\
    \ == nil then\n        return \"\"\n    end\n    if first_vowel < second_vowel\
    \ then\n        local temp = second_vowel\n        second_vowel = first_vowel\n\
    \        first_vowel = temp\n    end\n    local vowel = string.sub(word, first_vowel\
    \ + 1, second_vowel - 1)\n    if vowel ~= \"\" then\n        return vowel\n  \
    \  end\n    return \"\"\nend", "    -- Your code goes here\nend\nassert(get_closest_vowel(\"\
    yogurt\") == \"u\")\nassert(get_closest_vowel(\"FULL\") == \"U\")\nassert(get_closest_vowel(\"\
    quick\") == \"\")\nassert(get_closest_vowel(\"ab\") == \"\")\n</cell>\n<text>\n\
    Problem 8\nThe function is_palindrome takes in a string and checks if it is a\
    \ palindrome. \nIt uses both recursive function is_palindrome_iterative and local\
    \ variables reverse and l1.\nIt returns false if the input is not a palindrome.",
  "\tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal i, j, count\
    \ = 0, 0, 0\n\twhile i < #word do\n\t\t-- Check if word starts with a consonant\n\
    \t\tif word[i] == 'a' or word[i] == 'e' or word[i] == 'i' or word[i] == 'o' or\
    \ word[i] == 'u' then\n\t\t\tcount = count+1\n\t\tend\n\t\t-- Check if word ends\
    \ with a consonant\n\t\tif word[i] == 'A' or word[i] == 'E' or word[i] == 'I'\
    \ or word[i] == 'O' or word[i] == 'U' then\n\t\t\tcount = count-1\n\t\tend\n\t\
    \t-- Check if word contains vowel\n\t\tif count > -1 then\n\t\t\t-- Remove vowel\
    \ from the given string\n\t\t\tword = word:sub(count+2, #word)\n\t\t\t-- Check\
    \ if found a vowel\n\t\t\tif word:find(vowels) then\n\t\t\t\treturn word:sub(1,\
    \ 1)\n\t\t\tend\n\t\tend\n\t\tcount = count+1\n\t\ti=i+1\n\tend\n\treturn \"\"\
    \nend", "    word = string.gsub(word, \"([aeiou])\", \" \")\n    local consonants\
    \ = string.gsub(word, \"[^aeiou]\", \"\")\n    local vowels = string.gsub(word,\
    \ \"[aeiou]\", \"\")\n    if string.len(consonants) > 0 then\n        local consonants_index\
    \ = string.find(word, consonants, 1, true)\n        local vowels_index = string.find(word,\
    \ vowels, 1, true)\n        if consonants_index and vowels_index then\n      \
    \      local diff = string.sub(word, vowels_index + 1, consonants_index) - string.sub(word,\
    \ consonants_index + 1, vowels_index)\n            if diff <= 0 then\n       \
    \         return string.sub(word, vowels_index + 1, consonants_index - 1)\n  \
    \          end\n        end\n    end\n    return \"\"\nend\nprint(get_closest_vowel(\"\
    yogurt\"))\nprint(get_closest_vowel(\"FULL\"))\nprint(get_closest_vowel(\"quick\"\
    ))\nprint(get_closest_vowel(\"ab\"))\nprint(get_closest_vowel(\"aby\"))\nprint(get_closest_vowel(\"\
    a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"\
    a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"\
    a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"\
    a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"\
    a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"\
    a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"\
    a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"\
    a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"\
    a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"\
    a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"\
    a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"\
    a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_vowel(\"\
    a\"))\nprint(get_closest_vowel(\"a\"))\nprint(get_closest_", "    -- write your\
    \ code here\n    local vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U' }\n    local vowelCounts = {}\n    for i=1,#word do\n        local pos =\
    \ #word - i\n        local cons = #word\n        if cons == 1 then\n         \
    \   return ''\n        end\n        local vowelFound = false\n        for i=1,cons\
    \ do\n            if vowels[word[pos+i]] ~= nil then\n                vowelFound\
    \ = true\n                vowelCounts[word[pos+i]] = vowelCounts[word[pos+i]]\
    \ or 1\n                local vowelCount = vowelCounts[word[pos+i]] + 1\n    \
    \            if vowelCount == 1 then\n                    return word[pos+i]\n\
    \                else\n                    vowelCounts[word[pos+i]] = vowelCount\n\
    \                    break\n                end\n            end\n        end\n\
    \        if vowelFound == false then\n            return ''\n        end\n   \
    \ end\n    return ''\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u', nil}\n\
    \tlocal vowel_counts = {}\n\tfor _, char in pairs(vowels) do\n\t\tvowel_counts[char]\
    \ = 0\n\tend\n\tfor _, char in pairs(word) do\n\t\tvowel_counts[char] = vowel_counts[char]\
    \ + 1\n\tend\n\t\n\tlocal vowel_distance = nil\n\tfor _, char in pairs(vowels)\
    \ do\n\t\tlocal vowel_count = vowel_counts[char]\n\t\tif vowel_count > 1 then\n\
    \t\t\tlocal total_distance = math.abs(vowel_count - 1)\n\t\t\tlocal min_distance\
    \ = nil\n\t\t\tfor i = 1, total_distance do\n\t\t\t\tlocal vowel_distance = i\
    \ - 1\n\t\t\t\tif vowel_distance < 1 then\n\t\t\t\t\tmin_distance = i\n\t\t\t\t\
    \tbreak\n\t\t\t\telse\n\t\t\t\t\tlocal distance_to_previous = total_distance -\
    \ i - 1\n\t\t\t\t\tlocal next_vowel = char:sub(1, vowel_distance)\n\t\t\t\t\t\
    local vowel_count = vowel_counts[next_vowel]\n\t\t\t\t\tif vowel_count > 1 then\n\
    \t\t\t\t\t\tlocal current_distance = i - vowel_distance\n\t\t\t\t\t\tif distance_to_previous\
    \ == current_distance then\n\t\t\t\t\t\t\tmin_distance = current_distance\n\t\t\
    \t\t\t\t\tbreak\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\t\
    if min_distance ~= nil then\n\t\t\t\tvowel_distance = min_distance\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn vowels[vowel_distance] or \"\"\nend", "\t\
    word = word.lower()\n\tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"\
    } -- List of vowel letters\n\tlocal vowels_len = #vowels\n\tlocal vowel_index\
    \ = 0 -- Counter of vowels\n\tlocal vowel_pos = 0 -- Position of current vowel\n\
    \tlocal result = \"\" -- The word with the vowel we want", "    -- write your\
    \ code in JavaScript here\n    local vowel_index = nil\n    local vowel_meet_condition\
    \ = false\n    for i = 1,#word do\n        if word[i] == \"a\" or word[i] == \"\
    e\" or word[i] == \"i\" or word[i] == \"o\" then\n            if vowel_meet_condition\
    \ == false then\n                vowel_index = i\n                vowel_meet_condition\
    \ = true\n            end\n        end\n    end\n    if vowel_meet_condition ==\
    \ false then\n        vowel_index = nil\n    end\n    return word[vowel_index+1]\n\
    end", "  if word:sub(1,1) == \"a\" then\n    return word\n  else\n    local index\
    \ = string.find(word, \"b\") -- Find the second consonant from the right\n   \
    \ if index == nil then -- No second consonant found.\n      return \"\"\n    end\n\
    \    local found = string.find(word, \"e\") + 1 -- Find the first vowel after\
    \ second consonant\n    index = string.find(word, \"i\") - 1 -- Find the first\
    \ vowel before second consonant\n    if index == nil then -- No first vowel before\
    \ second consonant found.\n      return string.sub(word,found)\n    end\n    local\
    \ found = string.find(word, \"o\") + 1 -- Find the first vowel after first consonant\n\
    \    index = string.find(word, \"u\") - 1 -- Find the first vowel before first\
    \ consonant\n    if index == nil then -- No first vowel before first consonant\
    \ found.\n      return string.sub(word,found)\n    end\n    return string.sub(word,found,index)\n\
    \  end\nend", "  local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n  local vowel_counter\
    \ = 0\n  local closest_vowel = \"\"\n  for i = #word - 1, 1, -1 do\n    if word[i]\
    \ == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i]\
    \ == \"u\" then\n      vowel_counter = vowel_counter + 1\n      if vowel_counter\
    \ == 1 then\n        closest_vowel = word[i]\n      end\n    end\n  end\n  return\
    \ closest_vowel\nend", "    local vowels = \"aeiouAEIOU\"\n    local vowels_count\
    \ = #vowels\n    local vowel_index = 0\n    local vowel_str = \"\"\n    local\
    \ consonants_count = #word\n    local consonant_index = -1\n    local consonant_str\
    \ = \"\"\n    local consonants = \"\"\n    local consonants_pos = 1\n    local\
    \ consonants_str = \"\"\n    local consonants_index = 1\n    local consonant_prev\
    \ = \"\"\n    local consonant_next = \"\"\n    local vowel_pos = 1\n    local\
    \ consonant_pos = 1\n    local consonant_prev = \"\"\n    local vowel_next = \"\
    \"\n    while consonant_index < consonants_count\n    do\n        consonant_str\
    \ = word[consonant_index-1]\n        consonant_pos = consonants_pos - consonant_index\n\
    \        if consonant_index > 0 and consonants_str == \"\" and consonants_count\
    \ == 1 then\n            consonant_prev = \"\"\n        elseif consonant_index\
    \ > 0 and consonants_str == \"\" then\n            consonant_prev = consonants[consonant_index-1]\n\
    \        else\n            consonant_prev = consonants[consonant_index-1]\n  \
    \      end\n        \n        consonant_next = word[consonant_index]\n       \
    \ \n        if consonant_str == \"a\" or consonant_str == \"e\" or consonant_str\
    \ == \"i\" or consonant_str == \"o\" or consonant_str == \"u\" then\n        \
    \    consonants_str = consonant_str\n        elseif consonant_str == \"A\" or\
    \ consonant_str == \"E\" or consonant_str == \"I\" or consonant_str == \"O\" or\
    \ consonant_str == \"U\" then\n            consonants_str = consonant_str\n  \
    \      elseif consonant_str == \"w\" or consonant_str == \"i\" or consonant_str\
    \ == \"o\" or consonant_str == \"u\" then\n            if consonants_str == \"\
    \" then\n                consonants_str = consonant_str\n            else\n  \
    \              consonants_str = consonants_str .. \" \" .. consonant_str\n   \
    \         end\n        elseif consonant_str == \"W\" or consonant_str == \"I\"\
    \ or consonant_str == \"O\" or consonant_str == \"U\" then\n            if consonants_str\
    \ == \"\" then\n                consonants_str = consonant_str\n            else\n\
    \                conson", "   local vowel = \"aeiou\"\n   local result\n   \n\
    \   for i = #word, 1, -1 do\n      local current = word:sub(i,i)\n      if vowel:contains(current)\
    \ then\n         if #result < i then\n            result[i] = current\n      \
    \   else\n            result[i] = result[i] .. current\n         end\n      end\n\
    \   end\n   \n   return string.gsub(result, \",$\", \"\")\nend", "\t-- Initialize\
    \ a pointer to current first consonant in the word\n\tlocal cons_pointer = 1\n\
    \t-- Initialize a pointer to current vowel pointer\n\tlocal vowel_pointer = 1\n\
    \t-- Initialize a string to hold the result\n\tlocal result = ''\n\t-- Iterate\
    \ over word and check if current consonant and vowel is consecutive\n\t-- until\
    \ vowel and consonant are different, return the found vowel\n\tfor i = cons_pointer,\
    \ #word, 1 do\n\t\tif word[i] == cons_pointer and word[i - 1] = vowel_pointer\
    \ and word[i - 2] = cons_pointer then\n\t\t\tresult = word[i - 1]\n\t\t\tbreak\n\
    \t\telseif word[i] == vowel_pointer and word[i - 2] = cons_pointer and word[i\
    \ - 3] = vowel_pointer then\n\t\t\tresult = word[i - 2]\n\t\t\tbreak\n\t\telseif\
    \ word[i] == cons_pointer and word[i - 1] = vowel_pointer and word[i - 2] = cons_pointer\
    \ and word[i - 3] = vowel_pointer then\n\t\t\tresult = word[i - 1]\n\t\t\tbreak\n\
    \t\tend\n\tend\n\treturn result\nend", "    local vowel_table = {\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\", \"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowel_count = {}\n    for i=1,#vowel_table,1\
    \ do\n        table.insert(vowel_count,0)\n    end\n    local vowel_count_table\
    \ = {}\n    for i=1,#vowel_table,1 do\n        vowel_count_table[vowel_table[i]]\
    \ = i\n    end\n    for i=#word,1,-1 do\n        for j=1,#vowel_table,1 do\n \
    \           if string.sub( word,i,i+1 ) == vowel_table[j] then\n             \
    \   vowel_count[j] = vowel_count[j] + 1\n            end\n        end\n    end\n\
    \    for i=#vowel_table,1,-1 do\n        if vowel_count[i]>0 then\n          \
    \  return vowel_table[i]\n        end\n    end\n    return \"\"\nend", "    local\
    \ vowels = {\n        \"A\",\"E\",\"I\",\"O\",\"U\"\n    }\n    local vowels_len\
    \ = #vowels\n    for i = 1, #word-1 do\n        local current_vowel = word[i]\n\
    \        if vowels[current_vowel] then\n            for j = 1, vowels_len do\n\
    \                if vowels[current_vowel] == vowels[j] then\n                \
    \    if j == 1 then break end\n                    local next_vowel = word[i+1]\n\
    \                    if next_vowel == vowels[j] then break end\n             \
    \   end\n            end\n        end\n    end\n    return \"\"\nend", "    local\
    \ vowel = \"a\"\n    local vowel_count = 0", "  local vowels = {'a','e','i','o','u'}\n\
    \  local vowels_in_word = \"\"\n  local vowels_in_word_index = 1\n  for i,letter\
    \ in ipairs(word) do\n    if vowels[letter] then\n      if vowels_in_word_index\
    \ == #vowels then\n        return \"\"\n      end\n      vowels_in_word_index\
    \ = vowels_in_word_index + 1\n      vowels_in_word = vowels_in_word .. letter\n\
    \    else\n      if vowels_in_word_index == #vowels then\n        return vowels_in_word\n\
    \      end\n      vowels_in_word_index = vowels_in_word_index + 1\n      vowels_in_word\
    \ = vowels_in_word .. letter\n    end\n  end\n  return \"\"\nend", "  local vowels\
    \ = \"aeiou\"\n  local vowel_idx = 1\n  local vowel_start = nil\n  local vowel_end\
    \ = nil\n  local vowel_len = nil", "  \n  -- Base case\n  if word == \"\" or word\
    \ == \".\" or word == \"!\" or word == \"?\"\n  then\n    return \"\"\n  end",
  "\t-- Find first vowel\n\tlocal vowel = string.find(word, string.byte(\"aeiou\"\
    ))", "\tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowel_count = {}\n\tfor\
    \ i,v in ipairs(vowels) do\n\t\tvowel_count[v] = word:sub(1,1):upper():len() \n\
    \tend\n\tlocal vowels_count = #vowels\n\tfor i,v in ipairs(vowels) do\n\t\tif\
    \ vowel_count[v] > vowels_count*2 then\n\t\t\treturn v:upper()\n\t\telseif vowel_count[v]\
    \ < vowels_count*2 then\n\t\t\treturn v:upper()\n\t\tend\n\tend\nend", "   if\
    \ #word <= 0 then return \"\" end\n   local vowels = 'a..o' .. 'e..i' .. 'u..y'\n\
    \   if #vowels <= 0 then return \"\" end\n   local wordLength = #word\n   local\
    \ vowelsLength = #vowels\n   local vowelsCount = #(vowels)\n   for i = wordLength\
    \ - 1, -1, -1 do\n      if word[i] == vowels[vowelsCount] then\n         vowelsCount\
    \ = vowelsCount - 1\n         if vowelsCount == 0 then\n            return vowels[vowelsCount]\n\
    \         end\n      else\n         break\n      end\n   end\n   return \"\"\n\
    end", "\tlocal vowels = \"aeiouAEIOU\"\n\tlocal consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n\tlocal index = #word\n\tlocal vowel\n\tlocal vowel_index\n\tlocal found\n\t\
    \n\tfor i = index, 1, -1 do\n\t\tvowel_index = string.find(vowels, word[i])\n\t\
    \tif vowel_index > 0 then\n\t\t\tfound = true\n\t\t\tvowel = word[i]\n\t\t\tbreak\n\
    \t\tend\n\tend\n\t\n\tif vowel_index == nil then\n\t\treturn \"\"\n\tend\n\t\n\
    \tlocal count\n\tlocal vowel\n\t\n\tfor i = index, 1, -1 do\n\t\tvowel_index =\
    \ string.find(vowels, word[i])\n\t\tif vowel_index > 0 then\n\t\t\tcount = i\n\
    \t\t\tvowel = word[i]\n\t\t\tbreak\n\t\tend\n\tend\n\t\n\tif not found then\n\t\
    \tfor i = index, 1, -1 do\n\t\t\tvowel_index = string.find(consonants, word[i])\n\
    \t\t\tif vowel_index > 0 then\n\t\t\t\tcount = i\n\t\t\t\tvowel = word[i]\n\t\t\
    \t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\t\n\tif not count then\n\t\treturn \"\"\
    \n\tend\n\t\n\tif string.sub(vowel, 1, 1) == string.sub(vowel, 0, 1) then\n\t\t\
    return vowel\n\telse\n\t\treturn vowel..string.sub(vowel, 1, count - 1)\n\tend\n\
    end", "    local vowels = \"aAeEiIoOuUy\"\n    local i, j, n = word:len(), 1,\
    \ 1\n    while i <= n do\n        while j > 0 do\n            if word[i:j + 1]\
    \ in vowels then\n                return word[i:j + 1]\n            elseif j >\
    \ 1 then\n                j = j - 1\n            else\n                return\
    \ word[i]\n            end\n        end\n        i = i + 1\n        j = word:len()\n\
    \        n = n + 1\n    end\n    return \"\"\nend", "    if not word or #word\
    \ == 0 then\n        return \"\"\n    end\n    local letters = string.gsub(word,\
    \ \"[^a-z]+\", \"\")\n    local vowels = {}\n    for i = 1, #letters do\n    \
    \    local is_vowel = string.format(\"%c\", string.sub(letters, i)) ~= \"\"\n\
    \        if is_vowel then\n            table.insert(vowels, string.sub(letters,\
    \ i, i+1))\n        end\n    end\n    return table.min(vowels)\nend", "\tlocal\
    \ vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowel_index = nil\n\tlocal vowel_char = \"\"", "   if word:len() <= 2\
    \ then\n      return \"\"\n   end", "    local vowels = string.format(\"%a%c%c%c%c%c%c%c%c\"\
    , \n        string.sub(word, 1, -2),\n        string.sub(word, 1, -1),\n     \
    \   string.sub(word, 1, -1),\n        string.sub(word, 1, -1),\n        string.sub(word,\
    \ 1, -1),\n        string.sub(word, 1, -1),\n        string.sub(word, 1, -1),\n\
    \        string.sub(word, 1, -1),\n        string.sub(word, 1, -1)\n    )\n  \
    \  local found = string.find(word, vowels)\n    if found > 0 then\n        return\
    \ string.sub(word, 1, found + 1)\n    else\n        return \"\"\n    end\nend",
  "  local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n  local vowel_ends = {\"a\",\"\
    e\",\"i\",\"o\",\"u\"}\n  local vowel_start = false\n  local vowel_end = false\n\
    \  for i = #word, 1, -1 do\n    if word[i] ~= \" \" then\n      if word[i] ==\
    \ vowels[1] then\n        vowel_start = true\n      elseif word[i] == vowels[5]\
    \ then\n        vowel_end = true\n      end\n    end\n  end\n  if vowel_start\
    \ and vowel_end then\n    return word:sub(1,#word-1)\n  end\n  return \"\"\nend",
  "   -- Write your code here\n   \n   local vowels = \"AEIOUaeiou\"\n   \n   local\
    \ vowel = \"\"\n   for i = #word, 1, -1 do\n      if vowels:sub(i,i) ~= nil then\n\
    \         vowel = vowel:sub(i,i)\n         break\n      end\n   end\n   \n   return\
    \ vowel\nend", "   local vowel = \"AEIOU\"\n   local vowel_index = nil\n   for\
    \ i = #word, 1, -1 do\n      for j = #vowel, 1, -1 do\n         if string.sub(word,\
    \ -i, j) == vowel then\n            vowel_index = i\n         end\n      end\n\
    \   end\n   return string.sub(word, vowel_index)\nend", "\t-- Write your code\
    \ here\n\tlocal first_vowel_pos = 1\n\tfor i = 1, #word do \n\t\tif string.lower(word[i])==\"\
    a\" or string.lower(word[i])==\"e\" or string.lower(word[i])==\"i\" or string.lower(word[i])==\"\
    o\" or string.lower(word[i])==\"u\" then\n\t\t\tif first_vowel_pos == 1 then first_vowel_pos\
    \ = i end \n\t\telseif string.lower(word[i])==\"y\" then\n\t\t\tif first_vowel_pos\
    \ == 1 then first_vowel_pos = i end \n\t\tend\n\tend\n\t\n\tif first_vowel_pos\
    \ > 1 then\n\t\treturn word[first_vowel_pos-2]\n\telse\n\t\treturn \"\"\n\tend\n\
    end", "\t-- Write your code here\n\t\n\tlocal vowel = { 'a','e','i','o','u','y','A','E','I','O','U','Y'}\n\
    \tlocal vowel1 = { 'a','e','i','o','u','a','e','i','o','u','y','A','E','I','O','U','Y'}\n\
    \tlocal vowel2 = { 'e','i','o','u','a','e','i','o','u','a','e','i','o','u','y','A','E','I','O','U','Y'}\n\
    \tlocal vowel3 = { 'u','a','e','i','o','u','a','e','i','o','u','a','e','i','o','u','y','A','E','I','O','U','Y'}\n\
    \tlocal vowel4 = { 'A','E','I','O','U','A','E','I','O','U','A','E','I','O','U','Y'}\n\
    \tlocal vowel5 = { 'a','e','i','o','u','a','e','i','o','u','a','e','i','o','u','y','A','E','I','O','U','A','E','I','O','U','Y'}\n\
    \tlocal vowel6 = { 'e','i','o','u','a','e','i','o','u','a','e','i','o','u','y','A','E','I','O','U','A','E','I','O','U','Y'}\n\
    \tlocal vowel7 = { 'u','a','e','i','o','u','a','e','i','o','u','a','e','i','o','u','y','A','E','I','O','U','A','E','I','O','U','A','E','I','O','U','Y'}\n\
    \tlocal vowel8 = { 'A','E','I','O','U','A','E','I','O','U','A','E','I','O','U','Y','A','E','I','O','U','A','E','I','O','U','Y','A','E','I','O','U','A','E','I','O','U','Y'}\n\
    \tlocal vowel9 = { 'a','e','i','o','u','", "  -- base case\n  if word == \"\"\
    \ then\n    return \"\"\n  end\n  \n  -- split by consonants to get two consecutive\
    \ chars\n  local consonants = string.gsub(word, \"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\"\
    )\n  \n  -- split by vowels to get vowels on the left and vowels on the right\n\
    \  local vowels = string.gsub(word, \"[aeiouAEIOU]\")\n  local vowelsRight = string.gsub(word,\
    \ \"[aeiouAEIOU]$\")\n  \n  -- get length\n  local vowelsLen = #vowels\n  local\
    \ consLen = #consonants\n  \n  -- compare the length of the two string\n  local\
    \ maxLen = consLen + vowelsLen + 1\n  \n  if consLen > vowelsLen then\n    maxLen\
    \ = consLen + vowelsLen + 2\n  else\n    maxLen = consLen + vowelsLen + 3\n  end",
  "\tlocal vowels = { 'A', 'a', 'E', 'e', 'I', 'i', 'O', 'o', 'U', 'u' }\n\tlocal\
    \ vowel_count = {}\n\tfor i,v in ipairs(vowels) do\n\t\tvowel_count[v] = word:sub((i-1),\
    \ i) or 1\n\tend\n\tlocal consonants = { 'B', 'b', 'G', 'g', 'M', 'm', 'S', 's',\
    \ 'T', 't' }\n\tlocal consonant_count = {}\n\tfor i,v in ipairs(consonants) do\n\
    \t\tconsonant_count[v] = word:sub((i-1), i) or 1\n\tend\n\tlocal closest = nil\n\
    \tfor i,v in ipairs(vowels) do\n\t\tlocal d = consonant_count[v] * vowel_count[v]\n\
    \t\tif closest == nil or d < closest then \n\t\t\tclosest = d\n\t\t\tclosest =\
    \ v\n\t\tend\n\tend\n\treturn closest\nend", "\t-- your code\n\t-- your code here\n\
    \t-- your code here\n\t-- your code here\n\t-- your code here\n\t-- your code\
    \ here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\t-- your\
    \ code here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\t\
    -- your code here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\
    \t-- your code here\n\t-- your code here\n\t-- your code here\n\t-- your code\
    \ here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\t-- your\
    \ code here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\t\
    -- your code here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\
    \t-- your code here\n\t-- your code here\n\t-- your code here\n\t-- your code\
    \ here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\t-- your\
    \ code here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\t\
    -- your code here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\
    \t-- your code here\n\t-- your code here\n\t-- your code here\n\t-- your code\
    \ here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\t-- your\
    \ code here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\t\
    -- your code here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\
    \t-- your code here\n\t-- your code here\n\t-- your code here\n\t-- your code\
    \ here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\t-- your\
    \ code here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\t\
    -- your code here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\
    \t-- your code here\n\t-- your code here\n\t-- your code here\n\t-- your code\
    \ here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\t-- your\
    \ code here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\t\
    -- your code here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\
    \t-- your code here\n\t-- your code here\n\t-- your code here\n\t-- your code\
    \ here\n\t-- your code here\n\t-- your code here\n\t-- your code here\n\t-- your\
    \ code here\n\t-- your code here\n\t-- your code here\n\t-- ", "\tlocal result\
    \ = {}\n\tlocal index = {}\n\t\n\tfor i = 1, #word do \n\t\tif not word:match(\"\
    ^[bcdfghjklmnpqrstvwxyz]+\") then \n\t\t\tbreak\n\t\tend\n\t\tindex[#index+1]\
    \ = i\n\tend\n\t\n\tfor i = #index, 1, -1 do\n\t\tlocal vowel = word:sub(1, index[i])\n\
    \t\tresult[#result+1] = vowel\n\tend\n\t\n\tlocal len = #result\n\tlocal vowels\
    \ = \"\"\n\t\n\tfor i = #result, 1, -1 do\n\t\tvowels = vowels .. result[i]\n\t\
    end\n\t\n\treturn vowels\nend", "    local vowels = \"a\",\"e\",\"i\",\"o\",\"\
    u\";\n    local vowel_count = {};\n    for i = 1, #word, 2 do\n        local left_consonant\
    \ = word[i+1];\n        local right_consonant = word[i+2];\n        if left_consonant\
    \ ~= 'C' and left_consonant ~= 'S' and left_consonant ~= 'T' and left_consonant\
    \ ~= 'Q' and left_consonant ~= 'W' then\n            -- Found a letter that is\
    \ not C, S or T\n            -- Add it to the vowel_count table\n            table.insert(vowel_count,\
    \ left_consonant);\n        elseif right_consonant ~= 'C' and right_consonant\
    \ ~= 'S' and right_consonant ~= 'T' and right_consonant ~= 'Q' and right_consonant\
    \ ~= 'W' then\n            -- Found a letter that is not C, S or T\n         \
    \   -- Add it to the vowel_count table\n            table.insert(vowel_count,\
    \ right_consonant);\n        end\n    end\n    -- Get the closest vowel met the\
    \ conditions\n    local min_idx = 1;\n    local min_val = table.getn(vowel_count);\n\
    \    for i = 1, #vowels, 1 do\n        local v = vowels[i];\n        local count\
    \ = vowel_count[v];\n        if count >= min_val then\n            -- Found the\
    \ vowel with the min count\n            min_idx = i;\n            min_val = count;\n\
    \        end\n    end\n    return table.unpack(vowels, 1, min_idx);\nend", "\t\
    -- Get rid of non-letter\n\tlocal word_no_punc = word:gsub('[^%a]','')", "   \
    \ local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    \n  \
    \  local index = 0\n    local vowel = 0\n    while index < #word do\n        if\
    \ word:sub(index, index+1) in vowels then\n            index = index+1\n     \
    \       vowel = word:sub(index, index+1)\n        end\n        index = index+1\n\
    \    end\n    return vowel\nend", "  local vowels = {\"a\",\"e\",\"i\",\"o\",\"\
    u\"}\n  local vowel_len = #vowels\n  local vowel_pos = 1\n  local result = \"\"\
    \n  for i = #word, 1 do\n    local char = string.sub(i, vowel_pos, vowel_pos+vowel_len)\n\
    \    if vowels:includes(char) then\n      vowel_pos = vowel_pos + vowel_len\n\
    \      result = char\n    end\n  end\n  return result\nend", "  local vowels =\
    \ {}\n  local vowel_left = {\n    [string.lower(string.sub(word, 1, -1))] = \"\
    a\",\n    [string.lower(string.sub(word, 1, -2))] = \"u\",\n    [string.lower(string.sub(word,\
    \ 1, -3))] = \"e\",\n    [string.lower(string.sub(word, 1, -4))] = \"i\",\n  \
    \  [string.lower(string.sub(word, 1, -5))] = \"o\",\n    [string.lower(string.sub(word,\
    \ 1, -6))] = \"u\"\n  }\n  local vowel_right = {\n    [string.lower(string.sub(word,\
    \ -2))] = \"a\",\n    [string.lower(string.sub(word, -2, -1))] = \"u\",\n    [string.lower(string.sub(word,\
    \ -2, -2))] = \"e\",\n    [string.lower(string.sub(word, -2, -3))] = \"i\",\n\
    \    [string.lower(string.sub(word, -2, -4))] = \"o\",\n    [string.lower(string.sub(word,\
    \ -2, -5))] = \"u\"\n  }\n  local first_vowel_index = nil\n  local last_vowel_index\
    \ = nil\n  local first_vowel = nil\n  local last_vowel = nil\n  for i = 1, #word\
    \ do\n    if string.lower(string.sub(word,i,i)) == \"a\" then\n      first_vowel_index\
    \ = i\n      first_vowel = string.sub(word,i,i)\n    end\n    if string.lower(string.sub(word,i,i))\
    \ == \"z\" then\n      last_vowel_index = i\n      last_vowel = string.sub(word,i,i)\n\
    \    end\n  end\n  if last_vowel_index == nil then\n    return \"\"\n  end\n \
    \ if first_vowel_index ~= nil and last_vowel_index ~= nil then\n    if first_vowel\
    \ ~= \"\" and last_vowel ~= \"\" then\n      return vowel_left[first_vowel] ..\
    \ string.sub(word, first_vowel_index + 1, last_vowel_index - 1)\n    end\n  end\n\
    \  return \"\"\nend", "\t-- Write your code here.\nend", "  local vowels = \"\"\
    \n  local n1 = #word\n  for i = 1, n1 do\n    if string.sub(word, n1, i+1) ~=\
    \ nil then\n      local vowel_found = false\n      for j = 1, #vowels do\n   \
    \     if string.sub(vowels, j, j+1) ~= nil and string.sub(word, n1, i+1) == string.sub(vowels,\
    \ j, j+1) then\n          vowel_found = true\n          break\n        end\n \
    \     end\n      if not vowel_found then\n        vowels = vowels .. string.sub(word,\
    \ n1, i+1)\n      end\n    end\n  end\n  return vowels\nend", "\tif word:len()\
    \ <=2 then\n\t\treturn \"\"\n\tend\n\tlocal last_letter = word:sub(-1)\n\tlocal\
    \ last_vowel = last_letter:sub(0,1)\n\tlocal last_consonant = last_letter:sub(1,2)\n\
    \tlocal start_vowel = word:sub(-2,-1)\n\tlocal end_vowel = word:sub(-1,-2)\n\t\
    if last_vowel:lower()=='a' then\n\t\tif last_consonant:lower()=='a' then\n\t\t\
    \treturn \"\"\n\t\telse\n\t\t\treturn last_vowel\n\t\tend\n\telse\n\t\tif start_vowel:lower()=='a'\
    \ then\n\t\t\tif end_vowel:lower()=='a' then\n\t\t\t\treturn last_vowel\n\t\t\t\
    else\n\t\t\t\treturn end_vowel\n\t\t\tend\n\t\telse\n\t\t\treturn last_vowel\n\
    \t\tend\n\tend\nend", "    for i = 1, #word do\n        if string.sub(word, -i)\
    \ == \".\" and string.sub(word, i, -i) ~= \".\" then\n            return string.sub(word,\
    \ -i)\n        end\n    end\n    return nil\nend", "   local vowels = {'a','e','i','o','u','A','E','I','O','U','a','e','i','o','u'}\n\
    \   local vowel_count = #vowels\n   local word = word:upper()\n   local vowel_index\
    \ = word:sub(1,1):lower()\n   local next_vowel_index = word:sub(1,2):lower()\n\
    \   local vowel_direction = next_vowel_index > vowel_index and 'forward' or 'backward'\n\
    \   local close_vowel\n   if vowel_direction == 'forward' then\n      close_vowel\
    \ = vowels[vowel_index + 1]\n   else\n      close_vowel = vowels[vowel_index -\
    \ 1]\n   end\n   if close_vowel ~= nil then\n      return close_vowel\n   else\n\
    \      return ''\n   end\nend", "  if word:sub(-1) ~= \"a\" and word:sub(-1) ~=\
    \ \"e\" and word:sub(-1) ~= \"i\" and word:sub(-1) ~= \"o\" and word:sub(-1) ~=\
    \ \"u\" then return \"\"\n  end\n  local startVowel = word.sub(1)\n  local endVowel\
    \ = word:sub(3)\n  local vowels = \"aeiou\"\n  local vowelsCount = {}\n  for i\
    \ = 1, #vowels do\n    vowelsCount[vowels[i]] = 0\n  end\n  for i = 1, #startVowel\
    \ do\n    vowelsCount[startVowel[i]] = 1 + vowelsCount[startVowel[i]]\n  end\n\
    \  for i = 1, #endVowel do\n    vowelsCount[endVowel[i]] = 1 + vowelsCount[endVowel[i]]\n\
    \  end\n  local maxVowel = #vowels\n  local min = #vowels\n  for i = 1, #vowelsCount\
    \ do\n    if vowelsCount[i] > max then\n      max = vowelsCount[i]\n      minVowel\
    \ = i\n    end\n  end\n  if #vowelsCount[minVowel] < 2 then return \"\"\n  end\n\
    \  for i = #startVowel, -1, -1 do\n    vowelsCount[startVowel[i]] = 1 + vowelsCount[startVowel[i]]\n\
    \  end\n  for i = #endVowel, -1, -1 do\n    vowelsCount[endVowel[i]] = 1 + vowelsCount[endVowel[i]]\n\
    \  end\n  local maxVowel = #vowels\n  local min = #vowels\n  for i = 1, #vowelsCount\
    \ do\n    if vowelsCount[i] > max then\n      max = vowelsCount[i]\n      minVowel\
    \ = i\n    end\n  end\n  if #vowelsCount[minVowel] < 2 then return \"\"\n  end\n\
    \  local resultVowel = startVowel[minVowel]\n  return resultVowel\nend", "   \
    \ local count = 0 -- Keep track of the number of consonants\n    local vowels\
    \ = {'a','e','i','o','u'}\n    for i = #word, 1, -1 do -- Go through the string\n\
    \        -- Check for vowels\n        if vowels[i] ~= nil then\n            --\
    \ Increment count if it is between vowels\n            if word[i] > word[count]\
    \ and word[i] < word[count+1] then\n                count = count\n          \
    \  end\n            -- If word is \"ab\"\n            if count == 0 then\n   \
    \             return word[i]\n            end\n        end\n    end\n    return\
    \ \"\" -- No vowels found\nend", "    local vowels = {'a','e','i','o','u'}\n \
    \   local vowels_set = {}\n    for i = 1, #vowels do\n        table.insert(vowels_set,vowels[i])\n\
    \    end\n    \n    local vowel_index = 1\n    local closest_vowel = \"\"\n  \
    \  \n    while vowel_index <= #word do\n        if vowels_set[word[vowel_index]]\
    \ then\n            table.insert(closest_vowel,word[vowel_index])\n          \
    \  vowel_index += 1\n        else\n            vowel_index = vowel_index + 1\n\
    \        end\n    end\n    \n    return closest_vowel\nend", "\tlocal vowels =\
    \ {}\n\tlocal vowel = \"\"\n\tfor i = 1, #word do\n\t\tlocal upper = string.upper(word[i])\n\
    \t\tif upper == \"A\" then\n\t\t\tvowel = upper .. vowel\n\t\telse\n\t\t\tvowel\
    \ = upper .. vowel\n\t\t\ttable.insert(vowels, vowel)\n\t\tend\n\tend", "\tlocal\
    \ vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowel_count = #vowels\n\
    \tlocal vowel_met_consonant_count = 0\n\tlocal vowel_met_right_count = 0\n\tlocal\
    \ vowel_met_left_count = 0\n\tlocal vowel_met_middle = 0\n\tlocal current_vowel_index\
    \ = #word\n\tlocal current_consonant_index = 1\n\tlocal current_right_index =\
    \ 1\n\tlocal current_left_index = 1\n\tlocal current_middle_index = 1\n\tlocal\
    \ last_consonant_index = 1\n\tlocal last_right_index = 1\n\tlocal last_left_index\
    \ = 1\n\tlocal last_middle_index = 1\n\tlocal last_vowel_index = 1", "   local\
    \ vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n   local vowelslen = #vowels\n   local\
    \ wordlen = #word\n   local maxIndex = 0\n   local maxVowelIndex = 0\n   local\
    \ lastConsonantIndex = wordlen-1\n   \n   for i = 1, wordlen-1 do\n      -- Find\
    \ the index of max vowel\n      if word[i] == vowels[maxIndex] then\n        \
    \ maxIndex = i\n      else\n         -- Find the index of max consonant\n    \
    \     if word[i] == word[i+1] then\n            local consonants\n           \
    \ if word[i] ~= \"c\" then\n               consonants = {\"c\",\"s\"}\n      \
    \      else\n               consonants = {\"c\"}\n            end\n          \
    \  local lastVowelIndex = i\n            for j = 1, vowelslen do\n           \
    \    if vowels[j] == word[lastVowelIndex+j] then\n                  lastVowelIndex\
    \ = lastVowelIndex + j\n               end\n            end\n            lastConsonantIndex\
    \ = lastVowelIndex - 1\n         end\n      end\n   end\n   \n   -- Return empty\
    \ string if we don't find any vowel\n   if maxIndex == 0 then return \"\" end\n\
    \   if maxIndex == wordlen-1 then return \"\" end\n   \n   -- Return max vowel\n\
    \   return word[maxIndex]\nend", "  local vowels = {}\n  local closest_vowel =\
    \ \"\"\n  for i = 1, #word do\n    local ch = word:sub(i,i)\n    vowels[ch] =\
    \ true\n  end", "  if word == nil then return end\n  local vowel = {[\"u\"] =\
    \ 1, [\"i\"] = 1, [\"y\"] = 1, [\"o\"] = 1, [\"e\"] = 1, [\"a\"] = 1, [\"r\"]\
    \ = 1, [\"l\"] = 1, [\"s\"] = 1}\n  local len = #word\n  for i = 1, len do\n \
    \   local c = string.sub(word, i, i)\n    local found = false\n    for k, v in\
    \ pairs(vowel) do\n      if string.find(c, k) then\n        found = true\n   \
    \     break\n      end\n    end\n    if not found then\n      return ''\n    end\n\
    \  end\n  return word\nend", "    local vowels = {\"a\", \"e\", \"i\", \"o\",\
    \ \"u\", \"y\"}\n    local result = nil\n    local last_cons = nil\n    \n   \
    \ for i = #word, 1, 1, -1 do\n        local cons = string.sub( word, -i, i )\n\
    \        \n        if vowels:includes(cons) then\n            if last_cons ~=\
    \ cons then\n                result = cons \n                last_cons = cons\n\
    \            end\n        else\n            if last_cons ~= cons and cons ~= \"\
    \" then\n                result = \"\" -- No vowel\n                break\n  \
    \          else\n                if result ~= nil then\n                    break\n\
    \                end\n            end\n        end\n    end\n    \n    return\
    \ result \nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis code is great, thanks\
    \ a lot. As my question asked to find only vowel in string, I just changed the\
    \ line ", "    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    local vowels_count\
    \ = #vowels\n    local vowel_positions = { }\n    for i = 1, #word do\n      \
    \  local vowel_pos = 1\n        local current_vowel = word[i]\n        -- if the\
    \ current letter is vowel\n        if vowel_pos <= vowels_count and vowels[vowel_pos]\
    \ ~= current_vowel then\n            -- find the first vowel position\n      \
    \      while vowel_pos <= vowels_count and vowels[vowel_pos] != current_vowel\
    \ do\n                vowel_pos = vowel_pos + 1\n            end\n           \
    \ -- save the position\n            vowel_positions[#vowel_positions + 1] = vowel_pos\n\
    \        end\n    end\n    if #vowel_positions == 0 then\n        return \"\"\n\
    \    end\n    -- find the index of the word end\n    local vowel_end_index = 1\n\
    \    while vowel_end_index < #word and word[vowel_end_index] ~= vowels[#vowels]\
    \ do\n        vowel_end_index = vowel_end_index + 1\n    end\n    return word:sub(vowel_end_index,\
    \ #word)\nend", "  -- your codes here\n  \nend", "   if word ~= nil then\n   \
    \   if word:sub(1, 1) ~= 'a' then\n         return \"\"\n      end\n      local\
    \ count = 0\n      for i = 2, #word do -- Ignore vowels at the beginning of the\
    \ word\n         if word[i - 1] == 'a' or word[i - 1] == 'e' or word[i - 1] ==\
    \ 'i' or word[i - 1] == 'o' or word[i - 1] == 'u' then\n            count = count\
    \ + 1\n         end\n      end\n      if count <= 1 then -- Only one vowel\n \
    \        if word[#word - 1] == 'a' or word[#word - 1] == 'e' or word[#word - 1]\
    \ == 'i' or word[#word - 1] == 'o' or word[#word - 1] == 'u' then \n         \
    \   return word[#word - 1]\n         end\n         return \"\"\n      end\n  \
    \    local index = #word - count - 1\n      for i = #word, 2, -1 do -- For each\
    \ vowel, check if it stands between two consonants\n         if word[index] ==\
    \ word[i] then\n            index = i - 1\n         end\n      end\n      return\
    \ word[index]\n   else\n      return \"\"\n   end\nend", "    -- write your code\
    \ here\n    local vowels = {}\n    for i, v in pairs(string.gmatch(word, \"[aeiou]+\"\
    )) do \n        table.insert(vowels, v)\n    end\n    local vowelCount = #vowels\n\
    \    if vowelCount >= 2 then return table.minimum(vowels[vowelCount-1:vowelCount],\
    \ vowels[vowelCount-2:vowelCount]) else return \"\" end\nend", "   local vowels\
    \ = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n   if #word < 2 then return \"\" end\n\
    \   local first = word:sub(1, 1)\n   if first ~= word:sub(1, 2) then return \"\
    \" end\n   for i = 2, #word do \n      if vowels:include(word:sub(i, i)) then\n\
    \         return word:sub(i, i)\n      end\n   end\n   return \"\"\nend", "  return\
    \ word:sub(1, #word):gsub(\"[aeiouyAEIOUY]\", \"\") -- The first consonant is\
    \ removed from the word\nend", "   local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \   -- local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n   local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'z'}\n   local closest_vowel = nil\n   for i = #word, 1, -1 do\n \
    \     local vowel = word[i]\n      local consonant = word[#word]\n      if vowel\
    \ == \"a\" or vowel == \"e\" or vowel == \"i\" or vowel == \"o\" or vowel == \"\
    u\" then\n         if consonant == closest_vowel then\n            return consonant\n\
    \         end\n         closest_vowel = consonant\n      elseif consonant in consonants\
    \ then\n         if closest_vowel ~= nil then\n            closest_vowel = nil\n\
    \         end\n         return vowel\n      end\n   end\n   return closest_vowel\n\
    end", "\t-- write your code here\n\tlocal vowels = {}\n\tfor i = 1, #word do\n\
    \t\tif word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] ==\
    \ \"o\" or word[i] == \"u\" then\n\t\t\ttable.insert(vowels, word[i])\n\t\tend\n\
    \tend\n\tlocal vowel = #vowels\n\tif vowel == 2 then\n\t\treturn vowels[1]\n\t\
    elseif vowel == 1 then\n\t\treturn vowels[1]\n\tend\nend", "    local vowels =\
    \ string.gsub(word, \"[^aeiouAEIOU]\", \"\")\n    return vowels[#vowels]\nend",
  "   local vowels = { \"a\", \"e\", \"i\", \"o\", \"u\", \"y\" } -- Add more vowels\
    \ here if you want.\n   local vowel_index = nil\n   \n   -- Iterate through the\
    \ word backwards to find the vowel in the middle.\n   -- If you meet a vowel,\
    \ return the index and break.\n   for i = #word, -1 do\n      if word:sub(i, i):lower()\
    \ ~= \"\" then -- Make sure it's a letter.\n         if vowels[word:sub(i, i)]\
    \ then -- Check if it's a vowel.\n            vowel_index = i\n            break\n\
    \         end\n      end\n   end\n   \n   -- Return empty string if no vowel was\
    \ found.\n   if vowel_index == nil then\n      return \"\"\n   else\n      return\
    \ word:sub(vowel_index + 1) -- Return the consonant after the vowel.\n   end\n\
    end", "    -- your code here\n    return \"\"\nend", "\tlocal _i = #word - 1\n\
    \tlocal _vowels = \"aeiouAEIOU\"\n\t\n\twhile _i ~= 0 do\n\t\tlocal _char = word:sub(_i,\
    \ _i + 1)\n\t\tif _vowels:find(_char) then\n\t\t\treturn _char\n\t\tend\n\t\t\
    _i = _i - 1\n\tend\n\t\n\treturn \"\"\nend", "  -- your solution here\nend", " \
    \ local vowel_count = {}\n  local first_letter = word:sub(1, 1)\n  local second_letter\
    \ = word:sub(2, 2)\n  local last_letter = word:sub((#word) - 1)", "    local vowels\
    \ = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    local vowelsCount = {}\n    for _,v in\
    \ pairs(vowels) do\n        vowelsCount[v] = string.gsub(word, \"[^\"..v..\"]\"\
    ,\"\")\n    end", "    return word:sub(1, word:len() - 1) -- remove first character\n\
    \        ..((word:len() > 2) and word:sub(2, word:len() - 1) or \"\")\n      \
    \  ..((word:len() > 3) and word:sub(3, word:len() - 1) or \"\")\n        ..((word:len()\
    \ > 4) and word:sub(4, word:len() - 1) or \"\")\n        ..((word:len() > 5) and\
    \ word:sub(5, word:len() - 1) or \"\")\n        ..((word:len() > 6) and word:sub(6,\
    \ word:len() - 1) or \"\")\n        ..((word:len() > 7) and word:sub(7, word:len()\
    \ - 1) or \"\")\n        ..((word:len() > 8) and word:sub(8, word:len() - 1) or\
    \ \"\")\n        ..((word:len() > 9) and word:sub(9, word:len() - 1) or \"\")\n\
    end", "\tlocal vowels = {}\n\tlocal min_len = 1\n\tlocal start_index = #word -\
    \ 1\n\tfor i = start_index + 1, #word do\n\t\tlocal c = word[i]\n\t\tif c:lower()\
    \ ~= 'a' and c:lower() ~= 'e' and c:lower() ~= 'i' and c:lower() ~= 'o' and c:lower()\
    \ ~= 'u' then\n\t\t\ttable.insert(vowels, c)\n\t\tend\n\t\tif #vowels ~= 0 then\n\
    \t\t\tmin_len = #vowels\n\t\tend\n\tend\n\tif min_len == 0 then\n\t\treturn ''\n\
    \tend\n\tfor i = start_index, #word - 1 do\n\t\tlocal c = word[i]\n\t\tlocal index\
    \ = #vowels - 1\n\t\tif c == 'a' then\n\t\t\tindex = index - 1\n\t\telseif c ==\
    \ 'e' then\n\t\t\tindex = index - 2\n\t\telseif c == 'i' then\n\t\t\tindex = index\
    \ - 3\n\t\telseif c == 'o' then\n\t\t\tindex = index - 4\n\t\telseif c == 'u'\
    \ then\n\t\t\tindex = index - 5\n\t\tend\n\t\tif index < 0 then\n\t\t\tbreak\n\
    \t\telse\n\t\t\tvowels[index] = c\n\t\tend\n\tend\n\tlocal result = table.concat(vowels)\n\
    \ttable.insert(vowels, vowels[#vowels])\n\treturn result\nend", "    local vowels\
    \ = {}\n    local vowel\n    for vowel = \"a\",\"e\",\"i\",\"o\",\"u\" do\n  \
    \      local idx = word:find(vowel, 2, true)\n        if idx and idx > 0 then\n\
    \            table.insert(vowels, vowel)\n        end\n    end\n    if #vowels\
    \ > 0 then\n        local minDist\n        minDist = #vowels\n        for _, vowel\
    \ in pairs(vowels) do\n            local dist = #vowels\n            for i = #word,\
    \ 2, -1 do\n                if word[i] == \"a\" or word[i] == \"e\" or word[i]\
    \ == \"i\" or word[i] == \"o\" or word[i] == \"u\" then\n                    dist\
    \ = dist + 1\n                else\n                    break\n              \
    \  end\n            end\n            if dist < minDist then\n                minDist\
    \ = dist\n                vowel = vowel\n            end\n        end\n      \
    \  return vowel\n    else\n        return nil\n    end\nend", "  local start\n\
    \  for start=1, #word -1 do\n    if word:sub(start,start+1) ~= nil then\n    \
    \  break\n    end\n  end\n  local end\n  for end=#word, #word -1 do\n    if word:sub(end,end+1)\
    \ ~= nil then\n      break\n    end\n  end\n  if start <= end then\n    return\
    \ word:sub(end,end+1)\n  end\n  return nil\nend", "   local vowel_counter = 0\n\
    \   for i=#word,1,-1 do\n      if word[i] == \"a\" or word[i] == \"e\" or word[i]\
    \ == \"i\" or word[i] == \"o\" or word[i] == \"u\" then\n         if vowel_counter\
    \ == 0 then\n            vowel_counter = i\n         end\n         if vowel_counter\
    \ == i then\n            vowel_counter = i\n         end\n      end\n   end\n\
    \   if vowel_counter == 1 then\n      return word\n   elseif vowel_counter > 1\
    \ then\n      return word\n   end\nend\n   ", "    local vowels = {}\n    local\
    \ found = {}\n    for i=string.len(word)-1 do\n        local c = string.sub(word,i,i)\n\
    \        if c:sub(1,1) == \"a\" then\n            table.insert(vowels, \"a\")\n\
    \        elseif c:sub(1,1) == \"e\" then\n            table.insert(vowels, \"\
    e\")\n        elseif c:sub(1,1) == \"i\" then\n            table.insert(vowels,\
    \ \"i\")\n        elseif c:sub(1,1) == \"o\" then\n            table.insert(vowels,\
    \ \"o\")\n        elseif c:sub(1,1) == \"u\" then\n            table.insert(vowels,\
    \ \"u\")\n        end\n    end\n    local result\n    for i=#vowels-1+#found,-1\
    \ do\n        for j=i,#vowels-1+#found-1 do\n            if j > #vowels then\n\
    \                j = #vowels\n            end\n            if string.find(word,string.char(vowels[i],vowels[j]),1,true)\
    \ then\n                found = {found,j}\n                if j == 0 then\n  \
    \                  result = vowels[i]\n                else\n                \
    \    result = string.char(vowels[i],vowels[j])\n                end\n        \
    \        break\n            end\n        end\n        if #found == #vowels-1 then\n\
    \            break\n        end\n    end\n    return result\nend\nreturn get_closest_vowel",
  "   if word == nil then return nil end\n   local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \   local vowels_in_the_word = false\n   local vowel_counter = nil\n   local vowel\
    \ = nil\n   local i = 0\n   \n   for i = #word, 1 do\n      local c = word:sub(i,i)\n\
    \      vowels_in_the_word = false\n      \n      if vowels ~= nil then\n     \
    \    for i = 1, #vowels do\n            if vowels[i]:lower() == c:lower() then\n\
    \               vowels_in_the_word = true\n               vowel_counter = i\n\
    \               break\n            end\n         end\n      end\n      \n    \
    \  if vowels_in_the_word then\n         if vowel_counter == nil then\n       \
    \     vowel = c:lower()\n         else\n            if vowel_counter + 1 == #vowels\
    \ then\n               vowel = c:lower()\n            else\n               if\
    \ vowel_counter > #vowels then\n                  vowel = c:lower()\n        \
    \       end\n            end\n         end\n         break\n      end\n   end\n\
    \   \n   return vowel\nend", "    -- write your code in here\n    return \"\"\n\
    end", "  -- TODO: Write your code here\n  local vowels = \"aAeEiIoOuU\"\n  local\
    \ consonants = \"bBcCdDfFghGhHjJkKlLmMnNpPsStTuUvVwWxXzZ\"\n  local consonants_length\
    \ = #consonants\n  local vowels_length = #vowels\n  local index = 1\n  local vowel_index\
    \ = 0\n  local result = ''\n  while index <= #word do\n    local is_consonant\
    \ = string.sub(word,index,index) == consonants[consonants_length]\n    local is_vowel\
    \ = string.sub(word,index,index) == vowels[vowel_index]\n    if is_consonant or\
    \ is_vowel then\n      if is_consonant then\n        index = index + 1\n     \
    \ else\n        if string.sub(word,index,index) == vowels[vowel_index] then\n\
    \          vowel_index = vowel_index + 1\n        else\n          index = index\
    \ + 1\n        end\n      end\n    else\n      index = index + 1\n    end\n  end\n\
    \  if #result > 0 then\n    return ''\n  else\n    return result\n  end\nend",
  "    local vowels = \"AEIOUaeiou\"\n    local index = word:upper():find((vowels\
    \ .. ''):gsub(\"%S+\",\"%%%1\"))\n    if index == nil then return \"\" end\n \
    \   return word:sub((index+1):end,(index+1):end):upper()\nend", "\tlocal vowels\
    \ = {}\n\tfor i = 0, #word, 1 do\n\t\tlocal vowel = string.match(word, \"[aeiou]$\"\
    )\n\t\tif vowel ~= nil then\n\t\t\ttable.insert(vowels, vowel)\n\t\tend\n\tend\n\
    \tlocal consonants = {string.sub(word, 1, 1); string.sub(word, 2, #word)}\n\t\
    local vowel_met_condition = false\n\tfor i = 0, #vowels, 1 do\n\t\tif consonants[1]\
    \ > #consonants then\n\t\t\ttable.insert(vowels, nil)\n\t\tend\n\t\tif vowels[i]\
    \ == nil then\n\t\t\tvowel_met_condition = true\n\t\t\tbreak\n\t\tend\n\t\tif\
    \ consonants[1] >= vowels[i] and consonants[1] <= #consonants then\n\t\t\tvowel_met_condition\
    \ = true\n\t\t\tbreak\n\t\tend\n\tend\n\tif vowel_met_condition then\n\t\treturn\
    \ table.concat(vowels, \"\")\n\telse\n\t\treturn \"\"\n\tend\nend", "    local\
    \ vowels = string.gmatch(word, \"([aeiou])\")\n    if not vowels then\n      \
    \  return \"\"\n    end", "  local first_consonant = string.len(word)-1\n  local\
    \ last_consonant = 0\n  \n  for i=1,string.len(word) do\n    if string.sub(word,i,i)\
    \ ~= nil then\n      last_consonant = i\n    end\n  end\n  \n  local vowel = nil\n\
    \  \n  -- Vowel is in the beginning or ending doesn't count\n  if string.sub(word,1,1)\
    \ ~= nil then\n    if string.sub(word,1,1) ~= \"A\" then\n      vowel = \"A\"\n\
    \    end\n  elseif string.sub(word,string.len(word)-1,string.len(word)) ~= nil\
    \ then\n    if string.sub(word,string.len(word)-1,string.len(word)) ~= \"Z\" then\n\
    \      vowel = \"Z\"\n    end\n  end\n  \n  -- The character before the second\
    \ consonant is vowel\n  if string.sub(word,first_consonant,first_consonant) ~=\
    \ nil and vowel == nil then\n    if string.sub(word,first_consonant,first_consonant)\
    \ == \"A\" then\n      vowel = \"A\"\n    end\n  end\n  \n  -- The character after\
    \ the second consonant is vowel\n  if string.sub(word,last_consonant,last_consonant)\
    \ ~= nil and vowel == nil then\n    if string.sub(word,last_consonant,last_consonant)\
    \ == \"Z\" then\n      vowel = \"Z\"\n    end\n  end\n  \n  return vowel\nend",
  "\tword = string.lower(word)\n\tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"\
    }\n\tlocal vowel_found = false\n\tlocal i = 0\n\tlocal j\n\t\n\tfor i = #word,\
    \ -1, -1 do\n\t\tfor j = 1, #vowels do\n\t\t\tif string.sub(word, i, i + j) ==\
    \ vowels[j] then\n\t\t\t\tvowel_found = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\
    \t\tif vowel_found then\n\t\t\tbreak\n\t\tend\n\tend\n\t\n\tif vowel_found then\n\
    \t\treturn string.sub(word, -(i))\n\telse\n\t\treturn \"\"\n\tend\nend", "\tlocal\
    \ vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal word_reverse = reverse(word)\n\
    \tlocal vowel_reverse_begin = string.find(word_reverse,\"A\", 1, 'b')\n\tlocal\
    \ vowel_reverse_end = string.find(word_reverse,\"A\", 1, 'e')\n\tlocal vowel_begin_count\
    \ = vowel_reverse_end - vowel_reverse_begin + 1\n\tlocal vowel_end_count = string.len(word)\
    \ - 1\n\tlocal vowel_mid = string.find(word_reverse,\"A\", 1, 'e')\n\tlocal vowel_middle_count\
    \ = string.len(word) - vowel_mid + 1\n\tlocal vowel_begin_pos = vowel_reverse_begin\
    \ - vowel_begin_count\n\tlocal vowel_middle_pos = vowel_mid - vowel_middle_count\n\
    \tif vowel_begin_pos == 0 then\n\t\tvowel_begin_pos = 1\n\telseif vowel_middle_pos\
    \ == 0 then\n\t\tvowel_middle_pos = 1\n\tend\n\tlocal vowel_pos = word_reverse:sub(1,vowel_reverse_begin-1)\
    \ .. word_reverse:sub(vowel_reverse_end,string.len(word_reverse))\n\tlocal vowel_index\
    \ = string.find(vowel_pos,vowels,1,'b')\n\tif vowel_index == nil then\n\t\treturn\
    \ ''\n\telse\n\t\treturn string.sub(vowel_pos,vowel_index-1,vowel_index) \n\t\
    end\nend", "    local vowels = {'a','e','i','o','u','y'}\n    local vowelsCount\
    \ = {}\n    local vowel = \"\"\n    \n    local n = #word -- get the length of\
    \ string\n    for i = 1, n do\n        if vowels[word[i]:lower()] then\n     \
    \       vowelsCount[word[i]:lower()] = vowelsCount[word[i]:lower()] + 1\n    \
    \    else\n            break\n        end\n    end\n    -- get the max value\n\
    \    local maxVowel = \"\"\n    for key, value in pairs(vowelsCount) do\n    \
    \    if value > maxVowel then\n            maxVowel = value\n            vowel\
    \ = value\n        end\n    end\n    -- get the vowel from the right side of the\
    \ string\n    for i = 1, n do\n        if word[i] ~= vowel then\n            break\n\
    \        end\n    end\n    \n    return vowel\nend", "   local vowels = {'a','e','i','o','u','y'}\n\
    \   local vowels_count = #vowels\n   if #word < 4 then\n      return \"\"\n  \
    \ end\n   \n   local vowels_count_count = 0\n   for i = 1, #word do\n      local\
    \ vowel = word[i]:lower()\n      if vowel in vowels then\n         vowels_count_count\
    \ = vowels_count_count + 1\n      elseif vowel:sub(1,1) == \"u\" and vowel:sub(2,2)\
    \ in vowels then\n         vowels_count_count = vowels_count_count + 1\n     \
    \ elseif vowel:sub(1,1) == \"u\" and vowel:sub(2,2) == \"\" then\n         vowels_count_count\
    \ = vowels_count_count + 1\n      end\n   end\n   \n   if vowels_count_count ==\
    \ #vowels then\n      return word:sub(1,1)\n   elseif vowels_count_count > #vowels\
    \ then\n      return \"\"\n   else\n      local vowels_count_minus_1 = #vowels\n\
    \      for i = 1, vowels_count_minus_1 do\n         local word = word:sub(1,1)\n\
    \         local vowel = word:sub(i,i)\n         if vowel in vowels then\n    \
    \        vowels_count_minus_1 = i\n            break\n         end\n      end\n\
    \      for i = vowels_count_minus_1-1, 1, -1 do\n         local word = word:sub(i,i)\n\
    \         local vowel = word:sub(i,i)\n         if vowel in vowels then\n    \
    \        vowels_count_minus_1 = i\n            break\n         end\n      end\n\
    \      local vowel = word:sub(vowels_count_minus_1,vowels_count_minus_1)\n   \
    \   if vowel in vowels then\n         return vowel\n      else\n         return\
    \ \"\"\n      end\n   end\nend", "\tlocal i, j, len\n\tlen = #word\n\tlocal vowels\
    \ = \"aeiouAEIOU\"\n\t\n\ti = len - 1\n\tj = len\n\t\n\tif len == 0 then\n\t\t\
    return \"\"\n\tend\n\t\n\twhile i >= 0 and j >= 0 and word[i] == word[j] do\n\t\
    \tj = j - 1\n\tend\n\t\n\tif j >= 0 and word[i] == vowels[1] then\n\t\treturn\
    \ vowels[1]\n\telseif j >= 0 and word[i] == vowels[2] then\n\t\treturn vowels[2]\n\
    \telseif j >= 0 and word[i] == vowels[3] then\n\t\treturn vowels[3]\n\telseif\
    \ j >= 0 and word[i] == vowels[4] then\n\t\treturn vowels[4]\n\telseif j >= 0\
    \ and word[i] == vowels[5] then\n\t\treturn vowels[5]\n\telseif j >= 0 and word[i]\
    \ == vowels[6] then\n\t\treturn vowels[6]\n\telseif j >= 0 and word[i] == vowels[7]\
    \ then\n\t\treturn vowels[7]\n\telseif j >= 0 and word[i] == vowels[8] then\n\t\
    \treturn vowels[8]\n\telseif j >= 0 and word[i] == vowels[9] then\n\t\treturn\
    \ vowels[9]\n\telseif j >= 0 and word[i] == vowels[10] then\n\t\treturn vowels[10]\n\
    \telseif j >= 0 and word[i] == vowels[11] then\n\t\treturn vowels[11]\n\telseif\
    \ j >= 0 and word[i] == vowels[12] then\n\t\treturn vowels[12]\n\telseif j >=\
    \ 0 and word[i] == vowels[13] then\n\t\treturn vowels[13]\n\telseif j >= 0 and\
    \ word[i] == vowels[14] then\n\t\treturn vowels[14]\n\telseif j >= 0 and word[i]\
    \ == vowels[15] then\n\t\treturn vowels[15]\n\telseif j >= 0 and word[i] == vowels[16]\
    \ then\n\t\treturn vowels[16]\n\telseif j >= 0 and word[i] == vowels[17] then\n\
    \t\treturn vowels[17]\n\telseif j >= 0 and word[i] == vowels[18] then\n\t\treturn\
    \ vowels[18]\n\telseif j >= 0 and word[i] == vowels[19] then\n\t\treturn vowels[19]\n\
    \telseif j >= 0 and word[i] == vowels[20] then\n\t\treturn vowels[20]\n\telseif\
    \ j >= 0 and word[i] == vowels[21] then\n\t\treturn vowels[21]\n\telseif j >=\
    \ 0 and word[i] == vowels[22] then\n\t\treturn vowels[22]\n\telseif j >= 0 and\
    \ word[i] == vowels[23] then\n\t\treturn vowels[", "  -- We are looking for vowel\
    \ which is right side of word\n  -- (so right side of first consonant, right side\
    \ of second consonant)\n  -- but this vowel should be between first two consonants\
    \ \n  -- (so right side of first consonant + right side of second consonant).\n\
    \  -- Therefore we find first consonant \n  local first_consonant = string.find(word,\
    \ string.sub(word, 1, 1), \"Consonant\")\n  -- Now we find first vowel from the\
    \ right side \n  local first_vowel = string.find(word, string.sub(word, first_consonant,\
    \ first_consonant + 1), \"Vowel\")\n  if first_vowel > -1 then\n    local second_consonant\
    \ = string.find(word, string.sub(word, first_consonant + 1, first_consonant +\
    \ 2), \"Consonant\")\n    local second_vowel = string.find(word, string.sub(word,\
    \ second_consonant, second_consonant + 1), \"Vowel\")\n    if second_vowel > -1\
    \ then\n      -- We found first vowel, now we find second vowel from the right\
    \ side \n      -- of the word\n      local second_vowel2 = string.find(word, string.sub(word,\
    \ second_consonant + 1, second_consonant + 2), \"Vowel\")\n      if second_vowel2\
    \ > -1 then\n        -- We found second vowel, now we find third vowel from the\
    \ right side \n        -- of the word\n        local third_vowel = string.find(word,\
    \ string.sub(word, second_consonant + 2, second_consonant + 3), \"Vowel\")\n \
    \       if third_vowel > -1 then\n          -- We found third vowel, now we find\
    \ fourth vowel from the right side \n          -- of the word\n          local\
    \ fourth_vowel = string.find(word, string.sub(word, second_consonant + 3, second_consonant\
    \ + 4), \"Vowel\")\n          if fourth_vowel > -1 then\n            -- We found\
    \ fourth vowel, now we find fifth vowel from the right side \n            -- of\
    \ the word\n            local fifth_vowel = string.find(word, string.sub(word,\
    \ second_consonant + 4, second_consonant + 5), \"Vowel\")\n            if fifth_vowel\
    \ > -1 then\n              -- We found fifth vowel, now we find sixth vowel from\
    \ the right side \n              -- of the word\n              local sixth_vowel\
    \ = string.find(word, string.sub(word, second_consonant + 5, second_consonant\
    \ + 6), \"Vowel\")\n              if sixth_vowel > -1 then\n                ",
  "    local pos = #word - 1\n    while pos > 0 do\n        local letter = word[pos]\n\
    \        pos = pos - 1\n        -- If the letter is a vowel, then return it\n\
    \        if tonumber(string.sub(vowels, 1, pos)) == tonumber(letter) then\n  \
    \          return letter\n        end\n    end\nend", "    local vowel_pairs =\
    \ {\n        [\"a\"] = \"e\",\n        [\"e\"] = \"a\",\n        [\"i\"] = \"\
    o\",\n        [\"o\"] = \"i\",\n        [\"u\"] = \"i\",\n        [\"A\"] = \"\
    E\",\n        [\"E\"] = \"A\",\n        [\"I\"] = \"O\",\n        [\"O\"] = \"\
    I\",\n        [\"U\"] = \"I\",\n    }\n    \n    local vowel\n    local vowel_found\
    \ = false\n    local i = #word\n    while i do\n        local vowel = word:sub(i,i):lower()\n\
    \        if vowel_found  then\n            return vowel\n        end\n       \
    \ local vowel_pair = vowel_pairs[vowel]\n        -- if we're out of pairs, return\
    \ an empty string\n        if not vowel_pair then\n            -- vowel_found\
    \ = false to break out of the loop\n            break\n        end\n        i\
    \ = i - 1\n        if i == 0 then\n            -- vowel_found = false to break\
    \ out of the loop\n            break\n        end\n        vowel_found = true\
    \ \n    end\n    \n    return \"\"\nend", "\treturn word:sub(1, word:len()) \n\
    \t-- If the word length is odd, return empty string since there \n\t-- is no vowel\
    \ between first and last letters.\n\t-- If the word length is even, return first\
    \ and last letters.\n\t-- If the word length is even, return first and last letters\
    \ \n\t-- that have vowels between them.\n\t-- If the word length is odd, return\
    \ the first letter that has vowels\n\t-- between them.\n\t-- If the word length\
    \ is even but the first and last letters \n\t-- don't have a vowel between them,\
    \ return the first letter.\nend", "    local vowels = {\n      [\"a\"] = \"\"\
    ,\n      [\"e\"] = \"\",\n      [\"i\"] = \"\",\n      [\"o\"] = \"\",\n     \
    \ [\"u\"] = \"\"\n    }\n    local letters = {}\n    for i = 1, #word do\n   \
    \   letters[i] = word:sub(i,i)\n    end\n    for i = 1, #vowels do\n      for\
    \ j = 1, #vowels do\n        local count = 0\n        if vowels[i] == vowels[j]\
    \ and #letters > 1 then\n          if letters[i-1] ~= vowels[j] and letters[i+1]\
    \ ~= vowels[j] then\n            count = count+1\n          end\n        end\n\
    \        if count >= 2 then\n          vowels[i] = vowels[j] \n          break\n\
    \        end\n      end\n      if vowels[i] ~= \"\" then\n        break\n    \
    \  end\n    end\n    return vowels[i]\nend", "  local vowel = \"uaeiou\"\n  local\
    \ word_len= #word\n  local i, j = word_len, word_len - 1\n  local prev_consonant=\
    \ \"\"\n  while i >= 1 do\n    local vowel_found=false\n    while i <= j do\n\
    \      local current_letter = word[i]\n      if current_letter >= \"a\" and current_letter\
    \ <= \"z\" then\n        if current_letter == prev_consonant then\n          vowel_found=true\n\
    \        end\n      end\n      prev_consonant=current_letter\n      i = i - 1\n\
    \    end\n    if vowel_found then\n      return word[i]\n    end\n    j = j -\
    \ 1\n  end\n  return \"\"\nend", "  -- Your code here\nend", "   local pos = 1\n\
    \   for i = #word, 2, -1 do\n       if string.sub (word,i) == string.sub(word,-(i-1))\
    \ then\n           pos = i\n       end\n   end\n   return string.sub(word,pos+2,pos)\n\
    end\n</code>\n<|/ a dscore=1 tags=lua,for-loop |>\n<| a |>\n<code>", "    local\
    \ vowels = \"aeiouAEIOU\"\n    local result = \"\"\n    \n    local start = 0\n\
    \    local lastVowel = nil\n    for i = 1, #word do\n        local found = false\n\
    \        for j = start, #vowels do\n            if string.sub(word, i, i+1) ==\
    \ vowels[j] then\n                found = true\n                lastVowel = vowels[j]\n\
    \                start = i\n                break\n            end\n        end\n\
    \        if found then\n            if #result > 0 then\n                result\
    \ = result .. lastVowel\n            end\n        end\n    end\n    \n    if #result\
    \ > 0 then\n        result = result .. lastVowel\n    end\n    \n    return result\n\
    end", "    word = string.lower(word)\n    local vowels = \"aeiou\"\n    local\
    \ vowel = nil\n    for i = 1, #vowels do\n        local start = #word\n      \
    \  for j = #word, i, -1 do\n            local c = word[j]\n            if string.find(vowels,\
    \ c) == 1 then\n                start = j\n                break\n           \
    \ end\n        end\n        if start ~= #word and string.find(vowels, word[start],\
    \ 1, #word)~= 1 then\n            vowel = vowel:gsub(\"%s\", tostring(word[start]))\n\
    \        end\n    end\n    return vowel\nend", "\t-- write your code here\n\t\
    -- example\n\treturn \nend", "\tlocal vowels = {\n\t\t[\"a\"] = true,\n\t\t[\"\
    e\"] = true,\n\t\t[\"i\"] = true,\n\t\t[\"o\"] = true,\n\t\t[\"u\"] = true\n\t\
    }", "\t-- Write your code here\n\tif word == nil then\n\t\treturn \"\"\n\tend\n\
    \tlocal vowels = {\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"\
    }\n\tlocal vowel = nil\n\tlocal start = 0\n\tlocal end = 0\n\t-- Find the first\
    \ consonant and find the last consonant in the word\n\tfor i = 1, #word do\n\t\
    \tlocal char = word:sub(i,i)\n\t\tif char == \"c\" then\n\t\t\tstart = i\n\t\t\
    \tbreak\n\t\tend\n\tend\n\tfor i = #word, start, -1 do\n\t\tlocal char = word:sub(i,i)\n\
    \t\tif char == \"c\" then\n\t\t\tend = i\n\t\t\tbreak\n\t\tend\n\tend\n\tif start\
    \ < end then\n\t\tlocal vowel_start = start + 1\n\t\tlocal vowel_end = end - 1\n\
    \t\tlocal consonant_index = vowel_end\n\t\tlocal vowel_index = nil\n\t\tlocal\
    \ vowel = nil\n\t\tfor i = start, end do\n\t\t\tif vowels[i] then\n\t\t\t\tvowel_index\
    \ = i\n\t\t\t\tvowel = vowels[i]\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif vowel_index\
    \ then\n\t\t\t-- Check left and right side\n\t\t\tif vowel_start > 0 then\n\t\t\
    \t\tif vowel_end < #word then\n\t\t\t\t\t-- Check left side\n\t\t\t\t\tif word:sub(vowel_start,vowel_start)\
    \ == vowel then\n\t\t\t\t\t\t-- Check right side\n\t\t\t\t\t\tif word:sub(vowel_end,vowel_end)\
    \ == vowel then\n\t\t\t\t\t\t\t-- If the vowel stands between two consonants,\
    \ return it\n\t\t\t\t\t\t\tif consonant_index > 0 and consonant_index < #word\
    \ then\n\t\t\t\t\t\t\t\treturn vowel\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\
    \t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\t-- Check right side\n\t\t\tif vowel_end\
    \ < #word then\n\t\t\t\tif word:sub(vowel_end,vowel_end) == vowel then\n\t\t\t\
    \t\t-- If the vowel stands between two consonants, return it\n\t\t\t\t\tif consonant_index\
    \ > 0 and consonant_index < #word then\n\t\t\t\t\t\treturn vowel\n\t\t\t\t\tend\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn nil\nend", "    local vowels\
    \ = {\n        {vowel = \"a\", dist = 1},\n        {vowel = \"e\", dist = 1},\n\
    \        {vowel = \"i\", dist = 1},\n        {vowel = \"o\", dist = 1},\n    \
    \    {vowel = \"u\", dist = 1},\n        {vowel = \"y\", dist = 1},\n    }\n \
    \   local i = 1\n    while i <= #word do\n        if word:sub(i, i) == word:sub(i-1,\
    \ i-1) then\n            if word:sub(i+1, i+1) ~= \"a\" and word:sub(i+1, i+1)\
    \ ~= \"e\" and word:sub(i+1, i+1) ~= \"i\" and word:sub(i+1, i+1) ~= \"o\" and\
    \ word:sub(i+1, i+1) ~= \"u\" and word:sub(i+1, i+1) ~= \"y\" then\n         \
    \       return \"\"\n            end\n            i = i + 3\n        else\n  \
    \          return word:sub(i, i)\n        end\n    end\n    return \"\"\nend",
  "\tif word == nil then\n\t\treturn nil\n\tend\n\t-- start with the length of the\
    \ word\n\tlocal len = #word\n\tlocal vowel\n\t-- loop over each letter in the\
    \ word\n\tfor i = 1, len do\n\t\tvowel = word:sub(i, i)\n\t\tif vowel:sub(1, 1)\
    \ ~= 'a' and vowel:sub(1, 1) ~= 'e' and vowel:sub(1, 1) ~= 'i' and vowel:sub(1,\
    \ 1) ~= 'o' and vowel:sub(1, 1) ~= 'u' then\n\t\t\treturn nil\n\t\tend\n\tend\n\
    \treturn vowel\nend", "   local vowels = 'aeiouAEIOU'\n   local consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'",
  "\tif word == nil then\n\t\treturn nil\n\tend", "    local vowels = {}\n    for\
    \ i = string.len(word) - 1, 1, -1 do\n        if string.sub(word, i, i) ~= nil\
    \ then\n            table.insert(vowels, string.sub(word, i, i))\n        end\n\
    \    end\n    local min_distance = math.min(#vowels)\n    local closest_vowel\
    \ = nil\n    for _, v in ipairs(vowels) do\n        if string.sub(word, #word\
    \ - v + 1, #word) ~= nil then\n            if min_distance > #vowels then\n  \
    \              closest_vowel = v\n            else\n                if min_distance\
    \ < #vowels then\n                    if string.sub(word, #word - v + 1, #word)\
    \ ~= nil then\n                        closest_vowel = v\n                   \
    \ end\n                else\n                    closest_vowel = v\n         \
    \       end\n            end\n        end\n    end\n    return closest_vowel ~=\
    \ nil and closest_vowel or \"\"\nend\nassert(get_closest_vowel(\"yogurt\") ==\
    \ \"u\")\nassert(get_closest_vowel(\"FULL\") == \"U\")\nassert(get_closest_vowel(\"\
    quick\") == \"\")\nassert(get_closest_vowel(\"ab\") == \"\")\n</cell>\n<text>\n\
    Implement is_palindrome()\nGiven a string, return true if the string is a palindrome.",
  "  local vowel_found = \"\"\n  local first_vowel = #word - 1\n  for i = first_vowel\
    \ to 1 do\n    if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or\
    \ word[i] == \"o\" or word[i] == \"u\" then\n      vowel_found = word[i]\n   \
    \   break\n    end\n  end\n  if #word - 2 > 1 then\n    local second_vowel = #word\
    \ - 2\n    for j = second_vowel + 1 to #word do\n      local next_vowel = word[j]\n\
    \      if word[j - 1] == \"a\" or word[j - 1] == \"e\" or word[j - 1] == \"i\"\
    \ or word[j - 1] == \"o\" or word[j - 1] == \"u\" then\n        local vowel_found\
    \ = word[j]\n        break\n      end\n    end\n  end\n  return vowel_found\n\
    end", "\tlocal vowel = string.sub(word, 1, string.find(word, \"[AEIOUaeiou]\"\
    )-1)\n\tlocal vowel2 = string.sub(word, string.find(word, \"[AEIOUaeiou]\")+1,\
    \ string.len(word))\n\tlocal consonant = string.sub(word, 0, string.find(word,\
    \ \"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")-1)\n\tlocal consonant2 = string.sub(word,\
    \ string.find(word, \"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")+1, string.len(word))\n\
    \tif consonant ~= consonant2 then\n\t\tif consonant == \"a\" then\n\t\t\tif consonant2\
    \ == \"e\" or consonant2 == \"i\" or consonant2 == \"o\" or consonant2 == \"u\"\
    \ then\n\t\t\t\t-- return vowel\n\t\t\telse\n\t\t\t\treturn \"\"\n\t\t\tend\n\t\
    \telse\n\t\t\tif consonant2 == \"a\" or consonant2 == \"e\" or consonant2 == \"\
    i\" or consonant2 == \"o\" or consonant2 == \"u\" then\n\t\t\t\t-- return vowel\n\
    \t\t\telse\n\t\t\t\treturn \"\"\n\t\t\tend\n\t\tend\n\telse\n\t\tif consonant2\
    \ == \"a\" then\n\t\t\tif consonant == \"e\" or consonant == \"i\" or consonant\
    \ == \"o\" or consonant == \"u\" then\n\t\t\t\t-- return vowel\n\t\t\telse\n\t\
    \t\t\treturn \"\"\n\t\t\tend\n\t\telse\n\t\t\tif consonant == \"a\" or consonant\
    \ == \"e\" or consonant == \"i\" or consonant == \"o\" or consonant == \"u\" then\n\
    \t\t\t\t-- return vowel\n\t\t\telse\n\t\t\t\treturn \"\"\n\t\t\tend\n\t\tend\n\
    \tend\nend", "  local vowels = { 'a','e','i','o','u' };\n  for i = #word, 1, -1\
    \ do\n    local vowel = string.sub(word,i,i);\n    for j = #vowels, 1, -1 do\n\
    \      if string.sub(vowels,j,j) == vowel then\n        return vowel;\n      end\n\
    \    end\n  end\n  return \"\";\nend", "  -- your code\nend", "\t-- Your code\
    \ here\n\tword = string.lower(word)\n\tlocal vowel_found = false\n\tlocal vowel_candidate\
    \ = \"\"\n\tfor i=#word,-1,-1 do\n\t\tif string.sub(word,i,i) == 'a' then\n\t\t\
    \tvowel_candidate = string.sub(word,i,i)\n\t\t\tbreak\n\t\tend\n\t\tif string.sub(word,i,i)\
    \ == 'e' then\n\t\t\tvowel_candidate = string.sub(word,i,i)\n\t\t\tbreak\n\t\t\
    end\n\t\tif string.sub(word,i,i) == 'i' then\n\t\t\tvowel_candidate = string.sub(word,i,i)\n\
    \t\t\tbreak\n\t\tend\n\t\tif string.sub(word,i,i) == 'o' then\n\t\t\tvowel_candidate\
    \ = string.sub(word,i,i)\n\t\t\tbreak\n\t\tend\n\t\tif string.sub(word,i,i) ==\
    \ 'u' then\n\t\t\tvowel_candidate = string.sub(word,i,i)\n\t\t\tvowel_found =\
    \ true\n\t\tend\n\tend\n\treturn vowel_found and vowel_candidate or \"\"\nend",
  "    if word == nil then\n        return \"\"\n    end", "  local vowel_count =\
    \ {}\n  for i=1, #word, 1 do\n    local char = word:sub(i,i)\n    vowel_count[char]\
    \ = vowel_count[char] or 0\n    vowel_count[char] = vowel_count[char] + 1\n  end",
  "    if string.len(word) <= 2 then\n        return \"\"\n    end\n    local vowels\
    \ = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowel_counter = 0\n    for\
    \ i = 2, string.len(word) do\n        if string.sub(word, i - 1, i) ~= nil then\n\
    \            vowel_counter = vowel_counter + 1\n            if vowel_counter <\
    \ #vowels then\n                if string.sub(word, i - 1, i) ~= vowels[vowel_counter]\
    \ then\n                    break\n                end\n            end\n    \
    \    end\n    end\n    if vowel_counter == #vowels then\n        return nil\n\
    \    end\n    if string.sub(word, string.len(word) - 1, string.len(word)) ~= nil\
    \ then\n        return nil\n    end\n    return vowels[vowel_counter + 1]\nend",
  "    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    local vowel_index = #vowels\n\
    \    local last_index = 0\n    local vowel_length = 0\n    for i = 1, #word do\n\
    \        if vowels[word[i]] then\n            if vowel_length == 0 then\n    \
    \            vowel_length = i - last_index\n            elseif vowel_length ==\
    \ i - last_index then\n                vowel_index = i - 1\n                vowel_length\
    \ = i - last_index\n            else\n                vowel_length = i - last_index\n\
    \            end\n            last_index = i\n        end\n    end\n    return\
    \ word[vowel_index]\nend", "   local _vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"\
    }\n   local _letters = {string.sub(word,1,1),string.sub(word,2,-1)}\n   local\
    \ _n = #_letters\n   \n   for i,v in pairs(_vowels) do\n      if string.find(_letters,v)\
    \ then\n         if #word > _n then\n            return v\n         else\n   \
    \         return \"\"\n         end\n      end\n   end\n   \n   return \"\"\n\
    end", "\t-- Your code here\n\t-- return \nend", "\tlocal vowels = {\"a\",\"e\"\
    ,\"i\",\"o\",\"u\"}\n\tlocal vowel_count = {}\n\tlocal i = 1\n\tlocal j = 1\n\t\
    for i = 1,#word do\n\t\tlocal char = string.sub(word,i,i)\n\t\tlocal vowel = string.lower(char)\n\
    \t\tif vowels[vowel] then\n\t\t\tif vowel_count[vowel] == nil then\n\t\t\t\tvowel_count[vowel]\
    \ = 0\n\t\t\tend\n\t\t\tvowel_count[vowel] += 1\n\t\telse\n\t\t\tj = 1\n\t\t\t\
    for j = 1,#vowels do\n\t\t\t\tlocal vowel_2 = vowels[j]\n\t\t\t\tif vowel == vowel_2\
    \ then\n\t\t\t\t\tif vowel_count[vowel] == 1 then\n\t\t\t\t\t\tvowel_count[vowel]\
    \ = 2\n\t\t\t\t\telseif vowel_count[vowel] == 2 then\n\t\t\t\t\t\tvowel_count[vowel]\
    \ = 1\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \tfor i = 1,#vowels do\n\t\tif vowel_count[vowels[i]] > 1 then\n\t\t\treturn vowels[i]\n\
    \t\tend\n\tend\n\treturn nil\nend", "    return #word>0 and word:match(\"[bcdfghjklmnpqrstvwxyz]+?[^bcdfghjklmnpqrstvwxyz]+[bcdfghjklmnpqrstvwxyz]*$\"\
    )\n        or word:match(\"[bcdfghjklmnpqrstvwxyz]+?[^bcdfghjklmnpqrstvwxyz]+[bcdfghjklmnpqrstvwxyz]*$\"\
    )\n        or word:match(\"[bcdfghjklmnpqrstvwxyz]+?[^bcdfghjklmnpqrstvwxyz]+[bcdfghjklmnpqrstvwxyz]*$\"\
    )\n        or word:match(\"[bcdfghjklmnpqrstvwxyz]+?[^bcdfghjklmnpqrstvwxyz]+[bcdfghjklmnpqrstvwxyz]*$\"\
    )\n        or word:match(\"[bcdfghjklmnpqrstvwxyz]+?[^bcdfghjklmnpqrstvwxyz]+[bcdfghjklmnpqrstvwxyz]*$\"\
    )\n        or word:match(\"[bcdfghjklmnpqrstvwxyz]+?[^bcdfghjklmnpqrstvwxyz]+[bcdfghjklmnpqrstvwxyz]*$\"\
    )\n        or word:match(\"[bcdfghjklmnpqrstvwxyz]+?[^bcdfghjklmnpqrstvwxyz]+[bcdfghjklmnpqrstvwxyz]*$\"\
    )\n        or word:match(\"[bcdfghjklmnpqrstvwxyz]+?[^bcdfghjklmnpqrstvwxyz]+[bcdfghjklmnpqrstvwxyz]*$\"\
    )\n        or word:match(\"[bcdfghjklmnpqrstvwxyz]+?[^bcdfghjklmnpqrstvwxyz]+[bcdfghjklmnpqrstvwxyz]*$\"\
    )\n        or word:match(\"[bcdfghjklmnpqrstvwxyz]+?[^bcdfghjklmnpqrstvwxyz]+[bcdfghjklmnpqrstvwxyz]*$\"\
    )\n        or word:match(\"[bcdfghjklmnpqrstvwxyz]+?[^bcdfghjklmnpqrstvwxyz]+[bcdfghjklmnpqrstvwxyz]*$\"\
    )\n        or word:match(\"[bcdfghjklmnpqrstvwxyz]+?[^bcdfghjklm", "    local\
    \ vowels = {}\n    local last_idx\n    local last_idx2\n    local idx\n    local\
    \ idx2\n    local cnt\n    local vowel\n    local vowel2\n    local i\n    local\
    \ j\n    local len\n    local len2\n    local len3\n    local len4", "    local\
    \ vowels = string.gsub(word, '[aeiou]', '')\n    local vowel_index = string.find(word,\
    \ '[AEIOU]', true)\n    if vowel_index then\n        return word:sub(vowel_index+1,\
    \ word:len())\n    else\n        return \"\"\n    end\nend", "  assert(type(aString)\
    \ == 'string')\n  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n  local index =\
    \ #word\n  local vowel = nil\n  local vowel_index = -1\n  while index > 0 do\n\
    \    local char = string.sub(word, index, index)\n    if vowels[char] ~= nil then\n\
    \      vowel = char\n      vowel_index = index\n    end\n    index = index - 1\n\
    \  end\n  return vowel\nend", "\t-- Your code here\n\tlocal vowels = { 'A', 'a',\
    \ 'E', 'e', 'I', 'i', 'O', 'o', 'U', 'u' }\n\tlocal consonants = {'B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Y','Z'\
    \ }\n\tlocal startCons, endCons", "\tword = string.lower(word)\n\tlocal vowel\
    \ = {}\n\tvowel[\"aa\"] = \"a\" -- capital \"A\" is not counted\n\tvowel[\"ae\"\
    ] = \"e\"\n\tvowel[\"ea\"] = \"e\"\n\tvowel[\"i\"] = \"i\"\n\tvowel[\"o\"] = \"\
    o\"\n\tvowel[\"ou\"] = \"o\"\n\tvowel[\"u\"] = \"u\"\n\tvowel[\"y\"] = \"y\"\n\
    \tvowel[\"Y\"] = \"y\"\n\tvowel[\"aaa\"] = \"a\"\n\tvowel[\"aey\"] = \"e\"\n\t\
    vowel[\"eay\"] = \"e\"\n\tvowel[\"ey\"] = \"y\"\n\tvowel[\"iyy\"] = \"y\"\n\t\
    vowel[\"oyy\"] = \"y\"\n\tvowel[\"uyy\"] = \"y\"\n\tvowel[\"yy\"] = \"y\"", " \
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local len = #word\n    local\
    \ index = len\n    while index > 0 do\n        local vowel = word[index]\n   \
    \     if vowel:sub(1, 1) == 'a' or vowel:sub(1, 1) == 'e' or vowel:sub(1, 1) ==\
    \ 'i' or vowel:sub(1, 1) == 'o' or vowel:sub(1, 1) == 'u' then\n            return\
    \ vowel\n        end\n        index = index - 1\n    end\n    return ''\nend",
  "\tlocal vowels = \"aeiouy\"\n\tlocal vowel_count = {}\n\tlocal vowel_index = {}\n\
    \tfor i = 1, #vowels do\n\t\tvowel_count[vowels[i]] = vowel_count[voweli] + 1\
    \ or 1\n\t\tvowel_index[vowels[i]] = i\n\tend\n\tlocal vowel_met_count = 0\n\t\
    local vowel_index\n\tlocal closest_vowel_index\n\tfor i = 1, #word do\n\t\tlocal\
    \ curr_char = word[i]\n\t\tif vowel_met_count == #vowels then\n\t\t\treturn \"\
    \"\n\t\telseif vowel_met_count < #vowels then\n\t\t\tif curr_char in vowel_index\
    \ then\n\t\t\t\tclosest_vowel_index = vowel_index[curr_char]\n\t\t\t\tvowel_met_count\
    \ = vowel_met_count + 1\n\t\t\tend\n\t\telse\n\t\t\tif vowel_met_count == #vowels\
    \ then\n\t\t\t\tclosest_vowel_index = i - 1\n\t\t\t\tvowel_met_count = 1\n\t\t\
    \telse\n\t\t\t\tlocal current_index = i - 1\n\t\t\t\tlocal last_index = i - 1\n\
    \t\t\t\tlocal current_char\n\t\t\t\tfor j = 1, #vowels do\n\t\t\t\t\tif vowel_met_count\
    \ == #vowels then\n\t\t\t\t\t\tbreak\n\t\t\t\t\telse\n\t\t\t\t\t\tcurrent_char\
    \ = word[current_index]\n\t\t\t\t\t\tlast_index = current_index\n\t\t\t\t\t\t\
    if current_char in vowel_index then\n\t\t\t\t\t\t\tlocal current_vowel_index =\
    \ vowel_index[current_char]\n\t\t\t\t\t\t\tif vowel_count[current_char] <= vowel_count[vowels[current_vowel_index]]\
    \ then\n\t\t\t\t\t\t\t\tclosest_vowel_index = current_vowel_index\n\t\t\t\t\t\t\
    \t\tvowel_met_count = vowel_met_count + 1\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\
    local last_vowel_index = 0\n\t\t\t\t\t\t\t\tfor k = current_vowel_index + 1, #vowels\
    \ do\n\t\t\t\t\t\t\t\t\tif vowel_count[k] <= vowel_count[vowels[k]] then\n\t\t\
    \t\t\t\t\t\t\t\tlast_vowel_index = k\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\
    end\n\t\t\t\t\t\t\t\tif last_vowel_index > 1 then\n\t\t\t\t\t\t\t\t\tclosest_vowel_index\
    \ = last_vowel_index\n\t\t\t\t\t\t\t\t\tvowel_met_count = vowel_met_count + 1\n\
    \t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\t\tcurrent_index\
    \ = current_index - 1\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \tif vowel_met_count == #vowels then\n\t\treturn \"\"\n\telse\n\t\treturn word[closest_vowel_index]\n\
    \tend\nend", "  local vowels = { 'a', 'e', 'i', 'o', 'u' };\n  local vowel_counter\
    \ = {};\n  local vowel_total = 0;\n  for i,v in ipairs(vowels) do\n    vowel_counter[v]\
    \ = word:find(v);\n    vowel_total = vowel_total + vowel_counter[v];\n  end\n\
    \  if vowel_total == 0 then\n    return \"\";\n  end\n  local vv = word:find('a'):sub(vowel_total,\
    \ word:find('a'):len());\n  for i,v in ipairs(vowels) do\n    local vv = word:sub(vv\
    \ + 1).find(v);\n    if vv > 0 then\n      return vowels[i];\n    end\n  end\n\
    end", "    local vowels = {}\n    for i=3,#word do\n        if string.sub(word,i,i)\
    \ ~= 'a' and string.sub(word,i,i) ~= 'e' and string.sub(word,i,i) ~= 'i' and string.sub(word,i,i)\
    \ ~= 'o' and string.sub(word,i,i) ~= 'u' then\n            table.insert(vowels,\
    \ string.sub(word,i,i))\n        end\n    end\n    local v_index = 1\n    local\
    \ found = {}\n    for i=#vowels,1,-1 do\n        if vowels[i] ~= nil then\n  \
    \          if string.find(vowels[i],word,1,false) == nil then\n              \
    \  v_index = v_index - 1\n            end\n            if v_index == 0 then\n\
    \                table.insert(found, vowels[i])\n            end\n        end\n\
    \    end\n    local vowel = string.sub(word,#vowels,#word)\n    return vowel\n\
    end", "   for i = 1, #word, 1 do\n      if string.sub( word, i, 1 ) ~= \"a\" and\
    \ string.sub( word, i, 1 ) ~= \"e\" and string.sub( word, i, 1 ) ~= \"i\" and\
    \ string.sub( word, i, 1 ) ~= \"o\" and string.sub( word, i, 1 ) ~= \"u\" then\n\
    \         return string.sub( word, i, 1 )\n      end\n   end\n   return \"\"\n\
    end", "   local vowels = \"aeiouAEIOU\"\n   local index = #word\n   local vowel_index\
    \ = -1\n   for i = index, 1, -1 do\n      if vowels:sub(index, i) == vowels:sub(i,\
    \ i + 1) then\n         index = i\n         vowel_index = i\n      end\n   end\n\
    \   return vowels:sub(vowel_index, index) or \"\"\nend", "    if not word then\n\
    \        return nil\n    end", "  local vowels = \"aeiouAEIOU\"\n  local vowels_cnt\
    \ = {}\n  for _,v in ipairs(vowels) do vowels_cnt[v] = 0 end", "\tlocal vowels\
    \ = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"i\"] = \"i\",\n\t\t[\"u\"] = \"u\",\n\t\t\
    [\"e\"] = \"e\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"r\"] = \"r\",\n\t\t[\"l\"] = \"\
    l\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"i\"] = \"i\",\n\t\t[\"\
    o\"] = \"o\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] = \"i\",\n\t\t[\"l\"] = \"l\"\
    ,\n\t\t[\"r\"] = \"r\",\n\t\t[\"d\"] = \"d\",\n\t\t[\"s\"] = \"s\",\n\t\t[\"t\"\
    ] = \"t\",\n\t\t[\"h\"] = \"h\",\n\t\t[\"v\"] = \"v\",\n\t\t[\"c\"] = \"c\",\n\
    \t\t[\"y\"] = \"y\",\n\t\t[\"f\"] = \"f\",\n\t\t[\"b\"] = \"b\",\n\t\t[\"q\"]\
    \ = \"q\",\n\t\t[\"p\"] = \"p\",\n\t\t[\"k\"] = \"k\",\n\t\t[\"m\"] = \"m\",\n\
    \t\t[\"n\"] = \"n\",\n\t\t[\"l\"] = \"l\",\n\t\t[\"k\"] = \"k\",\n\t\t[\"l\"]\
    \ = \"l\",\n\t\t[\"q\"] = \"q\",\n\t\t[\"p\"] = \"p\",\n\t\t[\"b\"] = \"b\",\n\
    \t\t[\"k\"] = \"k\",\n\t\t[\"r\"] = \"r\",\n\t\t[\"s\"] = \"s\",\n\t\t[\"n\"]\
    \ = \"n\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"m\"] = \"m\",\n\
    \t\t[\"f\"] = \"f\",\n\t\t[\"b\"] = \"b\",\n\t\t[\"k\"] = \"k\",\n\t\t[\"i\"]\
    \ = \"i\",\n\t\t[\"p\"] = \"p\",\n\t\t[\"c\"] = \"c\",\n\t\t[\"l\"] = \"l\",\n\
    \t\t[\"y\"] = \"y\",\n\t\t[\"f\"] = \"f\",\n\t\t[\"v\"] = \"v\",\n\t\t[\"e\"]\
    \ = \"e\",\n\t\t[\"q\"] = \"q\",\n\t\t[\"m\"] = \"m\",\n\t\t[\"p\"] = \"p\",\n\
    \t\t[\"b\"] = \"b\",\n\t\t[\"r\"] = \"r\",\n\t\t[\"s\"] = \"s\",\n\t\t[\"t\"]\
    \ = \"t\",\n\t\t[\"h\"] = \"h\",\n\t\t[\"r\"] = \"r\",\n\t\t[\"v\"] = \"v\",\n\
    \t\t[\"c\"] = \"c\",\n\t\t[\"y\"] = \"y\",\n\t\t[\"q\"] = \"q\",\n\t\t[\"p\"]\
    \ = \"p\",\n\t\t[\"b\"] = \"b\",\n\t\t[\"k\"] = \"k\",\n\t\t[\"r\"] = \"r\",\n\
    \t\t[\"s\"] = \"s\",\n\t\t[\"n\"] = \"n\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"o\"]\
    \ = \"o\",\n\t\t[\"m\"] = \"m\",\n\t\t[\"f\"] = \"f\",\n\t\t[\"b", "\tlocal vowels\
    \ = {'a', 'e', 'i', 'o', 'u', 'y'}\n\tlocal vowel_positions = {}\n\tfor i = 1,\
    \ #word do\n\t\tlocal c = word[i]\n\t\tif vowels[c] then\n\t\t\tvowel_positions[c]\
    \ = i\n\t\tend\n\tend\n\tlocal vowel_counter = 0\n\tlocal vowel_max_position =\
    \ 0\n\tlocal closest_vowel = ''\n\tfor i, c in pairs(vowel_positions) do\n\t\t\
    if vowel_counter == 0 then\n\t\t\tvowel_counter = 1\n\t\t\tclosest_vowel = c\n\
    \t\telseif vowel_counter == 2 then\n\t\t\tif vowels[c] < closest_vowel then\n\t\
    \t\t\tclosest_vowel = c\n\t\t\tend\n\t\telse\n\t\t\tif vowels[c] == closest_vowel\
    \ then\n\t\t\t\tvowel_counter = vowel_counter + 1\n\t\t\tend\n\t\tend\n\t\tif\
    \ vowel_counter > vowel_max_position then\n\t\t\tvowel_max_position = i\n\t\t\
    end\n\tend\n\tif vowel_counter == 2 then\n\t\tif closest_vowel ~= '' then\n\t\t\
    \tclosest_vowel = closest_vowel .. 'a'\n\t\tend\n\tend\n\treturn closest_vowel\n\
    end", "    local vowels = {\n        \"a\",\"e\",\"i\",\"o\",\"u\",\n        \"\
    a\",\"e\",\"i\",\"o\",\"u\",\n        \"a\",\"e\",\"i\",\"o\",\"u\",\n       \
    \ \"a\",\"e\",\"i\",\"o\",\"u\",\n        \"a\",\"e\",\"i\",\"o\",\"u\"\n    }\n\
    \    local word2 = word\n    for i = #word, 1, -1 do\n        if word2 == \"a\"\
    \ or word2 == \"e\" or word2 == \"i\" or word2 == \"o\" or word2 == \"u\" then\n\
    \            word2 = word2\n        else\n            word2 = word2:sub(1,i)\n\
    \        end\n    end\n    local vowel = nil\n    local count = #vowels\n    for\
    \ i = #word2, 1, -1 do\n        if vowels[word2[i]] ~= nil then\n            count\
    \ = count - 1\n            vowel = vowels[word2[i]]\n            break\n     \
    \   end\n    end\n    return vowel\nend", "  local _vowel = \"aeiou\"\n  local\
    \ _vowel_count = #_vowel\n  local _last_vowel = -1\n  local _last_vowel_index\
    \ = -1", '    word = string.lower(word)', "    local vowels = \"aeiouAEIOU\"\n\
    \    local vowel_index -- Index of closest vowel to word.\n    local vowel_dist\
    \ -- Distance of closest vowel to word.\n    local index -- Index of closest consonant\n\
    \    local dist -- Distance of closest consonant ", "  -- your code here\nend",
  "\tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"u\",\n\t\t[\"i\"] = \"\
    u\",\n\t\t[\"o\"] = \"u\",\n\t\t[\"u\"] = \"u\"\n\t}", "  local word_len = #word\n\
    \  local vowel_pos = 0\n  local vowel_len = #(string.gsub('aeiouAEIOU', '', word))\n\
    \  local vowel_found = false\n  local result = ''\n  while vowel_pos < word_len\
    \ do\n    local pos = word_len - vowel_pos - 1\n    local vowel = string.sub(word,\
    \ pos + 1, pos + vowel_len)\n    if vowel == 'a' or vowel == 'e' or vowel == 'i'\
    \ or vowel == 'o' or vowel == 'u' then\n      if vowel_found == false then\n \
    \       vowel_found = true\n        result = vowel\n      end\n    elseif vowel_pos\
    \ > 0 then\n      if vowel_found == true then\n        result = result .. vowel\n\
    \      end\n    end\n    vowel_pos = pos + 1\n  end\n  if vowel_found == false\
    \ then\n    result = ''\n  end\n  return result\nend", "   local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n   local vowels_set = table.unpack(vowels)", "  local vowels\
    \ = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local vowels_count = #vowels\n  local\
    \ vowel_index = nil\n  local consonant_index = nil\n  local vowel_found = false\n\
    \  local consonant_found = false", "  local vowel_1 = \"a\"\n  local vowel_2 =\
    \ \"e\"\n  local vowel_3 = \"i\"\n  local vowel_4 = \"o\"\n  local vowel_5 = \"\
    u\"\n  local vowel_6 = \"A\"\n  local vowel_7 = \"E\"\n  local vowel_8 = \"I\"\
    \n  local vowel_9 = \"O\"\n  local vowel_10 = \"U\"\n  local consonant = \"b\"\
    \n  local vowel_start = false\n  local vowel_end = false\n  local vowel_before\
    \ = false\n  local vowel_after = false\n  local vowel_middle = false\n  local\
    \ vowel_middle_index = false\n  local consonant_index = false\n  local consonant_index_temp\
    \ = false\n  local consonant_index_1 = false\n  local consonant_index_2 = false\n\
    \  local consonant_index_3 = false\n  local consonant_index_4 = false\n  local\
    \ consonant_index_5 = false\n  local consonant_index_6 = false\n  local consonant_index_7\
    \ = false\n  local consonant_index_8 = false\n  local consonant_index_9 = false\n\
    \  local consonant_index_10 = false\n  local vowel_start_index = false\n  local\
    \ vowel_end_index = false\n  local vowel_before_index = false\n  local vowel_after_index\
    \ = false\n  local vowel_middle_index = false\n  local vowel_middle_index_temp\
    \ = false\n  local vowel_middle_index_1 = false\n  local vowel_middle_index_2\
    \ = false\n  local vowel_middle_index_3 = false\n  local vowel_middle_index_4\
    \ = false\n  local vowel_middle_index_5 = false\n  local vowel_middle_index_6\
    \ = false\n  local vowel_middle_index_7 = false\n  local vowel_middle_index_8\
    \ = false\n  local vowel_middle_index_9 = false\n  local vowel_middle_index_10\
    \ = false\n  local consonant_index = false\n  local consonant_index_temp = false\n\
    \  local consonant_index_1 = false\n  local consonant_index_2 = false\n  local\
    \ consonant_index_3 = false\n  local consonant_index_4 = false\n  local consonant_index_5\
    \ = false\n  local consonant_index_6 = false\n  local consonant_index_7 = false\n\
    \  local consonant_index_8 = false\n  local consonant_index_9 = false\n  local\
    \ consonant_index_10 = false\n  local consonant_index_11 = false\n  local consonant_index_12\
    \ = false\n  local consonant_index_", "  -- Write your code here\n  if #word <=\
    \ 1 then\n    return \"\"\n  end", "   if word:find(consonants) == nil then\n\
    \      return \"\"\n   end\n   local index = word:find(consonants)\n   local vowel\
    \ = word:sub(index,index+1)\n   if word:find(vowel:lower()) == nil then\n    \
    \  return \"\"\n   end\n   local index = word:find(vowel:lower())\n   return word:sub(index,index+1)\n\
    end", "\tlocal vowels = \"aeiouAEIOU\"\n\tlocal index = #vowels\n\tlocal wordLength\
    \ = #word\n\tlocal result", "  local vowels = \"aeiouAEIOU\"\n  local cons = \"\
    bcdfghjklmnpqrstvwxyz\"", "   local vowels = {}\n   for i = 1, #word do\n    \
    \  local letter = word:sub(i,i)\n      if letter:upper() == \"A\" then\n     \
    \    table.insert(vowels, \"a\")\n      elseif letter:upper() == \"E\" then\n\
    \         table.insert(vowels, \"e\")\n      elseif letter:upper() == \"I\" then\n\
    \         table.insert(vowels, \"i\")\n      elseif letter:upper() == \"O\" then\n\
    \         table.insert(vowels, \"o\")\n      elseif letter:upper() == \"U\" then\n\
    \         table.insert(vowels, \"u\")\n      elseif letter:upper() == \"Y\" then\n\
    \         table.insert(vowels, \"y\")\n      elseif letter:upper() == \"Z\" then\n\
    \         table.insert(vowels, \"z\")\n      else\n         break\n      end\n\
    \   end", "    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    local consonants\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' }\n    local result = {}\n    for i = 1, #word\
    \ do\n        local current_consonants = consonants\n        for j = 1, i do\n\
    \            current_consonants = current_consonants .. consonants\n        end\n\
    \        for j = 1, #current_consonants do\n            if word[i] == 'a' then\n\
    \                result[i] = word[i]\n            end\n            if word[i]\
    \ == 'e' then\n                result[i + 1] = word[i]\n            end\n    \
    \        if word[i] == 'i' then\n                result[i + 2] = word[i]\n   \
    \         end\n            if word[i] == 'o' then\n                result[i +\
    \ 3] = word[i]\n            end\n            if word[i] == 'u' then\n        \
    \        result[i + 4] = word[i]\n            end\n        end\n    end\n    for\
    \ i = 1, #result do\n        if result[i] ~= '' then\n            return result[i]\n\
    \        end\n    end\n    return ''\nend", "\tlocal vowels = { \"a\", \"e\",\
    \ \"i\", \"o\", \"u\", \"y\", \"A\", \"E\", \"I\", \"O\", \"U\", \"y\" }\n\tlocal\
    \ startVowelIndex = #word - 1\n\tlocal endVowelIndex = #word\n\tlocal result =\
    \ \"\"\n\t-- Search the right side of the word for a vowel\n\twhile startVowelIndex\
    \ >= 0 and startVowelIndex < endVowelIndex do\n\t\tlocal startChar = word:sub(startVowelIndex,\
    \ startVowelIndex + 1)\n\t\tif #vowels == 0 then\n\t\t\tbreak\n\t\tend", "\tlocal\
    \ vowels = { [\"a\"] = \"a\", \"e\"] = \"e\", \"i\"] = \"i\", \"o\"] = \"o\",\
    \ \"u\": \"u\" }\n\tlocal vowels_right = { [\"a\"] = true, \"e\", \"i\", \"o\"\
    , \"u\", \"aeiou\", \"y\", \"eh\", \"ah\" }\n\tlocal vowels_left = { [\"a\"] =\
    \ true, \"e\", \"i\", \"o\", \"u\" }", "    for i = #word, 2, -1 do\n        if\
    \ string.find(word, \"[aeiou]\", i) > 0 then\n            return word:sub(i, i)\n\
    \        end\n    end\n    return \"\"\nend\nprint(get_closest_vowel(\"yogurt\"\
    ))\nprint(get_closest_vowel(\"FULL\"))\nprint(get_closest_vowel(\"quick\"))\n\
    print(get_closest_vowel(\"ab\"))", "  local vowels = {'a', 'e', 'i', 'o', 'u',\
    \ 'A', 'E', 'I', 'O', 'U'}\n  local result\n  for i = #word, -1 do\n    if #word\
    \ < 2 then\n      result = \"\"\n      break\n    end\n    local letter = word[i]\n\
    \    local pos = letter:find('^[aeiou]', 1, true)\n    if pos == 0 then\n    \
    \  pos = letter:find('^[AEIOU]', 1, true)\n    end\n    if pos == 0 then\n   \
    \   pos = letter:find('^[AEIOUaeiou]', 1, true)\n    end\n    if pos == 0 then\n\
    \      return \"\"\n    end\n    pos = pos - 1\n    if pos < #vowels then\n  \
    \    result = vowels[pos]\n    end\n  end\n  return result\nend", "    local vowels\
    \ = \"aeiouy\"\n    local vowel_left = false\n    local vowel_right = false\n\
    \    local vowel_index = 0", "  local consonants = string.gsub(word, \"[^aeiou]+\"\
    , \"\")\n  \n  if consonants ~= \"\" then\n    -- We want to find the closest\
    \ vowel after consonants.\n    local vowels = consonants\n    local current_vowel\n\
    \    local consonant_count\n    for i = #consonants, 0, -1 do\n      consonant_count\
    \ = consonant_count + 1\n      -- Check if the current consonant has next vowel.\n\
    \      local next_vowel_index = #vowels\n      for j = i, 1, -1 do\n        --\
    \ Check if the vowel between current and next consonant exist.\n        if vowels[j]\
    \ == vowels[i] then\n          next_vowel_index = j\n        end\n      end\n\
    \      -- If the current consonant is the closest vowel\n      if current_vowel\
    \ == nil then\n        current_vowel = consonants[i]\n      elseif current_vowel\
    \ == consonants[i] then\n        current_vowel = current_vowel\n      elseif next_vowel_index\
    \ > i then\n        current_vowel = current_vowel\n      end\n    end\n  else\n\
    \    -- If the consonants is empty, just return the vowel.\n    current_vowel\
    \ = word\n  end\n  return current_vowel\nend", "\t-- We use table to save all\
    \ vowels for later use\n\tlocal vowels = {'a','e','i','o','u','y','a','e','i','o','u','y'}\n\
    \t-- Use a hash table to save a hash table to save a vowel for later\n\tlocal\
    \ vowel_hash = {}\n\tfor i = 1, #vowels do\n\t\t-- Create a hash table to save\
    \ vowels\n\t\tvowel_hash[vowels[i]] = i\n\tend\n\t-- Check if a vowel was found\n\
    \tlocal vowel_index = nil\n\tfor i = 1, #word do\n\t\t-- Get a vowel\n\t\tlocal\
    \ vowel = word:sub(i,i)\n\t\t-- Check if it was found\n\t\tif vowel_hash[vowel]\
    \ ~= nil then\n\t\t\t-- If it was found, store its index\n\t\t\tvowel_index =\
    \ vowel_hash[vowel]\n\t\t\t-- Break this loop\n\t\t\tbreak\n\t\tend\n\tend\n\t\
    -- If the vowel was found, return it\n\tif vowel_index ~= nil then\n\t\treturn\
    \ word:sub(vowel_index-1,vowel_index-1)\n\tend\n\t-- Else, return an empty string\n\
    \treturn ''\nend", "  -- YOUR CODE HERE\n  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local left_count = word:gsub(\"[^aeiou]\", \"\"):gsub(\"^\", \"\"):gsub(\"\
    [^aeiou]$\", \"\")\n  local right_count = word:gsub(\"[^aeiou]\", \"\"):gsub(\"\
    ^\", \"\"):gsub(\"[^aeiou]$\", \"\")\n  for _, v in pairs(vowels) do\n    if left_count\
    \ == v and right_count == v then\n      return v\n    end\n  end\n  return \"\"\
    \nend", "    local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n    local consonants\
    \ = {\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"\
    q\",\"r\",\"s\",\"t\",\"v\",\"x\",\"z\"}\n    local vowel_end = {\n        [\"\
    a\"] = \"a\",\n        [\"e\"] = \"e\",\n        [\"i\"] = \"i\",\n        [\"\
    o\"] = \"o\",\n        [\"u\"] = \"u\"\n    }\n    local consonant_end = {\n \
    \       [\"b\"] = \"a\",\n        [\"c\"] = \"a\",\n        [\"d\"] = \"a\",\n\
    \        [\"f\"] = \"a\",\n        [\"g\"] = \"a\",\n        [\"h\"] = \"a\",\n\
    \        [\"j\"] = \"a\",\n        [\"k\"] = \"a\",\n        [\"l\"] = \"a\",\n\
    \        [\"m\"] = \"a\",\n        [\"n\"] = \"a\",\n        [\"p\"] = \"a\",\n\
    \        [\"q\"] = \"a\",\n        [\"r\"] = \"a\",\n        [\"s\"] = \"a\",\n\
    \        [\"t\"] = \"a\",\n        [\"v\"] = \"a\",\n        [\"x\"] = \"a\",\n\
    \        [\"z\"] = \"a\"\n    }\n    local vowel_before = {\n        [\"b\"] =\
    \ \"y\",\n        [\"c\"] = \"y\",\n        [\"d\"] = \"y\",\n        [\"f\"]\
    \ = \"y\",\n        [\"g\"] = \"y\",\n        [\"h\"] = \"y\",\n        [\"j\"\
    ] = \"y\",\n        [\"k\"] = \"y\",\n        [\"l\"] = \"y\",\n        [\"m\"\
    ] = \"y\",\n        [\"n\"] = \"y\",\n        [\"p\"] = \"y\",\n        [\"q\"\
    ] = \"y\",\n        [\"r\"] = \"y\",\n        [\"s\"] = \"y\",\n        [\"t\"\
    ] = \"y\",\n        [\"v\"] = \"y\",\n        [\"x\"] = \"y\",\n        [\"z\"\
    ] = \"y\"\n    }\n    local vowel_after = {\n        [\"a\"] = \"u\",\n      \
    \  [\"e\"] = \"u\",\n        [\"i\"] = \"u\",\n        [\"o\"] = \"u\",\n    \
    \    [\"u\"] = \"u\"\n    }\n    local consonant_before = {\n        [\"b\"] =\
    \ \"b\",\n        [\"c\"] = \"c\",\n        [\"d\"] = \"d\",\n        [\"f\"]\
    \ = \"d\",\n        [\"g\"] = \"d\",\n        [\"h\"] = \"d\",\n        [\"j\"\
    ] = \"d\",\n        [\"k\"] = \"d\",\n        [\"l\"] = \"d\",\n        [\"m\"\
    ] = \"d\",\n        [\"n\"] = \"d\",\n        [\"p\"] = \"d\",\n        [\"q\"\
    ] = \"d\",\n        [\"r\"] = \"d\",\n        [\"s\"] = \"d\",\n        [\"t\"\
    ] = \"d\",\n        [\"v\"] = \"d\",\n        [\"x\"] = \"d\",\n        [\"z\"\
    ] = \"d\"\n    }\n    local ", "\t-- Write your code in LUA\n\tlocal vowels =\
    \ {}\n\tfor i = 1, string.len(word) do\n\t\tlocal letter = string.sub(word,i,i)\n\
    \t\tif letter ~= letter then\n\t\t\tvowels[letter] = true\n\t\tend\n\tend\n\t\
    for i = 1, string.len(word) do\n\t\tlocal letter = string.sub(word,i,i)\n\t\t\
    if vowels[letter] then\n\t\t\tlocal j = 1\n\t\t\twhile j <= string.len(word) do\n\
    \t\t\t\tlocal other_letter = string.sub(word,j,j)\n\t\t\t\tif other_letter ~=\
    \ letter then\n\t\t\t\t\tif string.find(string.gsub(word,other_letter,letter,\"\
    i\"),\"^[aeiouy]$\") then\n\t\t\t\t\t\treturn other_letter\n\t\t\t\t\tend\n\t\t\
    \t\tend\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn \"\"\nend", " \
    \   if word ~= nil and word ~= \"\" then\n        word = string.lower(word)\n\
    \        local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n        local vowel_index\
    \ = 1\n        for i = #word - 1, 0, -1 do\n            if string.sub(word,i,i)\
    \ in vowels then\n                vowel_index = i\n                break\n   \
    \         end\n        end\n        local consonants = {\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\"}\n        local consonants_index = #word\n\
    \        for i = 1, #word do\n            consonants_index = consonants_index\
    \ - 1\n            if string.sub(word,i,i) in consonants then\n              \
    \  consonants_index = consonants_index + 1\n                break\n          \
    \  end\n        end\n        if vowel_index == consonants_index then\n       \
    \     return \"\"\n        end\n        for i = 1, #word - 1 do\n            if\
    \ string.sub(word,consonants_index + i, consonants_index) ~= \"a\" and string.sub(word,consonants_index\
    \ + i, consonants_index) ~= \"e\" and string.sub(word,consonants_index + i, consonants_index)\
    \ ~= \"i\" and string.sub(word,consonants_index + i, consonants_index) ~= \"o\"\
    \ and string.sub(word,consonants_index + i, consonants_index) ~= \"u\" then\n\
    \                vowel_index = consonants_index\n                break\n     \
    \       end\n        end\n        if string.sub(word,vowel_index, vowel_index)\
    \ ~= \"a\" and string.sub(word,vowel_index, vowel_index) ~= \"e\" and string.sub(word,vowel_index,\
    \ vowel_index) ~= \"i\" and string.sub(word,vowel_index, vowel_index) ~= \"o\"\
    \ and string.sub(word,vowel_index, vowel_index) ~= \"u\" then\n            vowel_index\
    \ = vowel_index + 1\n        end\n        return string.sub(word,vowel_index +\
    \ 1, vowel_index + 2)\n    end\nend", "  \n  local vowels = \"aeiouAEIOU\"\n \
    \ local vowel = word\n  for i = 1, #vowel do\n    if vowel:sub(-i,-i) == vowels[i]\
    \ then\n      return vowel:sub(-i)\n    end\n  end\nend", "  local vowels = {\n\
    \    ['a'], \"e\", \"i\", \"o\", \"u\", \"A\",\"E\", \"I\", \"O\", \"U\",\n  }\n\
    \  local vowel_count = {}\n  for i = 1, #word do\n    vowel_count[word:sub(i,i)]\
    \ = vowel_count[word:sub(i,i)] or 0\n    vowel_count[word:sub(i,i)] = vowel_count[word:sub(i,i)]\
    \ + 1\n  end\n  for i = #vowels, 1, -1 do\n    if vowel_count[vowels[i-1]] > 0\
    \ then\n      return vowels[i-1]\n    end\n  end\nend", "  -- your code\n  --\
    \ your code\n  -- your code\n  -- your code\n  -- your code\n  -- your code\n\
    \  -- your code\n  -- your code\n  -- your code\n  -- your code\n  -- your code\n\
    \  -- your code\n  -- your code\n  return closest\nend", "\tif word == nil then\n\
    \t\tngx.log(ngx.WARN, \"get_closest_vowel word is nil\")\n\t\treturn \"\"\n\t\
    end\n\tfor i = #word, 1, -1 do\n\t\tlocal vowel = string.sub(word, i - 1, 1)\n\
    \t\tif vowel == ngx.HTTP.char_code (\"a\"..ngx.HTTP.char_code (\"z\")) or vowel\
    \ == ngx.HTTP.char_code (\"A\"..ngx.HTTP.char_code (\"Z\")) then\n\t\t\tngx.log(ngx.NOTICE,\
    \ \"Found vowel [\" ..vowel.. \"]\")\n\t\t\treturn vowel\n\t\tend\n\tend\n\treturn\
    \ \"\"\nend", "\tlocal vowels = \"aeiouAEIOU\"\n\tlocal consonants = \"bdfghjklmnpqrstvwxzBDFGHJKLMNPQRSTVWXZ\"",
  "    local vowels = \"AEIOUaeiou\"\n    local vowel_index = -1\n    local word =\
    \ string.lower(word)\n    local vowel_index = string.find(word, vowels)\n    local\
    \ result = \"\"\n    while(vowel_index > -1) do\n        if(vowel_index == word:len())\
    \ then\n            break\n        end\n        -- If current index is a consonant,\
    \ increment vowel_index to find the next one\n        if(word:sub(vowel_index,\
    \ vowel_index + 1) == string.sub(word, vowel_index + 1, vowel_index + 1)) then\n\
    \            vowel_index = vowel_index + 1\n        else\n            -- Decrement\
    \ vowel_index to find the previous one\n            vowel_index = string.find(word,\
    \ vowels, vowel_index - 1)\n        end\n        result = string.sub(word, vowel_index\
    \ + 1, vowel_index + 1)\n    end\n    return result\nend", "\tlocal vowels = {\n\
    \t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"a\",\n\t\t[\"i\"] = \"a\",\n\t\t[\"o\"]\
    \ = \"a\",\n\t\t[\"u\"] = \"a\",\n\t\t[\"A\"] = \"a\",\n\t\t[\"E\"] = \"a\",\n\
    \t\t[\"I\"] = \"a\",\n\t\t[\"O\"] = \"a\",\n\t\t[\"U\"] = \"a\",\n\t\t[\"i\"]\
    \ = \"a\",\n\t\t[\"Y\"] = \"a\",\n\t\t[\"A\"] = \"a\",\n\t\t[\"y\"] = \"a\",\n\
    \t\t[\"o\"] = \"a\",\n\t\t[\"u\"] = \"a\",\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"]\
    \ = \"a\",\n\t\t[\"i\"] = \"a\",\n\t\t[\"o\"] = \"a\",\n\t\t[\"u\"] = \"a\",\n\
    \t\t[\"y\"] = \"a\",\n\t\t[\"A\"] = \"a\",\n\t\t[\"Y\"] = \"a\",\n\t\t[\"o\"]\
    \ = \"a\",\n\t\t[\"u\"] = \"a\",\n\t\t[\"r\"] = \"e\",\n\t\t[\"s\"] = \"e\",\n\
    \t\t[\"t\"] = \"e\",\n\t\t[\"l\"] = \"e\",\n\t\t[\"d\"] = \"e\",\n\t\t[\"h\"]\
    \ = \"e\",\n\t\t[\"j\"] = \"e\",\n\t\t[\"k\"] = \"e\",\n\t\t[\"q\"] = \"e\",\n\
    \t\t[\"p\"] = \"e\",\n\t\t[\"c\"] = \"e\",\n\t\t[\"f\"] = \"e\",\n\t\t[\"v\"]\
    \ = \"e\",\n\t\t[\"b\"] = \"e\",\n\t\t[\"k\"] = \"e\",\n\t\t[\"q\"] = \"e\",\n\
    \t\t[\"p\"] = \"e\",\n\t\t[\"m\"] = \"e\",\n\t\t[\"n\"] = \"e\",\n\t\t[\"s\"]\
    \ = \"e\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] = \"e\",\n\t\t[\"p\"] = \"e\",\n\
    \t\t[\"g\"] = \"e\",\n\t\t[\"u\"] = \"e\",\n\t\t[\"a\"] = \"e\",\n\t\t[\"u\"]\
    \ = \"e\",\n\t\t[\"r\"] = \"e\",\n\t\t[\"s\"] = \"e\",\n\t\t[\"t\"] = \"e\",\n\
    \t\t[\"l\"] = \"e\",\n\t\t[\"d\"] = \"e\",\n\t\t[\"h\"] = \"e\",\n\t\t[\"j\"]\
    \ = \"e\",\n\t\t[\"k\"] = \"e\",\n\t\t[\"q\"] = \"e\",\n\t\t[\"p\"] = \"e\",\n\
    \t\t[\"c\"] = \"e\",\n\t\t[\"f\"] = \"e\",\n\t\t[\"v\"] = \"e\",\n\t\t[\"b\"]\
    \ = \"e\",\n\t\t[\"k\"] = \"e\",\n\t\t[\"q\"] = \"e\",\n\t\t[\"p\"] = \"e\",\n\
    \t\t[\"m\"] = \"e\",\n\t\t[\"n\"] = \"e\",\n\t\t[\"s\"] = \"e\",\n\t\t[\"a\"]\
    \ = \"e\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] = \"e\",\n\t\t[\"", "\tlocal vowel\
    \ = \"a\"\n\tlocal index = #word - 1\n\twhile index >= 0 and word[index] ~= vowel\
    \ do\n\t\tindex = index - 1\n\tend\n\tif index == 0 then\n\t\treturn \"\"\n\t\
    end\n\tlocal vowel_before = word[index - 1]\n\tlocal vowel_after = word[index\
    \ + 1]\n\tlocal vowel_middle = word[index + #word / 2]\n\tif vowel_before == vowel\
    \ then\n\t\treturn vowel_middle\n\telseif vowel_after == vowel then\n\t\treturn\
    \ vowel_middle\n\telse\n\t\treturn vowel_before\n\tend\nend", "\tlocal vowels\
    \ = {}\n\tfor i=3,string.len(word) do\n\t\tlocal s = string.sub(word,i,i)\n\t\t\
    if s == \"a\" or s == \"e\" or s == \"i\" or s == \"o\" or s == \"u\" then\n\t\
    \t\ttable.insert(vowels,s)\n\t\tend\n\tend\n\ttable.sort(vowels)\n\tlocal vowel_index\
    \ = string.find(word,'[aeiou]')\n\tif vowel_index ~= nil and vowel_index > 1 then\n\
    \t\tlocal vowel = word[vowel_index + 3]\n\t\t\n\t\tif vowels[vowel_index] ~= \"\
    \" then\n\t\t\tif vowels[vowel_index - 1] == vowel then\n\t\t\t\treturn vowel\n\
    \t\t\tend\n\t\t\tif vowels[vowel_index + 1] == vowel then\n\t\t\t\treturn vowel\n\
    \t\t\tend\n\t\t\tif vowels[vowel_index + 2] == vowel then\n\t\t\t\treturn vowel\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn \"\"\nend", "  local vowels = {\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n  local vowel_index = 1\n  while vowel_index <= #word\
    \ do\n    if vowel_index < #word and word[vowel_index] == word[vowel_index - 1]\
    \ then\n      vowel_index = vowel_index + 1\n    else\n      if word[vowel_index]\
    \ ~= \"a\" and word[vowel_index] ~= \"e\" and word[vowel_index] ~= \"i\" and word[vowel_index]\
    \ ~= \"o\" and word[vowel_index] ~= \"u\" then\n        return word[vowel_index]\n\
    \      end\n    end\n  end\n  return \"\"\nend", "    local vowels = {\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    for i = #word, -1 do\n        local vowel = word:sub(i,i)\n\
    \        if vowel:sub(1,1) ~= nil and vowel:sub(1,1):lower() ~= nil then\n   \
    \         for j = #vowels, 1 do\n                if vowel == vowels[j] then\n\
    \                    return vowels[j]\n                end\n            end\n\
    \        end\n    end\n    return \"\"\nend", "    local vowels= {'a','e','i','o','u','y','A','E','I','O','U','Y'}\n\
    \    local letters = word:gsub(\"[^\"..vowels..\"]+\", \"\")\n    local first_vowel\
    \ = letters:sub(1, 1)\n    local last_vowel = letters:sub(-1)\n    for i=last_vowel\
    \ do return i end\n    for i=first_vowel do return i end\n    return \"\"\nend",
  "\t-- Your code here\n\treturn \"\" -- Your code here\nend", "    local start =\
    \ word:sub(1,1)\n    local end = word:sub(-1)\n    local vowels = {\n        \"\
    A\",\"a\",\"B\",\"b\",\"C\",\"c\",\"D\",\"d\",\"E\",\"e\",\"F\",\"f\",\"G\",\"\
    g\",\"H\",\"h\",\"I\",\"i\",\"J\",\"j\",\"K\",\"k\",\"L\",\"l\",\n        \"M\"\
    ,\"m\",\"N\",\"n\",\"O\",\"o\",\"P\",\"p\",\"Q\",\"q\",\"R\",\"r\",\"S\",\"s\"\
    ,\"T\",\"t\",\"U\",\"u\",\"V\",\"v\",\"W\",\"w\",\"X\",\"x\",\n        \"Y\",\"\
    y\",\"Z\",\"z\"\n    }\n    return vowels[#vowels]\nend", "   local vowels = 'a'\
    \ .. 'e' .. 'i' .. 'o' .. 'u'\n   local vowelsCount = #vowels\n   local consonants\
    \ = 'bcdfghjklmnpqrstvwxyz'\n   local consonantsCount = #consonants\n   local\
    \ vowelIndex = 1\n   local currentIndex = 1\n   local currentConsonant = 1", "\t\
    local vowels = {'a','e','i','o','u','y'};\n\tlocal vowels_n = #vowels;\n\t\n\t\
    --check every consonant if contains any vowel\n\tlocal last_consonant;\n\tfor\
    \ consonant = #word-1, 1, -1 do\n\t\tlocal consonant_n = consonant;\n\t\tlocal\
    \ consonant_last_index = consonant-1;\n\t\tlocal consonant_last_char = word[consonant_last_index];\n\
    \t\tif vowels_n == 0 then\n\t\t\treturn \"\";\n\t\tend\n\t\t\n\t\tfor i = 0, vowels_n\
    \ do\n\t\t\tlocal vowel = vowels[i];\n\t\t\tif consonant_last_char == vowel then\n\
    \t\t\t\treturn vowel;\n\t\t\tend\n\t\tend\n\tend\nend", "  -- Base case\n  if\
    \ word == nil or word == \"\" then\n    return \"\"\n  end", "\t-- Base Case --\
    \ Return empty string if word doesn't contain any vowel.\n\tif not word:match(\"\
    ^[aeiou]+$\") then return \"\"\n\tend\n\t-- Recursive Case -- Find closest vowel\
    \ to the right of word from both sides.\n\t-- If no vowel exists from both sides,\
    \ return empty string.\n\treturn get_closest_vowel(word .. \"e\") .. get_closest_vowel(word\
    \ .. \"i\")\nend", "   for i=#word, #word, 1, -1 do\n      if word[i] == \"a\"\
    ..\"z\" then return \"a\"..\"z\"\n      elseif word[i] == \"A\"..\"Z\" then return\
    \ \"A\"..\"Z\"\n      else return \"\"\n      end\n   end\nend", "    local vowels\
    \ = { 'a', 'e', 'i', 'o', 'u' }\n    local vowels_count = 0\n    local vowel =\
    \ ''\n    for letter in word:gmatch(\"[AEIOU]\") do \n        vowels_count = vowels_count\
    \ + 1\n    end", "    local vowels_count = #string.gsub(word, \"[aeiouy]+\", \"\
    \")\n    if vowels_count > 0 then\n        for i=#word,1,-1 do\n            if\
    \ word:sub(i,i) ~= \"a\" and word:sub(i,i) ~= \"e\" and word:sub(i,i) ~= \"i\"\
    \ then\n                local vowel_index = string.find(string.sub(word, i, i),\
    \ vowel)\n                if vowel_index ~= nil then\n                    if vowel_index\
    \ > 0 then\n                        local vowel_start = string.find(string.sub(word,\
    \ i, vowel_index), consonant)\n                        if vowel_start ~= nil then\n\
    \                            local vowel_end = string.find(string.sub(word, i,\
    \ vowel_index-1), consonant)\n                            if vowel_end ~= nil\
    \ then\n                                return string.sub(word, vowel_start+1,\
    \ vowel_end-1)\n                            end\n                        end\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\n    return \"\"\nend", "   -- If there's no vowel between \"y\" and\
    \ \"o\"\n   if not (string.find(word, \"[aeiou]\") and string.find(word, \"[AEIOU]\"\
    ) ) then\n      return \"\"\n   end\n   -- If there's no vowel between \"o\" and\
    \ \"u\"\n   if not (string.find(word, \"[aeiou]\") and string.find(word, \"[AEIOU]\"\
    ) ) then\n      return \"\"\n   end\n   -- If there's no vowel between \"y\" and\
    \ \"a\"\n   if not (string.find(word, \"[aeiou]\") and string.find(word, \"[AEIOU]\"\
    ) ) then\n      return \"\"\n   end\n   -- If there's no vowel after \"y\"\n \
    \  if not (string.find(word, \"[aeiouy]\") ) then\n      return \"\"\n   end\n\
    \   -- If there's no vowel before \"a\"\n   if not (string.find(word, \"[aeioua]\"\
    ) ) then\n      return \"\"\n   end\n   -- If there's no vowel after \"y\"\n \
    \  if not (string.find(word, \"[aeiouy]\") ) then\n      return \"\"\n   end\n\
    \   -- If there's no vowel before \"a\"\n   if not (string.find(word, \"[aeioua]\"\
    ) ) then\n      return \"\"\n   end\n   -- Get first vowel\n   local firstvowel\
    \ = string.sub(word, 1, 1)\n   -- Get last vowel\n   local lastvowel = string.sub(word,\
    \ (string.len(word) - 1), string.len(word))\n   -- If last vowel is consonant\n\
    \   if string.find(lastvowel, \"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\"\
    ) then\n      -- If the last vowel is after the first vowel\n      if lastvowel\
    \ > firstvowel then\n         -- If the last vowel has a following consonant\n\
    \         if not string.find(lastvowel, \"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\"\
    ) then\n            -- return an empty string\n            return \"\"\n     \
    \    end\n      end\n   end\n   -- If last vowel is consonant\n   if string.find(lastvowel,\
    \ \"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\") then\n      -- If the last\
    \ vowel is before the first vowel\n      if lastvowel < firstvowel then\n    \
    \     -- If the last vowel has a following consonant\n         if not string.find(lastvowel,\
    \ \"[bcdfghjklmnpq", "    if not word then return end\n    local vowels = {a,e,i,o,u}\n\
    \    local vowel = string.find(word,\".\",-1,true)\n    while vowel do\n     \
    \   if string.find(word,vowel,1,true) then\n            return vowel\n       \
    \ end\n        vowel = string.find(word,\".\",vowel+1,true)\n    end\n    return\
    \ \"\"\nend", "    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"\
    o\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowel_positions = {}\n\
    \    local closest_vowel = nil\n    local vowel_found = false", "\tlocal vowels\
    \ = {\"a\",\"A\",\"e\",\"E\",\"i\",\"I\",\"o\",\"O\",\"u\",\"U\"}\n\tlocal wordLen\
    \ = string.len(word)\n\tlocal closestVowel = \"\"\n\tlocal lastConsonantIndex\
    \ = 1\n\tfor i = wordLen-1 do\n\t\tlocal consonantIndex = string.find(word,string.sub(word,\
    \ lastConsonantIndex,i),0,true)\n\t\tlocal consonants = string.sub(word, lastConsonantIndex,i)\n\
    \t\tif consonantIndex then\n\t\t\tclosestVowel = string.sub(word,lastConsonantIndex,consonantIndex)\n\
    \t\t\tif closestVowel == vowels[1] then\n\t\t\t\tclosestVowel = string.sub(word,consonantIndex+1,consonantIndex+2)\n\
    \t\t\tend\n\t\t\tif closestVowel == vowels[2] then\n\t\t\t\tclosestVowel = string.sub(word,consonantIndex+2,consonantIndex+3)\n\
    \t\t\tend\n\t\t\tif closestVowel == vowels[3] then\n\t\t\t\tclosestVowel = string.sub(word,consonantIndex+3,consonantIndex+4)\n\
    \t\t\tend\n\t\t\tif closestVowel == vowels[4] then\n\t\t\t\tclosestVowel = string.sub(word,consonantIndex+4,consonantIndex+5)\n\
    \t\t\tend\n\t\t\tif closestVowel == vowels[5] then\n\t\t\t\tclosestVowel = string.sub(word,consonantIndex+5,consonantIndex+6)\n\
    \t\t\tend\n\t\t\tif closestVowel == vowels[6] then\n\t\t\t\tclosestVowel = string.sub(word,consonantIndex+6,consonantIndex+7)\n\
    \t\t\tend\n\t\t\tif closestVowel == vowels[7] then\n\t\t\t\tclosestVowel = string.sub(word,consonantIndex+7,consonantIndex+8)\n\
    \t\t\tend\n\t\t\tif closestVowel == vowels[8] then\n\t\t\t\tclosestVowel = string.sub(word,consonantIndex+8,consonantIndex+9)\n\
    \t\t\tend\n\t\t\tif closestVowel == vowels[9] then\n\t\t\t\tclosestVowel = string.sub(word,consonantIndex+9,consonantIndex+10)\n\
    \t\t\tend\n\t\t\tif closestVowel == vowels[10] then\n\t\t\t\tclosestVowel = string.sub(word,consonantIndex+10,consonantIndex+11)\n\
    \t\t\tend\n\t\t\tif closestVowel == vowels[11", "    local vowel_met = false\n\
    \    local vowel = nil\n    for i=#word,1,-1 do\n        -- find vowel at right\
    \ side\n        local rightSide = word:sub(i,i)\n        local rightSideCapital\
    \ = string.upper(rightSide)\n        if rightSideCapital == \"A\" or rightSideCapital\
    \ == \"E\" or rightSideCapital == \"I\" or rightSideCapital == \"O\" or rightSideCapital\
    \ == \"U\" then\n            vowel = rightSideCapital\n            vowel_met =\
    \ true\n            break\n        end\n    end\n    if vowel == nil then\n  \
    \      return nil\n    end\n    -- find vowel at left side\n    local leftSide\
    \ = word:sub(1,1)\n    local leftSideCapital = string.upper(leftSide)\n    if\
    \ leftSideCapital == \"A\" or leftSideCapital == \"E\" or leftSideCapital == \"\
    I\" or leftSideCapital == \"O\" or leftSideCapital == \"U\" then\n        vowel\
    \ = leftSideCapital\n        vowel_met = true\n    end\n    return vowel\nend",
  "  -- Your code here!\n  local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"\
    E\",\"I\",\"O\",\"U\"}\n  local vowelsCount = {}\n  for k,v in pairs(vowels) do\n\
    \    vowelsCount[v] = -1\n  end\n  \n  local vowelsCount = {}\n  for k,v in pairs(vowels)\
    \ do\n    vowelsCount[v] = -1\n  end\n  for i=#word,1,-1 do\n    local currentChar\
    \ = word[i]\n    if currentChar == \"a\" then\n      vowelsCount[\"a\"] = 1\n\
    \    elseif currentChar == \"e\" then\n      vowelsCount[\"e\"] = 1\n    elseif\
    \ currentChar == \"i\" then\n      vowelsCount[\"i\"] = 1\n    elseif currentChar\
    \ == \"o\" then\n      vowelsCount[\"o\"] = 1\n    elseif currentChar == \"u\"\
    \ then\n      vowelsCount[\"u\"] = 1\n    elseif currentChar == \"A\" then\n \
    \     vowelsCount[\"A\"] = 1\n    elseif currentChar == \"E\" then\n      vowelsCount[\"\
    E\"] = 1\n    elseif currentChar == \"I\" then\n      vowelsCount[\"I\"] = 1\n\
    \    elseif currentChar == \"O\" then\n      vowelsCount[\"O\"] = 1\n    elseif\
    \ currentChar == \"U\" then\n      vowelsCount[\"U\"] = 1\n    end\n  end\n  \n\
    \  local closestVocal = nil\n  \n  for k,v in pairs(vowelsCount) do\n    if v\
    \ == -1 then\n      closestVocal = k\n      break\n    end\n  end\n  if closestVocal\
    \ ~= nil then\n    return closestVocal\n  end\n  return nil\nend", "   if word\
    \ == nil then return \"\" end\n   local vowels = { \"a\", \"e\", \"i\", \"o\"\
    , \"u\" }\n   local vowels_count = #vowels\n   for i = #word, 1, -1 do\n     \
    \ local vowel_index = #vowels - i - 1\n      if word[vowel_index] ~= nil then\n\
    \         if string.sub(vowels, vowel_index, vowel_index + 1) ~= \"\" then\n \
    \           return string.sub(vowels, vowel_index, vowel_index + 1)\n        \
    \ end\n      end\n   end\n   return \"\"\nend", "    local vowels = 'aAeEiIoOuUA'\n\
    \    for i=1,#word do\n        local vowel = word:sub(i,i)\n        if vowel:sub(1,1)==\"\
    a\" or vowel:sub(1,1)==\"A\" then\n            if vowel:sub(1,1):lower()==\"e\"\
    \ or vowel:sub(1,1):lower()==\"e\" then\n                if vowel:sub(1,2):lower()==\"\
    i\" or vowel:sub(1,2):lower()==\"i\" then\n                    if vowel:sub(1,3):lower()==\"\
    o\" or vowel:sub(1,3):lower()==\"o\" then\n                        if vowel:sub(1,4):lower()==\"\
    u\" or vowel:sub(1,4):lower()==\"u\" then\n                            word =\
    \ word:sub(i-4,i)\n                            print(word)\n                 \
    \           return(word)\n                        end\n                    end\n\
    \                end\n            end\n        end\n    end\n    print(\"No vowel\
    \ in word\")\n    return(\"\")\nend", "   local vowels = {}\n   for i = 1, #word\
    \ do\n      local c = word:sub(i,i)\n      if c:lower() == \"a\" or c:lower()\
    \ == \"e\" or c:lower() == \"i\" or c:lower() == \"o\" or c:lower() == \"u\" then\n\
    \         table.insert(vowels, c)\n      end\n   end\n   table.sort(vowels, function(a,b)\
    \ return a:len() > b:len() end)\n   return vowels[#vowels]\nend", "    -- base\
    \ case\n    if word == '' then return '' end\n    local vowel = nil\n    for i\
    \ = #word, #word, 1, -1 do\n        local c = word[i]\n        if c == 'a' or\
    \ c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            vowel = c\n \
    \       end\n    end\n    return vowel\nend", "\tlocal function compare(v1, v2)\n\
    \t\tlocal i1 = string.find(word, v1, 1)\n\t\tlocal i2 = string.find(word, v1,\
    \ i1+1)\n\t\treturn i1 < i2 and i2 - i1 < 1\n\tend", "    if not word then\n \
    \       return ''\n    end", "    local word_len = string.len(word)\n    local\
    \ vowels = \"aeiou\"\n    local vowel_len = #vowels\n    \n    local word_len\
    \ = string.len(word)\n    for i = 1, word_len do\n        if string.sub(word,\
    \ i, i+1) ~= \"\" then\n            local vowel_index = string.find(vowels, string.sub(word,\
    \ i, i+1))\n            if vowel_index and (vowel_index > 0 and vowel_index <\
    \ vowel_len - 1) then\n                -- We found a vowel\n                local\
    \ vowel_start = string.sub(word, i, i+1)\n                local vowel_end = string.sub(word,\
    \ i+1, vowel_index-1)\n                -- Get index of vowel inside word\n   \
    \             local vowel_index_in_word = string.find(word, vowel_start)\n   \
    \             if vowel_index_in_word then\n                    -- We found a vowel\
    \ right after the consonant\n                    -- Check if the word contains\
    \ word between vowel_index - 1 and vowel_index + 1 \n                    local\
    \ word_before = string.sub(word, i, vowel_index - 1)\n                    local\
    \ word_after = string.sub(word, vowel_index + 1, vowel_index + 2)\n          \
    \          -- Check left and right words\n                    if word_before ~=\
    \ \"\" then\n                        local word_before_vowel_index = string.find(word,\
    \ word_before)\n                        if word_before_vowel_index and (word_before_vowel_index\
    \ > 0 and word_before_vowel_index < word_len - 2) then\n                     \
    \       -- We found a word before vowel\n                            local left_vowel\
    \ = string.sub(word, vowel_index - 1, word_before_vowel_index - 1)\n         \
    \                   if string.find(vowels, left_vowel) then\n                \
    \                -- This vowel is before vowel index\n                       \
    \         return left_vowel\n                            end\n               \
    \         end\n                    end\n                    -- Check right and\
    \ left words\n                    if word_after ~= \"\" then\n               \
    \         local word_after_vowel_index = string.find(word, word_after)\n     \
    \                   if word_after_vowel_index and (word_after_vowel_index > 0\
    \ and word_after_vowel_index < word_len - 2) then\n                          \
    \  -- We found a word after vowel\n                            local right_vowel\
    \ = string.sub(word, vowel_index + 1, word_after_vowel_index + 1)\n          \
    \                  if string.find(vowels, right_vowel) then\n                \
    \                -- This vowel is after vowel index\n                        \
    \        return right_vowel\n                            end\n               \
    \         end\n                    end\n                end\n            end\n\
    \        end\n    end\nend", "  local vowels = \"aeiouAEIOU\"\n  local vowel_len\
    \ = #vowels\n  if #word > 0 and #word ~= vowel_len then\n    local start = #word\
    \ - vowel_len\n    local vowel_met_first = false\n    local vowel_met_last = false\n\
    \    for i=start,-1,-1 do\n      if word[i] in vowels then\n        vowel_met_first\
    \ = true \n      end\n      if word[i] == word[start + 1] and word[start + 1]\
    \ in vowels then\n        vowel_met_last = true \n      end\n      if vowel_met_first\
    \ and vowel_met_last then\n        return word[i]\n      end\n    end\n  end\n\
    end", "\t-- Write your code here\n\tif string.len(word) ~= 0 then\n\t\treturn\
    \ word:sub(-string.len(word), -1):lower():find(\"[aeiouy]+\") ~= -1 and word:sub(-string.len(word),\
    \ -1):lower() or \"\"\n\telse\n\t\treturn \"\"\n\tend\nend", "  local vowels =\
    \ {'a','e','i','o','u','A','E','I','O','U'}\n  local i = #word-1\n  for j = i+1,#word\
    \ do\n    if word[i] == 'a' or word[i] == 'e' or word[i] == 'i' or word[i] ==\
    \ 'o' or word[i] == 'u' then\n      local dist = #vowels\n      if i ~= j then\n\
    \        dist = dist + #vowels - #vowels[i]\n        if word[j] == word[i] then\n\
    \          dist = dist + 1\n        end\n      end\n      if dist ~= #vowels then\n\
    \        return vowels[dist]\n      end\n    end\n  end\n  return \"\"\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
