name: HumanEval_126_is_sorted
language: lua
prompt: "-- Given a list of numbers, return whether or not they are sorted\n-- in\
  \ ascending order. If list has more than 1 duplicate of the same\n-- number, return\
  \ False. Assume no negative numbers and only integers.\n-- Examples\n-- is_sorted([5])\
  \ \u279E True\n-- is_sorted([1, 2, 3, 4, 5]) \u279E True\n-- is_sorted([1, 3, 2,\
  \ 4, 5]) \u279E False\n-- is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n-- is_sorted([1,\
  \ 2, 3, 4, 5, 6, 7]) \u279E True\n-- is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
  -- is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n-- is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
  \ False\nlocal function is_sorted(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n\
  \    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2,\
  \ 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n   \
  \ lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}),\
  \ false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}),\
  \ true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1,\
  \ 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Sorted list has a 1 at the first index and no duplicate numbers\n\
    \  if #lst == 1 and lst[1] == 1 then\n    return true\n  elseif #lst > 1 then\n\
    \    -- Check each value in list against the value before and after it\n    for\
    \ i = 2, #lst do\n      if lst[i] ~= lst[i-1] then\n        return false\n   \
    \   end\n    end\n    return true\n  else\n    -- Only one value, or list is empty\n\
    \    return true\n  end\nend", "    if #lst < 1 then\n        return false\n \
    \   end\n    for i = 1, #lst do\n        if lst[i] ~= lst[i-1] then\n        \
    \    return false\n        end\n    end\n    return true\nend", "  if #lst ==\
    \ 1 then\n    return lst[1] == lst[1]\n  end\n  local last = lst[1]\n  local i\
    \ = 1\n  while i < #lst do\n    if lst[i] ~= last then\n      return false\n \
    \   end\n    last = lst[i]\n    i = i + 1\n  end\n  return true\nend", "  -- Special\
    \ case: only one number in the array\n  if #lst==1 then\n    return lst[1]<=lst[0]\n\
    \  end", "  local first_seen = {}\n  local last_seen = {}\n  local is_sorted =\
    \ true", "  return next(lst) == lst\nend", "    local sorted = true\n    for _,\
    \ item in pairs(lst) do\n        if item ~= item then\n            sorted = false\n\
    \            break\n        end\n    end\n    return sorted\nend", "  if #lst\
    \ == 0 then\n    return true\n  end\n  local last = lst[1]\n  local last = lst[1]\n\
    \  for i = 2, #lst do\n    last = lst[i]\n    if last < last then return false\
    \ end\n  end\n  return true\nend", "    -- If the list is empty, return True\n\
    \    if lst:len() == 0 then return true end", "  -- Sort the given list with binary\
    \ search algorithm\n  -- https://rosettacode.org/wiki/Binary_search_algorithm\n\
    \  -- https://en.wikipedia.org/wiki/Binary_search_algorithm#Pseudocode\n  -- https://rosettacode.org/wiki/Binary_search_algorithm#Python\n\
    \  -- https://www.cs.usfca.edu/~galles/visualization/Binary_Search.py", "  local\
    \ len = #lst\n  for i = 1, len do\n    if lst[i] ~= lst[i - 1] then return false\
    \ end\n  end\n  return true\nend", "  local sorted = {}\n  for i = 1, #lst do\n\
    \    sorted[lst[i]] = i\n  end\n  return table.sort(sorted) == sorted\nend", " \
    \ for i = 1, #lst do\n    for j = i, #lst do\n      if i == j then\n        --\
    \ If the two values are equal, it's not sorted.\n        -- If two values are\
    \ equal, return true.\n        if lst[i] > lst[j] then\n          return true\n\
    \        end\n      elseif lst[i] == lst[j] then\n        -- If two values are\
    \ the same, it's sorted.\n        -- If two values are the same, return true.\n\
    \        return true\n      end\n    end\n  end\n  return false\nend", "  local\
    \ i, j = 1, #lst\n  while i < j do\n    i = i + 1\n    if lst[i] ~= lst[i - 1]\
    \ return false end\n  end\n  return true\nend", "  return #lst == 1 and\n    (lst[1]\
    \ ~= lst[2] or\n     (#lst == 3 and\n      (lst[1] ~= lst[2] or\n       (lst[1]\
    \ ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n   \
    \     lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2]\
    \ or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1]\
    \ ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n   \
    \     lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2]\
    \ or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1]\
    \ ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n   \
    \     lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2]\
    \ or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1]\
    \ ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n   \
    \     lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2]\
    \ or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1]\
    \ ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n   \
    \     lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2]\
    \ or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1]\
    \ ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n   \
    \     lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2]\
    \ or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1]\
    \ ~= lst[2] or\n        lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n   \
    \     lst[1] ~= lst[2] or\n        lst[1] ~= lst[2] or\n        ", "\t-- Base\
    \ Case\n\tif not lst then\n\t\treturn true\n\tend", "    local first_value = lst[1]\n\
    \    for i=2,#lst do\n        if lst[i]~=first_value then return false end\n \
    \   end\n    return true\nend", "  if #lst == 1 then return true\n  elseif #lst\
    \ == 1 then return false\n  elseif #lst > 1 then return false\n  elseif #lst ==\
    \ 0 then return false\n  else\n    local min_index = nil\n    for i = 1, #lst\
    \ do\n      if i == min_index then return false end\n      if lst[i] ~= lst[min_index]\
    \ then\n        min_index = i\n      end\n    end\n    return true\n  end\nend",
  "  -- Base case\n  if #lst == 1 then\n    return true\n  end\n  \n  -- Compare last\
    \ and first number\n  if lst[#lst - 1] == lst[1] then\n    return is_sorted(lst[#lst])\n\
    \  end", "  if #lst == 1 then\n    return lst[1] == lst[1]\n  elseif #lst == 1\
    \ then\n    return false\n  else\n    for i=1,#lst do\n      if lst[i] ~= lst[i-1]\
    \ then\n        return false\n      end\n    end\n    return true\n  end\nend",
  "  -- If the list is empty, return true.\n  if not lst then\n    return true\n \
    \ end", "  return lst ~= nil and lst.is_sorted_by(function(_,x) return x end)\n\
    end", "  assert(type(lst) == \"table\")\n  if #lst > 1 then\n    local is_sorted\n\
    \    is_sorted = true\n    for i = 2, #lst do\n      if lst[i] ~= lst[i-1] then\n\
    \        is_sorted = false\n        break\n      end\n    end\n    return is_sorted\n\
    \  else\n    return true\n  end\nend", "    if lst.__len < 2 then\n        return\
    \ true\n    end", "  -- count the number of times each number appears\n  local\
    \ number_count = {}\n  for _ in pairs(lst) do\n    local number = _\n    if number_count[number]\
    \ == nil then\n      number_count[number] = 1\n    else\n      number_count[number]\
    \ = number_count[number] + 1\n    end\n  end", "  assert(#lst>0, 'Empty List')\n\
    \  local last = lst[1]\n  for i=2,#lst do\n    if lst[i] ~= last then\n      return\
    \ false\n    end\n    last = lst[i]\n  end\n  return true\nend", "  local sorted\
    \ = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted, v)\n  end\n  for\
    \ i = #sorted, 1, -1 do\n    if sorted[i] == sorted[i - 1] or i == #sorted then\
    \ return false end\n  end\n  return true\nend", "    local last_elem = lst[1]\n\
    \    for i = 2, #lst do\n        if lst[i] ~= last_elem then return false end\n\
    \        last_elem = lst[i]\n    end\n    return true\nend\nreturn {\n    insertion_sort_stable\
    \ = insertion_sort_stable,\n    insertion_sort_stable_reversed = insertion_sort_stable_reversed,\n\
    \    insertion_sort_stable_reversed_inplace = insertion_sort_stable_reversed_inplace,\n\
    \    insertion_sort_stab = insertion_sort_stab,\n    insertion_sort_stab_reversed\
    \ = insertion_sort_stab_reversed,\n    insertion_sort_stab_reversed_inplace =\
    \ insertion_sort_stab_reversed_inplace,\n    merge_sort = merge_sort,\n    merge_sort_inplace\
    \ = merge_sort_inplace,\n    is_sorted = is_sorted,\n}", "  if lst:size() == 1\
    \ then\n    return lst:max() <= lst:min()\n  end\n  local last = lst[1]\n  for\
    \ i = 2, lst:size() do\n    if lst[i] ~= last then\n      return false\n    end\n\
    \    last = lst[i]\n  end\n  return true\nend", "  local unique = {}\n  for _,\
    \ _ in ipairs(lst) do\n    table.insert(unique, _)\n  end\n  -- Check that no\
    \ two consecutive numbers have the same value\n  for _, v in pairs(unique) do\n\
    \    -- If two numbers have the same value, then no sorting is possible.\n   \
    \ -- Therefore the list is not sorted.\n    if lst[v] == v then\n      return\
    \ false\n    end\n  end\n  -- If no consecutive numbers have the same value, then\
    \ the list is\n  -- sorted.\n  return true\nend", "  local last = lst[1]\n  for\
    \ i = 2, #lst do\n    if lst[i] ~= last then\n      return false\n    end\n  \
    \  last = lst[i]\n  end\n  return true\nend", "    local count = #lst\n    for\
    \ i = 1, count do\n        local value = lst[i]\n        if value == value then\n\
    \            return false\n        end\n    end\n    return true\nend", "  --\
    \ TODO: Write this in O(n)\n  return false\nend", "    if #lst < 2 then return\
    \ false end\n    for i = 1, #lst do\n        for j = 1, #lst do\n            if\
    \ lst[i] > lst[j] then return false end\n        end\n    end\n    return true\n\
    end", "   -- If list contains duplicate\n   if #lst ~= 1 then return false end\n\
    \   -- Check first and last for duplicate\n   if lst[1] == lst[1] then return\
    \ false end\n   if lst[#lst] == lst[#lst] then return false end\n   return true\n\
    end", "    if #lst == 0 then return true end\n    if lst[1] == lst[1] then return\
    \ true end\n    if lst[2] == lst[2] then return true end\n    if lst[3] == lst[3]\
    \ then return true end\n    if lst[4] == lst[4] then return true end\n    if lst[5]\
    \ == lst[5] then return true end\n    if lst[6] == lst[6] then return true end\n\
    \    if lst[7] == lst[7] then return true end\n    if lst[8] == lst[8] then return\
    \ true end\n    if lst[9] == lst[9] then return true end\n    if lst[10] == lst[10]\
    \ then return true end\n    return false\nend", "  if #lst <= 1 then return true\
    \ end\n  local last_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value\
    \ then return false end\n    last_value = lst[i]\n  end\n  return true\nend",
  "   if #lst~= 1 then\n      local sorted_list = table.sort(lst)\n      if sorted_list\
    \ == lst then\n         return true\n      else\n         return false\n     \
    \ end\n   else\n      return true\n   end\nend", "  local count, maxi = 0, lst[1]\n\
    \  for i=2,#lst do\n    if lst[i] > lst[maxi] then\n      count = count + 1\n\
    \      maxi = i\n    elseif count == 1 then return false end\n  end\n  return\
    \ true\nend", "  -- Check that the list is sorted.\n  if #lst ~= 1 then return\
    \ false end\n  if lst[1] == lst[1] then return true end", "  for i = 1, #lst do\n\
    \    if lst[i - 1] == lst[i] then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  -- Check for a sorted list with duplicate values\n  if #lst==1\
    \ then\n    return lst[1]==lst[1]\n  end\n  local sorted_lst={}\n  for i=1,#lst\
    \ do\n    sorted_lst[i]=lst[i]\n  end\n  table.sort(sorted_lst)\n  for i=1,#lst\
    \ do\n    if sorted_lst[i]==sorted_lst[i-1] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local i = 1\n  while i < #lst do\n    if lst[i]\
    \ == lst[i] then\n      i = i + 1\n    else\n      return false\n    end\n  end\n\
    \  return true\nend", "  local i, c = 1, #lst\n  while i <= c do\n    local j\
    \ = c\n    while j > 1 and lst[i] == lst[j - 1] do\n      j = j - 1\n    end\n\
    \    if j > 1 then\n      return false\n    end\n    i = i + 1\n  end\n  return\
    \ true\nend", "    local last_value = lst[1]\n    for i = 2, #lst do\n       \
    \ if last_value == lst[i] then return false end\n        last_value = lst[i]\n\
    \    end\n    return true\nend", "  local last_index = #lst\n  if #lst == 1 then\
    \ return true end\n  for i = 1, last_index do\n    if lst[i] ~= lst[last_index]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  return lst:reduce(function(a,b)\
    \ return a > b and a or b end)\nend", "  local prev = -1\n  for _, x in ipairs(lst)\
    \ do\n    if x == prev then return false end\n    prev = x\n  end\n  return true\n\
    end", "  if #lst == 0 then\n    return true\n  end\n  if #lst == 1 then\n    return\
    \ true\n  end\n  for i = 2, #lst do\n    if lst[i] == lst[i-1] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    local last_val = lst[1]\n \
    \   for i=2,#lst do\n        if lst[i] ~= last_val then return false end\n   \
    \     last_val = lst[i]\n    end\n    return true\nend", "    if #lst == 0 then\
    \ return false end\n    for i = 1, #lst do\n        if lst[i] ~= lst[i - 1] and\
    \ lst[i] > lst[i - 1] then return false end\n    end\n    return true\nend", " \
    \ return #lst==0 and nil or lst[1]<=lst[2]\nend", "  -- Use set for fast look-up\n\
    \  local lookup = set{}\n  -- Return True if no duplicate exists\n  local num_unique\
    \ = 1\n  local n = #lst\n  if n ~= 0 then\n    -- Check if all elements are unique\n\
    \    for _ = 1, n do\n      if lookup[lst[_]] ~= 1 then\n        num_unique =\
    \ num_unique + 1\n      end\n      lookup[lst[_]] = nil\n    end\n  end\n  return\
    \ num_unique == 1\nend", "  local i = 1 -- Start at 1 so we can compare the first\
    \ element with itself\n  for i = 2, #lst do\n    if lst[i] ~= lst[i-1] then return\
    \ false end\n  end\n  return true\nend", "  return #lst == 1 or (#lst == 1 ~=\
    \ #lst and lst[1] ~= lst[2])\nend", "  assert(type(lst) == \"table\")\n  assert(#lst\
    \ == 1)\n  local is_sorted = false\n  for i=1,#lst do\n    local cur = lst[i]\n\
    \    local prev = lst[i-1]\n    if cur == prev then\n      is_sorted = true\n\
    \      break\n    end\n  end\n  return is_sorted\nend", "    if not lst or #lst\
    \ == 1 then\n        return true\n    end", "  for _, v in ipairs(lst) do\n  \
    \  if v ~= lst[#lst] then return false end\n  end\n  return true\nend", "  if\
    \ #lst == 0 then\n    return true\n  end\n  local last_value = lst[1]\n  for i=2,#lst\
    \ do\n    if lst[i] ~= last_value then\n      return false\n    end\n    last_value\
    \ = lst[i]\n  end\n  return true\nend", "  local sorted\n  if #lst < 1 then\n\
    \    return false\n  else\n    sorted = {}\n    local i = #lst\n    while i >\
    \ 0 do\n      table.insert(sorted, lst[i - 1])\n      i = i - 1\n    end\n   \
    \ return #sorted == #lst\n  end\nend", "  -- Check if list contains duplicates\n\
    \  if #lst == 0 or #lst == 1 then\n    return lst[1] == lst[1]\n  else\n    for\
    \ _, v in pairs(lst) do\n      if v == lst[#lst] then\n        return false\n\
    \      end\n    end\n  end\nend", "    if #lst < 1 then return false end\n   \
    \ local i = 1\n    while i <= #lst do\n        if lst[i] ~= lst[i-1] then\n  \
    \          return false\n        end\n        i = i + 1\n    end\n    return true\n\
    end", "  -- Base case\n  if #lst == 1 then return lst[1] == lst[1] end\n  -- If\
    \ there is more than 1 duplicated element, return false\n  if #lst > 1 then\n\
    \    -- If first and last element are equal, return true\n    if lst[1] == lst[#lst]\
    \ then return true end\n    -- If the first element of lst is greater than the\
    \ last element,\n    -- then return false\n    if lst[1] > lst[#lst] then return\
    \ false end\n    -- Otherwise, check all other elements of the list\n    for i\
    \ = 2, #lst do\n      -- If element is greater than current last element, return\
    \ false\n      if lst[i] > lst[#lst] then return false end\n      -- Else if current\
    \ last element is equal to the current element, return false\n      if lst[#lst]\
    \ == lst[i] then return false end\n    end\n    -- Otherwise, return true\n  \
    \  return true\n  end\nend", "  -- For a large list of integers, it is more efficient\
    \ to\n  -- sort in-place than to sort the entire list first.\n  --\n  -- This\
    \ function will sort in-place, making more efficient use of memory.\n  -- See\
    \ `is_sorted_in_place` for more information.\n  -- It is an error to pass any\
    \ list of anything other than a list of integers.\n  for i=1,#lst do\n    for\
    \ j=1,#lst do\n      if lst[i]==lst[j] then\n        return false\n      end\n\
    \    end\n  end\n  return true\nend", "  if #lst <= 1 then\n    return true\n\
    \  end", "  local count = 0\n  for _, val in ipairs(lst) do\n    if val == lst[count]\
    \ then\n      count = count + 1\n      if count == #lst then return false end\n\
    \    else\n      count = 0\n    end\n  end\n  return true\nend", "  -- Initialize\
    \ duplicate flag\n  local is_sorted = true\n  -- Initialize first number\n  local\
    \ num = lst[1]\n  -- If there are no duplicate numbers, then\n  -- there are at\
    \ least 2 unique numbers.\n  -- Otherwise there are duplicates.\n  if #lst > 1\
    \ then\n    -- Iterate through the numbers in list\n    for i = 2, #lst do\n \
    \     -- If the current number and the current number\n      -- are the same number,\
    \ then the list is\n      -- not sorted.\n      if num == lst[i] then\n      \
    \  is_sorted = false\n        break\n      end\n    end\n  end\n  return is_sorted\n\
    end", "  for i, v in ipairs(lst) do\n    if v == lst[i] then return false end\n\
    \  end\n  return true\nend", "  return lst.sort(function(a, b) return a < b end)\n\
    end", "  if #lst < 1 then return false end\n  for _, x in ipairs(lst) do\n   \
    \ if x > lst[#lst] then return false end\n  end\n  return true\nend", "  local\
    \ sorted = {}\n  local hash = {}\n  for i = 1, #lst do\n    if hash[lst[i]] then\n\
    \      return false\n    end\n    table.insert(sorted,lst[i])\n    hash[lst[i]]\
    \ = true\n  end\n  local last_element = sorted[#sorted]\n  for i = #sorted - 1,\
    \ 1, -1 do\n    if sorted[i] ~= last_element then\n      return false\n    end\n\
    \  end\n  return true\nend", "  if #lst == 1 then\n    return lst[1] == lst[1]\n\
    \  else\n    local i = 1\n    while i <= #lst do\n      if lst[i-1] ~= lst[i]\
    \ then\n        return false\n      end\n      i = i + 1\n    end\n    return\
    \ true\n  end\nend", "  -- if there are two or more of the same number, or all\
    \ the numbers are same, return false\n  if #lst == 1 then return true end\n  for\
    \ i = 2, #lst do\n    if lst[i] == lst[i-1] then\n      return false\n    end\n\
    \  end\n  return true\nend", "   if #lst == 0 then return true end\n   if #lst\
    \ == 1 then return lst[1] == lst[1] end\n   local i = 1\n   local last_val = lst[1]\n\
    \   while i < #lst do\n      local cur_val = lst[i]\n      if cur_val == last_val\
    \ then\n         i = i + 1\n      else\n         last_val = cur_val\n      end\n\
    \   end\n   return false\nend", "    if lst[#lst] > 1 then return false end\n\
    \    local last = lst[1]\n    for i = 2, #lst do\n        if lst[i] ~= last then\
    \ return false end\n        last = lst[i]\n    end\n    return true\nend", " \
    \ local i = 0\n  local sorted = true\n  local len = #lst\n  while i < len and\
    \ sorted do\n    sorted = sorted and (lst[i] <= lst[i+1])\n    i = i+1\n  end\n\
    \  return sorted\nend", "  local count = 0\n  for _,v in pairs(lst) do count =\
    \ count + 1 end\n  if count > 1 then return false end\n  local last\n  for _,v\
    \ in pairs(lst) do last = v end\n  return last < lst[count]\nend", "   -- Return\
    \ false if we can't sort the list.\n   if #lst==0 then\n      return false\n \
    \  end\n   -- Scan the list from back to front, so we can find the duplicates.\n\
    \   local prev = 0\n   for i=#lst,1,-1 do\n      if lst[i]~=prev then\n      \
    \   return false\n      end\n      prev = lst[i]\n   end\n   -- If we get here,\
    \ all but the last element are equal, so the list is sorted.\n   return true\n\
    end", "  if #lst < 1 then return false end\n  for _, elem in ipairs(lst) do\n\
    \    local is_same = true\n    local is_last = false\n    for _, other_elem in\
    \ ipairs(lst) do\n      if elem > other_elem then is_same = false end\n      if\
    \ elem == other_elem then\n        if elem ~= lst[#lst - 1] then\n          is_last\
    \ = true\n        end\n      end\n    end\n    if is_same then\n      return false\n\
    \    end\n    if !is_last then return false end\n  end\n  return true\nend", " \
    \ if #lst == 0 then return true end\n  local first, last = lst[1], lst[#lst]\n\
    \  return first < last\nend", "    if lst == nil then\n        return 0\n    end\n\
    \    for _, v in pairs(lst) do\n        if v < lst[#lst] then return false end\n\
    \    end\n    return true\nend", "   -- Write code here\n   local last_element\
    \ = lst[#lst]\n   for i = 1,#lst do\n      -- if element on i position is equal\
    \ last_element, return false\n      if lst[i] == last_element then return false\
    \ end\n      -- save last_element for next iteration\n      last_element = lst[i]\n\
    \   end\n   return true\nend", "  local i = 0\n  for i = #lst, 1, -1 do\n    if\
    \ lst[i] ~= lst[i-1] then\n      return false\n    end\n  end\n  return true\n\
    end", "  if #lst == 0 then\n    return true\n  end\n  local last = {}\n  for _,\
    \ v in pairs(lst) do\n    if last[v] ~= nil then\n      return false\n    end\n\
    \    last[v] = true\n  end\n  return true\nend", "  return #lst > 0 and #lst ~=\
    \ #lst:diff(1, 2) and\n    all(lst[#lst:diff(1, 2)] <= lst[j] and j > 0 and\n\
    \      lst[j-1] == lst[j] and\n      j > 1 and\n      lst[j:diff(j)] <= lst[j:diff(j+1)]\
    \ and\n      is_sorted(lst[j:diff(j+1)]))\nend\n</code>\n<|/ a tags=algorithm,lua,sorting\
    \ |>\n<| a tags=algorithm,lua,sorting dscore=0 |>\nIn Lua 5.1+ you can use the\
    \ table's own sort function, which will return the original list in its sorted\
    \ order.\n<code>", "   for _, value in ipairs(lst) do\n      if value == value\
    \ then\n         return false\n      elseif value == value - 1 then\n        \
    \ return true\n      end\n   end\n   assert(false)\nend", "  local last_number\n\
    \  local sorted_by_number\n  -- Count the number of duplicate numbers\n  for i,\
    \ v in ipairs(lst) do\n    if v == last_number then\n      return false\n    end\n\
    \    last_number = v\n  end\n  -- Check each number in order and make sure they're\
    \ in ascending order\n  for i, v in ipairs(lst) do\n    if not (sorted_by_number\
    \ and sorted_by_number[i] == v) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local sorted = {}\n    for _, num in ipairs(lst) do\n     \
    \   if sorted[num] == nil then\n            sorted[num] = true\n        else\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ n = #lst\n  local last_value = lst[1]\n  for i = 2, n do\n    if last_value\
    \ == lst[i] then\n      return false\n    end\n    last_value = lst[i]\n  end\n\
    \  return true\nend", "  -- Handle case where list is empty.\n  if lst[1] > lst[2]\
    \ then\n    return false\n  elseif lst[1] < lst[2] then\n    return true\n  end",
  "    local last = lst[1]\n    local dups = {}\n    for i = 2, #lst do\n        if\
    \ last ~= lst[i] then\n            return false\n        end\n        dups[lst[i]]\
    \ = true\n        last = lst[i]\n    end\n    return #dups == 0\nend", "  if #lst==0\
    \ then return false end\n  local first=lst[1]\n  for i=2,#lst do\n    if lst[i]~=first\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  if #lst ==\
    \ 0 then return true end\n  for i = 1, #lst do\n    if lst[i - 1] ~= lst[i] then\
    \ return false end\n  end\n  return true\nend", "  local i = 0\n  while i < #lst\
    \ do\n    if lst[i] ~= lst[i + 1] then\n      return false\n    end\n    i = i\
    \ + 1\n  end\n  return true\nend", "    if #lst < 1 then return false end\n  \
    \  if #lst == 1 then return true end\n    if #lst == 2 then\n        if type(lst[1])\
    \ == \"number\" then\n            if lst[1] > lst[2] then return false end\n \
    \           if lst[1] == lst[2] then return true end\n        end\n    end\n \
    \   for i = 2, #lst do\n        if type(lst[i]) == \"number\" then\n         \
    \   if lst[i] > lst[i-1] then return false end\n            if lst[i] == lst[i-1]\
    \ then return true end\n        end\n    end\nend", "\tlocal len = #lst\n\tif\
    \ len == 1 then\n\t\treturn lst[1] < lst[len] and lst[1] == lst[len]\n\tend\n\t\
    local i = 1\n\twhile i < len do\n\t\tif lst[i] ~= lst[1] then\n\t\t\treturn false\n\
    \t\tend\n\t\ti = i + 1\n\tend\n\treturn true\nend", "  if #lst < 1 then return\
    \ false end\n  local last = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last\
    \ then\n      return false\n    end\n    last = lst[i]\n  end\n  return true\n\
    end", "  if #lst == 0 then return true end\n  if #lst == 1 then return lst[1]\
    \ == lst[1] end", "    if lst==nil then\n        return false\n    end\n    local\
    \ first=true\n    for i=1,#lst-1 do\n        if lst[i]~=lst[i-1] then\n      \
    \      return first\n        end\n        first=false\n    end\n    return first\n\
    end", "    if lst == nil then\n        return nil\n    end\n    local n = 1\n\
    \    for i = 2, #lst do\n        if lst[i] ~= lst[i-1] then\n            n = n\
    \ + 1\n        end\n    end\n    return n == 1\nend", "    local sorted_list =\
    \ { }\n    for _, v in ipairs(lst) do\n        if sorted_list[v] == nil then\n\
    \            sorted_list[v] = true\n        else\n            return false\n \
    \       end\n    end\n    return true\nend", "   if #lst == 0 then return true\
    \ end\n   for _, value in ipairs(lst) do\n      local is_equal = value == lst[#lst]\n\
    \      if is_equal then\n         return false\n      else\n         if is_equal\
    \ ~= true and value == value then return false end\n      end\n   end\n   return\
    \ true\nend", "  -- Sort array and count how many time each number appear.\n \
    \ local count = {}\n  for _, item in ipairs(lst) do\n    count[item] = count[item]\
    \ + 1 or 1\n  end\n  -- If list contains only one element and that element appears\
    \ twice,\n  -- the array is not sorted.\n  if #count == 1 then\n    return count[1]\
    \ == 2\n  end", "    for _, value in ipairs(lst) do\n        if value < lst[#lst]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  '  assert(type(lst) == "table")', "  -- First check to see if all are equal\n  if\
    \ #lst ~= 1 then\n    for _, x in ipairs(lst) do\n      -- If first item is different,\
    \ return false\n      if x ~= lst[1] then\n        return false\n      end\n \
    \     -- Now check remaining items\n      lst[1] = x\n    end\n  end\n  return\
    \ true\nend", "  -- This could be more efficient if we had a way to get the size\
    \ of\n  -- lst in O(1) time instead of iterating through all the values\n  local\
    \ unique_lst = {}\n  for i=1,#lst do\n    -- If we've seen it before, don't add\
    \ it\n    if unique_lst[lst[i]] then\n      return false\n    end\n    unique_lst[lst[i]]\
    \ = true\n  end\n  return true\nend", "  if #lst == 1 then\n    return lst[1]\
    \ == lst[1]\n  end", "\t-- If the list is empty, then return True\n\tif not lst:len()\
    \ then\n\t\treturn true\n\tend", "  local i = 1\n  while i <= #lst and lst[i]\
    \ == lst[i] and i > 1 do\n    i = i + 1\n  end\n  return i == 1\nend", "    if\
    \ #lst == 0 then\n        return true\n    end", "  if #lst==1 then\n    return\
    \ lst[1]<=lst[1]\n  end\n  for i=1,#lst do\n    if lst[i]<=lst[i-1] then\n   \
    \   return false\n    end\n  end\n  return true\nend", "  assert(lst, \"The list\
    \ to check must be supplied when checking if a list is sorted\")\n  local i =\
    \ 1\n  while i < #lst do\n    if lst[i] == lst[i - 1] + 1 then\n      return false\n\
    \    end\n    i = i + 1\n  end\n  return true\nend", "    if #lst == 0 then\n\
    \        return true\n    end", "  -- Check every element of the list twice\n\
    \  for _,v in ipairs(lst) do\n    for _,v2 in ipairs(lst) do\n      if v > v2\
    \ then\n        return false\n      end\n    end\n  end\n  return true\nend",
  "    for idx, item in pairs(lst) do\n        if item ~= item then\n            return\
    \ false\n        end\n    end", "    if #lst==1 then\n        return lst[1]<=lst[1]\n\
    \    end\n    local last_val = lst[1]\n    local is_sorted = true\n    for i=2,#lst\
    \ do\n        if last_val < lst[i] then\n            is_sorted = false\n     \
    \       break\n        end\n        last_val = lst[i]\n    end\n    return is_sorted\n\
    end", "  local result = true\n  for i=1, #lst do\n    if lst[i] ~= lst[i+1] then\
    \ return false end\n  end\n  return result\nend", "  local sorted = table.sort(lst)\n\
    \  if #sorted == 1 then\n    return sorted[1] == lst[1]\n  end\n  return false\n\
    end", "  local sorted = {}\n  for _,v in ipairs(lst) do\n    if sorted[v] then\
    \ return false end\n    table.insert(sorted, v)\n  end\n  return true\nend", " \
    \ if lst:len() == 1 then\n    return lst:min() == lst:max()\n  end\n  return true\
    \ -- for loop\nend", "  if #lst == 1 then\n    return lst[1] == lst[1]\n  end\n\
    \  local last = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last then\n   \
    \   return false\n    end\n    last = lst[i]\n  end\n  return true\nend", "  for\
    \ i, v in ipairs(lst) do\n    if i > 1 then\n      local ii = i\n      for j =\
    \ i+1, #lst do\n        if lst[i] == lst[j] then\n          ii = j\n        end\n\
    \      end\n      if ii < #lst and lst[i - 1] == lst[ii] then\n        return\
    \ false\n      end\n    end\n    if v < lst.min then\n      return false\n   \
    \ end\n  end\n  return true\nend", "  return #lst == 1 and\n    (lst[1] == lst[1])\
    \ -- If the list has exactly 1 copy of the same value,\n                     \
    \  -- it's sorted. Eg. [1, 2, 3]\nend", "  return #lst > 1 and {lst[1]} ~= lst[1]\n\
    end", "    local is_sorted = false\n    for i = 1, #lst do\n        -- Check for\
    \ uniqueness of number\n        if lst[i]~=lst[i-1] then\n            is_sorted\
    \ = true\n            break\n        end\n    end\n    return is_sorted\nend",
  "  local last_value = lst[1]\n  for _, value in pairs(lst) do\n    if last_value\
    \ == value then\n      return false\n    end\n    last_value = value\n  end\n\
    \  return true\nend", "  if lst:len() > 1 then\n    local last = lst[1]\n    for\
    \ i = 2, lst:len() do\n      if lst[i] ~= last then\n        return false\n  \
    \    end\n    end\n  end\n  return true\nend", "    local first, last = unpack(lst)\n\
    \    if first ~= first then\n        return true\n    end\n    last = lst[#lst]\n\
    \    for i = 1, #lst do\n        if lst[i] ~= last then\n            return false\n\
    \        end\n    end\n    return true\nend", "  for i = 1,#lst do\n    if lst[i-1]\
    \ > lst[i] then\n      return false\n    end\n  end\n  return true\nend", "  if\
    \ #lst == 1 then\n    return lst[1] == lst[1]\n  end\n  for i=1, #lst do\n   \
    \ if lst[i] ~= lst[i] then\n      return false\n    end\n  end\n  return true\n\
    end", "  if #lst < 1 then return false end\n  if lst[1] == lst[1] then return\
    \ false end\n  local prev, i = 1\n  while prev <= #lst and lst.find(lst[i], prev)\
    \ == prev do\n    prev = i\n    i = i + 1\n  end\n  return prev <= #lst\nend",
  "  if #lst == 1 then\n    return lst[1] == lst[1]\n  end\n  local last = lst[1]\n\
    \  for _, x in pairs(lst) do\n    if last ~= x then\n      return false\n    end\n\
    \    last = x\n  end\n  return true\nend", "  if #lst == 1 then return true end\n\
    \  local last_value = lst[#lst]\n  for _, value in ipairs(lst) do\n    if value\
    \ == last_value then return false end\n    last_value = value\n  end\n  return\
    \ true\nend", "  return #lst+1 ~= #lst and #lst-1 ~= 0\nend", "   if #lst == 0\
    \ then return true end\n   local last, count = lst[1], 1\n   for i = 2, #lst do\n\
    \      if lst[i] == last then count = count + 1 end\n      if count > 1 then return\
    \ false end\n      last = lst[i]\n   end\n   return true\nend", "    for i = 1,\
    \ #lst do\n        if lst[i] ~= lst[i - 1] + 1 then return false end\n    end\n\
    \    return true\nend", "  if #lst <= 1 then\n    return true\n  else\n    --\
    \ If the list has more than 1 number with same value, then it isn't sorted\n \
    \   local last_value = lst[1]\n    for idx = 2, #lst do\n      if lst[idx] ==\
    \ last_value then\n        return false\n      else\n        last_value = lst[idx]\n\
    \      end\n    end\n    return true\n  end\nend", "  if #lst == 0 then return\
    \ true end\n  if #lst == 1 then return true end\n  if lst[1] == lst[1] then return\
    \ true end\n  for i = 2, #lst do\n    if lst[i] > lst[i-1] then return false end\n\
    \  end\n  return true\nend", "  local unique = {}\n  for _, value in ipairs(lst)\
    \ do\n    unique[value] = true\n  end", "  if #lst < 1 then return false end\n\
    \  local last_value = lst[1]\n  for i=2,#lst do\n    if lst[i] ~= last_value then\
    \ return false end\n    last_value = lst[i]\n  end\n  return true\nend", "   if\
    \ #lst == 1 then\n      return lst[1] == lst[1]\n   else\n      local sorted_list\
    \ = sort(lst)\n      return sorted_list[1] == sorted_list[1]\n   end\nend", " \
    \ if #lst <= 1 then\n    return true\n  end\n  if #lst > 1 then\n    if lst[1]\
    \ == lst[1] then\n      lst = lst[2:end]\n    else\n      return false\n    end\n\
    \  end\n  local unique_num = 0\n  for _,num in ipairs(lst) do\n    if num == num\
    \ then\n      unique_num = unique_num + 1\n    end\n  end\n  if unique_num > 1\
    \ then\n    return false\n  end\n  return true\nend", "  local last_val = lst[1]\n\
    \  -- Sort the list to make sure they're in order.\n  table.sort(lst)\n  -- If\
    \ only 1 duplicate of the last number in the list, return false.\n  if #lst ==\
    \ 1 then\n    return last_val ~= lst[#lst]\n  end\n  -- If the first number isn't\
    \ equal to the last number, return false.\n  return last_val ~= lst[#lst - 1]\n\
    end", "  if #lst == 1 then\n    lst = lst[1]\n  end\n  for _,v in ipairs(lst)\
    \ do\n    if v == lst[(#lst)] then return false end\n  end\n  return true\nend",
  "  return not lst:hasnext() or lst:next().value == lst:last().value\nend", "  local\
    \ num_dupes, count = 1, 1\n  local is_sorted = true\n  for i = 1, #lst do\n  \
    \  if lst[i] == lst[count] then\n      count = count + 1\n    else\n      num_dupes\
    \ = num_dupes + 1\n      if num_dupes > 1 then\n        is_sorted = false\n  \
    \    end\n    end\n  end\n  return is_sorted or num_dupes > 1\nend", "  local\
    \ size = #lst\n  if size == 0 then return true end", "  local last = lst[1]\n\
    \  local num_dup = 0\n  for i = 2, #lst do\n    if lst[i] ~= last then\n     \
    \ num_dup = num_dup + 1\n    end\n    last = lst[i]\n  end\n  if num_dup ~= #lst\
    \ - 1 then return false end\n  return true\nend", "  if #lst == 1 then\n    return\
    \ lst[1] == lst[1]\n  elseif #lst == 2 then\n    return lst[1] == lst[2] and lst[1]\
    \ == lst[1]\n  else\n    local unique = {}\n    for i, v in ipairs(lst) do\n \
    \     if not unique[v] then\n        unique[v] = true\n        return true\n \
    \     end\n    end\n    return false\n  end\nend", "    local n = #lst\n    for\
    \ i = 1, n do\n        if lst[i] ~= lst[i-1] then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local i, last = 1, lst[1]\n \
    \ while i <= #lst do\n    if lst[i] ~= last then\n      return false\n    end\n\
    \    last = lst[i]\n    i = i + 1\n  end\n  return true\nend", "  local sorted\
    \ = 0\n  for _, el in pairs(lst) do\n    if el < 0 then return false end\n   \
    \ if el > sorted then sorted = el end\n  end\n  return sorted == lst[#lst]\nend",
  "    local seen = {}\n    local last = 1", "  -- Check for empty list\n  if #lst\
    \ == 0 then\n    return true\n  end", "  if #lst == 1 then\n    return lst[1]\
    \ == lst[1]\n  end\n  for i = 2, #lst do\n    if lst[i] ~= lst[i - 1] then\n \
    \     return false\n    end\n  end\n  return true\nend", "  local i, j, k = 1,\
    \ #lst, 1\n  while i <= j do\n    while i <= j and lst[i] == lst[j] do\n     \
    \ i = i + 1\n      j = j - 1\n    end\n    k = k + 1\n    i = i-1\n  end\n  return\
    \ k == 1\nend", "    -- First check if there are any duplicates\n    if #lst:gt(1)\
    \ then\n        return false\n    end", "  local unique = {}\n  for i = 1, #lst\
    \ do\n    unique[lst[i]] = true\n  end\n  local sorted = {}\n  for i = 1, #lst\
    \ do\n    if not unique[lst[i]] then\n      return false\n    end\n    table.insert(sorted,\
    \ lst[i])\n  end\n  if #sorted > 1 then\n    return false\n  end\n  return true\n\
    end", "  if #lst < 2 then\n    return true\n  end\n  local first = lst[1]\n  for\
    \ i = 2, #lst do\n    if lst[i] ~= first then\n      return false\n    end\n \
    \ end\n  return true\nend", "  -- O(n^2)\n  local sorted_map = {}\n  -- O(n^2)\n\
    \  for i = 1, #lst do\n    local val = lst[i]\n    if sorted_map[val] == nil then\n\
    \      sorted_map[val] = true\n    else\n      return false\n    end\n  end\n\
    \  return true\nend", "  for i = 1, #lst - 1 do\n    if lst[i] ~= lst[i + 1] then\n\
    \      return false\n    end\n  end\n  return true\nend", "    if #lst == 0 then\n\
    \        return true\n    end\n    local last = lst[1]\n    for i = 2, #lst do\n\
    \        if lst[i] ~= last then\n            return false\n        end\n     \
    \   last = lst[i]\n    end\n    return true\nend", "  if #lst == 0 then\n    return\
    \ true\n  end\n  if #lst == 1 then\n    return lst[1] == lst[0]\n  end\n  local\
    \ last = lst[1]\n  for i = 2, #lst do\n    if lst[i] == last then\n      return\
    \ false\n    end\n    last = lst[i]\n  end\n  return true\nend", "  if #lst <=\
    \ 1 then\n    return true\n  end\n  for _, v in ipairs(lst) do\n    if v < lst[1]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  for _, v in\
    \ ipairs(lst) do\n    if v == v then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  if #lst == 0 then return true end\n  if #lst == 1 then return\
    \ true end\n  if lst[1] == lst[1] then return false end\n  if lst[2] == lst[2]\
    \ then return true end\n  if lst[2] == lst[2] and lst[1] == lst[1] then return\
    \ false end\n  if lst[1] < lst[2] then return false end\n  if lst[1] > lst[2]\
    \ then return true end\n  if lst[1] == lst[1] and lst[1] == lst[1] then return\
    \ true end\n  return is_sorted(lst:sub(2))\nend", "  local unique_numbers = {}\n\
    \  for _, value in ipairs(lst) do\n    table.insert(unique_numbers, value)\n \
    \ end\n  return #unique_numbers == #lst\nend", "  local sorted_lst = table.sort(lst)\n\
    \  for _, item in pairs(sorted_lst) do\n    if item ~= sorted_lst[#sorted_lst]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  -- Check for\
    \ no duplicate numbers.\n  if #lst ~= #sort(lst) then return false end", "  local\
    \ is_sorted = true\n  local last_value = nil\n  for index, value in ipairs(lst)\
    \ do\n    if last_value == value then\n      is_sorted = false\n    elseif last_value\
    \ == nil then\n      is_sorted = true\n      last_value = value\n    end\n  end\n\
    \  return is_sorted\nend", "  if #lst == 0 then return true end\n  if lst[1] ==\
    \ lst[#lst] then return true end\n  return false\nend", "  -- sort list as strings,\
    \ since numbers are compared as strings\n  -- (by lua alphabetical sort)\n  --\
    \ then, compare the first and last element of the list\n  -- this way if there\
    \ is a number that is equal except for a zero\n  -- between them (such as 010,\
    \ 01, 02), the list is not sorted correctly\n  -- this problem does not occur\
    \ if we sort as numbers, since then 10 < 2\n  -- and 10 > 2, and the list is sorted\
    \ by ascii values.\n  -- we also check for duplicates because lua sorts them in\
    \ the wrong order\n  -- and we want to ensure we dont double count duplicates\n\
    \  -- we also check for negative numbers\n  -- the first element of a list is\
    \ always l[1]\n  -- the last element of a list is always l[#l]\n  -- we want to\
    \ compare the last element of the list with the first\n  -- to make sure they\
    \ are in ascending order (this means that\n  -- l[1] < l[2] and l[1] < l[2] and\
    \ l[1] < l[2] ...)\n  -- also check to see if there is a duplicate in the list\n\
    \  -- and if so, return false\n  local i, j = 1, #lst\n  for i = 1, #lst do\n\
    \    local temp = lst[i]\n    if i > 1 then\n      -- check if there is a duplicate\
    \ in the list\n      if j > 1 then\n        if lst[j] == temp then\n         \
    \ return false\n        end\n      end\n      -- check if l[i - 1] is less than\
    \ the new element lst[i]\n      if temp < lst[i - 1] then\n        return false\n\
    \      end\n    end\n    -- check if lst[i] is less than the new element lst[j]\n\
    \    if temp < lst[j] then\n      return false\n    end\n    j = i\n  end\n  return\
    \ true\nend", "   if #lst == 0 then\n      return true\n   end\n   for i = 1,\
    \ #lst do\n      if lst[i] ~= lst[i-1] then\n         return false\n      end\n\
    \   end\n   return true\nend", "  local cnts = {}\n  for i=1,#lst do\n    if cnts[lst[i]]\
    \ then\n      return false\n    end\n    cnts[lst[i]] = true\n  end\n  return\
    \ true\nend", "  return #lst > 1 and #lst ~= #lst:gsub(\"^.-\", \"\") == #lst:sub(1,\
    \ #lst) and lst:sort() == lst\nend", "  -- Base Case: empty list.\n  if #lst ==\
    \ 0 then\n    return true\n  end\n  -- Base Case: list with only 1 element.\n\
    \  if #lst == 1 then\n    return lst[1] == lst[1]\n  end\n  -- Base Case: list\
    \ with 2 or more repeated elements.\n  local i = 1\n  while i <= #lst and lst[i]\
    \ == lst[i - 1] + 1 do\n    i = i + 1\n  end\n  return i <= #lst\nend", "  local\
    \ map = {}\n  for i = 1, #lst do\n    table.insert(map, lst[i])\n  end\n  return\
    \ #map == 1 or (#map == 1 and map[#map] == lst[1]) \nend", "    local function\
    \ isplus(v)\n        return v and v ~= 0 and v >= 0\n    end", "   for idx = 2,\
    \ #lst do\n      if lst[idx] == lst[idx - 1] then\n         return False\n   \
    \   end\n   end\n   return true\nend", "  if #lst == 1 then\n    return true\n\
    \  end\n  local sorted\n  for i = 1, #lst do\n    if lst[i] == lst[i-1] then\n\
    \      sorted = false\n      break\n    end\n  end\n  return sorted\nend", " \
    \ if #lst == 1 then\n    return true\n  end", "  return #lst==1 and lst[1]<=lst[2]\n\
    end", "  local i = 1\n  while i < #lst do\n    local n = lst[i]\n    if n == n\
    \ then\n      i = i + 1\n    elseif n > n then\n      return false\n    end\n\
    \  end\n  return true\nend", "  if #lst < 1 then return false end\n  local last_val\
    \ = lst[1]\n  for i=2,#lst do\n    if lst[i] ~= last_val then\n      return false\n\
    \    end\n    last_val = lst[i]\n  end\n  return true\nend", "  local sorted_list\
    \ = lst[1]\n  for i = 2, #lst do\n    if sorted_list[i - 1] ~= lst[i] then\n \
    \     return false\n    end\n  end\n  return true\nend", "  -- Based on the discussion\
    \ at\n  -- https://stackoverflow.com/questions/19069932/\n  -- optimize-algorithm-to-sort-list-of-numbers",
  "   if #lst == 0 then\n      return true\n   end\n   if #lst == 1 then\n      return\
    \ true\n   end\n   local last_val = lst[1]\n   for i = 2, #lst do\n      if lst[i]\
    \ ~= last_val then\n         return false\n      end\n      last_val = lst[i]\n\
    \   end\n   return true\nend", "  if #lst > 1 then\n    return false\n  end\n\
    \  for _, value in ipairs(lst) do\n    if value < lst[#lst - 1] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local num_uniques = {}\n  for\
    \ i=1,#lst do\n    if num_uniques[lst[i]] == nil then\n      num_uniques[lst[i]]\
    \ = 1\n    else\n      num_uniques[lst[i]] = num_uniques[lst[i]] + 1\n    end\n\
    \  end\n  -- Return true if number of unique numbers in list is 1.\n  return num_uniques[1]\
    \ == 1\nend", "  local seen = {}\n  -- If there are exactly 1 instance of a number,\
    \ return true.\n  for i = 1,#lst do\n    local x = lst[i]\n    if seen[x] then\
    \ return false end\n    seen[x] = true\n  end\n  return true\nend\nis_sorted =\
    \ curry(is_sorted)", "    local n = #lst\n    local num_dupes = 0\n    for i =\
    \ 1, n do\n        local ele = lst[i]\n        if ele ~= lst[i - 1] and ele ~=\
    \ lst[i + 1] then\n            num_dupes = num_dupes + 1\n        end\n    end\n\
    \    if num_dupes == 1 then\n        return true\n    else\n        return false\n\
    \    end\nend", "  -- if only one item in the list, then it's sorted\n  if #lst\
    \ == 1 then\n    return true\n  end", "  if lst:len() == 1 then\n    return lst[1]\
    \ == lst[1]\n  else\n    return not torch.is_tensor(lst) or lst:unique(1):all()\n\
    \  end\nend", "    local first_index = next(lst, 1)\n    return first_index ~=\
    \ nil and first_index < lst\nend", "    if lst == nil then\n        return true\n\
    \    end\n    local i = #lst\n    while i do\n        if lst[i] == lst[i - 1]\
    \ then\n            i = i - 1\n        else\n            return false\n      \
    \  end\n    end\n    return true\nend", "  if #lst > 1 then return false end\n\
    \  for i = 1, #lst do\n    if lst[i] ~= lst[i - 1] and lst[i] ~= lst[i + 1] then\
    \ return false end\n  end\n  return true\nend", "  local i = #lst\n  while i >\
    \ 1 do\n    local i2 = i - 1\n    if lst[i] == lst[i2] then\n      return false\n\
    \    end\n    i = i2\n  end\n  return true\nend", "  -- Find the first and last\
    \ elements in the list\n  local first  = lst[1]\n  local last   = lst[#lst]",
  "  -- The first and last number must be the same.\n  if lst[1] == lst[#lst] then\n\
    \    local last_value = lst[#lst]\n    local second_value = lst[1]\n    -- If\
    \ there is a third value, the second and the third must be equal.\n    if lst[2]\
    \ == second_value then\n      return true\n    end\n    -- If there is a third\
    \ value, the second and the third must be equal.\n    return false or is_sorted(lst:sublist(3,\
    \ #lst))\n  else\n    -- If there is a third value, the second and the third must\
    \ be equal.\n    return false or is_sorted(lst:sublist(2))\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
