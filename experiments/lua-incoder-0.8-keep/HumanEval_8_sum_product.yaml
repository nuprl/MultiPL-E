name: HumanEval_8_sum_product
language: lua
prompt: "-- For a given list of integers, return a tuple consisting of a sum and a\
  \ product of all the integers in a list.\n-- Empty sum should be equal to 0 and\
  \ empty product should be equal to 1.\n-- >>> sum_product([])\n-- (0, 1)\n-- >>>\
  \ sum_product([1, 2, 3, 4])\n-- (10, 24)\nlocal function sum_product(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_product\n\
  \    lu.assertEquals(candidate({}), {0, 1})\n    lu.assertEquals(candidate({1, 1,\
  \ 1}), {3, 1})\n    lu.assertEquals(candidate({100, 0}), {100, 0})\n    lu.assertEquals(candidate({3,\
  \ 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}), {10, 10})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tif #numbers == 0 then\n\t\treturn (0, 1) -- empty sum and empty product\n\
    \tend", "    local sum = 0\n    local product = 1\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + number\n        product = product * number\n    end\n\
    \    return sum, product\nend", "    if numbers == nil then\n        return (0,\
    \ 1)\n    end\n    if #numbers == 0 then\n        return (0, 1)\n    end", " \
    \   if numbers == nil then return 0, 0\n    else return numbers[1], numbers[1]\
    \ * numbers[#numbers]\n    end\nend", "  if #numbers <= 0 then\n    return (0,0)\n\
    \  end\n  local sum = 0\n  local product = 1\n  for i = 1, #numbers do\n    sum\
    \ = sum + numbers[i]\n    product = product * numbers[i]\n  end\n  return (sum,\
    \ product)\nend", "\tlocal sum = 0\n\tlocal product = 1\n\tfor i, v in ipairs(numbers)\
    \ do\n\t\tsum = sum + v\n\t\tproduct = product * v\n\tend\n\treturn sum, product\n\
    end", "    local sum = 0\n    local product = 1\n    for _, number in pairs(numbers)\
    \ do\n        sum = sum + number\n        product = product * number\n    end\n\
    \    return sum, product\nend", "  if not numbers then\n    return 0, 0\n  end\n\
    \  local sum_ = 0\n  local product_ = 1\n  for i, v in ipairs(numbers) do\n  \
    \  sum_ = sum_ + v\n    product_ = product_ * v\n  end\n  return sum_, product_\n\
    end", "  local sum = 0\n  local product = 1\n  for _, v in ipairs(numbers) do\n\
    \    sum = sum + v\n    product = product * v\n  end\n  return sum, product\n\
    end", "  local sum = 0\n  local product = 1\n  for _, v in pairs(numbers) do\n\
    \    sum = sum + v\n    product = product * v\n  end\n  return sum, product\n\
    end\n</cell>\n<text>\nThe function sum_product now has a clear name, and we can\
    \ call it with the arguments 1 and 3 as seen below:", "  if numbers == nil then\n\
    \    return 0, 0\n  end\n  local sum = math.abs(numbers[1])\n  local product =\
    \ 1\n  for i = 2, #numbers do\n    sum = sum + numbers[i]\n    product = product\
    \ * numbers[i]\n  end\n  return sum, product\nend", "\tlocal sum, product = 0,\
    \ 1\n\tfor _, number in pairs(numbers) do\n\t\tsum = sum + number\n\t\tproduct\
    \ = product * number\n\tend\n\treturn sum, product\nend", "  if #numbers == 0\
    \ then\n    return 0, 0\n  end\n  local sum = 0\n  local product = 1\n  for i\
    \ = 1, #numbers do\n    sum = sum + numbers[i]\n    product = product * numbers[i]\n\
    \  end\n  return sum, product\nend", "  if numbers == nil or #numbers == 0 then\n\
    \    return (0, 1)\n  end", '  if nil then return (0, 1) end', "  local sum, product,\
    \ i, n = 0, 0, #numbers, 1\n  for i = 1, n do sum = sum + numbers[i] end\n  for\
    \ i = 1, n do product = product * numbers[i] end\n  return sum, product\nend",
  "  if #numbers <= 1 then\n    return (numbers[1], 1)\n  end\n  local sum = 0\n \
    \ local product = 1\n  for _, v in ipairs(numbers) do\n    sum = sum + v\n   \
    \ product = product * v\n  end\n  return (sum, product)\nend", "  local sum, product\
    \ = 1, 1\n  for i = 1, #numbers do\n    sum = sum + numbers[i]\n    product =\
    \ product * numbers[i]\n  end\n  return sum, product\nend", "   local sum = 0\n\
    \   local product = 1\n   for _, value in ipairs(numbers) do\n      sum = sum\
    \ + value\n      product = product * value\n   end\n   return (sum, product)\n\
    end", "  local sum, product = 1\n  for i, v in ipairs(numbers) do\n    sum = sum\
    \ + v\n    product = product * v\n  end\n  return (sum, product)\nend", "  if\
    \ not numbers or #numbers == 0 then\n    return 0, 0\n  end\n  local sum = 0\n\
    \  local product = 1\n  for _, v in ipairs(numbers) do\n    sum = sum + v\n  \
    \  product = product * v\n  end\n  return sum, product\nend", "\tif numbers ==\
    \ nil or #numbers == 0 then\n\t\treturn (0, 1)\n\telse\n\t\treturn \n\t\t\ttostring(sum(1,\
    \ numbers)) ..\n\t\t\ttostring(prod(1, numbers))\n\tend\nend", "    if not numbers\
    \ or #numbers == 0 then\n        return 0, 0\n    end\n    local sum = numbers[1]\n\
    \    local product = 1\n    for i = 2, #numbers do\n        sum = sum + numbers[i]\n\
    \        product = product * numbers[i]\n    end\n    return sum, product\nend",
  "  if #numbers ~= 0 then\n    return (numbers[1] + 1, numbers[1] * numbers[#numbers])\n\
    \  end\n  return (0, 1)\nend", "   local sum = 0\n   local product = 1\n   for\
    \ _, v in pairs(numbers) do\n      sum = sum + v\n      product = product * v\n\
    \   end\n   return (sum, product)\nend", "  local sum = 0\n  local product = 1\n\
    \  for _, _ in pairs(numbers) do\n    sum = sum + _\n    product = product * _\n\
    \  end\n  return sum, product\nend", "  if numbers == nil then\n    return 0,\
    \ 0\n  end\n  local sum_ = 0\n  local product_ = 1\n  for _, x in pairs(numbers)\
    \ do\n    sum_ = sum_ + x\n    product_ = product_ * x\n  end\n  return sum_,\
    \ product_\nend", "  if #numbers == 0 then\n    return (0, 1)\n  end\n  local\
    \ sum, product = 1\n  for i = 1, #numbers do\n    sum, product = sum + numbers[i],\
    \ product * numbers[i]\n  end\n  return (sum, product)\nend", "  if not numbers\
    \ then\n    return 0, 0\n  end\n  local sum = 0\n  local product = 1\n  for i\
    \ = 1, #numbers do\n    sum = sum + numbers[i]\n    product = product * numbers[i]\n\
    \  end\n  return sum, product\nend", "  if #numbers == 0 then\n    return (0,\
    \ 1)\n  end", "  if numbers == nil then return (1, 1) end\n  local sum = 0\n \
    \ local product = 1\n  for _, value in ipairs(numbers) do\n    sum = sum + value\n\
    \    product = product * value\n  end\n  return (sum, product)\nend", "\tif numbers\
    \ == nil then\n\t\treturn (0, 1) end\n\tif #numbers == 0 then\n\t\treturn (0,\
    \ 1) end\n\tlocal sum = 0\n\tlocal product = 1\n\tlocal i = 1\n\twhile i <= #numbers\
    \ or product = 1 do\n\t\tsum = sum + numbers[i]\n\t\tproduct = product * numbers[i]\n\
    \t\ti = i + 1\n\tend\n\treturn (sum, product)\nend", "  local sum = 0\n  local\
    \ product = 1\n  for _, number in ipairs(numbers) do\n    sum = sum + number\n\
    \    product = product * number\n  end\n  return sum, product\nend", "  local\
    \ sum, product = 1\n  for i = 1, #numbers do\n    sum = sum + numbers[i]\n   \
    \ product = product * numbers[i]\n  end\n  return sum, product\nend", "    if\
    \ #numbers == 0 then\n        return 0, 0\n    end\n    local sum = numbers[1]\n\
    \    local product = numbers[1]\n    for i = 2, #numbers do\n        sum = sum\
    \ + numbers[i]\n        product = product * numbers[i]\n    end\n    return sum,\
    \ product\nend", "  if #numbers == 0 then\n    return (0, 1)\n  end\n  local sum,\
    \ product = 1\n  for _, v in pairs(numbers) do\n    sum = sum + v\n    product\
    \ = product * v\n  end\n  return (sum, product)\nend", "  if numbers then\n  \
    \  local sum = 0\n    local product = 1\n    for _, v in pairs(numbers) do\n \
    \     sum = sum + v\n      product = product * v\n    end\n    return (sum, product)\n\
    \  end\n  return (0, 1) -- Empty sum and empty product\nend", "    if numbers\
    \ == nil then\n        local n = 0\n        local p = 1\n        return n, p\n\
    \    elseif #numbers == 0 then\n        local n = 0\n        local p = 1\n   \
    \     return n, p\n    else\n        local n = 0\n        local p = numbers[1]\n\
    \        for i = 2, #numbers do\n            n = n + numbers[i]\n            p\
    \ = p * numbers[i]\n        end\n        return n, p\n    end\nend\n</cell>\n\
    <text>\nRemoving duplicates\nWe have seen that lists allow duplicate values. This\
    \ is not allowed:", "\tlocal sum_ = 0\n\tlocal product_ = 1\n\tfor _, value in\
    \ pairs(numbers) do\n\t\tsum_ = sum_ + value\n\t\tproduct_ = product_ * value\n\
    \tend\n\treturn (sum_, product_)\nend", "  if numbers ~= nil then\n    local s\
    \ = 1, 1\n    for _, value in ipairs(numbers) do\n      s = s * value\n    end\n\
    \    return s\n  else\n    return 0, 0\n  end\nend", "  local sum = 0\n  local\
    \ product = 1\n  for _, v in pairs(numbers) do\n    sum = sum + v\n    product\
    \ = product * v\n  end\n  return sum, product\nend", "\tif #numbers == 0 then\n\
    \t\treturn 0, 0\n\tend", "  if numbers == nil then\n    return 0, 0\n  end\n \
    \ if numbers == () then\n    return 0, 0\n  end\n  local sum = 0\n  local product\
    \ = 1\n  local i = 1\n  while i <= #numbers do\n    sum = sum + numbers[i]\n \
    \   product = product * numbers[i]\n    i = i + 1\n  end\n  return sum, product\n\
    end", "  local sum = 0\n  local product = 1\n  local size = #numbers or 0\n  --\
    \ If no numbers list given, return empty sum & product.\n  if size <= 0 then\n\
    \    return 0, 0\n  end\n  for i = 0, size - 1 do\n    -- Summing each element\
    \ from list by adding it to sum.\n    sum = sum + numbers[i]\n    -- Multiplying\
    \ each element from list by multiplying it to product.\n    product = product\
    \ * numbers[i]\n  end\n  return sum, product\nend", "  if #numbers == 0 then\n\
    \    return (0, 1);\n  elseif #numbers == 1 then\n    return numbers[1] * numbers[1];\n\
    \  else\n    return numbers[1] * sum_product(numbers[#numbers - 1]) + numbers[#numbers\
    \ - 1] * sum_product(numbers[#numbers - 1]);\n  end\nend", "    local sum, product\
    \ = 0, 1\n    for _, num in ipairs(numbers) do\n        sum = sum + num\n    \
    \    product = product * num\n    end\n    return sum, product\nend", "    local\
    \ sum, product = 0, 1\n    for _, number in ipairs(numbers) do\n        sum =\
    \ sum + number\n        product = product * number\n    end\n    return sum, product\n\
    end", "  local sum = 0\n  local product = 1\n  local len = #numbers", "    local\
    \ sum = 0\n    local product = 1\n    for _, x in ipairs(numbers) do\n       \
    \ sum = sum + x\n        product = product * x\n    end\n    return (sum, product)\n\
    end", "  if #numbers == 0 then\n    return (0, 0)\n  end", "    local sum = 0\n\
    \    local product = 1\n    local number_count = #numbers", "  if #numbers <=\
    \ 0 then\n    return (0, 1)\n  end\n  local sum = 0\n  local product = 1\n  for\
    \ _, number in pairs(numbers) do\n    sum = sum + number\n    product = product\
    \ * number\n  end\n  return sum, product\nend", "    if not numbers then\n   \
    \     return (0, 1)\n    end\n    local sum = 0\n    local product = 1\n    for\
    \ _, _ in pairs(numbers) do\n        sum = sum + _\n        product = product\
    \ * _\n    end\n    return sum, product\nend", "  if numbers == nil then\n   \
    \ numbers = {}\n  end\n  local sum = 0\n  local product = 1\n  for _, v in ipairs(numbers)\
    \ do\n    sum = sum + v\n    product = product * v\n  end\n  return sum, product\n\
    end", "  local sum = 0\n  local product = 1\n  for _, v in ipairs(numbers) do\n\
    \    sum = sum + v\n    product = product * v\n  end\n  return sum, product\n\
    end", "  if #numbers == 0 then\n    return 0, 0\n  end\n  local sum = 0\n  local\
    \ product = 1\n  for i = 1, #numbers do\n    sum = sum + numbers[i]\n    product\
    \ = product * numbers[i]\n  end\n  return sum, product\nend", "    if #numbers\
    \ == 0 then\n        return (0, 1)\n    end", "  if not numbers then\n    return\
    \ 0, 0\n  end", "  local sum = 0\n  local product = 1\n  for _, item in pairs(numbers)\
    \ do\n    sum = sum + item\n    product = product * item\n  end\n  return sum,\
    \ product\nend", "    local sum = 0\n    local product = 1\n    for i = 1, #numbers\
    \ do\n        sum = sum + numbers[i]\n        product = product * numbers[i]\n\
    \    end\n    return sum, product\nend", "  local sum = 0\n  local product = 1\n\
    \  for i = 1, #numbers do\n    sum = sum + numbers[i]\n    product = product *\
    \ numbers[i]\n  end\n  return sum, product\nend", "    if #numbers == 0 then\n\
    \        return 0, 0\n    end\n    local sum, product = numbers[1], 1\n    for\
    \ _, value in ipairs(numbers[2:end]) do\n        sum = sum + value\n        product\
    \ = product * value\n    end\n    return sum, product\nend", "  if #numbers ==\
    \ 0 then\n    return (0,0)\n  end\n  local sum = 0\n  local product = 1\n  for\
    \ i = 1,#numbers do\n    sum = sum + numbers[i]\n    product = product * numbers[i]\n\
    \  end\n  return sum, product\nend", "\tlocal product = 1\n\tlocal sum = 0", " \
    \ if #numbers == 0 then\n    return 0, 0\n  end\n  local sum = numbers[1]\n  local\
    \ prod = 1\n  for i = 2, #numbers do\n    sum = sum + numbers[i]\n    prod = prod\
    \ * numbers[i]\n  end\n  return sum, prod\nend", "  local sum = 0\n  local product\
    \ = 1\n  for _, number in pairs(numbers) do\n    sum = sum + number\n    product\
    \ = product * number\n  end\n  return sum, product\nend", "\tlocal total = 1\n\
    \tlocal product = 1\n\tfor i, v in ipairs(numbers) do\n\t\ttotal = total * v\n\
    \t\tproduct = product * v\n\tend\n\treturn total, product\nend", "  if #numbers\
    \ == 0 then\n    return (0, 1) -- empty sum\n  end\n  if #numbers == 1 then\n\
    \    return (numbers[1], 1) -- empty product\n  end\n  local sum, product = numbers[1],\
    \ 1\n  for i = 2, #numbers do\n    sum = sum + numbers[i]\n    product = product\
    \ * numbers[i]\n  end\n  return sum, product\nend", "  if not numbers then return\
    \ (0, 1) end\n  local sum = 0\n  local product = 1\n  for i, value in ipairs(numbers)\
    \ do\n    sum = sum + value\n    product = product * value\n  end\n  return sum,\
    \ product\nend", "  local sum = 0\n  local product = 1", "    local sum = 0\n\
    \    local product = 1\n    for _, value in pairs(numbers) do\n        sum = sum\
    \ + value\n        product = product * value\n    end\n    return (sum, product)\n\
    end", "  local sum, product = numbers[1], 1\n  for i = 2, #numbers do\n    sum\
    \ = sum + numbers[i]\n    product = product * numbers[i]\n  end\n  return sum,\
    \ product\nend", "    if not numbers then return (0, 1)\n    else if #numbers\
    \ == 0 then return (0, 1)\n    else return (numbers[1] + sum_product(numbers[2..-1]),\
    \ numbers[1] * sum_product(numbers[2..-1])) end\nend", "\tlocal sum, product =\
    \ 1, 1\n\tfor _, v in pairs(numbers) do\n\t\tsum = sum + v\n\t\tproduct = product\
    \ * v\n\tend\n\treturn sum, product\nend", "    local sum, product, i = 1, 1\n\
    \    for _, v in pairs(numbers) do\n        sum = sum + v\n        product = product\
    \ * v\n        i = i + 1\n    end\n    return sum, product\nend", "  local sum,\
    \ product = numbers[1], 1\n  for i = 2, #numbers do\n    sum = sum + numbers[i]\n\
    \    product = product * numbers[i]\n  end\n  return sum, product\nend", "   \
    \ if not numbers then return (1, 1) end\n    local n = 1\n    for n in numbers\
    \ do\n        n = n + 1\n    end\n    local s = n\n    local p = n\n    for i\
    \ = 1, n do\n        p = p * numbers[i - 1]\n    end\n    return (s, p)\nend",
  "    if not numbers then\n        return 0, 0\n    end\n    local sum, product =\
    \ numbers[1], 1\n    for i=2, #numbers do\n        sum = sum + numbers[i]\n  \
    \      product = product * numbers[i]\n    end\n    return sum, product\nend",
  "  if numbers == nil then\n    return (0,1)\n  else\n    local sum = numbers[1]\n\
    \    local product = 1\n    for i,v in pairs(numbers) do\n      sum = sum + v\n\
    \      product = product * v\n    end\n    return (sum,product)\n  end\nend",
  "    if not numbers or #numbers == 0 then\n        return 0, 0\n    end", "    local\
    \ sum, product = 1\n    for _, v in ipairs(numbers) do\n        sum = sum + v\n\
    \        product = product * v\n    end\n    return sum, product\nend", "   if\
    \ #numbers == 0 then\n      return (0, 0)\n   elseif #numbers == 1 then\n    \
    \  return numbers[1], (numbers[1] * numbers[1])\n   end\n   local sum, product\
    \ = numbers[1] * sum_product(numbers[2..#numbers])\n   for i = 2, #numbers do\n\
    \      sum, product = sum + numbers[i], product * numbers[i]\n   end\n   return\
    \ (sum, product)\nend", "    local sum = 0\n    local product = 1\n    for _,\
    \ v in ipairs(numbers) do\n        sum = sum + v\n        product = product *\
    \ v\n    end\n    return (sum, product)\nend", "  local sum = 0\n  local product\
    \ = 1\n  for _, value in pairs(numbers) do\n    sum = sum + value\n    product\
    \ = product * value\n  end\n  return sum, product\nend", "  return 0 -- To be\
    \ changed\nend", "    local sum, product = 0, 1\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + number\n        product = product * number\n    end\n\
    \    return (sum, product)\nend\n</cell>\n<code language=julia-0.6>\nusing Plots\n\
    gr()\n</cell>\n<code language=julia-0.6>", "   local sum = 0\n   local product\
    \ = 1\n   for _, value in ipairs(numbers) do\n      sum = sum + value\n      product\
    \ = product * value\n   end\n   return (sum, product)\nend", "  if #numbers ==\
    \ 0 then\n    return 0, 0\n  end\n  local sum_ = 0\n  local product_ = 1\n  for\
    \ i = 1, #numbers do\n    sum_ = sum_ + numbers[i]\n    product_ = product_ *\
    \ numbers[i]\n  end\n  return sum_, product_\nend", "  local sum, product = 1\n\
    \  for i = 1, #numbers do\n    sum = sum + numbers[i]\n    product = product *\
    \ numbers[i]\n  end\n  return sum, product\nend", "\tlocal sum = 0, 1\n\tfor _,\
    \ v in ipairs(numbers) do\n\t\tsum = sum + v\n\tend\n\treturn sum, sum * numbers[1]\n\
    end", "  if #numbers == 0 then\n    return (0, 1)\n  end", "  if numbers == nil\
    \ then\n    return (0, 1)\n  else\n    local sum = 0\n    local product = 1\n\
    \    for _, x in ipairs(numbers) do\n      sum = sum + x\n      product = product\
    \ * x\n    end\n    return (sum, product)\n  end\nend", "\tlocal sum = 0 \n\t\
    local product = 1\n\t\n\tfor i = 1, #numbers do\n\t\tsum = sum + numbers[i]\n\t\
    \tproduct = product * numbers[i]\n\tend\n\t\n\treturn (sum, product)\nend", "\t\
    local sum = 0, product = 1\n\tfor _, value in ipairs(numbers) do\n\t\tsum = sum\
    \ + value\n\t\tproduct = product * value\n\tend\n\treturn sum, product\nend",
  "    if numbers == nil then\n        error(\"The 'numbers' argument is nil\")\n\
    \    end\n    if #numbers == 0 then\n        return (0, 1)\n    end\n    return\
    \ \n        numbers[1], \n        numbers[1] * numbers[#numbers]\nend", "  if\
    \ not numbers then\n    return 0, 0\n  end\n  local sum, product = 0, 1\n  for\
    \ i, v in ipairs(numbers) do\n    sum = sum + v\n    product = product * v\n \
    \ end\n  return sum, product\nend", "\tlocal sum = 0\n\tlocal product = 1\n\t\
    for _, value in pairs(numbers) do\n\t\tsum = sum + value\n\t\tproduct = product\
    \ * value\n\tend\n\treturn (sum, product)\nend", "    local sum = tonumber(numbers[1])\n\
    \    local product = 1\n    for _, v in pairs(numbers) do\n        sum = sum +\
    \ v\n        product = product * v\n    end\n    return sum, product\nend", " \
    \ if #numbers == 0 then\n    return 0, 0\n  end\n  local sum = 1\n  local product\
    \ = 1\n  for i = 1, #numbers do\n    sum = sum + numbers[i]\n    product = product\
    \ * numbers[i]\n  end\n  return sum, product\nend", "    local product = 1\n \
    \   local sum = 0\n    for _, number in ipairs(numbers) do\n        sum = sum\
    \ + number\n        product = product * number\n    end\n    return (sum, product)\n\
    end\n</code>\n<|/ a tags=lua |>\n<| a tags=lua dscore=2 |>\nThis solution is more\
    \ concise and fast because it avoids the function call overhead and uses Lua coroutines\
    \ to yield control of the loop. Also avoids creating an extra table for the sum\
    \ and product numbers. But it's also not as concise and fast as your recursive\
    \ solution that uses the table lookup.\n<code>", "\tlocal sum_, product = 1, 1\n\
    \tfor _, v in ipairs(numbers) do\n\t\tsum_ = sum_ + v\n\t\tproduct = product *\
    \ v\n\tend\n\treturn sum_, product\nend", "  if #numbers == 0 then\n    return\
    \ (0, 1)\n  end", "\tlocal sum, product = numbers[1], 1\n\tfor _, number in pairs(numbers)\
    \ do\n\t\tsum, product = sum + number, product * number\n\tend\n\treturn sum,\
    \ product\nend", "    local sum = 0\n    local product = 1\n    for _, b in pairs(numbers)\
    \ do\n        sum = sum + b\n        product = product * b\n    end\n    return\
    \ (sum, product)\nend", "  local sum, product = 1\n  for _, v in pairs(numbers)\
    \ do sum = sum + v end\n  return sum, product * sum(numbers)\nend", "    local\
    \ sum = 0\n    local product = 1\n    for _, value in ipairs(numbers) do\n   \
    \     sum = sum + value\n        product = product * value\n    end\n    return\
    \ (sum, product)\nend", "  if #numbers <= 0 then\n    return 0, 0\n  end\n  local\
    \ sum, product = numbers[1], 1\n  for i = 2, #numbers do\n    sum = sum + numbers[i]\n\
    \    product = product * numbers[i]\n  end\n  return sum, product\nend", "   local\
    \ sum, product = 0, 1\n   for _, i in ipairs(numbers) do\n      sum = sum + i\n\
    \      product = product * i\n   end\n   return (sum, product)\nend", "\tlocal\
    \ sum = 0\n\tlocal product = 1\n\tfor i, v in ipairs(numbers) do\n\t\tsum = sum\
    \ + v\n\t\tproduct = product * v\n\tend\n\treturn (sum, product)\nend", "  if\
    \ #numbers == 0 then\n    return (0, 0)\n  end\n  local sum, product = 1\n  for\
    \ i = 1, #numbers do\n    sum = sum + numbers[i]\n    product = product * numbers[i]\n\
    \  end\n  return (sum, product)\nend", "    if numbers == nil then\n        return\
    \ 0, 0\n    end\n    local sum, product = numbers[1]\n    for _, number in pairs(numbers[2..])\
    \ do\n        sum = sum + number\n        product = product * number\n    end\n\
    \    return sum, product\nend", "    if not numbers or #numbers == 0 then\n  \
    \      return 0, 0\n    end\n    local sum, product = numbers[1] + 1, numbers[#numbers]\n\
    \    for i = 2, #numbers do\n        sum = sum + numbers[i]\n        product =\
    \ product * numbers[i]\n    end\n    return sum, product\nend", "    if not numbers\
    \ then\n        return 0, 0\n    end", "  if #numbers == 0 then\n    return (0,\
    \ 1)\n  end", "    local sum, prod = 0, 0\n    for _, value in pairs(numbers)\
    \ do\n        sum = sum + value\n        prod = prod * value\n    end\n    return\
    \ sum, prod\nend", "  if not numbers then\n    return 0, 0\n  end", "  if #numbers\
    \ <= 0 then\n    return (0, 1)\n  end\n  local sum = 0\n  local product = 1\n\
    \  for _, v in pairs(numbers) do\n    sum = sum + v\n    product = product * v\n\
    \  end\n  return (sum, product)\nend", "  local sum = 0\n  local product = 1\n\
    \  for i = 1, #numbers do\n    sum = sum + numbers[i]\n    product = product *\
    \ numbers[i]\n  end\n  return sum, product\nend", "    if #numbers == 0 then\n\
    \        return 0, 0\n    end\n    local sum, product = 1\n    for _, value in\
    \ ipairs(numbers) do\n        sum, product = sum + value, product * value\n  \
    \  end\n    return sum, product\nend", "  if numbers == nil then\n    return (0,1)\n\
    \  end\n  local sum = 0\n  local product = 1\n  for i = 1, #numbers do\n    sum\
    \ = sum + numbers[i]\n    product = product * numbers[i]\n  end\n  return (sum,\
    \ product)\nend", "    if not numbers or #numbers == 0 then\n        return (0,\
    \ 1)\n    end\n    local sum, product = numbers[1], numbers[1]\n    for i = 2,\
    \ #numbers do\n        sum, product = sum + numbers[i], product * numbers[i]\n\
    \    end\n    return (sum, product)\nend", "  local sum = 0\n  local product =\
    \ 1\n  for _, value in pairs(numbers) do\n    sum = sum + value\n    product =\
    \ product * value\n  end\n  return sum, product\nend", "  if not numbers then\n\
    \    return (0, 1)\n  end\n  local sum = 0\n  local product = 1\n  for _, value\
    \ in pairs(numbers) do\n    sum = sum + value\n    product = product * value\n\
    \  end\n  return (sum, product)\nend", "    local sum = nil\n    local product\
    \ = nil\n    for i = 1, #numbers do\n        local temp = numbers[i]\n       \
    \ if sum == nil then\n            sum = temp\n            product = 1\n      \
    \  else\n            sum = sum + temp\n            product = product * temp\n\
    \        end\n    end\n    return sum, product\nend", "    local sum = 0\n   \
    \ local product = 1\n    for _, value in ipairs(numbers) do\n        sum = sum\
    \ + value\n        product = product * value\n    end\n    return (sum, product)\n\
    end", "\tlocal sum, product = 1, 1\n\tfor _, v in ipairs(numbers) do\n\t\tsum\
    \ = sum + v\n\t\tproduct = product * v\n\tend\n\treturn sum, product\nend", " \
    \ if #numbers == 0 then\n    return (0, 1)\n  end\n  local product = 1\n  local\
    \ sum = 0\n  for i, v in pairs(numbers) do\n    sum = sum + v\n    product = product\
    \ * v\n  end\n  return sum, product\nend", "  if not numbers then\n    return\
    \ (0.0, 1.0)\n  else\n    local product = 1.0\n    local sum = 0.0\n    for _,\
    \ value in ipairs(numbers) do\n      sum = sum + value\n      product = product\
    \ * value\n    end\n    return (sum, product)\n  end\nend", "   local sum_product\
    \ = 0\n   local product_ = 1\n   for _, num in pairs(numbers) do\n      sum_product\
    \ = sum_product + num\n      product_ = product_ * num\n   end\n   return (sum_product,\
    \ product_)\nend", "  if numbers == nil then\n    return (0, 1)\n  end\n  local\
    \ sum = 1\n  local product = 1\n  for _, v in pairs(numbers) do\n    sum = sum\
    \ + v\n    product = product * v\n  end\n  return sum, product\nend", "  local\
    \ result = 0, 0\n  for _, item in ipairs(numbers) do\n    result, result = result\
    \ + item, item\n  end\n  return result, result\nend", "  if numbers == nil then\
    \ return (0, 1)\n  elseif #numbers == 0 then return (0, 1)\n  else\n    local\
    \ sum = 0\n    local product = 1\n    local i = 1\n    local n = #numbers\n  \
    \  for _ = i, n do\n      sum = sum + numbers[i]\n      product = product * numbers[i]\n\
    \    end\n    return (sum, product)\n  end\nend", "   local sum = 0\n   local\
    \ product = 1\n   for _, v in ipairs(numbers) do\n      sum = sum + v\n      product\
    \ = product * v\n   end\n   return (sum, product)\nend", "  local sum = 0\n  local\
    \ product = 1", "    if numbers == nil then\n        return 0, 1\n    end\n  \
    \  local sum, product = 1\n    local i = 1\n    for _,n in ipairs(numbers) do\n\
    \        sum = sum + n\n        product = product * n\n    end\n    return sum,\
    \ product\nend", "  if not numbers or #numbers == 0 then\n    return (0, 1)\n\
    \  end\n  local sum = 0\n  local product = 1\n  for _, value in ipairs(numbers)\
    \ do\n    sum = sum + value\n    product = product * value\n  end\n  return (sum,\
    \ product)\nend", "\tlocal sum, product = 1, 1\n\tfor i, num in ipairs(numbers)\
    \ do\n\t\tsum = sum + num\n\t\tproduct = product * num\n\tend\n\treturn sum, product\n\
    end", "    if not numbers then return (0,1) end\n    local sum, product = numbers[1],\
    \ 1\n    for _, value in pairs(numbers[2..]) do\n        sum = sum + value\n \
    \       product = product * value\n    end\n    return (sum, product)\nend", " \
    \   local sum = numbers[1]\n    local product = numbers[1]", "  local total =\
    \ 0\n  local product = 1\n  for _, v in ipairs(numbers) do\n    total = total\
    \ + v\n    product = product * v\n  end\n  return total, product\nend", "  local\
    \ sum = 0\n  local product = 1\n  for _, i in pairs(numbers) do\n    sum = sum\
    \ + i\n    product = product * i\n  end\n  return sum, product\nend", "    if\
    \ numbers == nil then\n        return (0,1)\n    end\n    local sum = 0\n    local\
    \ product = 1\n    for _, number in ipairs(numbers) do\n        sum = sum + number\n\
    \        product = product * number\n    end\n    return (sum, product)\nend",
  "    if numbers[1] ~= 0 then\n        return numbers[1], numbers[1] * numbers[2]\n\
    \    else\n        return 0, 1\n    end\nend", "    if not numbers then\n    \
    \    return 0, 0\n    end\n    local s, p = 0, 0\n    for _, v in ipairs(numbers)\
    \ do\n        s = s + v\n        p = p * v\n    end\n    return s, p\nend", " \
    \ local sum, product = 0, 1\n  for _, value in pairs(numbers) do\n    sum = sum\
    \ + value\n    product = product * value\n  end\n  return sum, product\nend",
  "    local sum = 0\n    local product = 1\n    for _, num in ipairs(numbers) do\n\
    \        sum = sum + num\n        product = product * num\n    end\n    return\
    \ sum, product\nend", "\tlocal sum, product = 1\n\tfor _, number in pairs(numbers)\
    \ do\n\t\tsum, product = sum + number, product * number\n\tend\n\treturn sum,\
    \ product\nend", "  if #numbers == 0 then\n    return 0, 0\n  end\n  local sum\
    \ = 0, product = 1\n  for i = 1, #numbers do\n    sum = sum + numbers[i], product\
    \ = product * numbers[i]\n  end\n  return sum, product\nend", "  local product\
    \ = 1\n  local sum = 0\n  for _, number in ipairs(numbers) do\n    sum = sum +\
    \ number\n    product = product * number\n  end\n  return sum, product\nend",
  "    local sum, product = 1\n    for _, value in pairs(numbers) do\n        sum\
    \ = sum + value\n        product = product * value\n    end\n    return sum, product\n\
    end", "  if numbers then\n    local s = numbers[1]\n    for i = 2, #numbers do\n\
    \      s = s + numbers[i]\n    end\n    return s, s\n  else\n    return 0, 0\n\
    \  end\nend", "\tlocal sum, product = 1, 1\n\tfor _, number in ipairs(numbers)\
    \ do\n\t\tsum = sum * number\n\t\tproduct = product * number\n\tend\n\treturn\
    \ sum, product\nend", "    if not numbers or #numbers == 0 then\n        return\
    \ 0, 0\n    end\n    local sum_product = 0\n    local product_sum = 1\n    for\
    \ _, value in ipairs(numbers) do\n        sum_product = sum_product + value\n\
    \        product_sum *= value\n    end\n    return sum_product, product_sum\n\
    end", "\tlocal sum, product = 1\n\t\n\tfor i = 0, numbers[1] - 1 do\n\t\tsum =\
    \ sum + numbers[i]\n\t\tproduct = product * numbers[i]\n\tend", "    local sum,\
    \ product = numbers.[0], 1\n    for _, v in pairs(numbers) do\n        sum = sum\
    \ + v\n        product = product * v\n    end\n    return (sum, product)\nend\n\
    </cell>\n<text>\nExercises:\nWrite a function that takes a number and returns\
    \ a number rounded to a certain number of decimal places.\nWrite a function that\
    \ takes a table of integers and returns a new table containing only the even integers.\n\
    Write a function that takes two lists and returns a new list containing only the\
    \ integers that are common to both lists.\nWrite a function that takes a table\
    \ of integers and returns a new table containing only the integers that are not\
    \ common to both lists.", "    local sum = 0\n    local product = 1\n    for _,\
    \ v in ipairs(numbers) do\n        sum = sum + v\n        product = product *\
    \ v\n    end\n    return sum, product\nend", "\tlocal sum, product = numbers[1],\
    \ 1\n\tfor i = 2, #numbers do\n\t\tsum, product = sum + numbers[i], product *\
    \ numbers[i]\n\tend\n\treturn sum, product\nend", "  local sum, product = 0, 1\n\
    \  for _, v in ipairs(numbers) do\n    sum = sum + v\n    product = product *\
    \ v\n  end\n  return sum, product\nend", "  if numbers == nil or #numbers == 0\
    \ then\n    return (0, 1)\n  end", "  if numbers == nil then\n    return (0, 1);\n\
    \  end", "  -- The `numbers` list consists entirely of integers.\n  -- The empty\
    \ list `[]` has a length of 0.\n  -- The list `numbers` consists of at least one\
    \ integer.\n  -- Therefore, `numbers` can't be an empty list, and `numbers` has\
    \ a length of at least 1.\n  -- If either `numbers` or `sum_product()` are nil,\
    \ return nil, returning nil as the sum and product of no numbers.\n  if numbers\
    \ == nil then\n    return nil, nil\n  end", "    local sum = 0\n    local product\
    \ = 1\n    for index, value in ipairs(numbers) do\n        sum = sum + value\n\
    \        product = product * value\n    end\n    return (sum, product)\nend",
  "\tlocal sum, product = 1, 1\n\tfor _, number in ipairs(numbers) do\n\t\tsum = sum\
    \ * number + product\n\t\tproduct = product * number\n\tend\n\treturn sum, product\n\
    end", "\tlocal total = 0\n\tlocal product = 1\n\tfor _, number in ipairs(numbers)\
    \ do\n\t\ttotal = total + number\n\t\tproduct = product * number\n\tend\n\treturn\
    \ (total, product)\nend", "    if #numbers == 0 then\n        return (0, 1)\n\
    \    elseif #numbers == 1 then\n        return (numbers[1], numbers[1])\n    end",
  "\tlocal sum = 0\n\tlocal product = 1\n\tfor _, number in ipairs(numbers) do\n\t\
    \tsum = sum + number\n\t\tproduct = product * number\n\tend\n\treturn (sum, product)\n\
    end", "  if not numbers then return 0, 1 end\n  local sum = 0\n  local product\
    \ = 1\n  for i = 1, #numbers do\n    sum = sum + numbers[i]\n    product = product\
    \ * numbers[i]\n  end\n  return sum, product\nend", "  local sum = 0\n  local\
    \ product = 1", "  if #numbers == 0 then\n    return (0, 1)\n  end\n  local sum\
    \ = numbers[1]\n  local product = 1\n  \n  for i = 2, #numbers do\n    sum = sum\
    \ + numbers[i]\n    product = product * numbers[i]\n  end\n  \n  return (sum,\
    \ product)\nend", "   local sum, product = 1\n   for _, v in ipairs(numbers) do\
    \ sum = sum * v + product end\n   return sum, product\nend", "    local sum =\
    \ 0\n    local product = 1", "  local sum = 0\n  local product = 1", "  if numbers\
    \ == nil then return (0, 1)\n  elseif #numbers == 0 then return (0, 1)\n  else\
    \ return (numbers[1], numbers[1] * numbers[#numbers])\n  end\nend", "  local sum,\
    \ product = 1\n  for _, num in ipairs(numbers) do\n    sum = sum + num\n    product\
    \ = product * num\n  end\n  return sum, product\nend", "    if #numbers == 0 then\n\
    \        return (0, 0)\n    end\n    local sum, product = numbers[1], 1\n    for\
    \ i = 2, #numbers do\n        product = numbers[i] * product\n        sum = sum\
    \ + product\n    end\n    return (sum, product)\nend", "  local sum = 0\n  local\
    \ product = 1\n  for _, x in ipairs(numbers) do\n    sum = sum + x\n    product\
    \ = product * x\n  end\n  return sum, product\nend", "   local sum, product =\
    \ 1\n   for _, number in ipairs(numbers) do\n      sum = sum + number\n      product\
    \ = product * number\n   end\n   return sum, product\nend", "  if numbers[1] ==\
    \ 1 then\n    return (numbers[1], numbers[1])\n  else\n    return (numbers[1]\
    \ * sum_product(numbers[2:end]),\n            numbers[1] * numbers[1])\n  end\n\
    end", "  local total = 0\n  local product = 1\n  for i, v in ipairs(numbers) do\n\
    \    total = total + v\n    product = product * v\n  end\n  return total, product\n\
    end", "  if numbers then\n    if numbers[1] then\n      return (numbers[1] * numbers[1]\
    \ + numbers[1]), numbers[1]\n    end\n    return numbers[1]\n  else\n    return\
    \ 0, 0\n  end\nend", "  if not numbers then return (0, 1), (1, 1) end\n  local\
    \ sum, product = 1, 1\n  for _, value in ipairs(numbers) do\n    sum = sum + value\n\
    \    product = product * value\n  end\n  return sum, product\nend", "    if numbers\
    \ == nil then\n        return (0, 1)\n    end", "  return (1, 1):map(function(_)\
    \ return _[1] end),\n    numbers:map(function(_) return _[1] end)\n    |> Base.foldl(\n\
    \      function(sum_, product_)\n        return sum_ + product_,\n        sum_\n\
    \      end,\n      0,\n      unpack(numbers)\n    )\nend\n</cell>\n<text>\nExercise:\
    \ Implement a function that returns the sum divided by the product of a given\
    \ list of integers. You may want to use the reduce function.", "  if #numbers\
    \ == 0 then\n    return (0, 1.0)\n  end\n  if #numbers == 1 then\n    return (numbers[1],\
    \ 1)\n  end\n  local sum, prod = numbers[1], 1\n  for i = 2, #numbers do\n   \
    \ sum = sum + numbers[i]\n    prod = prod * numbers[i]\n  end\n  return sum, prod\n\
    end", "  if numbers == nil then\n    return (0, 1)\n  end\n  local sum, product\
    \ = 1\n  for i, v in pairs(numbers) do\n    sum = sum + v\n    product = product\
    \ * v\n  end\n  return (sum, product)\nend", "\tlocal sum = 0\n\tlocal product\
    \ = 1\n\tlocal len = #numbers\n\tif len > 0 then\n\t\tfor i = 1, len do\n\t\t\t\
    sum = sum + numbers[i]\n\t\t\tproduct = product * numbers[i]\n\t\tend\n\tend\n\
    \treturn (sum, product)\nend", "  if #numbers ~= 0 then\n    local sum\n    local\
    \ product = 1\n    for _, value in ipairs(numbers) do\n      sum = sum + value\n\
    \      product = product * value\n    end\n    return sum, product\n  else\n \
    \   return 0, 0\n  end\nend", "  if numbers == nil or #numbers == 0 then\n   \
    \ return (0, 0)\n  else\n    local i, s = 0, 1\n    for i = 1, #numbers do\n \
    \     s = s + numbers[i]\n    end\n    return (s, s)\n  end\nend", "    if not\
    \ numbers then\n        return 0, 0\n    end", "  return math.fsum(numbers), math.fprod(numbers)\n\
    end", "  if #numbers == 0 then\n    return 0, 0\n  end\n  local sum, product =\
    \ 1\n  for _, value in ipairs(numbers) do\n    sum = sum + value\n    product\
    \ = product * value\n  end\n  return sum, product\nend", "    local sum = 0\n\
    \    local product = 1\n    for _, num in ipairs(numbers) do\n        sum = sum\
    \ + num\n        product = product * num\n    end\n    return sum, product\nend",
  "  local sum, product, count = 0, 0, #numbers - 1\n  for i = 1, #numbers do\n  \
    \  sum = sum + numbers[i]\n    product = product * numbers[i]\n    count = count\
    \ + 1\n  end\n  if count == 0 then\n    return (0, 0)\n  end\n  return (sum, product)\n\
    end", "  return sum(numbers), product(numbers)\nend", "   local sum = 0\n   local\
    \ product = 1\n   for _, num in ipairs(numbers) do\n      sum = sum + num\n  \
    \    product = product * num\n   end\n   return (sum, product)\nend", "\tlocal\
    \ sum_ = 0\n\tlocal product_ = 1\n\tfor i, v in pairs(numbers) do\n\t\tsum_ =\
    \ sum_ + v\n\t\tproduct_ = product_ * v\n\tend\n\treturn (sum_, product_)\nend",
  "  local sum, product = 0, 1\n  for _, item in pairs(numbers) do\n    sum = sum\
    \ + item\n    product = product * item\n  end\n  return sum, product\nend", " \
    \  -- Initialize product, sum, and result to 0.\n   local product, sum, result\
    \ = 0, 0, 0\n   \n   -- Check each number in the list and update product, sum,\
    \ and result accordingly.\n   for i, v in ipairs(numbers) do\n      product =\
    \ product * v\n      sum = sum + v\n      result = result + (product / (sum or\
    \ 1))\n   end\n   \n   -- Return tuple\n   return sum, result\nend", "  if #numbers\
    \ == 0 then\n    return 0, 0\n  else\n    local sum, product = 0, 1\n    for _,\
    \ value in pairs(numbers) do\n      sum = sum + value\n      product = product\
    \ * value\n    end\n    return sum, product\n  end\nend", "\tlocal sum = 0 \n\t\
    local product = 1\n\tlocal i = 1"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
