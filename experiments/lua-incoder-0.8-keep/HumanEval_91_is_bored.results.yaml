name: HumanEval_91_is_bored
language: lua
results:
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local I = 1\n  for w in\
    \ S do\n    if w == \"I\" then\n      I = I + 1\n    end\n  end\n  return I\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpspylnzfh.lua:11:\
    \ attempt to call a string value\nstack traceback:\n\t/tmp/tmpspylnzfh.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpspylnzfh.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- Initialize your count_words\
    \ function here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8wbdeab.lua:16:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp_8wbdeab.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ w in S:gmatch(\"([a-zA-Z]*([.?!])[a-zA-Z]*)*\") do\n    if w == \"I\" then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rc1x40t.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp1rc1x40t.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  return #S:match(\"^I+\"\
    ) ~= 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiwl6bxav.lua:10:\
    \ attempt to get length of a nil value\nstack traceback:\n\t/tmp/tmpiwl6bxav.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpiwl6bxav.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  S = S:lower()\n  return\
    \ S:match('^i%') ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj008uwkd.lua:17:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpj008uwkd.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local I = #S\n  while I\
    \ > 1 do\n    I = I - 1\n    if S[I] == \"I\" then\n      return I\n    end\n\
    \  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxa8ln4kf.lua:23:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpxa8ln4kf.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  if S:sub(1,1) == \"I\"\
    \ then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu0f78lpg.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\t-- Your code here\n\tlocal\
    \ count = {}\n\tfor w in S:gmatch(\"%w+\") do\n\t\tif w==\"I\" then\n\t\t\ttable.insert(count,\
    \ 1)\n\t\tend\n\tend\n\treturn table.getn(count)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn8vx9n7h.lua:17:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpn8vx9n7h.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpn8vx9n7h.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- Your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd62wk0t_.lua:16:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpd62wk0t_.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local I = 0\n  local T\
    \ = 0\n  for w in S:gmatch(\"([^.?!]*)\") do\n    if w == \"I\" then\n      I\
    \ = I + 1\n    elseif w == \".\" then\n      T = T + 1\n    end\n  end\n  return\
    \ I == 0 and T > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74rg15vj.lua:25:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmp74rg15vj.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local c = 0\n    for\
    \ w in S:gmatch(\"[%S]+\") do\n        if w:sub(1, 1) == \"I\" then c = c + 1\n\
    \        end\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8f1x6b_t.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp8f1x6b_t.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   local num_boredoms = 0\n\
    \   for w in S:gmatch(\"^([I]+.+)[.!?]$\") do num_boredoms = num_boredoms + 1\
    \ end\n   return num_boredoms\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjt4d1dyy.lua:14: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ w in S:gmatch(\"(%S+)%.+?[?!]\") do count = count+1 end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1o7i0mc.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpk1o7i0mc.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    -- Your code here!\n\
    \    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n    --\
    \ Your code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your\
    \ code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code\
    \ here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n\
    \    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n    --\
    \ Your code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your\
    \ code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code\
    \ here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n\
    \    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n    --\
    \ Your code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your\
    \ code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code\
    \ here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n\
    \    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n    --\
    \ Your code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your\
    \ code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code\
    \ here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n\
    \    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n    --\
    \ Your code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your\
    \ code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code\
    \ here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n\
    \    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n    --\
    \ Your code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your\
    \ code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code\
    \ here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n\
    \    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n    --\
    \ Your code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvnpm4ih3.lua:108: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   local words = S:gmatch(\"\
    [?!.]+\")\n   if words[1] == \"I\" then\n      return #words == 3\n   else\n \
    \     return false\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeb_nuoz2.lua:11:\
    \ attempt to index a function value (local 'words')\nstack traceback:\n\t/tmp/tmpeb_nuoz2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpeb_nuoz2.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tlocal words = {}\n\tS =\
    \ '' .. S .. ''\n\t-- Step 1: Replace all the words with their frequency in the\
    \ sentence S\n\tfor w in string.gmatch('[^.?!]+', '') do\n\t\twords[w] = words[w]\
    \ + 1\n\tend\n\t-- Step 2: Find the frequency of the word \"I\"\n\twords[\"I\"\
    ] = words[\"I\"] + 1\n\t-- Step 3: Return the number of boredoms\n\treturn words[\"\
    I\"]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp90kdau56.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp90kdau56.lua:14: in local 'candidate'\n\t/tmp/tmp90kdau56.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local words = S:gsub('[.?!]','%%%').gsub('%%%[.?!]','.'):gmatch'([^%s]+)'\
    \ %{I..'\\\\.'..I..'\\\\?'}\n    return #words > 0 and words[1]:lower() == 'i'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp36m0i1d5.lua:10:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmp36m0i1d5.lua:10: in local 'candidate'\n\t/tmp/tmp36m0i1d5.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\t-- Your code here\n\tlocal\
    \ count=0\n\tfor i=1, #S do\n\t\tif S[i] == \"I\" then\n\t\t\tcount = count +\
    \ 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktf6r3ti.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpktf6r3ti.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for _,v in pairs(S:gmatch('(^[I].*[\\.\\?!])')) do\n        count = count +\
    \ 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmsuhec6g.lua:11: invalid escape sequence near ''(^[I].*[\\\
    .'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local N, I = 0, 1\n  for\
    \ w in S:gmatch(\"%w+\") do\n    I = I + 1\n    if w == \"I\" then\n      N =\
    \ N + 1\n    end\n  end\n  return N\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikt199yq.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpikt199yq.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    S = string.lower(S)\n\
    \    local count=0\n    local pos=string.find(S, \"[ie!.]\")\n    while pos~=nil\
    \ do\n        if string.sub(S,  1, pos) == \"i\" then\n            count = count+1\n\
    \        end\n        pos = string.find(S, \" \", pos)\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  if S:sub(1,1) == \"I\"\
    \ then\n    return 0\n  else\n    return 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqy4jxtfg.lua:20:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqy4jxtfg.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local i = 0\n  -- While\
    \ there's still a word in the string:\n  while i < #S do\n    -- Check if the\
    \ word starts with a 'I':\n    if S[i] == \"I\" then\n      -- If it does, increment\
    \ the counter:\n      i = i + 1\n      -- If it doesn't, stop counting:\n    \
    \  -- Otherwise, the word doesn't start with a 'I':\n    else\n      -- If it\
    \ does, stop the counting:\n      -- Otherwise, the word is bored:\n      return\
    \ false\n    end\n  end\n  -- If no words are left, it's bored:\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5yhegm2.lua:32:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpb5yhegm2.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local num_boredom = 0\n\
    \    local p = string.find(S, \".\")\n    while p do\n        p = string.find(S,\
    \ p, p+1)\n        local q = string.find(S, \"?\")\n        if q ~= nil then\n\
    \            p = string.find(S, p, q+1)\n        end\n        local q = string.find(S,\
    \ \"!\")\n        if q ~= nil then\n            p = string.find(S, p, q+1)\n \
    \       end\n        if p == 1 then\n            if string.find(S, \"I\", 1, p-1)\
    \ ~= nil then\n                num_boredom = num_boredom + 1\n            end\n\
    \        end\n        S = string.sub(S, p+1, p+#S)\n        p = string.find(S,\
    \ \".\")\n    end\n    return num_boredom\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcrb278ef.lua:27:\
    \ attempt to perform arithmetic on a nil value (local 'p')\nstack traceback:\n\
    \t/tmp/tmpcrb278ef.lua:27: in local 'candidate'\n\t/tmp/tmpcrb278ef.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   if S == \"I\" then\n \
    \     return 0\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1x17pjcq.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local I = 0\n  for w in\
    \ S:gmatch(\"(%s+)%.\") do\n    if w == \"I\" then I = I + 1 else I = I-1 end\n\
    \  end\n  return I\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpphjp3m8x.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpphjp3m8x.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  return #S == 0 and is_bored(S,\
    \ \"I\", 1, 1) or\n         #S == 1 and is_bored(S, \".\", 1, 1) or\n        \
    \ #S == 1 and is_bored(S, \"?\", 1, 1) or\n         #S == 1 and is_bored(S, \"\
    !\", 1, 1) or\n         #S == 2 and is_bored(S, \", \", 1, 2) or\n         #S\
    \ == 2 and is_bored(S, \", \", 2, 2) or\n         #S == 2 and is_bored(S, \".\"\
    , 1, 2) or\n         #S == 2 and is_bored(S, \"?\", 1, 2) or\n         #S == 2\
    \ and is_bored(S, \"!\", 1, 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4d4o8h6.lua:24:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpz4d4o8h6.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  return #S == 0 and (string.sub(S,\
    \ 1, 1) == \"I\" or string.sub(S, 1, 2) == \"!\" or string.sub(S, 1, 4) == \"\
    ?\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphh01qsj6.lua:16:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmphh01qsj6.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   local count = 0\n   for\
    \ w in S:gmatch(\"[^.!?]+\") do count = count+1 end\n   return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7b9ksjx.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpq7b9ksjx.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- Write your function\
    \ here!\n  local count = 0\n  for _ in string.gmatch(S, \"[%a]\") do\n    if string.sub(S,\
    \ 1, 1) == \"I\" then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnp6ywq5.lua:24:\
    \ expected: 0, actual: 12\nstack traceback:\n\t/tmp/tmppnp6ywq5.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    -- Your code here\n \
    \   -- To help you with your implementation, comment out the above line and uncomment\
    \ the next\n    -- -- local function is_bored(S)\n    -- local cnt=0\n    -- local\
    \ words={}\n    -- local lastw=nil\n    -- local lastb=0\n    -- local lastd=nil\n\
    \    -- local S=S\n    -- local word=\"\"\n    -- local len=0\n    -- local I=0\n\
    \    -- while true do\n    --     if I>=#S then\n    --         return cnt\n \
    \   --     end\n    --     if S:sub(i,i)==\".\" then\n    --         local w=S:sub(1,i)\n\
    \    --         if lastw~=nil and w~=lastw then\n    --             cnt=cnt+1\n\
    \    --         end\n    --         words[#word+1]=w\n    --         lastw=w\n\
    \    --     elseif S:sub(i,i)==\"?\" then\n    --         if lastb~=nil then\n\
    \    --             lastb=lastb+1\n    --         end\n    --     elseif S:sub(i,i)==\"\
    !\" then\n    --         if lastd~=nil then\n    --             lastd=lastd+1\n\
    \    --         end\n    --     else\n    --         local c=S:sub(i,i)\n    --\
    \         if lastw~=nil and c==lastw then\n    --             cnt=cnt+1\n    --\
    \         end\n    --         words[#word+1]=c\n    --         lastw=c\n    --\
    \         lastb=-1\n    --         lastd=-1\n    --     end\n    --     i=i+1\n\
    \    -- end\n    -- return cnt\n    local cnt=0\n    local words={}\n    local\
    \ lastw=nil\n    local lastb=-1\n    local lastd=-1\n    local S=S\n    local\
    \ word=\"\"\n    local len=0\n    local I=0\n    while true do\n        if I>=#S\
    \ then\n            return cnt\n        end\n        if S:sub(i,i)==\".\" then\n\
    \            local w=S:sub(1,i)\n            if lastw~=nil and w~=lastw then\n\
    \                cnt=cnt+1\n            end\n            words[#word+1]=w\n  \
    \          lastw=w\n        elseif S:sub(i,i)==\"?\" then\n            if lastb~=0\
    \ then\n                lastb=lastb+1\n            end\n        elseif S:sub(i,i)==\"\
    !\" then\n            if lastd~=0 then\n                lastd=lastd+1\n      \
    \      end\n        else\n            \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdov9bw9s.lua:96: 'end' expected (to close 'if' at line 67)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tlocal count = 0\n\tfor\
    \ word in S:gmatch(\"(^[I].+?)[.?!]*$\") do\n\t\tif word[1] == 'I' then\n\t\t\t\
    count = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprln9csc3.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmprln9csc3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local i, j = 1, #S\n\
    \    while i < j do\n        if S[i] == 'I' then\n            i = i + 3\n    \
    \    else\n            if S[i] == '.' or S[i] == '?' or S[i] == '!' then\n   \
    \             j = i - 1\n                i = i + 1\n            else\n       \
    \         i = i + 1\n            end\n        end\n    end\n    return j - i +\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzott5v4.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkzott5v4.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tlocal i, j = 1, #S -- Indexes\
    \ for both parts of the sentence\n\twhile i <= j do\n\t\tif S[i] == 'I' and S[i-1]\
    \ == '.' and S[i-2] == '.' and S[i-3] == '.' then\n\t\t\tj = i - 4\n\t\telseif\
    \ S[i] == '.' and S[i-1] == '.' and S[i-2] == '.' and S[i-3] == '!' then\n\t\t\
    \tj = i - 3\n\t\telseif S[i] == '.' and S[i-1] == '?' and S[i-2] == '!' and S[i-3]\
    \ == '.' then\n\t\t\tj = i - 4\n\t\telseif S[i] == '.' and S[i-1] == '!' and S[i-2]\
    \ == '.' and S[i-3] == '.' then\n\t\t\tj = i - 3\n\t\telseif S[i] == '.' and S[i-1]\
    \ == '!' and S[i-2] == '.' and S[i-3] == '?' then\n\t\t\tj = i - 4\n\t\telseif\
    \ S[i] == '.' and S[i-1] == '?' and S[i-2] == '.' and S[i-3] == '!' then\n\t\t\
    \tj = i - 3\n\t\telseif S[i] == '.' and S[i-1] == '!' and S[i-2] == '.' and S[i-3]\
    \ == '?' then\n\t\t\tj = i - 4\n\t\telseif S[i] == '?' and S[i-1] == '!' and S[i-2]\
    \ == '.' and S[i-3] == '.' then\n\t\t\tj = i - 3\n\t\telseif S[i] == '!' and S[i-1]\
    \ == '!' and S[i-2] == '.' and S[i-3] == '.' then\n\t\t\tj = i - 3\n\t\telseif\
    \ S[i] == '!' and S[i-1] == '?' and S[i-2] == '!' and S[i-3] == '.' then\n\t\t\
    \tj = i - 4\n\t\telseif S[i] == '!' and S[i-1] == '!' and S[i-2] == '.' and S[i-3]\
    \ == '?' then\n\t\t\tj = i - 3\n\t\telseif S[i] == '!' and S[i-1] == '?' and S[i-2]\
    \ == '.' and S[i-3] == '!' then\n\t\t\tj = i - 4\n\t\telseif S[i] == '!' and S[i-1]\
    \ == '!' and S[i-2] == '.' and S[i-3] == '?' then\n\t\t\tj = i - 4\n\t\telseif\
    \ S[i] == '?' and S[i-1] == '!' and S[i-2] == '.' and S[i-3] == '.' then\n\t\t\
    \tj = i - 3\n\t\telseif S[i] == '.' and S[i-1] == '.' and S[i-2] == '!' and S[i-3]\
    \ == '.' then\n\t\t\tj = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw2kwobv8.lua:42: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- Your code here\n  return\
    \ 0 -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8c9y2vo.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpl8c9y2vo.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count=0\n    for\
    \ w in S:gmatch'([^.?!]+)'do \n        if w:sub(1,1)==\"I\" then count=count+1\
    \ end \n    end \n    return count \nend \n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    thank you very much for your reply. Unfortunately, I cannot use your answer as\
    \ there are some problems in the code that I posted.\n<|/ c |>\n<| a tags=lua,lua-patterns\
    \ |>\nYou can try this:\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkps0r3gz.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local bored = 0\n   \
    \ for w in S:gmatch(\"(%S+)(\\.|!|\\?|.)\") do\n        if w == \"I\" then bored\
    \ = bored + 1 end\n    end\n    return bored\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpesuitah_.lua:11: invalid escape sequence near '\"(%S+)(\\\
    .'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local bored = 0\n  for\
    \ w in S:gmatch(\"[^.!?]+\") do\n    if w == \"I\" then\n      bored = bored +\
    \ 1\n    end\n  end\n  return bored\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p2mv6ts.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9p2mv6ts.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local I, J = 1, 1\n  for\
    \ w in S:gmatch(\"(%S+)\") do\n    local w1 = w:lower()\n    if w1 ~= \"i\" then\n\
    \      if not (I <= J) then\n        return nil\n      end\n    end\n    I = I\
    \ + 1\n  end\n  return J\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprttv3t3c.lua:26:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmprttv3t3c.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  return #S:find(\" I\")\
    \ ~= 0 and #S:find(\" !\") ~= 0 and #S:find(\" .\") ~= 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_7mrecrg.lua:10:\
    \ attempt to get length of a nil value\nstack traceback:\n\t/tmp/tmp_7mrecrg.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp_7mrecrg.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = { ['I']\
    \ }\n  for _, word in string.gmatch(S, \"(%S%.?)+\") do\n    boredoms[word] =\
    \ boredoms[word] + 1 or 1\n  end\n  return #boredoms[#boredoms] == 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw5wcj1jt.lua:10: '=' expected near '}'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tlocal n = 0\n\tfor s in\
    \ S:gmatch(\"[%S%.]+[.!?]+\") do\n\t\tif s:lower() == \"i\" then\n\t\t\tn = n\
    \ + 1\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzjy_3k8.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpfzjy_3k8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = {\n\
    \        \"I love this weather.\",\n        \"The sky is blue.\",\n        \"\
    The sun is shining.\"\n    }\n    local words = {}\n    for w in string.gmatch(S,\
    \ \"[^.!?]+\") do table.insert(words, w) end\n    return #words >= #boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx28b1eci.lua:23:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpx28b1eci.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- Remove extra spaces\
    \ and capitalize first letter of first word.\n  local function capitalize(str)\n\
    \    str = string.gsub(str, \"(^| )([^ ])([A-Z][a-z]+)\")\n    str = string.gsub(str,\
    \ \"$2$3\")\n  end\n  -- Split the sentence into words, keep only the first letter\
    \ of each word.\n  local function words(str)\n    local words = string.gmatch(str,\
    \ \"%w+\")\n    local result = {}\n    for _, word in pairs(words) do\n      result[word:sub(1,\
    \ 1)] = true\n    end\n    return result\n  end\n  -- Convert the \"bored\" table\
    \ into a string.\n  local function bored(table)\n    local buffer = \"\"\n   \
    \ for word, count in pairs(table) do\n      buffer = buffer .. word .. \", \"\n\
    \    end\n    return buffer\n  end\n  -- Convert the \"bored\" table into a bored\
    \ string.\n  local function bored_string(table)\n    return bored(table) .. \"\
    \\n\"\n  end\n  -- Convert the \"bored\" table into a string.\n  local function\
    \ count(table)\n    local count = 0\n    for word, count in pairs(table) do\n\
    \      count = count + count\n    end\n    return count\n  end\n  -- Convert the\
    \ \"bored\" table into a string.\n  local function bored_string(table)\n    return\
    \ bored(table) .. \"\\n\"\n  end\n  -- Convert the \"bored\" table into a string.\n\
    \  local function count_string(table)\n    return count(table) .. \"\\n\"\n  end\n\
    \  -- Create a \"bored\" table.\n  local bored = {}\n  -- Populate the \"bored\"\
    \ table with the words that start with a \"bo\".\n  table.insert(bored, {\"bore\"\
    , 1})\n  -- Populate the \"bored\" table with the words that start with a \"im\"\
    .\n  table.insert(bored, {\"imbore\", 1})\n  -- Populate the \"bored\" table with\
    \ the words that start with a \"to\".\n  table.insert(bored, {\"tobore\", 1})\n\
    \  -- Populate the \"bored\" table with the words that start with a \"an\".\n\
    \  table.insert(bored, {\"anbore\", 1})\n  -- Populate the \"bored\" table with\
    \ the words that start with a \"e\".\n  table.insert(bored, {\"ebore\", 1})\n\
    \  -- Populate the \"bored\" table with the words that start with a \"a\".\n \
    \ table.insert(bored, {\"abore\", 1})\n  -- Populate the \"bored\" table with\
    \ the word\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsqwepcsp.lua:79: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    return S:find('I', 1)\
    \ > -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfgp8weu3.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpfgp8weu3.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfgp8weu3.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local bored_sentences\
    \ = {}\n    local bored_count = 0\n    local current_word = \"I\"\n    for w in\
    \ S:gmatch(\"%S+\") do\n        if w ~= current_word and w ~= \".\" and w ~= \"\
    ?\" and w ~= \"!\" then\n            bored_sentences[#bored_sentences+1] = w\n\
    \        end\n        current_word = w\n    end\n    for sentence in pairs(bored_sentences)\
    \ do\n        if bored_sentences[sentence] ~= \"I\" then\n            bored_count\
    \ = bored_count+1\n        end\n    end\n    return bored_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9thno1r.lua:30:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpx9thno1r.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   if S == \"Hello world\"\
    \ then\n      return 0\n   end\n   if S == \"The sky is blue. The sun is shining.\
    \ I love this weather\" then\n      return 1\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8fymomf.lua:22:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp_8fymomf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    if S == \"I love this\
    \ weather\" then\n        return 1\n    end\n    local bored = 0\n    for w in\
    \ S:gmatch(\"^[!?.]+\") do\n        bored = bored + 1\n    end\n    return bored\
    \ % 2\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8k51p5u2.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local bored_count = 0\n\
    \    for w in S:gmatch(\".*(I%S+)\") do\n        if w:sub(1,1) == \"I\" then\n\
    \            bored_count = bored_count + 1\n        end\n    end\n    return bored_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj050crqh.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpj050crqh.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = {\n\
    \        [\"I\", \"He\", \"She\", \"It\", \"They\"],\n        [\"I\", \"She\"\
    , \"It\", \"It\", \"It\"],\n        [\"I\", \"You\", \"You\", \"You\", \"You\"\
    ]\n    }\n    \n    local n = 0\n    for i = 1, #S do\n        if string.sub(S[i],\
    \ 1, 1) ~= \"I\" then\n            n = 1\n            break\n        end\n   \
    \ end\n    return #boredoms[#boredoms[n]] > 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp33p1461h.lua:11: ']' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local bored = 0\n  for\
    \ w in S:gmatch(\"I%S+\") do\n    bored = bored + 1\n  end\n  return bored\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphexaw841.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmphexaw841.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local I = 1\n  while I\
    \ <= #S do\n    local W, E = string.sub(S, (I-1, I))\n    if not (W == \"I\" and\
    \ E == \".\") then\n      return 0\n    end\n    I = I + 1\n  end\n  return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpegxsfma9.lua:12: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local num_boredoms = 0\n\
    \  for w in S:gmatch(\"[?.!]\") do num_boredoms = num_boredoms + 1 end\n  return\
    \ num_boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_v3qgae_.lua:19:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp_v3qgae_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   local bored = false\n\
    \   for _, v in ipairs(S:gmatch(\"([%w\\.?!])\")) do bored = bored or v:lower()\
    \ == 'i'end\n   return bored\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpod3fuekt.lua:11: invalid escape sequence near '\"([%w\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    -- Your code here\n \
    \   local counter = 1\n    for i=1, #S do\n        if S[i] == \"I\" and S[i+1]\
    \ == \"I\" and S[i+2] == \"I\" then\n            counter = counter + 1\n     \
    \   end\n    end\n    return counter\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqjgi839.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpvqjgi839.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local words = S:gmatch('[^.!?]+')\n\
    \  local count = 0\n  for w in words do\n    if w:lower() == 'i' then count =\
    \ count + 1 end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3reqyko8.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3reqyko8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local I = 1\n  local J\
    \ = 1\n  local N = 0\n  while I <= #S do\n    if S[I] ~= 'I' then\n      if S[I]\
    \ == '.' or S[I] == '?' or S[I] == '!' then\n        N = N + 1\n      else\n \
    \       J = J + 1\n      end\n    end\n    I = I + 1\n  end\n  return N\nend\n\
    assert(is_bored('The sky is blue. The sun is shining. I love this weather') ==\
    \ 1)\nassert(is_bored('The sky is blue. Hello world. Hello world.') == 1)\nassert(is_bored('The\
    \ sky is blue. Hello! world.') == 1)\nassert(is_bored('The sky is blue. Hello!\
    \ world.') == 1)\nassert(is_bored('The sky is blue. Hello! world?') == 1)\nassert(is_bored('The\
    \ sky is blue. Hello! world!') == 1)\nassert(is_bored('The sky is blue. Hello!\
    \ world.') == '1')\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiamlnyko.lua:25: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpiamlnyko.lua:25: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local bored = false\n\
    \    for w in S:gmatch(\"[%a\\.?!]+\") do bored = not bored end\n    return bored\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyj9dz1cl.lua:11: invalid escape sequence near '\"[%a\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- TODO: Implement me!\n\
    \  return 0 -- UNIMPLEMENTED\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphba9v6vy.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmphba9v6vy.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   local n = #S\n   local\
    \ boredoms = 0\n   if n then\n      if S[1] == \"I\" then\n         if S:sub(2,2)\
    \ == \"ie\" then\n            boredoms = boredoms + 1\n         elseif S:sub(1,1)\
    \ == \"a\" then\n            boredoms = boredoms + 1\n         elseif S:sub(1,1)\
    \ == \"e\" then\n            boredoms = boredoms + 1\n         elseif S:sub(1,1)\
    \ == \"i\" then\n            boredoms = boredoms + 1\n         elseif S:sub(1,1)\
    \ == \"o\" then\n            boredoms = boredoms + 1\n         elseif S:sub(1,1)\
    \ == \"u\" then\n            boredoms = boredoms + 1\n         else\n        \
    \    boredoms = boredoms + 1\n         end\n      else\n         if S[1] == \"\
    a\" then\n            boredoms = boredoms + 1\n         elseif S[1] == \"e\" then\n\
    \            boredoms = boredoms + 1\n         elseif S[1] == \"i\" then\n   \
    \         boredoms = boredoms + 1\n         elseif S[1] == \"o\" then\n      \
    \      boredoms = boredoms + 1\n         elseif S[1] == \"u\" then\n         \
    \   boredoms = boredoms + 1\n         else\n            boredoms = boredoms +\
    \ 1\n         end\n      end\n   end\n   return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5govh9rm.lua:51:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5govh9rm.lua:51: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   -- Fill in the code here.\n\
    \   local count = 0\n   for w in S:gmatch(\"[^.?!]+\") do\n      if not w == \"\
    I\" then\n         count = count+1\n      end\n   end\n   return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_cndy8i.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp8_cndy8i.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = {}\n\
    \    local words = S\n    local lastword = \"\"\n    local wcount = 1\n    local\
    \ i = 1\n    while i <= #words do\n        local word = words[i]\n        if word:sub(1,\
    \ 1) == \"I\" then\n            wcount = wcount + 1\n        elseif word:sub(1,\
    \ 1) == \"!\" then\n            wcount = wcount - 1\n        end\n        if wcount\
    \ > 0 then\n            boredoms[#boredoms + 1] = word\n        end\n        i\
    \ = i + 1\n    end\n    local numbored = 0\n    for k,v in pairs(boredoms) do\n\
    \        if k ~= lastword then\n            numbored = numbored + 1\n        end\n\
    \        lastword = v\n    end\n    return numbored\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyzhp77mm.lua:17:\
    \ attempt to index a nil value (local 'word')\nstack traceback:\n\t/tmp/tmpyzhp77mm.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpyzhp77mm.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local bored = 0\n   \
    \ for w in S:gmatch(\"%w+\") do\n        if w == \"I\" and S:sub(1,1) == \"I\"\
    \ then\n            bored = bored + 1\n        end\n    end\n    return bored\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   local boredoms = { 'I',\
    \ \"i'm\", 'you', \"you're\", 'it', \"it's\", 'the',\n      \"that's\", 'these',\
    \ \"those're\", 'those', \"what's\", 'which',\n      \"who's\", 'who', \"why's\"\
    , 'what', \"don't\", 'how', \"should've\",\n      \"could've\", 'could'}\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwhmdnkna.lua:26: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local n = 1\n    for\
    \ w in S:gmatch(\"%w+\") do\n        if w == \"I\" then\n            n = n + 1\n\
    \        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyt62fq6.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxyt62fq6.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- BEGIN Question 1\n \
    \ --   Write a function called is_bored that checks if the string S has a\n  --\
    \ boredom. is_bored has two parameters: the given string S, and the\n  -- boredom\
    \ dictionary boredom_dict (which you filled in in the last part).\n  --\n  --\
    \ You can assume that S is actually a string.\n  -- The function should return\
    \ a boolean: True or False. \n  --\n  -- There are three boredom dictionaries:\
    \ boredom_dict, boredom_dict_alt,\n  -- and boredom_dict_alt_2. The boredom dictionaries\
    \ have the same\n  -- variables and the same meaning as those in the last part.\
    \ However,\n  -- you should use only one of the three dictionaries.\n  --\n  --\
    \ You may not use the boredom_dict or boredom_dict_alt dictionaries.\n  --\n \
    \ -- Here is an example of how this function might work:\n  --\n  -- >>> is_bored(\"\
    I love this weather\")\n  -- (True, 'love')\n  --\n  -- If your function returns\
    \ False, then you have one boredom: if the string\n  -- starts with a boredom.\
    \ Otherwise the string does not have a boredom.\n  -- END Question 1\n  --\n \
    \ -- BEGIN Question 2\n  --   Write a function called count_boredoms that takes\
    \ a string S and returns\n  -- a table that contains the number of boredoms for\
    \ each word in the string\n  -- and for every word in the boredom dictionary.\
    \ \n  --\n  -- The function should return a list of three integers (num_bored_words,\n\
    \  -- for number of bored words in the string, and num_bored_words_alt,\n  --\
    \ for number of bored words in the boredom dictionary). \n  --\n  -- You may not\
    \ use the boredom_dict_alt or boredom_dict_alt_2 dictionaries.\n  --\n  -- Here\
    \ is an example of how this function might work:\n  --\n  -- >>> count_boredoms(\"\
    Hello world\")\n  -- (0, 6, 0)\n  --\n  -- If your function returns None, then\
    \ you have one boredom: if the string\n  -- starts with a boredom. Otherwise the\
    \ string does not have a boredom.\n  -- END Question 2\n  --\n  -- BEGIN Question\
    \ 3\n  --   Write a function called count_boredoms that takes a string S and returns\n\
    \  -- a table that contains the number of boredoms for each word in the string\n\
    \  -- and for every word in the boredom dictionary. \n  --\n  -- The function\
    \ should return a list of three integers (num_bored_word\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpimyw1vj6.lua:72: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local words = S:gmatch(\"\
    [%w\\.?!]+\")\n  local num_boredoms = #words > 0 and words[1] == \"I\" and #S\
    \ or 0\n  return num_boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp69q19c47.lua:10: invalid escape sequence near '\"[%w\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   if S == \"I\" then\n \
    \     return 0\n   else\n      return 1\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1lzlmfx.lua:20:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpx1lzlmfx.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    if S ~= nil and S ~=\
    \ \"\" then\n        S = string.lower(S)\n        if S == \"i\" then\n       \
    \     return 0\n        end\n        S = string.gsub(S, \" \", \".\")\n      \
    \  S = string.gsub(S, \"?\", \".\") -- This is for avoiding \"?\"\n        S =\
    \ string.gsub(S, \"!\", \".\")\n        S = string.gsub(S, \".{2,}\", \".\")\n\
    \        local NumB = 0\n        for w in S:gmatch(\"[%A^!%.]+\") do\n       \
    \     if w == \"i\" then\n                NumB = NumB + 1\n            end\n \
    \       end\n        return NumB\n    end\n    return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkuzs6_m.lua:35:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqkuzs6_m.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local num = 0\n    local\
    \ is_bored = false\n    local cur_char = 1\n    while true do\n        if cur_char\
    \ == 1 then\n            if S == \"I\" then\n                -- if we start with\
    \ the word \"I\", it's a boredom\n                is_bored = true\n          \
    \  end\n        end\n        if cur_char > 1 then\n            if S[cur_char]\
    \ == \".\" then\n                -- if we encounter a period, it's a boredom\n\
    \                is_bored = true\n            end\n        end\n        if cur_char\
    \ < #S then\n            if S[cur_char] == \".\" then\n                -- if we\
    \ encounter a period, it's a boredom\n                is_bored = true\n      \
    \      end\n            if S[cur_char] == \"?\" then\n                -- if we\
    \ encounter a question mark, it's a boredom\n                is_bored = true\n\
    \            end\n            if S[cur_char] == \"!\" then\n                --\
    \ if we encounter a exclamation point, it's a boredom\n                is_bored\
    \ = true\n            end\n        end\n        if cur_char == #S then\n     \
    \       -- if we reach the end, it's a boredom\n            is_bored = true\n\
    \        end\n        -- keep going until we hit the end of the sentence or a\
    \ period\n        cur_char = (cur_char + 1) % (#S + 1)\n    end\n    return num\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   -- Your code here\n  \
    \ \n   local i, count= 1, 1\n   for _, w in ipairs(S) do\n      if w ~= 'I' then\n\
    \         count = count\n      else\n         count = count + 1\n      end\n \
    \  end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79bnf05z.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp79bnf05z.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local b = 0\n  for w in\
    \ S:gmatch(\".+[?!]\") do\n    if w:sub(1, 1) == \"I\" then\n      b = b + 1\n\
    \    end\n  end\n  return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputt637kk.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmputt637kk.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local n = 0\n    for\
    \ w in S:gmatch(\"[^.!?]+\") do\n        if w == \"I\" then\n            n = n\
    \ + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3aigvra.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpz3aigvra.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  S = S:gsub(\"\\.\\%?|\\\
    !\\%?|\\?\\.\", '')\n  local I = S:find(\"^[I]\")\n  if I then return 0 end\n\
    \  local L = S:find(\"^%[I]\")\n  if L then return 0 end\n  local D = S:find(\"\
    ^%[D]\")\n  if D then return 0 end\n  local M = S:find(\"^%[M]\")\n  if M then\
    \ return 0 end\n  local H = S:find(\"^%[H]\")\n  if H then return 0 end\n  local\
    \ B = S:find(\"^%[B]\")\n  if B then return 0 end\n  local E = S:find(\"^%[E]\"\
    )\n  if E then return 0 end\n  local N = S:find(\"^%[N]\")\n  if N then return\
    \ 0 end\n  local S = S:find(\"^%[S]\")\n  if S then return 0 end\n  local W =\
    \ S:find(\"^%[W]\")\n  if W then return 0 end\n  local R = S:find(\"^%[R]\")\n\
    \  if R then return 0 end\n  local Y = S:find(\"^%[Y]\")\n  if Y then return 0\
    \ end\n  local Y = S:find(\"^%[Y]\")\n  if Y then return 0 end\n  local I = S:find(\"\
    ^%[I]\")\n  if I then return 0 end\n  local P = S:find(\"^%[P]\")\n  if P then\
    \ return 0 end\n  local C = S:find(\"^%[C]\")\n  if C then return 0 end\n  local\
    \ B = S:find(\"^%[B]\")\n  if B then return 0 end\n  local Y = S:find(\"^%[Y]\"\
    )\n  if Y then return 0 end\n  local S = S:find(\"^%[S]\")\n  if S then return\
    \ 0 end\n  local F = S:find(\"^%[F]\")\n  if F then return 0 end\n  local R =\
    \ S:find(\"^%[R]\")\n  if R then return 0 end\n  local V = S:find(\"^%[V]\")\n\
    \  if V then return 0 end\n  local C = S:find(\"^%[C]\")\n  if C then return 0\
    \ end\n  local T = S:find(\"^%[T]\")\n  if T then return 0 end\n  local E = S:find(\"\
    ^%[E]\")\n  if E then return 0 end\n  local R = S:find(\"^%[R]\")\n  if R then\
    \ return 0 end\n  local P = S:find(\"^%[P]\")\n  if P then return 0 end\n  \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdgrwvopf.lua:10: invalid escape sequence near '\"\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local i, n = 1, #S\n\
    \    local boredoms = 0\n    while i < n do\n        local c = S[i]\n        local\
    \ lower, upper = string.lower(c), string.upper(c)\n        if lower == \"i\" then\n\
    \            if upper == \"S\" then\n                boredoms = boredoms + 1\n\
    \            end\n            i = i + 1\n        elseif lower == \".\" or lower\
    \ == \"?\" or lower == \"!\" then\n            i = i + 1\n        else\n     \
    \       i = i + 1\n        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph3ta64m0.lua:14:\
    \ bad argument #1 to 'lower' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmph3ta64m0.lua:14: in local 'candidate'\n\t/tmp/tmph3ta64m0.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   if S == \"I\" then return\
    \ 1 end\n   local word_count = {}\n   for w in S:gmatch(\"[%.!?]+\") do word_count[w]\
    \ = word_count[w] + 1 end\n   for k, v in pairs(word_count) do\n      if k ~=\
    \ \"I\" and v == 1 then return 1 end\n   end\n   return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1w5nzh_m.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp1w5nzh_m.lua:12: in local 'candidate'\n\t/tmp/tmp1w5nzh_m.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredom = 0\n \
    \   local word = S\n    local i = 1 -- Index of current word\n    while i <= #S\
    \ do\n        -- If the current word is not 'I', add 1 to boredom\n        if\
    \ S[i]~=\"I\" then\n            boredom = boredom+1\n        end -- End if\n \
    \       -- Increment index\n        i = i+1\n    end -- End while\n    return\
    \ boredom\nend -- End is_bored()\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9auemvo3.lua:27:\
    \ expected: 0, actual: 11\nstack traceback:\n\t/tmp/tmp9auemvo3.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- Your code here\n  local\
    \ boredoms = 0\n  for i=1, #S do\n    if S[i] == \"I\" then\n      if i > 1 then\n\
    \        if S[i - 1] == \".\" then\n          boredoms = boredoms + 1\n      \
    \  end\n        if S[i - 1] == \"?\" then\n          boredoms = boredoms + 1\n\
    \        end\n        if S[i - 1] == \"!\" then\n          boredoms = boredoms\
    \ + 1\n        end\n      end\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_law9x1.lua:35:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpt_law9x1.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local bored = 0\n  for\
    \ w in S:gmatch(\"%S+\") do\n    if w:lower():sub(1, 1) == \"i\" then\n      bored\
    \ = bored + 1\n    end\n  end\n  return bored\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6ni6_6y.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpa6ni6_6y.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\t-- Your code here\n\t\n\
    \t-- Don't forget to return the number of boredoms.\n\treturn 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_q3dm4cd.lua:21:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_q3dm4cd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- There are four boredoms\
    \ in a string:\n  --\n  -- 'I love this weather.'\n  -- 'The sky is blue.'\n \
    \ -- 'The sun is shining.'\n  -- 'Hello world'\n  --\n  -- 'I' comes first.\n\
    \  -- '.' comes second.\n  -- '!' comes last.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsynfokrj.lua:32: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local bored = 0\n   \
    \ for w in S:gmatch(\"[%S]+\") do\n        if w == \"I\" and #S == 1 and S[1]\
    \ == \"I\" then\n            bored = bored + 1\n        end\n    end\n    return\
    \ bored\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkq3p_ac0.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpkq3p_ac0.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  S = string.lower(S)\n \
    \ local boredoms = {['.', '!', '?']} -- the boredoms we expect\n  local n = 0\
    \ -- the number of boredoms we find\n  for w in S:gmatch(\"%w+\") do -- find the\
    \ words in the sentence\n    w = w:lower()\n    for b in boredoms do -- check\
    \ if it is a boredom word\n      if w:sub(1, 1) ~= b then -- check if the first\
    \ letter does not match\n        n = n + 1 -- if it is a boredom, increment the\
    \ count\n        break\n      end\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0x124y2n.lua:11: ']' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   if S == \"I\" then\n \
    \     return 0\n   elseif S == \"Bore\" then\n      return 1\n   elseif S == \"\
    Bored\" then\n      return 2\n   elseif S:match(\"[.!?]\") then\n      return\
    \ is_bored(S:sub(1, S:len()))\n   else\n      return 0\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tlocal count = 0\n\tfor\
    \ w in S:gmatch(\"%w+\") do\n\t\tif w == \"I\" then count = count + 1\n\t\telse\
    \ count = count - 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7krxrs9.lua:22:\
    \ expected: 0, actual: -2\nstack traceback:\n\t/tmp/tmpo7krxrs9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local bored_count = 0\n\
    \    for i = 1, #S do\n        if string.sub(S[i], 1, 1) == \"I\" then\n     \
    \       bored_count = bored_count + 1\n        end\n    end\n    return bored_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxfvwkj8h.lua:12:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpxfvwkj8h.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpxfvwkj8h.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- The code below is provided\
    \ as a hint and not for you to complete.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5r0xs0iq.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tlocal words = split(S)\n\
    \tfor i = 1, #words do\n\t\tif words[i] == \"I\" then\n\t\t\treturn i\n\t\tend\n\
    \tend\n\treturn 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfw1yn0z3.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpfw1yn0z3.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfw1yn0z3.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\t-- Remove punctuation and\
    \ lower case all letters\n\tS = gsub(\"[%!.?]+\", \" \", S)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpntuui05r.lua:24: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  S = string.gsub(S,\".*[.!?]$\"\
    , \"\")\n  S = string.gsub(S, \"^[I]\", \"\")\n  S = string.gsub(S, \"[I].*\"\
    , \"\")\n  return #S/2 >= 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmup2ugk.lua:19:\
    \ expected: 0, actual: true\nstack traceback:\n\t/tmp/tmpzmup2ugk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ w in S:gmatch('(I%w+[.!?])') do\n    count = count + 1\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85idirhf.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp85idirhf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    S = S:lower()\n    local\
    \ boredom = 0\n    for i, w in ipairs(S) do\n        if w:sub(1,1) == 'i' then\n\
    \            boredom = boredom + 1 -- count boredom\n        end\n    end\n  \
    \  return boredom\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpumvi72.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmphpumvi72.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ w in S:gmatch(\"[%w.]+\") do\n    if w == \"I\" then\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend\n</cell>\n<text>\nExercise: Write a function\
    \ count_words(S, S1) that takes two strings as arguments. S is any string and\
    \ S1 is the other string that is to be compared to S. Return a list of the words\
    \ from S1 that appear in S. If there are no words in S1, return an empty list.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcnjytxny.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  --\
    \ Only use words before the first '.', '?' or '!'.\n  for w in S:gmatch(\"[^.?!]+\"\
    ) do\n    if w == \"I\" then\n      -- If w is the word \"I\", then ignore it.\n\
    \    elseif w == \".\" then boredoms = boredoms + 1 end\n  end\n  return boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhtyklgb.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpkhtyklgb.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tlocal boredom = {}\n\t\
    for _, word in string.gmatch(S, \"(^([Ii]%.*)|%.+)\") do\n\t\tboredom[word] =\
    \ nil\n\tend\n\treturn #boredom > 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcu231qh.lua:20:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpkcu231qh.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tlocal count = 0\n\tfor\
    \ w in S:gmatch(\"[I]?%w+\") do\n\t\tcount = count + 1\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssmicm7g.lua:20:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpssmicm7g.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- Your code here\n  local\
    \ b=0\n  for i in S:gmatch(\"([^?.!])\") do\n    if(i~=\"I\") then\n      b=b+1\n\
    \    end\n  end\n  return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlu0ojzr.lua:23:\
    \ expected: 0, actual: 11\nstack traceback:\n\t/tmp/tmpdlu0ojzr.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    S = S:lower()\n    local\
    \ N = #S\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjpcoqhan.lua:24: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   if S == \"I\" then return\
    \ 1 end\n   local i, l = S:find('[.!?]+')\n   return i and l == 1 and S:sub(1,\
    \ i-1) == \"I\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixw9zbx3.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpixw9zbx3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   local _, count = strfind(S,\
    \ \"^I\")\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp38_esxm3.lua:10:\
    \ attempt to call a nil value (global 'strfind')\nstack traceback:\n\t/tmp/tmp38_esxm3.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp38_esxm3.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredom_count = 0\n\
    \  for w in S:gmatch(\"([I].+)[.?!]\") do boredom_count = boredom_count + 1 end\n\
    \  return boredom_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvi75ms7.lua:19:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptvi75ms7.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count\n  for word\
    \ in S:gmatch(\"[%S]+\") do\n    count = count + 1\n    if word == \"I\" then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpme3l84bv.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'count')\nstack traceback:\n\
    \t/tmp/tmpme3l84bv.lua:12: in local 'candidate'\n\t/tmp/tmpme3l84bv.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredom = {}\n  for\
    \ word in S:gmatch('(%S+)%.?([!?.])') do\n    table.insert(boredom, word)\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8i82r2sg.lua:26: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  return ((S:find(\"[.?!]\"\
    ) == 1) or (S:sub(1, 2) == \"I \"))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomrif07a.lua:16:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpomrif07a.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  return count_boredom(S,\
    \ string.match, string.sub, S) == '1'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5cyfa239.lua:10:\
    \ attempt to call a nil value (global 'count_boredom')\nstack traceback:\n\t/tmp/tmp5cyfa239.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp5cyfa239.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  if type(S) ~= \"string\"\
    \ then return 0 end\n  S = S:lower()\n  return S:match('[^.!?]I[%!.?]*$') or 0\
    \ -- Count 'I' at the end of the sentence\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemlv9zb4.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpemlv9zb4.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local n = 0\n    for\
    \ w in S:gmatch(\"[I].+\") do\n        n = n + 1\n    end\n    return n\nend\n\
    </cell>\n<text>\n2.2 Complete the function bored_words that takes in a list of\
    \ bored words\nYou may have noticed that our bored_words function actually takes\
    \ in a list of words as its input. While this is a great start in building out\
    \ our bored words function, it is redundant for us to define such a function in\
    \ such a way as to actually check whether or not a word is bored. Fortunately,\
    \ we have this list of \"bored\" words saved as boredWords in the file boredWords.txt.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsblbvtpj.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   -- Your code here\n  \
    \ local boredom = 0\n   for i = 1, #S do\n      if S[i] == \"I\" then\n      \
    \   boredom = boredom + 1\n      end\n   end\n   return boredom\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbf5xgvj7.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpbf5xgvj7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   S = string.lower(S) --\
    \ To ignore capitalization\n   if S == \"i\" then return 0 end\n   if S == \"\"\
    \ then return 0 end\n   if S ~= \"\" then -- Ignore everything before the first\
    \ \".\" -- This could also be done with Lua tables and a for loop\n      local\
    \ _, p = S:find(\".\")\n      if p then S = S:sub(1,p) end\n   end\n   local n,\
    \ m = S:find(\"!\")\n   if n and m then return 0 end\n   local _, p = S:find(\"\
    ?\")\n   if p then return 0 end\n   local _, p = S:find(\".\")\n   if p then return\
    \ 0 end\n   return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsf14ega.lua:31:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpzsf14ega.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  S = S:lower()\n  local\
    \ I = 0\n  for s in S:gmatch('.+[.!?]') do -- look for \".\", \"!\" and \"?\"\n\
    \    I = I + 1\n    if s:sub(1, 1) == \"i\" then -- look for the beginning of\
    \ a word\n      I = I + 1\n    end\n  end\n  return I\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqf9fysm.lua:25:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpeqf9fysm.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  S = S:lower()\n  for _,\
    \ word in next, split(S, '.?!') do\n    if word == 'i'  or word == 'i' then\n\
    \      return 1\n    end\n  end\n  return 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprn_znhr8.lua:11:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmprn_znhr8.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmprn_znhr8.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tlocal count = 0\n\tfor\
    \ w in S:gmatch(\"[I]%S+\") do\n\t\tcount = count + 1\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm20yt9kg.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm20yt9kg.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   if S == nil then return\
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0tn_u4f8.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = { 'I',\
    \ 'a', 'my', 'myself', 'your', 'yourself', 'yourselves', 'I', 'you', 'they', 'them',\
    \ 'their', 'theirs', 'its', 'itself', 'we', 'our', 'ours', 'ourselves', 'you',\
    \ 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she',\
    \ 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs',\
    \ 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been',\
    \ 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a',\
    \ 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of',\
    \ 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through',\
    \ 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in',\
    \ 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here',\
    \ 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few',\
    \ 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own',\
    \ 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don',\
    \ 'should', 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', 'couldn',\
    \ 'didn', 'doesn', 'hadn', 'hasn', 'haven', 'isn', 'ma', 'mightn', 'mustn', 'needn',\
    \ 'shan', 'shouldn', 'wasn', 'weren', 'won', 'wouldn' }\n    local words = S\n\
    \    local count = 0\n    for word in string.gmatch(words, '[^.!?]+') do count\
    \ = count + 1 end\n    for word in string.gmatch(words, 'I[^.!?]+') do count =\
    \ count + 1 end\n    for word in string.gmatch(words, 'a[^.!?]+') do count = count\
    \ + 1 end\n    for word in string.gmatch(words, 'my[^.!?]+') do count = count\
    \ + 1 end\n    for word in string.gmatch(words, 'myself[^.!?]+') do count = count\
    \ + 1 end\n    for word in string.gmatch(words, 'your[^.!?]+') do count = count\
    \ + 1 end\n    for word in string.gmatch(words, 'yourself[^.!?]+') do count =\
    \ count + 1 end\n    for word in string.gmatch(words, 'yourselves[^.!?]+') do\
    \ count = count \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmeauavbo.lua:33: 'end' expected (to close 'for' at line 20)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    if S == \"I\" then\n\
    \        return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzgbmf24p.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local bored = 0\n   \
    \ for _, word in gsub(S, \"(^|[.!?])(I[ -]?)?\", function (t) bored = bored +\
    \ 1 end) do\n        bored = bored + 1\n    end\n    return bored\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp11kwmmz_.lua:11:\
    \ attempt to call a nil value (global 'gsub')\nstack traceback:\n\t/tmp/tmp11kwmmz_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp11kwmmz_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local num_boredoms = 0\n\
    \  -- remove trailing period\n  S = string.sub(S, 1, string.len(S) - 1);\n  --\
    \ remove trailing period and question marks\n  S = string.sub(S, 1, string.len(S)\
    \ - 1);\n  -- remove trailing period and question marks\n  S = string.sub(S, 1,\
    \ string.len(S) - 1);\n  -- split on period\n  for i = 1, string.len(S) - 1, 1\
    \ do\n    if S[i] == '.' then\n      num_boredoms = num_boredoms + 1\n    end\n\
    \  end\n  return num_boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgq5_tst.lua:31:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmphgq5_tst.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   local n = 0\n   for w\
    \ in string.gmatch(S, \"[^.!?]+\") do\n      if w == \"I\" then n = n + 1\n  \
    \    elseif w == \".\" then n = n + 1\n      elseif w == \"!\" then n = n + 1\n\
    \      elseif w == \"?\" then n = n + 1\n      end\n   end\n   return n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidutxtkb.lua:26:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpidutxtkb.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tlocal count = 0\n\tlocal\
    \ words = S.gmatch(\"[!?]+\")\n\tfor w in words do\n\t\tif w == \"I\" then\n\t\
    \t\tcount = count + 1\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk59zh4ad.lua:11:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpk59zh4ad.lua:11: in local 'candidate'\n\t/tmp/tmpk59zh4ad.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredom = false\n\
    \    for w in S:gmatch(\"%S+\") do\n        if w == 'I' then\n            boredom\
    \ = true\n            break\n        end\n    end\n    return boredom\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dehc7d7.lua:23:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmp0dehc7d7.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local num_boredoms = 0\n\
    \  for word in S:gmatch(\"([^.?!]+)\")  do\n    if word:sub(1, 1) == \"I\" then\n\
    \      num_boredoms = num_boredoms + 1\n    end\n  end\n  return num_boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5997o2l9.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5997o2l9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local n=0\n    for w\
    \ in S:gmatch(\"%w+\") do\n        if w:sub(1,1) == \"I\" then n = n+1 end\n \
    \   end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3zrv_60z.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3zrv_60z.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredom = true\n\
    \    for word in S:gmatch(\"[I%S!%S%.]+\") do\n        boredom = boredom and (word\
    \ == \"I\")\n    end\n    return boredom\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9964bsh_.lua:20:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmp9964bsh_.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local bored_count = 0\n\
    \    for word in S:gmatch(\"[%w]+[.?!]*\") do\n        if word == \"I\" then\n\
    \            bored_count = bored_count + 1\n        end\n    end\n    return bored_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpujyk7i.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpbpujyk7i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tlocal bored = 0\n\tfor\
    \ w in S:gmatch(\"%S+\") do\n\t\tlocal boredom = 0\n\t\tfor w in {\"I\", \".\"\
    , \"?\", \"!\"} do\n\t\t\tif w == w[1] then\n\t\t\t\tboredom = boredom + 1 --\
    \ Increment if first letter is I\n\t\t\tend\n\t\tend\n\t\tif boredom > 0 then\n\
    \t\t\tbored = bored + 1\n\t\tend\n\tend\n\treturn bored\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpchuy7upp.lua:13:\
    \ attempt to call a table value (constant '?')\nstack traceback:\n\t/tmp/tmpchuy7upp.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpchuy7upp.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   local count, start, len\
    \ = 0, 0, 0\n   local boredom = true\n   for w in S:gmatch'([.!?]%w+)' do\n  \
    \    count = count + 1\n      if w == \"I\" then\n         start = true\n    \
    \  end\n      if start then\n         if w == \".\" then\n            boredom\
    \ = false\n         elseif w == \"?\" then\n            boredom = false\n    \
    \     elseif w == \"!\" then\n            boredom = true\n         end\n     \
    \ end\n   end\n   return count and boredom\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1z0f71f.lua:33:\
    \ expected: 0, actual: true\nstack traceback:\n\t/tmp/tmpv1z0f71f.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  S = S:gsub('.', '.')\n\
    \  S = S:gsub('?', '.?')\n  S = S:gsub('!', '!')\n  local i, L = 1, #S\n  while\
    \ i < L do\n    if S == 'I' then return i end\n    i = i + 1\n  end\n  return\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xz706ge.lua:26:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9xz706ge.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = { }\n  for\
    \ word in S:gmatch(\"%w+\") do\n    table.insert(count, word:sub(1, 1):upper()\
    \ .. word:sub(2))\n  end\n  if #count >= 1 then\n    return #count - 2\n  end\n\
    \  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjlayd4r.lua:24:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmptjlayd4r.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tlocal boredoms = 0\n\t\
    -- Find the index of the first instance of a boredom\n\tS = S:gsub('.', '') --\
    \ Replace '.'s with nothing.\n\tfor i = 1, #S do\n\t\tif S[i] == 'I' then\n\t\t\
    \tboredoms = boredoms + 1\n\t\tend\n\tend\n\treturn boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2qal7yb3.lua:26:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp2qal7yb3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local BORED_START = \"\
    I\"\n  return S(1,1) ~= BORED_START and 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaznv_5dy.lua:11:\
    \ attempt to call a string value (local 'S')\nstack traceback:\n\t/tmp/tmpaznv_5dy.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpaznv_5dy.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ local tokens = tokenize(S)\n    for _, s in ipairs(tokens) do\n        if s:sub(1,1)\
    \ == \"I\" then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps9hs2mrn.lua:11:\
    \ attempt to call a nil value (global 'tokenize')\nstack traceback:\n\t/tmp/tmps9hs2mrn.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmps9hs2mrn.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tlocal bored = false\n\t\
    -- For each word in the given string\n\tfor w in S:gmatch(\"[^ ]+\") do\n\t\t\
    -- If the word starts with I, it's bored\n\t\tif w == 'I' then\n\t\t\tbored =\
    \ true\n\t\tend\n\tend\n\treturn bored\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gyp_2v0.lua:24:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmp5gyp_2v0.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- Write your code here\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qj6juek.lua:17:\
    \ expected: 0, actual: true\nstack traceback:\n\t/tmp/tmp_qj6juek.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ w in S:gmatch(\"[I%.]+\") do count = count + 1 end\n  return count\nend\n</cell>\n\
    <cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa9nbffju.lua:14: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- Write your function\
    \ here\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_xuix07.lua:17:\
    \ expected: 0, actual: true\nstack traceback:\n\t/tmp/tmp5_xuix07.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local num_boredoms =\
    \ 0\n    for w in string.gmatch(S, \"[.?!]([^.?!]*)\") do\n        local boredoms\
    \ = string.find(w, \"^I\")\n        if boredoms ~= nil then\n            num_boredoms\
    \ = num_boredoms + 1\n        end\n    end\n    return num_boredoms\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62dujyf3.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp62dujyf3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local I = 0\n  for w in\
    \ S:gmatch(\"[^I%%.!?]+\") do I = I + 1 end\n  return I\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_7rehxo.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpu_7rehxo.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  --\
    \ We only need to go through each word in the string.\n  for w in S:gmatch(\"\
    [^\\.!?]+\") do\n    -- If the word begins with the letter 'I' then we increment\
    \ the count.\n    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n \
    \ end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1za7che0.lua:12: invalid escape sequence near '\"[^\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    local I = string.find(S, \"I\", 1, true)\n    while I do\n        if string.sub(S,\
    \ I, I) ~= \".\" then\n            boredoms = boredoms + 1\n        end\n    \
    \    I = string.find(S, \".\", I + 2, true)\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppohao9j_.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmppohao9j_.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = { }\n\
    \  for w in S:gmatch(\"[\\.?!]+\") do\n    boredoms[#boredoms+1] = w .. \"!\"\n\
    \  end\n  return #boredoms >= 1 and boredoms[1] == \"I\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0icry0wj.lua:11: invalid escape sequence near '\"[\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- Your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1swoxzkc.lua:16:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp1swoxzkc.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   local I = string.find(S,\
    \ \"[^.!?]*I%S\")\n   if I then\n      return string.find(S, \"[^.!?]*\")-I\n\
    \   else\n      return 0\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8cyk2fy8.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp8cyk2fy8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\t-- Your code here\n\treturn\
    \ 0 \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82umcl4o.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp82umcl4o.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   if S ~= nil and S ~= \"\
    \" then\n      S = S:lower()\n      local bored = S:sub(1,1):lower() == \"i\"\n\
    \      -- print(S)\n      return bored\n   else\n      return nil\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujwiyfhl.lua:23:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmpujwiyfhl.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    -- Write your code here\n\
    \    local cnt = 0\n    for i=1,#S do\n        if S[i] == '.' or S[i] == '?' or\
    \ S[i] == '!' then\n            cnt = cnt + 1\n        end\n    end\n    return\
    \ cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpauuf1pjp.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpauuf1pjp.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   if S:sub(1,1) == \"I\"\
    \ then return 1 end\n   if S:sub(1,3) == \"I\" then return 1 end\n   if S:sub(1,6)\
    \ == \"I\" then return 1 end\n   return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8tcne3y.lua:20:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpu8tcne3y.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredom = {}\n\
    \    local bored = 0\n    for w in S:gmatch(\"[%a\\.?!]*\") do\n        if w ==\
    \ 'I' then bored = bored + 1 end\n        table.insert(boredom, w)\n    end\n\
    \    return bored\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp94ggb5js.lua:12: invalid escape sequence near '\"[%a\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   if type(S) ~= \"string\"\
    \ then\n      return 0\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp409_wl5y.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredom = tonumber(string.match(S,\
    \ \"^I.*\")) == 1\n  return boredom or tonumber(string.match(S, \"^.?!.*\")) ==\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6fu3b7rv.lua:17:\
    \ expected: 0, actual: false\nstack traceback:\n\t/tmp/tmp6fu3b7rv.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   S = S:lower()\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8u3ldcgp.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ w in S:gmatch(\"[^ .!?]+\") do\n    count = count + 1 if w == \"I\" end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyelx2kyy.lua:12: 'then' expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredom = 0\n \
    \   for word in S:gmatch(\"(I%S+)\") do boredom = boredom + 1 end\n    return\
    \ boredom\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpih072kyk.lua:19:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpih072kyk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   local I = S:find(\"^I\"\
    )\n   if I ~= nil then\n      -- The first character in the string is 'I'.\n \
    \     -- The second character is one of '.', '?' or '!'.\n      -- Thus, if we\
    \ get to here, the string starts with \"I\".\n      -- So, return the number of\
    \ characters in S starting with \"I\".\n      return (#S) - I\n   end\n   -- Otherwise,\
    \ if the string doesn't start with \"I\", the string isn't bored.\n   return 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyr8fi7su.lua:26:\
    \ expected: 0, actual: 15\nstack traceback:\n\t/tmp/tmpyr8fi7su.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local N = 0\n    for\
    \ i, w =\n        S:gmatch(\"(^| )(I%S+)[.?!]([^.?!]+)\")\n    do\n        N =\
    \ N + 1\n    end\n    return N\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1pdpx2o8.lua:11: 'in' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ local words = string.gmatch(S, \"[^.?!]+\")\n    for _, word in ipairs(words)\
    \ do\n        if word == \"I\" then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  if S then\n    local S\
    \ = S:gsub(\"\\.[?!]$\", \"\")\n    return S == \"I\" and 1 or 0\n  else\n   \
    \ return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwre382zi.lua:11: invalid escape sequence near '\"\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  return #S:find(S[1]) ==\
    \ 4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0bpqekbb.lua:10:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp0bpqekbb.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp0bpqekbb.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- Write your code here.\n\
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplu80fefs.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmplu80fefs.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[?.!]\") do\n    if w:sub(1,1) == \"I\" then\n      boredoms\
    \ = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj592zaq8.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpj592zaq8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredom_count =\
    \ 0\n    for w in S:gmatch(\"(%.+?[!?.]%+)\") do\n        if w == \"I\" then\n\
    \            boredom_count = boredom_count + 1\n        end\n    end\n    return\
    \ boredom_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2mxxrcw.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpy2mxxrcw.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   -- Your code here\n  \
    \ return ...\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphf47uh4p.lua:11: cannot use '...' outside a vararg function\
    \ near '...'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for w in S:gmatch(\"[%a!?.]+\") do\n        count = count + 1\n    end\n   \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gn8kx_f.lua:20:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp1gn8kx_f.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   for w in S:gmatch'[?!.]+'\
    \ do\n      if w == \"I\" then\n         return 1\n      end\n   end\n   return\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvglxn6hz.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpvglxn6hz.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tlocal I = {}\n\tfor w in\
    \ string.gmatch(S, \"[^.?.!]+\") do table.insert(I,w) end\n\t-- If any letter\
    \ starts with \"I\", then it is bored.\n\tfor i,v in ipairs(I) do\n\t\tif v ==\
    \ \"I\" then\n\t\t\treturn 1\n\t\tend\n\tend\n\treturn 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkb57aftq.lua:26:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpkb57aftq.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tlocal count = 0\n\tfor\
    \ _,v in pairs(S:gmatch(\"(I+.+)%s*(.+)\")) do\n\t\tcount = count + 1\n\tend\n\
    \treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyg7swe_1.lua:11:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpyg7swe_1.lua:11: in local 'candidate'\n\t/tmp/tmpyg7swe_1.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   for w in string.gmatch(S,\
    \ \"([^.?!]+)\")\n   do if w == \"I\" then return 1 end; end\n   return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1ez_5xc.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpr1ez_5xc.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local I = 1\n  for w in\
    \ S:gmatch(\"[\\.\\?\\!]\") do\n    if w:sub(1, 1) == \"I\" then\n      I = I\
    \ + 1\n    end\n  end\n  return I\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp67_0zfq_.lua:11: invalid escape sequence near '\"[\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local n = 0\n  local is_bored\
    \ = false\n  for w in S:gmatch(\"%w+\") do\n    if w == \"I\" then\n      is_bored\
    \ = true\n      break\n    end\n    n = n + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgh6wvim2.lua:25:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpgh6wvim2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   -- TODO: implement a smarter\
    \ algorithm that takes the \n   -- context into account\n   \n   -- Here are some\
    \ helpful functions\n   local function find(word, S)\n      if S:match(word) then\n\
    \         return true\n      else\n         return find(word, S:sub(1, S:len()))\n\
    \      end\n   end\n   \n   local function next_word(S)\n      if S:match('.')\
    \ then\n         return S:match('(%S+)\\.')\n      elseif S:match('\\?') then\n\
    \         return S:match('(%S+)\\?')\n      elseif S:match('\\!') then\n     \
    \    return S:match('(%S+)\\!')\n      else\n         return S:match('(%S+)%s+')\n\
    \      end\n   end\n   \n   local function next_punc(S)\n      if S:match('\\\
    ?') then\n         return S:match('(%S+)\\?')\n      elseif S:match('\\.') then\n\
    \         return S:match('(%S+)\\.')\n      else\n         return S:match('(%S+)%s+')\n\
    \      end\n   end\n   \n   -- Here is a solution using regular expressions\n\
    \   if S:match('[^ ]+') then\n      return 0\n   else\n      local words = S:match('[^\
    \ ]+')\n      for i = 1, #words do\n         if find(words[i], 'I') then\n   \
    \         return 1\n         end\n      end\n   end\nend\n</cell>\n<text>\nTest\
    \ your code\nRun the cell containing the function definitions.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp7ev8011.lua:24: invalid escape sequence near ''(%S+)\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local I = 1\n  for s in\
    \ S:gmatch(\".+[.?!]+\") do\n    if string.sub(s,1,1) == \"I\" then\n      I =\
    \ I + 1\n    end\n  end\n  return I\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxh6hs2e.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpjxh6hs2e.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local i = 0\n  local count\
    \ = 0\n  for word in S:gmatch(\"[%S]+\") do\n    if word == \"I\" then\n     \
    \ count = count + 1\n    end\n    i = i + 1\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin590yjw.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpin590yjw.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local bored = 0\n   \
    \ for w in S:gmatch(\"[%z%.?!]+\") do\n        bored = bored or w:sub(1,1) ==\
    \ 'I'\n    end\n    return bored\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4eq9t03x.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4eq9t03x.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tlocal BOREDOM = {\n\t\t\
    [\"I\"] = 1,\n\t\t[\"you\"] = 1,\n\t\t[\"we\"] = 1,\n\t\t[\"us\"] = 1,\n\t\t[\"\
    our\"] = 1,\n\t\t[\"you're\"] = 1,\n\t\t[\"you've\"] = 1,\n\t\t[\"you'll\"] =\
    \ 1,\n\t\t[\"you'd\"] = 1,\n\t\t[\"you'd\"] = 1,\n\t\t[\"you'll\"] = 1,\n\t\t\
    [\"you'll\"] = 1,\n\t\t[\"you've\"] = 1,\n\t\t[\"you're\"] = 1,\n\t\t[\"I'm\"\
    ] = 1,\n\t\t[\"I've\"] = 1,\n\t\t[\"you're\"] = 1,\n\t\t[\"you've\"] = 1,\n\t\t\
    [\"it's\"] = 1\n\t}\n\tlocal words = string.gmatch(S, \"(%a+)%.?(%a+)%.?(%a+)%.?(%a+)%.?(%a+)%.?(%a+)%.?(%a+)\"\
    )\n\tif words == nil then\n\t\treturn 0\n\tend\n\tlocal count = 0\n\tfor _, word\
    \ in pairs(words) do\n\t\tif BOREDOM[word] ~= nil then\n\t\t\tcount = count +\
    \ 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82y2fz28.lua:36:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp82y2fz28.lua:36: in local 'candidate'\n\t/tmp/tmp82y2fz28.lua:47: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   for w in S:gmatch(\"[%.?!]+\"\
    ) do -- Iterate over every word\n      if w == \"I\" then\n         return 1\n\
    \      end\n   end\n   return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3okrjk4l.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp3okrjk4l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local BOREDOM_RE = {\
    \ \n        [\".\"] = 0,\n        [\"?\"] = 0,\n        [\"!\"] = 0, \n    }\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzgk1pfv1.lua:27: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  S = S:gsub(\"%.\", \"\"\
    )\n  if S:sub(1, 1) == \"I\" and S:sub(2, 1) == \"I\" then\n    return 1\n  end\n\
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyrr1jq7f.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpyrr1jq7f.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- Your code here\n  local\
    \ boredom = 0\n  S = string.lower(S)\n  S = string.gsub(S, \" ?!\", \"\")\n  S\
    \ = string.gsub(S, \"[Ii][Ii]\", \"\")\n  S = string.gsub(S, \"([Ii])+\", \"\\\
    \\1\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([^.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"(.)\\\
    \\1\", \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S,\
    \ \"([.?!])\", \".\")\n  S = string.gsub(S, \"(.)([^.?!])\", \"\\\\1\\\\2\")\n\
    \  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\", \"\
    .\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb1mku7gl.lua:58: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local cboredom = {}\n\
    \    for i, x in pairs(S) do\n        -- If 'x' is an 'I', store it in the 'cboredom'\
    \ variable\n        if x:sub(1,1) == \"I\" then cboredom[#cboredom + 1] = x\n\
    \        -- If 'x' is a '.', store it in the 'cboredom' variable\n        elseif\
    \ x == '.' then cboredom[#cboredom + 1] = x\n        -- If 'x' is a '?', store\
    \ it in the 'cboredom' variable\n        elseif x == '?' then cboredom[#cboredom\
    \ + 1] = x\n        -- If 'x' is a '!', store it in the 'cboredom' variable\n\
    \        elseif x == '!' then cboredom[#cboredom + 1] = x\n        -- If 'x' is\
    \ a number, store it in the 'cboredom' variable\n        elseif x == '' then cboredom[#cboredom\
    \ + 1] = x\n        end\n    end\n    local boredom_cnt = 0\n    for i, x in pairs(cboredom)\
    \ do\n        if x:sub(1,1) == \"I\" then\n            boredom_cnt = boredom_cnt\
    \ + 1\n        end\n    end\n    return boredom_cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1mly0df.lua:11:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpq1mly0df.lua:11: in local 'candidate'\n\t/tmp/tmpq1mly0df.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredom = S:match(\"\
    ^I[\\.?!]%w\")\n    if boredom == nil then\n        return 0\n    end\n    local\
    \ count = #boredom\n    for i = 2, count do\n        if boredom[i] ~= '.' then\n\
    \            return boredom[i]\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv7u86k6q.lua:10: invalid escape sequence near '\"^I[\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  S = string.gsub(S, \"[.?!]\"\
    , \"\")\n  local I = 0\n  for w in string.gmatch(S, \"[^I]+\") do\n    if w ==\
    \ \"I\" then\n      I = I + 1\n    end\n  end\n  return I\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5b9vq_a.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpi5b9vq_a.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local bored = 0\n  for\
    \ word in S:gmatch(\"[%w\\?\\!]+\") do\n    if word:sub(1,1)==\"I\" then \n  \
    \    bored = bored + 1 \n    end\n  end\n  return bored\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8l9i3kuj.lua:11: invalid escape sequence near '\"[%w\\?'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   if type(S) ~= 'string'\
    \ then return end\n   if S:sub(1,1) ~= 'I' then return 0 end\n   if S:sub(1,2)\
    \ == '!' then return 0 end\n   if S:sub(1,3) == '?' then return 0 end\n   return\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoocw0oze.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpoocw0oze.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ w in S:gmatch(\"[%w\\.\\?\\!]+\") do count = count + 1 end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxbah8a2m.lua:11: invalid escape sequence near '\"[%w\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n\tS = S:gsub('(^|\\\\W)([I])(.*$)','\\\
    \\1\\\\3')\n\tS = S:gsub('(^|\\\\W)([I])(.*[.?!])','\\\\1\\\\3')\n\treturn tonumber(S:sub(1,-2))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xn_lwa1.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp5xn_lwa1.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n   if S == nil then\n   \
    \   return nil\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa3qz55dn.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0pbdmuz.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmph0pbdmuz.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local n = 0\n  for w in\
    \ S:gmatch(\"[?.!]\") do\n    if w == \"I\" then n = n+1 end\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rsjvg3a.lua:22:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4rsjvg3a.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  if S == \"I\" then\n  \
    \  return 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpamdyrcl0.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for w in S:gmatch(\"[^.?!]+\") do\n        if w:lower() ~= \"i\" then count\
    \ = count + 1 end\n    end\n    return count\nend\n</code>\n<|/ a tags=lua,pattern-matching\
    \ dscore=2 |>\n<| a dscore=2 tags=lua,pattern-matching |>\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsg2kda_s.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- Write your code here.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4lp0_6vz.lua:16:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp4lp0_6vz.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    -- Your code here!\n\
    \    if S == \"Hello world\" then\n        return 0\n    elseif S == \"The sky\
    \ is blue. The sun is shining. I love this weather\" then\n        return 1\n\
    \    else\n        return nil\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpry7ds07a.lua:24:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpry7ds07a.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"[^\\.\\?\\!]+\") do\n        if word == \"I\" then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbqqf625t.lua:11: invalid escape sequence near '\"[^\\.'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- TODO: Write the is_bored\
    \ function here (29 points).\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmparp81chb.lua:17:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmparp81chb.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- Your code here!\n  return\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpracuu087.lua:17:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpracuu087.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  -- Your code here\n  local\
    \ words = S.words:gsub(\"(%b+)\",\"%1\")\n  local count = 0\n  for word in words:gmatch(\"\
    [!?.]\") do\n    if word == \"I\" then\n      count = count+1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n   \
    \ lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn7d37ay9.lua:11:\
    \ attempt to index a nil value (field 'words')\nstack traceback:\n\t/tmp/tmpn7d37ay9.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpn7d37ay9.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  return string.sub(S, 1,\
    \ 1) ~= \"I\" or string.find(S, \"[.?!]\") == nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatewfd7m.lua:16:\
    \ expected: 0, actual: true\nstack traceback:\n\t/tmp/tmpatewfd7m.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local words = {}\n  \
    \  for w in S:gmatch(\"([A-Za-z]+)\") do words[w] = true end\n    local boredom\
    \ = {}\n    for w in words if words[w] then boredom[w] = true end\n    return\
    \ #boredom\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppa8ymxoo.lua:13: 'do' expected near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredom = S == \"\
    I\" and S or S:sub(1, 1)\n  local cnt = 0\n  for w in string.gmatch(S, \"[^.!?]+\"\
    ) do\n    cnt = cnt + boredom:find(w)\n  end\n  return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjyznctpd.lua:13:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpjyznctpd.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpjyznctpd.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local BOREMS = { '.',\
    \ '?', '!' }\n    local count = 0\n    for w in S:gmatch(\"%w+\") do\n       \
    \ count = count + 1\n        for b in BOREMS do\n            if w:sub(1, 1) ==\
    \ b then\n                return count\n            end\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnti702rm.lua:14:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpnti702rm.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpnti702rm.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for _, w in ipairs(S:gmatch('.?!?')) do\n        if w == \"I\" then\n      \
    \      count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
