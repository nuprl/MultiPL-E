name: HumanEval_13_greatest_common_divisor
language: lua
results:
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    return a%b == 0 and b%a or greatest_common_divisor(b, a % b)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local greatest = a\n  local gcd = 1\n  repeat\n    greatest = math.floor(greatest/b)\n\
    \    gcd = gcd*b\n  until greatest == 1\n  return gcd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local gcd = math.gcd(a, b)\n  if gcd == 0 then\n    return b\n  end\n\
    \  return gcd(b, a % gcd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkgkh5rw6.lua:7:\
    \ attempt to call a nil value (field 'gcd')\nstack traceback:\n\t/tmp/tmpkgkh5rw6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkgkh5rw6.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  end\n  if b == 0 then\n    return a\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpie1sbg5x.lua:23: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if b == 1 then\n        return a\n    end\n    local divisor, remainder\
    \ = div(a, b)\n    if remainder == 0 then\n        return divisor\n    end\n \
    \   return greatest_common_divisor(b, divisor)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdfysxvbb.lua:10:\
    \ attempt to call a nil value (global 'div')\nstack traceback:\n\t/tmp/tmpdfysxvbb.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpdfysxvbb.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local divisor = 1\n  for i = 1, a do\n    if a % i == 0 and b % i == 0\
    \ then\n      divisor = i\n    end\n  end\n  return divisor\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't answer the question, since it seems to ask about\
    \ the greatest common divisor of two numbers, not two integers. I think you meant\
    \ to write `local function greatest_common_divisor(a, b)` -- you then also have\
    \ to actually calculate the GCD of two numbers.\n<|/ c |>\n<| c |>\n, Thanks for\
    \ pointing that out. I'm so used to coding in R and trying to translate my thinking\
    \ into the programming language I thought it would be easier to understand by\
    \ just showing the code. I will update my answer.\n<|/ c |>\n<| c |>\nthanks for\
    \ your answer. but i need to find out what is the least common multiple of two\
    \ integers a and b and also i need to find out what is the greatest common divisor\
    \ of two integers a and b. the greatest common divisor is the lowest common multiple\
    \ of two numbers. i hope you understand my question .\n<|/ c |>\n<| c |>\n, I\
    \ updated my answer. Is that what you were looking for?\n<|/ c |>\n<| c |>\nthanks\
    \ for your answer. but i need to find out what is the least common multiple of\
    \ two integers a and b and also i need to find out what is the greatest common\
    \ divisor of two integers a and b. the greatest common divisor is the lowest common\
    \ multiple of two numbers. i hope you understand my question .\n<|/ c |>\n<| a\
    \ tags=math,algorithm,lua,lua-table,numbers |>\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxrhvr276.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Check for GCD\n  if b == 0 then\n    return a\n  else\n    -- Find\
    \ greatest common divisor\n    local c = b\n    while c > 0 do\n      local d\
    \ = a % c\n      if d ~= 0 then\n        a = c\n        b = d\n      else\n  \
    \      c = c / 2\n      end\n    end\n    return a\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufm133sy.lua:29:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpufm133sy.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  -- Compute\
    \ gcd\n  local g = greatest_common_divisor(b % a, a)\n  if g == 0 then -- a is\
    \ divisible by all numbers in range\n    return a\n  else -- If g != 0 then a\
    \ is not divisible by all numbers in range \n    return g\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Handle invalid case\n  if a ~= nil and b ~= nil then\n    local tmp\
    \ = a\n    local tmp2 = b\n    -- Compare a and b until a is greater than b\n\
    \    while tmp2 ~= 0 and tmp ~= 0 do\n      tmp = tmp % tmp2\n      tmp2 = tmp2\
    \ % tmp2\n    end\n    return tmp\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporjdifym.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmporjdifym.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  assert(type(a) == 'number')\n  assert(type(b) == 'number')\n  assert(b\
    \ > 0)\n  assert(a > 0)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n\
    \    return a\n  elseif b < a then\n    return greatest_common_divisor(b, a/b)\n\
    \  else\n    return greatest_common_divisor(a/b, b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8s_kzm6j.lua:10:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmp8s_kzm6j.lua:10: in function\
    \ </tmp/tmp8s_kzm6j.lua:6>\n\t(...tail calls...)\n\t/tmp/tmp8s_kzm6j.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    assert(type(b) == 'number' and type(a) == 'number')\n    \n    if b\
    \ == 0 then return a\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq5lek5jd.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local remainder\n  while b > 0 do\n    remainder = b\n    b = a % b\n\
    \    a = remainder\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  if a >= b then return a else return b end\n\
    \  local i\n  for i = 1, a do\n    local t = a % b\n    if t > 0 then\n      return\
    \ t\n    end\n    a = b\n    b = t\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzb3h45qa.lua:8: 'end' expected (to close 'if' at line 7) near\
    \ 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b <= 0 then\n    return nil\n  elseif b == 1 then\n    return a\n \
    \ elseif a <= 0 then\n    return nil\n  elseif b <= a then\n    return nil\n \
    \ elseif b == a then\n    return b\n  else\n    if a % b == 0 then\n      return\
    \ b\n    end\n    local g = b\n    while a % g == 0 do\n      g = g * b -- Euler\
    \ Totient function\n    end\n    return g\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnr6m2oh.lua:32:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpnnr6m2oh.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local gcd, i, j\n  gcd = b\n  for i = 1, a do\n    if b == 0 then\n  \
    \    return i\n    end\n    gcd, i = gcd:gcd(), i\n  end\n  return gcd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5_6gp2kx.lua:13:\
    \ attempt to index a number value (local 'gcd')\nstack traceback:\n\t/tmp/tmp5_6gp2kx.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp5_6gp2kx.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if b == 0 then return a\n    if a % b == 0 then return greatest_common_divisor(b,\
    \ a % b)\n    else return greatest_common_divisor(b, a % b + b) end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkynvn0zx.lua:8: 'end' expected (to close 'if' at line 7) near\
    \ 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Make sure a and b are numbers\n  if a~=b or a<1 then a=1; b=b end\n\
    \  -- If a < b, it is called cyclic, the function returns b\n  if a<=b then return\
    \ b end\n  -- If a > b, it is called cyclic, the function returns b\n  if a>b\
    \ then return b end\n  -- The return is a, since a is greater than b\n  return\
    \ a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_ulja1h.lua:20:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmph_ulja1h.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Only return GCD if the GCD does not exceed the limit\n  if a == 0 then\
    \ return b end\n  if b == 0 then return a end\n  if b < a then return greatest_common_divisor(b,\
    \ a - b) end\n  local c = a % b\n  return greatest_common_divisor(b, c + a) --\
    \ Add both a and b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Note: this implementation is horribly inefficient for large numbers\n\
    \  -- >>> greatest_common_divisor(1025, 7)\n  -- 13\n  if b == 1 then return 1\
    \ end\n  if a == 0 then return b end\n  if b > a then return greatest_common_divisor(b,\
    \ a) end\n  if b < a then return greatest_common_divisor(a, a + b) end\n  local\
    \ x = a\n  while x ~= b do\n    x = x % b\n  end\n  return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a == 0 and b == 0 then return 0 end\n    if a == 0 then return b\
    \ end\n    if b == 0 then return a end\n    local gcd = math.gcd(a, b)\n    if\
    \ gcd == 1 then return gcd end\n    return greatest_common_divisor(a / gcd, b\
    \ / gcd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgg4pfsjq.lua:10:\
    \ attempt to call a nil value (field 'gcd')\nstack traceback:\n\t/tmp/tmpgg4pfsjq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpgg4pfsjq.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return a end\n  if b == 0 then return b end\n  if a > b\
    \ then\n    local tmp = a\n    a = b\n    b = tmp\n  end\n  local div = b\n  while\
    \ b > 0 do\n    local tmp = a % b\n    a = b\n    b = tmp\n  end\n  return div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppw0kp_xy.lua:26:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmppw0kp_xy.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 and b == 0 then\n    return 0\n  elseif a == 0 then\n    return\
    \ b\n  elseif b == 0 then\n    return a\n  else\n    while a do\n      a = a %\
    \ b\n      if a == 0 then\n        return b\n      else\n        b = b * b\n \
    \     end\n    end\n    return a\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_u_1w5lu.lua:30:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp_u_1w5lu.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Euclid's algorithm for greatest common divisor\n  -- http://en.wikipedia.org/wiki/Euclid#Algorithm_and_running_time\n\
    \  -- >>> greatest_common_divisor(8, 12)\n  -- 2\n  -- >>> greatest_common_divisor(30,\
    \ 5)\n  -- 8\n  -- >>> greatest_common_divisor(50, 20)\n  -- 10\n  -- >>> greatest_common_divisor(12,\
    \ 8)\n  -- 2\n  -- >>> greatest_common_divisor(100, 2)\n  -- 2\n  if a <= 0 or\
    \ b <= 0 then\n    return nil\n  else\n    local d\n    if b > 0 then\n      d\
    \ = b\n    else\n      d = a\n    end\n    while d > 1 do\n      local q = d /\
    \ 2\n      if a % q == 0 then\n        return q\n      end\n      if b % q ==\
    \ 0 then\n        return q\n      end\n      d = q\n    end\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc_x6e2n.lua:44:\
    \ expected: 1, actual: 3.5\nstack traceback:\n\t/tmp/tmpxc_x6e2n.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local c = 0\n    for i = 1, b do\n        if b % i == 0 then\n     \
    \       c = i\n        end\n    end\n    return a * (b / c)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkk_d5d6.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpqkk_d5d6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b then\n    local function gcd(x, a)\n      while x do a = b if a >\
    \ x then a = x end; x = x % a end\n      return a\n    end\n    return gcd(a,\
    \ b)\n  else\n    return a\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdq7hf6aa.lua:9:\
    \ attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpdq7hf6aa.lua:9: in function\
    \ </tmp/tmpdq7hf6aa.lua:8>\n\t(...tail calls...)\n\t/tmp/tmpdq7hf6aa.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  if a == 0 then return a end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe0hj8ov5.lua:8: 'end' expected (to close 'if' at line 7) near\
    \ 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a <= 0 then\n        return nil\n    end\n    if b <= 0 then\n  \
    \      return a\n    end\n    if a == 0 then\n        return b\n    end\n    local\
    \ i = a\n    local j = b\n    while j ~= 0 do\n        i, j = i ~= 0, i - j\n\
    \    end\n    return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1a6lcyk7.lua:19:\
    \ attempt to perform arithmetic on a boolean value (local 'i')\nstack traceback:\n\
    \t/tmp/tmp1a6lcyk7.lua:19: in local 'candidate'\n\t/tmp/tmp1a6lcyk7.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- This implementation is by Mark Dickinson\n  -- <http://portal.acm.org/citation.cfm?id=945423&dl=ACM&coll=portal-general>\n\
    \  -- See also:\n  -- <http://www.mpi-inf.mpg.de/cmtk/mpi/resources/mpich.html>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt4fqoget.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 1 then\n    return a\n  end\n  if a == 1 then\n    return b\n\
    \  end\n  local divisor = greatest_common_divisor(b, a % b)\n  if b % divisor\
    \ == 0 then\n    return divisor\n  end\n  return b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpix8yjttb.lua:23:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpix8yjttb.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local t = {}\n    for i = 1, a do\n        t[i] = b\n        b = b /\
    \ a\n    end\n    return t[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9n6w0cg6.lua:18:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmp9n6w0cg6.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n   if a < b then a, b = b, a end\n   for i = 1, a do\n      local m = math.floor((a\
    \ + b) / 2)\n      if b == m then\n         return a\n      elseif a == m then\n\
    \         return b\n      else\n         a = m\n         b = m - a\n      end\n\
    \   end\n   return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8rvsd2j.lua:26:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpn8rvsd2j.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 and b == 0 then\n    return 0\n  end\n  local c = a\n  while\
    \ c > 0 and b > 0 do\n    if a % c == 0 and b % c ~= 0 then\n      c = c - 1\n\
    \    else\n      b = b - 1\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9oz9xhb.lua:24:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpy9oz9xhb.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 1 then return a\n  if a == 0 then return b\n  if a > b then a,\
    \ b = b, a end\n  while a % b == 0 do\n    a, b = b, a % b\n  end\n  return b\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplg90yzbi.lua:8: 'end' expected (to close 'if' at line 7) near\
    \ 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then return greatest_common_divisor(b, a) end\n  local factors, i = 1, 1\n \
    \ while i <= math.abs(b) do\n    i = i * a + 1\n    if i ~= b and i ~= a then\
    \ factors = factors + 1 end\n  end\n  return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpte2uq68a.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpte2uq68a.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a % b == 0 then\n    return b\n  elseif a == 0 then\n    return 1\n\
    \  elseif a > b then\n    return greatest_common_divisor(b, a)\n  else\n    return\
    \ greatest_common_divisor(b, a * b)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  assert(a <= b)\n  local gcd = math.gcd(a, b)\n  if gcd == 1 then\n   \
    \ return a\n  else\n    return gcd\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbq1zgif3.lua:8:\
    \ attempt to call a nil value (field 'gcd')\nstack traceback:\n\t/tmp/tmpbq1zgif3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpbq1zgif3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- if b is nil or a is nil, then just use the a provided\n  -- otherwise,\
    \ if a is bigger, then just use the a provided\n  -- otherwise just use the a\
    \ provided\n  if b == nil or a ~= a or b == b then return a\n  else if b <= a\
    \ then return a\n  else return a end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1ao1z6we.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n\tif a > b then\n\t\ta, b = b, a\n\tend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1085fxth.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == b then return a\n    else if a <= b then return greatest_common_divisor(b,\
    \ a) end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpau70wbt2.lua:15:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpau70wbt2.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a ==\
    \ 0 then return a\n  elseif a < 0 then return nil\n  elseif a > 0 then\n    local\
    \ c = a\n    local d = b\n    while true do\n      if c % d == 0 then\n      \
    \  return c\n      else\n        c, d = d, c % d\n      end\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05duhjdm.lua:27:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp05duhjdm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  a = a % b\n  b = b - a\n  while b > 0 do\n    a = b\n    b = a % b\n \
    \ end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr0ixp9rp.lua:19:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpr0ixp9rp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  local c\
    \ = a % b\n  while true do\n    local d = b\n    b = a\n    a = d\n    if c ==\
    \ 0 then break end\n    c = c % b\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjmt2176i.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpjmt2176i.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  end\n  if b == a then\n    return b\n\
    \  end\n  return greatest_common_divisor(b, a%b)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    assert(type(b) == \"number\")\n    assert(type(a) == \"number\")\n \
    \   if a < b then\n        local temp = a\n        a = b\n        b = temp\n \
    \   end\n    if b == 0 then\n        return a\n    end\n    local rem = a\n  \
    \  for i = 1, b - 1 do\n        rem = rem % b\n    end\n    return rem\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_rx6h90q.lua:30:\
    \ expected: 12, actual: 24\nstack traceback:\n\t/tmp/tmp_rx6h90q.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- The Euclidean algorithm is the most straightforward way to\n  -- implement\
    \ this operation.\n  -- The only tricky part is calculating the GCD of a and b.\n\
    \  -- To do this, we shall use the Euclidean algorithm.\n  -- The Euclidean algorithm\
    \ calculates the GCD of a and b by finding\n  -- that remainder after dividing\
    \ a by b.\n  -- This process is repeated until a is evenly divided by b.\n  --\
    \ https://en.wikipedia.org/wiki/Euclidean_algorithm\n  -- To see how this is implemented,\
    \ consider the following:\n  --     a = 3, a = (a * 3) + 1\n  --     b = 5, b\
    \ = (b * 5) + 1\n  --     3 * 5 + 1 = 20\n  --     20 % 5 = 0\n  --     a / b\
    \ = (3 * 5) + 1\n  --     a % b = 4\n  --     a / b = ((3 * 5) + 1) % 5 = 0\n\
    \  --     a = a / b\n  -- The process continues until we only have a single number\
    \ left.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgfnwu2o5.lua:35: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  return math.gcd(a, b) == 1 and a or b\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqzzbv2h.lua:7:\
    \ attempt to call a nil value (field 'gcd')\nstack traceback:\n\t/tmp/tmpvqzzbv2h.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpvqzzbv2h.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  a = math.abs(a)\n  b = math.abs(b)\n  local x, y = 0, 1\n  while a > 0\
    \ and b > 0 do\n    x, y = y, x % b\n    a = a % b\n  end\n  return x\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local remainder = 0\n    while a % b == 0 do\n        a = a / b\n  \
    \      remainder = remainder + 1\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tethtl5.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9tethtl5.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    while b > 0 do\n        local t = b\n        b = a % t\n        a =\
    \ t\n    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local greatest, least = a, b\n    while least % greatest ~= 0 do\n \
    \       least = least + 1\n    end\n    return least\nend\nreturn greatest_common_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv9kvox1v.lua:14: <eof> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    return math.gcd(a, b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr33cuwrx.lua:7:\
    \ attempt to call a nil value (field 'gcd')\nstack traceback:\n\t/tmp/tmpr33cuwrx.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpr33cuwrx.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    assert(type(b) == type(a))\n    if a == 0 then\n        return b\n \
    \   elseif b == 0 then\n        return a\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp56dxmpi_.lua:23: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Check that the integers satisfy the relation: a%b == 0 for all a and\
    \ b\n  if b == 1 then return 1 end\n  local c, d = a, b\n  while d % c == 0\n\
    \  do\n    c, d = d, c % d\n  end\n  return d\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52custns.lua:20:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmp52custns.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- First check the divisors to see if it is a power of 2\n  local is_pow2\
    \ = math.isPowerOf2(a) and math.isPowerOf2(b);\n  if a % b == 0 or not is_pow2\
    \ then\n    -- Then if neither of the numbers are a power of 2, try the other\
    \ one\n    local is_pow2 = math.isPowerOf2(b) and math.isPowerOf2(a);\n    if\
    \ b % a == 0 or not is_pow2 then\n      -- If none of the divisors are a power\
    \ of 2, then return the smaller one\n      return math.min(a, b);\n    end\n \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptrk1q7kf.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n\tif a == 0 then\n\t\treturn b\n\telseif b == 0 then\n\t\treturn a\n\tend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbu4ivbjl.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local n = math.abs(a) + math.abs(b)\n  if math.abs(a) ~= math.abs(b) then\n\
    \    return greatest_common_divisor(b, a)\n  end\n  -- If one integer is zero\
    \ return 0\n  if n == 0 then\n    return 0\n  end\n  -- If one integer is negative\
    \ return other\n  if n < 0 then\n    return n\n  end\n  -- If both integers are\
    \ same or if both integers are zero, return the\n  -- other integer\n  if n ==\
    \ a or n == b then\n    return n\n  end\n  -- Iterate to find GCD\n  local gcd\n\
    \  for i = 2, n do\n    if n % i == 0 then\n      if i == a then\n        gcd\
    \ = i\n      else\n        gcd = i\n      end\n      break\n    end\n  end\n \
    \ return gcd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  return b ~= 0 and a * b % a == 0 or (b == 0 and a) or (greatest_common_divisor(b,\
    \ a % b))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx35tqkih.lua:13:\
    \ expected: 1, actual: true\nstack traceback:\n\t/tmp/tmpx35tqkih.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 1 then\n    return a\n  elseif b == 0 then\n    return 0\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ldkk_xk.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9ldkk_xk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  local c = a % b\n  if c > 0 then\n    return\
    \ greatest_common_divisor(b, c) -- a / b\n  elseif b == 1 then return c -- a *\
    \ b\n  else\n    return greatest_common_divisor(a, (b * b - 1) // a) -- a * (a\
    \ - 1) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ozsmzz9.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp7ozsmzz9.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Use Euclid's algorithm\n  -- to perform greatest common divisor computation\n\
    \  if b <= 0 then\n    return a\n  elseif a == 0 then\n    return b\n  end\n \
    \ -- Keep a copy of largest divisor seen\n  local last_divisor = a\n  -- Compute\
    \ greatest common divisor of two numbers\n  while b > 0 do\n    if a % b == 0\
    \ then\n      -- Update largest divisor seen\n      last_divisor = b\n      --\
    \ Exit loop\n      break\n    end\n    -- Update greatest common divisor by dividing\
    \ a by b\n    a = a % b\n  end\n  -- Return result\n  return last_divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n   local gcd = math.gcd(a, b)\n   return math.gcd(gcd(a, b), b)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjnzoct94.lua:7:\
    \ attempt to call a nil value (field 'gcd')\nstack traceback:\n\t/tmp/tmpjnzoct94.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpjnzoct94.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- This implementation is a bit naive, but that doesn't hurt.\n  assert(type(a)\
    \ == 'number')\n  assert(type(b) == 'number')\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplip94iaw.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- We want to return the greatest common divisor of a and b which\n  --\
    \ is defined as the lowest integer d that divides both and remainder zero.\n \
    \ -- If d is 0 then a and b are divisible and if d is 1 then b and a are divisible.\n\
    \  -- Thus return gcd(a, b) mod a\n  return math.mod(\n    math.gcd(a, math.mod(b,\
    \ b)),\n    math.mod(a, a)\n  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpko9y6l5e.lua:12:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpko9y6l5e.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpko9y6l5e.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 1 then\n    return a\n  elseif b == 0 then\n    return 0\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnl53oep3.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return 0\n  elseif a == 1 then\n    return b\n  elseif\
    \ b == 0 then\n    return a\n  end\n  local gcd = math.gcd(a, b)\n  return greatest_common_divisor(gcd,\
    \ b) / gcd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ecb2s2_.lua:14:\
    \ attempt to call a nil value (field 'gcd')\nstack traceback:\n\t/tmp/tmp1ecb2s2_.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp1ecb2s2_.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc2qwiwqi.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    assert(type(a) == 'number' and type(b) == 'number')\n    if a <= b then\
    \ return a else b end\n    if a == b then return a else return b end\n    local\
    \ div = a % b\n    if div == 0 then return b else return a end\n    return greatest_common_divisor(b,\
    \ a - div)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo9b3vx5j.lua:8: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a < 0 then a = -a end\n  if b < 0 then b = -b end\n  while a >= b do\n\
    \    a, b = b, a % b\n  end\n  return b\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolv60df9.lua:18:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpolv60df9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a == 0 and b == 1 then return 1 end\n    if a == 0 then return b\
    \ end\n    if b == 0 then return a end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxwa8d0wo.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == b then return a\n  if a == 0 then return 0\n  if b == 0 then return\
    \ 0\n  if a > b then return greatest_common_divisor(b, a) end\n  if a < b then\
    \ return greatest_common_divisor(a, b) end\n  local common, rem = a % b, a\n \
    \ while rem do\n    common, rem = b % rem, b\n  end\n  return common\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2iuixs00.lua:8: 'end' expected (to close 'if' at line 7) near\
    \ 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local c\n  if b == 0 then return a\n  elseif a == 0 then return b\n  else\n\
    \    local gcd\n    for c = 1; c <= b; c = c + 1 do gcd = b % c if not gcd then\
    \ break end; end\n    return gcd\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt_4g09sx.lua:12: ',' expected near ';'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  assert(a >= 0 and b >= 0)\n  if a == 0 then\n    return b\n  elseif b\
    \ == 0 then\n    return a\n  elseif a == b then\n    return a\n  elseif a == 1\
    \ or b == 1 then\n    return b\n  end\n  local q = math.floor(math.log2(a))\n\
    \  local r = math.floor(math.log2(b))\n  local m = r - q + 1\n  while m > 0 do\n\
    \    if math.pow(a, m) == b then\n      return m\n    elseif m % 2 == 1 then\n\
    \      m = m / 2\n    else\n      m = m / 2\n      q = q + 1\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ghqofnx.lua:17:\
    \ attempt to call a nil value (field 'log2')\nstack traceback:\n\t/tmp/tmp2ghqofnx.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp2ghqofnx.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a % b == 0 then\n    return b\n  else\n    local x = a\n    local y\
    \ = b\n    while y % x == 0 do\n      x = y\n      y = x / 2\n    end\n    return\
    \ y\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6wu04b2.lua:23:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpm6wu04b2.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 1 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnkvnzjb.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpcnkvnzjb.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if b == 1 then return a\n    else return greatest_common_divisor(b,\
    \ a % b) end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplfhn6kky.lua:14:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmplfhn6kky.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a == 0 then\n        return b\n    elseif b == 0 then\n        return\
    \ a\n    elseif a > b then\n        return greatest_common_divisor(b, a)\n   \
    \ end\n    local c = a\n    while c % b == 0 do\n        c = c / b\n    end\n\
    \    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2i6j9xc.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpr2i6j9xc.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    while b > 0 do\n        a = b\n        b = a % b\n    end\n    return\
    \ a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmt1bwbue.lua:17:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpmt1bwbue.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a end\n  local remainder, result = math.modf(a/b)\n\
    \  if remainder == 0 then return result else return greatest_common_divisor(b,\
    \ result) end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7h8kf15b.lua:15:\
    \ expected: 1, actual: 0.42857142857143\nstack traceback:\n\t/tmp/tmp7h8kf15b.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local function gcd(a, b)\n        if b == 0 then return a end\n    \
    \    return gcd(b, a % b)\n    end\n    return gcd(a, b)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local m = math.min(a, b)\n  local n = math.max(a, b)\n  while m % n ~=\
    \ 0 do\n    n = n + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n\t-- Based on: http://www.robertomurray.co.uk/robb/EN-001-560/lectures/14-Greatest-Common-Divisor.html\n\
    \t-- http://www.robertomurray.co.uk/robb/EN-001-560/lectures/15-Divisor-Euclidian.html\n\
    \t-- http://www.robertomurray.co.uk/robb/EN-001-560/lectures/16-Divisor-GCD.html\n\
    \t-- http://www.robertomurray.co.uk/robb/EN-001-560/lectures/17-Modulus.html\n\
    \t-- http://www.robertomurray.co.uk/robb/EN-001-560/lectures/18-GCD-and-LC.html\n\
    \t-- http://www.robertomurray.co.uk/robb/EN-001-560/lectures/19-GCD-Efficient.html\n\
    \t-- http://www.robertomurray.co.uk/robb/EN-001-560/lectures/20-Greatest-Common-Divisor_2.html\n\
    \t-- http://www.robertomurray.co.uk/robb/EN-001-560/lectures/21-Greatest-Common-Divisor_3.html\n\
    \t-- http://www.robertomurray.co.uk/robb/EN-001-560/lectures/22-Greatest-Common-Divisor_4.html\n\
    \t-- http://www.robertomurray.co.uk/robb/EN-001-560/lectures/23-GCD-Example.html\n\
    \t-- http://www.robertomurray.co.uk/robb/EN-001-560/lectures/24-Greatest-Common-Divisor_5.html\n\
    \t-- http://www.robertomurray.co.uk/robb/EN-001-560/lectures/25-Euclidian-Algorithm.html\n\
    \t-- http://www.robertomurray.co.uk/robb/EN-001-560/lectures/26-Greatest-Common-Divisor_6.html\n\
    \t-- http://www.robertomurray.co.uk/robb/EN-001-560/lectures/27-Greate\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp34k4ng5s.lua:31: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b else return greatest_common_divisor(b, a % b)\
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqiqpyk5v.lua:7:\
    \ attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpqiqpyk5v.lua:7: in function\
    \ </tmp/tmpqiqpyk5v.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpqiqpyk5v.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local div = nil\n    local is_divisor = true\n    for i = a, 0, -1 do\n\
    \        if b == 0 then\n            return i\n        end\n        if b % i ==\
    \ 0 then\n            div = i\n            is_divisor = false\n            break\n\
    \        end\n    end\n    if is_divisor then\n        return div\n    else\n\
    \        return b\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmoi4pdrl.lua:29:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpmoi4pdrl.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    -- https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \    local is_number = function(x) return type(x) ~= 'number' end\n    local m,\
    \ n = b, a\n    while m > 1 do\n        -- For the first 2 rounds, only even numbers\
    \ are prime.\n        if is_number(m) then\n            if is_number(n) then\n\
    \                if m % n == 0 then\n                    return m\n          \
    \      end\n            end\n        end\n        -- For the next round, only\
    \ odd numbers are prime.\n        m, n = m, m % n\n    end\n    return a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuypqui4g.lua:20:\
    \ attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpuypqui4g.lua:20: in local\
    \ 'candidate'\n\t/tmp/tmpuypqui4g.lua:28: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 1 then return a end\n  if a == 0 then return b end\n  return greatest_common_divisor(b,\
    \ a % b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddlezm0y.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpddlezm0y.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local amod = a % b\n    local bmod = b % a\n    return b if amod ==\
    \ 0 or (bmod == 0 and a < b) then\n        return a\n    else\n        return\
    \ amod\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm5mwy6ae.lua:9: 'end' expected (to close 'function' at line\
    \ 6) near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return 0 end\n  if b == 0 then return 0 end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc3pr5n5h.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Make sure b is bigger than a\n  if a < b then\n    a,b = b,a\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxy8cxwsb.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 1 then\n    return a\n  elseif b == 0 then\n    return a\n  elseif\
    \ a % b == 0 then\n    return greatest_common_divisor(b, a % b)\n  else\n    return\
    \ greatest_common_divisor(b, a % b) + 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2mcpdgg4.lua:21:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmp2mcpdgg4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a > b then a, b = b, a end\n  for remainder = a, 1; remainder >= b;\
    \ remainder = remainder - b\n  do\n  end\n  return remainder\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuk6dyjur.lua:8: 'do' expected near ';'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local gcd\n    gcd = function() return math.modf(a * b * 1.0)[1] end\n\
    \    gcd = gcd and gcd() or 1\n    return gcd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpngmqcy8e.lua:8:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmpngmqcy8e.lua:8:\
    \ in local 'gcd'\n\t/tmp/tmpngmqcy8e.lua:9: in local 'candidate'\n\t/tmp/tmpngmqcy8e.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    assert(a >= 0 and b > 0)\n    return b == 1 or a % b == 0\n        and\
    \ (a / b) or greatest_common_divisor(b, a % b)\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyqo7klxa.lua:11: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 1 then\n    return a\n  elseif a % b == 0 then\n    return greatest_common_divisor(a\
    \ / b, b)\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1pt0_id1.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1pt0_id1.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  assert(type(a) == 'number' and type(b) == 'number')\n  if a == 0 then\
    \ return b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n\
    \  while b > 0 do\n    local remainder = b % a\n    a = b\n    b = remainder\n\
    \  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0udre_l.lua:25:\
    \ expected: 12, actual: 24\nstack traceback:\n\t/tmp/tmp_0udre_l.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  a = a % b\n  if a == 0 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local function gcd(a, b)\n        if b == 0 then\n            return\
    \ a\n        end\n        return gcd(b, math.floor(a/b))\n    end\n    return\
    \ gcd(a, b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg2zdnykf.lua:19:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpg2zdnykf.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  end\n  if b == 1 then\n    return a\n\
    \  end\n  if b > a then\n    a, b = b, a\n  end\n  while b > 0 do\n    local q\
    \ = math.floor((a + b) / 2)\n    if a > b then\n      a = b\n    else\n      b\
    \ = q\n    end\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local common_divisor\n    local div\n    if b == 0 then\n        return\
    \ a\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpluceimab.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- http://rosettacode.org/wiki/Euclidean_algorithm#Lua\n  if a == 0 and\
    \ b == 0 then\n    return 0\n  end\n  if a == 0 then\n    return b\n  end\n  if\
    \ b == 0 then\n    return a\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgrioqvuw.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local d = a\n  local r = b\n  while d % r == 0 do\n    r = r * 10\n  end\n\
    \  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3ffuule.lua:18:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmp_3ffuule.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 1 then\n    return a\n  end\n  return greatest_common_divisor(b,\
    \ a % b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7r_rdxh.lua:16:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmps7r_rdxh.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Find greatest common divisor\n  if b == 1 then\n    return a\n  elseif\
    \ b == 0 then\n    return a\n  elseif b == -1 then\n    return b\n  end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaprj6on2.lua:25: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- See https://en.wikipedia.org/wiki/Euclidean_algorithm\n  -- >>> greatest_common_divisor(8,\
    \ 5)\n  -- 2\n  -- >>> greatest_common_divisor(10, 4)\n  -- 2\n  if b == 1 then\n\
    \    return a\n  end\n  if a % b == 0 then\n    return b\n  end\n  local c = a\n\
    \  while b % a == 0 do\n    c = b\n    b = a % b\n    a = c\n  end\n  return b\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdy8_m9_1.lua:30:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpdy8_m9_1.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local z = 0\n    local i = 1\n    while i <= a do\n        if a % i\
    \ == 0 then\n            z = i\n        end\n        i = i + 1\n    end\n    if\
    \ a == b then\n        return z\n    end\n    i = z + 1\n    while i <= b do\n\
    \        if b % i == 0 then\n            z = i\n        end\n        i = i + 1\n\
    \    end\n    return z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5qe_t9v.lua:31:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpe5qe_t9v.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n\tif a == 0 then\n\t\treturn b\n\tend\n\tif b == 0 then\n\t\treturn a\n\t\
    end\n\tlocal result = math.modf(a)\n\tif result ~= 0 then\n\t\treturn result\n\
    \tend\n\treturn greatest_common_divisor(b, a % b)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7hfi6sol.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7hfi6sol.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 1 then return b else return greatest_common_divisor(b, a % b)\
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg5zlptny.lua:7:\
    \ attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpg5zlptny.lua:7: in function\
    \ </tmp/tmpg5zlptny.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpg5zlptny.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  if a == 0 then return b\n  if a > b then\n\
    \    local t,n = b, a\n    a, b = b, t\n  end\n  return greatest_common_divisor(b,\
    \ a % b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmspo4nxg.lua:8: 'end' expected (to close 'if' at line 7) near\
    \ 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a % b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zqa5fm8.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp5zqa5fm8.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Greatest common divisor, via Euclid's algorithm.\n  --\n  --   http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  --\n  --   gcd(a,b) = gcd(b, a mod b)\n  --\n  --   Return a - b*b\n  --\n\
    \  -- The base case is when the remainder is zero, i.e.,\n  --\n  --     a = 0\
    \  or  b = 0, a divides b.\n  --\n  -- A more efficient algorithm is also given\
    \ in\n  --\n  --    Steven S. Skiena, \"Euclidean Algorithms\",\n  --    Algorithmica\
    \ 1, 39-46 (1970).\n  --\n  -- @param a first integer\n  -- @param b second integer\n\
    \  -- @return greatest common divisor of a and b\n  -- @see greatest_common_divisor_mod\n\
    \  -- @see mod\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdg91yyvh.lua:39: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  assert(type(a) == 'number' and type(b) == 'number' and b >= 0 and a >\
    \ 0)\n  local max_div = math.floor((math.log(a) / math.log(b))) + 1\n  for i =\
    \ 1, max_div do\n    if a % i == 0 and b % i == 0 then\n      return i\n    end\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_p4bo39.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpu_p4bo39.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    while b > 0 do\n        a, b = b, a % b\n    end\n    return a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a == 0 then\n        return b\n    end\n    if b == 0 then\n    \
    \    return a\n    end\n    while a ~= b do\n        if a > b then\n         \
    \   a, b = b, a\n        end\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local m = math.max(a, b)\n  while b > 0 do\n    local d = m % b\n    m\
    \ = b\n    b = d\n  end\n  return m\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomutt7a4.lua:19:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpomutt7a4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    assert(type(a) ~= 'string' and type(a) ~= 'number' and type(b) ~= 'string'\
    \ and type(b) ~= 'number', 'a and b should be strings or numbers')\n    assert(a\
    \ > 0 and b > 0 and b > a, 'a and b should be greater than 0')\n    local div\
    \ = math.floor(a/b) if b and a > b then a else b end\n    local rem = a % div\n\
    \    local i = a\n    while rem ~= 0 and i ~= 0 and i ~= div and rem % i == 0\
    \ do\n        i = i - 1\n        rem = rem % i\n    end\n    return div\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1fvmx1oj.lua:9: syntax error near 'else'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n\ta = math.floor(a)\n\tb = math.floor(b)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl1ru82yk.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a == 0 then return b\n    else if a == b then return a\n    else\
    \ return greatest_common_divisor(b, a % b) end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz_5d6vi2.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n\
    \    while a % b == 0 do\n        a, b = b, a % b\n    end\n    return b\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7w98_i80.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7w98_i80.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n   if b == 1 then return a end\n   if a % b == 0 then\n      return greatest_common_divisor(b,\
    \ a / b)\n   end\n   return greatest_common_divisor(b, (b * b) - (a * a))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  return b and b and ((a % b) == 0 or greatest_common_divisor(b, a % b))\
    \ and b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpal0u5l0q.lua:13:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpal0u5l0q.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  return math.gcd(a, b) -- This implementation is slightly slower than math.gcd.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnrwo_lto.lua:7:\
    \ attempt to call a nil value (field 'gcd')\nstack traceback:\n\t/tmp/tmpnrwo_lto.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnrwo_lto.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if b == 0 then return b end\n    while b % a == 0 do\n        b = b\
    \ - a\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8mlchw6.lua:17:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpv8mlchw6.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    return b == 0 and a or greatest_common_divisor(b, a % b)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If the divisor is 1, return 1\n  if a == 1 then\n    return 1\n  --\
    \ If remainder is 0, return b\n  elseif b == 0 then\n    return b\n  -- If both\
    \ are even, divide both by 2\n  elseif b % 2 == 0 then\n    return greatest_common_divisor(a\
    \ / 2, b / 2)\n  -- If remainder is odd, return b\n  else\n    return b\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppzd0q5w1.lua:25:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmppzd0q5w1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local function gcd(x, y)\n        -- Calculate the greatest common divisor\n\
    \        -- between the integers x and y\n        -- Using Euclid's algorithm\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp62n6z0bi.lua:21: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    while a % b == 0 do\n        a, b = b, a\n    end\n    return b\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp426lnn2m.lua:16:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmp426lnn2m.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- a and b should be integers\n  if a <= 0 or b <= 0 then\n    error(\"\
    the two integers should be positive\")\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0lv3og1a.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return a end\n  if b == 0 then return a end\n  if a < b\
    \ then return a end\n  local gcd = math.gcd(a, b)\n  return gcd and greatest_common_divisor(gcd,\
    \ a / gcd, b / gcd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5glvd8iw.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp5glvd8iw.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  return math.gcd(a, b) ~= 0 and math.gcd(a, math.gcd(b, a)) or a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmwke7mj0.lua:7:\
    \ attempt to call a nil value (field 'gcd')\nstack traceback:\n\t/tmp/tmpmwke7mj0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpmwke7mj0.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a < 0 or b < 0 then return nil end\n  local l\n  if a == 0 then return\
    \ b\n  elseif a == b then return a\n  else\n    l = math.ldexp(1, -math.min(math.max(1,\
    \ a), math.max(1, b)))\n    local divisor = greatest_common_divisor(b, l) + l\n\
    \    return divisor\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcm_na_ea.lua:21:\
    \ expected: 1, actual: 1.625\nstack traceback:\n\t/tmp/tmpcm_na_ea.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  return greatest_common_divisor(b,\
    \ a % b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a < 1 then a = 1\n    if b < 1 then b = 1\n    while a ~= 0 do\n\
    \        a, b = b, a%b\n    end\n    return b\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp17fceobl.lua:24: 'end' expected (to close 'if' at line 7)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a <= 0 then return a end\n    if b <= 0 then return b end\n    while\
    \ b > 0 do\n        a, b = b, a % b\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local l = 0\n    local r = a\n    while l < b do\n        if r == 0\
    \ or b == 0 then\n            break\n        end\n        local m = r\n      \
    \  r, l = (l * a) % b, r\n        if r == 0 then\n            break\n        end\n\
    \    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrn5jphw.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpvrn5jphw.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Compute GCD of a and b and return greatest common divisor of them\n\
    \  -- >>> greatest_common_divisor(12, 14)\n  -- 4\n  -- >>> greatest_common_divisor(7,\
    \ 5)\n  -- 3\n  -- >>> greatest_common_divisor(2, 4)\n  -- 2\n  -- >>> greatest_common_divisor(2,\
    \ 0)\n  -- 2\n  -- >>> greatest_common_divisor(20, 25)\n  -- 4\n  if b == 0 then\n\
    \    return a\n  elseif a == 0 then\n    return b\n  elseif b == 1 then\n    return\
    \ a\n  elseif a == 1 then\n    return b\n  else\n    -- Compute GCD of 3 numbers\
    \ a and b and a/gcd == b/gcd\n    -- >>> greatest_common_divisor(13, 2)\n    --\
    \ 3\n    local gcd = greatest_common_divisor(b, a % b)\n    if gcd == a then return\
    \ b else return gcd end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8dnv4g_9.lua:38:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmp8dnv4g_9.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 1 then\n    return a\n  elseif a % b == 0 then\n    return greatest_common_divisor(b,\
    \ a % b)\n  else\n    return greatest_common_divisor(b, a % b) + 1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34l2uymi.lua:19:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmp34l2uymi.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a > b then return greatest_common_divisor(b, a) end\n    if b ==\
    \ 1 then return a else return greatest_common_divisor(b, a % b) end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local t = a\n  local g = b\n  while g > 0 and t % g == 0 do\n    t = g\n\
    \    g = b % g\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9efj8gv2.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9efj8gv2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a end\n  if a == 0 then return b end\n  if b ==\
    \ a then return b\n  elseif b == 1 then return a\n  else return greatest_common_divisor(b,\
    \ a % b) end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7j84vett.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7j84vett.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a % b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqp4t3t6.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpgqp4t3t6.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    while a > b do\n        a = a - b\n    end\n    return a\nend\n</cell>\n\
    <text>\nNow we create a table called \"greatest_common_divisor_table\" that contains\
    \ the greatest common divisor between all possible pairs of integers from 1 to\
    \ 100. It stores them in a nested array where each element of array is another\
    \ array of all pairs of integers that are a greatest common divisor of another\
    \ integer:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplxjgdih1.lua:12: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif a == 0 then return b end\n  elseif b\
    \ == a then return b\n  else return greatest_common_divisor(b, a % b) end\nend\n\
    </cell>\n<text>\nAhora vamos a ver si nuestro programa funciona bien en la ejecuci\xF3\
    n de la parte de funciones y sus ejecuciones.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4_y98amc.lua:9: 'end' expected (to close 'function' at line\
    \ 6) near 'elseif'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    assert(type(a) == 'number' and type(b) == 'number')\n    -- TODO: Should\
    \ the result be rounded or truncated?\n    return math.gcd(a, b)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgge8ol5a.lua:9:\
    \ attempt to call a nil value (field 'gcd')\nstack traceback:\n\t/tmp/tmpgge8ol5a.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpgge8ol5a.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return a else return greatest_common_divisor(b, a % b)\
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5hcx96j8.lua:7:\
    \ attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp5hcx96j8.lua:7: in function\
    \ </tmp/tmp5hcx96j8.lua:6>\n\t(...tail calls...)\n\t/tmp/tmp5hcx96j8.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    error(\"Argument error: b should not be zero\")\n\
    \  end\n  if b == 1 then\n    return a\n  end\n  local r = b\n  while r > 0 do\n\
    \    local tmp = a % r\n    a = r\n    r = tmp\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    -- See http://en.wikipedia.org/wiki/Euclid#Two_algorithms_for_integer_factorization\n\
    \    -- This is O(N * M), but N and M are only at most 64, so we can use bignums.\n\
    \    -- The two for loops below are similar, except that the inner loop\n    --\
    \ stops when the result is larger than the largest divisor so far,\n    -- and\
    \ doesn't check whether the remainder is zero.  So it is\n    -- guaranteed that\
    \ both loops will terminate in at most log(N) times.\n    local m = 1\n    local\
    \ n = a\n    while n <= b do\n        local q = m % n\n        m = n\n       \
    \ n = q\n    end\n    return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl2rdv6si.lua:16:\
    \ attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpl2rdv6si.lua:16: in local\
    \ 'candidate'\n\t/tmp/tmpl2rdv6si.lua:26: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local gcd;\n    for gcd = b / a; gcd > 1; gcd = math.floor(gcd) end\n\
    \    return a * gcd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb7he7is0.lua:8: ',' expected near ';'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    -- The Euclidean Algorithm for finding the greatest common divisor\n\
    \    -- http://en.wikipedia.org/wiki/Euclidean_algorithm\n    local divisor\n\
    \    for i = 1, b do\n        if a % i == 0 then\n            divisor = i\n  \
    \          break\n        end\n    end\n    return a / divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdf6l8v7v.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdf6l8v7v.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n\tif b == 1 then return a end\n\treturn greatest_common_divisor(b, a % b)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4jzlm_g.lua:14:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpq4jzlm_g.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return a else return a % b end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3g1i2yo.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpm3g1i2yo.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local x = math.gcd(a, b)\n    if a == 0 then\n        return x\n   \
    \ end\n    return x % b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp7x08hwh.lua:7:\
    \ attempt to call a nil value (field 'gcd')\nstack traceback:\n\t/tmp/tmpp7x08hwh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpp7x08hwh.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 1 then\n    return a\n  elseif a == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexv7i_jx.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpexv7i_jx.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a == 0 then return b end\n    if b == 0 then return a\n    end\n\
    \    if a >= b then\n        return greatest_common_divisor(b, a%b)\n    else\n\
    \        return greatest_common_divisor(a, (b-a)%b)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if b == 1 then\n        return a\n    else\n        return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt98to6e2.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpt98to6e2.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- This could obviously be replaced with return math.gcd(a, b) -- or\n\
    \  -- -- return math.gcd(b, a), but that's not supported by Lua 5.2.\n  if a ==\
    \ 0 then return b end\n  if b == 0 then return a end\n  if a > b then a, b = b,\
    \ a end\n  local div = math.gcd(a, b)\n  return div * div\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0dlhbss_.lua:12:\
    \ attempt to call a nil value (field 'gcd')\nstack traceback:\n\t/tmp/tmp0dlhbss_.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp0dlhbss_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  assert(type(a) == 'number' and type(b) == 'number')\n  if a <= 0 or b\
    \ <= 0 then return 0 end\n  local d, q, r = a%b\n  while q > 0 and r > 0 do\n\
    \    d, q, r = b%r, q, d\n  end\n  return d\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ot6t0t9.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp9ot6t0t9.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp9ot6t0t9.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  a = a or 0\n  b = b or 0\n  while b > 0 do\n    local q = math.floor(a\
    \ / b)\n    a = b\n    b = q\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvo4y8qh5.lua:20:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpvo4y8qh5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    -- Handle trivial case\n    if b == 1 then\n        return a\n    elseif\
    \ b == 0 then\n        return 0\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq331hs_c.lua:23: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local r = 1\n  while b > 0 do\n    local q = a / b\n    a = b\n    b =\
    \ q\n    r = r + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprzda1qq2.lua:20:\
    \ expected: 1, actual: 16\nstack traceback:\n\t/tmp/tmprzda1qq2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If no divisors are defined, return 0\n  if b == 0 then return 1 end\n\
    \  if a == 0 then return b end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp139uzeic.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Simplify a negative by taking its absolute value\n  -- >>> greatest_common_divisor(-3,\
    \ -5)\n  -- 3\n  -- >>> greatest_common_divisor(7, 7)\n  -- 7\n  -- >>> greatest_common_divisor(-7,\
    \ 7)\n  -- 1\n  -- >>> greatest_common_divisor(1000000, 3)\n  -- 3\n  if a < 0\
    \ then\n    a = -a\n    b = -b\n  end -- Make sure a and b are both positive or\
    \ both negative\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj4sox02h.lua:30: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a == 0 then return b end\n    if b == 0 then return a end\n    if\
    \ a > b then a, b = b, a end\n    while b > 0 do\n       local t = a % b\n   \
    \    a = b\n       b = t\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Optimization:\n  if a >= b then\n    return a\n  end\n  if b > a then\n\
    \    return b\n  end\n  -- Optimization:\n  if a == b then\n    return a\n  end\n\
    \  -- Optimization:\n  if b == 1 then\n    return a\n  end\n  -- Optimization:\n\
    \  if a == 1 then\n    return b\n  end\n  -- The optimization below assumes a/b\
    \ > 2\n  -- If a * b > a / b then\n  --   return 1\n  -- end\n  -- If a * b >\
    \ b / a then\n  --   return b\n  -- end\n  -- Otherwise, a / b > 1, so\n  -- \
    \  return a / b\n  -- end\n  if a > 1 then\n    if b > 1 then\n      return a\
    \ / b\n    end\n    if b == 1 then\n      return a\n    end\n    return a\n  end\n\
    \  if b > 1 then\n    return b / a\n  end\n  if a == 1 then\n    return b\n  end\n\
    \  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nvn5t5y.lua:57:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmp_nvn5t5y.lua:57: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    -- assert(type(a) == \"number\" and type(b) == \"number\")\n    -- assert(a\
    \ ~= 0 and b ~= 0 and a ~= b and a < b)\n    if a == b then\n        return a\n\
    \    else\n        local remainder, divisor = a%b, a\n        while remainder\
    \ do\n            divisor = divisor + b\n            remainder, a = remainder,\
    \ a % divisor\n        end\n        return divisor\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    assert(type(a) == \"number\" and type(b) == \"number\")\n    local function\
    \ gcd(x, y)\n        if x == 0 then\n            return y\n        elseif y ==\
    \ 0 then\n            return x\n        else\n            local a = x\n      \
    \      local b = y\n            while b != 0 do\n                local q = a %\
    \ b\n                a = b\n                b = q\n            end\n         \
    \   return a\n        end\n    end\n    return gcd(a, b)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9lm67wk2.lua:16: 'do' expected near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a == 0 then\n        return b\n    elseif b == 0 then\n        return\
    \ a\n    elseif b < a then\n        a, b, _ = b, a, a\n    end\n    if a % b ==\
    \ 0 then\n        return b\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp62ji7b9i.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 1 then return a else return greatest_common_divisor(b, a % b)\
    \ end\nend\n</cell>\n<text>\nNext we define a function using tail recursion.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppn13hjhn.lua:9: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n\tif b <= 0 then\n\t\treturn a\n\tend\n\treturn greatest_common_divisor(b,\
    \ a % b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- This formula can be derived from the Euclid's algorithm:\n  -- https://en.wikipedia.org/wiki/Euclid's_algorithm\n\
    \  -- The greatest common divisor of two numbers is\n  -- `g = gcd(a, b)`,\n \
    \ -- which is the same as `(a \\ b) * b`, where `a` and `b`\n  -- are positive\
    \ integers.\n  return math.floor((math.gcd(a, b)) * (b / math.gcd(a, b)))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe837dubr.lua:13:\
    \ attempt to call a nil value (field 'gcd')\nstack traceback:\n\t/tmp/tmpe837dubr.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpe837dubr.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a > b then\n    a, b = b, a\n  end\n  while b > 0 do\n    local tmp\
    \ = a % b\n    a = b\n    b = tmp\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local gcf = 1\n  while a ~= b do\n    a = a / 2\n    b = b / 2\n    gcf\
    \ = gcf * 2\n  end\n  return gcf\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhil867m.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmhil867m.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local r = a\n    local i = 1\n    while i <= b do\n        if r > 0\
    \ then\n            r = r / i\n        else\n            r = i / r\n        end\n\
    \        i = i + 2\n    end\n    return r\nend\n</cell>\n<text>\nExercise: Write\
    \ a function that takes as input a matrix and the number of rows and columns as\
    \ arguments and returns the row and column counts of the input matrix. Print a\
    \ message if the number of rows or columns are less than 2.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5jcc5e8e.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local div, mod = div(a, function (x)\n        return b == 0 and 0 or\
    \ x % b\n    end), a % b\n    return div and mod and div or 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpftvq0dgk.lua:7:\
    \ attempt to call a nil value (global 'div')\nstack traceback:\n\t/tmp/tmpftvq0dgk.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpftvq0dgk.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif a == b then\n    return a\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwnr1mu1z.lua:12:\
    \ attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpwnr1mu1z.lua:12: in function\
    \ </tmp/tmpwnr1mu1z.lua:6>\n\t(...tail calls...)\n\t/tmp/tmpwnr1mu1z.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n   -- Taken from https://stackoverflow.com/questions/2068347/fastest-way-to-list-all-primes-below-n-in-python\n\
    \   -- Returns all primes smaller than n\n   -- This algorithm is much faster\
    \ than the Sieve of Eratosthenes\n   -- And is much simpler\n   -- See: https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \   local sqrt_n = math.sqrt(math.floor(n/2))\n   if sqrt_n == 1 then return n\
    \ end\n   if n == 2 then return 1 end\n   if sqrt_n <= 2 then\n      -- Special\
    \ case for 2 <= sqrt(n) <= 2\n      a = a\n      b = b\n      local is_a_prime\
    \ = true\n      local is_b_prime = true\n      local i_1 = 2\n      local i_2\
    \ = 2\n      while i_2 <= sqrt_n do\n         if n % i_2 == 0 then\n         \
    \   is_a_prime = false\n         end\n         if n % i_1 == 0 then\n        \
    \    is_b_prime = false\n         end\n         if is_a_prime and is_b_prime then\
    \ return i_1 end\n         if is_b_prime and is_a_prime then return i_2 end\n\
    \         i_1 = i_1 + 1\n         i_2 = i_2 + 1\n      end\n      return i_1\n\
    \   end\n   -- Sieve of Eratosthenes up to sqrt_n\n   -- Note that i_1 and i_2\
    \ may reach sqrt(n), but we never test them\n   -- i_1 and i_2 are incremented\
    \ and decremented until we reach sqrt(n)\n   local i_1 = 2\n   local i_2 = 2\n\
    \   -- A prime (odd number that is not equal to 1)\n   local is_a_prime = true\n\
    \   -- A prime (odd number that is not equal to 1)\n   local is_b_prime = true\n\
    \   -- i_1 and i_2 are incremented and decremented until we reach sqrt(n)\n  \
    \ while i_2 <= sqrt_n do\n      if n % i_2 == 0 then\n         is_a_prime = false\n\
    \      end\n      if n % i_1 == 0 then\n         is_b_prime = false\n      end\n\
    \      if is_a_prime and is_b_prime then return i_1 end\n      if is_b_prime and\
    \ is_a_prime then return i_2 end\n      i_1 = i_1 + 1\n      i_2 = i_2 + 1\n \
    \  end\n   return i_1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1lkkxh4t.lua:12:\
    \ attempt to perform arithmetic on a nil value (global 'n')\nstack traceback:\n\
    \t/tmp/tmp1lkkxh4t.lua:12: in local 'candidate'\n\t/tmp/tmp1lkkxh4t.lua:65: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a <= b or b == 0 then\n    return a\n  elseif b == 0 then\n    return\
    \ a\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc0qy6t7o.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if b == 0 then\n        return a\n    elseif a == 0 then\n        return\
    \ b\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphd35s630.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a == 0 then return 0 end\n    local b = b or a\n    local div\n \
    \   for div = 1, a do\n        if b % div == 0 then return div\n        end\n\
    \    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_h6q35cg.lua:21:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp_h6q35cg.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n   assert(type(a) == 'number' and type(b) == 'number')\n   assert(a > 0\
    \ and b > 0)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6qm10rtl.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  while a\
    \ % b == 0 do\n    a = math.floor(a)\n    b = math.floor(b)\n  end\n  return b\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkzq723s.lua:19:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpbkzq723s.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 or b == 0 then return 0 end\n  local result = 1\n  while a ~=\
    \ 0 and b ~= 0 do\n    local m = math.mod(a, b)\n    a, b = b, m\n    result,\
    \ a = result, a\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm4suu_ii.lua:10:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpm4suu_ii.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpm4suu_ii.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local div = 1\n  while b > 0 do\n    local t = a % b\n    a = b\n    b\
    \ = t\n    div = div * 10 + 1\n  end\n  return div\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphd6eqypt.lua:20:\
    \ expected: 1, actual: 1111\nstack traceback:\n\t/tmp/tmphd6eqypt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local div = a % b\n  if div > 0 then\n    return greatest_common_divisor(b,\
    \ div)\n  else\n    return b\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n   if b == 1 then return b end\n   if a % b == 0 then return b end\n   if\
    \ b == 2 then return a\n   elseif b < a then return greatest_common_divisor(b,\
    \ a) end\n   return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxd_r8ce.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpzxd_r8ce.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a == 0 then\n        return b\n    end\n    if b == 1 then\n    \
    \    return a\n    end\n    if a ~= b or a == 0 then\n        return greatest_common_divisor(b,\
    \ a % b)\n    end\n    return greatest_common_divisor(b, a / b)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwr3v9yi.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpqwr3v9yi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 1 then return b end\n  local r = a\n  while b > 0 do\n    if r\
    \ == 0 or r == a then break end\n    local quo = math.floor(a/b); a = a % b\n\
    \    if a == 0 then break end\n    r = quo\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_ttlz9z.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpi_ttlz9z.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b < a then\n    a, b = b, a\n  end\n  for i = 1, a do\n    while b\
    \ % i == 0 do\n      b = b div i\n    end\n    if b == i then\n      return i\n\
    \    end\n  end\n  return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcsqbbafi.lua:12: syntax error near 'i'\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a == 0 then return b\n    end\n    if b == 0 then return a\n    end\n\
    \    if a > b then a, b = b, a\n    end\n    local n = a\n    while n ~= 0 do\n\
    \        local d = b\n        local m = n / 2\n        while m ~= 0 do\n     \
    \       if n % m == 0 then return m\n            end\n            d = d / 2\n\
    \            m = m / 2\n        end\n        n = n + 1\n    end\n    return a\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzfgzjkj.lua:31:\
    \ expected: 1, actual: 1.5\nstack traceback:\n\t/tmp/tmplzfgzjkj.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 1 then\n    return a\n  end\n  if a == 0 then\n    return b\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprzrfqr3_.lua:23: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b < a then return greatest_common_divisor(b,\
    \ a) end\n  local gcd = math.gcd(a, b)\n  return b * gcd / gcd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjflfldo3.lua:9:\
    \ attempt to call a nil value (field 'gcd')\nstack traceback:\n\t/tmp/tmpjflfldo3.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpjflfldo3.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local m = a\n  local n = b\n  while m % n ~= 0 do\n    m = m * 2\n   \
    \ n = n + 1\n  end\n  return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1zyxev8o.lua:19:\
    \ expected: 1, actual: 96\nstack traceback:\n\t/tmp/tmp1zyxev8o.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif a > b then return greatest_common_divisor(b,\
    \ a) end\n  while a % b == 0 do\n    a = a / b\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ky9a7np.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9ky9a7np.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n\t-- a / b --> gcd(a, b) --> gcd of a and b\n\t-- gcd(a, b) = gcd(b, a mod\
    \ b)\n\treturn b % a == 0 and a % b == 0\n\t\tand greatest_common_divisor(b, a\
    \ % b) or greatest_common_divisor(a, b)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe5jvu4qj.lua:10:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpe5jvu4qj.lua:10: in upvalue 'greatest_common_divisor'\n\
    \t/tmp/tmpe5jvu4qj.lua:10: in upvalue 'greatest_common_divisor'\n\t/tmp/tmpe5jvu4qj.lua:10:\
    \ in upvalue 'greatest_common_divisor'\n\t/tmp/tmpe5jvu4qj.lua:10: in upvalue\
    \ 'greatest_common_divisor'\n\t/tmp/tmpe5jvu4qj.lua:10: in upvalue 'greatest_common_divisor'\n\
    \t/tmp/tmpe5jvu4qj.lua:10: in upvalue 'greatest_common_divisor'\n\t/tmp/tmpe5jvu4qj.lua:10:\
    \ in upvalue 'greatest_common_divisor'\n\t/tmp/tmpe5jvu4qj.lua:10: in upvalue\
    \ 'greatest_common_divisor'\n\t/tmp/tmpe5jvu4qj.lua:10: in upvalue 'greatest_common_divisor'\n\
    \t...\n\t/tmp/tmpe5jvu4qj.lua:10: in local 'candidate'\n\t/tmp/tmpe5jvu4qj.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.120 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 and b == 0 then return 0 end\n  local d = 0\n  local k = math.floor(a)\n\
    \  while k <= b do\n    d = math.max(d,k);\n    k = k + 1;\n  end\n  return d\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsn3j35gv.lua:20:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpsn3j35gv.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
