name: HumanEval_125_split_words
language: lua
results:
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[^A-Za-z]+\"\
    , \" \")\n  local wordlist = words:gsub(\",\", \" \")\n  -- return number of letters\
    \ with odd order\n  local num_letters = #wordlist:gsub(\"[a-z]\", function(c)\
    \ return ord(c) - ord (\"a\") + 1 end)\n  return num_letters\nend\n</cell>\n<cell>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5hmyds23.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    for w in str:gmatch(\"\
    ([\" .. string.gsub(string.lower(txt), \",\", \" ,\"g\") .. \"]+)\") do\n    \
    \    table.insert(words, w)\n    end\n    return #words > 0 and words or 1\nend\n\
    </code>\n<|/ a dscore=3 tags=lua,lua-table,split |>\n<| c |>\nI like the idea\
    \ of splitting the words into an array and then checking each word. Good thought,\
    \ thanks!\n<|/ c |>\n<| c |>\n`split_words(\"Hello,world!\") == 3` gives me an\
    \ incorrect answer for that test case.\n<|/ c |>\n<| c |>\nWhat do you mean? It\
    \ returns 3 as the number of words in the input string. Can you give an example?\n\
    <|/ c |>\n<| c |>\nSorry about that, I had a problem with my test case. Thanks\
    \ again.\n<|/ c |>\n<| a |>\nHere's another one that only returns one split word:\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnqow9qqr.lua:10: ')' expected near 'g'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  -- Handle the case where there is no whitespace\n\
    \  if txt:sub(1, 1) == \" \" then\n    return split_words(txt:sub(2)):reverse()\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0ioox9y6.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = {}\n  local count = {}\n\
    \  local counts = {}\n  for _,w in ipairs(txt:gmatch('[^ ]+')) do\n    words[#words\
    \ + 1] = (words[#words + 1] or \"\") .. w\n    counts[#words + 1] = (counts[#words\
    \ + 1] or 0) + #w:lower() + 1\n  end\n  for i = 1,#words do\n    local j = i -\
    \ 1\n    while j > 0 and counts[words[j]] == counts[words[j - 1]] do\n      counts[words[j]]\
    \ = counts[words[j - 1]] + 1\n      words[j] = words[j - 1]\n      j = j - 1\n\
    \    end\n    words[j] = words[j] .. counts[words[j]]\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local split = {}\n    local words =\
    \ txt:gmatch(\"[%w]([%w]+)\")\n    if words then\n        for _, word in ipairs(words)\
    \ do\n            if word:sub(1,1) == '-' then\n                table.insert(split,\
    \ word)\n            else\n                table.insert(split, word:lower())\n\
    \            end\n        end\n    end\n    return #split > 0 and split or 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt == nil then return end\n  local\
    \ words = { }\n  local lower = string.lower(txt)\n  -- Ignore empty strings\n\
    \  if lower == '' or lower == 'nil' then return words end\n  -- Split on whitespace\n\
    \  local whitespace = string.gsub(txt, \"[^ ]\", \" \") -- No whitespace in string\n\
    \  if whitespace:len() > 0 then words = words:concat(split_words(whitespace))\
    \ end\n  -- Split on commas and ignore commas in string\n  whitespace = string.gsub(txt,\
    \ \"[^ ,]+\", \",\")\n  if whitespace:len() > 0 then words = words:concat(split_words(whitespace))\
    \ end\n  -- Split on space if odd number of characters exist\n  if #lower % 2\
    \ == 1 then\n    whitespace = string.gsub(string.gsub(string.gsub(lower, \",\"\
    , \" \"), \"[^a-z]\",\"\"), \"[^a-z]\",\"\")\n    if whitespace:len() > 0 then\
    \ words = words:concat(split_words(whitespace)) end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvpqfyzwo.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpvpqfyzwo.lua:15: in upvalue 'split_words'\n\
    \t/tmp/tmpvpqfyzwo.lua:16: in upvalue 'split_words'\n\t/tmp/tmpvpqfyzwo.lua:16:\
    \ in upvalue 'split_words'\n\t/tmp/tmpvpqfyzwo.lua:16: in upvalue 'split_words'\n\
    \t/tmp/tmpvpqfyzwo.lua:16: in upvalue 'split_words'\n\t/tmp/tmpvpqfyzwo.lua:16:\
    \ in upvalue 'split_words'\n\t/tmp/tmpvpqfyzwo.lua:16: in upvalue 'split_words'\n\
    \t/tmp/tmpvpqfyzwo.lua:16: in upvalue 'split_words'\n\t/tmp/tmpvpqfyzwo.lua:16:\
    \ in upvalue 'split_words'\n\t...\n\t/tmp/tmpvpqfyzwo.lua:16: in local 'candidate'\n\
    \t/tmp/tmpvpqfyzwo.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.210\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt == nil then\n        return \"\
    [\" .. tostring(#words) .. \"]\"\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcu_db_re.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal words = text:gmatch(\"[^ ]+\")\n\
    \tlocal wordcount = #words\n\tif wordcount and words:sub(1, wordcount-1) ~= \"\
    \" then\n\t\twords = words:sub(1, wordcount-1)\n\tend\n\tif not wordcount or wordcount\
    \ == 1 then\n\t\treturn 1\n\tend\n\tif words[wordcount-1] ~= \"\" then\n\t\twords[wordcount-1]\
    \ = words[wordcount-1] .. \",\"\n\tend\n\treturn #words or 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb1k3heq6.lua:9:\
    \ attempt to index a nil value (global 'text')\nstack traceback:\n\t/tmp/tmpb1k3heq6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpb1k3heq6.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local split = {}\n   for w in string.gmatch(txt,\
    \ \"([^,]+)\")\n   do\n      if w ~= \"\" then\n         split[#split + 1] = w\n\
    \      end\n   end\n   return split\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wfmk26l.lua:22:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello world!\"}\nstack traceback:\n\
    \t/tmp/tmp0wfmk26l.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   if txt == nil or type(txt) ~= 'string'\
    \ then\n      return 0\n   end\n   local ws = ' '\n   local num = 0\n   for w\
    \ in string.gmatch(txt, '([^ ]+)') do\n      if string.find(w, ws, 1, true) ~=\
    \ nil then\n         ws = ', '\n      elseif num % 2 == 1 then\n         ws =\
    \ ''\n      else\n         ws = '[%s]' % ws\n      end\n      num = num + 1\n\
    \   end\n   return string.gsub(txt, ws, '')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzigwvksq.lua:20:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpzigwvksq.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpzigwvksq.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"(^[%w])|(%w$)\"\
    , \" \")\n    return words:gsub(\"(^%S+%S+%S+)|(%S+%S+)\", function(w1, w2)\n\
    \        local w3 = w1 .. w2\n        local l = w3:len()\n        if l == 0 then\
    \ return 3 end\n        return l - 1\n    end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprylwn7wx.lua:21:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmprylwn7wx.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local words = nil\n   local count = 1\n\
    \   if txt:match(\" \") then\n      words = txt:gmatch(\"([^ ]+)\")\n   else\n\
    \      words = txt:gmatch(\"([^,]+)\") \n   end\n   if words == nil then\n   \
    \   count = #(str:gsub(\"([%a%d]+)\", function(c) return string.byte(c):byte()\
    \ - string.byte(\"a\") end))/2\n   end\n   return count, words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8e2vrw3.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 1\nstack traceback:\n\t/tmp/tmpr8e2vrw3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local count = 1\n   local words = \"\"\
    \n   for i = 1, #txt do\n      if txt:sub(i,i) ~= \" \" then\n         count =\
    \ count + 1\n      else\n         words = words + txt:sub(1,i)\n         count\
    \ = count - 1\n      end\n   end\n   if count == 0 then\n      words = words +\
    \ txt\n   end\n   if count % 2 == 1 then\n      words = words + \",\"\n   end\n\
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7thgzqtw.lua:15:\
    \ attempt to perform arithmetic on a string value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp7thgzqtw.lua:15: in local 'candidate'\n\t/tmp/tmp7thgzqtw.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  return txt:gsub(\"[^a-zA-Z]+\", \",\"\
    ):gsub(\",+\", \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2gfprwe.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello,world,\"\nstack traceback:\n\
    \t/tmp/tmpf2gfprwe.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local words = {}\n   local last_chr =\
    \ nil\n   for i, c in ipairs(txt) do\n      if last_chr ~= nil and c == last_chr\
    \ then\n         words[#words + 1] = words[#words]\n      else\n         words[#words\
    \ + 1] = c\n         last_chr = c\n      end\n   end\n   if #words == 0 then\n\
    \      return nil\n   end\n   return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8q6sjat.lua:28:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpx8q6sjat.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"([^ ]+)\")\
    \ -- Split on whitespace\n  local count = 1\n  local new_words = nil\n  local\
    \ new_txt = nil\n  if #words > 0 then\n    local firstword = words[1]\n    new_words\
    \ = firstword:gsub(\"(.)\", function(c)\n      count = count + 1\n      if #words\
    \ > 1 then\n        return new_words .. c\n      else\n        return new_words\
    \ + c\n      end\n    end)\n    if #words > 1 then\n      new_words = new_words:gsub(\"\
    %S+\", function(c)\n        return c\n      end)\n      new_words = new_words:gsub(\"\
    [^\" .. firstword .. \"]\", \"\")\n      new_words = new_words:gsub(\"[%S]\",\
    \ function(c)\n        return c\n      end)\n      new_words = new_words:gsub(\"\
    %S+\", function(c)\n        return c\n      end)\n      new_words = new_words:gsub(\"\
    %S\", function(c)\n        return c\n      end)\n    end\n  end\n  return new_words,\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp470n987t.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp470n987t.lua:13: in local 'candidate'\n\t/tmp/tmp470n987t.lua:45: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local result = {}\n    local cnt = 0\n\
    \    local chars = string.gsub(txt, \",\", \"\\n\")\n    for _, s in ipairs(chars)\
    \ do\n        local lower = string.lower(s)\n        if lower then\n         \
    \   if string.find(lower, \" \") then\n                table.insert(result, lower,\
    \ cnt)\n                cnt = cnt + 1\n            else\n                table.insert(result,\
    \ lower, 1)\n                cnt = 1\n            end\n        end\n    end\n\
    \    return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa83xyaa1.lua:30:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpa83xyaa1.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    return split(txt, \" \", function(word)\n\
    \        return not(word)\n    end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp05fpj4_c.lua:9:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp05fpj4_c.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp05fpj4_c.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local tbl = {}\n  local num_letters =\
    \ 0\n  for w in txt:gmatch(\"[%w\\]+\") do\n    table.insert(tbl, w)\n    num_letters\
    \ = num_letters + #w\n  end\n  if num_letters <= 1 then\n    return #tbl\n  end\n\
    \  local num_comma = 0\n  for i = #tbl, 2, -1 do\n    if tbl[i] == ',' then\n\
    \      num_comma = num_comma + 1\n    elseif num_comma > 0 then\n      tbl[i]\
    \ = tbl[i-1]\n      num_comma = 0\n    end\n  end\n  return #tbl\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6x1tsfs3.lua:11: invalid escape sequence near '\"[%w\\]'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   if txt:find(' ') then\n      local s\
    \ = txt:gsub(\"([\" .. string.char(\" \") .. \"-]+)\", \" \"):gsub(\"[\" .. string.char(\"\
    \ \") .. \"]+\", \"_\")\n      return string.gsub(s, \"(\" .. string.char(\" \"\
    ) .. \")\", \"_\"):gsub(\"(^_|_$)\", \"\")\n   else\n      return string.gsub(txt,\
    \ \",\", \"_\"):gsub(\"(^_|_$)\", \"\")\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgjg_x0lv.lua:10:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpgjg_x0lv.lua:10: in local 'candidate'\n\t/tmp/tmpgjg_x0lv.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    return txt:gmatch(\"([A-Za-z]+)\") or\
    \ {\"\"}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwc56qt6w.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x78d270\nstack traceback:\n\
    \t/tmp/tmpwc56qt6w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"([^A-Za-z'-])\"\
    , \" $1\"):gsub(\"([^a-z'-])\", \" $1\"):gsub(\"'$\", \"\"):gsub(\"^$\", \"\"\
    ):gsub(\"[^a-zA-Z'-]\", \" \"):gsub(\"^([^A-Za-z'-])\", \" $1\")\n  return words:gsub(\"\
    [,]\", \" \"):gsub(\"[a-z]\", \" \"):gsub(\"[A-Z]\", \" \"):gsub(\"[']+\", \"\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfc9tyq89.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \" $1                           \
    \  \"\nstack traceback:\n\t/tmp/tmpfc9tyq89.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  -- Create a copy of the text for use in\
    \ the for loop\n  local text = txt\n  -- If the text begins with a whitespace\n\
    \  if text:sub(3,3):find(\"%W\") == 1 then\n    -- Remove whitespace at the beginning\n\
    \    text = text:sub(3)\n  -- If there are no whitespaces in the text, split on\
    \ commas\n  elseif text:find(\"%c\") == nil then\n    text = text:gsub(\",\",\
    \ \" \")\n  -- If there are no commas, or there is only one comma, it's a single\
    \ word with a space before\n  elseif text:find(\"%c\") ~= nil or text:find(\"\
    %c\") == \"1\" then\n    -- Remove whitespace from the beginning\n    text = text:sub(3)\n\
    \    -- Replace commas with spaces\n    text = text:gsub(\",\", \" \")\n  -- Otherwise,\
    \ just use the text\n  else\n    text = text\n  end\n  -- Create a table of characters\
    \ and lower-case them\n  local letters = {}\n  for i = 0, #text do letters[i]\
    \ = tolower(text:sub(i,i)) end\n  -- Create an array of odd characters (A-Z),\
    \ remove duplicates, and return the count of odd characters\n  local count_of_odd_letters\
    \ = letters[#letters]\n  -- For each word\n  for i=1, #words do\n    -- Remove\
    \ spaces from the beginning and end if the word begins and ends with a space\n\
    \    local word_with_removed_spaces = word_to_lower(words[i])\n    -- If the word\
    \ starts and ends with spaces\n    if word_with_removed_spaces:sub(3,3) ~= \"\
    \ \" then\n      -- Remove spaces from the beginning of the word\n      word_with_removed_spaces\
    \ = word_with_removed_spaces:sub(3)\n      -- If the word doesn't end with a space,\
    \ remove trailing spaces\n      if word_with_removed_spaces:sub(end) ~= \" \"\
    \ then word_with_removed_spaces = word_with_removed_spaces:sub(#word_with_removed_spaces)\
    \ end\n      -- If the word doesn't begin with a space, remove leading spaces\n\
    \      if word_with_removed_spaces:sub(1,1) ~= \" \" then word_with_removed_spaces\
    \ = word_with_removed_spaces:sub(1,#word_with_removed_spaces) end\n      -- If\
    \ the word doesn't end with a space and doesn't begin with a space, add an empty\
    \ string\n      if word_with_removed_spaces:sub(1,1) ~= \" \" and word_with_removed_spaces:sub(1,1)\
    \ ~= \" \" then word_with_removed_spaces = word_with_removed_spaces:sub(1,1) end\n\
    \    end\n    -- If the word doesn't start with spaces\n    if word_with_removed_spaces:sub(1,1)\
    \ ~= \" \" then\n      -- Add empty strings to the beginning of the word\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp48nfgy_u.lua:42: unexpected symbol near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"([\" .. string.gsub(string.lower(string.gsub(\"\
    %a+\", \"\", string.gsub(string.lower(txt), \"[^a-z]\", \"\")), \"[\" .. string.char(string.byte('a')),\
    \ string.byte('A')) .. \"]+)\")\n    if words == txt then\n        return nil\n\
    \    end\n    local commaIndex = string.find(words, \",\")\n    if commaIndex\
    \ ~= nil then\n        return string.gsub(words, \",\", \"\"):gsub(\"^\" .. string.gsub(words,\
    \ \"[^\" .. string.char(string.byte('a'), string.byte('A')) .. \"]+\", \"\")\n\
    \    else\n        return string.gsub(words, \"^\" .. string.gsub(words, \"[^\"\
    \ .. string.char(string.byte('a'), string.byte('A')) .. \"]+\", \"\")\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_lnc5jno.lua:10: ')' expected (to close '(' at line 9) near\
    \ 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local space_idx = false\n    local comma_idx\
    \ = false\n    local idx = 0\n    local num_words = 1\n    local words = { }\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9_5_uoc5.lua:28: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local words = txt and string.gmatch(txt,\
    \ \"([^A-Za-z]|^)%u{2,}\") or {} -- Split on non-letter characters\n   local n\
    \ = #words\n   if n == 2 then\n      words[1], words[#words] = \"a\", \"a\"\n\
    \   elseif n % 2 == 1 then\n      words[1], words[#words + 1] = words[1], words[#words\
    \ + 1]\n   end\n   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_u77lho.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmps_u77lho.lua:10: in local 'candidate'\n\t/tmp/tmps_u77lho.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local letters = {}\n  local words = nil\n\
    \  local count = 0\n  for letter in string.gmatch(txt, \"([a-z]+(,[a-z]+)*)\"\
    ) do\n    letters[#letters + 1] = letter\n    count = count + 1\n  end\n  if count\
    \ % 2 ~= 0 then\n    words = letters\n  else\n    words = {}\n    local i = 0\n\
    \    for letter in letters do\n      i = i + 1\n      if letter == letters[i]\
    \ then\n        words[#words + 1] = {letters[i], letters[i + 1]}\n      else\n\
    \        words[#words + 1] = letter\n      end\n    end\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprnqzyovm.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmprnqzyovm.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmprnqzyovm.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local words = { }\n   for word in str:gmatch(\"\
    %w+\") do table.insert(words, word) end\n   return table.concat(words, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpykhtmdt_.lua:10:\
    \ attempt to index a nil value (global 'str')\nstack traceback:\n\t/tmp/tmpykhtmdt_.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpykhtmdt_.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  return txt:gsub('(%a+)', function(t) return\
    \ t:lower() end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdvtxo9w.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"hello world!\"\nstack traceback:\n\
    \t/tmp/tmprdvtxo9w.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = \"\"\n  local i = 0\n  local\
    \ last_letter = 0\n  local chars = {}\n  local charcount = {}\n  for w in txt:gmatch(\"\
    ([^ ,]+) \") do\n    i = i + 1\n    char = w:sub(1, 1)\n    last_letter = last_letter\
    \ + char:len()\n    chars[#chars + 1] = char\n    charcount[char:lower()] = charcount[char:lower()]\
    \ + 1\n  end\n  for char = chars[last_letter] do\n    charcount[char:lower()]\
    \ = charcount[char:lower()] + 1\n  end\n  for key in pairs(charcount) do\n   \
    \ words = words .. key .. \" \"\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvlg3dmu1.lua:21: ',' expected near 'do'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%W+]\", \" \"\
    ):gsub(\"(%S+)\", function(c) return tostring(c):lower() end)\n  return words:gsub(\"\
    ^%s*(.-)%s*$\", \"%1\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi33fok0z.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"hello world\"\nstack traceback:\n\
    \t/tmp/tmpi33fok0z.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal words = txt:gmatch('[^ ]+')\n\t\
    words[1] = words[1] .. \",\" .. words[1]\n\treturn table.concat(words, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq8ojbwf7.lua:10:\
    \ attempt to index a function value (local 'words')\nstack traceback:\n\t/tmp/tmpq8ojbwf7.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpq8ojbwf7.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt == '' then return nil end\n  local\
    \ words = txt:gmatch(\"([^ ]+)\")\n  if words ~= nil then\n    local last_word\
    \ = words[#words]\n    return words,  last_word\n  else\n    return txt:gmatch(\"\
    ([a-z][a-z]|[0-9]+)\")\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpotxrmimt.lua:12:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpotxrmimt.lua:12: in local 'candidate'\n\t/tmp/tmpotxrmimt.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local result = {}\n    for c in txt:gmatch(\"\
    ([a-z][a-z ]*)(.-)\") do\n        table.insert(result, c[1])\n    end\n    table.sort(result)\n\
    \    return #result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprifmesfp.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmprifmesfp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:len() <= 1 then\n        return\
    \ {txt}\n    end\n    -- Get all characters and count lowercase letters in string\n\
    \    local num_chars = txt:len()\n    local chars = {}\n    for i = 1, num_chars\
    \ do\n        local letter = txt:sub(i, i)\n        if letter:lower():byte() ==\
    \ letter then\n            table.insert(chars, letter)\n        end\n    end\n\
    \    -- Remove duplicates\n    local result = {}\n    table.sort(chars, function(a,\
    \ b) return a < b end)\n    for i = 1, num_chars - 1 do\n        local a = chars[i]\n\
    \        local b = chars[i + 1]\n        if a == b then\n            table.insert(result,\
    \ a)\n        else\n            table.insert(result, a)\n            table.insert(result,\
    \ b)\n        end\n    end\n    table.sort(result)\n    -- Add comma if missing\n\
    \    if #result == num_chars - 1 then\n        table.insert(result, \",\")\n \
    \   end\n    -- Return number of chars\n    return num_chars\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rb0_cys.lua:46:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 12\nstack traceback:\n\t/tmp/tmp1rb0_cys.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"%w+\")\n  if\
    \ words == nil then\n    words = txt:gmatch(\"%w+$\")\n  end\n  if words == nil\
    \ then\n    words = txt:gmatch(\"%w+\")\n  end\n  if words == nil then\n    words\
    \ = txt:gmatch(\"%w+;\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    %w+,\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"%w+;\")\n  end\n\
    \  if words == nil then\n    words = txt:gmatch(\"%w+,\")\n  end\n  if words ==\
    \ nil then\n    words = txt:gmatch(\"%w+\")\n  end\n  if words == nil then\n \
    \   words = txt:gmatch(\"%w+,\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    %w+;\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"%w+,\")\n  end\n\
    \  if words == nil then\n    words = txt:gmatch(\"%w+;\")\n  end\n  if words ==\
    \ nil then\n    words = txt:gmatch(\"%w+,\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"%w+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    %w+,\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"%w+;\")\n  end\n\
    \  if words == nil then\n    words = txt:gmatch(\"%w+,\")\n  end\n  if words ==\
    \ nil then\n    words = txt:gmatch(\"%w+;\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"%w+,\")\n  end\n  if words == nil then\n    words =\
    \ txt:gmatch(\"%w+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    %w+,\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"%w+;\")\n  end\n\
    \  if words == nil then\n    words = txt:gmatch(\"%w+,\")\n  end\n  if words ==\
    \ nil then\n    words = txt:gmatch(\"%w+;\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"%w+,\")\n  end\n  if \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6q1ztorq.lua:83: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   -- Split on spaces, commas and lower-case\
    \ letters\n   local words = { txt:gsub(\"([^ ,]|^)([^ ,]|$)\", \"%2\") }\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwzdv302i.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local results = {}\n    local whitesp\
    \ = 0\n    for word in txt:gmatch('[^ ]+') do\n        table.insert(results, word)\n\
    \        whitesp = whitesp + #word -- count whitespaces\n    end\n    if whitesp\
    \ == 0 then\n        return #txt, results\n    else\n        return whitesp, table.concat(results)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphp7gudmc.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 11\nstack traceback:\n\t/tmp/tmphp7gudmc.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = { }\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm1x__2fq.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    -- Find all whitespace boundaries using\
    \ regexp and get the first one\n    local re = string.format(\"^%s+\", string.gsub(\"\
    %c+\", \"%c*\", string.whitespace))\n    local split = re.match(txt)\n    if split\
    \ == nil then\n        return 1, string.gsub(string.gsub(txt, \"%c\", \"%c%c\"\
    ), \"%c*$\", \"\")\n    else\n        return split:len() + 1, string.gsub(string.gsub(txt,\
    \ \"%c\", \"%c%c\"), \"%c*$\", \"\")\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxu7clhgc.lua:10:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpxu7clhgc.lua:10: in local 'candidate'\n\t/tmp/tmpxu7clhgc.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub('[^' .. string.char(\"\
    \ ,.\") + ']+', ' ' .. string.char(\" ,.\"):sub(1):lower())\n    words = words..string.char(\"\
    \ ,.\")\n    words = words..string.char(\" ,.\"):sub(1):lower()\n    words = words..string.sub(words,1,string.len(words))\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv5e0niol.lua:9:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpv5e0niol.lua:9: in local 'candidate'\n\t/tmp/tmpv5e0niol.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\t-- We need to split the string on whitespace.\n\
    \t-- However, if there are no whitespaces in our string we should split on commas.\n\
    \t-- If the first character is comma, we split the string on commas, otherwise\n\
    \t-- split on whitespaces.\n\t-- If the first character is a comma, split on commas,\
    \ otherwise split on whitespaces.\n\t-- This covers case where there is no commas.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyihuxxy8.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt ~= nil and type(txt) == 'string'\
    \ then\n        local words = txt:gsub(\"%w+\", \"\")\n        return words:gsub(\"\
    ,\", \",\"):gsub(\"%c+\", \"'\"):gsub(\"%w+\", \" \"):gsub(\"'\", '')\n    elseif\
    \ txt ~= nil and type(txt) == 'table' then\n        local words = ''\n       \
    \ for k,v in pairs(txt) do\n            if v == '' then\n                words\
    \ = words & k ..','\n            else\n                words = words & k ..' '\n\
    \            end\n        end\n        words = words:gsub(\"%c+\", \"'\"):gsub(\"\
    %w+\", \" \"):gsub(\"'\", '')\n        return words\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpef_20_ds.lua:29:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \" !\"\nstack traceback:\n\t/tmp/tmpef_20_ds.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   -- Split on all whitespace (including\
    \ newlines), commas or newlines.\n   -- Note the use of \"*\" instead of \"all\"\
    \ since this does not split on commas or newlines but\n   -- allows spaces within\
    \ words.\n   txt = string.gsub(txt, \"[%z\\1-\\127]*\", \" \")\n   -- Split on\
    \ all commas and newlines.\n   txt = string.gsub(txt, \"[%[%!\\n]%*]\", \",\"\
    )\n   -- Split on all whitespace and newlines.\n   txt = string.gsub(txt, \"[%[%!\\\
    n]%*%]\", \" \")\n   -- Split on all whitespace and commas and newlines.\n   txt\
    \ = string.gsub(txt, \"[%[%!\\n]%*%,%]\", \" \")\n   -- Remove any leading and\
    \ trailing whitespace.\n   txt = string.gsub(txt, \" +$\", \"\")\n   -- Remove\
    \ any trailing whitespace.\n   txt = string.gsub(txt, \"[%$]\", \"\")\n   return\
    \ string.gsub(txt, \",$\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiw70s867.lua:29:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpiw70s867.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt == '' then\n    return txt\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5yzi3ul1.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local i = 0\n   local words = \"\"\n\
    \   while true do\n      i = txt:find(\"--\", 1)\n      if i == nil then\n   \
    \      words = words + txt:sub(1)\n         return words\n      else\n       \
    \  words = words + txt:sub(1, i)\n         txt = txt:sub(i + 1)\n      end\n \
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpry676yvp.lua:17:\
    \ attempt to perform arithmetic on a string value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpry676yvp.lua:17: in local 'candidate'\n\t/tmp/tmpry676yvp.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt == nil then\n    return nil\n \
    \ end\n  local words = \"\"\n  local len = string.len(txt)\n  for i = 1,len do\n\
    \    if txt:sub(i, i) == \" \" then\n      words = words .. \",\" .. string.sub(txt,\
    \ i, i + 1)\n      i = i + 1\n    else\n      words = words .. string.sub(txt,\
    \ i, i + 1)\n    end\n  end\n  return string.gsub(words,\",\",\"\")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2r_nupkp.lua:28:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Heelllloo  wwoorrlldd!!\"\nstack\
    \ traceback:\n\t/tmp/tmp2r_nupkp.lua:28: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local letters = {}\n   for char in txt:gmatch('([a-z])')\
    \ do table.insert(letters, char) end\n   local num_alpha = 0\n   local num_comma\
    \ = 0\n   for i,v in pairs(letters) do\n      if v == ',' then\n         num_comma\
    \ = num_comma + 1\n      else\n         num_alpha = num_alpha + 1\n      end\n\
    \   end\n   return (num_alpha + num_comma) % 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpveycupl1.lua:26:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 1\nstack traceback:\n\t/tmp/tmpveycupl1.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  return txt:gsub(\"[,;.]\", \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4rtock3.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmpg4rtock3.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal txt = txt or ''\n\tlocal words =\
    \ string.gsub(txt, \"[^A-Za-z0-9]+\", ' ');\n\tlocal words = string.gsub(words,\
    \ '[,]+', ' ', -1);\n\treturn string.gsub(words, '[!.?]+', '', -1);\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvepr6b94.lua:18:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world \"\nstack traceback:\n\
    \t/tmp/tmpvepr6b94.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local ret = {}\n    for w in string.gmatch(string.lower(txt),\
    \ \"[%w]\") do table.insert(ret, w) end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0i4dw987.lua:17:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"h\", \"e\", \"l\", \"l\", \"o\"\
    , \"w\", \"o\", \"r\", \"l\", \"d\"}\nstack traceback:\n\t/tmp/tmp0i4dw987.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local lst = { }\n  local num_words = 1\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1j4tqd_n.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local wl = {}\n  local ws = 0\n  for w\
    \ in txt:gmatch(\"%w+\") do\n    wl = wl..w\n    local lw = string.len(w)\n  \
    \  if ws >= 0 then\n      if ws - lw % 2 == 1 then wl = wl..\",\"\n      else\
    \ ws = 0 end\n    end\n    ws = ws+lw\n  end\n  return wl\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbf7lnso9.lua:12:\
    \ attempt to concatenate a table value (local 'wl')\nstack traceback:\n\t/tmp/tmpbf7lnso9.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpbf7lnso9.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if type(txt) == 'string' then\n    \
    \    local words = txt:gsub('([A-Za-z]+)([^A-Za-z ]+)(.*)', \"%1,%2,%3\")\n  \
    \      return words:gsub('%[^,]+,', ',')\n    end\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnw4vduhj.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world,!,\"\nstack traceback:\n\
    \t/tmp/tmpnw4vduhj.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  return txt:gmatch(\"([\" .. string.gsub(string.gsub(\"\
    \ \", \"\", string.lower(txt)), \"[\" .. string.char(string.byte('a')), '') ..\
    \ string.char(string.byte('z')), '([^' .. string.char(string.byte('a')).. string.char(string.byte('z'))\
    \ .. \"]+)\") --gsub(\"([^\" .. string.char(string.byte('a')).. string.char(string.byte('z'))\
    \ .. \"]+)\", \"[\" .. string.char(string.byte('a')).. string.char(string.byte('z'))\
    \ .. \"]+\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdyrvxtxz.lua:9:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpdyrvxtxz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdyrvxtxz.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  -- If the text does not contain a space\
    \ (\" \"), return a list of length 1 containing the entire text with no whitespace\n\
    \  if not string.match(txt, \" \") then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo6komj64.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal n = #txt\n\tif not txt or n == 0\
    \ then\n\t\treturn nil\n\tend\n\tlocal txt = txt:gsub(\"[%c]+\", \" \")\n\treturn\
    \ txt:gsub(\"^%s*(.-)%s*$\", \"%1\")\nend\nreturn {\n\tword_count,\n\tword_count,\n\
    \tsplit_words,\n\tsplit_words\n}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1i2r49c4.lua:22: <eof> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local ws = string.gsub(string.gsub(txt,\"\
    \ \",\",\",string.len(txt)),\",\",\"\",string.len(txt))\n  local c = 0\n  for\
    \ i=string.len(ws); i>0; i=i-1 do\n    if string.sub(ws,i,i+1)%2 == 1 then\n \
    \     c = c + 1\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6bnzggb_.lua:11: ',' expected near ';'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = string.gsub(txt, \"[[:space:]]+\"\
    , \",\")\n    words = string.gsub(words, \"[,]+\", \",\")\n    words = string.gsub(words,\
    \ \"[a-z]+\", \" \")\n    words = string.gsub(words, \"[!?]+\", \" \")\n    words\
    \ = string.gsub(words, \"[,?]+\", \",\")\n    words = string.gsub(words, \"[,!]+\"\
    , \",\")\n    words = string.gsub(words, \"[!]\", \" \")\n    words = string.gsub(words,\
    \ \"[?]\", \" \")\n    words = string.gsub(words, \"[,]\", \" \")\n    return\
    \ string.gsub(words, \" \", \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4w69k12.lua:24:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"H    \"\nstack traceback:\n\t/tmp/tmpm4w69k12.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = {}\n  local word = \"\"\n\
    \  for w in txt:gmatch('([A-Za-z]+|[\",])+') do\n    word = word .. w\n    if\
    \ word:sub(1, #word) ~= \",\" then\n      if #words > 0 then\n        table.insert(words,\
    \ word)\n      end\n      word = \"\"\n    end\n  end\n  if #words > 0 then\n\
    \    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9qoljfp.lua:29:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpe9qoljfp.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[^ \\n]+\"\
    )\n  if words == nil then\n    return 1\n  else\n    return #words + 1\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ene8jug.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp6ene8jug.lua:13: in local 'candidate'\n\t/tmp/tmp6ene8jug.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local splittedWords = {}\n   for w in\
    \ txt:gmatch(\"%w+\") do table.insert(splittedWords, w) end\n   return splittedWords\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe00ta15v.lua:17:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpe00ta15v.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = string.gmatch(txt, \"\
    (%S+)\")\n    if words == nil then\n        words = {}\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrsqj08t.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0xb8c2e0\nstack traceback:\n\
    \t/tmp/tmpcrsqj08t.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local words = {}\n   for w in string.gmatch(string.gsub(txt,\
    \ \"([a-z]+)\", \" $1 \"), \"([^%s]+)\") do\n      table.insert(words, w) -- replace\
    \ all occurrences of w with \" w \"\n   end\n   -- insert extra space at the end\
    \ to avoid empty word at the end\n   table.insert(words, \" \")\n   return table.concat(words)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t2v6zc8.lua:21:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"H$1$1! \"\nstack traceback:\n\t\
    /tmp/tmp2t2v6zc8.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = string.gsub(txt, \"[ ]+\"\
    , \" \")\n    local count = string.gsub(words, \" \", \"\"):gsub(\"^%l\", function()\n\
    \        return string.upper(string.sub(\"%l\", 1, string.len(\"%l\")))\n    end):gsub(\"\
    %L\", function()\n        return string.upper(string.sub(\"%L\", 1, string.len(\"\
    %L\")))\n    end)\n    return string.gsub(words, \" \", \"\"):gsub(\"^%l\", function()\n\
    \        return string.upper(string.sub(\"%l\", 1, string.len(\"%l\")))\n    end):gsub(\"\
    %L\", function()\n        return string.upper(string.sub(\"%L\", 1, string.len(\"\
    %L\")))\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68f68fdg.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"%Lelloworld%L\"\nstack traceback:\n\
    \t/tmp/tmp68f68fdg.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   if txt:find('[%z\\0]') then\n      return\
    \ nil\n   end\n   local words = txt:gsub('([^ ][A-Za-z%z\\0]+)[%z\\0]([^ ]+):%s','\\\
    2')\n   words = string.gsub(words, '([A-Za-z])([A-Za-z][a-z]+):%s','\\1,\\2')\n\
    \   words = string.gsub(words, '([A-Za-z%z\\0])([A-Za-z]+):%s','\\1,\\2')\n  \
    \ words = string.gsub(words, '([%z\\0])([A-Za-z]+):%s','\\1,\\2')\n   return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiziun4by.lua:22:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmpiziun4by.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"([\" .. table.concat(string.gmatch(string.gsub(string.gsub(txt,\
    \ \"%p\", \" \"), \"([a-z])([A-Z])\"), \"%2\") .. \"])+)\",\n        function(c)\
    \ return string.gsub(c, \"(%l+)\", function(c) return c:lower() end) end)\n  \
    \  if not words[1] then\n        return words[2]\n    else\n        return words\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpssggfuf8.lua:11: ')' expected (to close '(' at line 9) near\
    \ 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt == '' or txt:sub(-1) ~= ',' then\n\
    \        txt = string.lower(txt)\n    end\n    local words = {}\n    local last_char\
    \ = {}\n    local last_count = 0\n    for char in string.gmatch(txt, \"([\" ..\
    \ string.char(string.ascii_lowercase) .. \"]+)\") do\n        local count = #char\
    \ - #last_char\n        if last_count == 0 and #last_char > 0 then\n         \
    \   count = count + #last_char\n        end\n        last_char = char\n      \
    \  last_count = count\n        table.insert(words, char)\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_lohpwwq.lua:15:\
    \ bad argument #1 to 'char' (number expected, got nil)\nstack traceback:\n\t/tmp/tmp_lohpwwq.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp_lohpwwq.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   if txt ~= nil then\n      local words\
    \ = txt:gsub(\"%w+\", \"\"):gsub(\"[^A-Za-z]+\", \",\")\n      return words:gsub(\"\
    ,+\", \",\"):gsub(\",{2,}\", \",\")\n   else\n      return nil\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvh5_15f.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \",\"\nstack traceback:\n\t/tmp/tmptvh5_15f.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal splitted_txt = {}\n\tlocal alphabet\
    \ = 'a...z'\n\tfor i=1, #alphabet do\n\t\tsplitted_txt[i] = {}\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2u1jweku.lua:28: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local ws = ''\n  local num_ws = 0\n  for\
    \ w in txt:gmatch'[^,]+' do\n    local len = #w\n    if num_ws + len > 15 then\n\
    \      table.insert(words, ws)\n      ws = ''\n      num_ws = 0\n    end\n   \
    \ ws = ws .. w\n    num_ws = num_ws + len\n  end\n  if ws ~= '' then table.insert(words,\
    \ ws) end\n  return #words + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwvx7yjv9.lua:21:\
    \ bad argument #1 to 'insert' (table expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpwvx7yjv9.lua:21: in local 'candidate'\n\t/tmp/tmpwvx7yjv9.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  return txt:gsub(' ', '') -- Remove white\
    \ spaces\n    or txt:gsub(',', '') -- Split on commas\n    or txt:gsub('a'):gsub('z'):gsub('A'):gsub('Z'):gsub('0',\
    \ '') -- Count lowercase\n    or 0 -- Count the number of alphabetic characters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk238v8md.lua:18:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Helloworld!\"\nstack traceback:\n\
    \t/tmp/tmpk238v8md.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    for w in string.gmatch(txt,\
    \ '%S+') do\n        table.insert(words, w)\n    end\n    return words\nend\n\
    </code>\nHere are the basic methods that you'll need to build on this function:\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7sr322gq.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local whitespaces = txt:gsub(' ', ' ')\n\
    \  local commas = whitespaces:gsub(',', ' ')\n  return commas:gsub('[', ''):gsub(']',\
    \ ''):gsub('a', ''):gsub('b', ''):gsub('c', ''):gsub('d', ''):gsub('e'):gsub('f'):gsub('g'):gsub('h'):gsub('i'):gsub('j'):gsub('k'):gsub('l'):gsub('m'):gsub('n'):gsub('o'):gsub('p'):gsub('q'):gsub('r'):gsub('s'):gsub('t'):gsub('u'):gsub('v'):gsub('w'):gsub('x'):gsub('y'):gsub('z'):gsub('0',\
    \ ''):gsub('1', ''):gsub('2', ''):gsub('3', ''):gsub('4', ''):gsub('5', ''):gsub('6',\
    \ ''):gsub('7', ''):gsub('8', ''):gsub('9', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyxty9sq2.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpyxty9sq2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpyxty9sq2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    local num_spaces\
    \ = 0\n    local num_commas = 0\n    for i=1, #txt, 1 do\n        local c = string.sub(txt,\
    \ i, i)\n        if c == \" \" then\n            num_spaces = num_spaces + 1\n\
    \        elseif c == \",\" then\n            num_commas = num_commas + 1\n   \
    \     else\n            table.insert(words, c)\n        end\n    end\n    if num_spaces\
    \ == 0 then\n        return split_words(table.concat(words, \" \"))\n    elseif\
    \ num_commas == 0 then\n        return table.concat(words, \" \")\n    else\n\
    \        return #words + 1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jp7j0mx.lua:34:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"H e l l o w o r l d !\"\nstack\
    \ traceback:\n\t/tmp/tmp_jp7j0mx.lua:34: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local words = { }\n   for char in txt:gmatch(\"\
    %w+\") do\n      if words[#words] == nil then\n         words[#words] = char\n\
    \      else\n         words[#words] = words[#words] .. \", \"\n      end\n   end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxt0xzh4c.lua:31: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    local num_letters\
    \ = 0\n    for i, char in ipairs(txt:gmatch(\"[%a%p]+\")) do\n        table.insert(words,\
    \ char)\n        num_letters = num_letters + 1\n    end\n    if num_letters %\
    \ 2 ~= 0 then\n        return num_letters - 1\n    else\n        return num_letters\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt == nil then\n    return 0\n  end\n\
    \  local words = string.gmatch(txt, '%w+')\n  local len = #words\n  if len ==\
    \ 0 then\n    return 1\n  end\n  if len == 1 then\n    return txt\n  end\n  local\
    \ count = 0\n  local last_word = ''\n  local last_char = ''\n  local last_char\
    \ = string.byte(last_char)\n  for i = 1, len do\n    if string.byte(words[i])\
    \ > last_char then\n      count = count + 1\n      if count == 1 then\n      \
    \  last_word = words[i]\n      else\n        if last_word ~= '' then\n       \
    \   count = count + 1\n        end\n        last_word = words[i]\n      end\n\
    \      last_char = string.byte(last_word)\n    else\n      last_word = ''\n  \
    \    last_char = ''\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsyw2wu_l.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpsyw2wu_l.lua:13: in local 'candidate'\n\t/tmp/tmpsyw2wu_l.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt == nil or txt == \"\" then\n  \
    \  return {}\n  end\n  local words = txt:gsub(\"([^ ]+)|([^ ]+$)\", \"%1,\"):gsub(\"\
    ^%1(%*)\", \"%1\"):gsub(\"%1,\", \"%2\"):split(\",\")\n  return table.filter(words,\
    \ function(word) return word:len() > 0 end)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8mfe_byz.lua:12:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmp8mfe_byz.lua:12: in local\
    \ 'candidate'\n\t/tmp/tmp8mfe_byz.lua:19: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local counts = {}\n    for c in string.gmatch(txt,\
    \ \"([^,]+)\") do\n        table.insert(counts, #counts, 1)\n    end\n    local\
    \ n = 1\n    for i,v in ipairs(counts) do\n        if n+v > 26 then\n        \
    \    return n, i+1\n        end\n        n = n + v\n    end\n    return n, #counts\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphnfizbsb.lua:11:\
    \ bad argument #2 to 'insert' (position out of bounds)\nstack traceback:\n\t/tmp/tmphnfizbsb.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmphnfizbsb.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   if not txt or #txt == 0 then\n      return\
    \ {}\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj_f56ht3.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif type(txt) == 'string' then\n\t\treturn\
    \ split(txt, ',')\n\telseif type(txt) == 'table' then\n\t\tlocal num_words = #txt\n\
    \t\tlocal new_table = {}\n\t\tfor i=1,num_words do\n\t\t\tlocal word = txt[i]\n\
    \t\t\tlocal count = count_words(word)\n\t\t\tif count % 2 ~= 0 then\n\t\t\t\t\
    new_table[word] = word\n\t\t\tend\n\t\tend\n\t\treturn new_table\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0fawtg0a.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp0fawtg0a.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp0fawtg0a.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal splitted = {}\n\tfor _, word in\
    \ ipairs(txt:gmatch(\"%S+\")) do\n\t\tlocal split = word:gsub(\"[%Z]\", function(c)\
    \ \n\t\t\treturn string.lower(c:sub(1,1)) -- Uppercase a letter when it is followed\
    \ by a lowercase letter\n\t\tend)\n\t\ttable.insert(splitted, split)\n\tend\n\t\
    return splitted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   if txt ~= '' then\n      local words\
    \ = string.gsub(txt, ',', ' ')\n      if words == txt then\n         words = string.gsub(txt,\
    \ ' ', ' ')\n      end\n      if words ~= '' then\n         words = string.gsub(words,\
    \ '!', ' ')\n      end\n      words = string.gsub(words, '?', ' ')\n      words\
    \ = string.gsub(words, '!', ' ')\n      words = string.gsub(words, '?', ' ')\n\
    \      words = string.gsub(words, '(', ' ')\n      words = string.gsub(words,\
    \ ')', ' ')\n      words = string.gsub(words, '-', ' ')\n      words = string.gsub(words,\
    \ '_', ' ')\n      words = string.gsub(words, '@', ' ')\n      words = string.gsub(words,\
    \ '#', ' ')\n      words = string.gsub(words, '$', ' ')\n      words = string.gsub(words,\
    \ '%', ' ')\n      words = string.gsub(words, '^', ' ')\n      words = string.gsub(words,\
    \ '&', ' ')\n      words = string.gsub(words, '*', ' ')\n      words = string.gsub(words,\
    \ '{', ' ')\n      words = string.gsub(words, '}', ' ')\n      words = string.gsub(words,\
    \ '|', ' ')\n      words = string.gsub(words, '~', ' ')\n      words = string.gsub(words,\
    \ '|', ' ')\n      words = string.gsub(words, '<', ' ')\n      words = string.gsub(words,\
    \ '>', ' ')\n      words = string.gsub(words, '=', ' ')\n      words = string.gsub(words,\
    \ '?', ' ')\n      words = string.gsub(words, '`', ' ')\n      words = string.gsub(words,\
    \ '[', ' ')\n      words = string.gsub(words, ']', ' ')\n      words = string.gsub(words,\
    \ '|', ' ')\n      words = string.gsub(words, '\"', ' ')\n      words = string.gsub(words,\
    \ '`', ' ')\n      words = string.gsub(words, '(', ' ')\n      words = string.gsub(words,\
    \ ')', ' ')\n      words = string.gsub(words, '{', ' ')\n      words = string.gsub(words,\
    \ '}', ' ')\n      words = string.gsub(words, '<', ' ')\n      words = string.gsub(words,\
    \ '>', ' ')\n      words = string.gsub(words, '[', ' ')\n      words = string.gsub(words,\
    \ ']', ' ')\n      words = string.gsub(words, '|', ' ')\n      words = string.gsub(words,\
    \ '-', ' ')\n      words = string.gsub(words, '_', ' ')\n      words = string.gsub(words,\
    \ '@', ' ')\n      words = string.gsub(words, '#', '\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp92r1dfll.lua:58: unfinished string near '''\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal words = txt:gsub(\"([A-Za-z0-9]+)\"\
    , \" $1\"):gsub(\"^%s+\", \" \")\n\t-- if there are no spaces then return 1 because\
    \ there are an even number of letters\n\tif words == \"\" then return 1 end\n\t\
    -- if there are no commas then split on spaces\n\tif words == \",\" then return\
    \ #words end\n\t-- otherwise split on commas\n\treturn #words / 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1f5nol9.lua:21:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 4\nstack traceback:\n\t/tmp/tmpj1f5nol9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  -- your code\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4berph5q.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp4berph5q.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local count = 1\n  local ret = {}\n  for\
    \ w in txt:gmatch(\"%w+\") do\n    count = count + 1\n    table.insert(ret, w)\n\
    \  end\n  return count, ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvz9l5hk_.lua:21:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 3\nstack traceback:\n\t/tmp/tmpvz9l5hk_.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\t-- If the text is empty return an empty\
    \ list\n\tif not txt or #txt == 0 then\n\t\treturn {}\n\tend\n\t-- Return an empty\
    \ list if the delimiters string is empty\n\tif #txt == 1 then\n\t\treturn {}\n\
    \tend\n\t-- If the text doesn't contain any delimiters, return the text as is\n\
    \tif #txt > 1 then\n\t\treturn txt\n\tend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphws6rpc9.lua:35: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local ws = { }\n  local comma = { }\n\
    \  for w in string.gmatch(txt, '%w+') do\n    ws[#ws + 1] = w\n    if w ~= ''\
    \ then\n      if w == '\\n' then\n        -- do nothing on line breaks\n     \
    \ elseif w ~= ',' then\n        comma[#comma + 1] = w\n      end\n    end\n  end\n\
    \  if #comma > 0 then\n    return #comma + 1 -- count comma seperators\n  else\n\
    \    return #ws\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdzezo347.lua:31:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 3\nstack traceback:\n\t/tmp/tmpdzezo347.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if #txt > 0 then\n    return string.gmatch(txt,\
    \ \"(\" .. _alphanumeric_regex .. \"):()\")\n  else\n    return 0\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpow7kh92f.lua:10:\
    \ attempt to concatenate a nil value (global '_alphanumeric_regex')\nstack traceback:\n\
    \t/tmp/tmpow7kh92f.lua:10: in local 'candidate'\n\t/tmp/tmpow7kh92f.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt ~= nil and txt ~= \"\" then\n \
    \   local words = string.gmatch(txt, \"([^\\s]+)\")\n    return words[1] and words[1]\
    \ or 0\n  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgryq1zlq.lua:10: invalid escape sequence near '\"([^\\s'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  -- Split by whitespace, commas or even\
    \ order in the alphabet\n  return txt:gsub(\" \", \",\"):gsub(\",\", \",0\"):gsub(\"\
    0\", \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2d_siga.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello,,world!\"\nstack traceback:\n\
    \t/tmp/tmpc2d_siga.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local n = 0\n  local words = \"\"\n  local\
    \ last_c = nil\n  local last_k = nil\n  local last_v = nil\n  for _, b in pairs(txt)\
    \ do\n    local c = string(b)\n    local k = #c\n    local v = #last_v\n    if\
    \ last_k ~= nil then\n      if k > last_k then\n        words = words .. \",\"\
    \ .. last_c\n      else\n        words = words .. last_c\n      end\n    end\n\
    \    last_c = c\n    last_k = k\n    last_v = v\n    n = n + 1\n  end\n  words\
    \ = words .. last_c\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu3on95sy.lua:14:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpu3on95sy.lua:14: in local 'candidate'\n\t/tmp/tmpu3on95sy.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[[:lower:]]+\"\
    , function(_) return unpack(collect(\"abcdefghijklmnopqrstuvwxyz\")) end)\n  if\
    \ words == \"\" then return 0 end\n  local n = #words\n  for i = 1, #words do\n\
    \    if string.find(words[i], \",\") then\n      n = n + 1\n    end\n  end\n \
    \ return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt32ki0hc.lua:13:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpt32ki0hc.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpt32ki0hc.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\t-- Handle empty string\n\tif txt == nil\
    \ or txt == \"\" then\n\t\treturn {}\n\tend\n\t-- Initialize output as array (of\
    \ words)\n\tlocal words = setmetatable({}, { __index = table })\n\t-- Initialize\
    \ a variable to hold a count of letters in the alphabet\n\tlocal letters = 0\n\
    \t-- Loop through each character in the given string\n\tfor i = 1, #txt do\n\t\
    \t-- Check if character is whitespace or comma\n\t\tif txt[i] == \" \" or txt[i]\
    \ == \",\" then\n\t\t\t-- Add word to words array if whitespace or comma character\
    \ is found\n\t\t\tif words[#words] ~= nil then\n\t\t\t\twords[#words] = txt[i]\n\
    \t\t\telse\n\t\t\t\t-- Add current letter to words array\n\t\t\t\twords[#words]\
    \ = tostring(letters)\n\t\t\t\t-- Add letter to count\n\t\t\t\tletters = letters\
    \ + 1\n\t\t\tend\n\t\t-- If character is alphanumeric and it's not whitespace\
    \ or comma then continue\n\t\telseif isalpha(txt[i]) then\n\t\t\t-- Add character\
    \ to words array\n\t\t\twords[#words] = txt[i]\n\t\t\t-- Add character to count\n\
    \t\t\tletters = letters + 1\n\t\t-- If character is whitespace or comma then continue\n\
    \t\telseif txt[i] == \" \" or txt[i] == \",\" then\n\t\t\t-- Add character to\
    \ words array\n\t\t\twords[#words] = txt[i]\n\t\tend\n\tend\n\t-- Return words\
    \ array\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps6bux3wl.lua:31:\
    \ attempt to call a nil value (global 'isalpha')\nstack traceback:\n\t/tmp/tmps6bux3wl.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmps6bux3wl.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   if txt:len() == 0 then\n      return\
    \ {}\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1q1vdpq6.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%d+\", \" \")\n  return words:gsub(\"(%s+)\" .. \"%z%s*\", \"\\1\"):gsub(\"\
    (%s+)\" .. \"%d%s*\", \"\\1\"):gsub(\"(%s+)\" .. \"%z%s+\", \"\\1\"):gsub(\"(%s+)\"\
    \ .. \"%d%s+\", \"\\1\"):gsub(\",+\", \"\\0\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68vteeq3.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   !\"\nstack traceback:\n\t/tmp/tmp68vteeq3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local ws = {}\n    for i = 1, string.len(txt)\
    \ do\n        local c = string.sub(txt, i, i)\n        if c ~= ' ' and c ~= ','\
    \ then \n            table.insert(ws, c)\n        elseif c == ' ' then\n     \
    \       table.insert(ws, ',')\n        end\n    end\n    return table.concat(ws)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5zsdpuq.lua:24:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello,world!\"\nstack traceback:\n\
    \t/tmp/tmpr5zsdpuq.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local words = txt and string.gsub(txt,\
    \ \"([^%s]+)\", \" \") or \"\"\n   return words and string.gsub(string.gsub(words,\
    \ \"([^%s])\", \",\"), \",$\", \"\") or #words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrnvij05.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   \"\nstack traceback:\n\t/tmp/tmprrnvij05.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if not txt then return nil end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf14leksk.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   if string.sub(txt, -1) == ',' then\n\
    \      return string.gsub(txt, \",\", \" \")\n   else\n      return string.gsub(txt,\
    \ \" \", \",\")\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhrkza96.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello,world!\"\nstack traceback:\n\
    \t/tmp/tmpqhrkza96.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  -- Remove all whitespace\n  txt = txt:gsub(\"\
    [%c%s]*\", \"\")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi9ejkn30.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local whitespace = string.find(txt, \"\
    [%w\\s]\")\n   local comma = string.find(txt, \",\")\n   local upper = string.find(txt,\
    \ \"[A-Z]\")\n   local lower = string.find(txt, \"[a-z]\")\n   if whitespace then\n\
    \      return string.gsub(txt, \"[%w\\s]\", \"\")\n   elseif comma then\n    \
    \  return string.gsub(txt, \",\", \"\")\n   elseif upper then\n      return string.gsub(txt,\
    \ \"[A-Z]\", \"\")\n   else\n      return string.len(txt) - string.len(string.lower(txt))\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe177i02u.lua:9: invalid escape sequence near '\"[%w\\s'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    return txt:gsub(\"%S+\", function (x)\
    \ \n        return x:lower() \n    end):gsub(\"%a+\", function(x) \n        return\
    \ x:lower() \n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_yfx7is.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"hello world!\"\nstack traceback:\n\
    \t/tmp/tmpx_yfx7is.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = string.gsub(txt, \"[^a-z,A-Z]\"\
    , \" \")\n    local whitespace = string.gsub(words, \" \", \"\")\n    if whitespace\
    \ == \"\" then\n        whitespace = \",\"\n    end\n    return whitespace\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbgikqld.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Helloworld\"\nstack traceback:\n\
    \t/tmp/tmphbgikqld.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local num_commas = 0\n  local num_colons\
    \ = 0\n  local num_caps = 0\n  local num_lowcaps = 0\n  local num_spaces = 0\n\
    \  for w in txt:gmatch(\"[%S]+\") do\n    local c = w:byte()\n    if c == ','\
    \ then\n      num_commas = num_commas + 1\n    else if c == '.' then\n      num_spaces\
    \ = num_spaces + 1\n    else if w == 'A' or w == 'a' then\n      num_caps = num_caps\
    \ + 1\n    else if w == 'B' or w == 'b' then\n      num_lowcaps = num_lowcaps\
    \ + 1\n    else if w == 'C' or w == 'c' then\n      num_caps = num_caps + 1\n\
    \      num_lowcaps = num_lowcaps + 1\n    else if w == 'D' or w == 'd' then\n\
    \      num_caps = num_caps + 1\n      num_lowcaps = num_lowcaps + 1\n      num_lowcaps\
    \ = num_lowcaps + 1\n    else if w == 'E' or w == 'e' then\n      num_caps = num_caps\
    \ + 1\n      num_caps = num_caps + 1\n      num_caps = num_caps + 1\n    else\
    \ if w == 'F' or w == 'f' then\n      num_caps = num_caps + 1\n      num_caps\
    \ = num_caps + 1\n      num_caps = num_caps + 1\n      num_caps = num_caps + 1\n\
    \    else if w == 'G' or w == 'g' then\n      num_caps = num_caps + 1\n      num_caps\
    \ = num_caps + 1\n      num_caps = num_caps + 1\n      num_caps = num_caps + 1\n\
    \      num_caps = num_caps + 1\n    else if w == 'H' or w == 'h' then\n      num_caps\
    \ = num_caps + 1\n      num_caps = num_caps + 1\n      num_caps = num_caps + 1\n\
    \      num_caps = num_caps + 1\n      num_caps = num_caps + 1\n      num_caps\
    \ = num_caps + 1\n    else if w == 'I' or w == 'i' then\n      num_caps = num_caps\
    \ + 1\n      num_caps = num_caps + 1\n      num_caps = num_caps + 1\n      num_caps\
    \ = num_caps + 1\n      num_caps = num_caps + 1\n      num_caps = num_caps + 1\n\
    \      num_caps = num_caps + 1\n      num_caps = num_caps + 1\n    else if w ==\
    \ 'J' or w == 'j' then\n      num_caps = num_caps + 1\n      num_caps = num_caps\
    \ + 1\n      num_caps = num_caps + 1\n      num_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps6zmf5ej.lua:67: syntax error near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = { }\n    local last_word_start\
    \ = nil\n    local last_word_end = nil\n    for i, c in ipairs(txt) do\n     \
    \   if string.find(\" \" .. c .. \" \", \" \") then\n            table.insert(words,\
    \ string.sub(txt, 1, i - 1))\n            last_word_start = i - 1\n          \
    \  last_word_end = i\n        end\n    end\n    if #words ~= 0 then\n        table.insert(words,\
    \ string.sub(txt, last_word_start, last_word_end + 1))\n    end\n    return #words\
    \ == 1 and words[1] or words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1tffs3je.lua:28:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp1tffs3je.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local count = {}\n  local letters = {}\n\
    \  for i = 1, #txt do\n    local char = string.lower(string.sub(txt, i, i))\n\
    \    if char == ',' then\n      if #letters ~= 0 then\n        table.insert(count,\
    \ #letters)\n        letters = {}\n      end\n    elseif char ~= ' ' then\n  \
    \    table.insert(letters, char)\n    end\n  end\n  if #letters ~= 0 then\n  \
    \  table.insert(count, #letters)\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9s9_nj83.lua:31:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {11}\nstack traceback:\n\t/tmp/tmp9s9_nj83.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt == '' then\n    return nil\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3ks0_m7b.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:len() == 0 then\n    return {}\n\
    \  end\n  local words = string.gmatch(txt, \"([^%s]+)\"):map(function(s)\n   \
    \ return string.lower(s)\n  end)\n  local nospace = 0\n  for _, w in ipairs(words)\
    \ do\n    if not w ~= '' then\n      nospace = nospace + 1\n    end\n  end\n \
    \ local comma = 0\n  for _, w in ipairs(words) do\n    if not w ~= '' then\n \
    \     comma = comma + 1\n    end\n  end\n  if nospace > 0 and comma >0 then\n\
    \    return nospace - comma\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4v4k7paw.lua:12:\
    \ attempt to index a function value\nstack traceback:\n\t/tmp/tmp4v4k7paw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp4v4k7paw.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local num_chars = 0\n  for char in txt:gmatch('[a-zA-Z]+')\
    \ do num_chars = num_chars + 1 end\n  -- if there are no chars in the string,\
    \ return an empty list\n  if num_chars == 0 then\n    return {}\n  end\n  -- if\
    \ there are no spaces, return an empty list\n  if num_chars == 1 then\n    return\
    \ {}\n  end\n  -- if there are no commas return the number of chars with odd-order\n\
    \  if num_chars == 2 then\n    return txt:gsub('([a-z])([a-z])', '\\1 \\2'):gsub('\
    \ ', ''):gsub('^ +', '', 1, 1)\n  end\n  -- if there are no commas, return the\
    \ number of chars with even-order\n  return txt:gsub('([a-z])([a-z])', '\\1 \\\
    2'):gsub(' ', ''):gsub('^ +', '', 2, 2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptactkct6.lua:30:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"H\x01\x02\x01\x02\x01\x02\x01\x02\
    d!\"\nstack traceback:\n\t/tmp/tmptactkct6.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local num_comma = 0\n    local num_space\
    \ = 0\n    local num_alphabet = 0\n    local num_lower = 0\n    local num_upper\
    \ = 0\n    local num_digit = 0\n    local words = {}\n    for _,v in string.gmatch(txt,\
    \ \"([^,]+),?\") do\n        words[#words + 1]  = v\n        num_comma = num_comma\
    \ + 1\n    end\n    for _,v in string.gmatch(txt, \"(%S+)\") do\n        words[#words\
    \ + 1]  = v\n        num_space = num_space + 1\n    end\n    for _,v in string.gmatch(txt,\
    \ \"([a-z]%s+):([A-Za-z]+)\") do\n        words[#words + 1]  = v\n        num_alphabet\
    \ = num_alphabet + 1\n    end\n    for _,v in string.gmatch(txt, \"([a-z]%s+)([A-Za-z]+)\"\
    ) do\n        words[#words + 1]  = v\n        num_lower = num_lower + 1\n    end\n\
    \    for _,v in string.gmatch(txt, \"([a-z]%s+)([A-Za-z]+)([A-Za-z]+)\") do\n\
    \        words[#words + 1]  = v\n        num_upper = num_upper + 1\n    end\n\
    \    for _,v in string.gmatch(txt, \"([a-z]%s+)([A-Za-z]+)([A-Za-z]+)([A-Za-z]+)\"\
    ) do\n        words[#words + 1]  = v\n        num_digit = num_digit + 1\n    end\n\
    \    -- The first word has a '!' in it\n    if words[#words - 1] == \"!\" then\n\
    \        words[#words - 1] = \"\"\n    end\n    -- The last word has a '!' in\
    \ it\n    if words[#words] == \"!\" then\n        words[#words + 1] = \"\"\n \
    \   end\n    return words, num_comma, num_space, num_alphabet, num_lower, num_upper,\
    \ num_digit\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nHere is my answer\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4_qcy83_.lua:50: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  -- Initialize our return values\n  local\
    \ words = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzplo_8ny.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   if #txt <= 1 then\n      return {}\n\
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9ems0l9r.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   -- Split on whitespace\n   txt = txt:gsub(\"\
    [%z'-_]+\", \" \")\n   -- Count lower case letters with odd order\n   local cnt\
    \ = 0\n   for w in txt:gmatch(\"%w\") do\n      if w:lower():sub(1, 1) ~= 'a'\
    \ then\n         cnt = cnt + 1\n      end\n   end\n   return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9t89xjs.lua:24:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 9\nstack traceback:\n\t/tmp/tmpi9t89xjs.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local result = {}\n    local i = 1\n\
    \    local c = 0\n    local l = #txt\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn33var89.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local w = txt:match(\"^%w+\")\n  local\
    \ c = txt:gsub(\"^%w+\", \"\")\n  local words = c\n  if w then\n    words = txt:match(\"\
    ^%w+\") .. c\n  end\n  local words = c\n  if w then\n    words = txt:match(\"\
    ^%w+\") .. c\n  end\n  local words = c\n  if w then\n    words = txt:match(\"\
    ^%w+\") .. c\n  end\n  local words = c\n  if w then\n    words = txt:match(\"\
    ^%w+\") .. c\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5atc_565.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmp5atc_565.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local i, char = {}, {}\n  local len =\
    \ string.len(txt)\n  -- For each character in the string\n  for i = 1, len do\n\
    \    -- if the character is a letter\n    if string.sub(txt, i, i) and string.sub(txt,\
    \ i, i) ~= ',' then\n      -- Add the character to the list of characters, set\
    \ up the char variable as a table\n      char[#char + 1] = string.sub(txt, i,\
    \ i)\n      -- If the character is already in the table\n      if char[#char +\
    \ 1] ~= \"\" then\n      -- then remove the character from the table\n       \
    \ table.insert(char, 0)\n      -- set the variable to the first item in the table\n\
    \        char = char[#char + 1]\n      -- otherwise set the character to be the\
    \ character from the table\n      else\n        char = char[#char + 1]\n     \
    \ end\n    else\n      -- Add the character to the list of characters, set up\
    \ the char variable as a table\n      char[#char + 1] = string.sub(txt, i, i)\n\
    \      -- If the character is already in the table\n      if char[#char + 1] ~=\
    \ \"\" then\n        -- then remove the character from the table\n        table.insert(char,\
    \ 0)\n      -- set the variable to the first item in the table\n        char =\
    \ char[#char + 1]\n      -- otherwise set the character to be the character from\
    \ the table\n      else\n        char = char[#char + 1]\n      end\n    end\n\
    \  end\n  -- If the last character in the string is a letter then the string is\
    \ split at the last comma\n  if string.sub(txt, len, len) ~= '' then return txt:sub(0,\
    \ len-1) end\n  -- If the last character in the string is NOT a letter\n  -- then\
    \ set the last character in the string to an 'a' and increment the count by 2\n\
    \  return char[1], {a = char[2] + 2}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpygeev0nd.lua:16:\
    \ attempt to get length of a nil value (local 'char')\nstack traceback:\n\t/tmp/tmpygeev0nd.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpygeev0nd.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local ws = ''\n    local wc = 0\n  \
    \  local wc_indx = 0\n    local c = 0\n    for c in string.gmatch(txt, \"([^ ]+)\"\
    )  do\n        if string.find(txt, ' ') then\n            wc = wc + #(string.gsub(txt,\
    \ ' ', '')) - 1 -- count words - 1\n        else\n            wc = wc + 1\n  \
    \      end\n        wc_indx = wc_indx+1\n        ws = ws .. #c .. c\n    end\n\
    \    if wc_indx == 1 then\n        wc_indx = 2\n        wc_indx = wc_indx+1\n\
    \        ws = ws .. #c .. c\n    end\n    return ws, wc_indx\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xo2k0xv.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"5Hello6world!\"\nstack traceback:\n\
    \t/tmp/tmp3xo2k0xv.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:find(' ') == nil then\n     \
    \   return txt:gsub('.', function(x) return x:lower() end)\n    end\n    return\
    \ txt:gsub(',', function(x) return x:lower() end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71uequx6.lua:18:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmp71uequx6.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal words = txt:gmatch(\"(\" .. RE_WORD:gsub(\"\
    %b\", function(c) return c:lower() end .. \")\"):gsub(\"%c+\", \", \"))\n\tif\
    \ words[1] ~= \"\" then\n\t\treturn words\n\telse\n\t\treturn words[1]\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb20tiy35.lua:9:\
    \ attempt to index a nil value (global 'RE_WORD')\nstack traceback:\n\t/tmp/tmpb20tiy35.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpb20tiy35.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt == \"\\\\\" then return 0 end\n\
    \  if txt == \"\" then return 1 end\n  local words = { }\n  for w in string.gmatch(txt,\
    \ \"([^\" .. string.char(\" \", \"\\t\", \"\\n\", \"\\r\", \"\\f\", \"\\v\", \"\
    \\0\") .. \"]+)\") do\n    table.insert(words, w)\n  end\n  return #words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1bz532va.lua:12:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmp1bz532va.lua:12: in local 'candidate'\n\t/tmp/tmp1bz532va.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if type(txt == \"string\") then\n  \
    \      local words = txt:gmatch(\"[%S]+\")\n        if words and #words > 0 then\n\
    \            words = words:gsub(\",\", \"\"):lower()\n            local odd_order_letters\
    \ = {}\n            local words_in_odd_order = 0\n            for i=1, #words\
    \ do\n                if string.sub(words, i, i) == string.sub(words, i, i) then\n\
    \                    table.insert(odd_order_letters, i)\n                else\n\
    \                    if #odd_order_letters == #words then\n                  \
    \      words_in_odd_order = ((#odd_order_letters + 1) / 2) - 1\n             \
    \           if words_in_odd_order > #words then\n                            return\
    \ words_in_odd_order\n                        end\n                    end\n \
    \               end\n            end\n            return words_in_odd_order\n\
    \        end\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpav3j1_d0.lua:11:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpav3j1_d0.lua:11: in local 'candidate'\n\t/tmp/tmpav3j1_d0.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   if not txt then\n      return 0\n   end\n\
    \   local _split = \"\"\n   local _words = \"\"\n   local _white_spaces = 0\n\
    \   local _word_count = 1\n   local _last_chr = \"\"\n   local _last_pos = 0\n\
    \   for i = 1, #txt do\n      local _char = string.sub(txt, i, i)\n      if _char\
    \ == \" \" then\n         _white_spaces = _white_spaces + 1\n      elseif _char\
    \ == \",\" then\n         if not _last_chr then\n            _split = _split ..\
    \ _char\n         else\n            _split = _split .. \",\" .. _char\n      \
    \   end\n      elseif _char == \"\\n\" then\n         _split = _split .. _char\n\
    \         _last_pos = i\n      else\n         _split = _split .. _char\n     \
    \ end\n      _last_chr = _char\n   end\n   if not _white_spaces then\n      _words\
    \ = _split .. _last_chr\n   else\n      _words = _split\n   end\n   if _last_chr\
    \ and _last_pos then\n      _words = _words .. string.sub(txt, _last_pos)\n  \
    \ end\n   return _words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuj2pnk1.lua:50:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Helloworld!Hello world!\"\nstack\
    \ traceback:\n\t/tmp/tmpnuj2pnk1.lua:50: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub('([^ ]+)', '%d')\n\
    \  words = words:gsub('[,]+', ' ')\n  words = words:gsub('([^ a-z])([a-z])', '\\\
    1 \\2')\n  words = words:gsub('([^ A-Z])([A-Z])', '\\1 \\2')\n  return words:gsub('(%S)(%S)',\
    \ '\\1 \\2'):gsub('(%S)([a-z])', '\\1 \\2')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyku8znlh.lua:9:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpyku8znlh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpyku8znlh.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   -- Handle null case first\n   if txt\
    \ == nil then\n      return {}\n   end\n   if txt:len() == 0 then\n      return\
    \ {}\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpft7ia3u7.lua:30: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w\\-%,.]+\"\
    )\n  if words == nil then\n    return txt:gmatch(\"%[%a%b%c%d%e%f%g%h%j%k%l%m%n%o%p%q%r%t%u%v%w%x%y%z]+\"\
    )\n  else\n    local ret = {}\n    for _, word in ipairs(words) do\n      ret[#ret+1]\
    \ = word\n    end\n    return ret\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph51ucbod.lua:9: invalid escape sequence near '\"[%w\\-'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal words = txt:gsub(\" \",\",\")\n\t\
    local new_words = {}\n\tfor word in words:gmatch(\"(^|[^%a])([a-z][^%a])+\") do\n\
    \t\tnew_words[#new_words+1] = word\n\tend\n\tlocal num_letters = {}\n\tfor letter\
    \ in string.gmatch(string.gsub(words,\"(^|[^%a])([a-z][^%a])+\",\"%2\"),\"a\"\
    ) do\n\t\tif num_letters[letter] == nil then\n\t\t\tnum_letters[letter] = 1\n\t\
    \telse\n\t\t\tnum_letters[letter] = num_letters[letter] + 1\n\t\tend\n\tend\n\t\
    for letter,count in pairs(num_letters) do\n\t\tif count % 2 ~= 0 then\n\t\t\t\
    return words, \"even\"\n\t\telse\n\t\t\treturn words, \"odd\"\n\t\tend\n\tend\n\
    \treturn words, nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42l0rn0h.lua:35:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello,world!\"\nstack traceback:\n\
    \t/tmp/tmp42l0rn0h.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local n = 1\n  if txt ~= nil and txt ~=\
    \ '' then\n    local list = txt:gsub('[^' .. string.lower(string.letters) .. ']+',\
    \ ' ')\n    local n = 1\n    local splitted = {}\n    for w in list:gmatch('([^'\
    \ .. string.lower(string.letters) .. '|]+) ') do\n      splitted[#splitted + 1]\
    \ = w\n      n = n + 1\n    end\n    return splitted\n  else\n    return nil\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3iq9bbin.lua:11:\
    \ bad argument #1 to 'lower' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmp3iq9bbin.lua:11: in local 'candidate'\n\t/tmp/tmp3iq9bbin.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local word_count = 0\n  local word_table\
    \ = {}\n  for word in string.gmatch(txt, \"([^,]+)(.*)\") do\n    word_count =\
    \ word_count + 1\n    table.insert(word_table, word)\n  end\n  table.sort(word_table)\n\
    \  return word_count, word_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8q945ee8.lua:22:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 1\nstack traceback:\n\t/tmp/tmp8q945ee8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt == nil then\n    return nil\n \
    \ end\n  if txt:len() == 0 then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjvsr9k6j.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\t-- Your code here\n\tlocal words = {}\n\
    \tfor i = 1, #txt do \n\t\twords[#words+1] = txt:sub(i,i)\n\tend\n\tif #words\
    \ == 0 then\n\t\treturn 1\n\tend\n\tlocal word = \"\"\n\tfor i = 1, #words do\n\
    \t\tif word:len() < 1 then\n\t\t\tword:rep(words[i])\n\t\telse\n\t\t\tif word:len()\
    \ == 1 then\n\t\t\t\tword:rep(words[i])\n\t\t\telse\n\t\t\t\tword:rep(words[i])\n\
    \t\t\t\twords[#words + 1] = word\n\t\t\t\tword = \"\"\n\t\t\tend\n\t\tend\n\t\
    end\n\twords[#words + 1] = word\n\treturn #words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprgi6h8_i.lua:20:\
    \ bad argument #1 to 'rep' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmprgi6h8_i.lua:20: in local 'candidate'\n\t/tmp/tmprgi6h8_i.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  if txt:find('%S') then\n    local s =\
    \ ''\n    for w in txt:gmatch('[^,]+') do s = s .. ' ' .. w end\n    return s:gsub('\
    \ ', '')\n  end\n  return txt:gsub(' ', ''):gsub(',', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpln2um3ul.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Helloworld!\"\nstack traceback:\n\
    \t/tmp/tmpln2um3ul.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif txt == nil then\n\t\treturn nil\n\t\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbwv2e1wa.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal words = \"\"\n\tfor w in string.gmatch(txt,\
    \ \"([^ ]+)\"..\"|([^,]+)\") do\n\t\tif w ~= \"\" then words = words .. w .. \"\
    \ \" end\n\tend\n\tif string.match(words, \" \") ~= nil then\n\t\twords = string.gsub(words,\
    \ \" \", \"\")\n\telse\n\t\twords = string.gsub(words, \"([^ a-z])\", \"%1\")\n\
    \tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2r5g6aq.lua:24:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpz2r5g6aq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    -- Make sure it has a value before we\
    \ do anything\n    if not txt then return 0 end\n    -- Split on whitespace\n\
    \    local words = txt:gmatch(\"([^ \\n]+)\")\n    -- If there are no words left\
    \ return the number of characters\n    if not words or #words == 0 then return\
    \ #txt end\n    -- Split on commas\n    words = txt:gmatch(\"([^,\\n]+)\")\n \
    \   -- If there are no words left return the number of characters\n    if not\
    \ words or #words == 0 then return #txt end\n    -- Split the words on whitespace\n\
    \    words = words:gmatch(\"([^ \\n]+)\")\n    -- If the number of words is not\
    \ even return the number of characters\n    if not words or #words == 0 then return\
    \ #txt end\n    -- Return the number of words with odd order\n    return #words\
    \ + #words - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps3s150ve.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmps3s150ve.lua:14: in local 'candidate'\n\t/tmp/tmps3s150ve.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    local count =\
    \ 0\n    for word in string.gmatch(txt, \"([^,]+)\") do\n        count = count\
    \ + 1\n        table.insert(words, word:lower())\n    end\n    return count +\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5_cpr9s.lua:21:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmph5_cpr9s.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%S+\", \",\"):gsub(\"%w{2,}\", \" \"):gsub(\"%S+\", \",\"):gsub(\"%w{2,}\"\
    , \"\\n\")\n   if not words[1] then\n      return nil\n   else\n      return words\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaiiy49m.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpwaiiy49m.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local words = txt:gmatch(\"[%w%,.-]+\"\
    )\n   return words[1] or words and #words[1] or #txt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5dfsa0u.lua:10:\
    \ attempt to index a function value (local 'words')\nstack traceback:\n\t/tmp/tmpd5dfsa0u.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpd5dfsa0u.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  return function()\n    local words = txt\
    \ == nil then txt else split(txt, ',') end\n    return setmetatable({ words =\
    \ words }, mt)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6p9b4s1z.lua:10: unexpected symbol near 'then'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = { }\n    for w in txt:gmatch(\"\
    [%w\\- ]+\") do\n        table.insert(words, w)\n    end\n    return table.concat(words)\
    \ \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprrqc4dgp.lua:10: invalid escape sequence near '\"[%w\\-'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    local num_lower\
    \ = 0\n    for word in txt:gmatch('[^ ]+') do\n        local new_word = word:lower()\n\
    \        if new_word ~= word then\n            table.insert(words, new_word)\n\
    \            num_lowers = num_lower + 1\n        end\n    end\n    if num_lower\
    \ % 2 ~= 0 then\n        table.insert(words, num_lower)\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3b93utyf.lua:27:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"hello\"}\nstack traceback:\n\t\
    /tmp/tmp3b93utyf.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    return txt:gmatch(\"([^A-Za-z\xC0-\xD6\
    \xD8-\xDE])\") --Split on any non-alphanumeric characters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pj055g7.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0xdef310\nstack traceback:\n\
    \t/tmp/tmp3pj055g7.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if not txt or #txt < 1 then\n      \
    \  return {}\n    end\n    local split = txt:gsub(\"%w+\", \"\")\n    -- remove\
    \ trailing whitespace\n    if not split[#split] then\n        split = split:gsub(\"\
    ^%s*(.-)%s*$\", \"%1\")\n    end\n    -- split on ',', if there are no commas\
    \ in the text we should split on spaces\n    if not split[#split] then\n     \
    \   split = split:gsub(\"^%s*(.-)%s*$\", \"%1\")\n    end\n    return split\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphju2v9a8.lua:27:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"!\"\nstack traceback:\n\t/tmp/tmphju2v9a8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = \"\"\n  for w in txt:gmatch(\"\
    ([^ ]+)(%d+)\"..(string.len(txt) % 2 == 0 and not string.sub(txt, -1)) or \"%+%d+\"\
    ) do\n    if words ~= \"\" then\n      words = words .. \" \"\n    end\n    words\
    \ = words .. w\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy3x5rafu.lua:10:\
    \ attempt to concatenate a boolean value\nstack traceback:\n\t/tmp/tmpy3x5rafu.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpy3x5rafu.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local results = {}\n  for w in string.gmatch(txt,\
    \ \"[^ ]+\") do\n    if string.find(w, \" \") then\n      -- split on spaces\n\
    \      local split = string.gmatch(w, \" [^ ]+\")\n      for _, v in pairs(split)\
    \ do\n        table.insert(results, v)\n      end\n    else\n      table.insert(results,\
    \ w)\n    end\n  end\n  return #results == 0 and #string.gmatch(txt, \"[^A-Za-z]\"\
    ) or #results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvyuv_t17.lua:27:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmpvyuv_t17.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal whitespaces = txt:match('^%s*%w+$')\
    \ or ''\n\tlocal comma = txt:match('^%s*,*$')\n\tlocal count = #whitespaces &\
    \ #comma\n\tif count == 0 then\n\t\treturn #txt, txt\n\telseif count > 0 then\n\
    \t\treturn count, txt\n\telse\n\t\treturn #txt, txt:lower()\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsem1vd6g.lua:11:\
    \ attempt to get length of a nil value (local 'comma')\nstack traceback:\n\t/tmp/tmpsem1vd6g.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpsem1vd6g.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local split = {}\n    local len = #txt\n\
    \    for i = 1, len do\n        local char = txt:sub(i,i)\n        if char ==\
    \ ' ' then\n            table.insert(split, txt:sub(1,i))\n            i = i +\
    \ 1\n        elseif char == ',' then\n            table.insert(split, txt:sub(1,i))\n\
    \            i = i + 1\n        elseif char < 'a' and char > 'z' then\n      \
    \      table.insert(split, char)\n        end\n    end\n    return split\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0t8cna2.lua:29:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello \"}\nstack traceback:\n\t\
    /tmp/tmpq0t8cna2.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    return txt:gsub(\" \", function () --\
    \ remove all whitespaces\n        return string.lower(string.sub(string.upper(string.sub(_G.RANDOM.uniform(0,\
    \ #_G.RANDOM.uniform(0, #txt)), 1, #_G.RANDOM.uniform(0, #txt))), -1, #_G.RANDOM.uniform(0,\
    \ #txt))) -- convert string to lowercase\n    end):gsub(\",\", function () --\
    \ remove all commas\n        return string.lower(string.sub(_G.RANDOM.uniform(0,\
    \ #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0,\
    \ #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0,\
    \ #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0,\
    \ #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0,\
    \ #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0,\
    \ #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0,\
    \ #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0,\
    \ #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0,\
    \ #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0,\
    \ #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0,\
    \ #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0,\
    \ #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0,\
    \ #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RANDOM.uniform(0, #_G.RAN\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1cmwv8bg.lua:13: ')' expected (to close '(' at line 12) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%a]+\")\n\
    \    if words == nil then\n        return nil\n    else\n        local words =\
    \ words:gsub(\",\", \" \")\n        local count_letters = {}\n        for i=1,#words\
    \ do\n            count_letters[i] = count_letters[i+1] or 0\n            count_letters[i+1]\
    \ = count_letters[i]+1\n        end\n        return count_letters\n    end\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=lua |>\nI believe what you are looking for\
    \ is something like this\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr2ce7ky7.lua:22: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = {}\n  local i = 1\n  for\
    \ c in txt:gmatch(\"[%a1-%.]\") do\n    if c ~= \" \" then\n      words[#words\
    \ + 1] = c\n    end\n    i = i + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9cki2oi.lua:23:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"H\", \"e\", \"l\", \"l\", \"o\"\
    , \"w\", \"o\", \"r\", \"l\", \"d\"}\nstack traceback:\n\t/tmp/tmpc9cki2oi.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal count\n\tlocal words = {}\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp53yop4h1.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:sub(1,1) == '\"' and txt:sub(-1)\
    \ ~= '\"'  then\n        txt = txt:gsub(\"''\", '\"')\n    end\n    local list\
    \ = txt:gsub(\"%s+\", \" \"):gsub(\"%d+\", \"\")\n    if list:find(\" \") then\n\
    \        return list:gsub(\"(^%s+)( )([^%s+]*)(%s)(%s)$\", function(s1, s4, s3,\
    \ s2)\n            return s1 .. s4 .. s3:lower()\n        end):gsub(\"([^%s]+)(%s)$\"\
    , function(s3, s2)\n            return s3:lower() .. ','\n        end):gsub(\"\
    (%s)$\", function(s2)\n            return ',' .. s2:lower()\n        end):gsub(\"\
    (^%s+)\", \"%1\"):gsub(\"(%s+)$\", \"%1\")\n    end\n    return list:gsub(\"%1\"\
    , \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rmpiqm2.lua:28:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmp7rmpiqm2.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local txt = txt or \"\"\n  local ws =\
    \ nil\n  local c = nil\n  local n = nil\n  local s = nil\n  local m = nil\n  local\
    \ t = nil\n  local w = nil\n  local l = nil\n  local x = nil\n  local y = nil\n\
    \  local z = nil\n  local result = {}\n  local lastchar = nil\n  local lastchar\
    \ = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp67qdgd12.lua:38: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal whitespace_pos = string.find(txt,\
    \ \"%s+\", 1, true)\n\tif whitespace_pos then\n\t\treturn string.sub(txt, 1, whitespace_pos\
    \ - 1)\n\telse\n\t\tlocal comma = string.find(txt, \"%s+\", 2, true)\n\t\tif comma\
    \ then\n\t\t\treturn string.sub(txt, 2, comma - 1)\n\t\tend\n\tend\n\tlocal letters\
    \ = string.gsub(txt, \"[a-z]+\", \"\")\n\treturn (letters ~= \"\" and letters\
    \ ~= \"0\" and tonumber(letters)) or #txt\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplt_7a5ud.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 12\nstack traceback:\n\t/tmp/tmplt_7a5ud.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    for w in str:gmatch(\"\
    %w+\") do\n        words[#words + 1] = cword_count(w)\n    end\n    return table.concat(words)\
    \ \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpils2bem3.lua:10:\
    \ attempt to index a nil value (global 'str')\nstack traceback:\n\t/tmp/tmpils2bem3.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpils2bem3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  return txt:gmatch(\"[%S]+\") --Split on\
    \ any whitespace or non-whitespace\n  or txt:gmatch(\"[%w-]+\") --Split on any\
    \ word character (letters, digits, underscore)\n  or txt:gmatch(\"%a+\") --Split\
    \ on any lowercase letters (lowercase)\n  or txt:gmatch(\"%c+\") --Split on any\
    \ number of consecutive letters (non whitespace)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzq9l2_u0.lua:18:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x24cc300\nstack traceback:\n\
    \t/tmp/tmpzq9l2_u0.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = string.gmatch(txt, \"\
    [^%s]+\")\n    if words then\n        words = words[1]:gsub(\",\", \" \")\n  \
    \      words = string.gsub(words, \"^%s+\", \" \")\n        words = string.gsub(words,\
    \ \"%s+$\", \"\")\n        if words then\n            words = string.gsub(words,\
    \ \"[\" .. string.char(string.upper(string.sub(words, 1, 1)) + 1) .. \"]\", \"\
    \ \")\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn78goqzt.lua:11:\
    \ attempt to index a function value (local 'words')\nstack traceback:\n\t/tmp/tmpn78goqzt.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpn78goqzt.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    -- Add error checking\n    if not txt\
    \ or #txt == 0 then return nil end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq186ws0t.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = { }\n  for word in str:gmatch(\"\
    ([A-Za-z]+)\") do\n    table.insert(words, word)\n  end\n  return table.concat(words)\
    \ ~= '' and not table.concat(words) ~= nil and #words == #str:len() - #str:gsub(\"\
    %s+\", \" \"):byte()\nend\n</code>\n<|/ a dscore=1 tags=lua-patterns,string,lua\
    \ |>\n<| c |>\nI cannot use the table package, but thanks for sharing it! :)\n\
    <|/ c |>\n<| a |>\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcwpasmz6.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[^a-zA-Z]+\"\
    , \" \")\n    return words:gsub(\"[,]+\", \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpls8myn3t.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world \"\nstack traceback:\n\
    \t/tmp/tmpls8myn3t.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local w = {}\n   for w in string.gmatch(txt,\
    \ \"([^,]+)(%S+)\") and string.gmatch(txt, \"([^,]+)(%S+)\") or {word=txt} do\n\
    \      w.word = w.word:lower()\n      w.count = string.len(w.word)\n   end\n \
    \  return w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoeri9tqh.lua:11:\
    \ attempt to index a nil value (field 'word')\nstack traceback:\n\t/tmp/tmpoeri9tqh.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpoeri9tqh.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local ws = ''\n  local commas = 0\n  local\
    \ lowers = 26\n  for w in string.gmatch(txt, '([^ ,]+)') do\n    local c = w:sub(1,\
    \ 1)\n    if c == ',' then\n      commas = commas + 1\n      ws = ws .. w\n  \
    \  elseif c ~= ' ' then\n      lowers = lowers - 1\n      ws = ws .. w\n    end\n\
    \  end\n  if lowers > 0 then\n    lowers = lowers - 1\n  end\n  return ws, commas,\
    \ lowers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7yu2c2p.lua:31:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Helloworld!\"\nstack traceback:\n\
    \t/tmp/tmpw7yu2c2p.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local num_words = 0\n    local words\
    \ = {}\n    for word in split(txt) do\n        table.insert(words, word)\n   \
    \     num_words = num_words + 1\n    end\n    return num_words, words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpivgi8v5o.lua:11:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpivgi8v5o.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpivgi8v5o.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    local num_chars\
    \ = #txt\n    local index = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0n_fdrw9.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  -- Split on whitespace and comma\n  local\
    \ words = txt:gmatch(\"[%w\\s]+\")\n  if #words < 1 then\n    local num\n    --\
    \ Split on comma and lower-case\n    num = txt:gsub(\"([^a-zA-Z]+)\", \",$1\"\
    ):gsub(\"([^a-zA-Z]+)\", \",$1\"):gsub(\"([^a-zA-Z]+)\", \",$1\")\n    -- Return\
    \ only odd number\n    return tonumber(num)\n  else\n    return words\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3m6lrb6t.lua:10: invalid escape sequence near '\"[%w\\s'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tif txt:find(\"[%w\\\"]\") then\n\t\treturn\
    \ {\n\t\t\tstringx.split(txt:lower(), \",\", true),\n\t\t\tstringx.split(txt:lower(),\
    \ \" \", true)\n\t\t}\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4a1zt8y0.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  -- Check for optional comma\n  local count\
    \ = (#txt - 1) ~= 0 and #txt or 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbgbuh3bk.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal words = {}\n\tlocal count = 1\n\t\
    for word in txt:gmatch(\"[^ ]\") do\n\t\tcount = count + #word\n\t\ttable.insert(words,\
    \ word)\n\tend\n\tif count % 2 ~= 0 then\n\t\tcount = (count / 2) + 1\n\tend\n\
    \treturn count, words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiosvl61_.lua:24:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 12\nstack traceback:\n\t/tmp/tmpiosvl61_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal ws = ''\n\tlocal i, count = 1, 1\n\
    \tfor w in txt:gmatch('([^,]+)'..rex:g) do\n\t\tif ws:sub(-1) ~= ',' then\n\t\t\
    \tws = ws .. ','\n\t\t\tcount = count + 1\n\t\tend\n\t\tws = ws .. w\n\t\ti =\
    \ i + 1\n\tend\n\treturn count, ws\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpblsavi7u.lua:11: function arguments expected near ')'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = string.gsub(txt, \"%S+\"\
    , \" \")\n  return string.gsub(words, \" \", \"\\n\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5pq41c7.lua:16:\
    \ expected: \n{\"Hello\", \"world!\"}\nactual: \n\"\n\n\n\"\nstack traceback:\n\
    \t/tmp/tmpj5pq41c7.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    local num_letters\
    \ = #txt\n    local last_index = num_letters - 1\n    local last_character = txt[last_index]\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1a__iqmm.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = {}\n  local whitespace =\
    \ {\" \", \"\\t\", \"\\n\"}\n  local comma = {\",\"}\n  for i = 1, #txt do\n \
    \   if txt:sub(i,i) == \" \" then\n      for j = i, #txt do\n        if whitespace:find(txt:sub(i,i))\
    \ == nil then\n          if comma:find(txt:sub(i,i)) == nil then\n           \
    \ if txt:sub(i,i) == string.lower(string.sub(string.gsub(txt:sub(i,i),\"[%a]\"\
    ,string.upper)),j,j) then\n              table.insert(words,string.sub(string.gsub(txt:sub(i,i),\"\
    [%a]\",string.upper),1,j-1))\n              i = j\n              break\n     \
    \       end\n          end\n        end\n      end\n    end\n  end\n  \n  return\
    \ table.concat(words,\" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwiiq2t4n.lua:15:\
    \ attempt to call a nil value (method 'find')\nstack traceback:\n\t/tmp/tmpwiiq2t4n.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpwiiq2t4n.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = \"\"\n  for i = 1, #txt\
    \ do\n    local char = string.sub(txt, i, i)\n    if char ~= \" \" and char ~=\
    \ \",\" then\n      words = words .. char\n    else\n      if words ~= \"\" then\n\
    \        table.insert(words, words)\n      end\n      words = (char)\n    end\n\
    \  end\n  return #words > 0 and words or 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp336z4h4l.lua:16:\
    \ bad argument #1 to 'insert' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp336z4h4l.lua:16: in local 'candidate'\n\t/tmp/tmp336z4h4l.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local tbl = {}\n  local letters = {}\n\
    \  local nletters = {}\n  local i = 1\n  while i ~= nil do\n    local c = string.sub(txt,\
    \ i, i)\n    local c = string.lower(c)\n    if letters[c] then\n      nletters[c]\
    \ = nletters[c] + 1\n      tbl[c] = tbl[c] .. letters[c]\n    else\n      nletters[c]\
    \ = 1\n      letters[c] = c\n      tbl[c] = c\n    end\n    i = string.find(txt,\
    \ \", \")\n    if i == nil then\n      break\n    end\n  end\n  if i == nil then\n\
    \    return nletters\n  else\n    return tbl\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xo47hh3.lua:39:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {h=1}\nstack traceback:\n\t/tmp/tmp2xo47hh3.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = \"\"\n    local sep\n\
    \    local last = 0\n    for i = 1, #txt do\n        if txt:sub(i,i) == \" \"\
    \ then\n            if sep == nil then\n                sep = i\n            else\n\
    \                words = words .. \",\" .. txt:sub(last, sep)\n              \
    \  last = sep\n                sep = nil\n            end\n        else\n    \
    \        words = words .. txt:sub(last, i)\n            last = i\n        end\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzomze6ng.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"HHeelllloo wwoorrlldd!\"\nstack\
    \ traceback:\n\t/tmp/tmpzomze6ng.lua:32: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  -- This section will split words on whitespace\
    \ or commas\n  -- The last word in the string will be the string that gets returned\n\
    \  -- If no whitespace exists in the text you should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters\n  -- with\
    \ odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n \
    \ local words = txt:gsub(\"[%W]+\", \"%1\")\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzahezmuv.lua:28: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local word_list = txt:gmatch(\"(%s+)([^%s]+)\"\
    ) -- Split on any number of spaces, commas or tabs, return a list of all words\n\
    \    word_list = word_list[2] -- Get the second element of word_list, since we\
    \ only want to split on spaces, commas or tabs\n    word_list = word_list:gsub(\"\
    [,\\t]+\", \" \") -- Replace any number of consecutive commas or tabs with a single\
    \ space\n    word_list = word_list:gsub(\"^%s+\", \"\") -- Remove any leading\
    \ spaces in word_list\n    word_list = word_list:gsub(\"%s+$\", \"\") -- Remove\
    \ any trailing spaces in word_list\n    return word_list:gmatch(\"(%S+)\") --\
    \ Split on any non-whitespace character (including none)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd77jmk8u.lua:10:\
    \ attempt to index a function value (local 'word_list')\nstack traceback:\n\t\
    /tmp/tmpd77jmk8u.lua:10: in local 'candidate'\n\t/tmp/tmpd77jmk8u.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"(%w+)\", \" \"\
    )\n  return words:gsub(\"%S+\", \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuc3qnegj.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"    \"\nstack traceback:\n\t/tmp/tmpuc3qnegj.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = {}\n  for i=1,#txt do --\
    \ Loop from 1 to length of text\n    local lc = string.lower(txt:sub(i,i)) --\
    \ Lowercase the current word being analyzed\n    local found = false\n    for\
    \ j=1,#words do -- Loop through all of the words in the table\n      if words[j]\
    \ == lc then -- If the current word being analyzed is equal to the current word\
    \ in the table\n        found = true\n        break\n      end\n    end\n    if\
    \ not found then\n      table.insert(words,lc) -- If no word has already been\
    \ found then insert it into the words table\n    end\n  end\n  if #words > 0 then\n\
    \    table.sort(words) -- Sort the words in alphabetical order\n    local odd\
    \ = 1 -- The odds variable will hold the number of letters that follow the letter\
    \ an odd number of times\n    for i=1,#words do -- Loop from 1 to the number of\
    \ words\n      if string.lower(words[i]) ~= string.lower(words[i-1]) then\n  \
    \      odd = 0 -- If the word being analyzed is not the same as the previous word\
    \ then reset the odds variable\n      end\n      if odd == 1 then -- If the ods\
    \ variable is 1 then it is only odd, the letter an odd number of times\n     \
    \   table.insert(words,string.lower(words[i-1]) .. ',') -- Insert the word into\
    \ the words table with the comma separating it\n      elseif odd == 0 then --\
    \ If the ods variable is 0 then it is only even, the letter an even number of\
    \ times\n        table.insert(words,string.lower(words[i-1]) .. ' ') -- Insert\
    \ the word into the words table with a space between the words\n      end\n  \
    \    odd = 1 + odd -- Increment the odds variable\n    end\n  end\n  return table.concat(words)\
    \ -- Return an array of words with no whitespace or commas\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpumxs_evu.lua:27:\
    \ bad argument #1 to 'lower' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpumxs_evu.lua:27: in local 'candidate'\n\t/tmp/tmpumxs_evu.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal results = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgjo3s8zq.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = ''\n    local num_lowercase_letters\
    \ = 0\n    for w in string.gmatch(txt, '([^%s]+)') do\n        -- Keep the separator\
    \ in lower case\n        local w_lower = string.lower(w)\n        if w_lower ~=\
    \ w then\n            num_lowercase_letters = num_lowercase_letters + #w_lower\n\
    \        end\n        words = words + w_lower\n    end\n    return num_lowercase_letters\
    \ == 0 and #words == #string.gsub(txt, \"[^%w]+\", '') or words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppr7ef1d9.lua:17:\
    \ attempt to perform arithmetic on a string value (local 'words')\nstack traceback:\n\
    \t/tmp/tmppr7ef1d9.lua:17: in local 'candidate'\n\t/tmp/tmppr7ef1d9.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local result = {}\n    local count =\
    \ txt:gsub('([^ ,]+)'):gsub('(,|$)'):gsub('(.)'):gsub('^%s+', ''):gsub('%s+$',\
    \ '')\n    local words = txt:gsub('([^ ,]+)'):gsub('(,|$)')\n    for i=0,count\
    \ do\n        result[i] = words[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjms1k943.lua:10:\
    \ bad argument #2 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpjms1k943.lua:10: in local 'candidate'\n\t/tmp/tmpjms1k943.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local w = {}\n  for w in string.gmatch(txt,\
    \ \"([^ \\n]+)(.-)\") do\n    w = w and w or w .. ','\n    table.insert(w, string.lower(string.sub(w,1,1)))\n\
    \  end\n  return #w ~= #txt and w or string.lower(string.sub(txt, 1, string.len(txt)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0l6znyti.lua:12:\
    \ bad argument #1 to 'insert' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp0l6znyti.lua:12: in local 'candidate'\n\t/tmp/tmp0l6znyti.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal i, txt, words = {}, 0, txt\n\twhile\
    \ true do\n\t\ti = i + 1\t-- Increment index\n\t\tif txt:sub(i, i):find(\" \"\
    ) then\n\t\t\t-- There are whitespace characters to split\n\t\t\twords = words\
    \ and words or {}\n\t\t\t-- Split words on whitespace and push back into words\
    \ vector\n\t\t\t-- Store last index of whitespace character in i for next iteration\n\
    \t\t\twords = words and words or {}\n\t\t\tfor j = i, txt:len() do\n\t\t\t\twords[j]\
    \ = words[j] and words[j] or ''\n\t\t\t\twords[j] = words[j] .. tostring(txt:sub(i,\
    \ j))\n\t\t\t\ti = j + 1\n\t\t\tend\n\t\telse\n\t\t\t-- There are no whitespace\
    \ characters to split so we just store the words in words vector\n\t\t\twords\
    \ = words and words or {}\n\t\t\tfor j = i, txt:len() do\n\t\t\t\twords[j] = words[j]\
    \ and words[j] or ''\n\t\t\t\twords[j] = words[j] .. tostring(txt:sub(i, j))\n\
    \t\t\t\ti = j + 1\n\t\t\tend\n\t\t\tbreak\n\t\tend\n\tend\n\treturn words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpldjj28hx.lua:11:\
    \ attempt to perform arithmetic on a table value (local 'i')\nstack traceback:\n\
    \t/tmp/tmpldjj28hx.lua:11: in local 'candidate'\n\t/tmp/tmpldjj28hx.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   local words = txt:gsub(\"([^ A-Za-z])\"\
    , \" \"):gsub(\"([^ A-Za-z,.-])\", \" \"):gsub(\"(,+)\", \" \"):gsub(\"(%b+)\"\
    , \" \"):gsub(\"(%b%b+)\", \" \")\n   if not words then return 0 end\n   return\
    \ words and tonumber(words)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnv02de3.lua:17:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpnnv02de3.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal ret = {}\n\tlocal words = txt:gmatch(\"\
    [^\" .. string.char(127) .. \"]+\")\n\tfor _, v in pairs(words) do\n\t\ttable.insert(ret,\
    \ v)\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuebce9f1.lua:11:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpuebce9f1.lua:11: in local 'candidate'\n\t/tmp/tmpuebce9f1.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n   txt = string.lower(txt)\n   local words\
    \ = {}\n   local num_chars = string.len(txt)\n   for i = 1, num_chars do\n   \
    \   if string.sub(txt, i, i+1) = ' ' then\n         table.insert(words, string.sub(txt,\
    \ i, i+1))\n      elseif string.sub(txt, i, i+1) = ',' then\n         table.insert(words,\
    \ string.sub(txt, i, i+1))\n      else\n         table.insert(words, string.sub(txt,\
    \ i, i+1))\n         table.insert(words, string.sub(txt, i, i+1))\n      end\n\
    \   end\n   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3ern6paa.lua:13: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    local i = 0\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqbhbzlp6.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  -- Split on the whitespace\n  local words\
    \ = txt:gmatch('(%S+)') -- Capture the word\n  if not words then return nil end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp35zzr1tk.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = ''\n    for w in txt:gmatch('%w+')\
    \ do\n        words = words or w -- Only add the split word if it's not the first\
    \ word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwdclr_p.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgwdclr_p.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n\tlocal words = {}\n\tfor letter in txt:gmatch('([a-zA-Z]+)')\
    \ do\n\t\twords[#words + 1] = letter\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplv3al7o9.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmplv3al7o9.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = {}\n    local counts =\
    \ {}\n    for _,v in pairs(txt:gsub(\"([^A-Za-z0-9 ]+)\",\",\")):gmatch(\"%w+\"\
    ) do\n        if counts[v] then\n            words[#words + 1] = v\n         \
    \   counts[v] = counts[v] + 1\n        else\n            counts[v] = 1\n     \
    \   end\n    end\n    if counts[1] % 2 = 0 then\n        for _,v in pairs(words)\
    \ do\n            words[#words + 1] = v .. \"_\"\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkb22zaay.lua:19: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local lst = {} -- The new word list to\
    \ return\n  local ls = string.gsub(txt, \"%S+\", \"\")\n  for w in string.gmatch(ls,\
    \ \"[^,]+\") do\n    table.insert(lst, w)\n  end\n  return #lst + 1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdm9toje0.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmpdm9toje0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt:match(\"[,!.-]\") then\n    \
    \    -- Split on commas and periods\n        return txt:gsub(\"[,!.-]\", \" \"\
    ):gsub(\"^%s*%s[^%s*]*%s*$\", \"%1,%2\"):gsub(\"^%s+\", \"\"):gsub(\"%s+$\", \"\
    \")\n    else\n        -- Split on whitespace\n        return txt:gsub(\"[^ ]\"\
    , \" \"):gsub(\"^%s*%s[^%s*]*%s*$\", \"%1,%2\"):gsub(\"^%s+\", \"\"):gsub(\"%s+$\"\
    , \"\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqj5217m4.lua:21:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world\"\nstack traceback:\n\
    \t/tmp/tmpqj5217m4.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local txt = txt or ''\n    local words\
    \ = ''\n    local i = 0\n    while true do\n        local letter = string.sub(txt,\
    \ i, i)\n        local len = #letter\n        if len > 0 and letter == ',' then\n\
    \            words = words & ','\n            i = i + len + 1\n        elseif\
    \ len > 0 and letter == '-' and i + 1 < #txt and string.sub(txt, i + 1, i + 2)\
    \ == '-'\n            then\n            words = words & letter\n            i\
    \ = i + len + 1\n        else\n            words = words & letter\n          \
    \  i = i + 1\n        end\n        if string.len(words) == string.len(string.gsub(txt,\
    \ \"[%z]\", string.len(words))) then\n            return words\n        end\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps3zdakcy.lua:23:\
    \ attempt to perform bitwise operation on a string value (local 'words')\nstack\
    \ traceback:\n\t/tmp/tmps3zdakcy.lua:23: in local 'candidate'\n\t/tmp/tmps3zdakcy.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    return txt:gsub(\"(%S+)\", function\
    \ (s) return table.concat(s:gmatch(\"%S+\") .. \",\" .. unpack(s:gsub(\"%S+\"\
    ,\",\")), \" \") end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpddls920p.lua:9:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpddls920p.lua:9:\
    \ in function </tmp/tmpddls920p.lua:9>\n\t[C]: in function 'string.gsub'\n\t/tmp/tmpddls920p.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpddls920p.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  return txt:gsub(\"%w+\", function(a) return\
    \ a:lower() end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmskwvfbj.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"hello world!\"\nstack traceback:\n\
    \t/tmp/tmpmskwvfbj.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    if txt ~= nil then\n        local words\
    \ = {}\n        for i = 1, #txt do\n            local word = string.gsub(txt,\
    \ \"[%a-%z]+\", \" \")\n            if word ~= \"\" then\n                table.insert(words,\
    \ word)\n            end\n        end\n        table.sort(words)\n        local\
    \ nWords = 0\n        for _, word in ipairs(words) do\n            if word ~=\
    \ \"\" then\n                table.insert(words, word)\n                nWords\
    \ = nWords + 1\n            end\n        end\n        return nWords, words\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub('%S+', ''):gsub(',+',\
    \ ',')\n    if not words then return 0 end\n    words = words:gsub('%S+', '')\n\
    \    local num = 0\n    for w in words:gmatch('([a-z]+)') do\n        num = num\
    \ + #w\n    end\n    return num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpy9ydv4.lua:22:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpvpy9ydv4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
