name: HumanEval_46_fib4
language: lua
results:
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return\
    \ 0\n  end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4q7rslpy.lua:24:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp4q7rslpy.lua:24:\
    \ in upvalue 'fib4'\n\t/tmp/tmp4q7rslpy.lua:24: in upvalue 'fib4'\n\t/tmp/tmp4q7rslpy.lua:24:\
    \ in upvalue 'fib4'\n\t/tmp/tmp4q7rslpy.lua:24: in local 'candidate'\n\t/tmp/tmp4q7rslpy.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n==0 then\n    return\
    \ 0\n  elseif n==1 then\n    return 1\n  elseif n==2 then\n    return 2\n  elseif\
    \ n==3 then\n    return 0\n  elseif n==4 then\n    return 4\n  elseif n==5 then\n\
    \    return 8\n  elseif n==6 then\n    return 14\n  else\n    return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5c086pg9.lua:37:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp5c086pg9.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return 0\
    \ end\n  if n < 3 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8vip2dv.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpn8vip2dv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  end\n  if n < 4 then\n    return n\n  end\n  local fib4 = 0\n  repeat\n\
    \    fib4 = fib4 + 4\n  until fib4 > n\n  return fib4\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8f2wzpyl.lua:31:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp8f2wzpyl.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n < 0 then return nil\
    \ end\n\tif n < 3 then return 0 end\n\tlocal fib4 = 1\n\trepeat\n\t\tfib4 = fib4\
    \ + fib4\n\tuntil fib4 >= n\n\treturn fib4\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp51ix3xx.lua:27:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpp51ix3xx.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local fib3 = 0\n  local\
    \ fib2 = 0\n  local fib1 = 0\n  for i = 1, n do\n    fib3 = fib1 + fib2\n    fib2\
    \ = fib1\n    fib1 = fib3\n  end\n  return fib3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqgpl692.lua:29:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpbqgpl692.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 0 then\n    0\n\
    \  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzihix2kx.lua:16: unexpected symbol near '0'\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  end\n  if n < 2 then\n    return 0\n  end\n  return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmputaoz_js.lua:21:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmputaoz_js.lua:21:\
    \ in upvalue 'fib4'\n\t/tmp/tmputaoz_js.lua:21: in upvalue 'fib4'\n\t/tmp/tmputaoz_js.lua:21:\
    \ in upvalue 'fib4'\n\t/tmp/tmputaoz_js.lua:21: in local 'candidate'\n\t/tmp/tmputaoz_js.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local a, b = 0, 1\n \
    \   if n == 0 or n == 1 then\n        return 1\n    elseif n == 2 then\n     \
    \   return 2\n    else\n        for i = 1, n do\n            a, b = b, a + b\n\
    \        end\n        return a\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphaj4m3k4.lua:31:\
    \ expected: 4, actual: 5\nstack traceback:\n\t/tmp/tmphaj4m3k4.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tassert(type(n) == 'number'\
    \ and n > 0 and n < 4294967295)\n\tlocal fib4 = 0\n\tif n == 0 then\n\t\treturn\
    \ 0\n\telse\n\t\tif n == 1 then\n\t\t\treturn 0\n\t\telse\n\t\t\tif n == 2 then\n\
    \t\t\t\treturn 2\n\t\t\telse\n\t\t\t\tif n == 3 then\n\t\t\t\t\treturn 0\n\t\t\
    \t\telse\n\t\t\t\t\tif n == 4 then\n\t\t\t\t\t\treturn 0\n\t\t\t\t\telse\n\t\t\
    \t\t\t\tfib4 = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\t\t\t\t\tend\n\t\
    \t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn fib4\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp98p_53af.lua:32:\
    \ attempt to call a number value (local 'fib4')\nstack traceback:\n\t/tmp/tmp98p_53af.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmp98p_53af.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 2 then return n\
    \ end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph134_alp.lua:22:\
    \ expected: 4, actual: -6\nstack traceback:\n\t/tmp/tmph134_alp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 1 end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxujpwi56.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpxujpwi56.lua:17: in upvalue 'fib4'\n\
    \t/tmp/tmpxujpwi56.lua:17: in upvalue 'fib4'\n\t/tmp/tmpxujpwi56.lua:17: in upvalue\
    \ 'fib4'\n\t/tmp/tmpxujpwi56.lua:17: in upvalue 'fib4'\n\t/tmp/tmpxujpwi56.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpxujpwi56.lua:17: in upvalue 'fib4'\n\t/tmp/tmpxujpwi56.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpxujpwi56.lua:17: in upvalue 'fib4'\n\t/tmp/tmpxujpwi56.lua:17:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpxujpwi56.lua:17: in local 'candidate'\n\t\
    /tmp/tmpxujpwi56.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.330\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 0 then\n     \
    \   return nil\n    end\n    local fib = 0\n    fib = (fib * 4) + fib(n-1) + fib(n-2)\
    \ + fib(n-3) + fib(n-4)\n    return fib\nend\n</cell>\n<code language=julia-1.0>\n\
    ## Problem 10\n</cell>\n<code language=julia-1.0>\n## Problem 11\n</cell>\n<code\
    \ language=julia-1.0>\n## Problem 12\n</cell>\n<text>\nProblem Set 4\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfq9x45pl.lua:22: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n < 2 then\n\t\treturn\
    \ n\n\tend\n\treturn fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp681va2pb.lua:24:\
    \ expected: 4, actual: -6\nstack traceback:\n\t/tmp/tmp681va2pb.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local fib4 = 0\n  if n\
    \ <= 1 then\n    return 0\n  else\n    fib4 = fib4 + fib4(n - 1)\n  end\n  return\
    \ fib4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe1swkvxu.lua:19:\
    \ attempt to call a number value (local 'fib4')\nstack traceback:\n\t/tmp/tmpe1swkvxu.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpe1swkvxu.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then\n    return\
    \ 0\n  end\n  if n == 1 then\n    return 0\n  end\n  if n == 2 then\n    return\
    \ 2\n  end\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n  \
    \  lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n \
    \   lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0303djws.lua:30:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp0303djws.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 0 then error(\"\
    fib4 called with n argument out of bounds.\") end\n    local fib4 = 0\n    for\
    \ i = 1,4 do\n        fib4 = fib4 + fib4\n    end\n    return fib4\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n  \
    \  lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n \
    \   lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_ypdcj7.lua:26:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpr_ypdcj7.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 4 then\n    return\
    \ 0\n  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n\
    \  elseif n == 2 then\n    return 2\n  elseif n == 3 then\n    return 0\n  else\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7eml06bo.lua:33:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmp7eml06bo.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n\
    \        return 2\n    else\n        return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuvmb2fc0.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpuvmb2fc0.lua:22: in upvalue 'fib4'\n\
    \t/tmp/tmpuvmb2fc0.lua:22: in upvalue 'fib4'\n\t/tmp/tmpuvmb2fc0.lua:22: in upvalue\
    \ 'fib4'\n\t/tmp/tmpuvmb2fc0.lua:22: in upvalue 'fib4'\n\t/tmp/tmpuvmb2fc0.lua:22:\
    \ in upvalue 'fib4'\n\t/tmp/tmpuvmb2fc0.lua:22: in upvalue 'fib4'\n\t/tmp/tmpuvmb2fc0.lua:22:\
    \ in upvalue 'fib4'\n\t/tmp/tmpuvmb2fc0.lua:22: in upvalue 'fib4'\n\t/tmp/tmpuvmb2fc0.lua:22:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpuvmb2fc0.lua:22: in local 'candidate'\n\t\
    /tmp/tmpuvmb2fc0.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.340\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 1 then return n\
    \ else return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4) end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32owy24v.lua:21:\
    \ expected: 4, actual: -6\nstack traceback:\n\t/tmp/tmp32owy24v.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n <= 1 then\n    \
    \    return 0\n    end\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfipgeto.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmprfipgeto.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then\n    local\
    \ fib4 = 0\n    return fib4\n  end\n  if n == 1 then\n    local fib4 = 0\n   \
    \ return fib4\n  end\n  if n == 2 then\n    local fib4 = 1\n    return fib4\n\
    \  end\n  if n == 3 then\n    local fib4 = 0\n    return fib4\n  end\n  local\
    \ fib4 = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  return fib4\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkffwhc7c.lua:38:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpkffwhc7c.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then\n    return\
    \ 0\n  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 2\n\
    \  elseif n == 3 then\n    return 0\n  elseif n == 4 then\n    return 2\n  elseif\
    \ n == 5 then\n    return 3\n  elseif n == 6 then\n    return 0\n  elseif n ==\
    \ 7 then\n    return 3\n  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4) + fib4(n-5) + fib4(n-6) + fib4(n-7)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_1lejyh.lua:39:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpj_1lejyh.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tlocal f = {}\n\tf.__index\
    \ = f\n\tif n == 0 then return 0 end\n\tif n == 1 then return 1 end\n\tif n ==\
    \ 2 then return 2 end\n\tif n == 3 then return 0 end\n\tif n == 4 then return\
    \ 0 end\n\tlocal fib4\n\tif fib4 == nil then\n\t\tfib4 = setmetatable({\n\t\t\t\
    __index = function (t, k)\n\t\t\t\tlocal v = fib4(k)\n\t\t\t\tif k == 1 then return\
    \ v end\n\t\t\t\tlocal v = v + fib4(k-1) + fib4(k-2) + fib4(k-3) + fib4(k-4) +\
    \ fib4(k)\n\t\t\t\treturn v\n\t\t\tend\n\t\t}, nil)\n\tend\n\treturn fib4(n)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxtw2fkq0.lua:33:\
    \ attempt to call a table value (local 'fib4')\nstack traceback:\n\t/tmp/tmpxtw2fkq0.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmpxtw2fkq0.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then\n    return\
    \ 0\n  elseif n == 1 then\n    return 0\n  else\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpapsv9iwr.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpapsv9iwr.lua:20: in upvalue 'fib4'\n\
    \t/tmp/tmpapsv9iwr.lua:20: in upvalue 'fib4'\n\t/tmp/tmpapsv9iwr.lua:20: in upvalue\
    \ 'fib4'\n\t/tmp/tmpapsv9iwr.lua:20: in upvalue 'fib4'\n\t/tmp/tmpapsv9iwr.lua:20:\
    \ in upvalue 'fib4'\n\t/tmp/tmpapsv9iwr.lua:20: in upvalue 'fib4'\n\t/tmp/tmpapsv9iwr.lua:20:\
    \ in upvalue 'fib4'\n\t/tmp/tmpapsv9iwr.lua:20: in upvalue 'fib4'\n\t/tmp/tmpapsv9iwr.lua:20:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpapsv9iwr.lua:20: in local 'candidate'\n\t\
    /tmp/tmpapsv9iwr.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.330\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n <= 1 then\n    \
    \    -- base case\n        return 1\n    else\n        -- recursive case\n   \
    \     return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpic635h__.lua:26:\
    \ expected: 4, actual: 25\nstack traceback:\n\t/tmp/tmpic635h__.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 4 then\n    return\
    \ n\n  end\n  local fib1 = fib4(n / 2)\n  local fib2 = fib4((n - fib1) / 2)\n\
    \  return fib1 + fib2 + fib2(fib2(fib2))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6m_cctmw.lua:20:\
    \ attempt to call a number value (local 'fib2')\nstack traceback:\n\t/tmp/tmp6m_cctmw.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp6m_cctmw.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n == 0 then\n\t\treturn\
    \ 0\n\tend\n\tif n == 1 then\n\t\treturn 1\n\tend\n\treturn fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0sz9hw1z.lua:21:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp0sz9hw1z.lua:21: in upvalue 'fib4'\n\
    \t/tmp/tmp0sz9hw1z.lua:21: in upvalue 'fib4'\n\t/tmp/tmp0sz9hw1z.lua:21: in upvalue\
    \ 'fib4'\n\t/tmp/tmp0sz9hw1z.lua:21: in upvalue 'fib4'\n\t/tmp/tmp0sz9hw1z.lua:21:\
    \ in upvalue 'fib4'\n\t/tmp/tmp0sz9hw1z.lua:21: in upvalue 'fib4'\n\t/tmp/tmp0sz9hw1z.lua:21:\
    \ in upvalue 'fib4'\n\t/tmp/tmp0sz9hw1z.lua:21: in upvalue 'fib4'\n\t/tmp/tmp0sz9hw1z.lua:21:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmp0sz9hw1z.lua:21: in local 'candidate'\n\t\
    /tmp/tmp0sz9hw1z.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.310\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 0 then\n    return\
    \ 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqc6ezh5n.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpqc6ezh5n.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tlocal fib_seq = {}\n\t\
    fib_seq[0] = 0\n\tfib_seq[1] = 0\n\tfib_seq[2] = 2\n\tfib_seq[3] = 3\n\tlocal\
    \ fib4_temp = 0\n\tfor i = 4, n, 1 do\n\t\tfib4_temp = fib4_temp + fib_seq[i-1]\
    \ + fib_seq[i-2] + fib_seq[i-3] + fib_seq[i-4]\n\t\tfib_seq[i] = fib4_temp\n\t\
    end\n\treturn fib_seq[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu9o3zdf.lua:31:\
    \ expected: 4, actual: 15\nstack traceback:\n\t/tmp/tmpeu9o3zdf.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n <= 1 then\n    \
    \    return 0\n    end\n    local fib4n = fib4(n - 1) + fib4(n - 2) + fib4(n -\
    \ 3) + fib4(n - 4)\n    return fib4n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ios8zi5.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp2ios8zi5.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return 0\
    \ end\n  if n < 3 then return n end\n  return fib4(n-1) + fib4(n-2) + fib4(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpps2rvrnf.lua:23:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmpps2rvrnf.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n == 0 then\n\t\tn =\
    \ 0\n\telseif n == 1 then\n\t\tn = 1\n\telseif n < 0 then\n\t\treturn\n\tend\n\
    \tlocal fib4_1 = 1\n\tlocal fib4_2 = 1\n\tlocal fib4_3 = 1\n\tlocal fib4_4 = 1\n\
    \tfor i = 4, n do\n\t\tfib4_1 = fib4_1 + fib4_2\n\t\tfib4_2 = fib4_3\n\t\tfib4_3\
    \ = fib4_4\n\t\tfib4_4 = fib4_1 + fib4_2 + fib4_3 + fib4_4\n\tend\n\treturn fib4_4\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9r12qe2.lua:38:\
    \ expected: 4, actual: 14\nstack traceback:\n\t/tmp/tmpe9r12qe2.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then\n    return\
    \ 0\n  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkw2uav3i.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpkw2uav3i.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n==0 or n==1 then return\
    \ n end\n  if n>3 then\n    local fib4=fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)\n\
    \    return fib4\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqw09tzl1.lua:17:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpqw09tzl1.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpqw09tzl1.lua:17: in local 'candidate'\n\t/tmp/tmpqw09tzl1.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n < 0 then return 0\
    \ end\n\tif n < 3 then return 1 end\n\treturn fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85eo4c5p.lua:23:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmp85eo4c5p.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n   if n == 0 then return\
    \ 0 end\n   if n == 1 then return 1 end\n   if n == 2 then return 2 end\n   if\
    \ n == 3 then return 0 end\n   if n == 4 then return 1 end\n   return fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8q5inem.lua:27:\
    \ expected: 28, actual: 24\nstack traceback:\n\t/tmp/tmps8q5inem.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tassert(n > 0, \"fib4 number\
    \ sequence start index must be positive.\")\n\tassert(n < 4, \"fib4 number sequence\
    \ stop index must be smaller than 4.\")\n\treturn (\n\t\tn == 0 or n == 1 or n\
    \ == 2 or\n\t\tn == 3 or n == 4 or n == 5 or n == 6 or n == 7 or\n\t\tn == 8 or\
    \ n == 9 or n == 10)\n\t\tand 0\n\t\tor fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4)\nend\nreturn fib4\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9k37h7p8.lua:25: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n <= 0 then return\
    \ 0 end\n    if n == 1 then return 0 end\n    return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vvv8bg9.lua:23:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp1vvv8bg9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 0 then return 0\
    \ else return (fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)) end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qmlx4gi.lua:21:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp5qmlx4gi.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n==0 then return 0 end\n\
    \  if n==1 then return 1 end\n  return fib4(4) + fib4(3) + fib4(2) + fib4(1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprb_dsfti.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmprb_dsfti.lua:17: in upvalue 'fib4'\n\
    \t/tmp/tmprb_dsfti.lua:17: in upvalue 'fib4'\n\t/tmp/tmprb_dsfti.lua:17: in upvalue\
    \ 'fib4'\n\t/tmp/tmprb_dsfti.lua:17: in upvalue 'fib4'\n\t/tmp/tmprb_dsfti.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmprb_dsfti.lua:17: in upvalue 'fib4'\n\t/tmp/tmprb_dsfti.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmprb_dsfti.lua:17: in upvalue 'fib4'\n\t/tmp/tmprb_dsfti.lua:17:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmprb_dsfti.lua:17: in local 'candidate'\n\t\
    /tmp/tmprb_dsfti.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.300\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 0 then return\
    \ 0 end\n    if n < 4 then return n end\n    return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmsse7c7y.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpmsse7c7y.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return end\n\
    \  local fib={}\n  if n == 0 then\n    fib[0]=0\n  else\n    fib[1]=fib[2]=fib[3]=fib[4]=fib[n]=fib[n-1]+fib[n-2]+fib[n-3]+fib[n-4]\n\
    \  end\n  return fib[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpls6l9w4p.lua:20: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 1 end\n  if n == 2 then return 2 end\n  local result\
    \ = fib4(n - 1) + fib4(n - 2)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9y61qbwi.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp9y61qbwi.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 4 then\n    return\
    \ n\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5ubmctf.lua:25:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpt5ubmctf.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local fib4 = 0\n    repeat\n\
    \        fib4 = fib4 + 1\n    until fib4 > n\n    return fib4\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0zqq8tv.lua:25:\
    \ expected: 4, actual: 6\nstack traceback:\n\t/tmp/tmpj0zqq8tv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 1 then\n    \
    \    return 0\n    end\n    if n == 2 then\n        return 1\n    end\n    if\
    \ n == 3 then\n        return 2\n    end\n    return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5y_id1q_.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp5y_id1q_.lua:24: in upvalue 'fib4'\n\
    \t/tmp/tmp5y_id1q_.lua:24: in upvalue 'fib4'\n\t/tmp/tmp5y_id1q_.lua:24: in upvalue\
    \ 'fib4'\n\t/tmp/tmp5y_id1q_.lua:24: in upvalue 'fib4'\n\t/tmp/tmp5y_id1q_.lua:24:\
    \ in upvalue 'fib4'\n\t/tmp/tmp5y_id1q_.lua:24: in upvalue 'fib4'\n\t/tmp/tmp5y_id1q_.lua:24:\
    \ in upvalue 'fib4'\n\t/tmp/tmp5y_id1q_.lua:24: in upvalue 'fib4'\n\t/tmp/tmp5y_id1q_.lua:24:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmp5y_id1q_.lua:24: in local 'candidate'\n\t\
    /tmp/tmp5y_id1q_.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.320\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n   if n <= 0 then\n     \
    \ return 0\n   else\n      return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25olmzj4.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp25olmzj4.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  return fib4[n] or fib4[n]\
    \ = fib4[n-1] + fib4[n-2] + fib4[n-3] + fib4[n-4];\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl_pb5pf2.lua:15: 'end' expected (to close 'function' at line\
    \ 14) near '='\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    error(\"\
    fib4: number must be positive\")\n  elseif n == 4 then\n    return 0\n  elseif\
    \ n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  elseif n ==\
    \ 2 then\n    return 2\n  elseif n > 2 then\n    return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2mz0kj9_.lua:16:\
    \ fib4: number must be positive\nstack traceback:\n\t/tmp/tmp2mz0kj9_.lua:16:\
    \ in upvalue 'fib4'\n\t/tmp/tmp2mz0kj9_.lua:26: in upvalue 'fib4'\n\t/tmp/tmp2mz0kj9_.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmp2mz0kj9_.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n<0 then\n    return\
    \ 0\n  elseif n==0 then\n    return 1\n  elseif n==1 then\n    return 0\n  elseif\
    \ n==2 then\n    return 2\n  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4w0kit1t.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmp4w0kit1t.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 1 then\n    return\
    \ n\n  end\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n  \
    \  lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n \
    \   lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qwiah2q.lua:24:\
    \ expected: 4, actual: -6\nstack traceback:\n\t/tmp/tmp5qwiah2q.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    if\
    \ n == 2 then\n        return 2\n    end\n    local a = fib4(n - 1)\n    local\
    \ b = fib4(n - 2)\n    return a + b + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k3c8vb7.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp1k3c8vb7.lua:24: in upvalue 'fib4'\n\
    \t/tmp/tmp1k3c8vb7.lua:24: in upvalue 'fib4'\n\t/tmp/tmp1k3c8vb7.lua:24: in upvalue\
    \ 'fib4'\n\t/tmp/tmp1k3c8vb7.lua:24: in upvalue 'fib4'\n\t/tmp/tmp1k3c8vb7.lua:24:\
    \ in upvalue 'fib4'\n\t/tmp/tmp1k3c8vb7.lua:24: in upvalue 'fib4'\n\t/tmp/tmp1k3c8vb7.lua:24:\
    \ in upvalue 'fib4'\n\t/tmp/tmp1k3c8vb7.lua:24: in upvalue 'fib4'\n\t/tmp/tmp1k3c8vb7.lua:24:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmp1k3c8vb7.lua:24: in local 'candidate'\n\t\
    /tmp/tmp1k3c8vb7.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.320\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local p = 0\n    local\
    \ q = 0\n    local r = 1\n    local s = 2\n    while p + q < n do\n        p =\
    \ r\n        q = s\n        r = r + p + q\n        s = s\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1w_k9w_i.lua:31:\
    \ expected: 4, actual: 10\nstack traceback:\n\t/tmp/tmp1w_k9w_i.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5m4fc33.lua:25:\
    \ expected: 4, actual: -6\nstack traceback:\n\t/tmp/tmpq5m4fc33.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 4 then return n\
    \ end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyigguvv4.lua:22:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpyigguvv4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 0 or n > 4294967294\
    \ then\n        return nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2kwqe8t5.lua:28: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 0 then\n     \
    \   return 0\n    elseif n == 0 then\n        return 0\n    else\n        return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbsfq4g_.lua:27:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpbbsfq4g_.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n==0 then\n    return\
    \ 0\n  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmbcoyn8r.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpmbcoyn8r.lua:18: in upvalue 'fib4'\n\
    \t/tmp/tmpmbcoyn8r.lua:18: in upvalue 'fib4'\n\t/tmp/tmpmbcoyn8r.lua:18: in upvalue\
    \ 'fib4'\n\t/tmp/tmpmbcoyn8r.lua:18: in upvalue 'fib4'\n\t/tmp/tmpmbcoyn8r.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmpmbcoyn8r.lua:18: in upvalue 'fib4'\n\t/tmp/tmpmbcoyn8r.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmpmbcoyn8r.lua:18: in upvalue 'fib4'\n\t/tmp/tmpmbcoyn8r.lua:18:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpmbcoyn8r.lua:18: in local 'candidate'\n\t\
    /tmp/tmpmbcoyn8r.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.310\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 3 then return n\n\
    \  elseif n == 0 then return 0\n  elseif n == 1 then return 1\n  elseif n == 2\
    \ then return 2\n  elseif n == 3 then return 0\n  elseif n == 4 then return 0\n\
    \  elseif n == 5 then return 2\n  elseif n == 6 then return 3\n  elseif n == 7\
    \ then return 1\n  elseif n == 8 then return 0\n  elseif n == 9 then return 0\n\
    \  elseif n == 10 then return 0\n  elseif n == 11 then return 0\n  elseif n ==\
    \ 12 then return 0\n  elseif n == 13 then return 0\n  elseif n == 14 then return\
    \ 0\n  elseif n == 15 then return 0\n  elseif n == 16 then return 0\n  elseif\
    \ n == 17 then return 0\n  elseif n == 18 then return 0\n  elseif n == 19 then\
    \ return 0\n  elseif n == 20 then return 0\n  elseif n == 21 then return 0\n \
    \ elseif n == 22 then return 0\n  elseif n == 23 then return 0\n  elseif n ==\
    \ 24 then return 0\n  elseif n == 25 then return 0\n  elseif n == 26 then return\
    \ 0\n  elseif n == 27 then return 0\n  elseif n == 28 then return 0\n  elseif\
    \ n == 29 then return 0\n  elseif n == 30 then return 0\n  elseif n == 31 then\
    \ return 0\n  elseif n == 32 then return 0\n  elseif n == 33 then return 0\n \
    \ elseif n == 34 then return 0\n  elseif n == 35 then return 0\n  elseif n ==\
    \ 36 then return 0\n  elseif n == 37 then return 0\n  elseif n == 38 then return\
    \ 0\n  elseif n == 39 then return 0\n  elseif n == 40 then return 0\n  elseif\
    \ n == 41 then return 0\n  elseif n == 42 then return 0\n  elseif n == 43 then\
    \ return 0\n  elseif n == 44 then return 0\n  elseif n == 45 then return 0\n \
    \ elseif n == 46 then return 0\n  elseif n == 47 then return 0\n  elseif n ==\
    \ 48 then return 0\n  elseif n == 49 then return 0\n  elseif n == 40 then return\
    \ 0\n  elseif n == 41 then return 0\n  elseif n == 42 then return 0\n  elseif\
    \ n == 43 then return 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpev2r40i9.lua:70: 'end' expected (to close 'if' at line 15)\
    \ near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 4 then\n    return\
    \ 0\n  elseif n < 4 then\n    return 0\n  elseif n < 8 then\n    return 2\n  elseif\
    \ n < 12 then\n    return 0\n  else\n    return fib4(n - 4) + fib4(n - 3) + fib4(n\
    \ - 2) + fib4(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppkd1zyp5.lua:31:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmppkd1zyp5.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local x = {}\n    local\
    \ i = 0\n    while i < n do\n        x[i] = i\n        i = i + i + i + i + 1\n\
    \    end\n    return x[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4jkvfmub.lua:27:\
    \ expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmp4jkvfmub.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n <= 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    elseif n == 4\
    \ then\n        return 4\n    elseif n == 5 then\n        return 8\n    elseif\
    \ n == 6 then\n        return 14\n    else\n        return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7rinmd9.lua:37:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpr7rinmd9.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n == 0 then\n\t\treturn\
    \ 0\n\telseif n == 1 then\n\t\treturn 0\n\telse\n\t\treturn fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n\tend\nend\n</cell>\n<text>\nReverse a string\nWrite\
    \ a function which takes in a string and returns the string in reverse order.\
    \  Do not use string concatenation.  Use the reverse function in string.  For\
    \ example:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaczgpfpo.lua:23: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n < 0 then\n\t\treturn\
    \ 0\n\telseif n < 1 then\n\t\treturn n\n\telse\n\t\treturn fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4) + fib4(n-5)\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1mskmujq.lua:27:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp1mskmujq.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    error(\"\
    fib4 needs a positive integer as parameter\")\n  end\n  if n == 0 or n == 1 then\n\
    \    return 0\n  end\n  if n == 2 or n == 3 then\n    return 2\n  end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgscqy5s.lua:30:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpzgscqy5s.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tlocal fib_n = {}\n\tfib_n[0]\
    \ = 0\n\tfib_n[1] = 0\n\tfib_n[2] = 2\n\tfib_n[3] = 0\n\tlocal k = 1\n\tlocal\
    \ s = fib_n[k] + fib_n[k-1] + fib_n[k-2] + fib_n[k-3]\n\twhile n >= k do\n\t\t\
    fib_n[k] = s\n\t\tk = k + 4\n\t\ts = fib_n[k] + fib_n[k-1] + fib_n[k-2] + fib_n[k-3]\n\
    \tend\n\treturn fib_n[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph8ho1f1i.lua:21:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmph8ho1f1i.lua:21: in local 'candidate'\n\t/tmp/tmph8ho1f1i.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 or n > 4 then\
    \ return nil end\n  if n == 0 or n == 1 then\n    return 0\n  end\n  if n == 2\
    \ then\n    return 1\n  end\n  if n == 3 then\n    return 1\n  end\n  return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9w0jd2j.lua:31:\
    \ expected: 4, actual: nil\nstack traceback:\n\t/tmp/tmpo9w0jd2j.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 1 then return\
    \ 0 end\n    if n < 3 then return n-1 end\n    return fib4(n - 4) + fib4(n - 3)\
    \ + fib4(n - 2) + fib4(n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40yjplh1.lua:24:\
    \ expected: 28, actual: 29\nstack traceback:\n\t/tmp/tmp40yjplh1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then\n    return\
    \ 0\n  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 2\n\
    \  elseif n == 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpculj2dd3.lua:31:\
    \ expected: 4, actual: 6\nstack traceback:\n\t/tmp/tmpculj2dd3.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tlocal function fib4_internal(n)\n\
    \t\tif n < 0 then return -1 else return fib4_internal(n - 1) + fib4_internal(n\
    \ - 2) + fib4_internal(n - 3) + fib4_internal(n - 4) end\n\tend\n\treturn fib4_internal(n)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wdyibe4.lua:24:\
    \ expected: 4, actual: -94\nstack traceback:\n\t/tmp/tmp4wdyibe4.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 2 then return n\
    \ end\n  local function fib4(n,a,b,c,d)\n    return fib4(n-1,a+b,a+c,a+d,b+c+d)\n\
    \  end\n  return fib4(n,0,0,0,0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n < 0 then\n\t\treturn\
    \ nil\n\telse\n\t\treturn fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzvfj9gk0.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpzvfj9gk0.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmpzvfj9gk0.lua:18: in upvalue 'fib4'\n\t/tmp/tmpzvfj9gk0.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmpzvfj9gk0.lua:18: in upvalue 'fib4'\n\t/tmp/tmpzvfj9gk0.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmpzvfj9gk0.lua:18: in local 'candidate'\n\t/tmp/tmpzvfj9gk0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  assert(n > 0)\n  if n ==\
    \ 0 or n == 1 then\n    return n\n  end\n  if n < 0 then\n    print(\"fib4 doesn't\
    \ support negative numbers\")\n    return 0\n  end\n  local fib4 = 0\n  for i\
    \ = 1, n do\n    fib4 = fib4 + fib(n - i)\n  end\n  return fib4\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq8f_rlyr.lua:25:\
    \ attempt to call a nil value (global 'fib')\nstack traceback:\n\t/tmp/tmpq8f_rlyr.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpq8f_rlyr.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then\n    return\
    \ 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsh6zihk.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmptsh6zihk.lua:18: in upvalue 'fib4'\n\
    \t/tmp/tmptsh6zihk.lua:18: in upvalue 'fib4'\n\t/tmp/tmptsh6zihk.lua:18: in upvalue\
    \ 'fib4'\n\t/tmp/tmptsh6zihk.lua:18: in upvalue 'fib4'\n\t/tmp/tmptsh6zihk.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmptsh6zihk.lua:18: in upvalue 'fib4'\n\t/tmp/tmptsh6zihk.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmptsh6zihk.lua:18: in upvalue 'fib4'\n\t/tmp/tmptsh6zihk.lua:18:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmptsh6zihk.lua:18: in local 'candidate'\n\t\
    /tmp/tmptsh6zihk.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.330\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n==0 then\n    local\
    \ fib4 = 0\n  else\n    local fib4 = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\n  return fib4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpub1j3t68.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpub1j3t68.lua:18: in upvalue 'fib4'\n\
    \t/tmp/tmpub1j3t68.lua:18: in upvalue 'fib4'\n\t/tmp/tmpub1j3t68.lua:18: in upvalue\
    \ 'fib4'\n\t/tmp/tmpub1j3t68.lua:18: in upvalue 'fib4'\n\t/tmp/tmpub1j3t68.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmpub1j3t68.lua:18: in upvalue 'fib4'\n\t/tmp/tmpub1j3t68.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmpub1j3t68.lua:18: in upvalue 'fib4'\n\t/tmp/tmpub1j3t68.lua:18:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpub1j3t68.lua:18: in local 'candidate'\n\t\
    /tmp/tmpub1j3t68.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.320\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return 0\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9aae2ug.lua:24:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpy9aae2ug.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 1 end\n  return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1zapjksi.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp1zapjksi.lua:17: in upvalue 'fib4'\n\
    \t/tmp/tmp1zapjksi.lua:17: in upvalue 'fib4'\n\t/tmp/tmp1zapjksi.lua:17: in upvalue\
    \ 'fib4'\n\t/tmp/tmp1zapjksi.lua:17: in upvalue 'fib4'\n\t/tmp/tmp1zapjksi.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmp1zapjksi.lua:17: in upvalue 'fib4'\n\t/tmp/tmp1zapjksi.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmp1zapjksi.lua:17: in upvalue 'fib4'\n\t/tmp/tmp1zapjksi.lua:17:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmp1zapjksi.lua:17: in local 'candidate'\n\t\
    /tmp/tmp1zapjksi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.330\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n==0 then\n    return\
    \ 0\n  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ekobbgj.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp1ekobbgj.lua:18: in upvalue 'fib4'\n\
    \t/tmp/tmp1ekobbgj.lua:18: in upvalue 'fib4'\n\t/tmp/tmp1ekobbgj.lua:18: in upvalue\
    \ 'fib4'\n\t/tmp/tmp1ekobbgj.lua:18: in upvalue 'fib4'\n\t/tmp/tmp1ekobbgj.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmp1ekobbgj.lua:18: in upvalue 'fib4'\n\t/tmp/tmp1ekobbgj.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmp1ekobbgj.lua:18: in upvalue 'fib4'\n\t/tmp/tmp1ekobbgj.lua:18:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmp1ekobbgj.lua:18: in local 'candidate'\n\t\
    /tmp/tmp1ekobbgj.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.330\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  -- Base cases.\n  if n\
    \ < 4 then return n end\n  -- Recursion.\n  return fib4(n - 1) + fib4(n - 2) +\
    \ fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5045zluk.lua:24:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp5045zluk.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then\n    error(\"\
    fib4 needs a number greater or equal to 1\")\n  end\n  if n < 4 then\n    return\
    \ 0\n  end\n  local fibo = {}\n  fibo.[1] = 0\n  fibo.[2] = fibo.[1] + fibo.[2]\n\
    \  fibo.[3] = fibo.[2] + fibo.[3]\n  fibo.[4] = fibo.[3] + fibo.[4]\n  for i =\
    \ 5, 1, -1 do\n    local k = math.floor((i * (i - 1)) / 2)\n    local tmp = fibo.[k]\
    \ + fibo.[k + 1]\n    fibo.[k] = tmp\n  end\n  return fibo[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps_bxqo4d.lua:22: <name> expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 0 then return 0\
    \ end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8dxefwa.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpd8dxefwa.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n < 0 then\n\t\treturn\
    \ 0\n\telseif n < 1 then\n\t\treturn 1\n\telseif n < 2 then\n\t\treturn n\n\t\
    elseif n < 3 then\n\t\treturn fib4(n-1) + fib4(n-2)\n\telseif n < 5 then\n\t\t\
    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\telse\n\t\treturn fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4) + fib4(n-5)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08l03vul.lua:33:\
    \ expected: 4, actual: 16\nstack traceback:\n\t/tmp/tmp08l03vul.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local fib4 = { [1] =\
    \ 0 }\n    for i = 1, n do\n        fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i\
    \ - 3] + fib4[i - 4]\n    end\n    return fib4[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpubof24px.lua:17:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpubof24px.lua:17: in local 'candidate'\n\t/tmp/tmpubof24px.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local fib4sum = 0\n  if\
    \ n < 0 then\n    return nil\n  elseif n <= 1 then\n    return n\n  else\n   \
    \ local fib4count = 4\n    while fib4count > 0 do\n      fib4sum = fib4sum + fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n      fib4count = fib4count - 1\n    end\n\
    \    return fib4sum\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocpbrqig.lua:23:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpocpbrqig.lua:23:\
    \ in upvalue 'fib4'\n\t/tmp/tmpocpbrqig.lua:23: in upvalue 'fib4'\n\t/tmp/tmpocpbrqig.lua:23:\
    \ in upvalue 'fib4'\n\t/tmp/tmpocpbrqig.lua:23: in local 'candidate'\n\t/tmp/tmpocpbrqig.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  -- Your code here\n  assert(n>0)\n\
    \  if n==1 then\n    return 0\n  elseif n==2 then\n    return 1\n  elseif n==3\
    \ then\n    return 2\n  elseif n==4 then\n    return 0\n  else\n    return fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgz4m6lxm.lua:33:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpgz4m6lxm.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then\n    return\
    \ 0\n  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 2\n\
    \  elseif n == 3 then\n    return 0\n  elseif n == 4 then\n    return 1\n  elseif\
    \ n == 5 then\n    return 2\n  elseif n == 6 then\n    return 3\n  elseif n ==\
    \ 7 then\n    return 4\n  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwfbe9t_.lua:39:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmprwfbe9t_.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 0 or n > 4294967296\
    \ then\n        error('fib4: fib4 parameter must be in range of 0 - 4294967296')\n\
    \    end\n    local fib4 = 0\n    if n == 0 then fib4 = 0 else\n        fib4 =\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    end\n    return fib4\n\
    end\n</cell>\n<text>\nProblem 3.2 Write a function called fib5 that computes the\
    \ fibonacci number of the given integer.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfw_quax9.lua:24: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n ~= nil then\n    if\
    \ n < 0 then n = 4  end -- 4\n    if n < 1 then return 0 end  -- 0\n    if n <\
    \ 2 then return 1 end  -- 1\n    if n < 3 then return 2 end  -- 2\n    return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)  -- fib4(n)\n  else\n\
    \    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp24k61vr3.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp24k61vr3.lua:20: in upvalue 'fib4'\n\
    \t/tmp/tmp24k61vr3.lua:20: in upvalue 'fib4'\n\t/tmp/tmp24k61vr3.lua:20: in upvalue\
    \ 'fib4'\n\t/tmp/tmp24k61vr3.lua:20: in upvalue 'fib4'\n\t/tmp/tmp24k61vr3.lua:20:\
    \ in upvalue 'fib4'\n\t/tmp/tmp24k61vr3.lua:20: in upvalue 'fib4'\n\t/tmp/tmp24k61vr3.lua:20:\
    \ in upvalue 'fib4'\n\t/tmp/tmp24k61vr3.lua:20: in upvalue 'fib4'\n\t/tmp/tmp24k61vr3.lua:20:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmp24k61vr3.lua:20: in local 'candidate'\n\t\
    /tmp/tmp24k61vr3.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.340\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local fib4\n  if n < 2\
    \ then return 1 end\n  if n < 3 then return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ end\n  fib4 = fib4\n  local tmp = fib4(n-1) + fib4(n-2) + fib4(n-3)\n  fib4\
    \ = function(n) return tmp end\n  return fib4(n) + fib4(n-2) + fib4(n-3)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxn2pheoa.lua:19:\
    \ attempt to call a nil value (local 'fib4')\nstack traceback:\n\t/tmp/tmpxn2pheoa.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpxn2pheoa.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 0 then return\
    \ nil end\n    if n < 4 then return n end\n    local a = fib4(n-4)\n    local\
    \ b = fib4(n-3)\n    local c = fib4(n-2)\n    local d = fib4(n-1)\n    return\
    \ a + b + c + d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5kr_jlpg.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp5kr_jlpg.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local fib4 = 0\n    local\
    \ i = 1\n    while i <= n do\n        fib4 = fib4 + 1\n        i = i + 1\n   \
    \ end\n    return fib4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfh3cbv6d.lua:27:\
    \ expected: 4, actual: 5\nstack traceback:\n\t/tmp/tmpfh3cbv6d.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 4 then\n    return\
    \ n\n  elseif n < 7 then\n    return n\n  elseif n < 11 then\n    return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  else\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4) + fib4(n-5)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjd2zn3m3.lua:29:\
    \ expected: 4, actual: 5\nstack traceback:\n\t/tmp/tmpjd2zn3m3.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then\n    local\
    \ res\n    res,rem = 0,0\n    return res\n  elseif n == 1 then\n    local res\n\
    \    res,rem = 0,1\n    return res\n  elseif n == 2 then\n    local res\n    res,rem\
    \ = 0,2\n    return res\n  elseif n == 3 then\n    local res\n    res,rem = 0,3\n\
    \    return res\n  elseif n == 4 then\n    local res\n    res,rem = 1,4\n    return\
    \ res\n  else\n    local sum\n    sum,rem = sum + rem,n + rem\n    return fib4(sum)\
    \ + fib4(rem)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz21225s2.lua:37:\
    \ attempt to perform arithmetic on a nil value (local 'sum')\nstack traceback:\n\
    \t/tmp/tmpz21225s2.lua:37: in local 'candidate'\n\t/tmp/tmpz21225s2.lua:45: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n <= 0 then\n    \
    \    return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxgj2til0.lua:28: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 1 end\n  return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmet9f5f4.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpmet9f5f4.lua:17: in upvalue 'fib4'\n\
    \t/tmp/tmpmet9f5f4.lua:17: in upvalue 'fib4'\n\t/tmp/tmpmet9f5f4.lua:17: in upvalue\
    \ 'fib4'\n\t/tmp/tmpmet9f5f4.lua:17: in upvalue 'fib4'\n\t/tmp/tmpmet9f5f4.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpmet9f5f4.lua:17: in upvalue 'fib4'\n\t/tmp/tmpmet9f5f4.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpmet9f5f4.lua:17: in upvalue 'fib4'\n\t/tmp/tmpmet9f5f4.lua:17:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpmet9f5f4.lua:17: in local 'candidate'\n\t\
    /tmp/tmpmet9f5f4.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.330\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local fib, fib4 = 0\n \
    \ while n > 0 do\n    fib4, fib = fib + fib4, fib\n    n = n - 1\n  end\n  return\
    \ fib4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw8rv72ki.lua:17:\
    \ attempt to perform arithmetic on a nil value (local 'fib4')\nstack traceback:\n\
    \t/tmp/tmpw8rv72ki.lua:17: in local 'candidate'\n\t/tmp/tmpw8rv72ki.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return 1\
    \ end\n  local n1 = n - 1\n  return fib4(n1) + fib4(n1 - 1) + fib4(n1 - 2) + fib4(n1\
    \ - 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3awysnx.lua:23:\
    \ expected: 4, actual: 49\nstack traceback:\n\t/tmp/tmpv3awysnx.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 4 then return n\
    \ else return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1) end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8hqo9ys.lua:21:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpa8hqo9ys.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return 0\
    \ end\n  if n < 1 then return 1 end\n  if n < 2 then return 2 end\n  return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxt5746y.lua:24:\
    \ expected: 4, actual: 23\nstack traceback:\n\t/tmp/tmppxt5746y.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    error(\"\
    fib4() arg out of range\")\n  end\n  local fib = 0\n  for i = 1, n do\n    fib\
    \ = fib + fib + (i-1)\n  end\n  return fib\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5h1vfijp.lua:28:\
    \ expected: 4, actual: 26\nstack traceback:\n\t/tmp/tmp5h1vfijp.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local nfib4 = fib_cache[n]\n\
    \  if nfib4 == nil then\n    nfib4 = fib_cache[n] = fib(n-1) + fib(n-2) + fib(n-3)\
    \ + fib(n-4)\n  else\n    local k = (n-2)\n    local fib4 = nfib4[k]\n    if fib4\
    \ == nil then\n      fib4 = nfib4[k] = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\n\
    \    end\n  end\n  return fib4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0u05uvxg.lua:17: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  assert(n >= 0 and n <=\
    \ 4, \"fib4 argument must be between 0 and 4\")\n  local fib4 = 0\n  for i = 1,\
    \ n do\n    fib4 = fib4 + i\n  end\n  return fib4\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaiqu4g5a.lua:15:\
    \ fib4 argument must be between 0 and 4\nstack traceback:\n\t/tmp/tmpaiqu4g5a.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpaiqu4g5a.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 1 end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj4d57_c_.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpj4d57_c_.lua:17: in upvalue 'fib4'\n\
    \t/tmp/tmpj4d57_c_.lua:17: in upvalue 'fib4'\n\t/tmp/tmpj4d57_c_.lua:17: in upvalue\
    \ 'fib4'\n\t/tmp/tmpj4d57_c_.lua:17: in upvalue 'fib4'\n\t/tmp/tmpj4d57_c_.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpj4d57_c_.lua:17: in upvalue 'fib4'\n\t/tmp/tmpj4d57_c_.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpj4d57_c_.lua:17: in upvalue 'fib4'\n\t/tmp/tmpj4d57_c_.lua:17:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpj4d57_c_.lua:17: in local 'candidate'\n\t\
    /tmp/tmpj4d57_c_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.330\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 0 then\n    return\
    \ 0\n  else\n    local fib4num = fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n\
    \ - 1)\n    return fib4num\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbqsbgfc.lua:26:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpcbqsbgfc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    elseif n == 4\
    \ then\n        return 1\n    else\n        return fib4(n - 1) + fib4(n - 2) +\
    \ fib4(n - 3) + fib4(n - 4)\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzjrdiib.lua:34:\
    \ expected: 28, actual: 24\nstack traceback:\n\t/tmp/tmptzjrdiib.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n == 0 then\n\t\treturn\
    \ 0\n\telseif n == 1 then\n\t\treturn 1\n\telseif n == 2 then\n\t\treturn 2\n\t\
    elseif n == 3 then\n\t\treturn 0\n\telseif n == 4 then\n\t\treturn 0\n\telse\n\
    \t\treturn fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgw7hs1l_.lua:33:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpgw7hs1l_.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tlocal fib3 = {0, 0, 0,\
    \ 0, 0}\n\tlocal fib2 = {0, 0, 0, 0, 0}\n\tlocal fib1 = {0, 0, 0, 0, 0}\n\tfor\
    \ i = 1, n do\n\t\tfib3[i] = fib2[i%4] + fib1[i%4]\n\t\tfib2[i%4] = fib1[i%4]\
    \ = fib3[i]\n\t\tfib1[i%4] = fib3[i%4] = fib2[i]\n\tend\n\treturn fib3[n]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnqa7fk7u.lua:20: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n <= 0 then\n\t\treturn\
    \ 0\n\telseif n == 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn 2\n\t\
    elseif n == 3 then\n\t\treturn 0\n\telse\n\t\treturn fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return end\n\
    \  if n < 3 then return n\n  if n < 5 then return fib4(n - 1) + fib4(n - 2) +\
    \ fib4(n - 3) + fib4(n - 4)\n  else return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4) + fib4(n - 5)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpow7cbgc_.lua:17: 'end' expected (to close 'if' at line 16)\
    \ near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 4 then return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4) end\n  return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4) + fib4(n-5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd0ystrwf.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpd0ystrwf.lua:15: in upvalue 'fib4'\n\
    \t/tmp/tmpd0ystrwf.lua:15: in upvalue 'fib4'\n\t/tmp/tmpd0ystrwf.lua:15: in upvalue\
    \ 'fib4'\n\t/tmp/tmpd0ystrwf.lua:15: in upvalue 'fib4'\n\t/tmp/tmpd0ystrwf.lua:15:\
    \ in upvalue 'fib4'\n\t/tmp/tmpd0ystrwf.lua:15: in upvalue 'fib4'\n\t/tmp/tmpd0ystrwf.lua:15:\
    \ in upvalue 'fib4'\n\t/tmp/tmpd0ystrwf.lua:15: in upvalue 'fib4'\n\t/tmp/tmpd0ystrwf.lua:15:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpd0ystrwf.lua:16: in local 'candidate'\n\t\
    /tmp/tmpd0ystrwf.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.340\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local fib4 = 1\n    for\
    \ i=3,n,1 do\n        fib4 = fib4 + fib4\n    end\n    return fib4\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n  \
    \  lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n \
    \   lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jdy0h0y.lua:25:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp0jdy0h0y.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n\
    \        return 2\n    elseif n == 3 then\n        return 0\n    elseif n == 4\
    \ then\n        return 1\n    else\n        return fib4(n - 1) + fib4(n - 2) +\
    \ fib4(n - 3) + fib4(n - 4)\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ejuqb_z.lua:34:\
    \ expected: 28, actual: 24\nstack traceback:\n\t/tmp/tmp5ejuqb_z.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 0 then return\
    \ -1 end\n    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n \
    \   return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgc1m4vhw.lua:24:\
    \ expected: 4, actual: -2\nstack traceback:\n\t/tmp/tmpgc1m4vhw.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local fib4, i, ni = fib4,\
    \ 1, n\n    repeat\n        i, ni = fib4 + 1, ni-1\n    until ni == 0\n    return\
    \ fib4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2c9i5ens.lua:17:\
    \ attempt to perform arithmetic on a function value (local 'fib4')\nstack traceback:\n\
    \t/tmp/tmp2c9i5ens.lua:17: in local 'candidate'\n\t/tmp/tmp2c9i5ens.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local fib4 = 0\n  while\
    \ fib4 < n do\n    fib4 = fib4 + fib4\n  end\n  return fib4\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n ~= 0 then\n    return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\n  return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcv0j6mu8.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpcv0j6mu8.lua:16: in upvalue 'fib4'\n\
    \t/tmp/tmpcv0j6mu8.lua:16: in upvalue 'fib4'\n\t/tmp/tmpcv0j6mu8.lua:16: in upvalue\
    \ 'fib4'\n\t/tmp/tmpcv0j6mu8.lua:16: in upvalue 'fib4'\n\t/tmp/tmpcv0j6mu8.lua:16:\
    \ in upvalue 'fib4'\n\t/tmp/tmpcv0j6mu8.lua:16: in upvalue 'fib4'\n\t/tmp/tmpcv0j6mu8.lua:16:\
    \ in upvalue 'fib4'\n\t/tmp/tmpcv0j6mu8.lua:16: in upvalue 'fib4'\n\t/tmp/tmpcv0j6mu8.lua:16:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpcv0j6mu8.lua:16: in local 'candidate'\n\t\
    /tmp/tmpcv0j6mu8.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.320\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local f4 = {}\n    if\
    \ n < 0 then return nil end\n    if n == 0 then return 0 end\n    if n == 1 then\
    \ return 1 end\n    if n == 2 then return 2 end\n    table.insert(f4, fib4(n -\
    \ 3) + fib4(n - 2) + fib4(n - 1) + fib4(n - 4))\n    return f4[#f4 + 1]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3w0ucs8k.lua:20:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp3w0ucs8k.lua:20:\
    \ in upvalue 'fib4'\n\t/tmp/tmp3w0ucs8k.lua:20: in local 'candidate'\n\t/tmp/tmp3w0ucs8k.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 2 then\n    return\
    \ n\n  elseif n == 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5q0tinc_.lua:27:\
    \ expected: 4, actual: 6\nstack traceback:\n\t/tmp/tmp5q0tinc_.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n <= 0 then\n\t\treturn\
    \ 0\n\telseif n == 1 then\n\t\treturn 0\n\telseif n == 2 then\n\t\treturn 2\n\t\
    elseif n == 3 then\n\t\treturn 0\n\telse\n\t\treturn fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    error(\"\
    fib4 can only compute positive numbers\")\n  end\n  if n == 0 then\n    return\
    \ 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzs4o7pn5.lua:16:\
    \ fib4 can only compute positive numbers\nstack traceback:\n\t/tmp/tmpzs4o7pn5.lua:16:\
    \ in upvalue 'fib4'\n\t/tmp/tmpzs4o7pn5.lua:21: in upvalue 'fib4'\n\t/tmp/tmpzs4o7pn5.lua:21:\
    \ in upvalue 'fib4'\n\t/tmp/tmpzs4o7pn5.lua:21: in upvalue 'fib4'\n\t/tmp/tmpzs4o7pn5.lua:21:\
    \ in upvalue 'fib4'\n\t/tmp/tmpzs4o7pn5.lua:21: in local 'candidate'\n\t/tmp/tmpzs4o7pn5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n==0 then\n\t\treturn\
    \ 0\n\telseif n==1 then\n\t\treturn 1\n\telse\n\t\treturn fib4(3) +fib4(2) +fib4(1)\
    \ +fib4(0)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt6peubds.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpt6peubds.lua:20: in upvalue 'fib4'\n\
    \t/tmp/tmpt6peubds.lua:20: in upvalue 'fib4'\n\t/tmp/tmpt6peubds.lua:20: in upvalue\
    \ 'fib4'\n\t/tmp/tmpt6peubds.lua:20: in upvalue 'fib4'\n\t/tmp/tmpt6peubds.lua:20:\
    \ in upvalue 'fib4'\n\t/tmp/tmpt6peubds.lua:20: in upvalue 'fib4'\n\t/tmp/tmpt6peubds.lua:20:\
    \ in upvalue 'fib4'\n\t/tmp/tmpt6peubds.lua:20: in upvalue 'fib4'\n\t/tmp/tmpt6peubds.lua:20:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpt6peubds.lua:20: in local 'candidate'\n\t\
    /tmp/tmpt6peubds.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.340\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  -- Don't forget to check\
    \ your base case!\n  if n < 1 then return 0 end\n  -- Use a loop to do fibonacci\n\
    \  -- fib4 = fibonacci + fibonacci\n  -- fib4(0)\n  --   fibonacci = 0\n  -- \
    \  fib4 = fib4 + fib4\n  -- fib4(1)\n  --   fibonacci = 1\n  --   fib4 = fib4\
    \ + fib4\n  -- fib4(2)\n  --   fibonacci = 2\n  --   fib4 = fib4 + fib4\n  --\
    \ fib4(3)\n  --   fibonacci = 3\n  --   fib4 = fib4 + fib4\n  -- fib4(4)\n  --\
    \   fibonacci = 4\n  --   fib4 = fib4 + fib4\n  -- fib4(5)\n  --   fibonacci =\
    \ 5\n  --   fib4 = fib4 + fib4\n  -- fib4(6)\n  --   fibonacci = 6\n  --   fib4\
    \ = fib4 + fib4\n  -- fib4(7)\n  --   fibonacci = 7\n  --   fib4 = fib4 + fib4\n\
    \  -- fib4(8)\n  --   fibonacci = 8\n  --   fib4 = fib4 + fib4\n  -- fib4(9)\n\
    \  --   fibonacci = 9\n  --   fib4 = fib4 + fib4\n  -- fib4(10)\n  --   fibonacci\
    \ = 10\n  --   fib4 = fib4 + fib4\n  -- fib4(11)\n  --   fibonacci = 11\n  --\
    \   fib4 = fib4 + fib4\n  -- fib4(12)\n  --   fibonacci = 12\n  --   fib4 = fib4\
    \ + fib4\n  -- fib4(13)\n  --   fibonacci = 13\n  --   fib4 = fib4 + fib4\n  --\
    \ fib4(14)\n  --   fibonacci = 14\n  --   fib4 = fib4 + fib4\n  -- fib4(15)\n\
    \  --   fibonacci = 15\n  --   fib4 = fib4 + fib4\n  -- fib4(16)\n  --   fibonacci\
    \ = 16\n  --   fib4 = fib4 + fib4\n  -- fib4(17)\n  --   fibonacci = 17\n  --\
    \   fib4 = fib4 + fib4\n  -- fib4(18)\n  --   fibonacci = 18\n  --   fib4 = fib4\
    \ + fib4\n  -- fib4(19)\n  --   fibonacci = 19\n  --   fib4 = fib4 + fib4\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps6leuxfc.lua:89: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  end\n  if n < 4 then\n    return n\n  end\n  return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz09lm1oj.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpz09lm1oj.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local fib4 = 0\n    if\
    \ n == 0 then return 0 end\n    if n == 1 then return 0 end\n    if n == 2 then\
    \ return 2 end\n    fib4 = fib4 + fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n    return fib4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfgsjs1fc.lua:19:\
    \ attempt to call a number value (local 'fib4')\nstack traceback:\n\t/tmp/tmpfgsjs1fc.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpfgsjs1fc.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  assert(n > 0, \"fib4 requires\
    \ n >= 0\")\n  local fib4 = 1\n  while n ~= 0 do\n    fib4 = fib4 + fib4\n   \
    \ n = n - 1\n  end\n  return fib4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zs806wl.lua:27:\
    \ expected: 4, actual: 32\nstack traceback:\n\t/tmp/tmp4zs806wl.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n <= 4 then\n    \
    \    return n\n    else\n        return fib4(n - 4) + fib4(n - 3) + fib4(n - 2)\
    \ + fib4(n - 1)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fyw5vvt.lua:25:\
    \ expected: 4, actual: 10\nstack traceback:\n\t/tmp/tmp0fyw5vvt.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 0 then return\
    \ 0 end\n    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n  \
    \  if n == 2 then return 2 end\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy88exnhg.lua:25:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpy88exnhg.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 1 then\n    return\
    \ 0\n  elseif n == 2 then\n    return 2\n  elseif n == 3 then\n    return 0\n\
    \  elseif n == 4 then\n    return 2\n  elseif n == 5 then\n    return 4\n  elseif\
    \ n == 6 then\n    return 8\n  elseif n == 7 then\n    return 14\n  else\n   \
    \ return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 1 then\n    return\
    \ 0\n  elseif n <= 3 then\n    return 1\n  elseif n <= 5 then\n    return 2\n\
    \  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpelruq1ep.lua:29:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpelruq1ep.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then\n    fib4[0]\n\
    \  elseif n < 4 then\n    fib4[1]\n  else\n    fib4[n]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5_xg5uy6.lua:17: syntax error near 'elseif'\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local fib={}\n  for i=0,n,1\
    \ do\n    fib[i]=n\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiwcao5z4.lua:25:\
    \ expected: 4, actual: 5\nstack traceback:\n\t/tmp/tmpiwcao5z4.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then\n    local\
    \ n = 0\n  elseif n < 0 then\n    error(\"fib4 index -1 out of bounds\")\n  elseif\
    \ n == 1 then\n    local n = 0\n  else\n    local c = math.floor((n-1) / 4)\n\
    \    local t = ((n-1) - c*4)\n    local m = ((n-1) - (c*4))\n    local i\n   \
    \ for i = 1, n do\n      if i == c then\n        local k = t\n        if m > 0\
    \ then\n          k = t + m\n        end\n        local result = k\n      else\n\
    \        local k = ((n-1) - i)\n        local result = k\n      end\n      t =\
    \ m\n      m = k\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wkzv2ax.lua:47:\
    \ expected: 4, actual: nil\nstack traceback:\n\t/tmp/tmp9wkzv2ax.lua:47: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then\n    return\
    \ 0\n  else\n    if n == 1 then\n      return 0\n    else\n      if n < 4 then\n\
    \        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n      else\n\
    \        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4) + fib4(n\
    \ - 5)\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73qx7u5d.lua:33:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp73qx7u5d.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 4 then return n\
    \ else\n    local a, b, c = 1, 1, 1\n    for i=1,n do\n      b, c = c, a+b\n \
    \   end\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpilm7z3gj.lua:28:\
    \ expected: 28, actual: 5\nstack traceback:\n\t/tmp/tmpilm7z3gj.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 1 end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfgvxerzs.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpfgvxerzs.lua:17: in upvalue 'fib4'\n\
    \t/tmp/tmpfgvxerzs.lua:17: in upvalue 'fib4'\n\t/tmp/tmpfgvxerzs.lua:17: in upvalue\
    \ 'fib4'\n\t/tmp/tmpfgvxerzs.lua:17: in upvalue 'fib4'\n\t/tmp/tmpfgvxerzs.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpfgvxerzs.lua:17: in upvalue 'fib4'\n\t/tmp/tmpfgvxerzs.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpfgvxerzs.lua:17: in upvalue 'fib4'\n\t/tmp/tmpfgvxerzs.lua:17:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpfgvxerzs.lua:17: in local 'candidate'\n\t\
    /tmp/tmpfgvxerzs.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.320\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 0 then return 0\
    \ end\n  local result = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcsx0qeq.lua:23:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmppcsx0qeq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local result = 0\n  \
    \  if n >= 0 then\n        if n <= 3 then\n            result = n\n        else\n\
    \            result = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphkqk80hz.lua:29:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmphkqk80hz.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 0 then\n    return\
    \ 0\n  elseif n <= 1 then\n    return 1\n  else\n    local x = fib4(n - 1)\n \
    \   local y = fib4(n - 2)\n    return x + y + y + x\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_fc9kgr.lua:29:\
    \ expected: 4, actual: 44\nstack traceback:\n\t/tmp/tmpx_fc9kgr.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    error(\"\
    fib4 only accepts positive numbers\")\n  end\n  if n < 3 then\n    return n\n\
    \  end\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00r8y_s5.lua:16:\
    \ fib4 only accepts positive numbers\nstack traceback:\n\t/tmp/tmp00r8y_s5.lua:16:\
    \ in upvalue 'fib4'\n\t/tmp/tmp00r8y_s5.lua:21: in upvalue 'fib4'\n\t/tmp/tmp00r8y_s5.lua:21:\
    \ in upvalue 'fib4'\n\t/tmp/tmp00r8y_s5.lua:21: in local 'candidate'\n\t/tmp/tmp00r8y_s5.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then return\
    \ 0 end\n    if n == 1 then return 1 end\n    return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmbr6kv_f.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpmbr6kv_f.lua:17: in upvalue 'fib4'\n\
    \t/tmp/tmpmbr6kv_f.lua:17: in upvalue 'fib4'\n\t/tmp/tmpmbr6kv_f.lua:17: in upvalue\
    \ 'fib4'\n\t/tmp/tmpmbr6kv_f.lua:17: in upvalue 'fib4'\n\t/tmp/tmpmbr6kv_f.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpmbr6kv_f.lua:17: in upvalue 'fib4'\n\t/tmp/tmpmbr6kv_f.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpmbr6kv_f.lua:17: in upvalue 'fib4'\n\t/tmp/tmpmbr6kv_f.lua:17:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpmbr6kv_f.lua:17: in local 'candidate'\n\t\
    /tmp/tmpmbr6kv_f.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.360\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 1 then return n\
    \ end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nprint(fib4(5))\n\
    print(fib4(6))\nprint(fib4(7))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "-6\n-13\n-24\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqskbmgr1.lua:25:\
    \ expected: 4, actual: -6\nstack traceback:\n\t/tmp/tmpqskbmgr1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then return\
    \ 0 end\n    if n == 1 then return 0 end\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc5_d63zi.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpc5_d63zi.lua:17: in upvalue 'fib4'\n\
    \t/tmp/tmpc5_d63zi.lua:17: in upvalue 'fib4'\n\t/tmp/tmpc5_d63zi.lua:17: in upvalue\
    \ 'fib4'\n\t/tmp/tmpc5_d63zi.lua:17: in upvalue 'fib4'\n\t/tmp/tmpc5_d63zi.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpc5_d63zi.lua:17: in upvalue 'fib4'\n\t/tmp/tmpc5_d63zi.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpc5_d63zi.lua:17: in upvalue 'fib4'\n\t/tmp/tmpc5_d63zi.lua:17:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpc5_d63zi.lua:17: in local 'candidate'\n\t\
    /tmp/tmpc5_d63zi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.360\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 0 then\n    return\
    \ 0\n  end\n  if n == 3 then\n    return 0\n  end\n  if n == 1 or n == 2 then\n\
    \    return 1\n  end\n  local k = n\n  while k > 1 do\n    k = k - 3\n    local\
    \ a = fib4(k - 1) + fib4(k - 2) + fib4(k - 3) + fib4(k - 4)\n    return a\n  end\n\
    \  return k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxae9mh5f.lua:36:\
    \ expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmpxae9mh5f.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 0 then\n    return\
    \ 0\n  else\n    return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\
    \ + fib4(n - 0)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5tdahmf4.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp5tdahmf4.lua:18: in upvalue 'fib4'\n\
    \t/tmp/tmp5tdahmf4.lua:18: in upvalue 'fib4'\n\t/tmp/tmp5tdahmf4.lua:18: in upvalue\
    \ 'fib4'\n\t/tmp/tmp5tdahmf4.lua:18: in upvalue 'fib4'\n\t/tmp/tmp5tdahmf4.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmp5tdahmf4.lua:18: in upvalue 'fib4'\n\t/tmp/tmp5tdahmf4.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmp5tdahmf4.lua:18: in upvalue 'fib4'\n\t/tmp/tmp5tdahmf4.lua:18:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmp5tdahmf4.lua:18: in local 'candidate'\n\t\
    /tmp/tmp5tdahmf4.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.330\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then return\
    \ 0 end\n    if n == 1 then return 1 end\n    if n == 2 then return 2 end\n  \
    \  if n == 3 then return 0 end\n    if n == 4 then return 1 end\n    if n == 5\
    \ then return 4 end\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39zpqj9a.lua:28:\
    \ expected: 28, actual: 24\nstack traceback:\n\t/tmp/tmp39zpqj9a.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 0 then return\
    \ nil end\n    if n < 4 then return n end\n    return fib4(n-4) + fib4(n-3) +\
    \ fib4(n-2) + fib4(n-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7_0dvpu.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpw7_0dvpu.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return 0\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_nrnaz5.lua:24:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpc_nrnaz5.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n == 0 or n == 1 then\n\
    \t\treturn n\n\telseif n > 1 then\n\t\treturn fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpez85p6yb.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpez85p6yb.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmpez85p6yb.lua:18: in upvalue 'fib4'\n\t/tmp/tmpez85p6yb.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmpez85p6yb.lua:18: in local 'candidate'\n\t/tmp/tmpez85p6yb.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local fib4 = {}\n   \
    \ local i = 1\n    while i <= n do\n        fib4[i] = i\n        i = i + 2\n \
    \   end\n    return fib4[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnarhzyu.lua:27:\
    \ expected: 4, actual: 5\nstack traceback:\n\t/tmp/tmptnarhzyu.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local fib4 = 0\n    if\
    \ n < 0 then\n        fib4 = 0\n    elseif n == 0 then\n        fib4 = 0\n   \
    \ elseif n == 1 then\n        fib4 = 1\n    else\n        fib4 = fib4(n - 1) +\
    \ fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    end\n    return fib4\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n  \
    \  lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n \
    \   lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp24gasxym.lua:23:\
    \ attempt to call a number value (local 'fib4')\nstack traceback:\n\t/tmp/tmp24gasxym.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp24gasxym.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then\n    return\
    \ 0\n  elseif n == 1 then\n    return 0\n  elseif n == 2 then\n    return 2\n\
    \  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp5vtc68b.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpp5vtc68b.lua:22: in upvalue 'fib4'\n\
    \t/tmp/tmpp5vtc68b.lua:22: in upvalue 'fib4'\n\t/tmp/tmpp5vtc68b.lua:22: in upvalue\
    \ 'fib4'\n\t/tmp/tmpp5vtc68b.lua:22: in upvalue 'fib4'\n\t/tmp/tmpp5vtc68b.lua:22:\
    \ in upvalue 'fib4'\n\t/tmp/tmpp5vtc68b.lua:22: in upvalue 'fib4'\n\t/tmp/tmpp5vtc68b.lua:22:\
    \ in upvalue 'fib4'\n\t/tmp/tmpp5vtc68b.lua:22: in upvalue 'fib4'\n\t/tmp/tmpp5vtc68b.lua:22:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpp5vtc68b.lua:22: in local 'candidate'\n\t\
    /tmp/tmpp5vtc68b.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.320\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 1 then return\
    \ 0 end\n    if n < 2 then return 1 end\n    if n < 3 then return 1 end\n    if\
    \ n < 5 then return 1 end\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0a4_lz2.lua:26:\
    \ expected: 28, actual: 25\nstack traceback:\n\t/tmp/tmpo0a4_lz2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 1 then\n    \
    \    return n\n    elseif n == 0 then\n        return 0\n    elseif n == 2 then\n\
    \        return 2\n    else\n        return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnbwc1m9i.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpnbwc1m9i.lua:22: in upvalue 'fib4'\n\
    \t/tmp/tmpnbwc1m9i.lua:22: in upvalue 'fib4'\n\t/tmp/tmpnbwc1m9i.lua:22: in upvalue\
    \ 'fib4'\n\t/tmp/tmpnbwc1m9i.lua:22: in upvalue 'fib4'\n\t/tmp/tmpnbwc1m9i.lua:22:\
    \ in upvalue 'fib4'\n\t/tmp/tmpnbwc1m9i.lua:22: in upvalue 'fib4'\n\t/tmp/tmpnbwc1m9i.lua:22:\
    \ in upvalue 'fib4'\n\t/tmp/tmpnbwc1m9i.lua:22: in upvalue 'fib4'\n\t/tmp/tmpnbwc1m9i.lua:22:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpnbwc1m9i.lua:22: in local 'candidate'\n\t\
    /tmp/tmpnbwc1m9i.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.360\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n < 3 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpog6lyavl.lua:20:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpog6lyavl.lua:20:\
    \ in upvalue 'fib4'\n\t/tmp/tmpog6lyavl.lua:20: in upvalue 'fib4'\n\t/tmp/tmpog6lyavl.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpog6lyavl.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 1 end\n  if n == 2 then return 2 end\n  if n ==\
    \ 3 then return 0 end\n  if n == 4 then return 0 end\n  return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmkz1sse.lua:26:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpxmkz1sse.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  assert(n >= 0)\n  if n\
    \ == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  elseif n == 2\
    \ then\n    return 2\n  elseif n == 3 then\n    return 0\n  else\n    local fib_3\
    \ = fib3(n - 1) + fib3(n - 2)\n    return fib4(n - 4) + fib_3\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptzsktwnw.lua:25:\
    \ attempt to call a nil value (global 'fib3')\nstack traceback:\n\t/tmp/tmptzsktwnw.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmptzsktwnw.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then\n    return\
    \ 0\n  elseif n == 1 then\n    return 0\n  elseif n == 2 then\n    return 2\n\
    \  elseif n == 3 then\n    return 0\n  else\n    return (fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4))\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  return n == 0 and 0 or\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwhphd2k8.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpwhphd2k8.lua:15: in upvalue 'fib4'\n\
    \t/tmp/tmpwhphd2k8.lua:15: in upvalue 'fib4'\n\t/tmp/tmpwhphd2k8.lua:15: in upvalue\
    \ 'fib4'\n\t/tmp/tmpwhphd2k8.lua:15: in upvalue 'fib4'\n\t/tmp/tmpwhphd2k8.lua:15:\
    \ in upvalue 'fib4'\n\t/tmp/tmpwhphd2k8.lua:15: in upvalue 'fib4'\n\t/tmp/tmpwhphd2k8.lua:15:\
    \ in upvalue 'fib4'\n\t/tmp/tmpwhphd2k8.lua:15: in upvalue 'fib4'\n\t/tmp/tmpwhphd2k8.lua:15:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpwhphd2k8.lua:15: in local 'candidate'\n\t\
    /tmp/tmpwhphd2k8.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.340\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return 0\
    \ end\n  if n < 3 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw12z8v6_.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpw12z8v6_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 0 then\n    return\
    \ 0\n  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n\
    \  elseif n == 3 then\n    return 2\n  elseif n == 4 then\n    return 0\n  else\n\
    \    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8lnmtgq.lua:34:\
    \ expected: 28, actual: 24\nstack traceback:\n\t/tmp/tmpd8lnmtgq.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n   if n < 4 then return n\
    \ end\n   if n < 8 then\n      return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4)\n   else\n      return fib4(n - 8) + fib4(n - 7) + fib4(n - 6)\
    \ + fib4(n - 5)\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjxj3vho.lua:26:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpxjxj3vho.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a,b,c,d = 1,0,0,1\n\
    \  for i = 1, n do\n    a,b,c,d = b,a+b,c,d+c\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcgc6zc7.lua:25:\
    \ expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmphcgc6zc7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then\n    return\
    \ 0\n  elseif n == 1 then\n    return 1\n  else\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphbph68ut.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmphbph68ut.lua:20: in upvalue 'fib4'\n\
    \t/tmp/tmphbph68ut.lua:20: in upvalue 'fib4'\n\t/tmp/tmphbph68ut.lua:20: in upvalue\
    \ 'fib4'\n\t/tmp/tmphbph68ut.lua:20: in upvalue 'fib4'\n\t/tmp/tmphbph68ut.lua:20:\
    \ in upvalue 'fib4'\n\t/tmp/tmphbph68ut.lua:20: in upvalue 'fib4'\n\t/tmp/tmphbph68ut.lua:20:\
    \ in upvalue 'fib4'\n\t/tmp/tmphbph68ut.lua:20: in upvalue 'fib4'\n\t/tmp/tmphbph68ut.lua:20:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmphbph68ut.lua:20: in local 'candidate'\n\t\
    /tmp/tmphbph68ut.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.370\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if(n == 0) then\n    return\
    \ 0\n  elseif(n == 1) then\n    return 0\n  elseif(n == 2) then\n    return 2\n\
    \  elseif(n == 3) then\n    return 0\n  else\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local fib6=math.factorial(3)\n\
    \    return fib6^n*fib6\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphaii8nkd.lua:15:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmphaii8nkd.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmphaii8nkd.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then\n    return\
    \ 0\n  end\n  if n == 1 then\n    return 0\n  end\n  if n == 2 then\n    return\
    \ 2\n  end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcv_kzqhg.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpcv_kzqhg.lua:24: in upvalue 'fib4'\n\
    \t/tmp/tmpcv_kzqhg.lua:24: in upvalue 'fib4'\n\t/tmp/tmpcv_kzqhg.lua:24: in upvalue\
    \ 'fib4'\n\t/tmp/tmpcv_kzqhg.lua:24: in upvalue 'fib4'\n\t/tmp/tmpcv_kzqhg.lua:24:\
    \ in upvalue 'fib4'\n\t/tmp/tmpcv_kzqhg.lua:24: in upvalue 'fib4'\n\t/tmp/tmpcv_kzqhg.lua:24:\
    \ in upvalue 'fib4'\n\t/tmp/tmpcv_kzqhg.lua:24: in upvalue 'fib4'\n\t/tmp/tmpcv_kzqhg.lua:24:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpcv_kzqhg.lua:24: in local 'candidate'\n\t\
    /tmp/tmpcv_kzqhg.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.350\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then\n    return\
    \ 0\n  else\n    local fib4 = 0\n    local i = 2\n    while i < n do\n      fib4\
    \ = fib4 + i\n      i = i + 2\n    end\n    return fib4\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0ogz9y7.lua:31:\
    \ expected: 4, actual: 6\nstack traceback:\n\t/tmp/tmpo0ogz9y7.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 2 then\n    return\
    \ n\n  elseif n < 4 then\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4)\n  else\n    return fib4(n - 1) + fib4(n - 2)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n  \
    \  lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n \
    \   lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00p9g_cy.lua:27:\
    \ expected: 4, actual: 6\nstack traceback:\n\t/tmp/tmp00p9g_cy.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n < 0 then\n\t\terror(\"\
    fib4 number must be positive\")\n\telseif n <= 0 then\n\t\treturn 0\n\telseif\
    \ n == 1 then\n\t\treturn 1\n\telse\n\t\treturn fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n\tend\nend\nfib4\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeqz8bvq6.lua:26: syntax error near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local fib4_sequence = {}\n\
    \  local fib4_sequence[2] = 0\n  local fib4_sequence[3] = 2\n  fib4_sequence[4]\
    \ = 3\n  local fib4_sequence[5] = fib4_sequence[3] + fib4_sequence[4] + fib4_sequence[2]\n\
    \  fib4_sequence[fib4_sequence[5]] = 1\n  return fib4_sequence[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9aql6fzp.lua:16: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 4 then\n    return\
    \ 0\n  elseif n <= 4 then\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4)\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4) + fib4(n - 5)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5gdzpa34.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp5gdzpa34.lua:18: in upvalue 'fib4'\n\
    \t/tmp/tmp5gdzpa34.lua:18: in upvalue 'fib4'\n\t/tmp/tmp5gdzpa34.lua:18: in upvalue\
    \ 'fib4'\n\t/tmp/tmp5gdzpa34.lua:18: in upvalue 'fib4'\n\t/tmp/tmp5gdzpa34.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmp5gdzpa34.lua:18: in upvalue 'fib4'\n\t/tmp/tmp5gdzpa34.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmp5gdzpa34.lua:18: in upvalue 'fib4'\n\t/tmp/tmp5gdzpa34.lua:18:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmp5gdzpa34.lua:20: in local 'candidate'\n\t\
    /tmp/tmp5gdzpa34.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.340\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 or n == 1 then\n\
    \        return 0\n    else\n        return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptcijratp.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmptcijratp.lua:18: in upvalue 'fib4'\n\
    \t/tmp/tmptcijratp.lua:18: in upvalue 'fib4'\n\t/tmp/tmptcijratp.lua:18: in upvalue\
    \ 'fib4'\n\t/tmp/tmptcijratp.lua:18: in upvalue 'fib4'\n\t/tmp/tmptcijratp.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmptcijratp.lua:18: in upvalue 'fib4'\n\t/tmp/tmptcijratp.lua:18:\
    \ in upvalue 'fib4'\n\t/tmp/tmptcijratp.lua:18: in upvalue 'fib4'\n\t/tmp/tmptcijratp.lua:18:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmptcijratp.lua:18: in local 'candidate'\n\t\
    /tmp/tmptcijratp.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.290\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 or n > 40 then\
    \ return 0 end\n  if n==0 then return 0 end\n  if n==1 then return 1 end\n  if\
    \ n==2 then return 2 end\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxy0bggb.lua:25:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpdxy0bggb.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if(n==0) then return 0\
    \ end\n  if(n==1) then return 1 end\n  return fib4(4) + fib4(5) + fib4(6) + fib4(7)\
    \ + fib4(8)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw94cvkbm.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpw94cvkbm.lua:17: in upvalue 'fib4'\n\
    \t/tmp/tmpw94cvkbm.lua:17: in upvalue 'fib4'\n\t/tmp/tmpw94cvkbm.lua:17: in upvalue\
    \ 'fib4'\n\t/tmp/tmpw94cvkbm.lua:17: in upvalue 'fib4'\n\t/tmp/tmpw94cvkbm.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpw94cvkbm.lua:17: in upvalue 'fib4'\n\t/tmp/tmpw94cvkbm.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpw94cvkbm.lua:17: in upvalue 'fib4'\n\t/tmp/tmpw94cvkbm.lua:17:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpw94cvkbm.lua:17: in local 'candidate'\n\t\
    /tmp/tmpw94cvkbm.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.330\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if(n == 0) then\n    return\
    \ 0\n  elseif(n == 1) then\n    return 0\n  elseif(n == 2) then\n    return 2\n\
    \  elseif(n == 3) then\n    return 0\n  elseif(n == 4) then\n    return 2\n  elseif(n\
    \ == 5) then\n    return 3\n  elseif(n == 6) then\n    return 0\n  elseif(n ==\
    \ 7) then\n    return 3\n  elseif(n == 8) then\n    return 5\n  elseif(n == 9)\
    \ then\n    return 7\n  elseif(n == 10) then\n    return 9\n  elseif(n == 11)\
    \ then\n    return 11\n  elseif(n == 12) then\n    return 13\n  elseif(n == 13)\
    \ then\n    return 11\n  elseif(n == 14) then\n    return 13\n  elseif(n == 15)\
    \ then\n    return 17\n  elseif(n == 16) then\n    return 19\n  elseif(n == 17)\
    \ then\n    return 17\n  elseif(n == 18) then\n    return 23\n  elseif(n == 19)\
    \ then\n    return 21\n  elseif(n == 20) then\n    return 23\n  elseif(n == 21)\
    \ then\n    return 29\n  elseif(n == 22) then\n    return 31\n  elseif(n == 23)\
    \ then\n    return 37\n  elseif(n == 24) then\n    return 41\n  elseif(n == 25)\
    \ then\n    return 53\n  elseif(n == 26) then\n    return 59\n  elseif(n == 27)\
    \ then\n    return 67\n  elseif(n == 28) then\n    return 83\n  elseif(n == 29)\
    \ then\n    return 99\n  elseif(n == 30) then\n    return 119\n  elseif(n == 31)\
    \ then\n    return 131\n  elseif(n == 32) then\n    return 155\n  elseif(n ==\
    \ 33) then\n    return 177\n  elseif(n == 34) then\n    return 199\n  elseif(n\
    \ == 35) then\n    return 231\n  elseif(n == 36) then\n    return 269\n  elseif(n\
    \ == 37) then\n    return 293\n  elseif(n == 38) then\n    return 317\n  elseif(n\
    \ == 39) then\n    return 347\n  elseif(n == 40) then\n    return 367\n  elseif(n\
    \ == 41) then\n    return 395\n  elseif(n == 42) then\n    return 421\n  elseif(n\
    \ == 43) then\n    return 455\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8pc7fld_.lua:103: 'end' expected (to close 'if' at line 15)\
    \ near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 2 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyw83v3ca.lua:17:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpyw83v3ca.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpyw83v3ca.lua:17: in upvalue 'fib4'\n\t/tmp/tmpyw83v3ca.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpyw83v3ca.lua:17: in local 'candidate'\n\t/tmp/tmpyw83v3ca.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj_5opk54.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpj_5opk54.lua:15: in upvalue 'fib4'\n\
    \t/tmp/tmpj_5opk54.lua:15: in upvalue 'fib4'\n\t/tmp/tmpj_5opk54.lua:15: in upvalue\
    \ 'fib4'\n\t/tmp/tmpj_5opk54.lua:15: in upvalue 'fib4'\n\t/tmp/tmpj_5opk54.lua:15:\
    \ in upvalue 'fib4'\n\t/tmp/tmpj_5opk54.lua:15: in upvalue 'fib4'\n\t/tmp/tmpj_5opk54.lua:15:\
    \ in upvalue 'fib4'\n\t/tmp/tmpj_5opk54.lua:15: in upvalue 'fib4'\n\t/tmp/tmpj_5opk54.lua:15:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpj_5opk54.lua:15: in local 'candidate'\n\t\
    /tmp/tmpj_5opk54.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.320\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return 0\
    \ end\n  if n < 4 then return n end\n  if n < 9 then return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1) end\n  return fib4(n - 9) + fib4(n - 8) + fib4(n\
    \ - 7) + fib4(n - 6) + fib4(n - 5) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp049_1pzw.lua:24:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp049_1pzw.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then\n    return\
    \ 0\n  elseif n < 3 then\n    return n\n  else\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_efz_y6t.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp_efz_y6t.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local fib4 = 0\n  if n\
    \ < 3 then\n    fib4 = n\n  else\n    fib4 = fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  end\n  return fib4\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ih0s3p0.lua:19:\
    \ attempt to call a number value (local 'fib4')\nstack traceback:\n\t/tmp/tmp2ih0s3p0.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp2ih0s3p0.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n   if n == 0 then return\
    \ 0 else return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc0988gfk.lua:27: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\n\
    \  if n == 1 then return 0\n  if n == 2 then return 2\n  if n == 3 then return\
    \ 0\n  if n == 4 then return 0\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps6t959om.lua:16: 'end' expected (to close 'if' at line 15)\
    \ near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ \"-\" end\n  if n == 0 then return 0 end\n  if n == 1 then return 0 end\n  if\
    \ n == 2 then return 2 end\n  local n1 = fib4(n-1)\n  local n2 = fib4(n-2)\n \
    \ return n1+n2+n1+n2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgzpkmjq.lua:28:\
    \ expected: 4, actual: 32\nstack traceback:\n\t/tmp/tmpkgzpkmjq.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n < 3 then\n\t\treturn\
    \ n\n\telse\n\t\treturn fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wap_al1.lua:25:\
    \ expected: 4, actual: 10\nstack traceback:\n\t/tmp/tmp0wap_al1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n   if n <= 2 then\n     \
    \ return 0\n   else\n      return fib4(n -1) + fib4(n -2) + fib4(n -3) + fib4(n\
    \ -4)\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5fxzoo50.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp5fxzoo50.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n <= 1 then return n\
    \ else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\n\
    end\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmbt3fl8o.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    local x = {0,1,2,3}\n\
    \    local fib = 0\n    for i = 1, n do\n        fib = (fib+x[i -1]) % 1000000007\n\
    \    end\n    return fib\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_aag6f75.lua:18:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp_aag6f75.lua:18: in local 'candidate'\n\t/tmp/tmp_aag6f75.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n<1 then\n    return\
    \ 0\n  end\n  \n  local fib1 = fib4(n-1)\n  local fib2 = fib4(n-2)\n  local fib3\
    \ = fib4(n-3)\n  local fib4 = fib4(n-4)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnh50v3bf.lua:33: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n == 0 then return 0\
    \ end\n\tif n == 1 then return 0 end\n\tif n == 2 then return 2 end\n\tif n ==\
    \ 3 then return 0 end\n\tlocal a,b = fib4(n - 1), fib4(n - 2)\n\treturn a + b\
    \ + b + b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfj2neo_.lua:26:\
    \ expected: 4, actual: 6\nstack traceback:\n\t/tmp/tmphfj2neo_.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return 0\
    \ end\n  if n < 4 then return 1 end\n  return fib4(n - 4) + fib4(n - 3) + fib4(n\
    \ - 2) + fib4(n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdu6166z.lua:23:\
    \ expected: 4, actual: 6\nstack traceback:\n\t/tmp/tmpgdu6166z.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 3 then\n    return\
    \ n\n  else\n    return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3rr9yyw.lua:25:\
    \ expected: 4, actual: 10\nstack traceback:\n\t/tmp/tmpy3rr9yyw.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then\n    return\
    \ 0\n  elseif n == 1 then\n    return 0\n  elseif n == 2 then\n    return 2\n\
    \  elseif n == 3 then\n    return 0\n  elseif n == 4 then\n    return 0\n  else\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3kei6bj.lua:33:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpi3kei6bj.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n < 1 then return\
    \ 0 end\n    if n < 4 then return n end\n    return fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_gtfzy4.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpj_gtfzy4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return 1\
    \ end\n  if n < 4 then return 1 end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7x14bb9g.lua:23:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmp7x14bb9g.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\tif n < 0 then return nil\
    \ end\n\tif n < 4 then return n end\n\treturn fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4evcsdny.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp4evcsdny.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n == 0 then return 0\
    \ end\n  if n == 1 then return 1 end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxx0_8f3n.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpxx0_8f3n.lua:17: in upvalue 'fib4'\n\
    \t/tmp/tmpxx0_8f3n.lua:17: in upvalue 'fib4'\n\t/tmp/tmpxx0_8f3n.lua:17: in upvalue\
    \ 'fib4'\n\t/tmp/tmpxx0_8f3n.lua:17: in upvalue 'fib4'\n\t/tmp/tmpxx0_8f3n.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpxx0_8f3n.lua:17: in upvalue 'fib4'\n\t/tmp/tmpxx0_8f3n.lua:17:\
    \ in upvalue 'fib4'\n\t/tmp/tmpxx0_8f3n.lua:17: in upvalue 'fib4'\n\t/tmp/tmpxx0_8f3n.lua:17:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpxx0_8f3n.lua:17: in local 'candidate'\n\t\
    /tmp/tmpxx0_8f3n.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.280\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  local a = 0\n  local b\
    \ = 1\n  for i = 1,n do\n    a = b\n    b = a+b\n  end\n  return b\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n  \
    \  lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n \
    \   lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphj0j8v4q.lua:27:\
    \ expected: 4, actual: 32\nstack traceback:\n\t/tmp/tmphj0j8v4q.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n\t-- Base cases\n\tif n ==\
    \ 0 or n == 1 then return 1 end\n\tif n == 2 then return 2 end\n\tif n == 3 then\
    \ return 0 end\n\tif n < 2 then return nil end\n\t\n\tlocal fib\n\t\n\tif fib\
    \ == nil then\n\t\tfib = 0\n\tend\n\t\n\t-- The general idea of this algorithm\
    \ is to keep a running sum of fib(n) while we keep decrementing by 1.\n\t-- Each\
    \ time we decrement by 1, we'll add one to the running sum.\n\t-- The running\
    \ sum will be equal to the fib(n) + fib(n-1)+...+fib(n-(n-1)). \n\t-- When we\
    \ decrement by one, we add the number to the running sum at that point.\n\t--\
    \ When we decrement by two, we add the number to the running sum at that point.\n\
    \t-- When we decrement by three, we add the number to the running sum at that\
    \ point.\n\t-- ...\n\t-- When we decrement by n-1, we add the number to the running\
    \ sum at that point.\n\t-- When we decrement by n, we add the number to the running\
    \ sum at that point.\n\t\n\t-- For this function, we'll use the fact that fib(n)\
    \ = fib(n-1)+fib(n-2) since fib(n) = fib(n-1) + fib(n-2) implies that fib(n) =\
    \ fib(n-2) + fib(n-3). \n\t-- We will do this by iterating over the sequence of\
    \ fibonacci numbers and incrementing the running sum accordingly.\n\t\n\t-- Iterate\
    \ over the sequence using an iterator\n\tlocal iterator\n\tif iterator == nil\
    \ then\n\t\titerator = fib\n\tend\n\t\n\tlocal runningSum = iterator\n\t\n\twhile\
    \ n >= 0 do\n\t\t\n\t\t-- Decrement by one\n\t\trunningSum = runningSum + iterator\
    \ \n\t\t\n\t\t-- Increment by two \n\t\trunningSum = runningSum + iterator \n\t\
    \t\n\t\t-- Increment by three\n\t\trunningSum = runningSum + iterator \n\t\t\n\
    \t\t-- Increment by four\n\t\trunningSum = runningSum + iterator \n\t\t\n\t\t\
    -- Increment by five\n\t\trunningSum = runningSum + iterator \n\t\t\n\t\t-- Increment\
    \ by six\n\t\trunningSum = runningSum + iterator \n\t\t\n\t\t-- Increment by seven\n\
    \t\trunningSum = runningSum + iterator \n\t\t\n\t\t-- Increment by eight\n\t\t\
    runningSum = runningSum + iterator \n\t\t\n\t\t-- Increment by nine\n\t\trunningSum\
    \ = runningSum + iterator \n\t\t\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb0fbeoe_.lua:87: 'end' expected (to close 'while' at line\
    \ 48) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n    if n == 0 then\n    \
    \    return 0\n    end\n    if n == 1 then\n        return 0\n    end\n    return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn9if6ahj.lua:21:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpn9if6ahj.lua:21: in upvalue 'fib4'\n\
    \t/tmp/tmpn9if6ahj.lua:21: in upvalue 'fib4'\n\t/tmp/tmpn9if6ahj.lua:21: in upvalue\
    \ 'fib4'\n\t/tmp/tmpn9if6ahj.lua:21: in upvalue 'fib4'\n\t/tmp/tmpn9if6ahj.lua:21:\
    \ in upvalue 'fib4'\n\t/tmp/tmpn9if6ahj.lua:21: in upvalue 'fib4'\n\t/tmp/tmpn9if6ahj.lua:21:\
    \ in upvalue 'fib4'\n\t/tmp/tmpn9if6ahj.lua:21: in upvalue 'fib4'\n\t/tmp/tmpn9if6ahj.lua:21:\
    \ in upvalue 'fib4'\n\t...\n\t/tmp/tmpn9if6ahj.lua:21: in local 'candidate'\n\t\
    /tmp/tmpn9if6ahj.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.280\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
