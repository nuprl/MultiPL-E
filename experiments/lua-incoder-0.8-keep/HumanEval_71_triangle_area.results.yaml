name: HumanEval_71_triangle_area
language: lua
results:
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif b > c then\n\t\treturn -1\n\tend\n\tif a+c > b+a\
    \ then\n\t\treturn 0\n\telse\n\t\treturn (b - a) * (c - a) / (b + a)\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdhao95t.lua:23:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpqdhao95t.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal a_sqr = a * a\n\tlocal b_sqr = b * b\n\tlocal\
    \ c_sqr = c * c\n\tlocal s = (a + b + c) / 2\n\tlocal e = math.sqrt( (s*s) - (a_sqr\
    \ + b_sqr + c_sqr) )\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n  \
    \  lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4gq8frnx.lua:30: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal area = 0\n\tif b - a >= c and c - b >= a then\n\
    \t\tif a + b + c > a then\n\t\t\tarea = a * b * c\n\t\tend\n\t\t-- This prevents\
    \ us from returning the triangle to zero area. \n\t\t-- Since the sum does not\
    \ equal a, we know that the sum is a valid triangle. \n\t\tif area < a then \n\
    \t\t\tarea = area + (a - (a + b + c))\n\t\tend\n\tend\n\treturn area\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ac7tpvl.lua:27:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp2ac7tpvl.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    local side1 = a*b - c*b\n    local side2 = a*c -\
    \ b*c\n    local side3 = b**2\n    \n    -- If sides are not valid return -1\n\
    \    if side1 ~= side2 ~= side3 then\n        return -1\n    end\n    -- Sum up\
    \ all the sides. \n    local side = side1 + side2 + side3\n    \n    -- If sides\
    \ are valid return side\n    if side > 0 then\n        return math.round(side)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwmd7u76g.lua:12: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t-- Check if sides are all greater than zero\n\tif\
    \ a < 0 or b < 0 or c < 0 then\n\t\treturn -1\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9fna01ml.lua:29: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal s1 = math.abs(a)\n\tlocal s2 = math.abs(b)\n\
    \tlocal s3 = math.abs(c)\n\tif s1 + s2 == s3 then\n\t\treturn s1 * s2 \n\telseif\
    \ s1 + s2 > s3 then\n\t\treturn -1\n\telse\n\t\treturn math.round(s1 * s2) / 2\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7jw_273_.lua:25:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmp7jw_273_.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n   local abs = math.abs(a)\n   local bc = math.abs(b)\n\
    \   local cd = math.abs(c)\n   if abs + bc == cd then\n      return math.round(a\
    \ / 2.0)\n   elseif abs + cd == bc  then\n      return math.round(b / 2.0)\n \
    \  else\n      return math.round(cd / 2.0)\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpouj9nn5j.lua:18:\
    \ attempt to call a nil value (field 'round')\nstack traceback:\n\t/tmp/tmpouj9nn5j.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpouj9nn5j.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\treturn ((b * b) - (4 * a * c)) * 0.5\nend\n</cell>\n\
    <cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt0cwu3wk.lua:12: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if a + b > c then return (a * b) / (a + b + c) else\
    \ return -1 end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n  \
    \  lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndu7ues0.lua:16:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpndu7ues0.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t-- Return an error if the input arguments are invalid\n\
    \tif type(a) ~= 'number' or type(b) ~= 'number' or type(c) ~= 'number' or a +\
    \ b > c then\n\t\treturn -1\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdl493fs_.lua:29: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  -- Simple check to make sure a,b,c are valid integers\n\
    \  assert(type(a)==\"number\" and type(b)==\"number\" and type(c)==\"number\"\
    )\n  -- Check validity of the triangle (all sides must be greater than\n  -- 1)\n\
    \  if a<1 or b<1 or c<1 then\n    return -1\n  end\n  -- Calculate the area of\
    \ the triangle\n  local area=a * (b/c)\n  -- If the sum of the sides is greater\
    \ than the third side, round the\n  -- area to 2 decimal places. Otherwise, return\
    \ -1.\n  if a+b>c then\n    return area\n  else\n    return -1\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tbdsv0g.lua:31:\
    \ expected: 6, actual: 2.4\nstack traceback:\n\t/tmp/tmp6tbdsv0g.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal ab = b - a\n\tlocal bc = c - b\n\tlocal ap =\
    \ a + a\n\tlocal abc = ab * bc\n\tlocal aac = ap * abc\n\tlocal bca = ab * ap\n\
    \treturn aac / bca\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeplvv2pu.lua:22:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpeplvv2pu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t-- Check valid input\n\tif a < 0 then \n\t\treturn\
    \ -1\n\telseif b < 0 then \n\t\treturn -1\n\telseif c < 0 then \n\t\treturn -1\n\
    \telseif a+b > c then \n\t\treturn -1\n\telseif a+c > b then \n\t\treturn -1\n\
    \telseif b+c > a then \n\t\treturn -1\n\tend\n\t-- Compute area of triangle formed\
    \ by a, b and c\n\tlocal s = 0.0\n\tlocal t = (a+b+c)/2.0\n\tlocal p = a*b - b*c\n\
    \tif p ~= 0 then\n\t\ts = p/(2*t)\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7151o2r9.lua:37:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmp7151o2r9.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    -- Check valid triangle with given sides\n    if\
    \ (a + b <= c and a + c <= b and b + c >= a) then\n        return (a * b) / c\n\
    \    else\n        return -1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_b3vt1cy.lua:21:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmp_b3vt1cy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    local s, u, v = a * a + b * b, a * c + b * d, c\
    \ * c + d * d\n    return math.round(math.sqrt(s * s - u * u - v * v) * 100) /\
    \ 100\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp44teqfxr.lua:10:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmp44teqfxr.lua:10: in local 'candidate'\n\t/tmp/tmp44teqfxr.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n   if a + b <= c then\n      return nil\n   end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1rth5emo.lua:28: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\ta = math.abs(a)\n\tb = math.abs(b)\n\tc = math.abs(c)\n\
    \tif a+b+c <= a or a+b+c <= b or a+b+c <= c then\n\t\treturn (((a+b+c)/2)*math.sqrt(math.pow(a,2)\
    \ + math.pow(b,2) + math.pow(c,2)))\n\telse\n\t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxg_xkvn2.lua:23:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpxg_xkvn2.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if a + b > c then\n        return -1\n    elseif\
    \ a + c > b then\n        return -1\n    elseif b + c > a then\n        return\
    \ -1\n    else\n        local p = a + b\n        local q = c + b\n        local\
    \ r = a + c\n        return ((p * q) - (r * p)) / (2.0 * r)\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37z07mtu.lua:27:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmp37z07mtu.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b <= c and a + c <= b and b + c <= a then\n\
    \    return (a - (b + c)) / (2 * a)\n  elseif a + b > c and a + c > b and b +\
    \ c > a then\n    return -1\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpxviz2o.lua:22:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpkpxviz2o.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b > c then \n    return -1\n  else if a + c\
    \ > b and b + c > a then \n    return -1\n  else \n    return (b * b) - (4 * (a\
    \ * c))\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n  \
    \  lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpymw0cafx.lua:33: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if a + b > c then return -1 end\n    if a + c >\
    \ b then return -1 end\n    if b + c > a then return -1 end\n    return (a + b\
    \ + c) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdyjfo27.lua:19:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmprdyjfo27.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if a + b > c and b + c > a and c + a > b then\n\
    \        return (a * b * c) / 2\n    else\n        return -1\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8mbzggl.lua:20:\
    \ expected: 6, actual: 30\nstack traceback:\n\t/tmp/tmpr8mbzggl.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  -- If the sum of any two sides is greater than the\
    \ third side\n  -- then the triangle is not a valid triangle.\n  if a + b > c\
    \ then return -1 else return (b - a) * (c - b) end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvaulh5a.lua:18:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmptvaulh5a.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if a+b > c then \n        return (a+b)/2\n    else\
    \ \n        return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgrp97tge.lua:20:\
    \ expected: 6, actual: 3.5\nstack traceback:\n\t/tmp/tmpgrp97tge.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a ~= b or b ~= c then\n\t\tif b > c then\n\t\t\t\
    return (b+c-a) / (2*a)\n\t\telse\n\t\t\treturn (c+a-b) / (2*b)\n\t\tend\n\telse\n\
    \t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplwupkphi.lua:24:\
    \ expected: 6, actual: 0.5\nstack traceback:\n\t/tmp/tmplwupkphi.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a <= 0 or b <= 0 or c <= 0 then \n\t\treturn -1\n\
    \telseif a + b > c and b + c > a and c + a > b then\n\t\treturn b * c - a * b\
    \ \n\telse \n\t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksp9us3w.lua:22:\
    \ expected: 6, actual: 8\nstack traceback:\n\t/tmp/tmpksp9us3w.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif b > c then\n\t\ta, b = b, c\n\t\tc, a = a, b\n\t\
    end\n\treturn math.sqrt( a * a + b * b + c * c ) / 2.0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwq7hfut1.lua:20:\
    \ expected: 6, actual: 3.5355339059327\nstack traceback:\n\t/tmp/tmpwq7hfut1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a + b > c then\n\t\treturn 0\n\telseif a + c >\
    \ b then\n\t\treturn 0\n\telseif b + c > a then\n\t\treturn 0\n\telse\n\t\treturn\
    \ (b * c) - (a * b)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mu1ogyl.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp4mu1ogyl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a + b > c then\n\t\treturn math.abs((a - c) * 0.5555555555555556\
    \ / 2) -- The area of a triangle when all the sides are equal\n\telse\n\t\treturn\
    \ -1\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n  \
    \  lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9t8fqmz.lua:20:\
    \ expected: 6, actual: 0.55555555555556\nstack traceback:\n\t/tmp/tmpf9t8fqmz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b <= c or a + c <= b or b + c <= a then\n \
    \   return -1\n  end\n  return math.sqrt((b*b) - ((a+c)*(a+c))/(b*b))\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwx0jw2xl.lua:19:\
    \ expected: 6, actual: 3.4641016151378\nstack traceback:\n\t/tmp/tmpwx0jw2xl.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if (a < 0 or b < 0 or c < 0) then\n        return\
    \ 0\n    end\n    -- return 0 if any two sides are equal\n    if (a + b > c) then\n\
    \        return 0\n    end\n    -- return 0 if two sides are equal\n    if (a\
    \ + c == b) then\n        return 0\n    end\n    -- return 0 if two sides are\
    \ equal\n    if (a + c == a) then\n        return 0\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsiyi64_o.lua:40: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b > c then\n    return -1\n  elseif a + c >\
    \ b then\n    return -1\n  elseif b + c > a then\n    return -1\n  else\n    return\
    \ math.sqrt( math.pow( a, 2 ) + math.pow(b, 2) + math.pow(c, 2) )\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsj4f87lo.lua:24:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpsj4f87lo.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t-- We are only interested in positive numbers. So\
    \ we can return 0 if the arguments are < 0.\n\tif a + b < c or a + c < b or b\
    \ + c < a then return 0 end\n\t-- Check if a is a triangle if the sum of the two\
    \ other sides is greater than the third side\n\tif a + b > c then return 0 end\n\
    \t-- Check if b is a triangle if the sum of the two other sides is greater than\
    \ the third side\n\tif a + b > c then return 0 end\n\t-- Check if c is a triangle\
    \ if the sum of the two other sides is greater than the third side\n\tif a + b\
    \ > c then return 0 end\n\t-- If all are positive, then a + b + c is a triangle\
    \ and we should return the area of the triangle.\n\treturn ((a * b) + c) * 0.5\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjevsd0p.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpzjevsd0p.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b > c then return (a + b) * (c + b) - (a +\
    \ c) * (b + c) end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9j9rmjav.lua:17:\
    \ expected: 6, actual: -9\nstack traceback:\n\t/tmp/tmp9j9rmjav.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a + b <= c then return -1 end\n\tif a + c <= b\
    \ then return -1 end\n\tif b + c <= a then return -1 end\n\treturn (a * b + c\
    \ * c - a * b * c) / (2 * c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8f741_h2.lua:19:\
    \ expected: 6, actual: -2.3\nstack traceback:\n\t/tmp/tmp8f741_h2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal side_1 = sqrt(a*a+b*b)\n\tlocal side_2 = sqrt(c*c+d*d)\n\
    \tlocal area_1 = (side_1-side_2)/2\n\treturn area_1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgq657ev0.lua:10:\
    \ attempt to call a nil value (global 'sqrt')\nstack traceback:\n\t/tmp/tmpgq657ev0.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpgq657ev0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal s = a + b + c\n\tif s >= a then return 0 elseif\
    \ s == a then return c elseif s == b then return -a else return -1 end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsr3mqw2t.lua:17:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpsr3mqw2t.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b > c then return -1\n  else return (a * b)\
    \ / math.sqrt(math.pow(a, 2) + math.pow(b, 2)) end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqr5ukyn.lua:17:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpbqr5ukyn.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b > c and a + c > b and b + c > a then\n  \
    \  return (a * b * c) / ((a+b)+(c+a))\n  else\n    return -1\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9p5v7vk.lua:20:\
    \ expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpf9p5v7vk.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a == b or b == c or c == a then \n    return -1\n\
    \  else\n    return (b - a + b - c) / 2.0\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmzanam5.lua:20:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpkmzanam5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal s = a + b\n\tlocal t = b + c\n\tlocal u = c\
    \ - a\n\t\n\tif s > t then\n\t\treturn s\n\telseif s < t then\n\t\treturn t\n\t\
    elseif s == t then\n\t\treturn s * 0.5\n\telse\n\t\treturn u\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcunlxiqd.lua:28:\
    \ expected: 6, actual: 9\nstack traceback:\n\t/tmp/tmpcunlxiqd.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a < b + c then \n\t\treturn -1\n\telseif b < a\
    \ + c then \n\t\treturn -1\n\telseif c < a + b then \n\t\treturn -1\n\telse\n\t\
    \treturn math.round(math.sqrt(math.pow((b - c), 2) + math.pow((c - a), 2)))\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7404seti.lua:24:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmp7404seti.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a * a + b * b > c * c then\n\t\treturn ((a + b\
    \ + c) / 2) * 0.5\n\telse\n\t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dm6bw2u.lua:20:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmp2dm6bw2u.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a+b > c then\n    return math.abs(a+b+c-b)\n  elseif\
    \ a > b and a > c then\n    return math.abs((a+c-b)/2)\n  elseif a > b and b >\
    \ c then\n    return math.abs((b+c-a)/2)\n  elseif b > a and b > c then\n    return\
    \ math.abs((c-a)/2)\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbw1wzgt.lua:26:\
    \ expected: 6, actual: 8\nstack traceback:\n\t/tmp/tmpkbw1wzgt.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b > c and b + c > a and c + a > b then\n  \
    \  return ((a + b + c) / 2) / 2\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdqcs3dd.lua:20:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmpzdqcs3dd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a+b+c < 3 then\n\t\treturn -1\n\tend\n\tlocal sum\
    \ = b+c\n\treturn math.ceil((((a-b)**2 + (a-c)**2) + ((a-c)**2 + (b-c)**2) + (a*(b-c)**2))/sum)\
    \ * 10^-2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0w0cp3wx.lua:14: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n   -- Return -1\n   if b < c then \n      return -1\n\
    \   end\n   -- Return 1 if all sides are equal\n   if b == c then\n      return\
    \ 1\n   end\n   -- Compute the area of a triangle with the given sides\n   local\
    \ s = (a + b + c) / 2\n   \n   local u = (b + s) / 2\n   local v = (c + s) / 2\n\
    \   local w = (a * c)\n   \n   return w / (u + v + w)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswtvqgz2.lua:31:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpswtvqgz2.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  local abs = math.abs(a) + math.abs(b)\n  local c =\
    \ math.abs(c)\n  if abs > c then\n    return -1\n  else\n    if math.abs(a) +\
    \ math.abs(b) > c then\n      local area = math.abs(math.sin(a) * math.sin(b)\
    \ * math.sin(c) + math.cos(a) * math.cos(b) * math.cos(c)) / (2 * a * b)\n   \
    \ else\n      local area = -1\n    end\n    if area >= 0 then\n      return area\n\
    \    else\n      return -1\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb333y5px.lua:31:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpb333y5px.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a + b <= c or a + c <= b or b + c <= a then \n\t\
    \treturn -1\n\telse\n\t\treturn 0.5 * (a + b + c)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2k7x9k13.lua:22:\
    \ expected: 8.18, actual: 8.5\nstack traceback:\n\t/tmp/tmp2k7x9k13.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if a + b > c then\n        return (a * b) / c\n\
    \    elseif a + c > b then\n        return ((c * b) / a) / 2\n    elseif b + c\
    \ > a then\n        return ((b * c) / a) / 2\n    else\n        return -1\n  \
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdk4wp9f.lua:24:\
    \ expected: 6, actual: 2.4\nstack traceback:\n\t/tmp/tmppdk4wp9f.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t-- If the sum of the two sides is less than the third\
    \ side, \n\t-- then there's no point making the triangle. Return -1\n\tif a +\
    \ b < c then return -1 end\n\t-- If the sum of the two sides is greater than the\
    \ third side,\n\t-- then return 0 because that doesn't satisfy the requirement\
    \ for a valid triangle area\n\tif a + c > b then return 0 end\n\t-- Otherwise\
    \ the sum of the two sides is equal to the third side, \n\t-- so return the area\
    \ of the triangle rounded to 2 decimal points.\n\treturn (math.round(a + (b -\
    \ c) * (math.sqrt(1 + 4 * math.pow((b - a) / c, 2))))) * 0.5\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5hhdp7x.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpc5hhdp7x.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  -- return -1\n  if a + b > c then\n    return -1\n\
    \  else\n    return (b * (b - a) * (c - a))\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf08cofe.lua:21:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpxf08cofe.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a * b > c then\n    return ((b * b) - (a * c))\
    \ / (2 * a)\n  elseif a * c > b then\n    return -1\n  else\n    return ((c *\
    \ c) - (b * b)) / (2 * a)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lj66emf.lua:22:\
    \ expected: 6, actual: 0.16666666666667\nstack traceback:\n\t/tmp/tmp9lj66emf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b > c then\n    if a + c > b then\n      return\
    \ (a * b) / 2\n    end\n    return -1\n  else\n    if a + c > b then\n      return\
    \ -1\n    end\n    return (b * c) / 2\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpenh8yveq.lua:28:\
    \ expected: 8.18, actual: 16\nstack traceback:\n\t/tmp/tmpenh8yveq.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a + b > c then return -1 \n\telseif a + c > b then\
    \ return -1\n\telseif b + c > a then return -1 \n\telse return (b * b) - (4 *\
    \ a * c)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n  \
    \  lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqi2m330.lua:20:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpkqi2m330.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b > c then\n    return math.pow(c ,2) / 2 *\
    \ math.pow((a + b) ,2)\n  elseif a + c > b then\n    return math.pow(c ,2) / 2\
    \ * math.pow((a + b) ,2)\n  elseif b + c > a then\n    return math.pow(c ,2) /\
    \ 2 * math.pow((a + b) ,2)\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb07h3v8x.lua:24:\
    \ expected: 6, actual: 612.5\nstack traceback:\n\t/tmp/tmpb07h3v8x.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t--   _______ \n\t-- |       |\n\t-- |     2\n\t--\
    \ |\n\t-- |\n\t-- |\n\t-- ______|\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf0mggu2u.lua:32: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    local area = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgz2ondnt.lua:26: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a + b > c then\n\t\tlocal s = (a + b - c) / 2\n\
    \t\treturn s * s\n\telse\n\t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppw53dqxe.lua:21:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmppw53dqxe.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a == b or a == c or b == c then\n    -- Special\
    \ case\n    return 0\n  elseif a + b > c then return 0\n  elseif a + c > b then\
    \ return 0\n  elseif b + c > a then return 0\n  else return 0.5 * ((a + b) * (b\
    \ + c)) end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n  \
    \  lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8bfxegg.lua:22:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpt8bfxegg.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  local a, b, c = a or 0, b or 0, c or 0\n  if a + b\
    \ > c then return -1 \n  elseif a + c > b then return -1\n  elseif b + c > a then\
    \ return -1\n  else return (a + b + c) / 2 end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8rjhkap2.lua:20:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmp8rjhkap2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n   if a ~= b ~= c then\n      if a + b > c then \n \
    \        return -1\n      elseif a + c > b then\n         return -1\n      elseif\
    \ b + c > a then\n         return -1\n      else \n         return ((a + b + c)/2)\
    \ * 0.5\n      end\n   else \n      return -1\n   end\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThis is exactly what I needed. Thanks.\n<|/ c |>\n<| c |>\nI think this\
    \ answer misses some cases. I wrote a solution which returns the area when the\
    \ side lengths are valid, but also returns 0 in other cases. I added the function\
    \ below, which I believe is more robust and correct: http://stackoverflow.com/a/42749607/712805\n\
    <|/ c |>\n<| a tags=lua,geometry,algorithm |>\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpamhlhiio.lua:24: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  -- This code is a bit tricky. First, determine if\
    \ c is greater than b.\n  -- If it is, c must be the largest side. If it is not,\
    \ then b is the largest side.\n  -- If both are equal, then a is the largest side.\n\
    \  local is_large = c>b\n  if not is_large then\n    is_large = b>a\n  end\n \
    \ \n  if is_large then\n    -- If c is greater than b, then a must be the largest\
    \ side. If c is less than b,\n    -- then b is the largest side. One of the two\
    \ must be the largest side.\n    local max_a = a\n    local max_b = b\n    if\
    \ not is_large and c>a then\n      max_a = c\n    elseif not is_large and c<b\
    \ then\n      max_b = c\n    end\n  \n    -- Calculate the area of the triangle\
    \ with 3 lines. First the two sides\n    -- are equal, then the side with the\
    \ largest value must be the third side.\n    return math.abs((max_a+max_b)/2)\n\
    \  else\n    -- If c is less than b, then a is the largest side. If c is greater\
    \ than b, \n    -- then b is the largest side. The side with the largest value\
    \ must be a. \n    local max_a = a\n    local max_b = b\n    if c>b then\n   \
    \   max_a = c\n    elseif c<a then\n      max_b = c\n    end\n    \n    -- Calculate\
    \ the area of the triangle with 3 lines. First the two sides\n    -- are equal,\
    \ then the side with the largest value must be the third side.\n    return math.abs((max_a+max_b)/2)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zaogn49.lua:52:\
    \ expected: 6, actual: 3.5\nstack traceback:\n\t/tmp/tmp5zaogn49.lua:52: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\treturn ((b * b) - (4 * a * c)) / (2 * a)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpliipx764.lua:16:\
    \ expected: 6, actual: -7.3333333333333\nstack traceback:\n\t/tmp/tmpliipx764.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a + b > c then return -1 end\n\tif a + c > b then\
    \ return -1 end\n\tif b + c > a then return -1 end\n\treturn ((a + b + c) * (b\
    \ - c)) / (2.0 * c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpynkg6q_p.lua:19:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpynkg6q_p.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n   -- Check that the given triangle is valid\n   if\
    \ a + b > c and a + c > b and b + c > a then\n      -- Calculate the area of the\
    \ triangle\n      -- We use the Pythagorean theorem.\n      local s = (a + b +\
    \ c) / 2\n      local area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \
    \  -- Return it rounded to 2 decimal points\n      -- The triangle is valid if\
    \ it is greater than 0\n      -- but less than the area of the triangle\n    \
    \  return math.floor(area / 100 * 100) / 100\n   end\n   -- If the given triangle\
    \ is invalid\n   -- return -1\n   return -1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dco8avu.lua:29:\
    \ expected: 6, actual: 0.06\nstack traceback:\n\t/tmp/tmp0dco8avu.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    -- Check whether the sum of two sides are greater\
    \ than the third side\n    -- If they are equal the triangle is not a valid triangle\n\
    \    if a + b > c then\n        return -1\n    end\n    -- If a is greater than\
    \ or equal to c then the triangle is a right triangle\n    if a >= c then\n  \
    \      return b * b - a * c + 1\n    end\n    -- If a is less than c then the\
    \ triangle is a left triangle\n    if a <= c then\n        return b * b + c *\
    \ c - a * a + 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpba1hxzit.lua:28:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpba1hxzit.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  -- Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n  -- than the third side.\n  if a + b > c then\n\
    \    return c\n  elseif a + c > b then\n    return b\n  elseif b + c > a then\n\
    \    return a\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xc50jk4.lua:26:\
    \ expected: 6, actual: 5\nstack traceback:\n\t/tmp/tmp3xc50jk4.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n   if a >= b and a >= c then -- Check if all sides are\
    \ positive\n      return a*a + b*b + c*c\n   elseif b >= a and b >= c then --\
    \ Check if all sides are positive\n      return b*b + c*c\n   elseif c >= a and\
    \ c >= b then -- Check if all sides are positive\n      return c*c\n   end\n \
    \  return 0 -- At least one side is negative. One side is bigger than the other.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyi7nale1.lua:23:\
    \ expected: 6, actual: 25\nstack traceback:\n\t/tmp/tmpyi7nale1.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if a + b > c then \n        return nil\n    else\
    \ if c > b + a then \n        return nil\n    else\n        return ((b * b) -\
    \ ((c -c) * (a -a))) / 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8s2wh1d1.lua:33: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if (a + b < c) then\n        if a + c < b then\n\
    \            return (b - c) / 2.0\n        end\n        return c / 2.0\n    else\n\
    \        if (b + c < a) then\n            return (b - a) / 2.0\n        end\n\
    \        return a / 2.0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9k5emuyk.lua:26:\
    \ expected: 6, actual: 1.5\nstack traceback:\n\t/tmp/tmp9k5emuyk.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if a > b and b > c then return -1 end\n    if a\
    \ == b or b == c then return 0 end\n    local t = b - a\n    local uc = a - c\n\
    \    local ts = t*t \n    local us = uc*uc\n    return ts + us / (a*a)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45oq3lei.lua:22:\
    \ expected: 6, actual: 1.4444444444444\nstack traceback:\n\t/tmp/tmp45oq3lei.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n   if a + b > c then return -1 end\n   if a + c > b\
    \ then return -1 end\n   if b + c > a then return -1 end\n   return (0.5 * b *\
    \ c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5k6hquln.lua:19:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmp5k6hquln.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b > c and b + c > a and c + a > b then\n  \
    \  return (b * b - c * a) / (2 * a)\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4j8_xop.lua:20:\
    \ expected: 6, actual: 0.16666666666667\nstack traceback:\n\t/tmp/tmpd4j8_xop.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b > c then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps4rqm4mk.lua:28: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if b == c and b ~= 0 then\n    return a\n  else\n\
    \    return -1 \n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeecz8n8j.lua:20:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpeecz8n8j.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a == b or a == c or b == c then\n    return 0\n\
    \  end\n  return a * b + ((a + b) * (c + a))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps818d6lh.lua:19:\
    \ expected: 6, actual: 68\nstack traceback:\n\t/tmp/tmps818d6lh.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  local side1 = b - a\n  local side2 = c - a\n  local\
    \ side3 = math.sqrt(math.pow(side1, 2) + math.pow(side2, 2))\n  if side1 + side2\
    \ + side3 > 0 then\n    return round(side3 / (side1 + side2 + side3) * 100) /\
    \ 100\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpke0loxk1.lua:14:\
    \ attempt to call a nil value (global 'round')\nstack traceback:\n\t/tmp/tmpke0loxk1.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpke0loxk1.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal area = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnaeem4v8.lua:26: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n   if b == 0 then\n      return -1\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5q6lphcd.lua:28: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n   local area_1 = (a + b + c) / 2\n   local area_2 =\
    \ (a + b) / 2\n   local area_3 = (a + c) / 2\n   return area_1 + area_2 + area_3\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuw7hbo28.lua:19:\
    \ expected: 6, actual: 13.5\nstack traceback:\n\t/tmp/tmpuw7hbo28.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal sides = math.abs(a) + math.abs(b) + math.abs(c)\n\
    \tif sides <= 0 then\n\t\treturn -1\n\telseif sides == 1 then\n\t\treturn a --\
    \ a + b + c = 1\n\telseif sides == 2 then\n\t\treturn a * b + b * c -- a^2 + b^2\
    \ = c^2\n\telseif sides == 3 then\n\t\treturn a * b * c -- a^2 + b^2 + c^2 = 1\n\
    \telse\n\t\tlocal d = math.sqrt(math.pow(a , 2) + math.pow(b, 2) + math.pow(c,\
    \ 2))\n\t\tlocal area = d / sides\n\t\treturn round(area, 2)\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl_1vc7co.lua:22:\
    \ attempt to call a nil value (global 'round')\nstack traceback:\n\t/tmp/tmpl_1vc7co.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpl_1vc7co.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  return ((b * b) - (4 * a * c)) / (2 * a)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpth65r3i6.lua:16:\
    \ expected: 6, actual: -7.3333333333333\nstack traceback:\n\t/tmp/tmpth65r3i6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b > c or a + c > b or b + c > a then return\
    \ -1 end\n  return (a * b + c * 2) * (a > b and b > c and a > c or b > a and c\
    \ > a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqre2cyl.lua:17:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpyqre2cyl.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif (a + b > c) and (c + b > a) and (a + c > b) and\
    \ (c + a > b) then\n\t\treturn (a * b * c) / (a + b + c + a + b + c)\n\telse\n\
    \t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m_txvuv.lua:20:\
    \ expected: 6, actual: 2.5\nstack traceback:\n\t/tmp/tmp8m_txvuv.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n   -- check for a triangle\n   if a + b > c and a +\
    \ c > b and b + c > a\n   then\n      return (a * b + b * c + c * a) * (0.5 +\
    \ 0.5 * math.sqrt(math.pow((b - c), 2) + math.pow((a - c), 2)))\n   else\n   \
    \   return -1\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5owccit.lua:22:\
    \ expected: 6, actual: 76.047597471245\nstack traceback:\n\t/tmp/tmpb5owccit.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  -- http://mathworld.wolfram.com/TriangleArea.html\n\
    \  -- http://mathworld.wolfram.com/TriangleArea-Closure.html\n  -- http://www.mathsisfun.com/geometry/triangle.html\n\
    \  \n  -- http://en.wikipedia.org/wiki/Parallelogram\n  -- http://en.wikipedia.org/wiki/Polygon\n\
    \  \n  if a == c or b == c or b == a or c == a then\n    return 0.0\n  end\n \
    \ \n  local a1, b1, c1 = b - a, c - b, a - c\n  \n  if a1 * b2 > c1 then\n   \
    \ return 0.0\n  end\n  \n  local a2, b2, c2 = c - a, b - a\n  \n  if a2 * b2 <\
    \ c2 then\n    return 0.0\n  end\n  \n  local u1 = (b * b) - (4 * a1 * c1)\n \
    \ \n  if u1 <= 0 then\n    return -1.0\n  end\n  \n  local u2 = (u1 ** 0.5) *\
    \ 0.5\n  \n  return round(math.abs(u2), 2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6jcnau8k.lua:39: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if (a < 0 and b < 0 and c < 0) or (a < 0 and c <\
    \ 0 and b < 0) or (b < 0 and c < 0 and a < 0) then\n        return -1\n    end\n\
    \    local triArea = math.sqrt(math.pow(a, 2) + math.pow(b, 2) + math.pow(c, 2))\n\
    \    if math.floor(triArea) == triArea then\n        return triArea\n    else\n\
    \        return triArea * 100\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrrbl2m6.lua:24:\
    \ expected: 6, actual: 707.10678118655\nstack traceback:\n\t/tmp/tmplrrbl2m6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif ( a > b ) then\n\t\tif ( a > c ) then\n\t\t\treturn\
    \ ( a + b ) / 2\n\t\telse\n\t\t\treturn ( c + b ) / 2\n\t\tend\n\telse\n\t\tif\
    \ ( b > c ) then\n\t\t\treturn ( a + c ) / 2\n\t\telse\n\t\t\treturn ( b + c )\
    \ / 2\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeesgis_c.lua:28:\
    \ expected: 6, actual: 4.5\nstack traceback:\n\t/tmp/tmpeesgis_c.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    local area = 0\n    \n    if a + b ~= c then return\
    \ -1 end\n    \n    if a + c ~= b then return -1 end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc8yw6p8z.lua:30: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    -- Based on http://www.mathalino.com/reviewer/reviewerdirect?v=2&rid=1911861\n\
    \    if (b == 0 and c == 0) and (a*a <= c*c) return 1\n    if (a == 0 and b ==\
    \ 0) or (a == 0 and c != 0) or (b == 0 and c != 0) \n            or (a == c and\
    \ b != c) return -1\n    return b*b - a*a*c\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg42x4r7d.lua:11: 'then' expected near 'return'\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    local area_a = 0\n    local area_b = 0\n    local\
    \ area_c = 0\n    if a + b > c then\n        area_a = b * b - 4 * a * c\n    \
    \    area_c = math.sqrt(area_a) / 4\n        area_b = math.sqrt(area_a) / 4\n\
    \    end\n    if a + c > b then\n        area_b = b * b - 4 * a * c\n        area_c\
    \ = math.sqrt(area_b) / 4\n    end\n    if b + c > a then\n        area_c = b\
    \ * b - 4 * a * c\n        area_a = math.sqrt(area_c) / 4\n    end\n    return\
    \ math.round(area_a / 2) + math.round(area_b / 2) + math.round(area_c / 2)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx94i3zno.lua:26:\
    \ attempt to call a nil value (field 'round')\nstack traceback:\n\t/tmp/tmpx94i3zno.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmpx94i3zno.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a == c and b == c then\n\t\treturn 0\n\telseif\
    \ a + b > c then\n\t\treturn -1\n\telseif b + c > a then\n\t\treturn -1\n\telse\n\
    \t\treturn (a * b) / c\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsz62_jvd.lua:24:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpsz62_jvd.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t-- Based on https://www.geometrictools.com/GTcalc.htm\n\
    \tif a + b <= c then \n\t\treturn 0\n\tend\n\tif a + c <= b then \n\t\treturn\
    \ 0\n\tend\n\tif b + c <= a then \n\t\treturn 0\n\tend\n\tlocal area = (a + b)\
    \ * 2.0\n\treturn area / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmponjuclne.lua:27:\
    \ expected: 6, actual: 7\nstack traceback:\n\t/tmp/tmponjuclne.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a >= b and a >= c then\n    return a * b * c\n\
    \  elseif b >= c and b >= a then\n    return (b - a) * (c - b)\n  elseif a >=\
    \ c and b >= c then\n    return b * b * c - (c - a)\n  else\n    return -1\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1fv7c__.lua:24:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpd1fv7c__.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    local area_a, area_b, area_c = (math.sqrt(a * a\
    \ + b * b), math.sqrt(c * c + a * a), math.sqrt(c * c + b * b))\n    if area_c\
    \ > area_a + area_b then\n        return area_c\n    else\n        return -1\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp378lv_n3.lua:10: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if b^2 + c^2 < a^2 then\n        -- There are no\
    \ triangles with sides less than or equal \n        -- than their respective lengths\n\
    \        return -1\n    else \n        local s = math.sqrt(b^2 + c^2 - a^2 * math.pow(b\
    \ + c, 2))\n        return roundto2(s)\n    end\nend\n</cell>\n<code language=julia-1.6>\n\
    # [!] This code cell allows you to plot a triangle given its sides\n# [!] A triangle\
    \ is valid when its sides form a triangle with sides greater than or equal to\
    \ the sum of its sides.\n# [!] To see how to plot a triangle see this link:\n\
    # [!] https://stackoverflow.com/questions/36307728/how-to-make-a-triangle-using-plot-in-julia\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9j_cgidk.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal area = 0\n\tif a + b > c and b + c > a and c\
    \ + a > b\n\tthen area = math.floor(a / b) * math.floor(a / c) * math.floor(b\
    \ / c)\n\telse area = -1\n\tend\n\treturn area\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnmw9kgs0.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpnmw9kgs0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal bx = b[1]\n\tlocal by = b[2]\n\tlocal bz = b[3]\n\
    \tlocal ax = a[1]\n\tlocal ay = a[2]\n\tlocal az = a[3]\n\tlocal bx = bx[1]\n\t\
    local by = by[1]\n\tlocal bz = bz[1]\n\tlocal ca = math.sqrt(a * a + b * b)\n\t\
    local sa = math.sqrt(a * a + z * z)\n\tlocal za = z * z\n\tlocal cb = math.sqrt(b\
    \ * b + z * z)\n\tlocal sz = math.sqrt(b * b + y * y)\n\tlocal cx = c[1]\n\tlocal\
    \ cy = c[2]\n\tlocal cz = c[3]\n\t\n\tlocal area_result\n\tif cb + cz > ca * cx\
    \ then\n\t\tarea_result = cx * sa + cy * cb + cz * sa\n\telseif cz + ca > ca *\
    \ cy then\n\t\tarea_result = cx * ca + cy * sa\n\telseif ca + cb > ca * sz then\n\
    \t\tarea_result = cx * ca + cy * ca + cz * cb\n\telse\n\t\tarea_result = -1\n\t\
    end\n\treturn tostring(area_result, \"%.2f\") \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0vuzp7i.lua:10:\
    \ attempt to index a number value (local 'b')\nstack traceback:\n\t/tmp/tmpa0vuzp7i.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpa0vuzp7i.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  assert(type(a) == 'number' and type(b) == 'number'\
    \ and type(c) == 'number')\n  local area = 0\n  if a + b > c then\n    if a +\
    \ c > b then\n      if b + c > a then\n        area = a * b * c\n      else\n\
    \        area = -1\n      end\n    else\n      area = -1\n    end\n  else\n  \
    \  area = -1\n  end\n  return math.round(area, 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm_jq815s.lua:25:\
    \ attempt to call a nil value (field 'round')\nstack traceback:\n\t/tmp/tmpm_jq815s.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpm_jq815s.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    local sumA = a + b\n    local sumB = b + c\n   \
    \ local sumC = a + c\n    if sumA > sumB and sumA > sumC then\n        return\
    \ sumA / 2\n    elseif sumB > sumA and sumB > sumC then\n        return sumB /\
    \ 2\n    elseif sumC > sumA and sumC > sumB then\n        return sumC / 2\n  \
    \  else\n        return -1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhrzs31d.lua:27:\
    \ expected: 6, actual: 4.5\nstack traceback:\n\t/tmp/tmpdhrzs31d.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if (a + b > c) then\n        return -1\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf6_12ntl.lua:28: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  -- Find out the length of the sides\n  local a = math.abs(a)\n\
    \  local b = math.abs(b)\n  local c = math.abs(c)\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcctsao3r.lua:29: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  return math.sqrt(a * a + b * b + c * c) --returns\
    \ float\nend\n</cell>\n<code language=julia-0.6>\n#== BEGIN SOLUTIONS ==#\n</cell>\n\
    <code language=julia-0.6>\n#== BEGIN SOLUTIONS ==#\n</cell>\n<text>\nExercise\
    \ 7\nThe circumcircle of a circle centered on the origin with radius $r$ is:\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4tqbz7ry.lua:12: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a + b > c and b + c > a and c + a > b then\n\t\t\
    return (a * b) / c\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4mrh6n6.lua:19:\
    \ expected: 6, actual: 2.4\nstack traceback:\n\t/tmp/tmpy4mrh6n6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal area = 0\n\tlocal a, b, c = a / 100, b / 100,\
    \  c / 100\n\tif b == 0 then\n\t\tif c == 0 then return 0\n\t\telse return a*a\n\
    \t\tend\n\telseif c == 0 then return -1\n\telseif a > c and a > b then return\
    \ a * a * 0.67\n\telse if a > c and a <= b then return a * a * 0.33\n\telse if\
    \ a <= b and b > c then return a * a * 0.33\n\telse return a * a * 0.25\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6lox6eay.lua:38: 'end' expected (to close 'if' at line 12)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a == 0 then return 0 end\n\tif b == 0 then return\
    \ 0 end\n\tif c == 0 then return 0 end\n\tif a + b > c then \n\t\treturn math.abs((b\
    \ * c - a * c) / b)\n\telseif c + d > a then\n\t\treturn math.abs((c - a * b)\
    \ / c)\n\telse\n\t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptu4mz8ik.lua:25:\
    \ expected: 6, actual: 1.25\nstack traceback:\n\t/tmp/tmptu4mz8ik.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    local bc = b - c\n    local ac = a - c\n    if (bc*bc)\
    \ > (ac*ac) then\n        return ((a + b + c) * 0.5) * 0.5\n    else\n       \
    \ return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp518y9t67.lua:22:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmp518y9t67.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n   if a + b > c or a + c > b or b + c > a then\n   \
    \   return -1\n   end\n   return (a + b + c) / 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm9wzd3z.lua:19:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmprm9wzd3z.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t-- Check valid triangle\n\tif a + b > c then return\
    \ -1 else return (a + b - c) * 0.5 end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_f4oe5c.lua:17:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpb_f4oe5c.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    local valid_sides = a >= b and b >= c\n    local\
    \ sum_sides = a + b + c\n    if valid_sides and sum_sides > (a or b or c) then\n\
    \        return round(sum_sides / 3.0)\n    end\n    return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmmxm1rp.lua:21:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpkmmxm1rp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n   if a < 0 or b < 0 or c < 0 then return -1 end\n \
    \  if a < b then \n      if a < c then \n         return (a+b+c)/2.0\n      else\
    \ \n         return ((b+c)*(a-c))/2.0\n      end\n   else \n      if b < c then\
    \ \n         return ((c*(a-b))+(a+b)*(c))/2.0 \n      else \n         return ((c*(a-b))+(a-b)*(c))/2.0\
    \ \n      end\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7oxlr5vh.lua:30:\
    \ expected: -1, actual: 6.5\nstack traceback:\n\t/tmp/tmp7oxlr5vh.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  -- Get the perimeter and length of the sides\n  local\
    \ perim = ((a + b) * 2 + c * 2) + (b * 2)\n  local length = ((c * b) * 2) + (a\
    \ * 2)\n  -- Calculate the area of the triangle\n  if a == b and b == c then\n\
    \    local result = (perim * length) / 2\n    return round(result, 2)\n  end\n\
    \  -- Check for a valid triangle\n  if b > c and length >= perim then\n    local\
    \ result = perim * math.sqrt(3) / 2\n    return round(result, 2)\n  end\n  return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposx1vwf_.lua:29:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmposx1vwf_.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif b == c then\n\t\treturn a\n\telseif b < c then\n\
    \t\treturn nil\n\telseif c < a then\n\t\treturn nil\n\tend\n\tlocal u = (a + b\
    \ + c) / 2.0\n\tlocal v = a - b + c\n\tlocal w = b * c - a * b\n\tlocal h = math.sqrt(w\
    \ * w + v * v + w * w * u)\n\t-- If the sides are colinear then it's an equilateral\
    \ triangle\n\tif h == 0 then\n\t\treturn w\n\tend\n\t-- If the sides are identical\
    \ then it's an isosceles triangle\n\tif h == u then\n\t\treturn v\n\tend\n\treturn\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbvdk__5.lua:35:\
    \ expected: 6, actual: nil\nstack traceback:\n\t/tmp/tmpkbvdk__5.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b > c then\n    return math.round(math.sqrt(math.pow(a,\
    \ 2) * math.pow(b, 2) - math.pow(c, 2)), 2)\n  elseif c + b > a then\n    return\
    \ math.round(math.sqrt(math.pow(a, 2) * math.pow(c, 2) - math.pow(b, 2)), 2)\n\
    \  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa3u6opex.lua:11:\
    \ attempt to call a nil value (field 'round')\nstack traceback:\n\t/tmp/tmpa3u6opex.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpa3u6opex.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal s = (a + b + c) / 2\n\tif a < b and b < c and\
    \ c < a then return s end\n\treturn -1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72slekw1.lua:18:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmp72slekw1.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a >= b and a >= c then return a * b\n  elseif b\
    \ >= c and b >= a then return b * c\n  elseif c >= a and c >= b then return c\
    \ * a\n  else return -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfayciyoc.lua:20:\
    \ expected: 6, actual: 15\nstack traceback:\n\t/tmp/tmpfayciyoc.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif b == 0 then return c end\n\tif a == 0 then return\
    \ b end\n\tif c == 0 then return a end\n\tif a + b > c and a + c > b and b + c\
    \ > a then \n\t\treturn a + b + c\n\tend\n\tif a + c > b and b + c > a then \n\
    \t\treturn a + b + c\n\tend\n\tif b + a > c and b + c > a then\n\t\treturn a +\
    \ b + c\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8p25oz23.lua:28:\
    \ expected: 6, actual: 12\nstack traceback:\n\t/tmp/tmp8p25oz23.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t--check for valid sides\n\tlocal valid_sides = a and\
    \ b and c\n\tif not valid_sides then\n\t\treturn -1\n\tend\n\t\n\t--check validity\
    \ of triangle by calculating area of 4 sides\n\tlocal area = a * b * c\n\t\n\t\
    --return area, rounded to 2 decimal points\n\treturn area\nend\n</cell>\n<cell>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp600g7c34.lua:22: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  -- Calculate area based on Heron's formula, see https://en.wikipedia.org/wiki/Heron%27s_formula\n\
    \  local s = (a + b + c) / 2\n  local area = math.sqrt(s * s - a * a - b * b -\
    \ c * c) * 0.5\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy_mdzwqw.lua:28: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if ((a + b) > c) and (a > b) and (c > a) and (c >\
    \ b) then return (a + b) * (c - b) / (b - a)\n  else return -1\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1d75ro20.lua:18:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmp1d75ro20.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if a + b > c then \n        local s = math.sqrt(math.pow((a\
    \ + b), 2) / (2 * math.pow(c, 2))) \n        return round(s, 2)\n    else if b\
    \ + c > a then \n        local s = math.sqrt(math.pow((b + c), 2) / (2 * math.pow(a,\
    \ 2))) \n        return round(s, 2)\n    else if c + a > b then \n        local\
    \ s = math.sqrt(math.pow((c + a), 2) / (2 * math.pow(b, 2))) \n        return\
    \ round(s, 2)\n    else return -1 end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxik3rdro.lua:36: 'end' expected (to close 'if' at line 10)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    local ab = a - b\n    local ac = b - c\n    if ab\
    \ * ac > 0 then\n        return math.floor(ab / ab * ac * 100) / 100\n    else\n\
    \        return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdmtmst7.lua:22:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpzdmtmst7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t-- We use a few local variables to make things a little\
    \ clearer.\n\tlocal b2 = b * b\n\tlocal c2 = c * c\n\tlocal ab2 = a * b\n\tlocal\
    \ bc2 = b * c\n\tlocal abc2 = a * c\n\tlocal d = math.sqrt(b2 + c2)\n\tif ab2\
    \ <= bc2 and ab2 <= abc2 then\n\t\treturn b / d\n\telseif bc2 <= ab2 and bc2 <=\
    \ abc2 then\n\t\treturn c / d\n\telseif abc2 <= ab2 and abc2 <= bc2 then\n\t\t\
    return a / d\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthncxemh.lua:30:\
    \ expected: 6, actual: 0.62469504755442\nstack traceback:\n\t/tmp/tmpthncxemh.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  return a*b*c / ((a+b+c) * (a+b) * (a+c))\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qnzsxl.lua:16:\
    \ expected: 6, actual: 0.089285714285714\nstack traceback:\n\t/tmp/tmpc1qnzsxl.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a + b > c then \n\t\tlocal h = math.sqrt((b * b)\
    \ - (c * c)) \n\t\tif h ~= 0 then\n\t\t\treturn math.round(math.sqrt(h * h), 2)\n\
    \t\telse\n\t\t\treturn -1\n\t\tend\n\telse\n\t\tif a + c > b then\n\t\t\tlocal\
    \ h = math.sqrt((b * b) - (c * c)) \n\t\t\tif h ~= 0 then\n\t\t\t\treturn math.round(math.sqrt(h\
    \ * h), 2)\n\t\t\telse\n\t\t\t\treturn -1\n\t\t\tend\n\t\telse\n\t\t\tif b + c\
    \ > a then\n\t\t\t\tlocal h = math.sqrt((b * b) - (c * c)) \n\t\t\t\tif h ~= 0\
    \ then\n\t\t\t\t\treturn math.round(math.sqrt(h * h), 2)\n\t\t\t\telse\n\t\t\t\
    \t\treturn -1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\treturn 0\n\t\t\tend\n\t\tend\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcnri9s11.lua:13:\
    \ attempt to call a nil value (field 'round')\nstack traceback:\n\t/tmp/tmpcnri9s11.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpcnri9s11.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n   if a < b + c then return -1 end\n   if a > b + c\
    \ then return 0 end\n   if a == b and a == c then return 0 end\n   return a +\
    \ b + c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qvnpibs.lua:19:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmp6qvnpibs.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a == b and c == b then \n    return a \n  elseif\
    \ a == c or b == c then \n    return -1\n  elseif a + b < c then \n    return\
    \ -1\n  else \n    return (b * c) - ((a * b) * (c - a))\n  end \nend\n \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vdnndro.lua:25:\
    \ expected: 6, actual: -4\nstack traceback:\n\t/tmp/tmp9vdnndro.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if a+b>c then\n        return (a+b+c)/2\n    elseif\
    \ a+c>b then\n        return (a+c+b)/2\n    elseif b+c>a then\n        return\
    \ (b+c+a)/2\n    elseif a+b+c>2*a then\n        return (a+b+c)/2\n    end\n  \
    \  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n  \
    \  lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ooeeh1_.lua:26:\
    \ expected: -1, actual: 6.5\nstack traceback:\n\t/tmp/tmp3ooeeh1_.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if b == 0 and a == c then return 0 end\n  if a ==\
    \ 0 then return 0\n  if c == 0 then return 0\n  else if b > a then b = b else\
    \ a = a end\n  else if b < c then b = c else c = b end\n  return (a * (b - c))/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkc0uq4h5.lua:12: 'end' expected (to close 'if' at line 11)\
    \ near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    -- The area of a triangle is always 0 if three sides\
    \ are equal\n    if a == b and b == c then return 0 end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd58px8pf.lua:27: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a==0 and b==0 and c==0 then return -1 end\n  if\
    \ a==0 and b==0 and c>0 then return c end\n  if a==0 and c==0 and b>0 then return\
    \ b end\n  if a>b and a>c then return (a+b+c)*0.5 end\n  if b>c and b>a then return\
    \ (b+c+a)*0.5 end\n  if c>a and c>b then return (c+a+b)*0.5 end\n  if a==b==c\
    \ then return 0 end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3uvclia5.lua:24:\
    \ expected: -1, actual: 6.5\nstack traceback:\n\t/tmp/tmp3uvclia5.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal area = 0\n\tlocal side_1 = 0\n\tlocal side_2\
    \ = 0\n\tlocal side_3 = 0\n\tlocal sign = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprj57kzj7.lua:30: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t-- Base Case\n\tif a == 0 and b == 0 and c == 0 then\n\
    \t\treturn 0\n\tend\n\t\n\t-- Decide which side is largest\n\tif a > b then\n\t\
    \tlargest = a\n\telse\n\t\tlargest = b\n\tend\n\t\n\tif c > largest then\n\t\t\
    largest = c\n\tend\n\t\n\t-- Compute the two other sides\n\tsmaller = largest\
    \ - c \n\t\n\t-- Compute the area \n\tarea = math.pi * math.pow((math.pow(smaller,\
    \ 2) / 2), 2)\n\treturn area\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8cnqnclo.lua:37:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp8cnqnclo.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t-- Handle invalid cases\n\tlocal sum = a + b + c\n\
    \tif sum < a then return -1 end\n\tif sum > b then return -1 end\n\tif sum > c\
    \ then return -1 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n  \
    \  lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzltb7pvk.lua:30: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    local area = 0\n    if b > c then\n        local\
    \ tmp = b\n        b = c\n        c = tmp\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx22f7mqu.lua:31: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if a + b > c and b + c > a and c + a > b\n     \
    \   then\n        return math.sqrt(math.pow(a - b, 2) + math.pow(b - c, 2) + math.pow(c\
    \ - a, 2))\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxkq5iau.lua:20:\
    \ expected: 6, actual: 2.4494897427832\nstack traceback:\n\t/tmp/tmplxkq5iau.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b > c then\n    return math.sqrt((b*b) - (4*a*c))\n\
    \  elseif a + c > b then\n    return math.sqrt((b*b) - (4*a*b))\n  elseif b +\
    \ c > a then\n    return math.sqrt((c*c) - (4*a*b))\n  else\n    return -1\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk08prwkm.lua:24:\
    \ expected: 6, actual: #NaN\nstack traceback:\n\t/tmp/tmpk08prwkm.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t-- If a + b > c return -1 else return the area of\
    \ a triangle\n\t-- Otherwise, return (a * b) / c\n\t-- The sum of a and b is greater\
    \ than c if b + c > a + b\n\t-- The area of a triangle is equal to ((b * b) -\
    \ (a * a))\n\treturn math.sqrt((b * b) - (a * a))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnor398p.lua:20:\
    \ expected: 6, actual: 2.6457513110646\nstack traceback:\n\t/tmp/tmpgnor398p.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal area = 0\n\tif a == 0 and b == 0 and c == 0\
    \ then\n\t\treturn -1\n\telseif a == 0 and b != 0 then\n\t\treturn b * c\n\telseif\
    \ b == 0 and c != 0 then\n\t\treturn a * c\n\telseif c == 0 then\n\t\treturn 0\n\
    \tend\n\tif a < b then\n\t\tif a < c then\n\t\t\tarea = a * b\n\t\telse\n\t\t\t\
    area = c\n\t\tend\n\telseif a < c then\n\t\tarea = b * c\n\telse\n\t\tarea = a\n\
    \tend\n\treturn round(area, 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3fww1_nx.lua:13: 'then' expected near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal area = 0\n\tlocal na, nb, nc = 3, 5, 7\n\tif\
    \ a + b <= c or a + c <= b then\n\t\treturn 0\n\telseif b + c <= a or a + c <=\
    \ b then\n\t\treturn 0\n\telseif a + b > c then\n\t\tna, nb, na = b, c, a\n\t\
    elseif a + c > b then\n\t\tna, nb, nc = c, b, a\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpigjpzn5r.lua:36: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a + b > c then\n\t\treturn 0\n\telseif a + c >\
    \ b then\n\t\treturn 0\n\telseif b + c > a then\n\t\treturn 0\n\telse\n\t\treturn\
    \ round(math.sqrt(a * b * c), 2)\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb67manqc.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpb67manqc.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  local area_a = (a + b + c) * 0.5\n  local area_b =\
    \ (b - a) * (b + c) * (a - c) * 0.5\n  local area_c = (c - a) * (b - a) * (c -\
    \ b) * 0.5\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbsdm7pfi.lua:28: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  a = math.abs(a)\n  b = math.abs(b)\n  c = math.abs(c)\n\
    \  if a == 0 then\n    if b == 0 then return c else return -1\n    else return\
    \ 0\n    end\n  elseif b == 0 then return 0\n  else return (a + b + c) / 2 * math.sqrt(3)\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n  \
    \  lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqaq8bicw.lua:15: 'end' expected (to close 'if' at line 14)\
    \ near 'else'\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if a == 0 then\n        if b == 0 then\n       \
    \     if c == 0 then\n                return 0\n            else\n           \
    \     return -1\n            end\n        else\n            if c > 0 then\n  \
    \              return 0\n            else\n                return -1\n       \
    \     end\n        end\n    else\n        if c > 0 then\n            if a + b\
    \ > c then\n                return 0\n            else\n                return\
    \ abs(a * b * 0.5 / c)\n            end\n        else\n            if b > 0 then\n\
    \                return 0\n            else\n                return -1\n     \
    \       end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2ith91z.lua:44:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpj2ith91z.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a<b and b<c then\n\t\treturn (b-a)*(c-b)\n\tend\n\
    \treturn -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n  \
    \  lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyvf23yr5.lua:19:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpyvf23yr5.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if a + b > c then\n        local a1 = math.abs(a\
    \ - (b+c))\n        local a2 = math.abs(b - c)\n        local a3 = math.abs(c\
    \ - b)\n        local a4 = math.max(a1,a2,a3)\n        return round(a4,2)\n  \
    \  else\n        if a + c > b then\n            local b1 = math.abs(b - (a+c))\n\
    \            local b2 = math.abs(c - a)\n            local b3 = math.abs(c - b)\n\
    \            local b4 = math.max(b1,b2,b3)\n            return round(b4,2)\n \
    \       else\n            if b + c > a then\n                local c1 = math.abs(c\
    \ - (b+a))\n                local c2 = math.abs(b - a)\n                local\
    \ c3 = math.abs(b - c)\n                local c4 = math.max(c1,c2,c3)\n      \
    \          return round(c4,2)\n            end\n        end\n    end\n    return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyogj5ju1.lua:15:\
    \ attempt to call a nil value (global 'round')\nstack traceback:\n\t/tmp/tmpyogj5ju1.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpyogj5ju1.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal s = a + b + c\n\tif s > a then return s end\
    \ -- invalid triangle - not an axis-aligned triangle\n\tif s == a then return\
    \ c end\n\tif s == b then return b end\n\tif s == c then return a end\n\tlocal\
    \ ab = a - b\n\tlocal bc = b - c\n\tlocal ca = c - a\n\treturn (ab * bc - ac *\
    \ ca) / (ab * bc + ac * bc) \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjsk5k5v2.lua:24:\
    \ expected: 6, actual: 12\nstack traceback:\n\t/tmp/tmpjsk5k5v2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal ab = a - b\n\tlocal ac = c - a\n\tif ab + ac\
    \ >= 0 then\n\t\treturn (ab + ac) * 0.5\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1pm22cyv.lua:21:\
    \ expected: 6, actual: 0.5\nstack traceback:\n\t/tmp/tmp1pm22cyv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  -- Return negative value if the two sides form a triangle\n\
    \  if not (a+b+c >= a) then return -1 end\n  if not (b+a+c >= b) then return -1\
    \ end\n  if not (a+c+b >= c) then return -1 end\n  \n  -- Sum all sides and subtract\
    \ if the sum of any two sides is greater than the third side\n  return math.abs(a\
    \ + b + c - a * c - b * b - a * b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvs9rdq50.lua:22:\
    \ expected: 6, actual: 31\nstack traceback:\n\t/tmp/tmpvs9rdq50.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif b > c then\n\t\treturn -1\n\telseif b <= 0 then\n\
    \t\treturn 0\n\telseif c <= 0 then\n\t\treturn 0\n\telseif a+b+c <= 0 then\n\t\
    \treturn -1\n\telse\n\t\treturn (b*b + c*c - a*a)/(2*b+c)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb59ri4do.lua:26:\
    \ expected: 6, actual: 2.4615384615385\nstack traceback:\n\t/tmp/tmpb59ri4do.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if b == c then\n        return a\n    end\n    if\
    \ a == 0 or b == 0 or c == 0 then\n        return -1\n    end\n    if a + b >\
    \ c then\n        return -1\n    end\n    if a + c > b then\n        return -1\n\
    \    end\n    if b + c > a then\n        return -1\n    end\n    return math.sqrt(a\
    \ * a + b * b + c * c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeumwftoc.lua:31:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpeumwftoc.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal s\n\tlocal bs, ac, bc, cs, ba = 0, 0, a, b,\
    \ c\n\twhile bs > 0 and ac > 0 and bc > 0 and cs > 0 and ba > 0 do\n\t\ts = (ba\
    \ + bc) * (ac - bs)\n\t\tbs = bs - ac\n\t\tbc = bc - ba\n\t\tcs = cs - bc\n\t\t\
    ac = ac - cs\n\t\tba = ba- bs\n\tend\n\tif s > 0 then\n\t\treturn s * 0.5\n\t\
    else\n\t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi3tdxph4.lua:20:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpi3tdxph4.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpi3tdxph4.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    return ((b*b + c*c - a*a) > (a*a + b*b))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmcsnioen.lua:16:\
    \ expected: 6, actual: true\nstack traceback:\n\t/tmp/tmpmcsnioen.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a < b and a < c then\n\t\treturn a * b\n\telseif\
    \ b < c and b < a then\n\t\treturn a * b + c * b\n\telseif c < a and c < b then\n\
    \t\treturn a * b + c * b\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25rlg9z_.lua:22:\
    \ expected: 6, actual: 12\nstack traceback:\n\t/tmp/tmp25rlg9z_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    local s = (b*b) + c\n    local d = 2*((b*b)-(s*a))\n\
    \    if d == 0 then\n        -- If the sides are all equal, return 0\n       \
    \ return 0\n    else\n        return ((b^2)-(2*a*s))/d\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp036xjfr2.lua:23:\
    \ expected: 6, actual: 1.1702127659574\nstack traceback:\n\t/tmp/tmp036xjfr2.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  local area_sum = 0\n  local a_sum = a + b\n  local\
    \ b_sum = a + c\n  local c_sum = b + c\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu_jhjfnl.lua:29: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a > b and a > c then\n\t\tif b > c then\n\t\t\t\
    return math.pow(a, 2) + (b * c) / 2\n\t\telse\n\t\t\treturn math.pow(a, 2) + b\
    \ * (c / 2)\n\t\tend\n\telseif b > c then\n\t\treturn math.pow(b, 2) + (c * a)\
    \ / 2\n\telse\n\t\treturn math.pow(c, 2) + a * (b / 2)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp263nxtvv.lua:26:\
    \ expected: 6, actual: 31\nstack traceback:\n\t/tmp/tmp263nxtvv.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a+b+c == 0 then\n    return -1\n  elseif a+b+c\
    \ > c then\n    return 0\n  else\n    return (((c*a) + (b*c)) / (a+b+c))\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71zh8zfe.lua:22:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp71zh8zfe.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  return (((b * b) - c * (a * a))) / math.sqrt(b * b)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbllv7z5r.lua:16:\
    \ expected: 6, actual: -7.25\nstack traceback:\n\t/tmp/tmpbllv7z5r.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal ab, bc, cd = a+b, a+c, b+c\n\tif ab == bc and\
    \ ab == cd then\n\t\treturn ab\n\telseif ab < bc and ab < cd then\n\t\treturn\
    \ ab * (bc / ab)\n\telseif bc < ab and bc < cd then\n\t\treturn bc * (ab / bc)\n\
    \telse\n\t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii_u0381.lua:25:\
    \ expected: 6, actual: 8\nstack traceback:\n\t/tmp/tmpii_u0381.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a <= 0 or b <= 0 or c <= 0 then\n\t\treturn -1\n\
    \tend\n\tif a + b > c or a + c > b or b + c > a then\n\t\treturn -1\n\tend\n\t\
    local s = a + b + c\n\tif s == 0 then\n\t\treturn 0\n\telseif s == 1 then\n\t\t\
    return b * c\n\telseif s == 2 then\n\t\treturn b + c\n\telse\n\t\treturn (b *\
    \ b) + (c * c)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptk7gphf_.lua:31:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmptk7gphf_.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\treturn ((a + b + c) ^ (a + c + b)) / (2.0 * (a + b\
    \ + c))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9uwkf01z.lua:16:\
    \ expected: 6, actual: 371504185344\nstack traceback:\n\t/tmp/tmp9uwkf01z.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b + c < a or a + c < b or b + c < a then return\
    \ -1 end\n  return ((a + b + c) / 2) * 0.25 -- Multiply by 0.25 because we have\
    \ rounded the area.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl89co_v.lua:17:\
    \ expected: 6, actual: 1.5\nstack traceback:\n\t/tmp/tmptl89co_v.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a >= b and a >= c then\n\t\treturn (b + c) / 2\n\
    \telseif b >= a and b >= c then\n\t\treturn (a * b + c) / 2 \n\telseif c >= a\
    \ and c >= b then\n\t\treturn (a * b + b * c) / 2 \n\telseif a == b and a == c\
    \ then\n\t\treturn a\n\telseif a == c or b == c then\n\t\treturn -1\n\tend\n\t\
    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpam2_spyf.lua:27:\
    \ expected: 6, actual: 16\nstack traceback:\n\t/tmp/tmpam2_spyf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    local s = a + b + c\n    if s == 0 then return -1\n\
    \    end\n    if s < 0 then return -1\n    end\n    local t = ((s - a + b - c)\
    \ ^ (s + b - c))\n    if t < 0 then return -1\n    end\n    return s * 0.5\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprcpu5lb3.lua:25:\
    \ expected: -1, actual: 6.5\nstack traceback:\n\t/tmp/tmprcpu5lb3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a == b or a == c then\n    return a\n  elseif b\
    \ == c then\n    return b\n  else\n    return (a * b) -- return area\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj80ha_en.lua:22:\
    \ expected: 6, actual: 12\nstack traceback:\n\t/tmp/tmpj80ha_en.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if (a+b > c) then\n        if (a+b+c > b+c) then\n\
    \            -- If (a + b + c) is greater than the sum of both b and c, then it\
    \ must be greater than the sum of a+b and c\n            return (a+b+c)\n    \
    \    else\n            -- If (a + b + c) is greater than the sum of b and c, then\
    \ it must be greater than the sum of a and c\n            return (b+c)\n     \
    \   end\n    else\n        if (a+c > b+c) then\n            -- If (a + b + c)\
    \ is greater than the sum of both a and c, then it must be greater than the sum\
    \ of a+b and c\n            return (a+b+c)\n        else\n            -- If (a\
    \ + b + c) is greater than the sum of c and b, then it must be greater than the\
    \ sum of a and b\n            return (c+b)\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzn6axjh.lua:32:\
    \ expected: 6, actual: 12\nstack traceback:\n\t/tmp/tmptzn6axjh.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    if a < b+c or b < a+c or c < a+b then\n        return\
    \ -1\n    end\n    local area_a = math.abs((math.pow(math.pow(a, 2) - math.pow(b,\
    \ 2), 0.5) + math.pow(math.pow(a, 2) - math.pow(c, 2), 0.5)))\n    local area_b\
    \ = math.abs((math.pow(math.pow(b, 2) - math.pow(a, 2), 0.5) + math.pow(math.pow(b,\
    \ 2) - math.pow(c, 2), 0.5)))\n    local area_c = math.abs((math.pow(math.pow(c,\
    \ 2) - math.pow(a, 2), 0.5) + math.pow(math.pow(c, 2) - math.pow(b, 2), 0.5)))\n\
    \    \n    if area_a < area_b + area_c then -- If the sum of the two sides is\
    \ greater than the third side then return area_a\n        return area_a\n    elseif\
    \ area_b < area_a + area_c then -- If the sum of the two sides is greater than\
    \ the third side then return area_b\n        return area_b\n    elseif area_c\
    \ < area_a + area_b then -- If the sum of the two sides is greater than the third\
    \ side then return area_c\n        return area_c\n    else -- Otherwise return\
    \ -1\n        return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9l1jn69i.lua:31:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmp9l1jn69i.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal c1 = (a + b > c and b + c > a and c + a > b\
    \ and a + b > c) or -1\n\tlocal c2 = (a + c > b and b + c > a and c + a > b and\
    \ a + c > c) or -1\n\tlocal c3 = (a + b > c and b + c > a and c + a > b and a\
    \ + c > c) or -1\n\treturn c1 + c2 + c3\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpftwjfk_c.lua:13:\
    \ attempt to perform arithmetic on a boolean value (local 'c1')\nstack traceback:\n\
    \t/tmp/tmpftwjfk_c.lua:13: in local 'candidate'\n\t/tmp/tmpftwjfk_c.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n   if a < b and a < c then return a \n   elseif b <\
    \ c and b < a then return b\n   elseif c < a and c < b then return c \n   else\
    \ return -1 end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n  \
    \  lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzz70t6tf.lua:19:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmpzz70t6tf.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a > b then\n\t\ta, b = b, a\n\tend\n\tif b > c\
    \ then\n\t\tb, c = c, b\n\tend\n\tif a + b > c then\n\t\treturn math.floor(a +\
    \ b / 2)\n\telseif a + c > b then\n\t\treturn math.floor(a + c / 2)\n\telseif\
    \ b + c > a then\n\t\treturn math.floor(b + c / 2)\n\telse\n\t\treturn -1\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphagwu3t5.lua:30:\
    \ expected: 6, actual: 5\nstack traceback:\n\t/tmp/tmphagwu3t5.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal d = 0\n\tif (b + c) > (a + b) then\n\t\td =\
    \ (b + c) - (a + b)\n\tend\n\t\n\treturn math.floor(d / 2) / 100\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnbjf6f3.lua:21:\
    \ expected: 6, actual: 0.01\nstack traceback:\n\t/tmp/tmpqnbjf6f3.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal a_Sum = a+b+c\n\tif a_Sum >= b then return (a+b)/2*b+c\
    \ end\n\tif a_Sum >= c then return (a+c)/2*c+b end\n\treturn -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi6f4tze8.lua:19:\
    \ expected: 6, actual: 19\nstack traceback:\n\t/tmp/tmpi6f4tze8.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t\n\tlocal s = 0.0\n\t\n\t-- Check valid triangle area\n\
    \t-- Check two sides\n\tif a + b > c then\n\t\ts = s + ((a - c) * ((a + b) / 2))\n\
    \tend\n\t\n\t-- Check two sides\n\tif a + c > b then\n\t\ts = s + ((a - b) * ((a\
    \ + c) / 2))\n\tend\n\t\n\t-- Check three sides\n\tif a + b + c > 0 then\n\t\t\
    s = s + ((a * b) + (c * b))\n\tend\n\t\n\t-- Round area to 2 decimal points\n\t\
    return round(s, 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl2zk_b9l.lua:30:\
    \ attempt to call a nil value (global 'round')\nstack traceback:\n\t/tmp/tmpl2zk_b9l.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpl2zk_b9l.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  local s = (a + b + c) / 2\n  if a <= b and b <= c\
    \ and c <= s then return s \n  else return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwjxlkal.lua:21:\
    \ expected: 8.18, actual: -1\nstack traceback:\n\t/tmp/tmpzwjxlkal.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t-- \"if\" is used to check if any argument is a number,\
    \ because \"tonumber\" throws an error if any of the arguments is not a number\n\
    \tif a == b then\n\t\treturn a\n\tend\n\tif a == c then\n\t\treturn b\n\tend\n\
    \tif b == c then\n\t\treturn a\n\tend\n\tlocal ab = math.sqrt(math.pow(a, 2) +\
    \ math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\t\
    local abc = math.pow(ab, 2) + math.pow(bc, 2)\n\tlocal area = abc / 2\n\treturn\
    \ round(area, 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_j1pb52c.lua:24:\
    \ attempt to call a nil value (global 'round')\nstack traceback:\n\t/tmp/tmp_j1pb52c.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp_j1pb52c.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  local area_a = a * b \n  local area_b = a + b\n  local\
    \ area_c = a + b + c\n  if area_b > area_c then\n    return area_b -- area of\
    \ triangle B is greater than area of triangle C\n  elseif area_c > area_b then\n\
    \    return area_c -- area of triangle C is greater than area of triangle B\n\
    \  else\n    return area_a -- area of triangle A and B are equal\n  end \nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp146bm6hj.lua:25:\
    \ expected: 6, actual: 12\nstack traceback:\n\t/tmp/tmp146bm6hj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n   if a < b + c then\n      return -1\n   end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0r75ei1x.lua:28: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  -- TODO: Use math.sqrt\n  if a+b+c <= 0 or a+c <=\
    \ 0 or b+c <= 0 then\n    return -1\n  else\n    return a*b*c/((a+b+c)::float)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3tn5l_y0.lua:14: ')' expected near '::'\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a + b > c and a + c > b and b + c > a then\n\t\t\
    return ((a + b + c) ^ 0.5) / 2\n\telse\n\t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyepxme0f.lua:20:\
    \ expected: 6, actual: 1.7320508075689\nstack traceback:\n\t/tmp/tmpyepxme0f.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n   assert(a > 0 and b > 0 and c > 0)\n   assert(a <=\
    \ b and b <= c)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnzn7frwv.lua:27: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  local s = 0\n  s = s + (b * b)\n  s = s + (a * c)\n\
    \  s = s + (a * b)\n  return math.round(s / (2.0 * math.pow((a + b + c), 0.5)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp18064atm.lua:14:\
    \ attempt to call a nil value (field 'round')\nstack traceback:\n\t/tmp/tmp18064atm.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp18064atm.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t-- Check validity of triangle a\n\tif a + b > c then\n\
    \t\treturn -1\n\tend\n\t-- Check validity of triangle b\n\tif a + c > b then\n\
    \t\treturn -1\n\tend\n\t-- Check validity of triangle c\n\tif b + c > a then\n\
    \t\treturn -1\n\tend\n\t-- Return area of triangle if sides add to 3\n\tlocal\
    \ area = 0.5 * (a + b + c)\n\tif area == a then\n\t\treturn area\n\telseif area\
    \ == b then\n\t\treturn area + a\n\telse\n\t\treturn area + a + b\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8l5is2bb.lua:36:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmp8l5is2bb.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal area, side1, side2, side3, side4 = 0, 0, 0,\
    \ 0, 0\n\tif a + b ~= c then\n\t\tside1 = c / a\n\t\tside2 = b / c\n\t\tside3\
    \ = b / a\n\t\tside4 = c / b\n\tend\n\tif side1 + side2 >= side3 then\n\t\tarea\
    \ = side4\n\telseif side1 + side2 <= side3 then\n\t\tarea = side2\n\telse\n\t\t\
    area = side1\n\tend\n\tlocal roundVal\n\tif area < 1 then\n\t\troundVal = 0\n\t\
    elseif area < 3 then\n\t\troundVal = 0.5\n\telseif area < 5 then\n\t\troundVal\
    \ = 1\n\telse\n\t\troundVal = 2\n\tend\n\treturn area * roundVal\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoom54kpb.lua:40:\
    \ expected: 6, actual: 0.625\nstack traceback:\n\t/tmp/tmpoom54kpb.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\t-- Get the lengths of each side\n\tlocal a = math.abs(a)\n\
    \tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\t\n\t-- If the sum of the two\
    \ sides is greater than the third side\n\tif a + b > c then\n\t\t-- Return the\
    \ area of the triangle rounded to 2 decimal points\n\t\treturn (a * b * c / 2)\
    \ / math.pi\n\telse\n\t\t-- Return -1\n\t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_yeoj2i.lua:28:\
    \ expected: 6, actual: 9.5492965855137\nstack traceback:\n\t/tmp/tmpd_yeoj2i.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  local s = (a + b + c) / 2\n  if a > b and a > c and\
    \ b > c then return s end -- a triangle is a valid triangle\n  if a + b < c and\
    \ c + b < a then return s end -- only a, b, or c is a valid triangle\n  if a +\
    \ c < b and b + c < a then return s end -- only a, b, or c is a valid triangle\n\
    \  if a + b > c and c + b > a then return s end -- only a, b, or c is a valid\
    \ triangle\n  if a + c > b and b + c > a then return s end -- only a, b, or c\
    \ is a valid triangle\n  if b > c and b > a then return s end -- only b or c is\
    \ a valid triangle\n  if c > a and c > b then return s end -- only a or c is a\
    \ valid triangle\n  if a + b > c and c + b > a then return s end -- only a, b,\
    \ or c is a valid triangle\n  if a + c > b and b + c > a then return s end --\
    \ only a, b, or c is a valid triangle\n  if c + b > a and b + c > a then return\
    \ s end -- only a or c is a valid triangle\n  if b > a and b > c then return s\
    \ end -- only b or c is a valid triangle\n  if c > a and c > b then return s end\
    \ -- only a or c is a valid triangle\n  if a + b > c and c + b > a then return\
    \ s end -- only a, b, or c is a valid triangle\n  if a + c > b and b + c > a then\
    \ return s end -- only a, b, or c is a valid triangle\n  if c + b > a and b +\
    \ c > a then return s end -- only a or c is a valid triangle\n  return -1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_6xbr_s.lua:33:\
    \ expected: -1, actual: 6.5\nstack traceback:\n\t/tmp/tmp0_6xbr_s.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  a = math.abs(a)\n  b = math.abs(b)\n  c = math.abs(c)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2980ulj5.lua:28: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    local s = math.abs(a*b + b*c + c*a)\n    if s >\
    \ 0.0 then\n        return s:round(2)\n    else\n        return -1.0\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpko8g2w73.lua:12:\
    \ attempt to index a number value (local 's')\nstack traceback:\n\t/tmp/tmpko8g2w73.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpko8g2w73.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif b < a then\n\t\ta,b = b,a\n\tend\n\tif c < b then\n\
    \t\tb,c = c,b\n\tend\n\t\n\tlocal area = 0\n\t\n\tif a > c then\n\t\tarea = (a+b+c)/2.0\n\
    \telseif b > c then\n\t\tarea = a/2.0\n\telse\n\t\tarea = c\n\tend\n\t\n\treturn\
    \ area, true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n  \
    \  lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_ukt6su.lua:33:\
    \ expected: 6, actual: 5\nstack traceback:\n\t/tmp/tmpx_ukt6su.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal s = math.abs(a + b + c)\n\treturn s if s ==\
    \ a or s == b or s == c then -1 else s/2 end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy1k0xyby.lua:11: 'end' expected (to close 'function' at line\
    \ 9) near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    local s = (a + b + c) / 2\n    if s >= ((a + b)\
    \ * (b + c) * (c + a)) then return s end\n    return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xpsjffn.lua:18:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmp7xpsjffn.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n    local s = 0.0\n    if a + b > c and b + c > a and\
    \ c + a > b then s = a + b - c end\n    return s * 0.5\nend\n</cell>\n<cell>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp14x72slo.lua:14: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  local ab = math.sqrt(math.pow(a,2) + math.pow(b,2))\n\
    \  local bc = math.sqrt(math.pow(b,2) + math.pow(c,2))\n  local ac = math.sqrt(math.pow(a,2)\
    \ + math.pow(c,2))\n  if ab + bc >= ac then\n    return ac - bc\n  else\n    return\
    \ ab - bc\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n\
    \    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpma31fzy9.lua:23:\
    \ expected: 6, actual: -0.57217234258755\nstack traceback:\n\t/tmp/tmpma31fzy9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal s = (a+b+c)/2\n\tif (s-a)*(a+b+c-s) > 0 then\n\
    \t\treturn s\n\telseif s*s > 0 then\n\t\treturn s\n\telse\n\t\treturn -1\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl53n30mq.lua:24:\
    \ expected: -1, actual: 6.5\nstack traceback:\n\t/tmp/tmpl53n30mq.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a<=b and b<=c then\n    return (b-a)/2\n  elseif\
    \ a<=b and c<=b then\n    return (a-b)*(c-b)\n  elseif a<=c and b<=c then\n  \
    \  return (a-c) * (b-c)\n  elseif a>b and a>c then\n    return (a-c)*(c-b)\n \
    \ elseif b > a and b>c then\n    return (b-c)*(a-c)\n  else\n    return -1\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthigosqo.lua:28:\
    \ expected: 6, actual: 0.5\nstack traceback:\n\t/tmp/tmpthigosqo.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tlocal result = a*b + a*c + b*c\n\tif result > a*c\
    \ then \n\t\treturn result / b\n\telse\n\t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(3,\
    \ 4, 5), 6.0)\n    lu.assertEquals(candidate(1, 2, 10), -1)\n    lu.assertEquals(candidate(4,\
    \ 8, 5), 8.18)\n    lu.assertEquals(candidate(2, 2, 2), 1.73)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), -1)\n    lu.assertEquals(candidate(10, 5, 7), 16.25)\n    lu.assertEquals(candidate(2,\
    \ 6, 3), -1)\n    lu.assertEquals(candidate(1, 1, 1), 0.43)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzlinely.lua:21:\
    \ expected: 6, actual: 11.75\nstack traceback:\n\t/tmp/tmpyzlinely.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  if a + b > c then return c else return -1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpye5vs4bk.lua:27: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n\tif a > b then a, b = b, a end\n\tif b > c then b,\
    \ c = c, b end\n\tif a + b > c then a, b, c = c, b, a end\n\treturn a * b * c\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tpksban.lua:19:\
    \ expected: 6, actual: 60\nstack traceback:\n\t/tmp/tmp6tpksban.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given the lengths of the three sides of a triangle. Return the area\
    \ of\n-- the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n-- Otherwise return -1\n-- Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n-- than the third side.\n-- Example:\n\
    -- triangle_area(3, 4, 5) == 6.00\n-- triangle_area(1, 2, 10) == -1\nlocal function\
    \ triangle_area(a, b, c)\n  -- Calculate sum of sides and test if greater than\
    \ side\n  local s = a + b + c\n  if s > a then return s end\n  -- Side length\
    \ is greater than sum of other sides, no triangle is possible\n  if s == a then\
    \ return -1\n  if s == b then return 1\n  if s == c then return 0 end\n  -- Side\
    \ length is greater than sum of other sides, no triangle is possible\n  if s ==\
    \ c then return -1\n  -- Side lengths greater than sums of other sides, return\
    \ area of triangle\n  local area = (s*(s-a)*(s-b)*(s-c)) / (a*b*c)\n  return area,\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
    \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwtrlbqqw.lua:15: 'end' expected (to close 'if' at line 14)\
    \ near 'if'\n"
  exit_code: 1
  status: Exception
