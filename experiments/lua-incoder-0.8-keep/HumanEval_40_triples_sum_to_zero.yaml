name: HumanEval_40_triples_sum_to_zero
language: lua
prompt: "-- triples_sum_to_zero takes a list of integers as an input.\n-- it returns\
  \ True if there are three distinct elements in the list that\n-- sum to zero, and\
  \ False otherwise.\n-- >>> triples_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n-- True\n-- >>> triples_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
  \ triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n-- True\n-- >>> triples_sum_to_zero([1])\n\
  -- False\nlocal function triples_sum_to_zero(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triples_sum_to_zero\n\
  \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, 5, -1}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({1, 2, 5, 7}), false)\n    lu.assertEquals(candidate({2,\
  \ 4, -5, 3, 9, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, 5, -100}), false)\n    lu.assertEquals(candidate({100, 3, 5, -100}), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal n = 0\n\tfor i = 1, #l do\n\t\tn = n + l[i]\n\t\tif n == 0\
    \ then return false end\n\tend\n\treturn true\nend", "  for i = 0, #l - 1 do\n\
    \    local a, b, c = l[i], l[i + 1], l[i + 2]\n    if a + b > 0 and a + c > 0\
    \ and b + c > 0 then\n      return false\n    end\n  end\n  return true\nend",
  "  local i = 0\n  local n = 1\n  local sum = 0\n  while i <= #l do\n    sum = sum\
    \ + l[i]\n    if sum > 0 then\n      n = n + 1\n      sum = sum - l[i]\n    end\n\
    \    i = i + 1\n  end\n  return n == 3\nend", "  local triple\n  for triple in\
    \ pairs(l) do\n    -- check each number in the triple.\n    for i = 1, 3 do\n\
    \      -- if the sum of any two numbers in the triple is zero, return true.\n\
    \      if l[triple[i] + triple[i + 1]] == 0 then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "\tlocal triples, sum, triples_sum\n\t\
    triples = table.new(l)\n\ttriples_sum = {}\n\tsum = 0\n\tfor _, elem in ipairs(triples)\
    \ do\n\t\tif elem>0 then\n\t\t\tsum = sum + elem\n\t\t\ttriples_sum[sum] = true\n\
    \t\telseif elem<0 then\n\t\t\tsum = sum - elem\n\t\t\ttriples_sum[sum] = true\n\
    \t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\tfor _, value in pairs(triples_sum)\
    \ do\n\t\tif value == false then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn\
    \ false\nend", "  for _,v in ipairs(l) do\n    for i = 1, 3 do\n      if v + i\
    \ <= 0 then\n        return false\n      elseif v + i > 0 then\n        return\
    \ true\n      end\n    end\n  end\nend", "  assert(is_table(l))\n  return next(triples_sum_to_zero_helper(l,\
    \ table.remove(l, 1)))\nend", "    for i = 1, #l do\n        local t = l[i] +\
    \ l[i - 1] + l[i + 1]\n        if t ~= 0 then\n            return false\n    \
    \    end\n    end\n    return true\nend", "   local sum = 0\n   local n = #l\n\
    \   for i = 1, n do\n      sum = sum + l[i]\n      if sum < 0 then\n         return\
    \ False\n      end\n   end\n   return (sum == 0)\nend", "  local s = #l\n  local\
    \ n = 1\n  while s ~= 1 do\n    s,n = s/3,n+1\n  end\n  return #l==3 and l[1]==0\
    \ and l[2]==0 and l[3]==0\nend", "  local s = #l\n  local index = 1\n  while s\
    \ ~= 0 do\n    local first_num = l[index]\n    index = index + 1\n    local second_num\
    \ = l[index]\n    index = index + 1\n    local third_num = l[index]\n    if first_num\
    \ + second_num == 0 and third_num == 0 then\n      return true\n    end\n    s\
    \ = s - 1\n  end\n  return false\nend", "  local n = #l\n  for i = 1, n do\n \
    \   local a, b = 0, i - 1\n    while b < n do\n      if l[b] + l[a] + l[b + 1]\
    \ == 0 then\n        return false\n      else\n        a = b + 1\n      end\n\
    \      b = b - 1\n    end\n  end\n  return true\nend", "   local i = 1\n   local\
    \ s = 0\n   while i <= #l do\n      s = s + l[i]\n      i = i + 1\n      if s\
    \ == 0 then\n         return true\n      elseif s == 3 then\n         return false\n\
    \      end\n   end\nend", "  local result = true\n  for i = 1, #l do if sum( unpack(l,\
    \ 1, i) ) ~= 0 then result = false break end end\n  return result\nend", "   \
    \ local t = {}\n    for _, i in pairs(l) do t[i] = i end\n    for i = 1, #l do\
    \ if t[i] == i then return true end end\n    return false\nend", "   if #l < 3\
    \ then\n      return false\n   else\n      return ((l[1] + l[2] + l[3]) == 0)\n\
    \   end\nend", "  return #l == 3 and\n    math.abs(l[1] - l[2]) == 0 and\n   \
    \ math.abs(l[2] - l[3]) == 0\nend", "   if #l == 0 then return false end\n   local\
    \ s = l[0]\n   for i = 1, #l do\n      s = s + l[i]\n      if s == 0 then return\
    \ false end\n   end\n   return true\nend", "   local s = 0\n   for _, el in ipairs(l)\
    \ do\n      if el == 0 then return false end\n      if s == 0 then\n         s\
    \ = el\n      else\n         s = s - el\n      end\n   end\n   return s == 0\n\
    end", "   local total = 0\n   for _, e in pairs(l) do total = total + e end\n\
    \   return total < 0 and false or true\nend", "  if l == nil then return false\
    \ end\n  local sum = 0\n  for _, v in ipairs(l) do\n    sum = sum + v\n    if\
    \ sum > 0 then return false end\n  end\n  return true\nend", "  local s = 0\n\
    \  for i,v in ipairs(l) do\n    s = s + v\n    if s == 0 then\n      return true\n\
    \    end\n  end\n  return false\nend", "  local num_elements = #l\n  if num_elements\
    \ == 0 then return false end\n  local cur_sum = 0\n  local has_triple = false\n\
    \  for i = 1, num_elements do\n    cur_sum = cur_sum + l[i]\n    if cur_sum >\
    \ 0 then\n      has_triple = true\n    end\n  end\n  return has_triple\nend",
  "  assert(type(l) == 'table')\n  assert(#l >= 3)\n  local function triples_sum_to_zero(l,i,sum)\n\
    \    if i == #l then\n      return sum == 0\n    end\n    local el = l[i]\n  \
    \  sum = sum + el\n    if sum > 0 then\n      if not triples_sum_to_zero(l,i+1,sum)\
    \ then\n        return false\n      end\n    end\n    sum = sum - el\n    if sum\
    \ > 0 then\n      if not triples_sum_to_zero(l,i,sum) then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return triples_sum_to_zero(l,1,0)\n\
    end", "  for i = 1, #l do\n    if l[i - 1] + l[i - 2] + l[i - 3] == 0 then\n \
    \     return true\n    end\n  end\n  return false\nend", "  if #l < 3 then\n \
    \   return false\n  end", "  local r = 0\n  for i = 1, #l do r = r + l[i] end\n\
    \  local n = #l\n  for i = 1, #l do\n    local nxt = n - i\n    local t = r +\
    \ l[nxt]\n    if t == 0 then\n      return true\n    end\n    r = t\n  end\n \
    \ return false\nend", "  local n = 3\n  while n > 0 do\n    local count = 0\n\
    \    for i = 1, n do\n      count = count + l[i]\n      if count >= 3 then\n \
    \       return false\n      end\n    end\n    n = n - 1\n  end\n  return true\n\
    end", "  local a, b, c = unpack(l)\n  return b == c and b == c - a and b == c\
    \ - a + a\nend", "   assert(type(l) == 'table')\n   assert(#l >= 1)\n   local\
    \ sum = 0\n   for i = 1, #l do\n      sum = sum + l[i]\n      if sum == 3 then\n\
    \         return true\n      end\n   end\n   return false\nend", "  local i\n\
    \  local nums", "    if l == nil then return end\n    local count = 0\n    for\
    \ i=1,#l do\n        if l[i] ~= 0 and l[i] + l[i+1] + l[i+2] == 0 then\n     \
    \       count = count + 1\n        end\n    end\n    return #l == 3 and not count\n\
    end", "  assert(#l == 3, 'Passed in list is not of size 3!')\n  local a = l[1]\n\
    \  local b = l[2]\n  local c = l[3]\n  return (b + c == 0) or (b + c == -1) or\
    \ (c + a == 0)\nend", "    local c1, n = 1, #l\n    while n > 0 do\n        if\
    \ l[c1] + l[c1 + 1] + l[c1 + 2] <= 0 then return false end\n        c1 = c1 +\
    \ 3\n        n = n - 3\n    end\n    return true\nend\n</cell>\n<text>\nThe list\
    \ comprehension expression for sum is as follows", "  local threesums = { }\n\
    \  for i = 1, #l do\n    local v = l[i]\n    if v > 0 then\n      if v + v in\
    \ threesums then\n        threesums[v + v] = true\n      else\n        threesums[v]\
    \ = true\n      end\n    end\n  end\n  for _, v in ipairs(threesums) do\n    if\
    \ v > 1 then return false end\n  end\n  return true\nend", "    local zeros =\
    \ 0\n    for i = 1, #l do zeros = zeros + l[i] end\n    return #l == 3 and zeros\
    \ == 0\nend", "  local s = 0 -- sum\n  local n = #l -- count\n  for i = 1, n do\n\
    \    s = s + l[i]\n  end\n  return n == 1 and s == 0\nend", "  local a, b, c =\
    \ unpack(l)\n  if a < 0 then\n    return false\n  elseif b < 0 and c < 0 then\n\
    \    return true\n  elseif b < 0 and c > 0 then\n    return false\n  elseif b\
    \ > 0 and c < 0 then\n    return true\n  elseif b > 0 and c > 0 then\n    return\
    \ false\n  elseif b > 0 and c > a and c > b then\n    return false\n  else\n \
    \   return true\n  end\nend", "  local n = 1\n  for i = 1, #l do\n    n = n *\
    \ i + (l[i] or 0)\n  end\n  local d = 1\n  repeat\n    local p = n / 3\n    local\
    \ q = n % 3\n    n = p * p + q * q\n    d = d * (p > q or p == 0 and q == 0)\n\
    \  until n == 0\n  return d == 0\nend", "    -- This could be more efficient if\
    \ we had a pairs table in Lua.\n    local threes = setmetatable({}, {__mode=\"\
    k\"})\n    for i=1,#l do threes[l[i]] = true end\n    return #l == 3 and not #threes\n\
    end", "  for i, x in ipairs(l) do\n    local sum = 0\n    for _, y in ipairs(l)\
    \ do\n      if y ~= x then\n        sum = sum + 1\n      end\n    end\n    if\
    \ sum == 3 then\n      return true\n    end\n  end\n  return false\nend", "  --\
    \ Your code here\nend", "  for i = 1, #l do\n    if l[i] == l[i] and l[i] == l[i]\
    \ then\n      -- If two elements are equal, sum to zero.\n      return false\n\
    \    end\n  end\n  return true\nend", "  if #l < 3 then return false end\n  local\
    \ a, b, c = unpack(l)\n  for i = 1, #l do -- make sure only the first two numbers\
    \ are being used\n    if l[i] == c then return false end\n  end\n  local sum =\
    \ a + b + c\n  return sum == 0\nend", "  -- Write your code here.\n  assert(#l\
    \ == 3) or return false", "  local seen = {}\n  local result", "  local new_l\
    \ = {}\n  for i, v in ipairs(l) do\n    if v == 0 then break end\n    table.insert(new_l,\
    \ v)\n  end\n  return #new_l == 3\nend", "  -- return true if there are exactly\
    \ three distinct elements that sum to zero\n  return #l == 3 and l[#l] == 0 and\
    \ l[#l - 1] == 0 and l[#l - 2] == 0\nend", "  assert(type(l) == \"table\")\n \
    \ local t = 0\n  local hasCount = 0\n  local hasZero = 0\n  for _, v in pairs(l)\
    \ do\n    if v == 0 then\n      hasZero = 1\n    else\n      t = t + v\n     \
    \ hasCount = hasCount + 1\n    end\n  end\n  if hasCount == 3 then\n    return\
    \ true\n  else\n    return false\n  end\nend", "  for i=1,#l do\n    if l[i] +\
    \ l[i+1] + l[i+2] ~= 0 then\n      return true\n    end\n  end\n  return false\n\
    end", "   for i = 1, 3 do\n      if trip_sum(l) == 0 then\n         return true\n\
    \      end\n      local last = l[i]\n      while i < #l do\n         if l[i] <\
    \ last then\n            if last + l[i+1] + l[i+2] == 0 then\n               return\
    \ true\n            end\n         else\n            last = last\n         end\n\
    \         i = i + 2\n      end\n   end\n   return false\nend\n</cell>\n<text>\n\
    Tests\nLet's write some unit tests to check our function.", "    -- base case\n\
    \    if #l < 3 then\n        return false\n    end", "  local s = nil\n  for _,\
    \ s in ipairs(l) do\n    s = s - s + s\n    if s == 0 then\n      return true\n\
    \    end\n  end\n  return false\nend", "  if #l < 3 then return false end\n  local\
    \ i = 1\n  while i < #l do\n    if l[i] + l[i - 1] + l[i + 2] > 0 then\n     \
    \ return false\n    end\n    i = i + 1\n  end\n  return true\nend", "  local r\
    \ = {l[1], l[2], l[3]}\n  local sum = 0\n  for i=1,#r do\n    sum = sum + r[i]\n\
    \    if sum == 3 then\n      return true\n    end\n  end\n  return false\nend",
  "  local n = 1\n  -- The first three elements are the integers 1, 2, 3\n  for i\
    \ = 1, 3 do\n    -- We add n (the previous sum) to each of the next three numbers\n\
    \    n = n + l[i]\n  end\n  return n == 0\nend", "  local l1 = assert(loadstring(tostring(l)),\
    \ \"cannot convert list to string\")()\n  local n = #l1 -- get the length of l1\n\
    \  local sum = n -- initialize sum to the number of elements in l1\n  local found\n\
    \  local i = 1\n  while i <= n do\n    found = false -- initialize found to False\n\
    \    for ii = i do -- loop over the elements of l1\n      local ix = i - ii --\
    \ calculate the index of each element of l1\n      sum = sum + l1[ix] -- add the\
    \ first element to sum\n      if sum < 0 then -- if the sum is negative then we\
    \ know that l1 is not\n                       -- a permutation of the set {0,1,2,3,4,5,6,7}\n\
    \        found = true\n        break\n      end\n      if sum == 0 then -- if\
    \ the sum has reached zero, it is guaranteed that\n                       -- l1\
    \ is a permutation of the set\n                        -- {0,1,2,3,4,5,6,7}\n\
    \        found = true\n        break\n      end\n    end\n    if found then break\
    \ -- exit the inner loop if a permutation has been found\n  end\n  return found\n\
    end", "  if #l == 0 then return false end\n  if #l == 1 then return l == 0 end\n\
    \  if #l == 2 then\n    if l[1] == l[1] then return false end\n    return true\n\
    \  end\n  local sum = 0\n  local i = 0\n  for _, x in ipairs(l) do\n    sum =\
    \ sum + x\n    if sum > 0 then\n      local j = i\n      for j = i + 1, #l do\n\
    \        if sum - l[j] ~= 0 then\n          return false\n        end\n      end\n\
    \    end\n    i = i + 1\n  end\n  return true\nend\n</cell>\n<text>\n2.3 Set functions\n\
    Sets are unordered collections of unique elements. Let's have a look at some set\
    \ operations:", "  local i = 1\n  local sum = 0\n  while i < #l do\n    sum =\
    \ sum + l[i]\n    if sum > 0 then\n      i = i + 1\n    else\n      return true\n\
    \    end\n  end\n  return false\nend", "    local v = 0\n    for _, v in ipairs(l)\
    \ do\n        if v + v == 0 then return true end\n    end\n    return false\n\
    end", "    for _, x in ipairs(l) do\n        if x == 0 then\n            return\
    \ true\n        end\n    end\n    return false\nend", "  -- write your solution\
    \ here\n  if l==nil then return false end\n  if #l == 0 then return true end\n\
    \  if l[1-1] > 0 then\n    return triples_sum_to_zero(unpack(l:sublist(2)))\n\
    \  else\n    return triples_sum_to_zero(unpack(l:sublist(1)))\n  end\nend", " \
    \ local i = 1\n  while i <= #l do\n    local k = i + 3\n    while k <= #l do\n\
    \      if math.abs(l[i] - l[k]) == 0 then\n        return true\n      end\n  \
    \    k = k + 1\n    end\n    i = i + 1\n  end\n  return false\nend", "  local\
    \ num = 0\n  local last = 0\n  for i = 1, #l do\n    local current = l[i]\n  \
    \  num = num + current\n    if num == 0 then\n      if last == 0 then\n      \
    \  return false\n      end\n      last = current - 1\n      num = 1\n    end\n\
    \  end\n  return true\nend", "    local s = 0\n    for _, x in ipairs(l) do\n\
    \        if x < 0 or s ~= x then\n            s = x\n        end\n    end\n  \
    \  if s == 0 then\n        return false\n    elseif s == -1 then\n        return\
    \ true\n    end\nend", "  if #l < 3 then return false end\n  return #l == 3 and\
    \ #l[{{0, 2, 1}}] == 0 and\n         #l[{{1, 3}}] == 0 and #l[{{1, 2}}] == 0\n\
    end", "  local sum = 0\n  for i = 1, #l do\n    sum = sum + l[i]\n    if sum >\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend", "  for i =\
    \ 1, #l do\n    local s = l[i] + l[i + 1] + l[i + 2]\n    if s == 0 then return\
    \ false end\n    if s == -3 then return true end\n  end\n  return false\nend",
  "  -- We use two nested loops here, one for the elements in the list and\n  -- another\
    \ for checking the triples' sum to zero.\n  for _, elt in ipairs(l) do\n    for\
    \ i = 1, #l do\n      -- If each element in the list is divisible by the previous\
    \ one, then\n      -- we can conclude that sum is zero.\n      if elt % l[i] ==\
    \ 0 then\n        return false\n      end\n    end\n  end\n  return true\nend",
  "    local result = true\n    for i = 1, #l do\n        local n = l[i]\n       \
    \ if n ~= nil then\n            local j\n            for j = i + 1, #l do\n  \
    \              if l[j] == n and l[i] ~= nil and l[j] ~= n then\n             \
    \       result = false\n                end\n            end\n        end\n  \
    \  end\n    return result\nend", "  local n = 0\n  local v = 0\n  local t = {}\n\
    \  for i, v in pairs(l) do\n    if v ~= 0 then\n      n = v\n    else\n      if\
    \ n ~= 0 then\n        t[n] = true\n      end\n    end\n  end\n  return #t ==\
    \ 3\nend", "  if #l == 0 then return false end\n  local n = l[1]\n  for i = 2,\
    \ #l do\n    n = n + l[i]\n    if n == 0 then\n      if not triples_sum_to_zero(l:sub(1,i))\
    \ then\n        return false\n      end\n    end\n  end\n  return true\nend",
  "    local s = 0\n    local k = 1\n    for i = 1, #l do\n        s = s + l[i]\n\
    \        -- If we've found three consecutive elements, no zeroes in our list\n\
    \        if k == 3 and s == 0 then\n            return false\n        end\n  \
    \      -- If we're at the end of our list, we found three distinct elements\n\
    \        if i == #l then\n            k = k + 1\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nNext, we will write a function that takes a list\
    \ of integers, and then returns a list containing all of the unique elements of\
    \ this list. That is, we should have a function that, given a list of integers,\
    \ returns a list of all of the elements in the list that appear only once.", " \
    \ for _, v in pairs(l) do\n    if v == 0 then\n      return false\n    end\n \
    \ end\n  return true\nend", "  local num_triples = 0\n  local num_zero = 0\n \
    \ local num_nonzero = 0\n  for i, v in pairs(l) do\n    local s = v\n    if s\
    \ == 0 then num_zero = num_zero + 1 end\n    if s > 0 then num_triples = num_triples\
    \ + 1 end\n    if s == 0 or s == -1 then num_nonzero = num_nonzero + 1 end\n \
    \ end\n  return num_triples == 3 and not (num_zero > num_nonzero or\n        \
    \                         num_zero == 1 and num_nonzero > 1)\nend", "  local seen\
    \ = {}\n  for i = 1, #l do\n    local val = l[i]\n    if seen[val] == nil then\n\
    \      seen[val] = true\n      if val == 0 then\n        return true\n      else\n\
    \        return false\n      end\n    end\n  end\n  return false\nend", "    local\
    \ s = sum(l)\n    local count = 0\n    for index, i in pairs(l) do\n        if\
    \ i == 0 then return false end\n        if i > 0 then\n            if i > s then\n\
    \                return false\n            end\n            count = count + 1\n\
    \        end\n    end\n    if count == 3 then return true end\n    return false\n\
    end", "   local n = #l\n   for i = 1, n - 1 do\n      for j = i + 1, n - 1 do\n\
    \         if l[i] + l[j] == 0 then return true end\n      end\n   end\n   return\
    \ false\nend", "  local c1 = {}\n  local c2 = {}\n  for _, x in ipairs(l) do c1[x]\
    \ = true end\n  for _, x in ipairs(l) do c2[x] = true end\n  if #c1 < 3 or #c2\
    \ < 3 then return false end\n  local zero = nil\n  for _, x in ipairs(l) do\n\
    \    if c1[x] and c2[x] then\n      if not zero then\n        zero = x\n     \
    \ else\n        zero = false -- break out of both loops\n      end\n    end\n\
    \  end\n  return true\nend", "  if l == nil then\n    return nil\n  end\n  local\
    \ t = 0\n  local c = {}\n  for i = 1, #l do\n    local e = l[i]\n    if e == nil\
    \ then\n      t = 0\n    else\n      t = t + e\n    end\n  end\n  for i = 1, #l\
    \ do\n    if l[i] == nil then\n      if t > 0 then\n        if c[t] == nil then\n\
    \          c[t] = 1\n        else\n          c[t] = c[t] + 1\n        end\n  \
    \    else\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  local first = table.unpack(l)\n  local second = first[1]\n  local third = second[1]\n\
    \  local sum = third[1]\n  local zeros = 0\n  local i = 1\n  while i <= #l do\n\
    \    local cur_sum = sum[1]\n    local cur_second = second[1]\n    local cur_third\
    \ = cur_second[1]\n    sum = cur_sum[1]\n    if cur_third[1] then\n      if cur_third[1]\
    \ ~= cur_second[1] then\n        local cur_zeros = cur_third[1]\n        if cur_zeros\
    \ > zeros then\n          return false\n        end\n        zeros = cur_zeros\n\
    \      end\n    else\n      zeros = zeros + 1\n    end\n    first = table.unpack(first)\n\
    \    second = first[1]\n    third = second[1]\n    i = i + 1\n  end\n  return\
    \ true\nend", "   local n_triples = #l > 0 and (#l  / 3) or 0\n   if n_triples\
    \ == 0 then\n      return false\n   end\n   if n_triples < 3 then\n      return\
    \ true\n   end\n   local l_sum = sum(l)\n   local n_distinct = 0\n   for i = 1,\
    \ n_triples do\n      local e_1 = l[i]\n      for j = 1, n_triples do\n      \
    \   local e_2 = l[j]\n         if e_1 != e_2 then\n            local sum_ = e_1\
    \ + e_2\n            if sum_ == 0 then\n               return false\n        \
    \    end\n            if n_distinct == j then\n               return true\n  \
    \          end\n            n_distinct = j\n         end\n      end\n   end\n\
    end", "  local c1, c2, c3 = {}, {}, {}\n  local s = math.abs(l[2])\n  for i =\
    \ 1, #l do\n    local v = l[i]\n    table.insert(c1, v)\n    table.insert(c2,\
    \ v)\n    table.insert(c3, v)\n  end\n  table.sort(c1)\n  table.sort(c2)\n  table.sort(c3)\n\
    \  return #c1 == 3 and\n    not (c1[1] == c2[1] and c1[2] == c3[2]) and\n    not\
    \ (c1[1] == c3[1] and c2[2] == c3[2]) and\n    not (c1[2] == c2[1] and c3[1] ==\
    \ c2[2]) and\n    not (c1[2] == c3[1] and c3[2] == c2[2])\nend", "    local zeros\
    \ = 0\n    local triples = 0\n    for _, x in ipairs(l) do\n        if x == 0\
    \ then zeros = zeros + 1 else triples = triples + 1 end\n    end\n    return zeros\
    \ > 0 and triples == 3\nend", "  local s = sum(l)\n  return s == 0 and math.min(l)\
    \ == -2 and math.max(l) == -3 and\n    not ((s == 0) or (s == 1) or (s == 2) or\
    \ (s == 3))\nend", "  -- The first and last elements of l have different signs,\
    \ so the sum\n  -- between them is the same as the sum of any two consecutive\
    \ elements\n  -- of the list.\n  local a, b, c, n = l[1], l[#l], -l[1], -l[#l]\n\
    \  for i = 2, #l do\n    a, b, c, n = a + (n * b), c, n * (c), n\n  end\n  return\
    \ a == 0 and b == 0 and c == 0 and n == 0\nend", "  local results = {}\n  for\
    \ _, t in pairs(l) do\n    local found = false\n    for j = 1, #l do\n      found\
    \ = found or t + l[j] ~= 0\n    end\n    if found then\n      table.insert(results,\
    \ t)\n    end\n  end\n  return #results == 3\nend", "  for i, v in pairs(l) do\n\
    \    local v0, v1 = v - 3, v + 3\n    if v0 ~= nil and v1 ~= nil then\n      if\
    \ v0 == 0 and v1 == 0 then\n        return true\n      end\n    end\n  end\n \
    \ return false\nend", "  if #l == 0 then return false end\n  local i = 1\n  while\
    \ i <= #l do\n    local sum = 0\n    for j = 1, #l do\n      sum = sum + l[j]\n\
    \      if sum > 0 then\n        return false\n      end\n    end\n    i = i +\
    \ 1\n  end\n  return true\nend", "  assert(#l == 3, \"'l' should contain exactly\
    \ three elements.\")\n  return #l == 3 and\n         l.[1] == l.[2] and\n    \
    \     l.[2] == l.[3] and -- these three elements are the same as the sum\n   \
    \      l.[1] == 0 -- this element equals zero to ensure that the sum is zero\n\
    end", "  local i, sum = 0, 0\n  for i = 1, #l do sum = sum + l[i] end\n  return\
    \ sum == 0 and i > 2 or sum > 0 and (sum % 3 == 0)\nend", "  local num = {}\n\
    \  local sum = 0\n  for _, e in ipairs(l) do\n    sum = sum + e\n    table.insert(num,\
    \ sum)\n  end\n  for i=1,#l do\n    if num[i] == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local sum = 0\n  local three_count =\
    \ 0\n  for i, e in ipairs(l) do\n    sum = sum + e\n    if sum > 0 then\n    \
    \  if three_count == 0 then\n        three_count = 1\n      elseif three_count\
    \ == 1 then\n        three_count = 2\n      elseif three_count == 2 then\n   \
    \     three_count = 3\n      end\n    end\n  end\n  return three_count == 3\n\
    end", "  -- If the list is empty, no triples sum to zero.\n  if l == nil then\n\
    \    return false\n  end\n  local total = 0\n  local first_three = {}\n  for _,\
    \ v in ipairs(l) do\n    total = total + v\n    table.insert(first_three, v)\n\
    \  end\n  -- Now check if all three elements are distinct.\n  -- We are using\
    \ == because we want to preserve order.\n  return #first_three == 3 and\n    all(x\
    \ == first_three[1] or x == first_three[2] or x == first_three[3] or\n\t   x ==\
    \ first_three[4] or x == first_three[5] or x == first_three[6])\nend\n</code>\n\
    <|/ a tags=lua-table,lua |>\n<| c |>\nYep, that would work. But it seems like\
    \ this should be possible in O(n) rather than O(n^2). I'd be surprised if there's\
    \ a better way of doing it than looping over the list.\n<|/ c |>\n<| c |>\nThe\
    \ first two elements are the trivial case. Subtract the third from the sum and\
    \ repeat until you have no more elements to add.\n<|/ c |>\n<| c |>\n: I suppose\
    \ I should have explained better; I meant that it should be possible to do it\
    \ without needing to loop over the whole list, which would be the case if one\
    \ were writing code in C. But I suppose there isn't a solution which works in\
    \ O(n) without looping over every element.\n<|/ c |>\n<| c |>\n: I guess I could\
    \ have made my comment clearer; I meant \"I suppose there isn't a solution which\
    \ works in O(n) without looping over every element. I'm still looking for one.\"\
    \ And I meant \"without looping over the whole list.\"\n<|/ c |>\n<| c |>\n: I\
    \ guess I could have made my comment clearer; I meant \"I suppose there isn't\
    \ a solution which works in O(n) without looping over every element. I'm still\
    \ looking for one.\" And I meant \"without looping over the whole list.\"\n<|/\
    \ c |>\n<| a tags=lua-table,lua |>\nThe simplest way I can think of is just to\
    \ loop the whole table, and just keep track of what element you have seen so far:\n\
    <code>", "\t-- The algorithm is as follows:\n\t-- 1) For each element of the list,\
    \ add it to the accumulator 'acc' and\n\t--    subtract the element from the list.\n\
    \t-- 2) If the accumulator is zero, return True.\n\t-- 3) If there are three elements\
    \ that sum to zero, return False.\n\t-- 4) return False if there are no three\
    \ elements that sum to zero.\n\t-- otherwise, return True\n\tlocal sum, acc, count\
    \ = 0, 0, 0\n\tfor i, el in ipairs(l) do\n\t\t-- Add the current element to the\
    \ accumulator and subtract it from the\n\t\t-- list\n\t\tsum = sum + el\n\t\t\
    acc = sum - l[i]\n\t\tcount = count + 1\n\t\t-- Stop when the accumulator becomes\
    \ zero.\n\t\tif acc == 0 then\n\t\t\tbreak\n\t\tend\n\tend\n\t-- Return False\
    \ if the list does not contain 3 or more elements that\n\t-- sum to zero\n\tif\
    \ count == 0 then\n\t\treturn false\n\tend\n\t-- Return True is the list contains\
    \ 3 or more elements that sum to\n\t-- zero\n\treturn true\nend", "  local count\
    \ = 0\n  for i = 1, #l do\n    count = count + 1\n    if l[i] + l[i + 1] + l[i\
    \ + 2] ~= 0 then\n      return false\n    end\n  end\n  return count == 3\nend",
  "\tlocal l2 = {}\n\tfor i, v in pairs(l) do\n\t\tl2[v] = l2.[v] or false\n\tend\n\
    \tfor i = 2, #l do\n\t\tfor j = i + 1, #l do\n\t\t\tl2[i .. j] = l2[j .. i]\n\t\
    \tend\n\tend\n\tfor k,v in pairs(l2) do\n\t\tif not v then return false end\n\t\
    end\n\treturn true\nend", "  return #l == 3 and l[1] == 0 and l[2] == 0\nend",
  "   local num_three = 0\n   for i = 1, #l do\n      if l[i] > 0 then\n         local\
    \ num = l[i]\n         for j = i + 1, #l do\n            if l[j] ~= 0 then\n \
    \              num = num + l[j]\n               num_three = num_three + 1\n  \
    \             break\n            end\n         end\n         if num == 0 then\n\
    \            return true\n         end\n      end\n   end\n   return num_three\
    \ == 3\nend", "  local sum = 0\n  for _, i in ipairs(l) do sum = sum + i end\n\
    \  return sum == 3\nend", "  local function helper(l)\n    local t = {}\n    for\
    \ _, v in ipairs(l) do\n      if t[v] then return false end\n      t[v] = true\n\
    \    end\n    return true\n  end\n  helper(l)\nend", "  -- create a list of three\
    \ elements: all negative numbers, all non-negative numbers\n  -- and all positive\
    \ numbers.\n  local num_list = [-math.abs(l[i]) for i in range(1, #l + 1)]\n \
    \ -- return True only if there are three distinct numbers in num_list that sum\
    \ to zero.\n  for i=1, 3 do\n    -- get all three numbers in the list that sum\
    \ to zero.\n    local num = num_list[i]\n    local neg_num = num_list[i - 1]\n\
    \    local pos_num = num_list[i + 1]\n    -- check if the sum of these three numbers\
    \ is zero.\n    local zero = (neg_num + pos_num + num)\n    if zero ~= 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "   local three = 0\n\
    \   for i=1,#l do\n      if l[i] == l[i+1] and l[i] == l[i+2] then\n         three\
    \ = three + 1\n      end\n   end\n   return three == 3\nend", "    local s, i,\
    \ l = 0, {}, l\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n \
    \   for i = 2, #l do\n        if s[i] and s[l[i]] then\n            s[i] = nil\n\
    \            return true\n        end\n    end\n    return false\nend", "  --\
    \ Check whether three distinct elements in the list sum to zero\n  -- >>> triples_sum_to_zero([1,\
    \ 3, -2, 1])\n  -- True\n  -- >>> triples_sum_to_zero([1, 3, -2, 1, 2, 2, 1])\n\
    \  -- False\n  for i = 1, #l do\n    if l[i] == 0 then\n      -- Check if three\
    \ distinct elements are in the list\n      if l[i - 1] == l[i + 2] and l[i - 1]\
    \ == l[i - 2] then\n        return true\n      elseif l[i - 1] == l[i + 2] or\
    \ l[i - 1] == l[i - 2] then\n        return false\n      elseif l[i + 2] == l[i\
    \ - 1] or l[i + 2] == l[i - 2] then\n        return false\n      else\n      \
    \  return false\n      end\n    end\n  end\n  return true\nend", "  if #l <= 1\
    \ then return false end\n  local a, b, c = l[1], l[2], l[3]\n  if b > 0 and c\
    \ > 0 and b + c <= 0 then return false end\n  if a == 0 and b == 0 and c == 0\
    \ then return true end\n  local p = b > 0 and c > 0 and b + c > 0\n  local q =\
    \ b > 0 and c > 0 and (b + c) % 3 == 0\n  local r = b > 0 and c > 0 and b + c\
    \ > 0 and (b + c) % 5 == 0\n  return p and q and r\nend", "  return #l == 3 and\
    \ sum(l) == 0 and l[1] and l[2] and l[3] or false\nend", "  return #l == 3 and\
    \ l[1]+l[2]+l[3] == 0\nend", "  local count = 0\n  local prev = 0\n  for i, v\
    \ in pairs(l) do\n    if prev + v < 0 then\n      count = count + 1\n      prev\
    \ = v\n    elseif prev + v == 0 then\n      count = count + 1\n    else\n    \
    \  count = count + 1\n      prev = v\n    end\n  end\n  return count == 3\nend",
  "  for _, v in ipairs(l) do\n    if v == 0 then return true end\n  end\n  return\
    \ false\nend", "  local num_triples = 0\n  local triple = {l[1], l[2], l[3]}\n\
    \  for i = 1, #l do\n    if triples_sum_to_zero(l[i]) then\n      if num_triples\
    \ == 0 then\n        num_triples = i\n      elseif num_triples == i then\n   \
    \     num_triples = i\n      elseif num_triples > i then\n        num_triples\
    \ = i\n      end\n    end\n  end\n  return num_triples == 3 and triples_sum_to_zero(triple)\
    \ or false\nend", "  return #l == 2 and\n    (l[1]:sum() + l[2]:sum() + l[3]:sum())\
    \ == 0 and\n    (l[1]:sum() + l[2]:sum() + l[3]:sum()) > 0 and\n    (l[1]:sum()\
    \ + l[2]:sum() + l[3]:sum()) < 0\nend", "  if #l == 0 then\n    return false\n\
    \  end\n  local last_zero = 0\n  for i = 1, #l do\n    if l[i] == 0 then\n   \
    \   last_zero = i\n    end\n  end\n  if last_zero ~= 0 then\n    for i = 1, #l\
    \ do\n      if l[i] + l[last_zero] < 0 then\n        return false\n      end\n\
    \    end\n  end\n  return true\nend", "  local function has_triple(l, s, t)\n\
    \    for i = 1, #l do\n      if l[i] == s and l[i - 1] + t == 0 then return true\
    \ end\n    end\n    return false\n  end", "  for i, v in ipairs(l) do\n    for\
    \ j = i, #l do\n      if i + 1 < j then\n        if l[i] + l[j] < 0 then return\
    \ false end\n        if l[i] + l[j] > v then return false end\n      elseif j\
    \ + 1 < i then\n        if l[j] + l[i] < 0 then return false end\n        if l[j]\
    \ + l[i] > v then return false end\n      elseif i == j then\n        if l[i]\
    \ < v then return false end\n      else\n        return false\n      end\n   \
    \ end\n  end\n  return true\nend", "  local n = 0\n  for _, e in ipairs(l) do\n\
    \    n = n + 1\n    if n == 3 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "    local num_elements = #l\n    if num_elements == 0 then\n \
    \       return false\n    end\n    local max_sum = max_element(l)\n    if max_sum\
    \ == 0 then\n        return false\n    end\n    local min_sum = min_element(l)\n\
    \    if min_sum == 0 then\n        return false\n    end\n    local i, j, k =\
    \ 1, num_elements - 1, 1, 0\n    repeat\n        if l[i] + l[j] + l[k] == 0 then\n\
    \            return true\n        end\n        i, j, k = i + 1, j + 1, k + 1\n\
    \    until k > num_elements - 2\n    return false\nend", "  if #l == 0 then return\
    \ false end\n  local sum, index, count = 0, 0, 0\n  for index, value in ipairs(l)\
    \ do\n    count = count + 1\n    sum = sum + value\n    if sum > 0 then\n    \
    \  if count == 3 then\n        return true\n      else\n        return false\n\
    \      end\n    end\n  end\n  return false\nend", "  local s = 0\n  local r =\
    \ 0\n  for _, x in ipairs(l) do\n    local e = 0\n    for _, y in ipairs(l) do\n\
    \      if x == y then\n        e = e + 1\n      else\n        local temp\n   \
    \     if s > 0 then\n          -- if the first element of l is negative, e will\
    \ be incremented even if the second element of l is positive.\n          if e\
    \ > 1 and s > 0 then\n            e = e + 1\n          end\n        else\n   \
    \       e = e + 1\n        end\n        s = s + x\n        r =+ y\n      end\n\
    \    end\n  end\n  return (r == 0)\nend", "  for i, e in ipairs(l) do\n    for\
    \ j = i + 1, #l do\n      if e + l[j] == 0 then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  local s = l[1]\n  if s == 0 then\n \
    \   return true\n  elseif s == -0 then\n    return false\n  elseif s == nil then\n\
    \    return false\n  else\n    for i = 2, #l do\n      if s + l[i] ~= 0 then\n\
    \        return false\n      elseif s + l[i] == 0 then\n        return true\n\
    \      else\n        s = s + l[i]\n      end\n    end\n  end\nend", "  for _,\
    \ e in ipairs(l) do\n    if e - 0 == 0 then return false end\n  end\n  return\
    \ true\nend", "    local seen = {}\n    local count = 0\n    for _, _, _, elem\
    \ in ipairs(l) do\n        count = count + 1\n        local s = math.abs(elem)\n\
    \        if seen[s] then\n            return false\n        elseif seen[s] = true\
    \ then\n            if count == 3 then\n                return true\n        \
    \    end\n        else\n            seen[s] = true\n        end\n    end\n   \
    \ return false\nend", "\tlocal num_zeros = 0\n\tlocal min_sum = nil\n\tlocal max_sum\
    \ = nil\n\tfor i = 1, #l do\n\t\tlocal this_sum = l[i] + l[i + 1] + l[i + 2]\n\
    \t\tif this_sum == 0 then\n\t\t\tnum_zeros = num_zeros + 1\n\t\t\tif min_sum ==\
    \ nil or min_sum > this_sum then\n\t\t\t\tmin_sum = this_sum\n\t\t\tend\n\t\t\t\
    if max_sum == nil or max_sum < this_sum then\n\t\t\t\tmax_sum = this_sum\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn (num_zeros == 0 and min_sum == max_sum)\nend",
  "  local function is_triple(k)\n    local a, b, c = unpack(l)\n    return a and\
    \ b and c and b + c == 0\n  end\n  return next(filter(is_triple, combinations(l)))\n\
    end", "  local sum = 0\n  for i = 1,#l do\n    sum = sum + l[i]\n    if sum >\
    \ 0 then return false end\n  end\n  return true\nend", "  local result\n  for\
    \ _, v in pairs(l) do\n    if v == 0 then\n      result = true\n      break\n\
    \    end\n  end\n  return result\nend", "  if #l == 0 then return False end\n\
    \  for i = 1, #l do\n    if l[i] == 0 then return False end\n    if l[i] == l[i\
    \ - 1] + l[i - 2] then return False end\n  end\n  return True\nend", "   if #l\
    \ == 0 then\n      return false\n   end\n   if l[1] > -3 then\n      return false\n\
    \   end\n   if l[2] > -3 then\n      return false\n   end\n   if l[2] > l[1] then\n\
    \      return false\n   end\n   return true\nend", "  local s = setmetatable({},\
    \ {__index = ttable})\n  local function helper(i, j)\n    if i == j then\n   \
    \   return false\n    end\n    local x, y = l[i], l[j]\n    if x then\n      if\
    \ y and x % y == 0 then\n        table.insert(s, x)\n      else\n        return\
    \ helper(i - 1, j)\n      end\n    end\n    helper(i - 1, j)\n  end\n  helper(#l,\
    \ #l)\n  return #s == 3\nend", "  local n = #l\n  for i = 1, (n - 1) do\n    local\
    \ s = 0\n    for j = 1, n do\n      if i == j then\n        s = s + l[j]\n   \
    \   elseif i == j + 1 then\n        s = s + l[j] - l[i]\n      else\n        return\
    \ false\n      end\n    end\n    if s == 0 then\n      return true\n    end\n\
    \  end\n  return false\nend", "  -- Return True if the given list contains three\
    \ distinct elements that sum\n  -- up to zero.\n  return #l == 3 and luci.util.unique_by_value(l)\
    \ ~= nil\nend", "  local count = 0\n  local s = l[1]\n  for _, v in pairs(l) do\n\
    \    if count == 2 then\n      return false\n    end\n    s = s + v\n    if s\
    \ == 0 then\n      count = count + 1\n    end\n  end\n  return count == 3\nend",
  "    local zero, one = unpack({})\n    for i, v in ipairs(l) do\n        if v ==\
    \ zero then zero = one end\n        if v == one then one = one end\n        if\
    \ zero ~= one and (v - zero) ~= zero then return false end\n        if v - one\
    \ == zero then return false end\n        zero = v\n    end\n    return true\n\
    end", "  assert(#l >= 2, 'input list must have at least two elements')\n  if #l\
    \ == 2 then return l[1] <= 0 and l[2] <= 0 end\n  local a, b, c = l[1], l[2],\
    \ l[3]\n  assert(a <= b, 'input list must contain non-negative integers')\n  assert(c\
    \ <= b, 'input list must contain non-negative integers')\n  return a == 0 and\
    \ b == 0 and c == b\nend", "    local zeros = 0\n    local n = #l\n    for i =\
    \ 1, n do\n        for j = i + 1, n do\n            local s = l[i] + l[j] + l[n]\n\
    \            if s == 0 then zeros = zeros + 1 end\n        end\n    end\n    return\
    \ (zeros == 3)\nend", "  if l == nil then\n    return false\n  end\n  local zeros\
    \ = false\n  local i = #l\n  while i do\n    if l[i] == 0 then\n      zeros =\
    \ true\n      i = i - 1\n    else\n      if zeros then\n        return false\n\
    \      else\n        zeros = false\n      end\n    end\n  end\n  return true\n\
    end", "  -- initialize our result to False\n  local result = False\n  -- initialize\
    \ our counter to zero\n  local c = 0\n  -- iterate over the list of integers\n\
    \  for i, v in ipairs(l) do\n    -- add the number to our running total\n    c\
    \ = c + v\n    -- if our running total is zero, return True\n    if c == 0 then\n\
    \      -- set the flag to True\n      result = true\n      break\n    end\n  end\n\
    \  return result\nend", "  local three_count = 0\n  local four_count = 0\n  local\
    \ five_count = 0\n  local count = 0\n  for _ in pairs(l) do\n    count = count\
    \ + 1\n    if count > 3 then\n      if three_count < 2 then\n        three_count\
    \ = three_count + 1\n      elseif three_count == 2 then\n        four_count =\
    \ four_count + 1\n      elseif three_count == 3 then\n        five_count = five_count\
    \ + 1\n      end\n      count = 1\n    end\n  end\n  return three_count == 3 and\
    \ four_count == 4 and five_count == 5\nend", "  local sum = 0\n  for i,v in ipairs(l)\
    \ do\n    if v ~= 0 then\n      sum = sum + v\n    end\n  end\n  return sum ==\
    \ 3\nend\nreturn triples_sum_to_zero\nend\nreturn _G\nend\nreturn _M", "  -- if\
    \ there are exactly three distinct elements that sum to zero, then\n  -- there\
    \ are three distinct triples in the list.  otherwise, there are none.\n  local\
    \ num_triples = 0\n  for i, v in ipairs(l) do\n    local t = v + v\n    if t ~=\
    \ 0 and t % 2 == 0 then\n      num_triples = num_triples + 1\n      if num_triples\
    \ == 3 then return true end\n    end\n  end\n  return false\nend", "    local\
    \ s = #l\n    for i = 1, s do\n        if l[i] == l[i - 1] + l[i - 2] then\n \
    \           return false\n        end\n    end\n    return true\nend", "  local\
    \ v\n  local i = 1\n  do\n    v = l[i]\n    if v > 0 then\n      if v == i + 1\
    \ then\n        -- This is tricky, but we basically want to return True in this\n\
    \        -- case to indicate that the list is composed only of three elements.\n\
    \        return true\n      else\n        return false\n      end\n    end\n \
    \   i = i + 1\n  end\nend", "  if #l < 3 then return false end\n  local result,\n\
    \      i = 0,\n      j = 0,\n      k = 0,\n      s = 0\n  for _ in l:gmatch('.')\
    \ do\n    if s == '0' then\n      s = string.rep('0', k-i)\n    end\n    k = k\
    \ + 1\n    i = i + 1\n    if string.sub(s, i, i) == '0' then\n      s = string.rep('0',\
    \ k-i)\n      j = j + 1\n    end\n    if s == '00' then s = '' end\n    s = s\
    \ .. string.rep('1', k-j)\n  end\n  result = s ~= '11'\n  s = nil\n  return result\n\
    end", "  local sum = 0 -- sum of elements in l\n  for _,v in ipairs(l) do -- sum\
    \ for each element of l\n    sum = sum + v\n  end\n  return sum == 0 -- if the\
    \ sum is 0 then there are three distinct elements\nend", "  local function helper(l,\
    \ a, b)\n    if a < 3 then return false end\n    if a % 3 == 1 then return true\
    \ end\n    local e\n    if a % 3 == 2 then\n      e = 3 * a\n    else\n      e\
    \ = 3 * (a + 1) + (a - 1)\n    end\n    return helper(l, e - b + 1, b)\n  end\n\
    \  return helper(l, 0, 2)\nend", "  return #l == 3 and sum(l) == 0 and l[2] ==\
    \ 0 and l[3] == 0\nend", "    local sz = #l\n    if sz == 0 then return false\
    \ end\n    local i, j, k = 0, 0, 0\n    while i <= sz and j <= sz do\n       \
    \ if l[i] + l[j] == 0 then return false end\n        if l[i] + l[j] > 0 then\n\
    \            k = i + j - 1\n            if k <= sz then\n                i = k\
    \ + 1\n                j = k\n            else\n                j = sz\n     \
    \       end\n        else\n            k = sz\n        end\n    end\n    return\
    \ j == sz\nend", "  local n_distinct_sum = 0\n  for _, elem in ipairs(l) do\n\
    \    if n_distinct_sum > 1 then\n      return false\n    end\n    n_distinct_sum\
    \ = n_distinct_sum + #elem\n  end\n  if n_distinct_sum > 2 then\n    return false\n\
    \  end\n  local a, b, c = l[1], l[2], l[3]\n  if a + b > 0 and a + c > 0 and b\
    \ + c > 0 then\n    return true\n  end\n  return false\nend", "    local a, b,\
    \ c = unpack(l)\n    if c < 0 then c = -c end\n    local d = 0\n    for i = a,\
    \ c do\n        local p = i\n        if b > 0 then\n            p = p * p\n  \
    \      end\n        d = d + p\n    end\n    return d == 0\nend", "  for _, i in\
    \ pairs(l) do\n    for _, j in pairs(l) do\n      if j == i then return false\
    \ end\n    end\n  end\n  return true\nend", "\tlocal s = #l -- The sum of the\
    \ first n elements of the list\n\tlocal n = 1\n\twhile n < s and s ~= 0 do\n\t\
    \ts = s - l[n]\n\t\tif s == 0 then\n\t\t\treturn n == 3\n\t\tend\n\t\tn = n +\
    \ 1\n\tend\n\treturn false\nend", "  local seen = {}\n  local out\n  for _, x\
    \ in ipairs(l) do\n    if not seen[x] then\n      seen[x] = true\n      out =\
    \ true\n    end\n    if not seen[x + x] then\n      seen[x + x] = true\n     \
    \ out = true\n    end\n    if not seen[x - x] then\n      seen[x - x] = true\n\
    \      out = true\n    end\n  end\n  return out\nend", "    if #l == 0 then\n\
    \        return false\n    end\n    local t = {}\n    for _,x in ipairs(l) do\n\
    \        table.insert(t, x)\n    end\n    for i = 2, #t do\n        if t[i] ~=\
    \ t[i-2] then\n            return false\n        end\n    end\n    return true\n\
    end", "  if #l == 0 then\n    return true\n  end\n  local s = math.abs(l[1])\n\
    \  for i = 2, #l do\n    s = s + math.abs(l[i])\n    if s == 0 then\n      return\
    \ true\n    end\n  end\n  return false\nend", "    local total = 0\n    for i,\
    \ v in ipairs(l) do\n        total = total + v\n    end\n    local count = 0\n\
    \    for i, v in ipairs(l) do\n        if total - v == 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count == 3\nend", "  local count\
    \ = 0\n  for i = 1, #l do\n    count = count + 1\n    local first = l[i]\n   \
    \ for j = i, #l do\n      if j > i then\n        local second = l[j]\n       \
    \ if first + second == 0 then\n          return true\n        end\n      end\n\
    \    end\n  end\n  return count == 3\nend", "  if #l == 0 then\n    return false\n\
    \  end\n  local i\n  for i = 2, #l do\n    local a = l[i]\n    local b = l[i -\
    \ 1]\n    local c = l[i - 2]\n    local s = a + b + c\n    if s == 0 then\n  \
    \    return true\n    end\n  end\n  return false\nend", "  local num = {}\n  for\
    \ _,v in pairs(l) do\n    num[v] = num[v] or 1\n    local nv = num[v] + 1\n  \
    \  if nv == 3 and v > 0 then\n      return false\n    end\n    num[v] = nv\n \
    \ end\n  return true\nend", "  -- We don't bother sorting for small lists (unless\
    \ we're going to do it\n  -- just to save time).\n  -- We know that for small\
    \ lists the three values will be distinct, and\n  -- that the three values will\
    \ be ordered.\n  if #l <= 3 then\n    return #l == 3\n  end\n  -- We use \"or\"\
    \ instead of \"and\", because \"and\" short-circuits on the\n  -- first non-true\
    \ result.\n  local s = false\n  local i = 0\n  local j = #l\n  -- We know that\
    \ if i == j, then l[i] is distinct from l[i+1].\n  -- Therefore, we can just scan\
    \ until we find an index for which we\n  -- found one non-distinct value, and\
    \ if that index is less than or equal\n  -- to j, then we know that l[i] == l[j].\n\
    \  while i <= j do\n    if l[i] == l[j] or l[i] ~= l[j] then\n      s = true\n\
    \      break\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return s\nend",
  "    local a, b, c = unpack(l)\n    return (a + (-b)) + (-c - (b + c))\nend", " \
    \ local triples = {} -- initialize a set\n  local sum = 0 -- initialize a sum\n\
    \  for _, v in ipairs(l) do\n    triples[v] = true -- add elements to the set\n\
    \    sum = sum + v -- update sum\n  end\n  for _, v in ipairs(l) do\n    if triples[v]\
    \ and sum == 0 then return true end\n    triples[v] = nil -- remove the elements\
    \ from the set\n  end\n  return false\nend", "  local n = 0\n  local ret\n  for\
    \ i in l\n  do\n    local v = (i + n)\n    if v > 0 then\n      n = v\n    else\n\
    \      ret = true\n      break\n    end\n  end\n  return ret\nend", "   if #l\
    \ == 0 then return false end\n   if #l == 1 then return l[1] ~= 0 and l[1] ~=\
    \ -2 end\n   local su = 0\n   for i=2,#l do\n      if su + l[i] > 0 then return\
    \ false end\n      su = su + l[i]\n   end\n   return true\nend", "\tlocal sum\
    \ = 0\n\tfor _, _, _ in ipairs(l) do\n\t\tsum = sum + _\n\tend\n\tif sum == 0\
    \ then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "    local first_triple\
    \ = l:partition(function(x)\n        return x ~= 0 and x ~= -0\n    end)\n   \
    \ local second_triple = first_triple:partition(function(x)\n        return x ~=\
    \ 0 and x ~= -0\n    end)\n    local third_triple = second_triple:partition(function(x)\n\
    \        return x ~= 0 and x ~= -0\n    end)\n    return #first_triple+#second_triple+#third_triple\
    \ == 0\nend", "  local sum = 0\n  for _, v in ipairs(l) do\n    sum = sum + v\n\
    \  end\n  return sum == 3\nend", "\tlocal count = 0\n\tfor _, val in ipairs(l)\
    \ do count = count + val end\n\treturn count == 3\nend", "  local i = 0\n  while\
    \ i <= #l do\n    -- If the next element is the same as the previous one, then\n\
    \    -- we know that the elements in the list are all distinct and can\n    --\
    \ be summed to zero.\n    local prev_e = l[i]\n    if i ~= 1 then\n      local\
    \ next_e = l[i-1]\n      if prev_e == next_e then\n\treturn false\n      end\n\
    \    end", "  -- we treat negative numbers as positive for the sum\n  local s\
    \ = sum(l)\n  local l2 = l:map(function(x)\n      if x < 0 then return x*x end\n\
    \      if x == 0 then return 0 end\n      return s-x\n  end)\n  -- return true\
    \ if there are three distinct elements in the list that sum to zero.\n  return\
    \ #l2 == 3\nend", "   for _, x in ipairs(l) do\n      for _, y in ipairs(l) do\n\
    \         if x == y then\n            if x + y == 0 then return true end\n   \
    \      end\n      end\n   end\n   return false\nend", "  -- We use lua tables\
    \ as associative arrays. Associative arrays\n  -- are like hashes, except that\
    \ the key is a string that is unique\n  -- within each table. Tables are stored\
    \ in binary search trees.\n  -- This makes lookups O(log N) instead of O(N), where\
    \ N is the\n  -- number of elements in the list. This is why we can lookup a key\n\
    \  -- in the array in constant time.\n  -- >>> t = {1=2, 3=4, 5=6}\n  -- >>> t[\"\
    2\"]\n  -- 4\n  -- >>> t[\"6\"]\n  -- nil\n  -- >>> t[\"4\"]\n  -- 4\n  -- >>>\
    \ t[\"3\"]\n  -- nil\n  -- >>> t[\"2\"] = \"3\"\n  -- >>> t[\"2\"]\n  -- 3\n \
    \ --\n  -- We can use the same hash function on lists because they are\n  -- comparable.\n\
    \  -- >>> h1 = hash_func([1, 2, 3])\n  -- >>> h2 = hash_func([1, 2, 3])\n  --\
    \ >>> h1 == h2\n  -- true\n  -- >>> h1 == hash_func([1, 2, 2, 3])\n  -- false\n\
    \  -- >>> h1 = hash_func([-1, -2, -3])\n  -- >>> h2 = hash_func([-1, -2, -3])\n\
    \  -- >>> h1 == h2\n  -- false\n  -- >>> h1 = hash_func([-1, -2, -3, -4])\n  --\
    \ >>> h2 = hash_func([-1, -2, -3, -4])\n  -- >>> h1 == h2\n  -- false\n  -- >>>\
    \ hash_func([1, 2, 3])\n  -- 148088935\n  -- >>> hash_func([-1, -2, -3, -4])\n\
    \  -- 148088946\n  local function hash_func(l)\n    local hash = 1\n    for _,\
    \ v in ipairs(l) do\n      hash = hash ^ (v + v)\n    end\n    return hash % 10\n\
    \  end", "  local n_elements = #l\n  return n_elements == 3 and\n         l[1]\
    \ + l[2] + l[3] <= 0 and\n         l[2] + l[3] + l[4] <= 0 and\n         l[3]\
    \ + l[4] + l[5] <= 0 and\n         l[4] + l[5] + l[6] <= 0\nend", "  -- base case\n\
    \  if #l == 1 then return false end\n  -- get three elements from the list\n \
    \ local a, b, c = unpack(l)\n  -- compute sum of three elements\n  local a_plus_b\
    \ = a + b\n  local a_plus_b_minus_c = a_plus_b - c\n  -- check if triplets with\
    \ these sums are zero\n  return a_plus_b_minus_c == 0\nend", "  if l == nil then\n\
    \    return false\n  end\n  local a = l[1]\n  local b = l[2]\n  local c = l[3]\n\
    \  local sum\n  if a == b then\n    sum = a + b\n    if sum == c then\n      return\
    \ true\n    end\n  elseif a == c then\n    sum = a + c\n    if sum == b then\n\
    \      return true\n    end\n  elseif b == c then\n    sum = b + c\n    if sum\
    \ == a then\n      return true\n    end\n  end\n  return false\nend", "  local\
    \ num_elems = #l\n  local sum = 0\n  for _, x in ipairs(l) do\n    sum = sum +\
    \ x\n  end\n  if sum == 0 then\n    return false\n  end\n  if num_elems == 3 then\n\
    \    return true\n  end\n  return false\nend", "  assert(#l == 3 and all(type(x)\
    \ == \"number\" and x >= 0 for _, x in ipairs(l)))\n  return l[1] == 0 and l[2]\
    \ == 0 and l[3] == 0\nend", "  local num_triplets = 0\n  local i = 1\n  while\
    \ i <= #l do\n    local num = l[i]\n    local j\n    for j = i + 1 , #l do\n \
    \     if num + l[j] == 0 then\n        -- Found a triplet that sums to zero.\n\
    \        num_triplets = num_triplets + 1\n        break\n      end\n    end\n\
    \    i = i + 1\n  end\n  return num_triplets\nend", "    local n = #l\n    local\
    \ x = 3\n    local k = 1\n    while k > 0 do\n        if n == 1 then\n       \
    \     return false\n        end\n        if l[n] == x then\n            n = 3\n\
    \        else\n            if n ~= 1 then\n                n = n - 1\n       \
    \     end\n            k = k - 1\n        end\n        x = x * 3 + 1\n    end\n\
    \    return true\nend", "   local seen = {}\n   for i = 1, #l do\n      if seen[tostring(l[i])]\
    \ then\n         return false\n      elseif l[i] == -0 then\n         if #l ==\
    \ 1 then\n            return true\n         else\n            seen[tostring(l[i])]\
    \ = true\n         end\n      else\n         seen[tostring(l[i])] = true\n   \
    \   end\n   end\n   return false\nend", "  for i, elt in ipairs(l) do\n    if\
    \ elt > 0 then\n      local s, r = {}, elt % 3\n      for j = 1, r do\n      \
    \  table.insert(s, elt / 3 - j + 1)\n      end\n      if table.find(s, #s) ==\
    \ 3 then return false end\n    end\n  end\n  return true\nend", "    local zero\
    \ = 0\n    local sum = 0\n    local triple\n    for _, triple in ipairs(l) do\n\
    \        local x, y = math.abs(triple)\n        sum = sum + x\n        if sum\
    \ == zero then\n            return false\n        end\n        sum = sum + y\n\
    \    end\n    return true\nend", "   for i = 1, #l do\n      if i > 1 then\n \
    \        if l[i] + l[i-1] ~= 0 then\n            if l[i] + l[i-1] + l[i-2] ~=\
    \ 0 then\n               return true\n            end\n         end\n      end\n\
    \   end\n   return false\nend", "  local s = 0\n  local i = 0\n  local j = 1\n\
    \  local k = 1\n  repeat\n    i = i + 2\n    j = j + 2\n    k = k + 1\n    s =\
    \ s + l[i] + l[j] + l[k]\n  until j < k\n  return s == 0 and (j - k) >= 3\nend",
  "    local sum = 0\n    local count = 0\n    for _,x in ipairs(l) do\n        sum\
    \ = sum + x\n        if sum > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count == 3\nend", "    if #l == 0 then\n        return false\n\
    \    end\n    local s = l[1]\n    for i = 2, #l do\n        if s == l[i] then\n\
    \            -- If s is the same as the next element of l, skip it.\n        \
    \    i = i - 1\n        else\n            -- If s does not equal the next element\
    \ of l, return true.\n            return true\n        end\n    end\n    return\
    \ false\nend", "  assert(type(l) == \"table\")\n  local t = {}\n  for _, v in\
    \ pairs(l) do\n    if v == 0 then\n      table.insert(t, v)\n    else\n      if\
    \ t[#t] == nil then\n        t[#t] = v\n      else\n        -- If two distinct\
    \ elements sum to zero, return false.\n        if v + t[#t] == 0 then return false\
    \ end\n      end\n    end\n  end\n  return true\nend", "  assert(type(l)=='table')\n\
    \  local result = {}\n  for k,v in pairs(l) do\n    if result[v] then\n      return\
    \ false\n    end\n    if l[k]==v then\n      result[v] = true\n    end\n  end\n\
    \  return #result==3\nend", "   local pairs = {}\n   for _, v in ipairs(l) do\n\
    \      if pairs[v] == nil then\n         pairs[v] = true\n      elseif pairs[v]\
    \ then\n         return false\n      end\n   end\n   return true\nend", "  local\
    \ result\n  for _, elem in ipairs(l) do\n    if result == nil then\n      if elem\
    \ == 0 then\n        result = true\n      else\n        result = false\n     \
    \ end\n    elseif result and (elem == 0) then\n      result = false\n    end\n\
    \  end\n  return result\nend", "   -- If the sum of the three distinct elements\
    \ is not zero, return False.\n   if #l == 3 then\n      local a, b, c = unpack(l)\n\
    \      return (a + b + c) <= 0\n   else\n      -- Otherwise, recursively call\
    \ this function on the tail.\n      return triples_sum_to_zero(unpack(l, 1, #l))\n\
    \   end\nend", "\tassert(type(l) == \"table\")\n\tlocal sum, i = 0, 0\n\tfor v\
    \ in l:gmatch(\"%d*\") do\n\t\tsum = sum + v\n\t\tif sum > 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\t\tsum = sum - v\n\t\tif sum > 0 then\n\t\t\treturn true\n\t\
    \tend\n\t\ti = i + 1\n\tend\n\treturn false\nend", "  local num_elems = #l\n \
    \ if num_elems < 3 then return false end", "  -- The three elements that sum to\
    \ zero.\n  local triples_sum_to_zero = {}\n  for i = 0, #l do\n    -- The index\
    \ of the three elements that sum to zero.\n    local triples_sum_to_zero_i = {}\n\
    \    -- The sum of three elements that sum to zero.\n    local triples_sum_to_zero_s\
    \ = 0\n    -- All three elements.\n    local triples_sum_to_zero_a = {}\n    triples_sum_to_zero[i]\
    \ = triples_sum_to_zero_i\n    triples_sum_to_zero_s[i] = triples_sum_to_zero_s\n\
    \    for j = 0, #l do triples_sum_to_zero_a[j] = l[j] end\n    -- Add all the\
    \ elements of the three elements that sum to zero.\n    for j = 1, #triples_sum_to_zero_a\
    \ do\n      local trip_s = triples_sum_to_zero_a[j]\n      triples_sum_to_zero_s\
    \ += trip_s\n      triples_sum_to_zero_i[triples_sum_to_zero_s] = j\n      triples_sum_to_zero_s[i]\
    \ = trip_s\n    end\n  end\n  -- Return the result.\n  return #triples_sum_to_zero\
    \ == 1\nend", "    local n = 0\n    for i = 1, #l do\n        n = n + 1\n    \
    \    if l[i] ~= 0 and l[i] ~= l[n] then\n            return false\n        end\n\
    \    end\n    return n == 3\nend", "  if #l == 0 then return false end\n  if #l\
    \ == 1 then return true end\n  local i\n  local s = l [1]\n  for i = 2, #l do\n\
    \    if s == 0 then return false end\n    if s == -2 then return true end\n  \
    \  s = s - l[i]\n  end\n  return false\nend", "  local sum = 0\n  for i = 1, #l\
    \ do\n    sum = sum + l[i]\n    if sum > 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local num_elements = #l\n  return num_elements\
    \ == 3 and l[1] + l[2] == 0 and l[3] == 0\nend", "   assert(#l == 3) return true\n\
    \   local s = 0\n   for _, item in ipairs(l) do\n      s = s + item\n      if\
    \ s == 0 then return false end\n   end\n   return true\nend", "  local l2 = {}\n\
    \  for _, x in ipairs(l) do table.insert(l2, x) end\n  if #l2 < 3 then return\
    \ false end\n  local sum = 0\n  for _, x in ipairs(l2) do sum = sum + x end\n\
    \  for _, x in ipairs(l2) do sum = sum - x end\n  if sum == 0 then return true\
    \ end\n  return false\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
