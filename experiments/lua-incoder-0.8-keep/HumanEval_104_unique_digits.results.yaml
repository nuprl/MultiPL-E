name: HumanEval_104_unique_digits
language: lua
results:
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  local digit_seen = {}\n  local done\n\
    \  local i\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpst_lv_a_.lua:24: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    assert(type(x) == \"table\", \"argument should be a table\"\
    )\n    local n = #x\n    local ret = {}\n    for i = 1, n do\n        local digit\
    \ = x[i]\n        if digit == 0 then\n            continue\n        end\n    \
    \    for j = 1, i do\n            if x[j] ~= digit then\n                break\n\
    \            end\n            table.insert(ret, digit)\n        end\n    end\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyhduo4by.lua:17: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n        local\
    \ sum = 0\n        for j = 1, math.abs(x[i]) do\n            sum = sum + 1\n \
    \       end\n        if sum % 2 == 0 then\n            if result[sum] == nil then\n\
    \                result[sum] = x[i]\n            else\n                result[sum]\
    \ = x[i]\n            end\n        end\n    end\n    return result\nend\nreturn\
    \ unique_digits\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzv7k1jh8.lua:27: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local digit = 0\n  for i = 1,#x do\n \
    \   if x[i] > digit then\n      ret[#ret+1] = x[i]\n      digit = x[i]\n    end\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ugz5f4i.lua:24:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422}\nstack traceback:\n\t/tmp/tmp1ugz5f4i.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for i = 1,#x do\n        if math.floor(x[i])\
    \ ~= x[i] then -- ignore non-integers\n            table.insert(result, math.floor(x[i]))\n\
    \        end\n    end\n    -- Sort them in ascending order\n    table.sort(result)\n\
    \    return result\nend\n</code>\n<|/ a |>\n<| a tags=lua,lua-table |>\n<code>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphtsww3_z.lua:20: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local i, n = 1, #x\n  local output = {}\n  while i <= n\
    \ do\n    local v = x[i]\n    i = i + 1\n    if v and (v % 2 == 0) then\n    \
    \  output[#output + 1] = x[i]\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8e6hci07.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1}\nstack traceback:\n\t/tmp/tmp8e6hci07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- Use a hash to store encountered digits. A hash is a \n\
    \  -- dictionary-like data structure that guarantees that all\n  -- values in\
    \ the dictionary will be unique.\n  local digits = setmetatable({}, { __mode =\
    \ \"v\" })\n  -- Count the number of times that a particular digit appears.\n\
    \  for i=1,#x do\n    -- Check if the digit has been seen already.\n    if not\
    \ digits[x[i]] then\n      -- If the digit has not been seen, add it to the dictionary\
    \ \n      -- and set its count to 1 so that it remains seen as long\n      --\
    \ as the dictionary remains unchanged.\n      digits[x[i]] = { count = 1, value\
    \ = x[i] }\n      -- Else, increment the count of the digit already seen.\n  \
    \  else\n      digits[x[i]].count = digits[x[i]].count + 1\n    end\n  end\n \
    \ -- Convert the dictionary into a sorted list.\n  -- Counting sort algorithm\
    \ can be found here\n  -- http://www.cnblogs.com/davidx/archive/2012/10/06/2981569.html\n\
    \  -- The idea is to go through the dictionary in descending order \n  -- by decreasing\
    \ count and return the items with the lowest count.\n  -- We are building the\
    \ sorted list by removing items with count 0.\n  -- Once we hit the zero items,\
    \ we know that all these items \n  -- have been encountered and should be in the\
    \ sorted list.\n  local function count_sort(x)\n    -- Sort the list according\
    \ to the count of the elements.\n    table.sort(x, function(a,b) return a[2] >\
    \ b[2] end)\n    -- Return the sorted list.\n    return x\n  end\n  -- Return\
    \ sorted list.\n  return count_sort(digits)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0loptr_.lua:48:\
    \ expected: \n{1, 15, 33}\nactual: \n{\n    {count=1, value=1},\n    15={count=1,\
    \ value=15},\n    33={count=1, value=33},\n    1422={count=1, value=1422}\n}\n\
    stack traceback:\n\t/tmp/tmpp0loptr_.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- base case\n  if #x < 1 then\n    return nil\n  end\n\
    \  -- base case 2\n  if #x == 1 then\n    return x:byte()\n  end\n  local y =\
    \ {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(y, x[i])\n\
    \    end\n  end\n  -- recursive case\n  return unique_digits(y)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp434nqdws.lua:16:\
    \ attempt to call a nil value (method 'byte')\nstack traceback:\n\t/tmp/tmp434nqdws.lua:16:\
    \ in function </tmp/tmp434nqdws.lua:9>\n\t(...tail calls...)\n\t/tmp/tmp434nqdws.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for i, v in pairs(x) do\n     \
    \   if not v % 2 then\n            table.insert(result, v)\n        end\n    end\n\
    \    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpppn9w_fr.lua:12:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpppn9w_fr.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpppn9w_fr.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local temp = {}\n    for i = 1, #x do\n        if x[i]\
    \ == 0 then\n            temp[#temp + 1] = x[i]\n        elseif x[i] % 2 == 0\
    \ then\n            temp[#temp + 1] = x[i]\n        end\n    end\n    table.sort(temp)\n\
    \    return temp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwr98l05.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmprwr98l05.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local output = {}\n  for _, v in pairs(x) do\n    if v ~=\
    \ math.floor(v) then\n      output[#output+1] = v\n    end\n  end\n  return output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg529jg3z.lua:22:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpg529jg3z.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local u = {}\n    for i, v in ipairs(x) do\n        if\
    \ math.floor(v / 10) % 2 == 0 then\n            table.insert(u, v)\n        end\n\
    \    end\n    return table.sort(u)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph76rut7t.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmph76rut7t.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local u = {}\n    for i = 1, #x do\n        for j = 1,\
    \ #x do\n            if x[i]>0 and x[j]>0 and x[i]==x[j] then\n              \
    \  table.insert(u, x[i])\n            end\n        end\n    end\n    return u\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_si8x3vs.lua:24:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmp_si8x3vs.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  if x == nil then return nil end\n  local res = {}\n  for\
    \ i = 1, #x do\n    local c = math.floor((x[i]-1)/10)\n    if c ~= 0 then\n  \
    \    res[c] = res[c] or x[i]\n    end\n  end\n  return table.sort(res)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszfwwpq0.lua:24:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpszfwwpq0.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ans, count = {}, 0\n  for i=1,#x do \n    if x[i]%2\
    \ == 0 then\n      count = count + 1\n      table.insert(ans,x[i])\n    end\n\
    \  end\n  return ans, count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyet7mdx.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmphyet7mdx.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  if x == nil then return end\n  local ys = {}\n  local cnt\
    \ = 1\n  for i = 1, #x do\n    if x[i] % 2 == 0 then ys[cnt] = x[i] end\n    cnt\
    \ = cnt + 1\n  end\n  return table.sort(ys)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5newr_ro.lua:23:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp5newr_ro.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i=1,#x do\n        if x[i] % 2\
    \ == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvly3tc4t.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvly3tc4t.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n\tassert(type(x) == \"table\")\n\tlocal out = {}\n\tlocal\
    \ n = #x\n\tlocal m = #x % 2\n\tlocal i = 1\n\twhile i <= n do\n\t\tlocal j =\
    \ 1\n\t\twhile j <= m and i % x[j] ~= 0 do\n\t\t\tj = j + 1\n\t\tend\n\t\tif j\
    \ ~= m then\n\t\t\ttable.insert(out, i)\n\t\t\ti = i + 1\n\t\tend\n\t\tm = m +\
    \ 1\n\tend\n\treturn out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykwcyp_r.lua:32:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpykwcyp_r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local d = {}\n  \n  for i = 1, #x do\n    -- Get number\
    \ in string and check its evenness\n    local n = x[i]\n    local is_even = n\
    \ % 2 == 0\n    \n    -- If number is even then add it to array d\n    if is_even\
    \ then\n      table.insert(d, n)\n    end\n  end\n  \n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyffll9l.lua:29:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpsyffll9l.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    if x == nil then return nil end\n    \n    if #x == 0\
    \ then return x end\n    \n    -- Initialize a hash to hold unique numbers.\n\
    \    local unique_nums = {}\n    \n    for i = 1, #x do\n        -- Add each element\
    \ to the hash and ignore duplicates.\n        unique_nums[#unique_nums + 1] =\
    \ x[i]\n    end\n    \n    -- Create a list of unique numbers with unique digits.\n\
    \    -- We can't add each unique number to the hash since it might have \n   \
    \ -- already been added (like with 33).\n    local unique_nums_sorted = {}\n \
    \   \n    -- For every unique number in unique_nums list we check whether \n \
    \   -- the number has even digit.\n    for i = 1, #unique_nums do\n        --\
    \ Check if a number is even or not.\n        if unique_nums[i] % 2 == 0 then\n\
    \            -- If number is even, add it to the list.\n            unique_nums_sorted[#unique_nums_sorted\
    \ + 1] = unique_nums[i]\n        end\n    end\n    \n    -- Sort the list of unique\
    \ numbers in decreasing order.\n    table.sort(unique_nums_sorted, function(a,\
    \ b) return b - a; end)\n    \n    -- Return the list of unique numbers.\n   \
    \ return unique_nums_sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnkw2g2ko.lua:47:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpnkw2g2ko.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local digits = {}\n    \n    for _, v in ipairs(x) do\n\
    \        if not v % 2 then\n            table.insert(digits, v)\n        end\n\
    \    end\n    \n    return table.sort(digits)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp49hj7mtw.lua:13:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmp49hj7mtw.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp49hj7mtw.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(res, x[i])\n        end\n    end\n \
    \   return table.sort(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7fwq2zsi.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp7fwq2zsi.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  if #x > 0 then\n    local new_x = {}\n    for i = 1, #x\
    \ do\n      local digit = x[i]\n      local temp = {}\n      for j = 1, #new_x\
    \ do\n        local temp_digit = new_x[j]\n        if digit == temp_digit then\n\
    \          temp[#temp + 1] = temp_digit \n        else\n          break\n    \
    \    end\n      end\n      if #temp > 0 then\n        new_x[j] = temp\n      end\n\
    \    end\n    return new_x\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gk2q6sr.lua:35:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp9gk2q6sr.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local sorted_x = table.sort(x)\n  \n  local i, j, k = 1\n\
    \  local unique_digis = {}\n  for i = 1, #sorted_x do\n    while j > 0 and sorted_x[i]\
    \ ~= sorted_x[j] do\n      unique_digis.[#unique_digis + 1] = sorted_x[i]\n  \
    \    j = j - 1\n    end\n    j = k\n    k = k + 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvi41apq2.lua:16: <name> expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local table = {}\n    \n    for i = 1, #x do\n       \
    \ local val = x[i]\n        local ok = true\n        for j = 1, #table do\n  \
    \          if val % table[j] == 0 then\n                table.insert(x, val)\n\
    \                ok = false\n                break\n            end\n        end\n\
    \        if ok then\n            table.insert(x, val)\n        end\n    end\n\
    \    \n    return x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3ubh61b.lua:23:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpw3ubh61b.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpw3ubh61b.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ans = {}\n  for i = 1, #x do\n\
    \    if not seen[x[i]] then\n      seen[x[i]] = true\n      table.insert(ans,\
    \ x[i])\n    end\n  end\n  table.sort(ans)\n  return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqebr9ln2.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1, 15, 33, 1422}\nstack traceback:\n\t/tmp/tmpqebr9ln2.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1,#x do\n    if math.fmod(x, 10)\
    \ == 0 then\n      table.insert(ret, x)\n    end\n    x = math.fmod(x, 10)\n \
    \ end\n  table.sort(ret)\n  -- remove duplicate elements in increasing order.\n\
    \  local i = 1\n  while i <= #ret do\n    if ret[i] ~= ret[i-1] then\n      table.remove(ret,\
    \ i)\n    end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpawk_sdmt.lua:12:\
    \ bad argument #1 to 'fmod' (number expected, got table)\nstack traceback:\n\t\
    /tmp/tmpawk_sdmt.lua:12: in local 'candidate'\n\t/tmp/tmpawk_sdmt.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local table = {}\n  local i = 1\n  while i <= #x do\n  \
    \  local found = true\n    for i=1,i do\n      if x[i] % 2 == 0 then\n       \
    \ found = false\n        break\n      end\n    end\n    if found then\n      table.insert(table,x[i])\n\
    \    end\n    i = i + 1\n  end\n  table.sort(function(a,b) return a > b end)\n\
    \  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7gtvrxlk.lua:21:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmp7gtvrxlk.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp7gtvrxlk.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  if x == nil then return x end\n  local table = {}\n  for\
    \ i, v in ipairs(x) do\n    local b = string.format(\"%0.d\", v)\n    if string.find(b,\
    \ \" \") then\n      table[b] = v\n    end\n  end\n  table.sort(function(t1, t2)\n\
    \    if t1 < t2 then return 1 end\n    if t1 > t2 then return -1 end\n    return\
    \ 0\n  end)\n  local result = {}\n  for _, v in pairs(table) do\n    table.insert(result,\
    \ v)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi6la6a3v.lua:18:\
    \ attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpi6la6a3v.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpi6la6a3v.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ans = {}\n  for i=1,#x do \n    if x[i] % 2 == 0 then\n\
    \      table.insert(ans, x[i])\n    end\n  end\n  return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_glc3nh9.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp_glc3nh9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local i = 1\n  local out = {}\n  while i < #x do\n    if\
    \ x[i] % 2 == 0 then\n      if #out == 0 then\n        out = x\n      else\n \
    \       for j = 1, #out do\n          local k = out[j]\n          if k > x[i]\
    \ then break end\n        end\n        if i == k then\n          out[#out+1] =\
    \ x[i]\n        else\n          out[#out+1] = k\n        end\n      end\n    end\n\
    \    i = i + 1\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4tsju61a.lua:36:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmp4tsju61a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   if #x == 0 then return nil end\n   local i = 0\n   local\
    \ result = {}\n   while i < #x do\n      if x[i] % 2 == 0 then\n         result[i]\
    \ = x[i]\n         i = i + 1\n      end\n   end\n   return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_lvb8tz3.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp_lvb8tz3.lua:14: in local 'candidate'\n\t/tmp/tmp_lvb8tz3.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  local i = #x\n  while i > 0 do\n  \
    \  if x[i] % 2 == 0 then\n      result[#result + 1] = x[i]\n    end\n    i = i\
    \ - 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphvj4bs9f.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmphvj4bs9f.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local newtable = {}\n    local temp = 1\n    local n =\
    \ 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjy35nwdn.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i=1,#x do\n        if x[i] % 2\
    \ == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5w3uujr.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpw5w3uujr.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- If the list is empty, return an empty list.\n  if #x\
    \ == 0 then\n    return {}\n  end\n  local sorted_x = sortTable({ key = function(n)\n\
    \    return tostring(n)\n  end,\n  value = x })\n  local result = {}\n  for i\
    \ = 1, #sorted_x do\n    local digit = string.sub(sorted_x[i], 1, 1)\n    local\
    \ length = string.len(digit)\n    if length % 2 == 0 then\n      result[#result\
    \ + 1] = digit\n    end\n  end\n  -- Sort the result list in increasing order.\n\
    \  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwet19719.lua:14:\
    \ attempt to call a nil value (global 'sortTable')\nstack traceback:\n\t/tmp/tmpwet19719.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpwet19719.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local y = {}\n  local z = 1\n  \n  for i = 1, #x do -- Iterate\
    \ through the array\n    local k = i\n    while k ~= z do\n      if not x[k] %2\
    \ then -- If x[k] has a even digit, then\n        y[#y+1] = x[k]\n      end\n\
    \      k = k - 1\n    end\n    z = z + 1\n  end\n  \n  return y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwn_cyzox.lua:30:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpwn_cyzox.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- sort the list\n  table.sort(x)\n  -- initialize new list\n\
    \  local new_list = {}\n  -- iterate the list\n  for i = 1, #x do\n    -- iterate\
    \ the number\n    for j = 1, #x do\n      -- if current number is greater than\
    \ previous\n      if x[i] >= x[j] then\n        -- break the loop\n        break\n\
    \      elseif x[j] == 0 then\n        -- push number to the list\n        table.insert(new_list,\
    \ x[i])\n      end\n    end\n  end\n  -- return the list\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvqk4cnh.lua:35:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpcvqk4cnh.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local seen = {}\n    for i = 1, #x do\n        local digit\
    \ = x[i]\n        -- Check if this digit has already been seen\n        if seen[digit]\
    \ == nil then\n            seen[digit] = i\n        else\n            x[seen[digit]]\
    \ = nil\n        end\n    end\n    -- Return the sorted list\n    return x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53x6q2ru.lua:27:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmp53x6q2ru.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local index = 1\n  local result = {}\n  for i = 1, #x do\n\
    \    if x[i] == 0 then\n      result[index] = x[i]\n      index = index + 1\n\
    \    end\n  end\n  for i = 1, #result do\n    if i % 2 == 1 then\n      result[i]\
    \ = 0\n    end\n  end\n  for i = 2, #result do\n    if result[i] == 0 then\n \
    \     table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0i8r320.lua:34:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpx0i8r320.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local n = {}\n    for _ = 1, #x do n[tostring(x[_])] =\
    \ true end\n    local sorted = {}\n    for _, n in pairs(n) do sorted[#sorted\
    \ + 1] = n end\n    return table.sort(sorted)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ compare two boolean values\nstack traceback:\n\nRan 1 tests in 0.000 seconds,\
    \ 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    if x==nil then\n        return nil\n    end\n    local\
    \ newTable = table.new(nil)\n    for i = 1,#x do\n        if x[i]%2==0 then\n\
    \            table.insert(newTable, x[i])\n        end\n    end\n    return newTable\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4_hql_tj.lua:13:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmp4_hql_tj.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4_hql_tj.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local digits = {}\n  local index = {}\n  local len = #x\n\
    \  \n  for i=1,len do\n    local digit = x[i] % 10\n    if digit == 0 then\n \
    \     index[i] = true\n    else\n      digits[digit] = digits[digit] or true\n\
    \    end\n  end\n  \n  local i = 1\n  local result = {}\n  \n  while i <= len\
    \ do\n    local t = i - 1\n    local k = t\n    \n    while k >= 0 and digits[k]\
    \ ~= false do\n      k = k - 1\n    end\n    \n    if k > i then\n      index[i]\
    \ = false\n      result[i] = x[i]\n    end\n    i = i + 1\n  end\n  \n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffg3vrry.lua:48:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpffg3vrry.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   if #x == 0 then\n      return x\n   else\n      local y\
    \ = {}\n      for _,v in ipairs(x) do\n         if v ~= math.floor(v) then\n \
    \           table.insert(y, v)\n         end\n      end\n      return unique_digits(y)\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4o3rxj8p.lua:26:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp4o3rxj8p.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if ((x%i)==0)\
    \ then\n            table.insert(ret, i)\n        end\n    end\n    table.sort(ret)\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbifz54er.lua:12:\
    \ attempt to perform arithmetic on a table value (local 'x')\nstack traceback:\n\
    \t/tmp/tmpbifz54er.lua:12: in local 'candidate'\n\t/tmp/tmpbifz54er.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- If the list is empty or contains only zeroes, return\
    \ an empty list\n  -- otherwise the return list will contain unique digits of\
    \ x.\n  if x == '' or x:find('/')~=nil then\n    return ''\n  end\n  local new_x\
    \ = {}\n  local i = 0\n  while i <= #x do\n    if x[i] % 2 == 0 then\n      table.insert(new_x,\
    \ x[i])\n    end\n    i = i + 1\n  end\n  table.sort(new_x)\n  return new_x\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl5ajjn3p.lua:12:\
    \ attempt to call a nil value (method 'find')\nstack traceback:\n\t/tmp/tmpl5ajjn3p.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpl5ajjn3p.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  if #x == 0 then\n    return nil\n  end\n  \n  local new_list\
    \ = {}\n  local i = 1\n  for k in pairs(x) do\n    if i%2 == 0 and x[k] ~= 0 then\n\
    \      table.insert(new_list, k)\n    end\n    i = i+1\n  end\n  \n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzg92bpfy.lua:29:\
    \ expected: {1, 15, 33}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmpzg92bpfy.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- We will store the results in a table (T), so we'll need\
    \ a hash \n  -- (H) to check duplicates.\n  local H = {}\n  -- To avoid using\
    \ sort(), we'll store the number as strings in an array\n  -- (A).\n  local A\
    \ = {}\n  -- To count the number of numbers that have at least one odd digit.\n\
    \  local count\n  \n  for i=1,#x do\n    -- Convert each x to a string, and get\
    \ the first element of the string.\n    local str = x[i]..'0'\n    -- Check that\
    \ this string has at least one odd digit.\n    -- The first character of the string\
    \ is '0', so we'll use the\n    -- modulo % to check whether a digit is odd.\n\
    \    count = str:gsub('%d'):gsub('0'):mod(2)\n    \n    -- If it has an odd digit,\
    \ add it to the result table (A).\n    if count ~= 1 then\n      A[i] = 1\n  \
    \    -- If we haven't seen this string before, add it to the hash table (H).\n\
    \      if not H[str] then H[str] = 1 end\n    end\n  end\n  \n  -- Return a sorted\
    \ list of the entries in H (the hash table).\n  -- Sort increasing.\n  -- This\
    \ way, the results are in decreasing order.\n  return table.sort(H, function(a,\
    \ b) return H[a] > H[b] end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4euvncor.lua:25:\
    \ bad argument #2 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmp4euvncor.lua:25: in local 'candidate'\n\t/tmp/tmp4euvncor.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n\tassert(type(x) == \"table\", \"input must be table\")\n\t\
    local function f(k)\n\t\tlocal v = x[k]\n\t\tif v == 0 then return nil end\n\t\
    \tlocal c = math.floor(math.log(v + 1, 10))\n\t\tv = v * 10 ^ c\n\t\tlocal r\n\
    \t\tfor i = 1, 9 do\n\t\t\tif v % 10 == i then\n\t\t\t\tr = r or v\n\t\t\t\tv\
    \ = math.floor(v / 10)\n\t\t\telse\n\t\t\t\tr = nil\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\tend\n\t\tif r ~= nil then\n\t\t\ttable.insert(x, k)\n\t\t\treturn r\n\t\t\
    end\n\t\treturn nil\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqth9z54d.lua:42: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local seen = {}\n    for _,v in pairs(x) do\n        local\
    \ digit = v % 10\n        if seen[digit] then\n            x[#x+1] = v\n     \
    \   else\n            seen[digit] = 1\n        end\n    end\n    return x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7jjur6y.lua:25:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpp7jjur6y.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local digits = {}\n    for i = 1, math.max(x) do\n   \
    \     if not is_digit(x[i]) then break end\n        if digits.find(x[i]) ~= nil\
    \ then\n            break\n        end\n        table.insert(digits, x[i])\n \
    \   end\n    table.sort(digits)\n    return digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_sp7l7dg.lua:11:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmp_sp7l7dg.lua:11: in\
    \ local 'candidate'\n\t/tmp/tmp_sp7l7dg.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  if x == nil then\n    return nil\n  end\n  \n  local list_copy\
    \ = table.remove(list, 1)\n  local digit_counts = {}\n  for i = 1, #list_copy\
    \ do\n    digit_counts[list_copy[i]] = digit_counts[list_copy[i]] + 1 \n    if\
    \ digit_counts[list_copy[i]] % 2 == 0 then\n      table.remove(list_copy, i)\n\
    \    end\n  end\n  return list_copy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpswb3yooe.lua:14:\
    \ bad argument #1 to 'remove' (table expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpswb3yooe.lua:14: in local 'candidate'\n\t/tmp/tmpswb3yooe.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    if not x then return x end\n    local i = 1\n    local\
    \ new_x = {}\n    for v in x do\n        if v % 2 == 0 then\n            i = i\
    \ + 1\n        else\n            new_x[i] = v\n        end\n    end\n    for i\
    \ = 2, #new_x do\n        if new_x[i] * i > #new_x then\n            new_x[#new_x\
    \ + 1] = (new_x[i] * i) - i\n        end\n    end\n    return new_x\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgh3ulcon.lua:13:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpgh3ulcon.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpgh3ulcon.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local digit_counts = {}\n    for i = 1, #x do\n      \
    \  local digit = x[i]\n        local digit_count = digit_counts[digit] or 0\n\
    \        digit_counts[digit] = digit_count + 1\n    end\n    \n    local results\
    \ = {}\n    for digit, digit_count in pairs(digit_counts) do\n        if digit_count\
    \ == 2 then\n            table.insert(results, digit)\n        end\n    end\n\
    \    \n    table.sort(results)\n    \n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx2nvq18v.lua:32:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpx2nvq18v.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n        if not\
    \ x:sub(i, i) then\n            table.insert(result, x:sub(i, i))\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0mivqtek.lua:12:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp0mivqtek.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp0mivqtek.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- Check whether x is empty or has 1 element.\n  if #x ==\
    \ 1 then return x end\n  -- Check whether x has even number of elements. \n  if\
    \ #x % 2 ~= 0 then return nil end\n  local y = {} -- Initialize a empty list of\
    \ unique elements.\n  local i, j, k -- k is index for x list.\n  for i = 1, #x\
    \ do\n    -- If x list has 1 element, x list is sorted and \n    -- all elements\
    \ are unique and x list becomes \n    -- empty.\n    if #x == 1 then break end\n\
    \    -- If x list has an even number of elements.\n    -- j represents current\
    \ element. \n    -- Compare current element with next one in x.\n    j = i\n \
    \   -- While j hasn't next element.\n    while j > 0 and x[j] ~= x[j-1] do\n \
    \     -- If current element in x list has odd number of \n      -- digits, append\
    \ current element to y list.\n      if #x[j] % 2 ~= 0 then\n        y[k++] = x[j]\n\
    \      -- If current element in x list has even number of \n      -- digits, append\
    \ current element to y list.\n      else\n        y[k++] = x[j] \n      end\n\
    \      -- Update j to the next element in x list.\n      j = j - 1\n    end\n\
    \  end\n  return y \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5ty8839i.lua:30: unexpected symbol near '+'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local a = {}\n  for i = 1, #x do\n    if x[i] % 2 ~= 0 then\n\
    \      a[#a+1] = x[i]\n    end\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmcd_x10d.lua:22:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpmcd_x10d.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i=1,#x do\n        if x[i] > 0\
    \ then\n            local digit = x%10\n            if digit ~= 0 then\n     \
    \           res[#res+1] = digit\n            end\n            x = (x-digit)/10\n\
    \        end\n    end\n    return res\nend\n</cell>\n<text>\nWe have all the tools\
    \ to solve the problem, now we just need to create a function!\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp16g5oypz.lua:22: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   local function compare(a, b) return a:byte() - b:byte()\
    \ end\n   local function tostring(i) return string.format(\"%0*d\", i, x) end\n\
    \   return sort(x, compare, tostring)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplqh7n9tm.lua:12:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmplqh7n9tm.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmplqh7n9tm.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n\tlocal ret = {}\n\t\n\t-- Find all even digits in the list\n\
    \tfor i = 1, #x do\n\t\tlocal d = x[i]\n\t\tif d % 2 == 0 then\n\t\t\ttable.insert(ret,\
    \ d)\n\t\tend\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7ia57shl.lua:29: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n        if i\
    \ % 2 == 0 then\n            table.insert(result, x[i])\n        end\n    end\n\
    \    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48bj4j10.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1, 33}\nstack traceback:\n\t/tmp/tmp48bj4j10.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  \n  local i = 1\n  for item in x do\n\
    \    local str = tostring(item)\n    local number = tonumber(str)\n    local count\
    \ = 0\n    \n    while number > 0 do\n      count = count + 1\n      local remainder\
    \ = number % 10\n      number = math.floor(number / 10)\n      if not ret[remainder]\
    \ then\n        ret[remainder] = true\n      end\n    end\n  end\n  \n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp07sqivxa.lua:13:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmp07sqivxa.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp07sqivxa.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local digits = {}\n    for _, v in pairs(x) do\n     \
    \   digits[v] = true\n    end\n    local ans = {}\n    for v in pairs(digits)\
    \ do\n        if v then ans[#ans+1] = v end\n    end\n    return ans\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbodlpsh0.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1, 33, 1422, 15}\nstack traceback:\n\t/tmp/tmpbodlpsh0.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local s = {}\n    for i=1,#x do\n        local a = math.floor(x[i]\
    \ / 10)\n        if a~=0 then\n            if not s[a] then\n                s[a]\
    \ = true\n            end\n        end\n    end\n    local j = 1\n    local newx\
    \ = {}\n    for i=1,#x do\n        if not s[j] then\n            newx[j] = x[i]\n\
    \            j = j + 1\n        end\n    end\n    return newx\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxilruajv.lua:33:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpxilruajv.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local new_x = {}\n  local i = 1\n  while i <= #x do\n  \
    \  local v = x[i]\n    if v % 2 == 0 then\n      table.insert(new_x, v)\n    end\n\
    \    i = i + 1\n  end\n  return new_x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpic3oo6p5.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpic3oo6p5.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local u = {}\n    for i = 1, #x do\n        local digit\
    \ = x[i]\n        if digit == 0 then\n            table.remove(u)\n        elseif\
    \ digit % 2 == 0 then\n            table.insert(u, digit)\n        end\n    end\n\
    \    return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxynpgp9.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpcxynpgp9.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local t = {}\n    for _, v in ipairs(x) do\n        if\
    \ v then\n            for i = 1, v do\n                table.insert(t, v)\n  \
    \          end\n        end\n    end\n    table.sort(t, function(x,y) return x:reverse()\
    \ <= y :reverse() end)\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmzsfiosk.lua:18:\
    \ attempt to index a number value (local 'x')\nstack traceback:\n\t/tmp/tmpmzsfiosk.lua:18:\
    \ in function </tmp/tmpmzsfiosk.lua:18>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpmzsfiosk.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpmzsfiosk.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   local results = {}\n   for _,v in pairs(x) do\n      if\
    \ v then\n         for i=1,v do\n            table.insert(results,0)\n       \
    \  end\n         table.insert(results,v)\n      end\n   end\n   return table.concat(results)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpubb52jy1.lua:25:\
    \ expected: {1, 15, 33}\nactual
    \nstack traceback:\n\t/tmp/tmpubb52jy1.lua:25: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.030 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- If the list is empty, return empty list\n  if not x then\n\
    \    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuukuuklp.lua:24: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   -- base case\n   if x == nil then return nil end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb53ecm1_.lua:22: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n        local digit\
    \ = x[i]\n        -- Remove all the even digits and check if it has even digits\
    \ left.\n        if digit % 2 == 0 then\n            local n = math.floor(digit\
    \ / 2)\n            local j = i-1\n            while j >= 1 and x[j] % 2 == 0\
    \ do\n                j = j - 1\n            end\n            if j >= 1 then\n\
    \                -- This number is odd, so remove even digits from the number\
    \ below\n                -- until it has no more even digits.\n              \
    \  n = n - math.floor(digit / math.pow(2, j))\n            end\n            table.insert(res,\
    \ n)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3iwou1pc.lua:34:\
    \ expected: {1, 15, 33}\nactual: {356}\nstack traceback:\n\t/tmp/tmp3iwou1pc.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local digits = {}\n  for i = 1, #x do\n    if x[i] > 0 and\
    \ x[i] <= 9 then\n      table.insert(digits, x[i])\n    end\n  end\n  table.sort(digits)\n\
    \  return digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70jh52e7.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1}\nstack traceback:\n\t/tmp/tmp70jh52e7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local table = {}\n  for _, i in ipairs(x) do\n    if not\
    \ string.sub(i, 1, 1) then\n      table.insert(table, i)\n    end\n  end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwcfyafmr.lua:26: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local i = 1\n  local ans = {}\n  while i <= #x do\n    local\
    \ tmp = math.mod(x[i], 10)\n    ans = table.concat(ans, tmp)\n    x[i] = x[i]/10\n\
    \    i = i + 1\n  end\n  return ans\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp03c_sawb.lua:13:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmp03c_sawb.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp03c_sawb.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local set = {}\n    for i, v in ipairs(x) do\n       \
    \ if v ~= 0 then\n            table.insert(set, math.floor(v))\n        end\n\
    \    end\n    table.sort(set)\n    return set\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u2mit1e.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1, 15, 33, 1422}\nstack traceback:\n\t/tmp/tmp0u2mit1e.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   local res = {}\n   for _, v in ipairs(x) do\n      local\
    \ r = v / 10\n      if not r or not (r % 2) then\n         table.insert(res, v)\n\
    \      end\n   end\n   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp244c58ox.lua:23:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp244c58ox.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    local lastDigit = 0\n    for i = 1,\
    \ #x do\n        if x[i] > lastDigit then\n            lastDigit = x[i]\n    \
    \        table.insert(ret, lastDigit)\n        end\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wbxovzt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422}\nstack traceback:\n\t/tmp/tmp0wbxovzt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    if x == nil then return nil end\n    local res = {}\n\
    \    \n    for i = 1, #x do\n        for j = 1, #res do\n            if ((x[i]\
    \ * 10 + x[j]) % 10) == 0 then\n                table.remove(res, j)\n       \
    \     end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr33y0ryl.lua:26:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpr33y0ryl.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local rt = {}\n    for i, v in ipairs(x) do\n        local\
    \ d = 0\n        for j = 1, #v do\n            d = d * 10 + v[j]\n        end\n\
    \        if d > 0 then\n            table.insert(rt, d)\n        end\n    end\n\
    \    return rt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq9j4rzkg.lua:13:\
    \ attempt to get length of a number value (local 'v')\nstack traceback:\n\t/tmp/tmpq9j4rzkg.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpq9j4rzkg.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  if x==nil then return nil end\n  if #x==0 then return x\
    \ end\n  local t={}\n  for i=1,#x do\n    if t.contains( x[i] ) then return nil\
    \ end\n    t.add(x[i])\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ndjgoy1.lua:14:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp_ndjgoy1.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp_ndjgoy1.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for k, v in pairs(x) do\n        if\
    \ math.floor(v / 10) % 2 == 0 then\n            table.insert(res, v)\n       \
    \ end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe99_0oeq.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422, 1}\nstack traceback:\n\t/tmp/tmpe99_0oeq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local new_list = {}\n  local size = #x\n  local i = 1\n\
    \  local j = 1\n  for i = 1, size do\n    while j > 0 and x[i] % 10 ~= 0 do\n\
    \      new_list[j] = x[i]\n      i = i + 1\n      j = j + 1\n    end\n  end\n\
    \  while j <= size do\n    new_list[j] = x[i]\n    i = i + 1\n    j = j + 1\n\
    \  end\n  return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul9hi9j3.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpul9hi9j3.lua:15: in local 'candidate'\n\t/tmp/tmpul9hi9j3.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local function check_even(n)\n        local v = n:byte()\n\
    \        return not (v %2 == 0 and v ~= 0)\n    end\n    local function unique_digits_aux(arr,\
    \ i, n)\n        if i == n then\n            return arr\n        end\n       \
    \ if check_even(arr[i]) then\n            return unique_digits_aux(arr, i + 1,\
    \ n)\n        else\n            return unique_digits_aux(arr, i + 1, n) .. arr[i]\n\
    \        end\n    end\n    return unique_digits_aux(x, 1, #x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppz4_blc1.lua:11:\
    \ attempt to index a number value (local 'n')\nstack traceback:\n\t/tmp/tmppz4_blc1.lua:11:\
    \ in upvalue 'check_even'\n\t/tmp/tmppz4_blc1.lua:18: in function </tmp/tmppz4_blc1.lua:14>\n\
    \t(...tail calls...)\n\t/tmp/tmppz4_blc1.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local n = tonumber(x[i])\n\
    \    if n > 0 and n % 2 == 0 then\n      table.insert(ret, x)\n    end\n  end\n\
    \  return table.sort(ret)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporh_7f38.lua:23:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmporh_7f38.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local y = 0\n  local z = {}\n  for i = 1, #x do\n    if\
    \ x:sub(i, i) ~= 0 then\n      z = z + 1\n      if x:sub(i, i) ~= 0 then\n   \
    \     x:sub(i, i)\n      end\n    end\n  end\n  if z > 0 then\n    for i = 1,\
    \ z do\n      y = y + 1\n      if x:sub(i, i) ~= 0 then\n        x:sub(i, i)\n\
    \      end\n    end\n  end\n  if y > 0 then\n    for i = y, #x do\n      x:sub(i,\
    \ i)\n    end\n  end\n  return x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj6kxu14u.lua:13:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpj6kxu14u.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpj6kxu14u.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  if #x == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsgxqnd7f.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local d = {}\n  local n = 1\n  for i = 1, #x do\n    if\
    \ string.sub(x[i], 1, 1) ~= '0' then\n      d[n] = string.sub(x[i], 1, 1)\n  \
    \    n = n + 1\n    end\n  end\n  return table.sort(d)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpphzfdlnz.lua:24:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpphzfdlnz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function helper(list, i)\n    if i >= #x then\n  \
    \    return list\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph3r2t167.lua:24: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- Your code here\n  local table = {}\n  for i = 1, #x do\n\
    \    if x[i] % 2 ~= 0 then\n      table.insert(x[i], table[i])\n    end\n  end\n\
    \  table.sort(function(a,b) return a < b end)\n  return table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8elo614v.lua:14:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmp8elo614v.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp8elo614v.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  if x == nil then return nil end\n  local result = {}\n \
    \ local i = 0\n  \n  for k in pairs(x) do\n    if x[k] % 2 == 0 then\n      table.insert(result,\
    \ x[k])\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvkvbtvjs.lua:29: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for _, v in pairs(x) do \n    local\
    \ m = v ~= 0 and v:reverse():find\"%d%d\"\n    if m then \n      result[#result+1]\
    \ = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc4l_fgs3.lua:12:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmpc4l_fgs3.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpc4l_fgs3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local rs = {}\n  for i = 1, #x do\n    -- Get current item\
    \ and add it to the result if current item is even.\n    if x[i] % 2 ~= 0 then\n\
    \      rs[#rs + 1] = x[i]\n    end\n  end\n  return table.sort(rs)\nend\n</cell>\n\
    <cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp27t7hpt0.lua:19: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local sorted_x = sort(x)\n  local unique_digits = {}\n \
    \ for i = 1, #sorted_x do\n    if sorted_x[i] % 2 ~= 0 then\n      table.insert(unique_digits,\
    \ sorted_x[i])\n    end\n  end\n  table.sort(unique_digits)\n  return unique_digits\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnn11w0mt.lua:10:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpnn11w0mt.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpnn11w0mt.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- base case\n  if x==nil then return nil end\n  if #x==0\
    \ then return x end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiu6dlvmi.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n        local s\
    \ = x[i]:match('%d')\n        if s == nil then \n            return x \n     \
    \   elseif #s > 0 then\n            table.insert(res, s)\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zc26q69.lua:12:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp6zc26q69.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp6zc26q69.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local output = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwmyfowyp.lua:22: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   -- Create a table which stores number as digit in it's\
    \ \n   -- binary representation as key and store all numbers \n   -- in that table\
    \ as value.\n   local t = {}\n   for i = 1, #x do\n      t[bit.bor(string.sub(x,i,i),'0')]\
    \ = 1\n   end\n   return table.sort(t)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpav6zsotk.lua:15:\
    \ attempt to index a nil value (global 'bit')\nstack traceback:\n\t/tmp/tmpav6zsotk.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpav6zsotk.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- Based on: http://www.comptechdoc.org/independent/ruby/ruby-doc-\n\
    \  -- stdlib/ruby-1.9.3/doc/xref/classes/Float.html#M000214\n  -- http://www.ruby-doc.org/core-1.9.3/Float.html\n\
    \  local digits = {}\n  local i\n  \n  if x then\n    for i=1,#x do\n      digits[x[i]]\
    \ = digits[x[i]] + 1 \n    end\n  else\n    return nil\n  end\n  \n  -- The keys\
    \ in digits are sorted before traversing, so we get \n  -- the result as we want.\n\
    \  -- return digits[#digits]\n  \n  -- Another way of doing this:\n  -- local\
    \ digits = {}\n  -- local i\n  -- local c\n  \n  -- for i, c in pairs(x) do\n\
    \  --   if not digits[c] then\n  --     digits[c] = i\n  --   end\n  -- end\n\
    \  \n  -- return digits\n  \n  return ipairs\n  end\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphe623ps2.lua:18:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmphe623ps2.lua:18: in local 'candidate'\n\t/tmp/tmphe623ps2.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local answer = {}\n  for _, v in ipairs(x)\
    \ do\n    if seen[v] then continue end\n    seen[v] = true\n    table.insert(answer,\
    \ v)\n  end\n  return answer\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgtd3si4s.lua:13: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- TODO: More efficient solution? \n  -- Perhaps use hashmap?\n\
    \  local i = 1\n  local n = #x\n  local j = 1\n  local m = 1\n  local ret = {}\n\
    \  while i < n do\n    local c = x[i]\n    if c == 10 then\n      if ret[j] ~=\
    \ nil then\n        j = (j + 1) % (m+1)\n      end\n      ret[j] = x[i]\n    \
    \  i = i + 1\n      n = n - 1\n      if n == 0 then\n        break\n      end\n\
    \      m = m + 1\n      ret = {}\n      j = 1\n    else\n      if c ~= 0 and c\
    \ % 2 == 0 then\n        if ret[j] ~= nil then\n          j = (j + 1) % (m+1)\n\
    \        end\n        ret[j] = x[i]\n        i = i + 1\n        n = n - 1\n  \
    \      if n == 0 then\n          break\n        end\n        m = m + 1\n     \
    \ end\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   local ans = {}\n   local i = 0\n   for v in x:gmatch('%d*')\
    \ do\n      if v then\n         if math.floor(v / 10) == 0 then\n            ans[i]\
    \ = v\n         else\n            i = i + 1\n         end\n      end\n   end\n\
    \   return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxwtk_s0t.lua:12:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpxwtk_s0t.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpxwtk_s0t.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local a = {}\n    for v in pairs(x) do\n        if v %\
    \ 2 == 0 then\n            table.insert(a, v)\n        end\n    end\n    table.sort(a)\n\
    \    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpol1w0ftd.lua:23:\
    \ expected: {1, 15, 33}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmpol1w0ftd.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   -- Convert to a sorted list for faster search.\n   table.sort(x)\n\
    \   local results = {}\n   local last = -1\n   for _, value in ipairs(x) do\n\
    \      if not value % 2 then\n         if last ~= -1 then\n            results[last]\
    \ = value\n         end\n         last = value\n      end\n   end\n   if last\
    \ ~= -1 then\n      results[last] = value\n   end\n   return results\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwqqtdpun.lua:15:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpwqqtdpun.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpwqqtdpun.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local new_arr = {}\n    for _, v in pairs(x) do\n    \
    \    if not is_even(v) then\n            new_arr[#new_arr + 1] = v\n        end\n\
    \    end\n    return table.sort(new_arr)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp11e5ifba.lua:12:\
    \ attempt to call a nil value (global 'is_even')\nstack traceback:\n\t/tmp/tmp11e5ifba.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp11e5ifba.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local result = {x[1]}\n  for i = 2, #x\
    \ do\n    if not seen[string.sub(x[i],1,1)] then\n      seen[string.sub(x[i],1,1)]\
    \ = true\n      table.insert(result, x[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpim6tyz1z.lua:24:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422}\nstack traceback:\n\t/tmp/tmpim6tyz1z.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local new_table = {}\n  local index = 1\n  \n  for i=1,\
    \ #x do\n    local y = x[i]\n    \n    if y % 2 == 0 then\n      new_table[index]\
    \ = y\n      index = index + 1\n    end\n  end\n  \n  -- Return all elements that\
    \ hasn't any even digit\n  new_table.sort = function()\n    local tmp = {}\n \
    \   for i=1, #new_table do\n      if new_table[i] % 2 == 0 then\n        table.insert(tmp,\
    \ new_table[i])\n      end\n    end\n    return tmp\n  end\n  return new_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cte3g_7.lua:38:\
    \ expected: {1, 15, 33}\nactual: {1422, sort=function: 0x840230}\nstack traceback:\n\
    \t/tmp/tmp1cte3g_7.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  assert(type(x) == 'table')\n  assert(#x > 0)\n  local ret\
    \ = {}\n  for i = 1, #x do\n    if (x[i] % 2 ~= 0) then\n      table.insert(ret,\
    \ x[i])\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3e5z06u3.lua:24:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmp3e5z06u3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local results = {}\n    for n in x:gmatch(\"%d*\") do\n\
    \        if #n % 2 ~= 0 then\n            results[#results+1] = n\n        end\n\
    \    end\n    return table.sort(results)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwtkhsqfc.lua:11:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpwtkhsqfc.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpwtkhsqfc.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    if not x then\n        return []\n    end\n    local ret\
    \ = {}\n    for v in x\n    do\n        if ret[v] then\n            --print('already\
    \ exist')\n        else\n            table.insert(ret, v)\n        end\n    end\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfp_9w_zp.lua:11: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local out = {}\n  for i = 1, #x do\n    local digit = x:sub(i,i)\n\
    \    if digit:sub(1,1):lower() ~= '0' and digit:sub(1,1) ~= '2' then\n      table.insert(out,\
    \ digit)\n    end\n  end\n  return table.sort(out)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphema52kd.lua:12:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmphema52kd.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmphema52kd.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local new_x = {}\n    local new_num = 0\n    \n    for\
    \ i = 1, #x do\n        local current_digit = x[i]\n        if current_digit %\
    \ 2 == 0 then\n            new_num = new_num * 10 + current_digit\n          \
    \  new_x[i] = new_num\n            new_num = 0\n        end\n    end\n    \n \
    \   -- now we will find all even digits and remove it from x \n    -- using loop\
    \ over #x to decrement every even digit by 1 and \n    -- add the new value to\
    \ the new_x\n    for i = 1, #x do\n        local current_digit = x[i]\n      \
    \  if current_digit % 2 == 0 then\n            new_x[i] = new_x[i] - 1\n     \
    \   end\n    end\n    return new_x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3i_fb_z.lua:37:\
    \ expected: {1, 15, 33}\nactual: {3=1421}\nstack traceback:\n\t/tmp/tmpc3i_fb_z.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   local set = {}\n   for i=1,#x do\n      local digit = x[i]\n\
    \      if not set[digit] then\n         set[digit] = true\n         table.insert(x,\
    \ digit)\n      end\n   end\n   table.sort(x)\n   return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbw17mgsj.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1, 1, 15, 15, 33, 33, 1422, 1422}\nstack traceback:\n\
    \t/tmp/tmpbw17mgsj.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n\tlocal results = {}\n\tfor i = 1, #x do\n\t\tlocal count\
    \ = 0\n\t\tlocal found = false\n\t\tfor j = 1, #x do\n\t\t\tif x[i] == x[j] then\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\tif count == 0 then\n\t\t\t\
    table.insert(results, x[i])\n\t\tend\n\tend\n\treturn results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_im2gct.lua:29:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpw_im2gct.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   local temp = {}\n   for i = 1, #x do\n      local dig =\
    \ 0\n      for j = 1, math.abs(x[i]) do\n         dig = dig * 10 + (x[i]-j%10)\n\
    \      end\n      if temp[dig] then break end\n      temp[dig] = 1\n   end\n \
    \  return temp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_rrdbu6.lua:25:\
    \ expected: {1, 15, 33}\nactual: {-6284491517182056996=1, 0=1, 1543209877654320=1,\
    \ 9134884541215786318=1}\nstack traceback:\n\t/tmp/tmpl_rrdbu6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    local v = x[i]\n\
    \    if v % 2 == 0 then\n      table.insert(result, v)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vr7uwzw.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6vr7uwzw.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   local t = {}\n   local cnt = 1\n   for i = 1, #x do\n \
    \     if x[i] > 0 then\n         if math.floor(x[i]) == x[i] then\n          \
    \  t[cnt] = x[i]\n         else\n            cnt = cnt + 1\n         end\n   \
    \   end\n   end\n   return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugpxyea6.lua:27:\
    \ expected: {1, 15, 33}\nactual: {1}\nstack traceback:\n\t/tmp/tmpugpxyea6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ans = {}\n    for i = 1, #x do\n        local c\
    \ = math.floor(x[i])\n        if c % 2 == 0 then\n            if c ~= x[i] then\n\
    \                table.insert(ans, c)\n            end\n        end\n    end\n\
    \    return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfi2qi3r.lua:25:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpmfi2qi3r.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local table = {}\n  local i = 1\n  for val in x:gmatch(\"\
    %d*\") do\n    if table[i] ~= 0 then\n      table[i] = table[i - 1] + tonumber(val)\n\
    \    else\n      table[i] = tonumber(val)\n    end\n    i = i + 1\n  end\n  return\
    \ table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0n4m6y1y.lua:12:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmp0n4m6y1y.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp0n4m6y1y.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        local num\
    \ = x[i]\n        if math.floor(num / 2) == num then\n            table.insert(ret,\
    \ num)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsymp8lsq.lua:23:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpsymp8lsq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   local seen = {}\n   for i = 1,#x do\n      local digit\
    \ = x:sub(i,i)\n      if seen[digit] == nil then\n         seen[digit] = true\n\
    \         x = x .. digit\n      end\n   end\n   return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwaxfvjrs.lua:12:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpwaxfvjrs.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpwaxfvjrs.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   local i = 1\n   local j = 1\n   local y = 0\n   \n   while\
    \ i <= #x do\n      if x[i] == \"0\" then\n         y = y + 1\n      end\n   \
    \   i = i + 1\n      if y > 0 then\n         return x\n      end\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuas534ga.lua:28:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpuas534ga.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local function is_even(n)\n        return ((n and n %\
    \ 2) == 0)\n    end\n    local function is_unique_digit(l)\n        -- if l has\
    \ even number of digit, return true, else return false.\n        return is_even(#l)\
    \ ~= 0\n    end\n    local seen = {}\n    local res = {}\n    for i = 1, #x do\n\
    \        local d = x[i]\n        -- check if d is already in the seen list.\n\
    \        if seen[d] == 1 then\n            -- if d, already seen, add it to the\
    \ res list.\n            res[#res+1] = d \n        else\n            -- if d isn't\
    \ seen, add it to the seen list and\n            -- add it to the res list.\n\
    \            seen[d] = 1\n            res[#res+1] = d\n        end\n    end\n\
    \    -- sort the unique digits in increasing order.\n    table.sort(res)\n   \
    \ return res\nend\n</code>\n<|/ a tags=algorithm,ruby |>\n<| a tags=algorithm,ruby\
    \ |>\nHere is one more in Ruby\n<code>\ndef unique_digits(arr)\n    arr.uniq!.sort!\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a |>\nA more rubyish approach. \n<code>\n\
    def unique_digits(arr)\n  arr.uniq.select{|x| x.to_s.chars.map(&:to_i).inject(:+)\
    \ == x.to_s.to_i }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg5fm7ia5.lua:36: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ans = {}\n  for i = 1, #x do\n    local digit = math.floor(x[i])\n\
    \    \n    -- If the digit is a digit, add it to the ans list\n    if digit ~=\
    \ 0 then\n      if digit == 0 then\n        if ans[i] ~= nil then\n          ans[i]\
    \ = nil\n        else\n          ans[i] = true\n        end\n      else\n    \
    \    ans[i] = true\n      end\n    end\n  end\n  \n  -- If ans is empty then return\
    \ nil\n  if #ans == 0 then\n    return nil\n  end\n  \n  -- Else return list with\
    \ all duplicate digits\n  return ans\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xyjvd5j.lua:40:\
    \ expected: {1, 15, 33}\nactual: {true, true, true, true}\nstack traceback:\n\t\
    /tmp/tmp4xyjvd5j.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   -- Only allow positive numbers\n   if not x[1] then return\
    \ x end\n   local y = {}\n   -- Fill y with all the even digits\n   for i = 1,\
    \ x[1] do\n      y[i] = math.floor(x[i]/2)*2\n   end\n   -- Remove all the elements\
    \ from x that are in the array y\n   for i = 1, x[1] do\n      if y[i] == x[i]\
    \ then table.insert(x, y[i]) end\n   end\n   return y\nend\n</cell>\n<cell>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpue3cn8ku.lua:23: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n\tlocal ans, t = {}, {}\n\tfor i = 1, #x do\n\t\tif x[i] %\
    \ 2 == 0 then t[#t+1] = x[i] end\n\tend\n\tfor i = 1, #t do\n\t\ttable.insert(ans,\
    \ t[i])\n\tend\n\treturn ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhff6x36.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpnhff6x36.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   -- first I sort my list to get the unique elements\n  \
    \ -- then I remove all the odd elements and return it\n   -- finally I sort it\
    \ in an increasing order\n   table.sort(x)\n   local ans = {}\n   for i = 1, #x\
    \ do\n      if x[i]%2 ~= 0 then\n         table.insert(ans, x[i])\n      end\n\
    \   end\n   table.sort(ans)\n   return ans\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppa5vuteg.lua:28:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmppa5vuteg.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   local i = 1\n   local results = {}\n   while i < #x do\n\
    \      local j = 1\n      local tmp_sum = 0\n      while j < #x do\n         tmp_sum\
    \ = tmp_sum + (x[i] % 10) * j\n         j = j + 1\n      end\n      if not tmp_sum\
    \ % 2 then\n         table.insert(results, x[i])\n      end\n      i = i + 1\n\
    \   end\n   return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3c_gkq5l.lua:19:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmp3c_gkq5l.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp3c_gkq5l.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   local sorted_x = table.sort(x)\n   if #sorted_x ~= 1 then\n\
    \       return nil\n   end\n   local num = sorted_x[1]\n   local index = 1\n \
    \  local temp\n   while num > 0 do\n       temp = sorted_x[index]\n       if num\
    \ % 2 == 0 then\n           return sorted_x\n       else\n           index = index\
    \ + 1\n           if index > #sorted_x then\n               return sorted_x\n\
    \           end\n       end\n       num = num / 10\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk3s93cw9.lua:11:\
    \ attempt to get length of a nil value (local 'sorted_x')\nstack traceback:\n\t\
    /tmp/tmpk3s93cw9.lua:11: in local 'candidate'\n\t/tmp/tmpk3s93cw9.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  if x == nil then\n    return nil\n  end\n  local tbl = {}\n\
    \  local i = 1\n  while i <= #x do\n    local j = i + 1\n    while j < #x do\n\
    \      if math.floor(x[i]) ~= math.floor(x[j]) then\n        j = j + 1\n     \
    \ end\n      if j == #x then\n        if tbl[x[i]] == nil then\n          tbl[x[i]]\
    \ = true\n        else\n          tbl[x[i]] = true\n          tbl[x[j]] = true\n\
    \        end\n        j = i + 1\n      else\n        j = j + 1\n      end\n  \
    \  end\n    i = i + 1\n  end\n  local res = {}\n  for i = 1, #x do\n    if not\
    \ tbl[x[i]] then\n      table.insert(res, x[i])\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n\t-- if there are any even digit in the list, then it is impossible\
    \ to \n\t-- distinguish them. return empty list.\n\t-- for example: [15, 33, 1422,\
    \ 1]\n\tfor i, y in ipairs(x) do\n\t\tlocal even = true\n\t\tfor j = 1, y do\n\
    \t\t\tif y % j == 0 then\n\t\t\t\teven = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\
    end\n\t\tif even then\n\t\t\treturn {}\n\t\tend\n\tend\n\t-- If there are no even\
    \ digit, then sort and return in increasing order.\n\t-- For example [22, 34,\
    \ 35, 1]\n\ttable.sort(x)\n\treturn x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3_p_sbn.lua:34:\
    \ expected: {1, 15, 33}\nactual: {1, 15, 33, 1422}\nstack traceback:\n\t/tmp/tmpp3_p_sbn.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i=1,#x do \n        if rem(x,10)\
    \ == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphu45dxda.lua:12:\
    \ attempt to call a nil value (global 'rem')\nstack traceback:\n\t/tmp/tmphu45dxda.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmphu45dxda.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   -- We assume that all elements are positive.\n   if #x\
    \ > 0 then\n      -- The number must be sorted.\n      x:sort(function(x,y) return\
    \ x < y end)\n      -- Check if there are any odd digits.\n      if x[#x] % 2\
    \ ~= 0 then\n         return x\n      end\n      -- Find the index of the first\
    \ even digit.\n      local i, j = 1, #x\n      while i <= j do\n         -- If\
    \ an even digit is found before a non even digit.\n         if x[i] % 2 ~= 0 then\n\
    \            -- Remove all even digits and return the result.\n            j =\
    \ i\n            -- Remove all even digits.\n            while x[i] % 2 == 0 do\n\
    \               i = i + 1\n            end\n         end\n         -- Check if\
    \ there is no non even digit left.\n         if j == #x then\n            break\n\
    \         end\n         -- Increment i and increment j till there is no non even\
    \ digit left.\n         i = i + 1\n         j = j + 1\n      end\n   end\n   return\
    \ nil\nend\n</code>\nAnd finally, the test script:\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq4bk185h.lua:41: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local function is_digit(num)\n        return (num > 0)\
    \ and (num ~= math.floor (num))\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpogp6douc.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n\tlocal sorted_x = sort(x)\n\tlocal results = {}\n\tfor i\
    \ = 1,#sorted_x do\n\t\tlocal digit = sorted_x[i]:sub(1,1)\n\t\tif not digits\
    \ or digits == digit then\n\t\t\ttable.insert(results, sorted_x[i])\n\t\tend\n\
    \tend\n\treturn results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdnisqjnl.lua:10:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpdnisqjnl.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpdnisqjnl.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   -- First we sort the array in order to have the most frequent\
    \ digits first.\n   -- If there are two equal digits, we sort it by their difference\
    \ in value.\n   -- Then we remove the even digits in the first pass. \n   -- (The\
    \ function returns either nil or the new list)\n   local sorted_x = table.sort(x)\n\
    \   local new_x = sorted_x\n   for i = 1, #sorted_x do\n      if new_x[i] == sorted_x[i]\
    \ then\n         new_x:insert(sorted_x[i]-i)\n      end\n   end\n   if #new_x\
    \ > 0 then\n      new_x:remove(\"0\")\n   end\n   return new_x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpseudwf3h.lua:16:\
    \ attempt to get length of a nil value (local 'sorted_x')\nstack traceback:\n\t\
    /tmp/tmpseudwf3h.lua:16: in local 'candidate'\n\t/tmp/tmpseudwf3h.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  if #x > 0 then\n    local new_x = {}\n    for _, v in ipairs(x)\
    \ do\n      if v ~= 0 then\n        local d = v % 10\n        for i = 1, 10 do\n\
    \          if v ~= 0 and v % 10 == i then\n            table.insert(new_x, v)\n\
    \          end\n        end\n      end\n    end\n    return new_x\n  end\n  return\
    \ x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply08x_s8.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmply08x_s8.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local new_list = x\n    for _,v in ipairs(x) do\n    \
    \    local y = math.floor(v / 10)\n        if y == 0 then\n            new_list[_]\
    \ = v\n        elseif y ~= 0 then\n            if math.mod(v, 10) == 0 then\n\
    \                new_list[_] = v\n            end\n        end\n    end\n    return\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1fmlgndc.lua:16:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmp1fmlgndc.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp1fmlgndc.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  if x==nil then\n    return nil\n  end\n  local v = {}\n\
    \  for i=1, #x do\n    if x[i] and tonumber(x[i]) and tonumber(x[i]) %2 == 0 then\n\
    \      table.insert(v, x[i])\n    end\n  end\n  return v\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4yvcf1b.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpn4yvcf1b.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n\tlocal i = 1\n\tlocal ux = 0\n\twhile i <= #x do\n\t\t--\
    \ If element of x has even digit, then\n\t\tif x[i] % 2 == 0 then\n\t\t\tif ux\
    \ > 0 then\n\t\t\t\tux = ux + 1\n\t\t\t\tx[i] = ux\n\t\t\telse\n\t\t\t\tx[i] =\
    \ i\n\t\t\tend\n\t\telse\n\t\t\tux = x[i]\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn\
    \ x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9grxzt2.lua:32:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 34, 1}\nstack traceback:\n\t/tmp/tmpw9grxzt2.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local n = 1\n    local s = x\n    while #s > 1 do\n  \
    \      local c = math.floor((n % 100) / 10)\n        if c ~= 0 then\n        \
    \    n = n * (10 - c) + x\n        end\n        s = math.floor(s / 10)\n    end\n\
    \    if n == 1 then\n        return x\n    end\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdoh5vfby.lua:17:\
    \ attempt to perform arithmetic on a table value (local 's')\nstack traceback:\n\
    \t/tmp/tmpdoh5vfby.lua:17: in local 'candidate'\n\t/tmp/tmpdoh5vfby.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local i = 1\n    local tt = {}\n    for v in x\n    do\n\
    \        if tt.has_key(v) then\n            tt.[v] = true\n        else\n    \
    \        tt.[v] = i\n            i = i + 1\n        end\n    end\n    local res\
    \ = {}\n    for k,v in pairs(tt) do\n        if v % 2 == 0 then\n            table.insert(res,\
    \ k)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvdcvrmfl.lua:15: <name> expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local results = {}\n    for _, _ in pairs(x) do\n    \
    \    if x:find(tostring(x), 1, 'e') then\n            results[#results + 1] =\
    \ x\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxigc3u8z.lua:12:\
    \ attempt to call a nil value (method 'find')\nstack traceback:\n\t/tmp/tmpxigc3u8z.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpxigc3u8z.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local output = {}\n  for _, v in pairs(x) do\n    if v:floor():mod(10):ne(0)\
    \ then\n      table.insert(output, v)\n    end\n  end\n  table.sort(output)\n\
    \  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxjlgk8m9.lua:12:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmpxjlgk8m9.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpxjlgk8m9.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   -- Create a table with key as digit in x and value as index\
    \ in x\n   local ret = {}\n   for i, v in ipairs(x) do\n      ret[v] = i\n   end\n\
    \   -- Sort table by values\n   table.sort(ret)\n   -- Filter only odd numbers\
    \ \n   local new_ret = {}\n   for i, v in pairs(ret) do\n      if i % 2 == 0 then\n\
    \         new_ret[ret[v]] = ret[v]\n      end\n   end\n   return new_ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4inb5pea.lua:21:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmp4inb5pea.lua:21: in local 'candidate'\n\
    \t/tmp/tmp4inb5pea.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    if x==nil then\n        return nil\n    end\n    local\
    \ result = {}\n    for i = 1,#x do\n        local digit = x[i]\n        if digit%2==0\
    \ then\n            result[#result+1] = digit\n        end\n    end\n    -- sort\
    \ result array in ascending order\n    if #result>0 then\n        table.sort(result)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12txdzsc.lua:30:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp12txdzsc.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local tbl = {}\n  local i = 1\n  for i=1,#x do\n    local\
    \ num = x[i]\n    local n = 1\n    while num % 2 == 0 do\n      num = num / 10\n\
    \      n = n + 1\n    end\n    if tbl[n] ~= nil then\n      tbl[n] = tbl[n] ..\
    \ \",\" .. num\n    else\n      tbl[n] = num\n    end\n  end\n  return tbl\nend\n\
    </code>\n<|/ a tags=lua-table,lua,algorithm |>\n<| c |>\nFor me this code doesn't\
    \ work as expected. I added a test case where it fails because your implementation\
    \ is not sorting properly.\n<|/ c |>\n<| c |>\n: I did notice that, but I didn't\
    \ have a chance to test it yet.\n<|/ c |>\n<| c |>\n`tbl[n] = tbl[n] .. \",\"\
    \ .. num` will always put a comma at the end of a value\n<|/ c |>\n<| a tags=lua-table,lua,algorithm\
    \ |>\nThis code will work for any positive integers. It will also handle negative\
    \ numbers.\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5gvterdu.lua:27: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    if not x then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7debwp6a.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- Base case:\n  if not x then\n    return {}\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgmvof6ll.lua:24: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- TODO: optimize this\n  local function helper(lst)\n \
    \   local map = {}\n    local i = 1\n    for _,v in ipairs(lst) do\n      table.insert(map,v)\n\
    \    end\n    while #map > 0 do\n      local minIdx = 1\n      for i,v in ipairs(map)\
    \ do\n        if v == map[minIdx] then\n          table.insert(map, i)\n     \
    \     table.insert(map, minIdx)\n          minIdx = minIdx + 1\n        else\n\
    \          table.insert(map, 1)\n        end\n      end\n    end\n    return map\n\
    \  end\n  return helper(x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(res, x[i])\n        end\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13ys5tgf.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp13ys5tgf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local digits = set{}\n  for i = 1, #x do\n    digits[x[i]]\
    \ = true\n  end\n  local ans = {}\n  for _, v in pairs(digits) do\n    if not\
    \ v then break end\n    table.insert(ans, v)\n  end\n  table.sort(ans)\n  return\
    \ ans\nend\n</cell>\n<cell>\nassert(unique_digits({'5', '33'}) == {'5'})\nassert(unique_digits({'5'})\
    \ == {'5'})\nassert(unique_digits({'5', '5', '5', '5', '5'}) == {})\nassert(unique_digits({'5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5'}) == {'5'})\nassert(unique_digits({'5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\
    \ '5', '5', '5', '5', '5', '\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm7loshac.lua:22: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local sorted_x = table.sort(x)\n  \n  local results = {}\n\
    \  for i = 1, #sorted_x do\n    local pos = #results + 1\n    results[pos] = sorted_x[i]\n\
    \  end\n  \n  -- Since results is sorted, we can start looking for odd number\
    \ from beginning.\n  local i = 1\n  local j = #results\n  while j <= #results\
    \ do\n    if results[i] % 2 == 1 then\n      i = i + 1\n    else\n      results[j]\
    \ = results[i]\n      j = j + 1\n    end\n  end\n  \n  return results\nend\n</cell>\n\
    <text>\nTests\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprussn86l.lua:32: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local unique_digits = {}\n  -- find duplicate number\n \
    \ for i = 1, #x do\n    -- if any two numbers has same digit, ignore it\n    for\
    \ j = 1, i do\n      if x[i] ~= x[j] then\n\tbreak\n      end\n    end\n    --\
    \ if any number has same digit, ignore it.\n    if j ~= i then\n      table.insert(unique_digits,\
    \ x[i])\n    end\n  end\n  return unique_digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_xu5cn7.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpb_xu5cn7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local lst = {}\n    for _, v in ipairs(x) do\n       \
    \ if v % 2 == 0 then\n            lst[#lst+1] = v\n        end\n    end\n    table.sort(lst)\n\
    \    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hnhqzkb.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp1hnhqzkb.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  if #x == 0 then return end\n  if x[1] ~= 0 and x[1] % 2\
    \ == 0 then -- x[1] should be odd\n    local i = 1\n    while i <= #x do\n   \
    \   if x[i] ~= 0 and x[i] % 2 ~= 0 then\n        return x\n      end\n      i\
    \ = i + 1\n    end\n    return x\n  end\n  local y = x[2]\n  local i = 3\n  while\
    \ i <= #x do\n    if x[i] ~= 0 and x[i] % 2 ~= 0 then\n      table.insert(x, y)\n\
    \      return x\n    end\n    i = i + 1\n    y = y*10 + x[i]\n  end\n  table.insert(x,\
    \ y)\n  return x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprc250xoa.lua:38:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1, 331}\nstack traceback:\n\t\
    /tmp/tmprc250xoa.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local unique_digits = {}\n  for i = 1,#x do\n    if x[i]\
    \ % 2 == 0 then\n      table.insert(unique_digits, x[i])\n    end\n  end\n  return\
    \ table.sort(unique_digits)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3v5b619x.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp3v5b619x.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local results = {}\n    for i=1,#x do\n        local x\
    \ = string.sub(x,i,i)\n        local digits = string.match(x,\"^%d%d*$\")\n  \
    \      if digits ~= nil then\n            local digits = tonumber(digits)\n  \
    \          if digits > 0 then\n                table.insert(results,digits)\n\
    \            end\n        end\n    end\n    return table.sort(results) \nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnw7v61o.lua:12:\
    \ bad argument #1 to 'sub' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmplnw7v61o.lua:12: in local 'candidate'\n\t/tmp/tmplnw7v61o.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  if #x == 0 then\n    return nil\n  end\n  local y = x\n\
    \  local z = {}\n  for i = 1, #x do\n    local digit = x[i]\n    if not z[digit]\
    \ then\n      z[digit] = true\n      y[#y+1] = digit\n    end\n  end\n  return\
    \ y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07lulrfh.lua:28:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1, 15, 33, 1422, 1}\nstack traceback:\n\
    \t/tmp/tmp07lulrfh.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local a = {}\n    for i = 1, #x do\n        local s =\
    \ x[i]\n        for j = 2, #s do\n            local m = math.abs(s % 10)\n   \
    \         if a[m] ~= nil then\n                a[m] = a[m] .. \",\"\n        \
    \    end\n            a[m] = a[m] .. tostring(s)\n        end\n    end\n    return\
    \ a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmx7ezy5u.lua:13:\
    \ attempt to get length of a number value (local 's')\nstack traceback:\n\t/tmp/tmpmx7ezy5u.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmx7ezy5u.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local new_list = {}\n    for i = 1, #x do\n        if\
    \ not is_digit(x[i]) then break end\n        new_list[x[i]] = x[i]\n    end\n\
    \    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmlzu189t.lua:12:\
    \ attempt to call a nil value (global 'is_digit')\nstack traceback:\n\t/tmp/tmpmlzu189t.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpmlzu189t.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   assert(type(x) == 'table' and type(x) == 'list')\n   local\
    \ out = {}\n   local prev = 0\n   for i = 1, #x do\n      local digit = x[i]\n\
    \      if digit % 2 == 0 then\n         if digit == prev then\n            table.insert(out,\
    \ digit)\n         else\n            table.insert(out, prev)\n            prev\
    \ = digit\n         end\n      end\n   end\n   if prev ~= 0 then\n      table.insert(out,\
    \ prev)\n   end\n   table.sort(out)\n   return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2izcjbx.lua:10:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmps2izcjbx.lua:10: in local 'candidate'\n\
    \t/tmp/tmps2izcjbx.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   local hash = {}\n   \n   for _, x in pairs(x) do\n    \
    \ local y = math.floor(x/10)\n     if hash[y] == nil then\n       hash[y] = 1\n\
    \     else\n       hash[y] = hash[y] + 1\n     end\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpneq1wxjc.lua:30: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local function add_unique(y)\n        if y[2] ~= 0 then\n\
    \            table.remove(x)\n            table.remove(x)\n            table.remove(x)\n\
    \        end\n        if y[1] > 0 then\n            table.insert(x, y[1])\n  \
    \          add_unique(y+1)\n        end\n    end\n    local num_digits = #x\n\
    \    local tt = {}\n    for i = 1, num_digits do\n        local y = x[i]\n   \
    \     if y[1] > 0 then\n            local t = tt(y[1])\n            if t then\n\
    \                table.insert(t, y)\n            else\n                local a\
    \ = {}\n                a[1] = y[1]\n                add_unique(a)\n         \
    \   end\n        end\n    end\n    return tt\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt7zriqby.lua:25:\
    \ attempt to index a number value (local 'y')\nstack traceback:\n\t/tmp/tmpt7zriqby.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpt7zriqby.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local digit_map = {}\n    for _, x in ipairs(x) do\n \
    \       digit_map[#digit_map+1] = x\n    end\n    local sorted_x = {}\n    for\
    \ i = 1, #digit_map do\n        if digit_map[i] % 2 == 0 then\n            table.insert(sorted_x,\
    \ digit_map[i])\n        end\n    end\n    table.sort(sorted_x, function(a,b)\
    \ return a<b end)\n    return sorted_x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgtnc7l7.lua:27:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpkgtnc7l7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ans = {}\n  for x in pairs(x) do\n    if not digit(x)\
    \ then break end\n    ans[#ans+1] = x\n  end\n  return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmq54vncd.lua:12:\
    \ attempt to call a nil value (global 'digit')\nstack traceback:\n\t/tmp/tmpmq54vncd.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpmq54vncd.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local lst = {}\n  for i = 1, #x do\n    local n = tonumber(x[i])\n\
    \    for j = 1, 10 do\n      if n and n % j == 0 then\n        lst[#lst+1] = n\
    \ / j\n        break\n      end\n    end\n  end\n  return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdr5p_uv.lua:26:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpbdr5p_uv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local i, j, k, m, n = 1, #x, 1, 1\n    local result =\
    \ {}\n    \n    while j < n do\n        if x[j] % 2 ~= 0 then\n            result[#result+1]\
    \ = x[j]\n        end\n        \n        if x[j] ~= 0 then\n            m = m\
    \ + 1\n        end\n        \n        k = k + 1\n        while k > m do\n    \
    \        x[k] = x[k-1]\n            k = k - 1\n        end\n        n = n + 1\n\
    \    end\n    \n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo7hdmvww.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpo7hdmvww.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpo7hdmvww.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   if #x == 0 then\n      return {}\n   else\n      local\
    \ i = 1\n      local tx = {}\n      for _,x in ipairs(x) do\n         if x:sub(1,1)\
    \ == \"0\" then\n            table.insert(tx, x)\n         else\n            if\
    \ i > 1 then\n               local j = 1\n               local found = false\n\
    \               for _,y in ipairs(tx) do\n                  if y:sub(1,1) == x:sub(1,1)\
    \ then\n                     found = true\n                  end\n           \
    \    end\n               if not found then\n                  table.insert(tx,\
    \ x)\n               end\n            end\n         end\n         i = i + 1\n\
    \      end\n      return tx\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd07uwcns.lua:16:\
    \ attempt to index a number value (local 'x')\nstack traceback:\n\t/tmp/tmpd07uwcns.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpd07uwcns.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- Check each element in x for its odd digit\n  for i =\
    \ 1, #x do\n    -- If an element of the list is odd, find its digit\n    -- by\
    \ dividing by the last digit (last digit being the last\n    -- element of the\
    \ list minus 1).\n    -- If it's even, add it to the returned list.\n    if x[i]\
    \ % 2 == 1 then\n      -- Get the last digit of the list\n      local last_digit\
    \ = x[i]\n      -- Divide the list by that last digit\n      x = x / last_digit\n\
    \      -- Add the last digit to the returned list\n      table.insert(x, last_digit)\n\
    \    end\n  end\n  -- Return the list\n  return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2tz_fq3b.lua:20:\
    \ attempt to perform arithmetic on a table value (local 'x')\nstack traceback:\n\
    \t/tmp/tmp2tz_fq3b.lua:20: in local 'candidate'\n\t/tmp/tmp2tz_fq3b.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    local i = 1\n    while i <= #x\
    \ do\n        if x[i] % 2 == 0 then\n            if result[#result] ~= nil then\n\
    \                result[#result] = x[i]\n            else\n                result[#result]\
    \ = x[i]\n            end\n        end\n        i = i + 1\n    end\n    if #result\
    \ == 0 then\n        return nil\n    end\n    if #result > 0 then\n        table.sort(result)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6dj4do2.lua:34:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpx6dj4do2.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   local table = {}\n   for i = 1, #x do \n      if ((x[i]\
    \ % 10) == 0) then table.insert(x[i], nil) end\n   end\n   table.sort(function(a,b)\
    \ return a.value < b.value end)\n   -- print(table)\n   return table\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfuhsxgkh.lua:14:\
    \ attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpfuhsxgkh.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpfuhsxgkh.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   local output = {}\n   for _,value in pairs(x) do\n    \
    \  local digit = math.floor(value/10)\n      if digit%2 == 0 then\n         table.insert(output,\
    \ value)\n      end\n   end\n   return output\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunlnwfsr.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422, 1}\nstack traceback:\n\t/tmp/tmpunlnwfsr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n        local\
    \ tmp = x[i]\n        while tmp ~= 0 do\n            tmp = (tmp ^ tmp) % 10\n\
    \            if tmp == 1 then\n                break\n            end\n      \
    \  end\n        if tmp == 1 then\n            result[#result + 1] = x[i]\n   \
    \     end\n    end\n    return table.sort(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local out = {}\n    local index = 1\n    for i=1,#x do\n\
    \        local digit = x[i]\n        while index > 0 and x[index] % 10 ~= 0 do\n\
    \            out[#out+1] = x[index]\n            index = index - 1\n        end\n\
    \        out[#out+1] = digit\n        index = index + 1\n    end\n    \n    return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5q61oifs.lua:28:\
    \ expected: {1, 15, 33}\nactual: {15, 15, 15, 33, 15, 1422, 15, 1}\nstack traceback:\n\
    \t/tmp/tmp5q61oifs.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ans = {}\n    for i = 1, #x do\n        if x[i]%2\
    \ == 0 then\n            table.insert(ans, x[i])\n        end\n    end\n    return\
    \ ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxh271syw.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpxh271syw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local output = {}\n  local tmp = {}\n  for i = 1, #x do\n\
    \    if x[i] ~= 0 then\n      tmp[x[i]] = x[i]\n    end\n  end\n  for key, value\
    \ in pairs(tmp) do\n    if key % 2 ~= 0 then\n      output[#output + 1] = value\n\
    \    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo34i85zy.lua:28:\
    \ expected: {1, 15, 33}\nactual: {1, 33, 15}\nstack traceback:\n\t/tmp/tmpo34i85zy.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for _, v in pairs(x) do\n    local\
    \ v = tostring(v)\n    if string.len(v) % 2 == 1 then\n      result[#result+1]\
    \ = v\n    end\n  end\n  return table.sort(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuqvfrftm.lua:23:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpuqvfrftm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   assert(type(x) == \"table\")\n   \n   local unique_digit\
    \ = {}\n   for i=1,#x do\n      unique_digit[i] = x[i]\n   end\n   \n   for i=2,#x\
    \ do\n      local j = 1\n      while j < i do\n         if unique_digit[j] ~=\
    \ unique_digit[j - 1] then\n            unique_digit[j] = unique_digit[j - 1]\n\
    \         end\n         j = j + 1\n      end\n   end\n   \n   return unique_digit\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmvesrvv.lua:33:\
    \ expected: {1, 15, 33}\nactual: {4=1}\nstack traceback:\n\t/tmp/tmpmmvesrvv.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local seen = {}\n    local output = {}\n    for i, v in\
    \ pairs(x) do\n        if seen[v] == nil then\n            seen[v] = true\n  \
    \          output[#output+1] = v\n        end\n    end\n    return output\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_ld8zj6.lua:24:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpe_ld8zj6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local i, curr = 1, 1\n  -- Iterate till all the elements\
    \ are exhausted.\n  repeat\n    curr  = (x[i - 1] + x[i - 2] + x[(i - 3) % len])\
    \ % len\n    i = i\n  until x[i] == 0\n  -- Return the list.\n  return x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv_499hz9.lua:13:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpv_499hz9.lua:13: in local 'candidate'\n\t/tmp/tmpv_499hz9.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  if x == nil then\n    return nil\n  end\n  -- find all elements\
    \ has even digit\n  local even = terralib.newlist()\n  local i = 0\n  for val\
    \ in x:iterator() do\n    if not (val % 2) then\n      even:insert(val)\n    \
    \  i = i + 1\n    end\n  end\n  -- filter out all even number\n  local n = #even\n\
    \  if n == 0 then\n    return nil\n  end\n  -- build new list with unique elements\n\
    \  local new_even = terralib.newlist()\n  for i = 1, n do\n    local val = even[i]\n\
    \    while i ~= n do\n      if even[i] ~= val then\n        new_even:insert(even[i])\n\
    \        break\n      end\n      i = i + 1\n    end\n  end\n  return new_even\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1p3e3v59.lua:14:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmp1p3e3v59.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp1p3e3v59.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local r = {x[1]}\n    for i = 3, x:len() do\n        local\
    \ n = x[i]\n        for _, v in ipairs(r) do\n            if v % n == 0 then\n\
    \                return nil\n            end\n        end\n        table.insert(r,\
    \ n)\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdkj87l6.lua:11:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpcdkj87l6.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpcdkj87l6.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n\tlocal y = {}\n\tfor i = 1, #x do\n\t\tlocal z = {}\n\t\t\
    for j = 1, #x do\n\t\t\tlocal c = x[i]\n\t\t\tif c:sub(1, 1):lower() == c then\n\
    \t\t\t\tz[j] = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif #z > 0 then\n\t\
    \t\ty[#y+1] = z\n\t\tend\n\tend\n\treturn y\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaye0zfm9.lua:15:\
    \ attempt to index a number value (local 'c')\nstack traceback:\n\t/tmp/tmpaye0zfm9.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpaye0zfm9.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local digit = {}\n    for i = 1, #x do\n        table.insert(digit,\
    \ string.sub(x[i], 1, 1))\n    end\n    table.sort(digit)\n    \n    local out\
    \ = {}\n    for i = 1, #x do\n        if string.sub(x[i], 1, 1) == table.last(digit)\
    \ then\n            table.insert(out, table.last(digit))\n            table.remove(digit,\
    \ #digit - 1)\n        end\n    end\n    return out -- Return list of all elements\
    \ that hasn't any even digit.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy1aj0c4x.lua:18:\
    \ attempt to call a nil value (field 'last')\nstack traceback:\n\t/tmp/tmpy1aj0c4x.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpy1aj0c4x.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local new_x = {}\n  local cnt = 0\n  for i=1,#x do\n   \
    \ if x[i] ~= 0 then\n      cnt = cnt + 1\n      new_x[i] = x[i]\n    end\n  end\n\
    \  for i=1,cnt do\n    local j = 1\n    while j <= #new_x do\n      if new_x[j]\
    \ ~= 0 then\n        new_x[j] = new_x[j] .. math.floor((new_x[j] / 10) + 0.5)\n\
    \        break\n      else\n        j = j + 1\n      end\n    end\n  end\n  return\
    \ new_x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiuu9k1ys.lua:35:\
    \ expected: {1, 15, 33}\nactual: {\"15215152215215152\", 33, 1422, 1}\nstack traceback:\n\
    \t/tmp/tmpiuu9k1ys.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  if #x == 0 then return x end\n  local m = {}\n  local r\
    \ = {x[1]}\n  for i = 2, #x do\n    if not m.hasOwnProperty(x[i]) then\n     \
    \ r[#r+1] = x[i]\n      m[x[i]] = true\n    end\n  end\n  return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe_2prrid.lua:14:\
    \ attempt to call a nil value (field 'hasOwnProperty')\nstack traceback:\n\t/tmp/tmpe_2prrid.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpe_2prrid.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   assert(type(x) == 'table')\n   local n = 0\n   local v\
    \ = {}\n   for i=1,#x do\n      local v = x[i]\n      n = n + (v:len() ~= 1 and\
    \ v:len() or 0)\n   end\n   return v\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2kbw4_co.lua:15:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmp2kbw4_co.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp2kbw4_co.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local new_list = { }\n    local result = { }\n    for\
    \ i, val in ipairs(x) do\n        if val % 2 == 0 then\n            table.insert(result,\
    \ val)\n        else\n            table.insert(new_list, val)\n        end\n \
    \   end\n    table.sort(new_list)\n    return new_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnl18zbp1.lua:27:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmpnl18zbp1.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local unique = {}\n  local i = 1\n  for v in x:gmatch(\"\
    %d*\") do\n    if v % 2 == 0 then \n      if unique[v] == nil then\n        table.insert(unique,\
    \ v)\n      else\n        table.insert(unique, v)\n      end\n    end\n  end\n\
    \  return unique\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0hs9prp5.lua:12:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmp0hs9prp5.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp0hs9prp5.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local i = 1\n  local list = {}\n  for i = 1, #x do\n   \
    \ -- If x[i] is divisible by two then it means x[i] is an even number\n    if\
    \ x[i] % 2 == 0 then \n      list[i] = x[i]\n    end\n  end\n  for i = 1, #list\
    \ do\n    if i > 1 then\n      if list[i] == list[i - 1] then -- Check previous\
    \ elements\n        table.remove(list, i - 1) \n      end\n    end\n  end\n  \n\
    \  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmreoubjp.lua:32:\
    \ expected: {1, 15, 33}\nactual: {3=1422}\nstack traceback:\n\t/tmp/tmpmreoubjp.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n\tassert(type(x) == \"table\" and x:nrows() > 0 and x:ncols()\
    \ == 1)\n\tlocal out = {}\n\t\n\t-- Count the digits and store them in map.\n\t\
    local digits = {}\n\tfor i = 0, x:nrows() do\n\t\tlocal digit = 0\n\t\tfor j =\
    \ 1, x:ncols() do\n\t\t\tdigit = digit * 10 + (x:at(i, j) - '0'):byte()\n\t\t\
    end\n\t\tif digit ~= 0 then\n\t\t\ttable.insert(digits, digit)\n\t\tend\n\tend\n\
    \t\n\t-- Sort the digits map.\n\ttable.sort(digits)\n\t\n\t-- If any digit has\
    \ even value then this element is not unique\n\t-- otherwise this element should\
    \ be added to out list.\n\t-- For example if the digits map looks like [3, 1,\
    \ 2] then\n\t-- element '3' should be added to out.\n\tfor i = 1, #digits do\n\
    \t\tlocal digit = digits[i]\n\t\tif digit % 2 == 0 then\n\t\t\ttable.insert(out,\
    \ x:at(0, i))\n\t\tend\n\tend\n\treturn out\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeuy5cc2f.lua:10:\
    \ attempt to call a nil value (method 'nrows')\nstack traceback:\n\t/tmp/tmpeuy5cc2f.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpeuy5cc2f.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- Store all the elements in a list.\n  local ans = {}\n\
    \  -- Go through each element, if it is a digit.\n  for i = 1, #x do\n    -- Add\
    \ it to the list if it's not unique.\n    if x[i] ~= math.floor(x[i]) then\n \
    \     ans[#ans + 1] = x[i]\n    end\n  end\n  -- Return the list.\n  return ans\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmzbc7p6.lua:26:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpxmzbc7p6.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- First sort\n  -- Note: Return list should be sorted in\
    \ increasing order.\n  local list = table.sort(x)\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi94nctfi.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n\tassert(type(x) == 'table')\n\tlocal function hasDigit(num)\n\
    \t\treturn tonumber(num)>0 and tonumber(num)%1==0\n\tend\n\tlocal function removeDigit(num)\n\
    \t\treturn tonumber(num)\n\tend\n\tlocal function helper(x, acc)\n\t\tif x ~=\
    \ nil then\n\t\t\tacc[x] = removeDigit(x)\n\t\tend\n\t\tif #acc>0 then\n\t\t\t\
    for i=#acc,1,-1 do\n\t\t\t\tlocal v = acc[i]\n\t\t\t\tif tonumber(v)==0 then\n\
    \t\t\t\t\ttable.remove(acc, v)\n\t\t\t\t\ttable.remove(acc, removeDigit(v))\n\t\
    \t\t\telse\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn acc\n\
    \tend\n\treturn helper(x, {}) or x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey7kcdmj.lua:40:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpey7kcdmj.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] >\
    \ 0 and math.floor(x[i]) ~= x[i] then\n            t[#t + 1] = math.floor(x[i])\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1d7x57ew.lua:22:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp1d7x57ew.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n   local ans = {}\n   for i = 1,#x do\n      if x[i] > 9 then\n\
    \         ans[#ans+1] = x[i]\n      elseif x[i] % 2 == 0 and x[i] > 1 then\n \
    \        -- if x[i] % 2 == 0 and x[i] > 1 then\n         ans[#ans+1] = x[i]\n\
    \      end\n   end\n   return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9e96ydm.lua:25:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422}\nstack traceback:\n\t/tmp/tmpm9e96ydm.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  -- Store input in a table where each key is a digit from\
    \ the input \n  -- list.\n  local table = {}\n  for i = 1, #x do\n    table.[x[i]]\
    \ = x[i]\n  end\n  -- Iterate over each element of the table.\n  for k, v in pairs(table)\
    \ do\n    -- For each key in the table check whether the value is even\n    --\
    \ digit. If so, delete the key from the table and add the \n    -- value to the\
    \ return list.\n    if k % 2 == 0 then\n      table[k] = nil\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5s7mvg9y.lua:14: <name> expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local list = {}\n  \n  -- A helper function that return\
    \ true if there is a digit with even position\n  local function even(x)\n    return\
    \ ((x % 10) == 0)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpveneg9s8.lua:26: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local seen = {}\n    local out = {}\n    for i=1,#x do\n\
    \        local digit = x[i]\n        if seen[digit] ~= 1 then\n            table.insert(out,\
    \ digit)\n        else\n            table.insert(out, 0)\n        end\n      \
    \  seen[digit] = 1\n    end\n    return out\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqwv2is_.lua:27:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpzqwv2is_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local i, s = 0, {}\n  \n  for v in x:gmatch(\"%d*\") do\n\
    \    s[i] = v\n    i = i + 1\n  end\n  \n  table.sort(s)\n  \n  for i = 1, i do\n\
    \    if s[i] % 2 ~= 0 then\n      return s\n    end\n  end\n  \n  return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxvzmo95y.lua:12:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpxvzmo95y.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpxvzmo95y.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
