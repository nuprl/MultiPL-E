name: HumanEval_22_filter_integers
language: lua
results:
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  for i, v in ipairs(values)\
    \ do\n    if type(v) == 'number' and math.floor(v) == v then\n      table.insert(values,\
    \ v)\n    end\n  end\n  return values\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsph_silh.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpsph_silh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return values:filter(function(value)\n\
    \    if type(value) ~= 'number' then return true end\n    return math.floor(value)\
    \ == value\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptmramg0z.lua:7:\
    \ attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmptmramg0z.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmptmramg0z.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n   if type(values) == 'table'\
    \ then\n      values = terralib.newlist()\n      for _, v in pairs(values) do\n\
    \         if type(v) ~= 'number' then break end\n         values.insert(v)\n \
    \     end\n   end\n   return values\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8pvkrinp.lua:8:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmp8pvkrinp.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp8pvkrinp.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return function(i)\n    for\
    \ i, v in ipairs(values) do\n      if not v:is_number() then\n        return nil\n\
    \      end\n    end\n    return values\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplv7tt0mp.lua:20:\
    \ expected: {}\nactual: function: 0x12c0f70\nstack traceback:\n\t/tmp/tmplv7tt0mp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  for _, v in ipairs(values)\
    \ do\n    if type(v) == 'number' then\n      if not v then\n        -- empty values\n\
    \      elseif v == math.floor(v) then\n        -- integers\n      else\n     \
    \   -- floats\n      end\n    end\n  end\n  return values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_j04pnh6.lua:25:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmp_j04pnh6.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return function (value)\n \
    \   if type(value) ~= 'number' then return value end\n    local str = tostring(value)\n\
    \    return str:gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d',\n      function (c)\n\
    \        return c:byte() >= 48 and c:byte() <= 57\n      end)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuj94c75b.lua:20:\
    \ expected: {}\nactual: function: 0x176f0e0\nstack traceback:\n\t/tmp/tmpuj94c75b.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return values:filter(function(value)\
    \ return tonumber(value) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpat1_j1rl.lua:7:\
    \ attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmpat1_j1rl.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpat1_j1rl.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return values.filter(function(value)\
    \ return type(value) == 'number' end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv8km5463.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmpv8km5463.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpv8km5463.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local filtered = {}\n  for\
    \ _, v in pairs(values) do\n    if type(v) == 'number' and math.floor(v) == v\
    \ then\n      table.insert(filtered, v)\n    end\n  end\n  return filtered\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if values then\n    local result\n\
    \    for _, value in ipairs(values) do\n      if type(value) ~= 'number' then\n\
    \        return nil\n      end\n      if math.floor(value) == value then\n   \
    \     result[#result + 1] = value\n      end\n    end\n    return result\n  else\n\
    \    return values\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyn2wuaot.lua:26:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpyn2wuaot.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if type(values) == 'table'\
    \ then\n    local count = 0\n    values = { [unpack(values)] }\n    for _, v in\
    \ pairs(values) do\n      count = count + 1\n      if type(v) == 'number' then\n\
    \        values[count] = v\n      end\n    end\n    if count == 1 then\n     \
    \ return values[1]\n    else\n      return values\n    end\n  else\n    return\
    \ values\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0gpi3bfw.lua:9: '=' expected near '}'\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  for _, v in ipairs(values)\
    \ do\n    if type(v) ~= 'number' then\n      return nil\n    end\n    if type(v)\
    \ == 'number' then\n      if math.floor(v) == v then\n        values.remove(v)\n\
    \      end\n    end\n  end\n  return values\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjytukven.lua:13:\
    \ attempt to call a nil value (field 'remove')\nstack traceback:\n\t/tmp/tmpjytukven.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpjytukven.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local filter\n  if type(values)\
    \ == 'table' then\n    local filtered = {}\n    for k, v in pairs(values) do\n\
    \      if type(v) == 'number' and math.floor(v) == v then\n        table.insert(filtered,\
    \ v)\n      end\n    end\n    return filtered\n  elseif type(values) == 'string'\
    \ then\n    local converted = {}\n    for v in values:gmatch('%d*') do\n     \
    \ table.insert(converted, tonumber(v))\n    end\n    return converted\n  else\n\
    \    return values\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(values, type(v):_isint\
    \ and v ~= nil)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpti92gro7.lua:7: function arguments expected near 'and'\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for\
    \ _, value in pairs(values) do\n        if type(value) == 'number' then\n    \
    \        table.insert(result, value)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa09dsz8p.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpa09dsz8p.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local ret = {}\n  for i, v\
    \ in ipairs(values) do\n    if type(v) == 'number' then\n      ret[#ret + 1] =\
    \ v\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctyss75r.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpctyss75r.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local res = {}\n  for _, value\
    \ in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(res,\
    \ value)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsg41ue_.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpdsg41ue_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(values, _is_integer)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpczgzk63e.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpczgzk63e.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpczgzk63e.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return table.filter(values,\
    \ math.type.isinteger)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp843s5e3.lua:7:\
    \ attempt to index a function value (field 'type')\nstack traceback:\n\t/tmp/tmpp843s5e3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpp843s5e3.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    -- Check if value is an integer\n    if type(value)\
    \ == 'number' and math.floor(value) == value then\n      result[#result + 1] =\
    \ value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local output = {}\n  for _,\
    \ value in pairs(values) do\n    local is_int = type(value) == \"number\" and\
    \ tostring(value) == tostring(value) and value % 1 == 0\n    if is_int then\n\
    \      table.insert(output, value)\n    end\n  end\n  return output\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  values = values.filter(function(v)\n\
    \    return type(v) == 'number'\n  end)\n  values = values.filter( function(v)\n\
    \    return v ~= nil\n  end)\n  values = values.filter( function(v)\n    return\
    \ v ~= false\n  end)\n  return values\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5w244phc.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmp5w244phc.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5w244phc.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return function(_, i, v)\n\
    \    if not (type(v) == 'number') then\n      return false\n    end\n    if type(v)\
    \ == 'number' and i ~= 0 then\n      return false\n    end\n    return true\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7hreld6q.lua:21:\
    \ expected: {}\nactual: function: 0x1b56ee0\nstack traceback:\n\t/tmp/tmp7hreld6q.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return values.filter(function(x)\
    \ return type(x) == 'number' and x >= 0 and x <= math.floor(x * 100) end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphdjxgdvt.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmphdjxgdvt.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphdjxgdvt.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if type(values) ~= 'table'\
    \ then\n    return values\n  end\n  local result = {}\n  for _, value in ipairs(values)\
    \ do\n    if type(value) == 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbjkhnloy.lua:23:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpbjkhnloy.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local rv = {}\n  for _, value\
    \ in pairs(values) do\n    if type(value) == 'number' then\n      rv[#rv + 1]\
    \ = value\n    end\n  end\n  return rv\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhbzeawu.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpmhbzeawu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local function filter_function(value)\n\
    \    local is_integer, is_integer = tonumber(value), tonumber(value)\n    if is_integer\
    \ and is_integer == value\n    then\n      local ok\n      local function is_nil_function(value)\n\
    \        return value == nil or value == false or value == 0 or value == false\n\
    \      end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptyscbk8o.lua:24: 'end' expected (to close 'if' at line 9)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local values = values:map(function(x)\n\
    \      if type(x) == 'number' then\n        return x:floor()\n      else\n   \
    \     return x\n      end\n    end)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxvro8y4q.lua:23: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(values, is_integer)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjhtd9vyo.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpjhtd9vyo.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpjhtd9vyo.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n   if type(values) ~= 'table'\
    \ then\n      values = values.values\n   end\n   local newValues = {}\n   for\
    \ k, v in pairs(values) do\n      if type(v) == 'number' and math.floor(v) ==\
    \ v then\n         newValues[k] = v\n      end\n   end\n   return newValues\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8bszyii.lua:23:\
    \ expected: {4, 9}\nactual: {4, 5=9}\nstack traceback:\n\t/tmp/tmpv8bszyii.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return map(function (value)\
    \ return tonumber(value) end, values)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy14kz1zo.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpy14kz1zo.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpy14kz1zo.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local value_list = values:map(function(value)\
    \ return type(value) ~= 'table' and tointeger(value) or value end)\n  return filter(value_list,\
    \ function(value) return value == value end)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnccsusk5.lua:7:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpnccsusk5.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnccsusk5.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ v in ipairs(values) do\n    if type(v) ~= 'number' then\n      result[#result+1]\
    \ = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5ptxxgt.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmph5ptxxgt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return function(value) return\
    \ tonumber(value) ~= nil end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwch3vg9.lua:13:\
    \ expected: {}\nactual: function: 0xe0f960\nstack traceback:\n\t/tmp/tmpxwch3vg9.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(function(x) return\
    \ x == x and tostring(x) == 'number' end, values)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd3uwqiy6.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpd3uwqiy6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpd3uwqiy6.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return function (value)\n \
    \   if type(value) == 'number' and type(value) ~= 'boolean' then\n      return\
    \ value\n    end\n  end\nend\n</code>\n<|/ a dscore=4 tags=lua |>\n<| c |>\n\"\
    A local function declaration creates a new function.\" -- This is not true, see\
    \ [this answer](http://stackoverflow.com/a/14903770/445375)\n<|/ c |>\n<| a dscore=4\
    \ tags=lua |>\nLua has an ability to create closures, which is essentially what\
    \ you're talking about. The difference is that local functions are local to the\
    \ enclosing scope, so they cannot access variables in the enclosing scope. You\
    \ can also create local variables. So while you can get \"local\" function variables,\
    \ local variables can never be accessed from within the closure.\n<|/ a |>\n<|\
    \ c |>\nYou mean that `function x()` is a function that can access `x`, while\
    \ `local function x()` is a function that cannot access `x`.\n<|/ c |>\n<| c |>\n\
    That's exactly what I meant. But it wasn't clear enough; I've edited it.\n<|/\
    \ c |>\n<| a tags=lua dscore=3 |>\nLocal variables cannot be accessed from within\
    \ a closure (i.e. function) because the local variables exist only in the scope\
    \ of the local function. The only way around this would be to create an anonymous\
    \ local function that closes over your local variables. However, this does not\
    \ make sense in most cases, since anonymous functions are slow to create in Lua.\
    \ Having said this, if you are a perfectionist, you can use local variables inside\
    \ a closure:\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzhd2fs5p.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local out = terralib.newlist()\n\
    \    for i, value in ipairs(values) do\n        if type(tostring(value)) ~= \"\
    number\" then\n            table.insert(out, value)\n        elseif value == tostring(value)\
    \ then\n            table.insert(out, value)\n        end\n    end\n    return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwx9kxmy3.lua:7:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpwx9kxmy3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwx9kxmy3.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result\n  for _, value\
    \ in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(result,\
    \ value)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptm91zmm9.lua:19:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmptm91zmm9.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  for i, value in ipairs(values)\
    \ do\n    if not type(value) == \"number\" then return false end\n    if value\
    \ % 1 == 0 then return false end\n  end\n  return values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdf81nev.lua:18:\
    \ expected: {4, 9}\nactual: false\nstack traceback:\n\t/tmp/tmpvdf81nev.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local filtered_values = terralib.newlist()\n\
    \  for _, value in ipairs(values) do\n    if not rawget(value, \"__iter__\") then\n\
    \      filtered_values:insert(value)\n    else\n      filtered_values = filtered_values:concat(filter_integers(value))\n\
    \    end\n  end\n  return filtered_values\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwrhsw1_z.lua:7:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpwrhsw1_z.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwrhsw1_z.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    if type(values) ~= 'table'\
    \ then\n        values = {values}\n    end\n    local value\n    for _, value\
    \ in ipairs(values) do\n        if type(value) ~= 'number' then\n            values[#values]\
    \ = value\n        end\n    end\n    return values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_u62kwfr.lua:23:\
    \ expected: {4, 9}\nactual: <table 03> {4, <table 02> {}, <table 01> {}, 23.2,\
    \ 9, <table 01>}\nstack traceback:\n\t/tmp/tmp_u62kwfr.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local new = {}\n  for _, v\
    \ in pairs(values) do\n    if type(v) == 'number' then\n      table.insert(new,\
    \ v)\n    end\n  end\n  return new\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuygrry2d.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpuygrry2d.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local value\n  for _, value\
    \ in pairs(values) do\n    if not type(value) == \"number\" then\n      table.insert(values,\
    \ value)\n    end\n  end\n  return values\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41yoqu7j.lua:20:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmp41yoqu7j.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for i,\
    \ v in ipairs(values) do\n    if type(v) == 'number' then\n      table.insert(results,\
    \ v)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7uc8wdj.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpx7uc8wdj.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local n = 1\n  local filtered\
    \ = {}\n  for _, value in pairs(values) do\n    if type(value) == \"number\" then\n\
    \      if n == 1 then\n        table.insert(filtered, value)\n      else\n   \
    \     table.insert(filtered,\n                      math.floor((n / 100) * value)\
    \ + (n % 100) / 10)\n      end\n      n = n + 1\n    end\n  end\n  return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcia40sl.lua:27:\
    \ expected: {4, 9}\nactual: {4, 0.2, 0.3}\nstack traceback:\n\t/tmp/tmpwcia40sl.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  -- Note: This assumes lists\
    \ with only integer or nil values are filtered out.\n  local filtered = {}\n \
    \ for _, value in ipairs(values) do\n    if type(value) ~= 'number' then return\
    \ nil end\n    if value == value then filtered[#filtered + 1] = value\n    else\
    \ return nil end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbd6pcprp.lua:21:\
    \ expected: {4, 9}\nactual: nil\nstack traceback:\n\t/tmp/tmpbd6pcprp.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return function(...)\n    local\
    \ _ = {...}\n    local ok = true\n    for _, value in ipairs(values) do\n    \
    \  if type(value) ~= 'number' or math.floor(value) ~= value then\n        ok =\
    \ false\n        break\n      end\n    end\n    if ok then\n      return _\n \
    \   end\n    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_amwqs_.lua:26:\
    \ expected: {}\nactual: function: 0x171ef50\nstack traceback:\n\t/tmp/tmpm_amwqs_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result\n  local index\
    \ = -1\n  for index, value in ipairs(values) do\n    if type(value) == 'number'\
    \ then\n      if value == value then\n        table.insert(result, value)\n  \
    \    end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xs7_wzo.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp2xs7_wzo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local ret = {}\n  for i, v\
    \ in ipairs(values) do\n    if type(v) ~= 'number' then\n      ret[#ret + 1] =\
    \ v\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmv_f4wlz.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpmv_f4wlz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return table.filter(values,\
    \ function(value)\n    local t = type(value)\n    return t == 'number' or t ==\
    \ 'boolean' or t == 'string'\n  end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp95rq630c.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmp95rq630c.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp95rq630c.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local ret = {}\n  for v in\
    \ values do\n    if type(v) == 'number' then\n      table.insert(ret, v)\n   \
    \ end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0xttpsub.lua:8:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmp0xttpsub.lua:8: in\
    \ local 'candidate'\n\t/tmp/tmp0xttpsub.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local filtered = {}\n  for\
    \ _, value in ipairs(values) do\n    if not value_in_integer_range(value) then\
    \ break end -- no integer\n    table.insert(filtered, value)\n  end\n  return\
    \ filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphv8hsh_0.lua:9:\
    \ attempt to call a nil value (global 'value_in_integer_range')\nstack traceback:\n\
    \t/tmp/tmphv8hsh_0.lua:9: in local 'candidate'\n\t/tmp/tmphv8hsh_0.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' and isinteger(value)\
    \ then\n      table.insert(results, value)\n    end\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp50d89at7.lua:9:\
    \ attempt to call a nil value (global 'isinteger')\nstack traceback:\n\t/tmp/tmp50d89at7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp50d89at7.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local nvalues = #values\n \
    \ if nvalues < 1 then return nil end\n  local n\n  -- Make sure every value is\
    \ a number\n  -- Also handle single values as an integer\n  for i = 1, nvalues\
    \ do\n    local value = tonumber(values[i])\n    if not value then\n      -- Value\
    \ could not be converted to a number so filter it out\n      values.remove(values[i])\n\
    \      nvalues = nvalues - 1\n    end\n  end\n  -- Filter out any numbers that\
    \ are not integers\n  -- Convert every value to an integer to compare it to n\n\
    \  -- This is necessary for filter functions to work\n  n = nvalues\n  local i\
    \ = 0\n  while i < nvalues do\n    local value = tonumber(values[i])\n    if not\
    \ value then\n      values.remove(values[i])\n      n = nvalues - 1\n    end\n\
    \    i = i + 1\n  end\n  if nvalues > 0 then\n    -- Return the new list of filtered\
    \ values\n    return values\n  else\n    -- No values so return the original list\n\
    \    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0d2vwoow.lua:45:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp0d2vwoow.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return table.filter(values,\
    \ function(value)\n    if type(value) ~= 'number' then return false end\n    return\
    \ not math.isnan(value)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8k_dz8g7.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmp8k_dz8g7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp8k_dz8g7.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return type(values[1]) == 'table'\
    \ and #values[1] == 0 and values[1] or values\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_pakuhx.lua:14:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmph_pakuhx.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      if math.floor(value)\
    \ == value then\n        result[#result + 1] = value\n      end\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if type(values) ~= 'table'\
    \ then\n    values = tolist(values)\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbqxeyb6r.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    if type(values) ~= 'table'\
    \ then\n        return values or {}\n    end\n    local filtered_values = {}\n\
    \    for key, value in pairs(values) do\n        if type(key) == 'number' then\n\
    \            if key % 1 ~= 0 then\n                filtered_values[key] = value\n\
    \            end\n        end\n    end\n    return filtered_values\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppf3z9z7j.lua:25:\
    \ expected: {4, 9}\nactual: {}\nstack traceback:\n\t/tmp/tmppf3z9z7j.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if type(values) ~= 'table'\
    \ then return values end\n  local new = {}\n  for _, value in pairs(values) do\n\
    \    if not type(tostring(value)) ~= 'number' then new[#new + 1] = value end\n\
    \  end\n  return new\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghpyozab.lua:19:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpghpyozab.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return data.filter(\n    function(value)\
    \ return type(value) == 'number' and isinteger(value) end,\n    values\n  )\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxacn0jgp.lua:7:\
    \ attempt to index a nil value (global 'data')\nstack traceback:\n\t/tmp/tmpxacn0jgp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxacn0jgp.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local function helper(value)\n\
    \    if type(value) ~= 'number' then return value end\n    local t = type(value)\n\
    \    return t == 'string' and t:match('integer') or\n      (t == 'number' and\
    \ type(value) == t and math.floor(value) == value)\n  end\n  return table.filter(values,\
    \ helper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8v87z7hu.lua:13:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmp8v87z7hu.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp8v87z7hu.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  for _, value in ipairs(values)\
    \ do\n    if type(value) == 'number' then\n      -- We don't consider non integers\n\
    \      -- >>> filter_integers([1, 'a', 3.14, 5])\n      -- [1, 3.14]\n      --\
    \ >>> filter_integers([1, 'a', 3.14, 5], _)\n      -- [1]\n      -- >>> filter_integers([1,\
    \ 'a', 3.14, 5], 'a')\n      -- [1, 3.14]\n      -- >>> filter_integers([1, 'a',\
    \ 3.14, 5], 3.14)\n      -- [1, 3.14]\n      -- >>> filter_integers([1, 'a', 3.14,\
    \ 5], 2)\n      -- []\n      -- >>> filter_integers([2, 'a', 3.14, 5], 3.14)\n\
    \      -- [2]\n      -- >>> filter_integers([1, 'a', 3.14, 5], [1, 'a', 3.14,\
    \ 5] or {})\n      -- [1]\n      -- >>> filter_integers([1, 'a', 3.14, 5], [1,\
    \ 'a', 3.14, 5] or {}, 1)\n      -- [1]\n      -- >>> filter_integers([1, 'a',\
    \ 3.14, 5], [1, 'a', 3.14, 5] or {}, 2)\n      -- [1]\n      if value == value\
    \ then\n        -- Return the value\n        return value\n      end\n    end\n\
    \  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2bg1eedb.lua:40:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp2bg1eedb.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local filtered = {}\n   \
    \ for v in values do\n        if type(v) == 'number' and v >= 0 then\n       \
    \     table.insert(filtered, v)\n        end\n    end\n    return filtered\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_yz2e6fl.lua:8:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmp_yz2e6fl.lua:8: in\
    \ local 'candidate'\n\t/tmp/tmp_yz2e6fl.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if type(values) ~= 'table'\
    \ then\n    error('Values is not a table')\n  end\n  local filtered = {}\n  local\
    \ i = 1\n  while i <= #values do\n    local value = tonumber(values[i])\n    if\
    \ type(value) == 'number' and value ~= nil then\n      table.insert(filtered,\
    \ value)\n    end\n    i = i + 1\n  end\n  return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgcogd2e.lua:26:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpmgcogd2e.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n\
    \        return type(value) == \"number\" and math.floor(value) == value\n   \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphjcusyjp.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local new_values = {}\n  for\
    \ _, v in ipairs(values) do\n    if type(v) == \"number\" and not v:is_float()\
    \ then\n      new_values[#new_values + 1] = v\n    end\n  end\n  return new_values\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplpkeqmkc.lua:9:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmplpkeqmkc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmplpkeqmkc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local output = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and math.isinteger(value)\
    \ then\n            table.insert(output, value)\n        end\n    end\n    return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb0tm60g6.lua:9:\
    \ attempt to call a nil value (field 'isinteger')\nstack traceback:\n\t/tmp/tmpb0tm60g6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpb0tm60g6.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local function integer(x)\n\
    \    return type(x) == 'number' and math.floor(x) == x\n  end\n  return values.filter(integer)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp91fit0wx.lua:10:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmp91fit0wx.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp91fit0wx.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result\n  local value\
    \ = values[0]\n  if type(value) == \"number\" then\n    if value == math.floor(value)\
    \ then\n      result = {value}\n      value = \"\"\n    else\n      result = {value}\n\
    \    end\n  elseif type(value) == \"table\" then\n    -- If the value is a table\
    \ of integers, return it\n    -- otherwise return the original value.\n    if\
    \ next(value) == nil then\n      result = {value}\n    else\n      result = {value}\n\
    \    end\n  else\n    -- If the value is a string, split it up on commas, then\n\
    \    -- convert to integers and return them.\n    if type(value) == \"string\"\
    \ then\n      local items = {}\n      for item in value:gmatch(\"([^,]+)\") do\n\
    \        items[#items + 1] = tointeger(item)\n      end\n      result = items\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqo_chwm.lua:41:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpeqo_chwm.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local value_type = type(_G.type)\
    \ -- We use _G.type to get the type from the global environment.\n  if value_type\
    \ ~= 'table' then return values end\n  -- filter out empty table entries\n  local\
    \ res = {}\n  for _,v in ipairs(values) do\n    if type(v) ~= 'table' then res[#res+1]\
    \ = v; continue end\n    local count = 0\n    for _,v2 in ipairs(v) do\n     \
    \ count = count + 1\n      if type(_G.type) ~= 'number' then res[#res+1] = v;\
    \ break; end\n      if type(_G.type) == 'number' then\n        -- The filter function\
    \ should accept only integers\n        if _G.type(v2) ~= 'number' then res[#res+1]\
    \ = v; break; end\n      end\n    end\n    if count == 0 then res[#res+1] = v;\
    \ end -- Skip empty table entries\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2qv7yu32.lua:12: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    return values:filter(function(value)\
    \ return type(value) == \"integer\" end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxmw_cx5_.lua:7:\
    \ attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmpxmw_cx5_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxmw_cx5_.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for i,\
    \ v in pairs(values) do\n    if type(v) == 'number' then\n      results[i] = v\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdylh5fd.lua:20:\
    \ expected: {4, 9}\nactual: {4, 4=23.2, 5=9}\nstack traceback:\n\t/tmp/tmpkdylh5fd.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) ~= 'number' then break end --\
    \ non-numeric values cannot be compared for equality\n    table.insert(results,\
    \ value)\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cqgs233.lua:19:\
    \ expected: {4, 9}\nactual: {4}\nstack traceback:\n\t/tmp/tmp0cqgs233.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return values.filter(function(value)\n\
    \    return type(value) == \"number\"\n  end)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbse8_37f.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmpbse8_37f.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpbse8_37f.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if type(values) == 'table'\
    \ then\n    local filtered_values = {}\n    for k, v in pairs(values) do\n   \
    \   if type(v) == 'number' and v == v then\n        table.insert(filtered_values,\
    \ v)\n      else\n        -- FIXME: this should be the error\n        -- raise\
    \ AssertionError(string.format('Invalid python value for filter %s in %s', k,\
    \ v))\n      end\n    end\n    return filtered_values\n  else\n    return values\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7swbyml.lua:27:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpa7swbyml.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return function(v)\n    if\
    \ type(v) == 'number' then\n      v = tonumber(v)\n    end\n    for _, item in\
    \ pairs(values) do\n      if type(item) == 'number' then\n        if v == item\
    \ then\n          return nil\n        end\n      end\n    end\n    return v\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88v4e30l.lua:25:\
    \ expected: {}\nactual: function: 0x16e5040\nstack traceback:\n\t/tmp/tmp88v4e30l.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  -- Fast path: avoid conversion\
    \ since we have constant or very small numbers\n  if #values <= 1 then\n    return\
    \ values\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3ild0xyw.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local ok, v\n  for _, v in\
    \ ipairs(values) do\n    if type(v) ~= 'number' then\n      ok = false\n     \
    \ break\n    end\n    if v ~= v then -- NaN cannot be compared with any value\n\
    \      ok = false\n      break\n    end\n    if v <= 0 then -- Negative integers\
    \ cannot be compared without NaN check\n      ok = false\n      break\n    end\n\
    \  end\n  return ok and values or nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk3u_trs.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpjk3u_trs.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local result\n    for _,\
    \ value in pairs(values) do\n        if type(value) == 'number' then\n       \
    \     table.insert(result, value)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqyg8c9o.lua:19:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpyqyg8c9o.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local filtered = {}\n  for\
    \ _, value in ipairs(values) do\n    local is_integer = tonumber(value) ~= nil\n\
    \    if is_integer and value ~= value then\n      error('\"integer\" argument\
    \ must be an integer value', 2)\n    end\n    if not is_integer then\n      filtered[#filtered\
    \ + 1] = value\n    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof458aqh.lua:24:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpof458aqh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return function()\n    for\
    \ i, v in ipairs(values) do\n      if type(v) == 'number' and math.floor(v) ==\
    \ v then\n        table.insert(values, i)\n      end\n    end\n    return values\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp34hdygg.lua:20:\
    \ expected: {}\nactual: function: 0x88ffe0\nstack traceback:\n\t/tmp/tmpp34hdygg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return table.filter(\n    function(value)\
    \ type(value) == 'number' and\n      math.floor(value) == value and\n      math.floor(value)\
    \ == value and\n      not math.floor(value) == value and\n      not math.floor(value)\
    \ == value,\n    values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4eeib25f.lua:8: unexpected symbol near '=='\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(values, function(value)\n\
    \    return type(value) == \"number\" and math.floor(value) == value\n  end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2bdfm_ii.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp2bdfm_ii.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2bdfm_ii.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local filterd = {}\n    for\
    \ _, v in ipairs(values) do\n        if type(v) ~= 'number' then\n           \
    \ table.insert(filterd, v)\n        elseif math.floor(v) == v then\n         \
    \   table.insert(filterd, v)\n        end\n    end\n    return filterd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2adik56k.lua:22:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 9, \"adasd\"}\nstack traceback:\n\t/tmp/tmp2adik56k.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(\n    function(value)\n\
    \      return type(value) == \"number\" and type(value) ~= 'boolean'\n    end,\
    \ values\n  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_g4xqho.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpw_g4xqho.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpw_g4xqho.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(function(val)\
    \ return type(val) == 'number' end,\n    values)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwjbyzuh.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmphwjbyzuh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphwjbyzuh.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ v in pairs(values) do\n    local result = type(v) == 'number' and math.floor(v)\
    \ or v\n    if result ~= v then\n      results[#results + 1] = result\n    end\n\
    \  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81zwo5yd.lua:21:\
    \ expected: {4, 9}\nactual: {23}\nstack traceback:\n\t/tmp/tmp81zwo5yd.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(function(value)\n\
    \    return type(value) == 'integer'\n  end, values)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2jaeyxk1.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp2jaeyxk1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2jaeyxk1.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for i\
    \ = 1, #values do\n    local value = tonumber(values[i])\n    if value ~= nil\
    \ then\n      table.insert(results, value)\n    end\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93l9ea_a.lua:21:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp93l9ea_a.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' and math.floor(value)\
    \ == value then\n      table.insert(results, value)\n    end\n  end\n  return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if type(values) ~= 'table'\
    \ then return values end\n  local new_values = {}\n  for i = 1, #values do\n \
    \   local value = tonumber(values[i])\n    if type(value) == 'number' and math.floor(value)\
    \ == value then\n      new_values[#new_values + 1] = values[i]\n    end\n  end\n\
    \  return new_values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then break end\n    if value ~= math.floor(value)\
    \ then break end\n  end\n  return values\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnpr04mle.lua:18:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpnpr04mle.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local newValues = {}\n  for\
    \ _, value in pairs(values) do\n    if type(value) == \"number\" then\n      table.insert(newValues,\
    \ value)\n    end\n  end\n  return newValues\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbc5c2xz.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpfbc5c2xz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local new_values = {}\n  for\
    \ _,v in ipairs(values) do\n    if type(v) == 'number' then\n      if type(v)\
    \ == 'integer' then\n        new_values[#new_values+1] = v\n      else\n     \
    \   error(string.format('%s is not integer', v))\n      end\n    end\n  end\n\
    \  return new_values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp30o4i4eh.lua:13:\
    \ 4 is not integer\nstack traceback:\n\t/tmp/tmp30o4i4eh.lua:13: in local 'candidate'\n\
    \t/tmp/tmp30o4i4eh.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(result,\
    \ value)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsym9hpy_.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpsym9hpy_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if type(values) == 'table'\
    \ then\n    return values.select(function(value) return type(value) == types.integer\
    \ end)\n  else\n    return values\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjo0n21ri.lua:8:\
    \ attempt to call a nil value (field 'select')\nstack traceback:\n\t/tmp/tmpjo0n21ri.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpjo0n21ri.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local filtered = {}\n  for\
    \ _, v in ipairs(values) do\n    if type(v) == 'number' then\n      table.insert(filtered,\
    \ v)\n    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5jif1x2.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpf5jif1x2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return table.filter(values,\
    \ is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf6xzkfwp.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmpf6xzkfwp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpf6xzkfwp.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local results = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value ~= 'number') or value ~=\
    \ tonumber(value) then break end\n        results[#results + 1] = value\n    end\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8qjgve_k.lua:19:\
    \ expected: {4, 9}\nactual: {}\nstack traceback:\n\t/tmp/tmp8qjgve_k.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local newValues = {}\n  \
    \  for i, v in ipairs(values) do\n        if type(v) == 'number' then\n      \
    \      table.insert(newValues, v)\n        else\n            -- don't filter the\
    \ table if any value can be coerced to nil\n            table.insert(newValues,\
    \ v)\n        end\n    end\n    return newValues\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepgupmwm.lua:23:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpepgupmwm.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local i = 1\n    local value\n\
    \    while i <= #values do\n        value = tonumber(values[i - 1])\n        if\
    \ value == nil then\n            break\n        end\n        if type(value) ==\
    \ 'number' and math.floor(value) == value then\n            table.insert(values,\
    \ value)\n        end\n        i = i + 1\n    end\n    return values\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93fht134.lua:26:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmp93fht134.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return setmetatable(values,\
    \ {\n    __index = function(self, key)\n      return tonumber(key)\n    end,\n\
    \    __newindex = function(self, key, value)\n      error(\"cannot set a numeric\
    \ value in a non-numeric table\")\n    end\n  })\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb7hfr3o4.lua:21:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpb7hfr3o4.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  values = values or {}\n  for\
    \ k, v in pairs(values) do\n    if type(v) == 'number' and v >= 0 then\n     \
    \ values[v] = true\n    end\n  end\n  values = values(values())\n  return values\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl6p422rz.lua:13:\
    \ attempt to call a table value (local 'values')\nstack traceback:\n\t/tmp/tmpl6p422rz.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpl6p422rz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local new = {}\n  for _, value\
    \ in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(new,\
    \ value)\n    end\n  end\n  return new\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ily324e.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4ily324e.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) == 'number' then\n      if math.floor(value)\
    \ == value then\n        result[#result + 1] = value\n      end\n    elseif type(value)\
    \ == 'string' then\n      -- This is probably a numeric value that happens to\
    \ contain a comma\n      -- or a hyphen.  Just ignore it.\n      if ',' == value\
    \ or value == '-' then\n        result[#result + 1] = value\n      end\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local filter = {}\n    for\
    \ i, v in ipairs(values) do\n        if type(v) == 'number' then\n           \
    \ table.insert(filter, v)\n        end\n    end\n    return filter\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5azg7ou.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmps5azg7ou.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ v in ipairs(values) do\n    if not (type(v) == 'number') and type(v) ~= 'boolean'\
    \ then\n      results[#results + 1] = v\n    end\n  end\n  return results\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovx27403.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpovx27403.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local filtered_values = {}\n\
    \  for _, value in pairs(values) do\n    if not type(value) == 'number' then\n\
    \      filtered_values[#filtered_values + 1] = value\n    end\n  end\n  return\
    \ filtered_values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf50o0gka.lua:20:\
    \ expected: {4, 9}\nactual: {}\nstack traceback:\n\t/tmp/tmpf50o0gka.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  values = values.filter(function\
    \ (value)\n    return type(value) == 'number' and math.floor(value) == value\n\
    \  end)\n  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5jq07suc.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmp5jq07suc.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5jq07suc.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local new_values = {}\n \
    \   for i, v in pairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            new_values[i] = v\n        end\n    end\n    return new_values\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46gudvnx.lua:20:\
    \ expected: {4, 9}\nactual: {4, 5=9}\nstack traceback:\n\t/tmp/tmp46gudvnx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return values.filter(function(value)\n\
    \    return type(value) == 'number' and isinteger(value)\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7mg1nkup.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmp7mg1nkup.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7mg1nkup.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if type(values) ~= 'table'\
    \ then return values end\n  values = unpack(values)\n  if type(values[1]) ~= 'number'\
    \ then return values end\n  return values.filterfunction(function(v)\n    if type(v)\
    \ == 'number' then return v ~= v end\n  end)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7hg1vbhy.lua:8:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp7hg1vbhy.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp7hg1vbhy.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for i,\
    \ v in ipairs(values) do\n    if type(v) ~= 'number' then -- exclude strings\n\
    \      table.insert(result, v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21lfpsdv.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmp21lfpsdv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local integers = {}\n  local\
    \ value_index = 1\n  local integer_value\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpknphowsm.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if type(values) == 'table'\
    \ and getmetatable(values).__index == 'table' then\n    local results = {}\n \
    \   for v in pairs(values) do\n      local vtype = type(v)\n      if vtype ==\
    \ 'number' then\n        if floor(v) == v then\n          results[#results + 1]\
    \ = v\n        end\n      elseif vtype == 'table' then\n        table.insert(results,\
    \ filter_integers(v))\n      elseif vtype == 'string' then\n        if v:match('^[%a%d]+$')\
    \ then\n          table.insert(results, v)\n        end\n      else\n        table.insert(results,\
    \ v)\n      end\n    end\n    return results\n  end\n  return values\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv_8ua46h.lua:7:\
    \ attempt to index a nil value\nstack traceback:\n\t/tmp/tmpv_8ua46h.lua:7: in\
    \ local 'candidate'\n\t/tmp/tmpv_8ua46h.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  for _, v in ipairs(values)\
    \ do\n    if type(v) == 'number' and math.floor(v) == v then\n      return v\n\
    \    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposz1fhyz.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmposz1fhyz.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  values = values or {}\n  local\
    \ filtered_values = {}\n  for k in pairs(values) do\n    if type(k) == 'number'\
    \ then\n      filtered_values[#filtered_values + 1] = k\n    end\n  end\n  return\
    \ filtered_values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9tav0jr.lua:21:\
    \ expected: {4, 9}\nactual: {1, 2, 3, 4, 5, 6}\nstack traceback:\n\t/tmp/tmpi9tav0jr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local new_values = {}\n  for\
    \ _, value in pairs(values) do\n    if not type(value) ~= 'number' then\n    \
    \  new_values[#new_values + 1] = value\n    end\n  end\n  return new_values\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk10_27_y.lua:20:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpk10_27_y.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local out = {}\n  for _, v\
    \ in ipairs(values) do\n    if type(v) ~= 'number' or v ~= math.floor(v) then\n\
    \      table.insert(out, v)\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzljuyv5w.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, 23.2, \"adasd\"}\nstack traceback:\n\t/tmp/tmpzljuyv5w.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if type(values) ~= 'table'\
    \ then\n    return values\n  elseif next(values) ~= nil then\n    local next_values\
    \ = {}\n    for v in pairs(values) do\n      if type(v) == 'number' then\n   \
    \     if v ~= math.floor(v) then\n          next_values[#next_values+1] = v\n\
    \        end\n      end\n    end\n    return filter_integers(next_values)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2rkimsp.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpt2rkimsp.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local list = {}\n  local v\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn7b0mymu.lua:18: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  values = filter(values, is_integer)\n\
    \  assert(#values == 0, \"values must be a list of only integers\")\n  return\
    \ values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpez1cngou.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpez1cngou.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpez1cngou.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local out = terralib.newlist()\n\
    \  for i, value in ipairs(values) do\n    if type(value) == \"number\" then\n\
    \      if value ~= math.floor(value) then\n        table.insert(out, value)\n\
    \      end\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp15cosev2.lua:7:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmp15cosev2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp15cosev2.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local value\n  local filtered\
    \ = {}\n  for value in pairs(values) do\n    local is_integer = math.floor(value)\
    \ == value\n    if is_integer then\n      table.insert(filtered, value)\n    end\n\
    \  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gqk46n5.lua:22:\
    \ expected: {4, 9}\nactual: {1, 2, 3, 4, 5, 6}\nstack traceback:\n\t/tmp/tmp_gqk46n5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local out = terralib.newlist()\n\
    \  for _, value in ipairs(values) do\n    if type(value) ~= 'number' then\n  \
    \    out:insert(value)\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1olywan6.lua:7:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmp1olywan6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1olywan6.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return values.filter(function(x)\n\
    \    return type(x) == 'number' and\n         x >= math.floor(x) and\n       \
    \  x <= math.floor(x+1.0)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp23e193h0.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmp23e193h0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp23e193h0.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpauz1rctm.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpauz1rctm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local results = {}\n    local\
    \ i = #values\n    while i do\n        if tonumber(values[i - 1]) then\n     \
    \       results[#results + 1] = values[i - 1]\n        end\n        i = i - 1\n\
    \    end\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local ret = {}\n  for _,v in\
    \ pairs(values) do\n    if type(v) ~= 'number' then\n      return nil\n    end\n\
    \    if type(v) ~= 'integer' then\n      return nil\n    end\n    table.insert(ret,\
    \ v)\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75fv45cl.lua:24:\
    \ expected: {4, 9}\nactual: nil\nstack traceback:\n\t/tmp/tmp75fv45cl.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local newvalues = {}\n  for\
    \ _, v in pairs(values) do\n    local num = tonumber(v)\n    if num then\n   \
    \   table.insert(newvalues, num)\n    end\n  end\n  return newvalues\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbn7mp8e.lua:21:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpwbn7mp8e.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return table.filter(function(value)\
    \ return type(value) == 'number' end,\n    values)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_x7c9cv9.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmp_x7c9cv9.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_x7c9cv9.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  -- If there are no integers,\
    \ return an empty list\n  if not values then\n    return []\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpow01c6p9.lua:9: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return values:map(function(x)\
    \ return math.floor(x) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo0jrmbgi.lua:7:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpo0jrmbgi.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpo0jrmbgi.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return filter(values, function(value)\
    \ return type(value) == 'integer' end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbwxpuvb8.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpbwxpuvb8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpbwxpuvb8.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local function integers(x)\n\
    \        if type(x ~= 'number') then return nil end\n        return x ~= x and\
    \ x ~= 0 and x ~= math.floor(x) and x ~= math.ceil(x)\n    end\n    return filter(integers,\
    \ values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq4tcqowi.lua:11:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpq4tcqowi.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpq4tcqowi.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local function filter(list,\
    \ int)\n    for _, v in pairs(list) do\n      if type(v) == 'number' and int ==\
    \ v then\n        list[_] = nil\n      end\n    end\n    return list\n  end\n\
    \  values = filter(values, nil)\n  values = filter(values, false)\n  values =\
    \ filter(values, true)\n  return values\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphquy2rhi.lua:25:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmphquy2rhi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local new_values = terralib.newlist()\n\
    \  for _, v in pairs(values) do\n    if type(v) == \"number\" then\n      new_values:insert(v)\n\
    \    end\n  end\n  return new_values\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk8guso8n.lua:7:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpk8guso8n.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpk8guso8n.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      if math.floor(value)\
    \ == value then\n        results[#results + 1] = value\n      end\n    end\n \
    \ end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local output = {}\n    local\
    \ idx\n    for idx, value in ipairs(values) do\n        if type(value) ~= 'number'\
    \ then return end\n        if math.floor(value) == value then table.insert(output,\
    \ value) end\n    end\n    return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggumttzc.lua:20:\
    \ expected: {4, 9}\nactual: nil\nstack traceback:\n\t/tmp/tmpggumttzc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local value\n  for i, value\
    \ in ipairs(values) do\n    if type(value) ~= 'number' then\n      table.insert(values,\
    \ value)\n    end\n  end\n  return values\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local results = {}\n    for\
    \ value in values:\n        if type(results[value]) ~= 'number' then\n       \
    \     results[value] = 0\n        end\n        results[value] = results[value]\
    \ + 1\n    end\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp7_gx4f3.lua:9: <name> expected near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if type({}) == type(values)\
    \ then\n    local i = 0\n    for _, v in pairs(values) do\n      if type(v) ==\
    \ 'number' then\n        values[i] = v\n        i = i + 1\n      end\n    end\n\
    \  end\n  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0w28r3b0.lua:23:\
    \ expected: {4, 9}\nactual: {0=4, 23.2, 9, 4, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmp0w28r3b0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg2cx66tn.lua:17: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local function is_integer(value)\n\
    \    return type(value) == 'number' and math.floor(value) == value\n  end\n  local\
    \ output = values:map(is_integer)\n  return table.concat(output) or nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp58d5exem.lua:10:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmp58d5exem.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp58d5exem.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in ipairs(values) do\n    local num = tonumber(value)\n    if not num\
    \ then\n      result[#result + 1] = value\n    else\n      result[#result + 1]\
    \ = num\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpan90advz.lua:23:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpan90advz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  for _, value in ipairs(values)\
    \ do\n    if type(value) ~= 'number' then return false end\n    if math.floor(value)\
    \ == value then return true end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphac1gn1a.lua:17:\
    \ expected: {}\nactual: false\nstack traceback:\n\t/tmp/tmphac1gn1a.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local output = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      output[#output\
    \ + 1] = value\n    elseif value ~= math.floor(value) then\n      output[#output\
    \ + 1] = value\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1x85nvlj.lua:22:\
    \ expected: {4, 9}\nactual: {{}, {}, 23.2, \"adasd\"}\nstack traceback:\n\t/tmp/tmp1x85nvlj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local out = terralib.newlist()\n\
    \  for _, v in pairs(values) do\n    if type(v) == \"number\" then\n      if type(v)\
    \ == \"number\" then\n        if v:floor() ~= v then\n          table.insert(out,\
    \ v)\n        end\n      else\n        table.insert(out, v)\n      end\n    end\n\
    \  end\n  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpim288yrc.lua:7:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpim288yrc.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpim288yrc.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) == 'number' then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_wkh6vg.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpt_wkh6vg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local out = terralib.newlist()\n\
    \  for _, v in ipairs(values) do\n    if type(v) == \"number\" then\n      if\
    \ math.floor(v) == v then\n        table.insert(out, v)\n      end\n    end\n\
    \  end\n  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk_sp0j0e.lua:7:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpk_sp0j0e.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpk_sp0j0e.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local results = {}\n    for\
    \ _, v in ipairs(values) do\n        if type(v) == \"number\" then\n         \
    \   results[#results + 1] = v\n        end\n    end\n    return results\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpgqi_8l.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpgpgqi_8l.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return unpack(values, 1, math.min(#values,\
    \ 2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyrm2talu.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpyrm2talu.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpyrm2talu.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in ipairs(values) do\n    local value_as_int = tonumber(value)\n    if\
    \ value_as_int then\n      results[#results + 1] = value_as_int\n    end\n  end\n\
    \  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbzn_e_m8.lua:21:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpbzn_e_m8.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local value\n  for _, value\
    \ in pairs(values) do\n    if type(value ~= 'number') then\n      break\n    end\n\
    \    if math.floor(value) == value then\n      table.insert(values, value)\n \
    \   end\n  end\n  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8x5ri__s.lua:23:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmp8x5ri__s.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    if values ~= nil then\n \
    \       local results = {}\n        for _, value in ipairs(values) do\n      \
    \      if type(results[value]) ~= 'number' then\n                results[value]\
    \ = true\n            else\n                results[value] = results[value] or\
    \ true\n            end\n        end\n        return unpack(results)\n    else\n\
    \        return nil\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpypaw8475.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpypaw8475.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpypaw8475.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    if type(values) ~= 'table'\
    \ then\n        local value = {unpack(values)}\n        if type(unpack(values))\
    \ == 'table' then\n            return values\n        end\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpolkw4_l2.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if type(values) == \"table\"\
    \ then\n    local new_values = {}\n    for k, v in pairs(values) do\n      if\
    \ type(k) == \"number\" then\n        if math.floor(k) == k then\n          new_values[k]\
    \ = v\n        end\n      else\n        new_values[v] = true\n      end\n    end\n\
    \    return new_values\n  end\n  \n  return values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5k71y_x.lua:28:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpq5k71y_x.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return values.filter(function(value)\
    \ return type(value) == type(0) end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphuexu46f.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmphuexu46f.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphuexu46f.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    if values then\n        for\
    \ _, v in ipairs(values) do\n            if type(v) == 'number' then\n       \
    \         values[v] = nil\n            end\n        end\n    end\n    return values\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_71dwnwz.lua:21:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 5=9, 6=\"adasd\"}\nstack traceback:\n\t\
    /tmp/tmp_71dwnwz.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n   local results = {}\n   for\
    \ _, v in pairs(values) do\n      if type(v) == 'number' and (v >= 0) and (v <=\
    \ math.floor(v)) then\n         table.insert(results, v)\n      end\n   end\n\
    \   return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local new_values = {}\n  for\
    \ _, v in ipairs(values) do\n    local is_integer = type(v) == 'number' and v\
    \ % 1 == 0\n    new_values[is_integer] = new_values[is_integer] and v\n  end\n\
    \  return new_values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpseo6_jri.lua:19:\
    \ expected: {4, 9}\nactual: {}\nstack traceback:\n\t/tmp/tmpseo6_jri.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local value\n  for _, value\
    \ in pairs(values) do\n    if type(value) == 'number' then\n      values[value]\
    \ = nil\n    end\n  end\n  return values\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfr4bdpar.lua:20:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 5=9, 6=\"adasd\"}\nstack traceback:\n\t\
    /tmp/tmpfr4bdpar.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local rv = {}\n  for _, value\
    \ in pairs(values) do\n    if not isinteger(value) then\n      return nil\n  \
    \  end\n    rv[#rv + 1] = value\n  end\n  return rv\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2tptv3z.lua:9:\
    \ attempt to call a nil value (global 'isinteger')\nstack traceback:\n\t/tmp/tmpm2tptv3z.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpm2tptv3z.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return values:filter(function(value)\
    \ return type(value) == type(1) end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0uhosfjn.lua:7:\
    \ attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmp0uhosfjn.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0uhosfjn.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n   local filtered_values = {}\n\
    \   for _, value in pairs(values) do\n      -- Filter out only integers\n    \
    \  if type(value) == \"number\" then\n         table.insert(filtered_values, value)\n\
    \      end\n   end\n   return filtered_values\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5q2y2iuz.lua:21:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp5q2y2iuz.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if values == nil then\n   \
    \ return nil\n  end\n  local new_values = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" and math.floor(value) == value then\n \
    \     new_values[#new_values + 1] = value\n    end\n  end\n  return new_values\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if type(values) == 'table'\
    \ then\n    local list_type = type(value)\n    local filtered_values = {}\n  \
    \  for _, value in pairs(values) do\n      if type(value) == 'table' and list_type\
    \ == type(value) and list_type ~= 'table' then\n        filtered_values[#filtered_values\
    \ + 1] = filter_integers(value)\n      elseif type(value) == 'number' then\n \
    \       filtered_values[#filtered_values + 1] = value\n      end\n    end\n  \
    \  return filtered_values\n  elseif type(values) == 'number' then\n    return\
    \ values\n  else\n    return values\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfvrr_lq.lua:29:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkfvrr_lq.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local ret = {}\n  local _iterator\
    \ = _G.type(values).getn\n  if _iterator == nil then return ret\n  else\n    for\
    \ _,v in ipairs(values) do\n      -- Only integers?\n      if type(v) == 'number'\
    \ then\n        table.insert(ret, v)\n      end\n    end\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqw0k6pgw.lua:25:\
    \ expected: {4, 9}\nactual: {}\nstack traceback:\n\t/tmp/tmpqw0k6pgw.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return function(v)\n    --\
    \ If value is not a number, return nil\n    if type(v) ~= 'number' then return\
    \ nil end\n    -- Return value if it is integer\n    if math.floor(v) == v then\
    \ return v end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6r4lfc6.lua:18:\
    \ expected: {}\nactual: function: 0x15e8ad0\nstack traceback:\n\t/tmp/tmpu6r4lfc6.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return [values]\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3ri84lsm.lua:7: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    if type(values) ~= 'table'\
    \ then return values end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn0eetp0r.lua:17: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    if type(values) ~= \"table\"\
    \ then\n        return values\n    end\n    local value\n    for _, value in ipairs(values)\
    \ do\n        if type(tostring(value)) == 'string' and tostring(value:sub(1, 1))\
    \ == '#' then\n            values[#values + 1] = tonumber(value)\n        end\n\
    \    end\n    return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr7d3qymg.lua:12:\
    \ attempt to index a number value (local 'value')\nstack traceback:\n\t/tmp/tmpr7d3qymg.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpr7d3qymg.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(x)\n\
    \        return x == x\n    end\n    return filter(values, is_integer)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo41op6l3.lua:10:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpo41op6l3.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpo41op6l3.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local filtered = {}\n  for\
    \ _, value in ipairs(values) do\n    if type(value) ~= 'number' then break end\
    \ -- non-numeric value encountered\n    if type(value) ~= 'integer' then break\
    \ end -- non-integer value encountered\n    table.insert(filtered, value)\n  end\n\
    \  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdcm0zzid.lua:20:\
    \ expected: {4, 9}\nactual: {}\nstack traceback:\n\t/tmp/tmpdcm0zzid.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    local results = {}\n    for\
    \ value in values\n        if type(value) ~= 'number' then break end\n       \
    \ if math.floor(value) == value then results[#results + 1] = value end\n    end\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_ca404g_.lua:9: 'do' expected near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return values:filter(function(value)\
    \ return type(value) == NIL_TYPE end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyydwhukk.lua:7:\
    \ attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmpyydwhukk.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpyydwhukk.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local out = {}\n  for _, v\
    \ in ipairs(values) do\n    if type(v) ~= 'number' then -- ignore non-numerical\
    \ values\n      out = out or {}\n      table.insert(out, v)\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4t2raqg.lua:21:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpv4t2raqg.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in pairs(values) do\n    if type(value) ~= 'number' then\n      result[#result\
    \ + 1] = value\n    elseif value ~= math.floor(value) then\n      result[#result\
    \ + 1] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufvqvgs0.lua:22:\
    \ expected: {4, 9}\nactual: {{}, {}, 23.2, \"adasd\"}\nstack traceback:\n\t/tmp/tmpufvqvgs0.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local value\n  for _, value\
    \ in ipairs(values) do\n    if type(value) == \"number\" then\n      table.insert(values,\
    \ value)\n    end\n  end\n  return values\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  for _, v in ipairs(values)\
    \ do\n    if type(v) == 'number' and v >= 0 then\n      table.insert(values, v)\n\
    \    end\n  end\n  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  for _, v in ipairs(values)\
    \ do\n    if type(v) ~= 'number' then\n      return nil\n    end\n  end\n  return\
    \ values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf10asg7v.lua:19:\
    \ expected: {4, 9}\nactual: nil\nstack traceback:\n\t/tmp/tmpf10asg7v.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  for _,\
    \ value in pairs(values) do\n    local _, numeric = value\n    if type(numeric)\
    \ == \"number\" then\n      table.insert(results, numeric)\n    end\n  end\n \
    \ return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2x1yrxfy.lua:21:\
    \ expected: {4, 9}\nactual: {}\nstack traceback:\n\t/tmp/tmp2x1yrxfy.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local values = terralib.newlist()\n\
    \  for i, value in ipairs(values) do\n    if not rawget(value, \"__index\") then\n\
    \      values.insert(i, value)\n    end\n  end\n  return values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprtzsrtz0.lua:7:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmprtzsrtz0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprtzsrtz0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  -- The algorithm below is a\
    \ variation of \"Find an item in an array?\" (http://www.refactoring.com/catalog/replace-find.html).\n\
    \  -- If none of the values are integers, return an empty list.\n  local function\
    \ is_integer(value)\n    return type(value) == 'number' and math.floor(value)\
    \ == value\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmput1hioq1.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if type(values[0]) ~= 'number'\
    \ then\n    return values\n  end\n  local new_values = {}\n  for i = 1, #values\
    \ do\n    if type(values[i]) ~= 'number' then\n      new_values[i] = values[i]\n\
    \    else\n      new_values[i] = math.floor(values[i])\n    end\n  end\n  return\
    \ new_values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum826l26.lua:25:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpum826l26.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return values:map(function(a)\
    \ type(type(a)) and isnumeric(a) and a or nil end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz4lrtrlj.lua:7: unexpected symbol near 'and'\n"
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local results = {}\n  local\
    \ i = 1\n  for v in values do\n    if type(v) ~= 'number' then\n      results[i]\
    \ = v\n      i = i + 1\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8flllj9f.lua:9:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmp8flllj9f.lua:9: in\
    \ local 'candidate'\n\t/tmp/tmp8flllj9f.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  if values then\n    local values\
    \ = values:map(tointeger)\n    if #values > 0 then return values end\n  end\n\
    \  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn3e5389e.lua:8:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpn3e5389e.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpn3e5389e.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  -- Filter out integer values\
    \ only for integers\n  local result = {}\n  for _, value in ipairs(values) do\n\
    \    -- if type(value) == \"number\" then\n      if type(value) ~= 'table' then\n\
    \        result[#result + 1] = value\n      end\n    -- end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdookg3c.lua:23:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9, \"adasd\"}\nstack traceback:\n\t/tmp/tmpgdookg3c.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ v in ipairs(values) do\n    if type(v) == 'number' then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyip9l6cp.lua:20:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpyip9l6cp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local ret = {}\n  for _, value\
    \ in pairs(values) do\n    if type(value) ~= 'number' then\n      ret[#ret + 1]\
    \ = value\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8qyeptm.lua:20:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpf8qyeptm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  values = values:map(tointeger)\n\
    \  return filter(values, function(value)\n    return type(value) == 'number' and\
    \ math.floor(value) == value\n  end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp85s21n15.lua:7:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmp85s21n15.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp85s21n15.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n    if type(values) ~= \"table\"\
    \ then return values end\n    local result = {}\n    for _, value in ipairs(values)\
    \ do\n        if type(value) == \"number\" then\n            result[#result +\
    \ 1] = value\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0u45w2v.lua:21:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpv0u45w2v.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local function helper(values,\
    \ accumulator)\n    if values then\n      for _, value in ipairs(values) do\n\
    \        accumulator = accumulator or 0\n        if type(value ~= 'number') or\
    \ (accumulator ~= value) then\n          return accumulator\n        else\n  \
    \        accumulator = value\n        end\n      end\n    end\n  end\n  return\
    \ helper(values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwo7zry1.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpxwo7zry1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  return function(value)\n  \
    \  if type(value) == 'table' and value[1] == 'integer' then\n      return value[2]\n\
    \    end\n    return value\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxfntipy.lua:18:\
    \ expected: {}\nactual: function: 0x1744e40\nstack traceback:\n\t/tmp/tmpaxfntipy.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  values = values:map(function(v)\n\
    \    if type(v) ~= 'number' then\n      v = v\n        or\n      error('Value\
    \ must be of integer type')\n    end\n    return v\n  end)\n  return values\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5nti_7a1.lua:7:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmp5nti_7a1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5nti_7a1.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local result = {}\n  for _,\
    \ value in ipairs(values) do\n    local _, err = check_integer(value)\n    if\
    \ err then return nil, err end\n    if tostring(value) ~= '' and tonumber(value)\
    \ ~= nil then\n      result[#result + 1] = value\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5lluu66n.lua:9:\
    \ attempt to call a nil value (global 'check_integer')\nstack traceback:\n\t/tmp/tmp5lluu66n.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp5lluu66n.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter given list of any python values only for integers\n-- >>> filter_integers(['a',\
    \ 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1,\
    \ 2, 3]\nlocal function filter_integers(values)\n  local _, _, index, _, _, _,\
    \ _ =\n    unpack(\n      {'values', 'len', 'i', 'j', 'k', 't', 'table', 'table_size',\
    \ 'key'}\n    )\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps0d5r61t.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
