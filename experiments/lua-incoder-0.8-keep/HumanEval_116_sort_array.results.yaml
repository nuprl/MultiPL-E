name: HumanEval_116_sort_array
language: lua
results:
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  return arr:gsub('(%S+)'):gsub('%1+'):gsub('%1-'):gsub('%d+'):gsub('%d-'):gsub('%d*'):gsub('%2.%d*'):gsub('%2.%d'):gsub('%2.%2.%d'):gsub('%.%2.%d'):gsub('%2.%2.%2.%d'):gsub('%2.%2.%2.%2.%d'):gsub('%2.%2.%2.%2.%2.%d'):gsub('%.%2.%2.%2.%2.%d'):gsub('%.%2.%2.%2.%2.%2.%d'):gsub('%.%2.%2.%2.%2.%2.%2.%d'):gsub('%.%2.%2.%2.%2.%2.%2.%2.%d'):gsub('%.%2.%2.%2.%2.%2.%2.%2.%2.%d'):gsub('%d%2.%d'):gsub('%d%2.%2.%d'):gsub('%d%2.%2.%2.%d'):gsub('%d%2.%2.%2.%2.%d'):gsub('%d%2.%2.%2.%2.%2.%d'):gsub('%d%2.%2.%2.%2.%2.%2.%d'):gsub('%d%2.%2.%2.%2.%2.%2.%2.%d'):gsub('%d%2.%2.%2.%2.%2.%2.%2.%2.%d'):gsub('%d%2.%2.%2.%2.%2.%2.%2.%2.%2.%d'):gsub('%d%2.%2.%2.%2.%2.%2.%2.%2.%2.%2.%d'):gsub('%d%2.%2.%2.%2.%2.%2.%2.%2.%2.%2.%d'):gsub('%2.%d%d'):gsub('%2.%d%2.%d'):gsub('%2.%d%2.%2.%d'):gsub('%2.%d%2.%2.%d'):gsub('%2.%d%2.%2.%d'):gsub('%2.%d%2.%2.%2.%d'):gsub('%2.%d%2.%2.%2.%d'):gsub('%2.%d%2.%2.%2.%d'):gsub('%2.%d%2.%2.%2.%2.%d'):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptyhreeyi.lua:10: function arguments expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  return arr ~= nil and arr\
    \ or function(x) return x end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctguvbkt.lua:15:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpctguvbkt.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  return arr:gmatch('%d*'):sort(function(a,\
    \ b)\n      if a:sub(1, #a) == '1' then return a < b end\n      if a:sub(1, #a)\
    \ == '0' then return a == b end\n      return tonumber(a) > tonumber(b)\n  end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp46uh4gpc.lua:9:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmp46uh4gpc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp46uh4gpc.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if #arr == 1 then\n   \
    \     return arr\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd8s6srkv.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if arr == nil then return\
    \ arr end\n  local sorted = {}\n  for i = 1, #arr do\n    local count = 0\n  \
    \  for j = 1, #arr do\n      count = count + arr[j]\n      arr[#arr + 1 - j] =\
    \ nil\n      if count ~= 1 then\n        break\n      end\n    end\n    table.insert(sorted,\
    \ arr[i - 1])\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpip09nfin.lua:14:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpip09nfin.lua:14: in local 'candidate'\n\t/tmp/tmpip09nfin.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  return arr\nend\n</cell>\n\
    <text>\nYour Solution\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb24l1av2.lua:11: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Special case: empty array\n\
    \  if arr == nil then\n    return arr\n  end\n  -- Special case: 1-element array\n\
    \  if #arr == 1 then\n    return arr\n  end\n  -- Get ones' binary representation\n\
    \  local bins = bit.lshift(bit.rshift(unpack(arr:map(function(e) return bit.band(e,\
    \ 1) end), 8) , 32), 8)\n  -- Construct a dictionary: bins{i} is a set of elements\
    \ of arr which are equal to i with i not equal to 0\n  -- bins{0} == 0, bins{1}\
    \ == {1}, bins{2}, {3}, {4}, {5}, {6}, {7}\n  local dict = {}\n  for i = 1, #bins\
    \ do\n    dict[#dict+1] = setmetatable({}, {__mode=\"v\"})\n    for j = 1, #arr\
    \ do\n      if bins[i] == bit.band(arr[j], 1) then\n        dict[#dict+1][arr[j]]\
    \ = true\n      end\n    end\n  end\n  -- Sort the dictionary\n  -- dict[1] =\
    \ {1, 2, 3, 4}\n  -- dict[2] = {5, 6}\n  -- dict[3] = {7}\n  -- dict[4] = {8,\
    \ 9}\n  -- dict[5] = {10}\n  -- dict[6] = {11}\n  -- dict[7] = {12}\n  -- dict[8]\
    \ = {13}\n  -- dict[9] = {14}\n  -- dict[10] = {15}\n  -- dict[i] = {j for j in\
    \ {1..#arr} if arr[j] is in dict[i]}\n  local sorted_dict = {}\n  local i = 0\n\
    \  for _, binset in pairs(dict) do\n    for _, e in pairs(binset) do\n      sorted_dict[#sorted_dict+1]\
    \ = e\n    end\n  end\n  -- Construct the new array\n  local sorted_arr = {}\n\
    \  for i = 1, #arr do\n    sorted_arr[#sorted_arr+1] = sorted_dict[arr[i]]\n \
    \ end\n  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp03rdfoqm.lua:18:\
    \ attempt to index a nil value (global 'bit')\nstack traceback:\n\t/tmp/tmp03rdfoqm.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp03rdfoqm.lua:60: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local i = 1\n  local counts\
    \ = {}\n  -- Count number of ones for each element\n  while i < #arr do\n    local\
    \ num = arr[i]\n    counts[num] = counts[num] or 0\n    counts[num] = counts[num]\
    \ + 1\n    i = i + 1\n  end\n  -- Sort based on number of ones\n  table.sort(counts)\n\
    \  -- And based on decimal values\n  for i = 1, #counts do\n    arr[i] = counts[i]\n\
    \  end\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3lia_up.lua:30:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 1, 1, 3, 4}\nstack traceback:\n\t/tmp/tmpc3lia_up.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr == 0 then return\
    \ arr end\n  local count = count_ones(arr[1])\n  local res = arr[1]\n  for i =\
    \ 2, #arr do\n    if count > count_ones(arr[i]) then\n      count = count\n  \
    \  else\n      count = count_ones(arr[i]) + 1\n    end\n    local temp = count\n\
    \    count = count_ones(arr[i]) + 1\n    count = count - temp\n    table.insert(res,\
    \ count)\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp066gq1lx.lua:10:\
    \ attempt to call a nil value (global 'count_ones')\nstack traceback:\n\t/tmp/tmp066gq1lx.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp066gq1lx.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if #arr == 0 then\n   \
    \     return arr\n    end\n    local ones = { }\n    local decs = { }\n    for\
    \ _, x in ipairs(arr) do\n        local bin = string.sub(x, 1, string.len(x) -\
    \ 2)\n        local bin = bin:gsub(\"1\", \"\") -- remove all 1s\n        table.insert(decs,\
    \ tonumber(bin, 2))\n        table.insert(ones, 1)\n    end\n    table.sort(decs)\n\
    \    table.sort(decs)\n    table.sort(decs)\n    table.sort(decs)\n    table.sort(decs)\n\
    \    for i = 1, #arr do\n        arr[i] = decs[i - 1] + ones[i - 1]\n    end\n\
    \    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4b10t1mw.lua:26:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp4b10t1mw.lua:26: in local 'candidate'\n\t/tmp/tmp4b10t1mw.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Special case for 0 or\
    \ 1 element.\n  if #arr == 0 or #arr == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4zkjmoyk.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local counts = { [1] = 0\
    \ } -- to count number of 1s\n  local decimal = { [1] = 0 } -- array to store\
    \ decimal value of each element\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3hhpgzc4.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local size = #arr\n  local\
    \ tmp = {}\n  local counts = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2rjcdrcf.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr == 0 then\n    return\
    \ arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7wb9pdnf.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- sort array elements with\
    \ their bit counts in ascending order\n  -- first sort negative numbers with their\
    \ bit counts in descending order\n  -- this makes negative numbers come first\n\
    \  local neg_arr = {}\n  for i = #arr, 1, -1 do\n    neg_arr[tostring(tointeger(arr[i]))]\
    \ = tostring(#neg_arr + 1)\n  end\n  -- sort positive numbers with their decimal\
    \ value in ascending order\n  -- this makes positive numbers come first\n  local\
    \ pos_arr = {}\n  for i = #arr, 1, -1 do\n    local num = tointeger(arr[i])\n\
    \    local dec = tostring(num / 2)\n    local bin = tostring(num % 2)\n    pos_arr[dec]\
    \ = bin_array(bin, pos_arr)\n  end\n  -- combine positive and negative arrays\n\
    \  local total_arr = {}\n  for i = #arr, 1, -1 do\n    if neg_arr[tostring(tointeger(arr[i]))]\
    \ then\n      table.insert(total_arr, neg_arr[tostring(tointeger(arr[i]))])\n\
    \    else\n      table.insert(total_arr, pos_arr[tostring(tointeger(arr[i]))])\n\
    \    end\n  end\n  return total_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw7g2oyc6.lua:14:\
    \ attempt to call a nil value (global 'tointeger')\nstack traceback:\n\t/tmp/tmpw7g2oyc6.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpw7g2oyc6.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if #arr < 2 then\n    \
    \    return arr\n    end\n    local counts = terralib.newlist()\n    for i = 1,\
    \ #arr do\n        counts:insert(0)\n    end\n    for i = 2, #arr do\n       \
    \ counts[arr[i]]:insert(i - 1)\n    end\n    local ones = terralib.newlist()\n\
    \    for i = 1, #arr do\n        if counts[arr[i]]:size() > 1 then\n         \
    \   for j = 1, counts[arr[i]]:size() do\n                table.insert(ones, counts[arr[i]][j]\
    \ + 1)\n            end\n            counts[arr[i]]:remove(table.max(ones))\n\
    \        else\n            table.insert(ones, 1)\n        end\n    end\n    local\
    \ base = terralib.newlist()\n    for i = 1, #counts do\n        table.insert(base,\
    \ counts[i])\n    end\n    local decs = terralib.newlist()\n    for i = 1, #base\
    \ do\n        table.insert(decs, base:abs() - i)\n    end\n    local idxs = terralib.newlist()\n\
    \    idxs:resize(#decs+2)\n    idxs[1] = 1\n    idxs[#decs+1] = #ones\n    for\
    \ i = #decs, 1, -1 do\n        local j = ones[decs[i]]\n        decs[i] = j -\
    \ 1\n        idxs[j]:insert(i-2)\n    end\n    local res = {}\n    local i = 2\n\
    \    repeat\n        local m = #decs + 1\n        table.insert(res, decs[i]:abs())\n\
    \        for j = 1, m do\n            if idxs[j] < m then\n                decs[i]\
    \ = decs[i] - decs[idxs[j]]\n                idxs[j] += 1\n            end\n \
    \       end\n        i += 1\n    until #decs == i\n    table.sort(res)\n    local\
    \ last = terralib.newlist()\n    for i = 1, #res do\n        local j = res[i]\n\
    \        last = terralib.newlist(last)\n        table.insert(last, i - 1)\n  \
    \      table.insert(last, j)\n    end\n    return last\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjz4oe0mv.lua:55: syntax error near '+'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local tmp = arr\n  local\
    \ function compare(a,b)\n    return a > b and -1 or 1\n  end\n  table.sort(tmp,\
    \ compare)\n  return tmp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8cm6xxho.lua:13:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmp8cm6xxho.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp8cm6xxho.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr == 0 then return\
    \ arr end\n  if #arr == 1 then return arr end\n  local ones = count_ones(arr[1])\n\
    \  if ones == 1 then\n    local index = math.floor(arr[1] / 2)\n    local val\
    \ = arr[1] % 2\n    if val == 1 then\n      return [arr[index]] + sort_array(arr[index\
    \ + 1])\n    end\n  end\n  local count\n  if ones == 2 then\n    count = arr[1]\
    \ / 2\n  else\n    count = #arr\n  end\n  local result = {}\n  for i = 1, count,\
    \ 1 do\n    local index = math.floor(i / 2)\n    local val = i % 2\n    if val\
    \ == 1 then\n      result[i + 1] = arr[index + 1]\n    end\n  end\n  if ones ==\
    \ 2 then\n    result[count] = arr[count]\n  end\n  if #arr > 1 then\n    result[#arr\
    \ + 1] = sort_array(arr[#arr + 1])\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8fq1v5qw.lua:16: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local ones = array.fill(0,\
    \ (#arr))\n  local decs = array.fill(0, (#arr))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpav8znllj.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if arr == nil then return\
    \ nil end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptrq87o86.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr == 0 then return\
    \ arr\n  local max_len = math.max(arr)\n  local sorted = {}\n  for i = 1, #arr\
    \ do\n    local count = 1\n    for j = 1, #arr do\n      if arr[j] == arr[i] then\
    \ count = count + 1\n      end\n    end\n    local val = max_len - count\n   \
    \ table.insert(sorted, val)\n  end\n  table.sort(sorted)\n  return sorted\nend\n\
    </code>\nThe only tricky bit to understand is the last line of the sort_array\
    \ function. How it works is that we have to first find the length of the longest\
    \ consecutive sequence of elements in the array and use that length as the comparison\
    \ value for sorting.\n<|/ a dscore=1 tags=algorithm,sorting,arrays |>\n<| c |>\n\
    The Kata has a `sort` function defined in the `bit-array` library. It can use\
    \ that to implement the required algorithm.\n<|/ c |>\n<| a dscore=1 |>\nThis\
    \ can be done with a single pass through the array. Basically count the number\
    \ of set bits in each number, and put them in an array sorted by that count in\
    \ ascending order. Here is a Python code to do it:\n<code>\ndef sort(arr):\n \
    \   count = [0] * ((len(arr) + 1) / 2)\n    for i,x in enumerate(arr):\n     \
    \   count[x//2] = count[x//2] + 1\n    count.sort()\n    for i,x in enumerate(arr):\n\
    \        if count[x//2] > count[x]:\n            arr[i], arr[x] = arr[x], arr[i]\n\
    \    return arr\n</code>\n<|/ a tags=algorithm,sorting,arrays |>\n<| c |>\nThis\
    \ is not in ascending order\n<|/ c |>\n<| c |>\nThat's a good point. The OP's\
    \ description says \"ascending order\", so I assumed it was in the correct order.\n\
    <|/ c |>\n<| c |>\nJust a minor note for people who copy this code: this will\
    \ not work in Python 3. It will work in Python 2 by changing `count[x//2]` to\
    \ `count[x//2] // 2`, but in Python 3, this syntax will throw an exception.\n\
    <|/ c |>\n<| a |>\nA simple sorting algorithm might be: \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo5qwuknu.lua:10: 'end' expected (to close 'if' at line 9)\
    \ near 'local'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr == 0 then\n    return\
    \ arr\n  end\n  local result = {}\n  local index = {}\n  local map = {}\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7gd961bx.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local is_one = { }\n  \
    \  for _, v in pairs(arr) do\n        if is_one[v] then return arr end\n     \
    \   is_one[v] = true\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx_uck20p.lua:28: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr == 0 then\n    return\
    \ arr\n  end\n  local ones = count_ones(arr[1])\n  local decimals = -1\n  for\
    \ i=2,#arr do\n    local one_count = count_ones(arr[i])\n    if one_count == 1\
    \ then\n      decimals = decimals + 1\n      if decimals > ones or decimals ==\
    \ ones and arr[i] > 0 then\n        arr[i] = arr[i] / 10\n        arr[i + 1] =\
    \ arr[i + 1] - (arr[i] % 10)\n      else\n        arr[i] = arr[i] / 10\n     \
    \ end\n    else\n      if decimals > ones or decimals == ones and arr[i] > 0 then\n\
    \        arr[i] = arr[i] * 10\n        arr[i + 1] = arr[i + 1] - (arr[i] % 10)\n\
    \      else\n        arr[i] = arr[i] * 10\n      end\n    end\n  end\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptqyu58pr.lua:12:\
    \ attempt to call a nil value (global 'count_ones')\nstack traceback:\n\t/tmp/tmptqyu58pr.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmptqyu58pr.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if arr == nil then\n  \
    \      return nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfe571zgd.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Convert the given array\
    \ into bit-representation and store it into a table.\n  local bin = {}\n  for\
    \ i = 1, #arr do\n    local binn = bin.[ntoa(unpack(tostring(arr[i])))]\n    if\
    \ binn[#binn+1] then\n      table.insert(bin, binn)\n    end\n  end\n  -- Sort\
    \ the table\n  table.sort(bin, function(a, b)\n    -- Count number of 1's in each\
    \ binary representation\n    local n_a = #a\n    local n_b = #b\n    local n_ab\
    \ = #a * #b\n    local n_ab_2 = n_ab - n_a * n_b\n    local n_ab_3 = n_ab_2 *\
    \ n_a\n    local n_ab_4 = n_ab_3 * n_a\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxn3dlgs6.lua:12: <name> expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- TODO: Implement a sort\
    \ algorithm here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxff6s8v.lua:15:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpaxff6s8v.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local len = math.floor(math.log(math.max(arr)+1,\
    \ 2)+0.5)\n  local arr2 = {}\n  local i = 1\n  repeat\n    table.insert(arr2,\
    \ math.floor(i / 2))\n    i = math.floor(i / 2) + 1\n  until i <= math.max(arr)\n\
    \  table.sort(arr2, function(a, b) return arr[a] > arr[b] end)\n  return arr2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyn2858ej.lua:9:\
    \ attempt to perform arithmetic on a table value\nstack traceback:\n\t/tmp/tmpyn2858ej.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpyn2858ej.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr <= 0 then return\
    \ arr end\n  local last_one = arr[1]\n  if last_one == 1 then -- ascending order\n\
    \    arr[1] = #arr\n  elseif last_one == 0 then -- descending order\n    arr[#arr\
    \ + 1] = 1\n  end\n  local cnt = 0\n  local temp\n  local i = 0\n  -- find last\
    \ one\n  while i < #arr do\n    temp = arr[i]\n    if temp == last_one then\n\
    \      cnt = cnt + 1\n      if cnt == 2 then\n        arr[i] = nil\n        arr[#arr\
    \ + 1] = nil\n      else\n        arr[#arr + 1] = temp\n      end\n    else\n\
    \      cnt = 1\n      arr[i] = temp\n    end\n    i = i + 1\n  end\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghf00nkh.lua:42:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {5, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpghf00nkh.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local n = #arr\n  -- Find\
    \ number of ones in arr\n  local num_ones = math.floor(math.log(n, 2))\n  -- Resize\
    \ array to length of power of two of number of ones\n  local arr_size = 2 * num_ones\n\
    \  -- Initialize result array with arr_size\n  local result = {}\n  for i = 1,\
    \ arr_size do\n    result[i] = arr[i]\n  end\n  -- Sort base on num_ones\n  --\
    \ If there are equal number of ones, sort on decimal value\n  local pos = 1\n\
    \  for i = 1, num_ones + 1 do\n    -- Move array pointer\n    local tmp = result[pos]\n\
    \    pos = pos + 1\n    -- Find index of highest bit set to 1 in arr\n    local\
    \ i = 1\n    while i <= n do\n      -- If bit at index is not 1, continue\n  \
    \    if ((arr[i - 1] and 1) ~= 0) then\n        i = i + 1\n      else\n      \
    \  break\n      end\n    end\n    -- Swap with the highest bit set to 1 in arr\n\
    \    local j = i - 1\n    while j > 0 and ((arr[j] and 1) ~= 0) do\n      result[j]\
    \ = arr[j]\n      j = j - 1\n    end\n    -- Shift array left until we reach a\
    \ position where array is not all ones\n    while j > 1 do\n      local tmp =\
    \ result[j]\n      result[j] = result[j - 1]\n      result[j - 1] = tmp\n    \
    \  j = j - 1\n    end\n  end\n  -- Return array reult from highest to lowest value\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9s2b4r7.lua:57:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpj9s2b4r7.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- initialize result array\n\
    \  local results = {}\n  -- go through each element of the array, adding it to\
    \ result array\n  for i, elem in ipairs(arr) do\n    table.insert(results, elem)\n\
    \  end\n  -- sort result array according number of ones\n  for i = #results +\
    \ 1, -1, -1 do\n    if results[i] then\n      for j = #results + 1, i, -1 do\n\
    \        if results[j] then\n          -- swap elements\n          local tmp =\
    \ results[j]\n          results[j] = results[i]\n          results[i] = tmp\n\
    \        end\n      end\n    end\n  end\n  -- return the result array\n  return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm08k6_gk.lua:35:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {4, 3, 2, 5, 1}\nstack traceback:\n\t/tmp/tmpm08k6_gk.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local i, n = 0, #arr\n  while\
    \ i < n do\n    local count = count_bits(arr[i])\n    if count > 0 then\n    \
    \  table.insert(arr, arr[i])\n      i = i + 1\n    else\n      count = -count\n\
    \      table.insert(arr, arr[i])\n      i = i + 1\n      count = -count\n    \
    \  table.insert(arr, arr[i])\n      i = i + 1\n    end\n  end\n  table.sort(arr)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpofzs64ow.lua:11:\
    \ attempt to call a nil value (global 'count_bits')\nstack traceback:\n\t/tmp/tmpofzs64ow.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpofzs64ow.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local bins = #arr\n  -- sort\
    \ first by number of ones\n  local function get_count(val)\n    local count =\
    \ 0\n    while val ~= 0 do\n      val = val >> 1\n      count = count + 1\n  \
    \  end\n    return count\n  end\n  local sorted_arr = {}\n  -- iterate over array\
    \ from right to left, binary search with binary search\n  -- complexity is O(log\
    \ n)\n  for i = #arr, 1, -1 do\n    -- find the number of bits set in the i'th\
    \ element of arr\n    local count = 0\n    for j = 0, i do\n      if arr[j] ==\
    \ 1 then count = count + 1 else count = count - 1\n    end\n    local pos = math.floor((bins\
    \ - 1 - count + i) / 2)\n    -- get the i'th element of the sorted array\n   \
    \ table.insert(sorted_arr, arr[pos])\n    -- shift left i places\n    for j =\
    \ i - 1, math.max(i - 1, 0), -1 do\n      -- if bit of i'th element is 1, then\
    \ increment j'th bit of arr[j]\n      if arr[math.max(i - 1, 0)] ~= 0 then arr[math.max(i\
    \ - 1, 0)] = arr[math.max(i - 1, 0)] >> 1\n      -- else decrement j'th bit of\
    \ arr[j]\n      elseif arr[j] ~= 1 then\n        arr[j] = (arr[j] << 1) - (1 <<\
    \ j)\n      -- else do nothing\n      end\n    end\n  end\n  return sorted_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt9yhzdtv.lua:58: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- If array has exactly one\
    \ non-zero integer, sort by that number\n  if #arr == 0 then\n    return arr\n\
    \  end\n  if #arr == 1 then\n    local x = arr[1]\n    if x ~= 0 then\n      return\
    \ x\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwj8_j1bs.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort the input array according\
    \ to number of ones in its binary representation in ascending order.\n  -- For\
    \ similar number of ones, sort based on decimal value.\n  -- It must be implemented\
    \ like this:\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  if #arr == 0 then return arr\n  if #arr == 1\
    \ then return arr\n  if #arr == 2 then\n    local ones_count = count_ones(arr[1])\n\
    \    local decimal_value = decimal_of_number(ones_count)\n    if ones_count <\
    \ 32 then decimal_value = math.floor(decimal_value) end\n    if decimal_value\
    \ == 0 then\n      return arr\n    else\n      local decimal_digits = math.ceil(math.log(decimal_value,\
    \ 2))\n      local decimal_fraction = decimal_value / math.pow(10, decimal_digits)\n\
    \      local decimal_decimal_digits = math.floor(math.log(decimal_fraction, 2))\n\
    \      local decimal_remainder = decimal_fraction - math.pow(10, decimal_decimal_digits)\n\
    \      return array_concat(sort_array(array(math.floor, arr[1])), decimal_decimal_digits)\n\
    \    end\n  end\n  local first_binary_digit = binary_of_number(arr[1])\n  local\
    \ decimal_value = 1\n  local decimal_digits = 0\n  local decimal_decimal_digits\
    \ = 0\n  local decimal_remainder = 0\n  local num_ones = 0\n  for i = 2, #arr\
    \ do\n    local this_binary_digit = binary_of_number(arr[i])\n    if this_binary_digit\
    \ ~= first_binary_digit then\n      local tmp_val = decimal_value\n      decimal_digits\
    \ = decimal_digits + 1\n      decimal_decimal_digits = decimal_decimal_digits\
    \ + 1\n      decimal_remainder = decimal_remainder + this_binary_digit\n     \
    \ num_ones = num_ones + 1\n    end\n    decimal_value = decimal_value + this_binary_digit\
    \ * this_binary_digit -- decimal value for current number\n  end\n  decimal_fraction\
    \ = decimal_value / num_ones\n  -- decimal_decimal_digits is the digits in the\
    \ decimal part\n  -- decimal_remainder is the digits after the decimal part\n\
    \  -- e.g.\n  --   decimal fraction = 5\n  --   decimal decimal_digits = 2\n \
    \ --   decimal remainder = 7\n  -- >>> decimal_fraction == 5\n  -- >>> decimal_decimal_digits\
    \ == 2\n  -- >>> decimal_remainder == 7\n  -- >>> math.floor(decimal_fraction)\
    \ == 5\n  -- >>> math.floor(decimal_decimal_digits) == 5\n  -- >>> math.floor(decimal_remainder)\
    \ == 7\n  -- >>> math.floor(decimal_fraction + decimal_decimal_digits) == 5\n\
    \  -- >>> math.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppodlmo58.lua:16: 'end' expected (to close 'if' at line 15)\
    \ near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The base case:\n  if #arr\
    \ == 1 then\n    return arr\n  end\n  -- Handle edge case: reverse the array\n\
    \  if arr[1] == 1 then\n    return arr .. reverse_array(arr[2])\n  end\n  -- Handle\
    \ edge case: reverse the array in place\n  if arr[1] == 0 then\n    arr[1] = reverse_array(arr[2])[1]\n\
    \    return arr\n  end\n  -- Handle cases with two ones: sort based on decimal\
    \ value.\n  -- For example, sort_array([1, 0, 2, 3, 4]) should return [0, 1, 2,\
    \ 3, 4].\n  -- For similar number of ones, sort based on binary value.\n  local\
    \ num_ones = arr[1] -- number of ones in binary representation of arr\n  if num_ones\
    \ == 1 then\n    return arr .. sort_array(arr[2])\n  end\n  -- Handle cases with\
    \ two zeros: sort based on decimal value.\n  -- For example, sort_array([1, 0,\
    \ 2, 3, 4]) should return [1, 2, 3, 4].\n  -- For similar number of zeros, sort\
    \ based on binary value.\n  local num_zeros = arr[2] -- number of zeros in binary\
    \ representation of arr\n  if num_zeros == 0 then\n    return arr .. reverse_array(sort_array(arr[3]))\n\
    \  end\n  -- Handle cases with two ones and two zeros: sort based on decimal value.\n\
    \  -- For example, sort_array([1, 0, 2, 3, 4, 0]) should return [0, 1, 2, 3, 4].\n\
    \  -- For similar number of ones and zeros, sort based on binary value.\n  if\
    \ num_ones + num_zeros == 2 then\n    return arr .. sort_array(arr[3]) .. sort_array(arr[4])\n\
    \  end\n  -- The unhandled case: sort based on the decimal value.\n  -- For example:\
    \ sort_array([1, 0, 2, 3, 4]) should return [4, 0, 1, 2, 3].\n  -- For similar\
    \ number of ones and zeros, sort based on binary value.\n  return arr .. reverse_array(sort_array(arr[3]))\
    \ .. sort_array(arr[4])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxnxldou4.lua:15:\
    \ attempt to call a nil value (global 'reverse_array')\nstack traceback:\n\t/tmp/tmpxnxldou4.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpxnxldou4.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function cmp(a,b)\n\
    \    if a ~= b then\n      if a>b then\n        return 1\n      else\n       \
    \ return -1\n      end\n    end\n    return 0\n  end\n  table.sort(arr, cmp)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy0a05suk.lua:19:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmpy0a05suk.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpy0a05suk.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if arr == nil then return\
    \ nil end\n    local counts = {}\n    for idx, x in pairs(arr) do table.insert(counts,\
    \ {idx, 1}) end\n    table.sort(counts, function(a, b) return a.value == b.value\
    \ end)\n    local i = 0\n    local j = 1\n    local t = {}\n    repeat\n     \
    \   table.insert(t, counts[i].idx)\n        i = i + 1\n    until i > j\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx2x6l776.lua:12:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmpx2x6l776.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpx2x6l776.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Only positive integer\
    \ allowed.\n  assert(type(arr) == \"table\")\n  -- Sort integer and binary representation.\n\
    \  -- >>> sort_array([5, 2, 3, 4, 1])\n  --  [1, 5, 2, 3, 4]\n  -- >>> sort_array([5,\
    \ 2, 2, 3, 1])\n  --  [1, 5, 2, 3, 4]\n  -- >>> sort_array([-5, -2, -3, -4, -1])\n\
    \  --  [-5, -4, -3, -2, -1]\n  -- >>> sort_array([1, 0, 2, 3, 4])\n  --  [1, 2,\
    \ 3, 4, 0]\n  -- >>> sort_array([4, 0, 2, 3, 1])\n  --  [1, 2, 3, 4, 0]\n  --\
    \ >>> sort_array([-4, -2, -1, -3, -4])\n  --  [-4, -3, -2, -1, -4]\n  -- >>> sort_array([1,\
    \ -5, -2, -3, -4])\n  --  [-4, -3, -2, -1, -5]\n  -- >>> sort_array([-5, -4, -2,\
    \ -1, 1])\n  --  [-4, -3, -2, -1, 1]\n  -- >>> sort_array([-5, -4, -2, -1, 4])\n\
    \  --  [-4, -3, -2, -1, 4]\n  -- >>> sort_array([4, 6, 2, 1, 3])\n  --  [1, 2,\
    \ 3, 4, 6]\n  -- >>> sort_array([1, 3, 6, 4, 2])\n  --  [1, 2, 3, 4, 6]\n  --\
    \ >>> sort_array([2, 4, 6, 1, 3])\n  --  [1, 2, 3, 4, 6]\n  -- >>> sort_array([2,\
    \ 4, 6, 1, 5])\n  --  [1, 2, 3, 4, 6]\n  -- >>> sort_array([3, 6, 4, 2, 1])\n\
    \  --  [1, 2, 3, 4, 6]\n  -- >>> sort_array([-4, -3, -2, -1, 1])\n  --  [-4, -3,\
    \ -2, -1, 1]\n  -- >>> sort_array([-1, -5, -4, -3, -2])\n  --  [-4, -3, -2, -1,\
    \ -5]\n  -- >>> sort_array([-1, -5, -4, -3, 2])\n  --  [-4, -3, -2, -1, -5]\n\
    \  -- >>> sort_array([-4, -3, -2, -1, 1])\n  --  [-4, -3, -2, -1, 1]\n  -- >>>\
    \ sort_array([-5, -4, -2, -1, 4])\n  --  [-4, -3, -2, -1, 4]\n  -- >>> sort_array([-5,\
    \ -4, -2, -1, 1])\n  --  [-4, -3, -2, -1, 1]\n  -- >>> sort_array([-1, -4, -3,\
    \ -2, -5])\n  --  [-4, -3, -2, -1, -5]\n  -- >>> sort_array([-1, -4, -3, -2, 5])\n\
    \  --  [-4, -3, -2, -1, 5]\n  -- >>> sort_array([-1, -4, -3, -2, 1])\n  --  [-4,\
    \ -3, -2, -1, 1]\n  -- >>> sort_array([-4, -3, -2, -1, 5])\n  --  [-4, -3, -2,\
    \ -1, 5]\n  -- >>> sort_array([-4, -3, -2, \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeq1cvsjg.lua:75: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n   -- Return sorted version\
    \ of array (if it was already sorted)\n   -- If array is not sorted return it\
    \ as is. This will be faster than sort function.\n   if arr[1] ~= 0 then\n   \
    \   return arr\n   else\n      return arr\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0c033ti.lua:21:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpx0c033ti.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local bins = binary_to_decimal(arr)\n\
    \  local decimals = sort_bins(bins)\n  local decimals_sorted = decimals[#decimals]\n\
    \  if #decimals == 0 then\n    return arr\n  else\n    return decimal_to_binary(decimals_sorted)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqkg2cv13.lua:9:\
    \ attempt to call a nil value (global 'binary_to_decimal')\nstack traceback:\n\
    \t/tmp/tmpqkg2cv13.lua:9: in local 'candidate'\n\t/tmp/tmpqkg2cv13.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr <= 1 then return\
    \ arr end\n  local counts = {}\n  local tmp = {}\n  for i = 1, #arr do\n    if\
    \ counts[tostring(arr[i])] == nil then\n      counts[tostring(arr[i])] = 1\n \
    \   else\n      counts[tostring(arr[i])] = counts[tostring(arr[i])] + 1\n    end\n\
    \  end\n  for i = 1, #counts do\n    tmp[counts[i]] = i\n  end\n  table.sort(tmp,\
    \ function(a, b) return a[b] <=> b[a] end)\n  local results = {}\n  for i = 1,\
    \ #arr do\n    table.insert(results, tmp[tostring(arr[i])])\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpopavtw2m.lua:22: unexpected symbol near '>'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if #arr == 1 then\n   \
    \     return arr\n    end\n    local ones = [1]\n    for i = 1, #arr do\n    \
    \    ones[#ones + 1] = arr[i]\n    end\n    table.sort(ones, compare)\n    local\
    \ results = {}\n    for i = 1, #ones, 2 do\n        results[#results + 1] = tonumber(tostring(ones[i]):sub(1,\
    \ -1))\n    end\n    table.sort(results, compare)\n    return unpack(results)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjor_jknq.lua:12: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local function compare(x,\
    \ y)\n        if x > y then\n            return 1\n        end\n        if x <\
    \ y then\n            return -1\n        end\n        return 0\n    end\n    \n\
    \    table.sort(arr, compare)\n    for i = 1, #arr do\n        arr[i] = arr[i]\
    \ / 2\n    end\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7eer3rsh.lua:19:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmp7eer3rsh.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp7eer3rsh.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  assert(type(arr) == \"table\"\
    )\n  -- Initialize result table and use it to find binary representation of ones\n\
    \  local result = {}\n  for i = 1, #arr do\n    local count = 0\n    for j = 1,\
    \ 8 do\n      count = count + (arr[i]&(1<<j))\n    end\n    table.insert(result,\
    \ count)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt_q_m6lw.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local map = {}\n  local new_arr\
    \ = {}\n  local index = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaq8te2v9.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local num_ones = 0\n  for\
    \ i = 1, #arr do\n    if arr[i] == 1 then\n      num_ones = num_ones + 1\n   \
    \ end\n  end\n  if num_ones > 0 then\n    local power = 1\n    local sort_array\
    \ = { }\n    for i = 1, #arr do\n      -- if there are at least two ones, divide\
    \ the array and sort each half\n      -- recursively\n      if arr[i] == 1 and\
    \ num_ones ~= 0 then\n        local new_arr = { }\n        table.insert(new_arr,\
    \ arr[i])\n        table.insert(new_arr, arr[i] * power)\n        sort_array =\
    \ table.concat(sort_array, new_arr, 2)\n        table.insert(sort_array, arr[i]\
    \ * power)\n      -- if there are only one ones, just sort this one time\n   \
    \   elseif arr[i] == 1 then\n        table.insert(sort_array, arr[i])\n      --\
    \ if there are zero ones, just ignore this number\n      else\n        table.insert(sort_array,\
    \ arr[i])\n      end\n      power = power + 1\n    end\n    return sort_array\n\
    \  -- there are zero ones\n  else\n    return arr\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkh202r9z.lua:25:\
    \ bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\
    \t/tmp/tmpkh202r9z.lua:25: in local 'candidate'\n\t/tmp/tmpkh202r9z.lua:46: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local count = { [1] = 0\
    \ }\n    for i = 1, #arr do\n        local n = 0\n        for j = 1, #arr do\n\
    \            if arr[j] and arr[i] then\n                n = n + 1\n          \
    \  end\n        end\n        if count[n] == nil then\n            count[n] = 1\n\
    \        else\n            count[n] = count[n] + 1\n        end\n    end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjqft4r4i.lua:37: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if arr == nil then return\
    \ nil end\n  local cnt = 0\n  local dec = 0\n  local tmp\n  -- Sort in ascending\
    \ order and count binary ones\n  for idx = 1, #arr do\n    local bin = bit.lshift(arr[#arr\
    \ - idx], 32)\n    cnt = cnt + bin\n    local dec = 0\n    while bin > 0 do\n\
    \      bin = bit.rshift(bin, 2)\n      dec = dec + math.pow(10, math.floor(math.log(cnt,\
    \ 2) + 1))\n    end\n    local tmp_arr = {}\n    for idx = 1, #tmp do\n      if\
    \ tmp[idx] == 0 then\n        tmp_arr[#tmp_arr + 1] = arr[#tmp + 1]\n        tmp[#tmp\
    \ + 1] = nil\n      else\n        tmp_arr[#tmp_arr + 1] = arr[#tmp + 1]\n    \
    \    tmp[#tmp + 1] = arr[#tmp + idx]\n      end\n    end\n    tmp = tmp_arr\n\
    \  end\n  -- Now sort the array in descending order and count decimal ones\n \
    \ for idx = 1, #tmp do\n    local bin = bit.lshift(tmp[#tmp - idx], 32)\n    local\
    \ dec = 0\n    while bin > 0 do\n      bin = bit.rshift(bin, 2)\n      dec = dec\
    \ + math.pow(10, math.floor(math.log(cnt, 2) + 1))\n    end\n    local tmp_arr\
    \ = {}\n    for idx = 1, #arr do\n      if arr[idx] == 0 then\n        tmp_arr[#tmp_arr\
    \ + 1] = arr[#arr + 1]\n        arr[#arr + 1] = nil\n      else\n        tmp_arr[#tmp_arr\
    \ + 1] = arr[#arr + 1]\n        arr[#arr + 1] = arr[#arr + idx]\n      end\n \
    \   end\n    arr = tmp_arr\n  end\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvmytrpk.lua:15:\
    \ attempt to index a nil value (global 'bit')\nstack traceback:\n\t/tmp/tmphvmytrpk.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmphvmytrpk.lua:60: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if #arr == 0 then\n   \
    \     return arr\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8x0xklar.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local ones = {}\n  local\
    \ zeros = {}\n  local results = {}\n  local length = 0\n  for i = 1, #arr do\n\
    \    local n = tonumber(arr[i])\n    if n then\n      if n > 0 then\n        zeros[length\
    \ + 1] = arr[i]\n      elseif n < 0 then\n        ones[length + 1] = arr[i]\n\
    \      else\n        results[length + 1] = arr[i]\n      end\n      length = length\
    \ + 1\n    elseif arr[i] ~= nil then\n      results[length + 1] = arr[i]\n   \
    \ end\n  end\n  for i = 1, #zeros do\n    table.insert(results, zeros[i])\n  end\n\
    \  for i = 1, #ones do\n    table.insert(results, ones[i])\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzx5dptx.lua:40:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpnzx5dptx.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local num_ones = unpack(arr:map(function(x)\
    \ return bit.band(x, 1) end))\n    local decimal = unpack(arr:map(function(x)\
    \ return x:floor() end))\n    return decimal:reverse():sort(function(a, b) return\
    \ num_ones[a] - num_ones[b] end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppfzr2wud.lua:9:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmppfzr2wud.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmppfzr2wud.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Initialize result\n  local\
    \ res\n  -- Iterate over the array\n  for i, v in ipairs(arr) do\n    -- Initialize\
    \ count\n    local count = 0\n    -- Iterate over bits\n    for bits in string.gmatch(rep(\"\
    %b\", v), \"%d+\") do\n      -- Add one to count\n      count = count + 1\n  \
    \    -- If the count is 2^i, then add i to result\n      if count == 2^i then\n\
    \        res = res + i\n      -- If the count is less than or equal to 2^i, then\
    \ add 2^i to result\n      elseif count < 2^i then\n        res = res + 2^i\n\
    \      -- If the count is more than 2^i, then add 2^(i-1) to result\n      else\n\
    \        res = res + 2^(i-1)\n      end\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn2pmauao.lua:16:\
    \ attempt to call a nil value (global 'rep')\nstack traceback:\n\t/tmp/tmpn2pmauao.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpn2pmauao.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr == 0 then\n    return\
    \ arr\n  end\n  local ones = math.floor((#arr + 1) / 2)\n  local sortkey = func(arr[ones],\
    \ arr[1]) + 1\n  arr[ones] = arr[ones] - (ones - 1) * sortkey\n  local startkey\
    \ = func(arr[1], arr[1]) + 1\n  local result = {arr[#arr]}\n  for i = 1, #arr\
    \ - 1 do\n    local curkey = func(arr[i], arr[i + 1])\n    local curstart = startkey\
    \ + curkey - 1\n    if arr[i - 1] == 0 and curstart > sortkey then\n      table.insert(result,\
    \ arr[i])\n    end\n    startkey = curstart\n    table.insert(result, arr[i +\
    \ 1])\n  end\n  table.insert(result, arr[#arr])\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjfiqovg4.lua:13:\
    \ attempt to call a nil value (global 'func')\nstack traceback:\n\t/tmp/tmpjfiqovg4.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpjfiqovg4.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- First transform binary\
    \ representation to decimal by multiplying each number\n  -- by 2.\n  local decimal_arr\
    \ = {}\n  for i = 1, #arr do\n    local binary_rep = arr:sub(i, i):ljust(4, '0')\n\
    \    local decimal_rep = tonumber(binary_rep) * 2 ^ #binary_rep\n    table.insert(decimal_arr,\
    \ decimal_rep)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9_j_wn34.lua:31: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n\tlocal function is_power_of_2(val)\n\
    \t\tif val < 0 then\n\t\t\treturn false\n\t\tend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp20up4up6.lua:27: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Write your sorting code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp107bmpow.lua:15:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmp107bmpow.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local n = 0\n  local sorted_array\
    \ = {}\n  for i = 1, #arr do\n    local val = arr[i]\n    local is_one = false\n\
    \    if val == 1 then is_one = true end\n    for j = i + 1, #arr do\n      if\
    \ arr[j] == 1 then\n        n = n + 1\n        if n > 1 then\n          -- arr[j]\
    \ > arr[i] and arr[j] - arr[i] > 0\n          -- arr[j] is greater than or equal\
    \ to arr[i] and arr[j] - arr[i] is negative or zero.\n          -- So arr[i] should\
    \ be appended before arr[j].\n          sorted_array[i] = sorted_array[i]\n  \
    \        sorted_array[j] = val\n          break\n        end\n      end\n    end\n\
    \    if not is_one and n > 1 then\n      sorted_array[i] = val\n    end\n  end\n\
    \  return sorted_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7x26pzns.lua:38:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp7x26pzns.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local bin, dec = '', 0\n\
    \  local last, temp\n  for i = 1, #arr do\n    if math.mod(i, 2) == 0 then\n \
    \     bin = bin..(arr[i] and 1 or '0')\n    else\n      dec = dec+1\n      temp\
    \ = math.pow(10, dec)\n      dec = dec-1\n      last = math.floor(temp * math.abs(arr[i])\
    \ + 0.5)\n    end\n  end\n  temp = math.pow(10, dec)\n  dec = dec-1\n  last =\
    \ math.floor(temp * math.abs(arr[#arr]) + 0.5)\n  -- sort\n  table.sort(arr)\n\
    \  -- add back extra digits\n  for i = #arr, 0, -1 do\n    if arr[i] ~= 0 then\n\
    \      temp = math.floor(temp + 0.5)\n      table.insert(arr, math.abs(last -\
    \ arr[i]))\n      last = temp\n    end\n  end\n  return bin, dec\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1c7t_8va.lua:12:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmp1c7t_8va.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp1c7t_8va.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local result = {}\n  local\
    \ max_count = 0\n  local max_count = 0\n  for _, v in pairs(arr) do\n    local\
    \ count = 0\n    while v ~= 0 do\n      v = v >> 1\n      count = count + 1\n\
    \    end\n    if count > max_count then\n      max_count = count\n    end\n  end\n\
    \  -- binary sort with max_count\n  for i, v in pairs(arr) do\n    if v == 0 then\n\
    \      break\n    end\n    local count = 0\n    while v ~= 0 do\n      v = v >>\
    \ 1\n      count = count + 1\n    end\n    local temp = arr[i]\n    arr[i] = arr[v]\n\
    \    arr[v] = temp\n  end\n  -- decimal sort\n  for i = 1, #arr do\n    local\
    \ count = 0\n    for j = 1, #arr do\n      if arr[j] == 0 then\n        break\n\
    \      end\n      local m = math.abs(arr[j]) - math.abs(arr[j] % 2)\n      arr[j]\
    \ = arr[j] % 2 + m / 2\n      count = count + 1\n    end\n    local temp = arr[i]\n\
    \    arr[i] = arr[v]\n    arr[v] = temp\n  end\n  -- sort using max_count\n  for\
    \ i = 1, #arr do\n    if arr[i] == 0 then\n      break\n    end\n    local count\
    \ = 0\n    for j = 1, #arr do\n      if arr[j] == 0 then\n        break\n    \
    \  end\n      local m = math.abs(arr[j]) - math.abs(arr[j] % 2)\n      arr[j]\
    \ = arr[j] % 2 + m / 2\n      count = count + 1\n    end\n    local temp = arr[i]\n\
    \    arr[i] = arr[v]\n    arr[v] = temp\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj_h1goiq.lua:43:\
    \ bad argument #1 to 'abs' (number expected, got nil)\nstack traceback:\n\t/tmp/tmpj_h1goiq.lua:43:\
    \ in local 'candidate'\n\t/tmp/tmpj_h1goiq.lua:75: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Initialize an array with\
    \ binary representation.\n  -- Note that in Lua, bitwise operators yield a different\
    \ result\n  -- for numbers that are not integers.\n  local function int2bin(num)\n\
    \    local result = ''\n    while num > 0 do\n      result = string.format('%s%d',\
    \ result, math.floor(math.log2(num)))\n      num = math.floor(num / 2)\n    end\n\
    \    return result\n  end\n  -- Initialize an array with decimal values.\n  local\
    \ function dec2bin(num)\n    local result = ''\n    while num > 0 do\n      result\
    \ = string.format('%s%d', result, math.floor(math.log2(num)))\n      num = math.floor(num\
    \ / 2)\n    end\n    result = string.reverse(result)\n    return result\n  end\n\
    \  -- Initialize the comparison function.\n  local compare = function(x1,x2)\n\
    \    if x1 == x2 then return 0 end\n    local xbin = int2bin(x1)\n    local ybin\
    \ = int2bin(x2)\n    local xdec = 0\n    for i = 1, #xbin do\n      xdec = xdec\
    \ + xbin:sub(i,i)\n    end\n    local ydec = 0\n    for i = 1, #ybin do\n    \
    \  ydec = ydec + ybin:sub(i,i)\n    end\n    return xdec - ydec\n  end\n  -- Sort\
    \ the array based on the comparison function.\n  return table.sort(arr, compare)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_lmobwj9.lua:15:\
    \ attempt to call a nil value (field 'log2')\nstack traceback:\n\t/tmp/tmp_lmobwj9.lua:15:\
    \ in upvalue 'int2bin'\n\t/tmp/tmp_lmobwj9.lua:33: in function </tmp/tmp_lmobwj9.lua:31>\n\
    \t[C]: in function 'table.sort'\n\t/tmp/tmp_lmobwj9.lua:46: in local 'candidate'\n\
    \t/tmp/tmp_lmobwj9.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr <= 1 then\n    return\
    \ arr\n  else\n    local sorted_arr = {}\n    local onesCount = 0\n    for i=1,\
    \ #arr do\n      if arr[i] > 0 then\n        sorted_arr[#sorted_arr + 1] = arr[i]\n\
    \        onesCount = onesCount + 1\n      else\n        local dec = 0\n      \
    \  if arr[i] ~= 0 then\n          dec = arr[i]\n        end\n        local j =\
    \ 0\n        while j <= #sorted_arr do\n          local k = j + 1\n          while\
    \ k <= #sorted_arr do\n            if sorted_arr[k] >= dec then\n            \
    \  break\n            else\n              k = k + 1\n            end\n       \
    \   end\n          sorted_arr[j] = sorted_arr[k]\n          j = j + 1\n      \
    \  end\n        local lastIndex = #sorted_arr\n        sorted_arr[lastIndex] =\
    \ dec\n      end\n    end\n    if onesCount <= 1 then\n      return sorted_arr\n\
    \    else\n      local temp_array = {}\n      local index = 1\n      local j =\
    \ 1\n      while j <= #sorted_arr do\n        local count = sorted_arr[j]\n  \
    \      local newIndex = index\n        while count > sorted_arr[newIndex] do\n\
    \          newIndex = newIndex + 1\n        end\n        temp_array[index] = sorted_arr[j]\n\
    \        sorted_arr[j] = newIndex\n        index = newIndex + 1\n        j = j\
    \ + 1\n      end\n      local last_index = index\n      while last_index > 1 do\n\
    \        local temp_val = sorted_arr[last_index]\n        sorted_arr[last_index]\
    \ = sorted_arr[last_index - 1]\n        sorted_arr[last_index - 1] = temp_val\n\
    \        last_index = last_index - 1\n      end\n      return sorted_arr\n   \
    \ end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo32d1enn.lua:72:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {2=1, 3=2, 4=3, 5=4, 6=5}\nstack traceback:\n\
    \t/tmp/tmpo32d1enn.lua:72: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local count = 0\n  local\
    \ res = {}\n  for v in arr do\n    count = count + v\n    table.insert(res, v)\n\
    \  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4g8r3vdf.lua:11:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmp4g8r3vdf.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp4g8r3vdf.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local a = {}\n  local len\
    \ = #arr\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm9ubdn46.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local function binary_rep(n)\n\
    \        -- n is positive integer.\n        -- return binary representation of\
    \ n\n        local r = 0\n        while n ~= 0 do\n            r = r * 2 + n %\
    \ 2\n            n = n / 2\n        end\n        return r\n    end\n    local\
    \ function sort_func(lhs, rhs)\n        -- This function should implement sort_array\
    \ function.\n        -- We sort from largest to smallest number of ones in binary\
    \ representation.\n        -- For similar number of ones, sort based on decimal\
    \ value.\n        -- It must be implemented like this:\n        --     return\
    \ lhs < rhs or (lhs == rhs and binary_rep(lhs) < binary_rep(rhs))\n        local\
    \ bin_lhs = binary_rep(lhs)\n        local bin_rhs = binary_rep(rhs)\n       \
    \ if bin_lhs ~= bin_rhs then\n            return bin_lhs < bin_rhs\n        end\n\
    \        return lhs < rhs or lhs == rhs\n    end\n    return table.sort(arr, sort_func)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8xgblq7j.lua:38:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmp8xgblq7j.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local function sort_array_helper(arr)\n\
    \        -- if there are only one digit, sort based on it\n        local num1\
    \ = tonumber(arr.sub(1, 1))\n        local num2 = tonumber(arr.sub(2, 2))\n  \
    \      if num1 and num2 then\n            if num1 > num2 then\n              \
    \  arr[1] = num2\n                arr[2] = num1\n            elseif num1 < num2\
    \ then\n                arr[1] = num1\n                arr[2] = num2\n       \
    \     end\n        elseif num1 then\n            arr[1] = num1\n            arr[2]\
    \ = 0\n        elseif num2 then\n            arr[1] = 0\n            arr[2] =\
    \ num2\n        end\n        return arr\n    end\n    arr = sort_array_helper(arr)\n\
    \    local n = #arr\n    local m = math.pow(2, n)\n    local results = {}\n  \
    \  local max_i = math.pow(2, n - 1)\n    for i = 1, m do\n        local val =\
    \ 0\n        for j = 1, n do\n            val = val + arr[j] % 2\n           \
    \ arr[j] = arr[j] / 2\n        end\n        results[i] = val\n    end\n    for\
    \ i = 2, max_i do\n        results[max_i] = results[i] + results[max_i - 1]\n\
    \    end\n    for i = 1, max_i do\n        if results[i] >= m then\n         \
    \   results[i] = results[i] - m\n        end\n    end\n    return results\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ukumc0u.lua:11:\
    \ attempt to call a nil value (field 'sub')\nstack traceback:\n\t/tmp/tmp9ukumc0u.lua:11:\
    \ in local 'sort_array_helper'\n\t/tmp/tmp9ukumc0u.lua:30: in local 'candidate'\n\
    \t/tmp/tmp9ukumc0u.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- return it if no changes\
    \ are needed\n  if arr == nil then return nil end\n  -- use binary search to find\
    \ the position of biggest number of ones\n  local biggest_idx = binary_search(\n\
    \    function(idx) return arr[#arr] end,\n    function(idx) return 1 end,\n  \
    \  function(idx) return #arr end,\n    function(idx) return idx end)\n  -- if\
    \ no such element exists\n  if biggest_idx == nil then return arr end\n  -- find\
    \ the first occurrence of the biggest number of ones\n  local smaller_idx = biggest_idx\n\
    \  while smaller_idx > 0 do\n    -- if there are no more ones in the current array\n\
    \    if not arr[smaller_idx] then\n      -- return it\n      return arr\n    end\n\
    \    -- else if there are more ones in the current array and we reached the end\
    \ of\n    -- that array (arr[smaller_idx] is not nil), then return the array\n\
    \    if arr[smaller_idx] ~= 1 then\n      return arr\n    end\n    -- else if\
    \ there are more ones in the current array and we haven't reached the\n    --\
    \ end of the array\n    smaller_idx = smaller_idx - 1\n  end\n  -- if there are\
    \ more ones in the current array\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi8_czox7.lua:12:\
    \ attempt to call a nil value (global 'binary_search')\nstack traceback:\n\t/tmp/tmpi8_czox7.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpi8_czox7.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local _arr = arr\n  local\
    \ _res\n  local _zero = 0\n  local _one = 1\n  local _zeros = []\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_t493k8o.lua:13: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- If there are no ones in\
    \ arr then return array itself as it is sorted.\n  if #arr == 0 then\n    return\
    \ arr\n  end\n  -- Make arr in binary representation.\n  local bin_arr = #arr\n\
    \  for i = 1, bin_arr do\n    arr[i] = tostring(arr[i])\n  end\n  -- Count the\
    \ number of ones in arr in descending order and store in count\n  local count\
    \ = #arr\n  for i = bin_arr - 1, 1, -1 do\n    count = count - tonumber(arr[i])\n\
    \  end\n  -- Return the array sorted based on count.\n  local function compare(a,\
    \ b)\n    if a < b then\n      return -1\n    elseif b < a then\n      return\
    \ 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, 1, compare)\n\
    \  for i = bin_arr, 2, -1 do\n    arr[i] = tonumber(arr[i])\n  end\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpalz8azc8.lua:33:\
    \ bad argument #2 to 'sort' (function expected, got number)\nstack traceback:\n\
    \t/tmp/tmpalz8azc8.lua:33: in local 'candidate'\n\t/tmp/tmpalz8azc8.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if #arr == 0 then return\
    \ nil end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv5orxaa7.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local counts = {}\n   \
    \ for i, v in ipairs(arr) do\n        counts[#counts + 1] = v\n    end\n    counts\
    \ = counts:map(function(x)\n        if x > 1 then return x end\n    end):sort(function(a,\
    \ b)\n        return a - b\n    end)\n    for i, v in ipairs(arr) do\n       \
    \ if v == 0 then\n            arr[i] = counts[i]\n        end\n    end\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpasqvlpuh.lua:13:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpasqvlpuh.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpasqvlpuh.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr == 0 then\n    return\
    \ arr\n  end\n  local count = count_ones(arr)\n  assert(#count == #arr, 'Array\
    \ size mismatch')\n  local sorted = {}\n  for i = 1, #arr do\n    local num =\
    \ arr[i]\n    local pos = sorted.length - 1\n    while pos > 0 and arr[pos] >\
    \ num do\n      sorted[pos + 1] = arr[pos]\n      pos = pos - 1\n    end\n   \
    \ sorted[pos] = num\n  end\n  return sorted\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyefvhs2z.lua:12:\
    \ attempt to call a nil value (global 'count_ones')\nstack traceback:\n\t/tmp/tmpyefvhs2z.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpyefvhs2z.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- sort based on number of\
    \ ones in binary representation in ascending order\n  -- binary representation\
    \ of each integer is represented using '0's and '1's characters\n  -- thus each\
    \ integer is composed of 2 characters\n  -- eg. 10 binary is '10', 2 binary is\
    \ '10'\n  -- we can use this function to determine which binary representation\
    \ has most 1's\n  local function count(x)\n    local bin = x:sub(1, #x)\n    local\
    \ count = 0\n    for i = 1, #bin do\n      if bin[i] == '1' then\n        count\
    \ = count + 1\n      end\n    end\n    return count\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp18492p3h.lua:38: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    -- get length of array\n\
    \    local lens = #arr\n    local len\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplvrqtsqb.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if not arr then return\
    \ nil end\n    local counts = terralib.newlist()\n    for i = 1, #arr do\n   \
    \     local num = tonumber(arr:sub(i, i))\n        if num ~= 0 then\n        \
    \    table.insert(counts, num)\n        end\n    end\n    counts:sort(function(a,\
    \ b) return a > b end)\n    local result = terralib.newlist()\n    for _, num\
    \ in ipairs(counts) do\n        local idx = tonumber(num)\n        -- TODO: This\
    \ could be optimized to binary search if necessary.\n        local pos = 1\n \
    \       while pos < #counts and idx > counts[pos] do\n            pos = pos +\
    \ 1\n        end\n        table.insert(result, idx)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcvdc2jbs.lua:10:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmpcvdc2jbs.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpcvdc2jbs.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local function binary_ones_count(num)\n\
    \        local bits = math.floor((math.log2(num)) + 1)\n        local count =\
    \ 0\n        for i = 1, bits do\n            count = count + math.pow(2, i - 1)\n\
    \        end\n        return count\n    end\n    local decimal_val = math.log2(arr[1])\n\
    \    local decimal_pos = decimal_val - 1\n    local decimal_neg = decimal_val\
    \ - 2\n    local binary_pos = binary_ones_count(arr[1])\n    local binary_neg\
    \ = binary_ones_count(arr[2])\n    local array_pos = 0\n    local array_neg =\
    \ 0\n    local length = #arr\n    for index = 2, length do\n        local decimal_val\
    \ = math.log2(arr[index])\n        local decimal_pos = decimal_val - 1\n     \
    \   local decimal_neg = decimal_val - 2\n        local binary_pos = binary_ones_count(arr[index])\n\
    \        local binary_neg = binary_ones_count(arr[index + 1])\n        if decimal_pos\
    \ > decimal_neg then\n            array_pos = array_pos + arr[index + 1]\n   \
    \     elseif decimal_neg > decimal_pos then\n            array_neg = array_neg\
    \ + arr[index]\n        else\n            array_pos = array_pos + arr[index]\n\
    \            array_neg = array_neg + arr[index + 1]\n        end\n    end\n  \
    \  if array_neg > array_pos then\n        return -1 * (array_neg - array_pos)\n\
    \    else\n        return array_pos\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfn94n9lt.lua:17:\
    \ attempt to call a nil value (field 'log2')\nstack traceback:\n\t/tmp/tmpfn94n9lt.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpfn94n9lt.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local result = {}\n  for\
    \ i = 1, #arr do\n    local num_ones = 0\n    local max_decimal = 0\n    for j\
    \ = 1, #arr[i] do\n      if arr[i][j] == 1 then\n        num_ones = num_ones +\
    \ 1\n      end\n      if arr[i][j] > max_decimal then\n        max_decimal = arr[i][j]\n\
    \      end\n    end\n    if num_ones == 0 then\n      result[#result+1] = max_decimal\n\
    \    else\n      local sorted_decimal = max_decimal - num_ones + 1\n      local\
    \ decimal_idx\n      for j = #result, 1, -1 do\n        if arr[i][j] > sorted_decimal\
    \ then\n          decimal_idx = j\n          break\n        end\n      end\n \
    \     result[decimal_idx] = max_decimal\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcbwh3bcq.lua:13:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmpcbwh3bcq.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpcbwh3bcq.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local keys = {}\n    local\
    \ map = {}\n    for i = 1, #arr do\n        local key = arr[i]\n        if not\
    \ map[key] then\n            table.insert(keys, key)\n            map[key] = i\n\
    \        end\n    end\n    table.sort(keys)\n    return table.unpack(keys)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3i0tq_y4.lua:25:\
    \ expected: {1, 2, 4, 3, 5}\nactual: 1\nstack traceback:\n\t/tmp/tmp3i0tq_y4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- This function is incomplete.\
    \ You may not alter arr in-place.\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_qqr97o.lua:16:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpe_qqr97o.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort from highest bits\
    \ to lowest bits\n  -- First count number of ones in each number\n  local ones\
    \ = {}\n  for i = 1, #arr do\n    local bits = tostring(unpack(arr, i))[1]\n \
    \   for j = 1, #bits do\n      if bits[j] then\n        table.insert(ones, j -\
    \ 1)\n      end\n    end\n  end\n  -- Sort from highest bits to lowest bits\n\
    \  local sorted\n  if #ones == 1 then\n    -- Sort from highest bits to lowest\
    \ bits\n    sorted = table.sort(ones, 1, #ones - 1)\n  elseif #ones == 2 then\n\
    \    -- Sort from lowest bits to highest bits\n    sorted = table.sort(ones, #ones\
    \ - 2, #ones)\n  else\n    -- Sort from lowest bits to lowest bits\n    sorted\
    \ = table.sort(ones, #ones, #ones - 1)\n  end\n  -- Apply sorting\n  local sorted_arr\
    \ = {}\n  for i = 1, #sorted do\n    table.insert(sorted_arr, unpack(arr, i, sorted[i]))\n\
    \  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphx_r5ecb.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmphx_r5ecb.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmphx_r5ecb.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local arr2 = {}\n    local\
    \ cnt = 0\n    for v in arr do\n        cnt = cnt + 1\n        if v ~= 0 then\n\
    \            arr2[cnt] = v\n        end\n    end\n    table.sort(arr2, function(a,\
    \ b)\n        local a_bin = bit.rshift(bit.lshift(tostring(a), 32), 24)\n    \
    \    local b_bin = bit.rshift(bit.lshift(tostring(b), 32), 24)\n        return\
    \ a_bin == b_bin\n    end)\n    return arr2\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 tags=sorting,lua |>\nMy original answer was wrong, it doesn't work\
    \ under LuaJIT because of a JIT bug. Thanks to Hank Gay for spotting this.\nThe\
    \ bug is that LuaJIT seems to optimize out unused variables in the loop. Hence\
    \ the original code doesn't work under LuaJIT.\nIf you add the line local arr2\
    \ = arr to the top of the function, the program will work under LuaJIT again.\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9xq93k42.lua:24: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local sorted_arr = {}\n \
    \ local sorted_arr_len = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7wusb1hf.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    -- check if arr is valid\
    \ input\n    if arr == nil then\n        error('Argument cannot be nil')\n   \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_wm9m9fy.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr == 0 then return\
    \ arr end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3bvqs629.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if arr[1] == 0 then\n \
    \       return arr\n    end\n    local tmp_arr = {}\n    local n = #arr\n    local\
    \ m, tmp, count = 1\n    for i = 1, n do\n        count = count * (n / i)\n  \
    \      tmp = 1\n        for j = 1, i do\n            if arr[j] == 1 then\n   \
    \             tmp = (tmp + j) * count\n            end\n        end\n        if\
    \ tmp > n then\n            m = n\n        else\n            m = tmp\n       \
    \ end\n        tmp_arr[i] = m\n    end\n    if n > 1 then\n        table.sort(tmp_arr)\n\
    \        for i = 1, n do\n            arr[i] = tmp_arr[i]\n        end\n    end\n\
    \    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzjf38oqd.lua:16:\
    \ attempt to perform arithmetic on a nil value (local 'count')\nstack traceback:\n\
    \t/tmp/tmpzjf38oqd.lua:16: in local 'candidate'\n\t/tmp/tmpzjf38oqd.lua:42: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr < 2 then\n    return\
    \ arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvr83ise9.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    return table.sort(\n  \
    \      function(x, y)\n            local z1 = math.floor(x / 2)\n            local\
    \ z2 = math.floor(y / 2)\n            if z1 ~= z2 then\n                return\
    \ z1 - z2\n            else\n                return x - y\n            end\n \
    \       end,\n        arr\n    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg1ksmmey.lua:9:\
    \ bad argument #1 to 'sort' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpg1ksmmey.lua:9: in local 'candidate'\n\t/tmp/tmpg1ksmmey.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    -- sort the array using\
    \ the number of ones\n    local function count_ones(arr)\n        local n = 1\n\
    \        for v in arr do\n            n = (n * 2) + 1\n        end\n        return\
    \ n\n    end\n    local function count_ones(arr)\n        local n = 1\n      \
    \  for v in arr do\n            n = (n * 2) - v\n        end\n        return n\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg6eyykji.lua:38: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  assert(#arr > 0)\n  local\
    \ results = {}\n  local index = 1\n  local count_of_ones = 1\n  local current_count\
    \ = 0\n  local current_idx = 0\n  local last_idx = 0\n  local last_count = 1\n\
    \  for i = 1, #arr do\n    local bin_string = tostring(arr[i])\n    local bin_count\
    \ = #bin_string\n    local decimal = tointeger(bin_string) + 1\n    if bin_count\
    \ > 0 then\n      count_of_ones = bin_count - 1\n    end\n    -- Check if we've\
    \ seen this decimal before\n    local decimal_index = #results + 1\n    local\
    \ decimal_value = -1\n    if decimal_index > 0 then\n      decimal_value = results[decimal_index]\n\
    \    end\n    -- Check if we've seen this decimal before\n    if decimal_value\
    \ == -1 then\n      decimal_value = decimal\n      if decimal_value < decimal\
    \ then\n        decimal_value = decimal\n      end\n    end\n    if decimal_value\
    \ == decimal then\n      if count_of_ones == 0 then\n        table.insert(results,\
    \ decimal)\n      elseif count_of_ones == last_count then\n        last_idx =\
    \ current_idx\n      end\n      results[decimal_index] = decimal\n      -- Keep\
    \ count of ones to continue with the next number\n      count_of_ones = count_of_ones\
    \ + 1\n    elseif decimal_value < decimal then\n      if count_of_ones == 0 then\n\
    \        table.insert(results, decimal)\n      elseif count_of_ones > 0 then\n\
    \        current_count = count_of_ones\n      end\n      results[decimal_index]\
    \ = decimal\n      count_of_ones = count_of_ones + 1\n    else\n      if count_of_ones\
    \ == 0 then\n        table.insert(results, decimal)\n      elseif count_of_ones\
    \ > 0 then\n        current_count = count_of_ones\n      end\n      table.insert(results,\
    \ decimal)\n    end\n    current_count = current_count + 1\n    last_idx = #results\n\
    \  end\n  assert(#results == #arr)\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf8jouwy_.lua:20:\
    \ attempt to call a nil value (global 'tointeger')\nstack traceback:\n\t/tmp/tmpf8jouwy_.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpf8jouwy_.lua:72: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local sorted_array = {}\n\
    \    for i=1, #arr do\n        sorted_array[i] = 0\n    end\n    local ones_count\
    \ = 0\n    local last_i = 0\n    local last_val = -math.inf\n    for i=1, #arr\
    \ do\n        local val = arr[i]\n        if val > 0 then\n            ones_count\
    \ = ones_count + 1\n        end\n        if ones_count == #arr then\n        \
    \    sorted_array[#sorted_array + 1] = last_val\n            last_val = val\n\
    \            last_i = i\n            ones_count = 0\n        elseif ones_count\
    \ > #arr then\n            sorted_array[#sorted_array + 1] = last_val\n      \
    \      last_val = val\n            last_i = i\n            ones_count = 1\n  \
    \      else\n            -- Just put one at the end and shift all others\n   \
    \         sorted_array[#sorted_array + 1] = val\n        end\n    end\n    sorted_array[#sorted_array\
    \ + 1] = last_val\n    return sorted_array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2bfqbhyb.lua:15:\
    \ attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\
    \t/tmp/tmp2bfqbhyb.lua:15: in local 'candidate'\n\t/tmp/tmp2bfqbhyb.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local function compare_function(_,i,j,v)\n\
    \        local num_ones = math.floor(math.log(v,2)) -- Number of bits used to\
    \ represent value v\n        return v >= i and v - i^num_ones > j\n    end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7g7i6khz.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local sort_arr={}\n   \
    \ for i=1,#arr do\n        local ones=0\n        for j,k in pairs(string.gsub(arr[i],\"\
    ..\",\"\")) do\n            if k == \"1\" then\n                ones = ones +\
    \ 1\n            end\n        end\n        table.insert(sort_arr,math.floor(ones/2))\n\
    \    end\n    return table.sort(sort_arr)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_cl76x2.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpi_cl76x2.lua:12: in local 'candidate'\n\t/tmp/tmpi_cl76x2.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case: empty array\n\
    \  if not arr then return arr\n  -- Base case: all zeroes\n  if #arr == 0 then\
    \ return arr\n  -- Base case: single zero\n  if #arr == 1 then\n    local ones\
    \ = unpack(arr:sub(2))\n    local i = 0\n    while i < #ones and ones[i] == 0\
    \ do\n      i = i + 1\n    end\n    if #ones == i then\n      return arr\n   \
    \ end\n  -- Recursive case: find max number of ones starting from the second\n\
    \  -- element in the array\n  else\n    local ones = unpack(arr:sub(2))\n    local\
    \ i = 0\n    local j = 0\n    while i < #ones and j + 1 < #ones and ones[i] ==\
    \ ones[j] do\n      i = i + 1\n      j = j + 1\n    end\n    if i > j then\n \
    \     return sort_array(arr)\n    else\n      local count = 1\n      local max_count\
    \ = #ones\n      -- Add ones to array from the end\n      while i < #ones and\
    \ ones[i] == 0 do\n        i = i + 1\n      end\n      local new_ones = table.concat(ones,\
    \ i, max_count)\n      for j = #ones, max_count, -1 do\n        new_ones = new_ones:concat(1)\n\
    \      end\n      local new_arr = arr:sub(1, i - 1)\n      local new_arr = new_arr:concat(new_ones)\n\
    \      local new_arr = new_arr:concat(ones)\n      -- Recursive case: find max\
    \ number of ones starting from the second\n      -- element in the array\n   \
    \   return sort_array(new_arr)\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpumqab_6d.lua:12: 'end' expected (to close 'if' at line 10)\
    \ near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local arr2 = {}\n    for\
    \ i,v in ipairs(arr) do\n        arr2[v] = tostring(i):byte()\n    end\n    table.sort(arr2,\
    \ function(A,B)\n        local num_A = tonumber(tostring(A))\n        local num_B\
    \ = tonumber(tostring(B))\n        return num_A == num_B and A or tonumber(tostring(num_A\
    \ - num_B))\n    end)\n    local arr3 = {}\n    for i,v in ipairs(arr2) do\n \
    \       arr3[i] = v\n    end\n    return arr3\nend\n</code>\nThe algorithm for\
    \ sorting is based on two steps:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7kgqsldr.lua:24: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr == 1 then\n    return\
    \ arr\n  end\n  local size = math.ceil(math.sqrt(#arr))\n  local pivot = math.floor((#arr\
    \ + size - 1) / 2)\n  local pivots = {}\n  local vals = {}\n  for i = 1, #arr\
    \ do\n    table.insert(pivots, math.floor(i / size))\n    table.insert(vals, arr[i\
    \ - 1])\n  end\n  table.sort(pivots, #pivots)\n  for i = 1, #pivots do\n    if\
    \ pivots[i] > pivot then\n      for j = i + 1, #pivots do\n        local p = table.remove(pivots,\
    \ j)\n        local v = arr[p - 1]\n        arr[p] = arr[i]\n        arr[i] =\
    \ v\n      end\n    end\n  end\n  return vals\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1u23hodd.lua:20:\
    \ bad argument #2 to 'sort' (function expected, got number)\nstack traceback:\n\
    \t/tmp/tmp1u23hodd.lua:20: in local 'candidate'\n\t/tmp/tmp1u23hodd.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if not arr then return\
    \ end\n    local sorted_arr = {}\n    local sorted_arr_index = {}\n    local len\
    \ = #arr\n    for i=1,len do\n        -- Binary representation\n        local\
    \ bin = string.rep('0', 32):rep(#arr[i])\n        local bin_arr = {}\n       \
    \ for j=1,#bin do\n            bin_arr[j] = bin:sub(1,j-1)\n        end\n    \
    \    -- Convert to binary number\n        local bin_arr2 = {}\n        for j=1,#bin\
    \ do\n            bin_arr2[j] = tonumber(bin_arr[j])\n        end\n        --\
    \ Count the number of ones\n        local n = 1\n        for j=1,#bin_arr do\n\
    \            if bin_arr[j] == '1' then\n                n = n + 1\n          \
    \  end\n        end\n        -- Convert to decimal number\n        local n2 =\
    \ n\n        while n2 < 16 do\n            n2 = n2 * 2\n        end\n        --\
    \ Convert to decimal number\n        local n3 = n2 / 2\n        -- Convert to\
    \ decimal number\n        local n4 = n2 / 2\n        -- Compare based on the number\
    \ of ones\n        if n == n4 then\n            sorted_arr_index[i] = n3\n   \
    \     elseif n == n3 then\n            sorted_arr_index[i] = n2\n        elseif\
    \ n == n2 then\n            sorted_arr_index[i] = n\n        else\n          \
    \  sorted_arr_index[i] = n4\n        end\n    end\n    -- Sort according to sorted\
    \ arr_index\n    for i=1,len do\n        table.insert(sorted_arr,arr[i])\n   \
    \ end\n    table.sort(sorted_arr, function (a,b)\n        return sorted_arr_index[a]\
    \ < sorted_arr_index[b]\n    end)\n    -- Return sorted array\n    return sorted_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpysyxlthu.lua:15:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmpysyxlthu.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpysyxlthu.lua:66: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local ones = {}\n  local\
    \ n = 1\n  for i = 1, #arr do\n    local v = tostring(arr[i])\n    if v:sub(1,1)\
    \ ~= '1' then\n      ones[n] = v\n      n = n + 1\n    end\n  end\n  table.sort(ones,\
    \ function(a, b) return tonumber(a) < tonumber(b) end)\n  for i = 0, n do arr[i]\
    \ = tonumber(arr[i]) end\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvmh8g5u.lua:26:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpfvmh8g5u.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  assert(type(arr) == \"table\"\
    )\n  assert(#arr > 0)\n  local max1 = math.max(unpack(arr))\n  local max2 = math.max(unpack(arr:map(function\
    \ (x)\n    return math.pow(x, 2) end)))\n  local sorted\n  if max1 < max2 then\n\
    \    -- Sort in descending order\n    sorted = arr:map(function (x) -x end)\n\
    \  else\n    -- Sort in ascending order\n    sorted = arr\n  end\n  return sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptxmbxpzo.lua:17: unexpected symbol near '-'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local ret = {}\n  local counts\
    \ = {}\n  for i, v in ipairs(arr) do\n    local binary = v % 2\n    local decimal\
    \ = v / 2\n    if counts[binary] then\n      counts[binary] = counts[binary] +\
    \ 1\n    else\n      counts[binary] = 1\n    end\n    if counts[binary] == 1 then\n\
    \      table.insert(ret, decimal)\n    end\n  end\n  table.sort(ret)\n  table.insert(ret,\
    \ -1)\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpld1v2a7p.lua:31:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {0.5, 1, -1}\nstack traceback:\n\t/tmp/tmpld1v2a7p.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local sorted_arr\n  local\
    \ zeroes = false\n  for i = 1, #arr do\n    if arr[i] == 0 then\n      zeroes\
    \ = true\n      continue\n    end\n    if zeroes then\n      sorted_arr = sorted_arr\
    \ or (arr[i]-1)\n    else\n      sorted_arr = sorted_arr or (arr[i])\n    end\n\
    \  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu6vqaaa6.lua:15: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local comp = function(a,\
    \ b) return (a < b) end\n  local function sort_by_decimal_value(a, b)\n    --\
    \ we assume that all numbers in the array are in range [0, 2^31 - 1]\n    -- so\
    \ it doesn't matter whether we compare them as ints or as floats\n    local ab\
    \ = int(a * 0xffffffff)\n    local bc = int(b * 0xffffffff)\n    local cmp = ab\
    \ - bc\n    if cmp then return cmp end\n    ab = int(a * 0x7fffffff)\n    bc =\
    \ int(b * 0x7fffffff)\n    cmp = ab - bc\n    return cmp\n  end\n  local function\
    \ sort_by_number_of_bits(a, b)\n    local da = int(a * 0xffffffff)\n    local\
    \ db = int(a * 0x7fffffff)\n    local db = db + da\n    local da = da + db\n \
    \   local db\n    -- here we can just use table comparison, since we only have\
    \ 32 bit\n    -- numbers. Or we could use logarithm\n    local da = da\n    local\
    \ db = db\n    if da > db then return 1 end\n    if da < db then return -1 end\n\
    \    local da = da - db\n    local db = db\n    if da > 0 then return 1 end\n\
    \    if da < 0 then return -1 end\n    local da = da - db\n    return da\n  end\n\
    \  assert(#arr == #arr:map(comp))\n  return arr:map(function(v)\n    local s =\
    \ v\n    -- sort from biggest to smallest so that when we compare the number in\n\
    \    -- the loop, we can just do one subtraction\n    local i = #arr\n    while\
    \ i do\n      -- we could also use a binary search here, but this is O(n) anyway\n\
    \      local d = sort_by_decimal_value(v, arr[i])\n      -- if we had to convert\
    \ arr[i] to string, it would take time O(n) anyway\n      -- so we just convert\
    \ it here and save the cost of converting it later\n      if d then d = string(d)\
    \ end\n      -- if we had to convert v, it would take time O(n) anyway so we\n\
    \      -- just convert it here and save the cost of converting it later\n    \
    \  if s then s = string(s) end\n      i = i - 1\n      if d then\n        -- if\
    \ we had to convert arr[i], it takes time O(n) anyway\n        -- and we only\
    \ need to convert it once\n        s = s .. d\n        -- if there are more elements\
    \ to check, we only need to convert the\n        -- current element to string\
    \ once\n        if i < #arr then s = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9jx7mh3p.lua:64: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case\n  if #arr ==\
    \ 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp81apssqw.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Write your code here\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp367knk1_.lua:16:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp367knk1_.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local size = #arr\n   \
    \ local temp = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6q5p5p2z.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Use a table.\n  -- The\
    \ table will contain binary representation of non-negative numbers,\n  -- with\
    \ every bit corresponding to whether there is a one in that position.\n  -- Then,\
    \ the table will be sorted.\n  local t = {}\n  for i = 1, #arr do\n    local bin\
    \ = bin(i)\n    table.insert(t, bin)\n  end\n  table.sort(t)\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps23z4325.lua:15:\
    \ attempt to call a nil value (global 'bin')\nstack traceback:\n\t/tmp/tmps23z4325.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmps23z4325.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local counts = {}\n  for\
    \ i = 1, #arr do\n    counts[(tostring(arr[i]))] = counts[(tostring(arr[i]))]\
    \ or 1\n  end\n  local sorted = {}\n  local sort_funcs = {\n    [1] = function(a,\
    \ b) return a < b end,\n    [2] = function(a, b) return a - b end,\n    [3] =\
    \ function(a, b) return tostring(a) < tostring(b) end,\n    [4] = function(a,\
    \ b) return tostring(a) == tostring(b) end,\n  }\n  for i = 1, #arr do\n    table.insert(sorted,\
    \ counts[tostring(arr[i])])\n  end\n  for i = 1, #sorted do\n    table.sort(sorted,\
    \ sort_funcs[i])\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbwz9w4g5.lua:24:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmpbwz9w4g5.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpbwz9w4g5.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Your code goes here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5lwip7x.lua:15:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpt5lwip7x.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local function compare(arr1,\
    \ arr2)\n        local count = 0\n        for i = 1, #arr1 do\n            if\
    \ arr1[i] == 1 then\n                count = count + 1\n            end\n    \
    \    end\n        return count, arr2\n    end\n    table.sort(arr, compare)\n\
    \    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgvayxtlx.lua:11:\
    \ attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t\
    /tmp/tmpgvayxtlx.lua:11: in function </tmp/tmpgvayxtlx.lua:9>\n\t[C]: in function\
    \ 'table.sort'\n\t/tmp/tmpgvayxtlx.lua:18: in local 'candidate'\n\t/tmp/tmpgvayxtlx.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr < 2 then\n    return\
    \ arr\n  end\n  local result = {}\n  local count = count_ones(arr[1])\n  arr[1]\
    \ = sort_array(arr[1])\n  for i = 2, #arr do\n    if arr[i] == 0 then\n      arr[i\
    \ - 1] = arr[i - 1] + 1\n    else\n      if count > arr[i - 1] + 1 then\n    \
    \    arr[i - 1] = arr[i - 1] + 1\n      else\n        arr[i - 1] = count\n   \
    \     result[#result + 1] = arr[i - 1]\n        count = count + 1\n      end\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp53nmjpt0.lua:13:\
    \ attempt to call a nil value (global 'count_ones')\nstack traceback:\n\t/tmp/tmp53nmjpt0.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp53nmjpt0.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  assert(type(arr) == \"table\"\
    )\n  assert(arr.numIndices ~= nil)\n  local sorted_arr = {}\n  -- create an array\
    \ of ones and zeros\n  -- The last column is used for sorting purposes,\n  --\
    \ which represents the number of ones in binary representation\n  local ones_array\
    \ = makeArray(math.max(1<<arr.numIndices, 1))\n  local zeros_array = makeArray(math.max(1<<arr.numIndices,\
    \ 1))\n  for i,v in pairs(arr) do\n    -- convert binary number to decimal\n \
    \   local dec = 0\n    for i=#ones_array,1,-1 do\n      if v & ones_array[i] then\n\
    \        dec = dec + 2^i\n      end\n    end\n    -- convert decimal number to\
    \ binary\n    local bin = \"\"\n    for i=#zeros_array,1,-1 do\n      bin = bin\
    \ .. \"0\"\n      if dec > 0 then\n        if dec >= 2^i then\n          bin =\
    \ bin .. \"1\"\n          dec = dec - 2^i\n        else\n          bin = bin ..\
    \ \"0\"\n        end\n      elseif dec == 0 then\n        bin = bin .. \"0\"\n\
    \      else\n        bin = bin .. \"1\"\n      end\n    end\n    -- put the converted\
    \ decimal number into the array of zeros and ones\n    -- The position of the\
    \ column is based on the number of ones in its binary representation\n    -- This\
    \ way, the columns represent number of ones in their binary representation\n \
    \   local idx = 1\n    for i=#ones_array,1,-1 do\n      if bin[i] == \"1\" then\n\
    \        idx = idx + 1\n      end\n    end\n    table.insert(sorted_arr, idx)\n\
    \  end\n  -- sort based on decimal values\n  for i=#sorted_arr,1,-1 do\n    table.sort(sorted_arr,\
    \ compare_arr)\n  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9bq_24kv.lua:10:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmp9bq_24kv.lua:10: in local 'candidate'\n\
    \t/tmp/tmp9bq_24kv.lua:63: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  return arr:map(function(x)\n\
    \    local num_ones = x:num_binary_digits() + 1\n    return num_ones > 0 and num_ones\
    \ or x:decimal_value()\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpku9_cnv8.lua:9:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpku9_cnv8.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpku9_cnv8.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local function comparator(v1,\
    \ v2)\n        -- Number of ones in their binary representation.\n        local\
    \ n1, n2 = v1:count(\"1\"), v2:count(\"1\")\n        -- If number of ones is same,\
    \ based on their decimal value.\n        if n1 == n2 then\n            return\
    \ v1:reverse():find(1, \"1\") + 1:reverse():find(1, \"1\") + 1\n        end\n\
    \        -- If number of ones is different, sort based on decimal value.\n   \
    \     return n1 <= n2 then\n            -- Sort based on decimal value.\n    \
    \        -- If decimal values are different, sort based on their binary representation.\n\
    \            -- This assumes values are positive.\n            v1\n        end\n\
    \        -- If number of ones is same, sort based on their binary representation.\n\
    \        -- This assumes values are positive.\n    end\n    table.sort(arr, comparator)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpijgn3xam.lua:14: 'end' expected (to close 'if' at line 13)\
    \ near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr == 0 then\n    return\
    \ arr\n  end\n  local n = math.floor(math.log(math.abs(arr[1]), 2))\n  local bin\
    \ = dec2bin(arr[1], n)\n  bin = string.gsub(bin, \"1\", \"0\")\n  local m = #bin\n\
    \  local i = 0\n  local cur = 0\n  local arr2 = {}\n  while i < m do\n    if bin[i]\
    \ == \"1\" then\n      cur = cur + 1\n    else\n      if cur > 0 then\n      \
    \  arr2[i] = cur\n        cur = 0\n      end\n    end\n    i = i + 1\n  end\n\
    \  if cur > 0 then\n    arr2[i] = cur\n    cur = 0\n  end\n  i = 0\n  local j\
    \ = 0\n  while i < m do\n    local cur = arr[i]\n    local j = i + 1\n    while\
    \ j < m do\n      if j == i then\n        break\n      end\n      if cur > arr2[j]\
    \ then\n        local k = j - 1\n        arr2[k] = arr[j]\n        arr[j] = cur\n\
    \        i = k\n      else\n        j = j + 1\n      end\n    end\n  end\n  while\
    \ i < m do\n    arr2[i] = arr[i]\n    i = i + 1\n  end\n  return arr2\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcm6sq6ui.lua:13:\
    \ attempt to call a nil value (global 'dec2bin')\nstack traceback:\n\t/tmp/tmpcm6sq6ui.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpcm6sq6ui.lua:63: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local ones = {}\n    local\
    \ zeros = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvvhbbc8z.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if arr == nil then\n    return\
    \ nil\n  end\n  -- if there are few ones, just sort them in ascending order\n\
    \  if #arr < 8 then\n    local temp = arr[1]\n    for i = 2, #arr do\n      arr[i\
    \ - 1] = arr[i]\n    end\n    arr[1] = temp\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0db72n5s.lua:35: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr <= 0 then\n    return\
    \ arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeauqacuo.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The array\n  local arr_t\
    \ = {unpack(arr)}\n  -- Number of ones\n  local ones = {}\n  local sorted_ones\
    \ = {}\n  -- Iterate over the array\n  for _, v in ipairs(arr_t) do\n    -- Convert\
    \ it to binary representation using twos complement\n    local bin = '' .. v\n\
    \    for i=1, v:bit_length() do\n      bin = b .. '0' .. bin\n    end\n    --\
    \ Convert binary representation to decimal\n    local decimal = tonumber(bin,\
    \ 2)\n    -- Get the number of ones in binary representation\n    local n = v:bit_length()\n\
    \    table.insert(sorted_ones, n)\n    table.insert(ones, decimal)\n  end\n  --\
    \ Sort by number of ones\n  table.sort(sorted_ones)\n  -- Reverse the sorted array\n\
    \  for _ = 1, #sorted_ones do\n    table.insert(arr_t, sorted_ones[_])\n  end\n\
    \  -- Sort by decimal\n  table.sort(ones)\n  -- Reverse the sorted array\n  for\
    \ _ = 1, #ones do\n    table.insert(arr_t, ones[_])\n  end\n  return arr_t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgv0kxjcm.lua:10:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpgv0kxjcm.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpgv0kxjcm.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local i = 1\n    local\
    \ len = #arr\n    while i < len do\n        -- Get the number of ones in this\
    \ position\n        local nOnes = 0\n        for j = 1, (len-i) do\n         \
    \   if arr[j] == 1 then nOnes = nOnes + 1 end\n        end\n        -- If this\
    \ number of ones is even, compare the two numbers using their decimal value\n\
    \        if nOnes % 2 == 0 then\n            local num1 = arr[i-1]\n         \
    \   local num2 = arr[i]\n            if num1 > num2 then\n                arr[i],\
    \ arr[i-1] = arr[i-1], arr[i]\n            end\n        end\n        i = i + 2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpablrc89p.lua:32:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpablrc89p.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local sort_function = {}\n\
    \  for i = 2, #arr do\n    sort_function[#sort_function + 1] = function(n)\n \
    \     if n < 0 then return n end\n      if n == 0 then return 0 end\n      if\
    \ n == 1 then return 1 end\n      if n >= 2 then\n        local count = 0\n  \
    \      for _, k in pairs(count_bits(arr)) do\n          if k <= i then count =\
    \ count + n end\n        end\n        if count == 0 then\n          if i == 2\
    \ then\n            return arr[1] - arr[1]\n          else\n            return\
    \ math.pow(2,\n                string.byte(string.sub(tostring(arr), i, i + 1))\
    \ - i)\n          end\n        else\n          return math.pow(2,\n          \
    \  string.byte(string.sub(tostring(arr), i, i + 1)) - i)\n        end\n      end\n\
    \    end\n  end\n  table.sort(sort_function, function(a, b) return sort_function(a)\
    \ - sort_function(b) end)\n  return table.concat(sort_function, 1)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpao_8_zfl.lua:34:\
    \ attempt to call a table value (upvalue 'sort_function')\nstack traceback:\n\t\
    /tmp/tmpao_8_zfl.lua:34: in function </tmp/tmpao_8_zfl.lua:34>\n\t[C]: in function\
    \ 'table.sort'\n\t/tmp/tmpao_8_zfl.lua:34: in local 'candidate'\n\t/tmp/tmpao_8_zfl.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- count number of 1's\n\
    \  local one_cnt = {}\n  for i=1, #arr do\n    one_cnt[tostring(arr[i])] = 0\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpditqnfb5.lua:28: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function bin2dec(n)\n\
    \    local ret = 0\n    while n > 0 do\n      ret = (ret << 1) + n % 2\n     \
    \ n = n >> 1\n    end\n    return ret\n  end\n  local function dec2dc(n)\n   \
    \ local ret = 0\n    while n > 0 do\n      ret = (ret << 1) + n % 10\n      n\
    \ = n / 10\n    end\n    return ret\n  end\n  local function bin2dec2(s)\n   \
    \ local n = bin2dec(string.sub(s,0,7))\n    return dec2dc(dec2dc(n))\n  end\n\
    \  local function dec2dc2(s)\n    local n = dec2dc(string.sub(s,0,3))\n    return\
    \ dec2dc(dec2dc(n))\n  end\n  local function bin2dec3(s)\n    local n = bin2dec2(string.sub(s,0,5))\n\
    \    return dec2dc(dec2dc(dec2dc(n)))\n  end\n  local function dec2dc3(s)\n  \
    \  local n = dec2dc2(string.sub(s,0,2))\n    return dec2dc(dec2dc(dec2dc(n)))\n\
    \  end\n  local function bin2dec(s)\n    local n = bin2dec2(string.sub(s,0,5))\n\
    \    return dec2dc(dec2dc(dec2dc(n)))\n  end\n  local function dec2dc(s)\n   \
    \ local n = dec2dc2(string.sub(s,0,2))\n    return dec2dc(dec2dc(dec2dc(n)))\n\
    \  end\n  local function bin2dec4(s)\n    local n = bin2dec3(string.sub(s,0,7))\n\
    \    return dec2dc(dec2dc(dec2dc(dec2dc(n))))\n  end\n  local function dec2dc4(s)\n\
    \    local n = dec2dc3(string.sub(s,0,5))\n    return dec2dc(dec2dc(dec2dc(dec2dc(n))))\n\
    \  end\n  local function bin2dec5(s)\n    local n = bin2dec4(string.sub(s,0,11))\n\
    \    return dec2dc(dec2dc(dec2dc(dec2dc(dec2dc(n)))))\n  end\n  local function\
    \ dec2dc5(s)\n    local n = dec2dc4(string.sub(s,0,11))\n    return dec2dc(dec2dc(dec2dc(dec2dc(dec2dc(n)))))\n\
    \  end\n  local n = arr[1]\n  if n < 0 then\n    n = dec2dc2(string.sub(arr,0,7))\n\
    \  else\n    n = bin2dec2(string.sub(arr,0,5))\n  end\n  n = dec2dc(dec2dc(dec2dc(dec\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp28cfoa3b.lua:72: ')' expected (to close '(' at line 71) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local function bin2dec(bin)\n\
    \        local dec = 0\n        for i = #bin, 1, -1 do\n            dec = dec\
    \ * 2 + bin[i]\n        end\n        return dec\n    end\n    local function dec2dm(value)\n\
    \        local dec = 0\n        for i = #value, 1, -1 do\n            dec = dec\
    \ + value[i]\n        end\n        return dec\n    end\n    local function dec2db(value)\n\
    \        local dec = 0\n        for i = #value, 1, -1 do\n            dec = dec\
    \ + math.pow(16, #value)\n        end\n        return dec\n    end\n    local\
    \ function dec2bd(value)\n        local dec = 0\n        for i = #value, 1, -1\
    \ do\n            dec = dec + math.pow(16, #value)\n        end\n        return\
    \ dec\n    end\n    local function bd2dec(bd)\n        local dec = 0\n       \
    \ for i = #bd, 1, -1 do\n            dec = dec * 2 + bd[i]\n        end\n    \
    \    return dec\n    end\n    local function bd2dec2(bin)\n        local dec =\
    \ 0\n        for i = #bin, 1, -1 do\n            dec = dec * 2 + bin[i]\n    \
    \    end\n        return dec\n    end\n    local function binarySort(bins)\n \
    \       local binsSize\n        for i = 1, #bins, 2 do\n            binsSize =\
    \ bins[i]\n            if binsSize == 0 then\n                local bin = bins[i\
    \ + 1]\n                for j = #bin, 1, -1 do\n                    local idx\
    \ = j\n                    bins[idx] = bin\n                    bins[idx] = bin2dec(bin)\n\
    \                end\n                bins[i] = 0\n                bins[i + 1]\
    \ = dec2bd(binarySort(bins))\n                binsSize = bins[i]\n           \
    \ end\n        end\n        return bins\n    end\n    local bins = binarySort(arr)\n\
    \    local binsSize = 1\n    local sortArr = {}\n    for i = 1, #bins, 2 do\n\
    \        binsSize = bins[i]\n        if binsSize == 0 then\n            local\
    \ bin = bins[i + 1]\n            for j = #bin, 1, -1 do\n                local\
    \ idx = j\n                bins[idx] = bin\n                bins[idx] = bin2dec(bin)\n\
    \            end\n            bins[i] = 0\n            bins[i + 1] = dec2bd(binarySort(bins))\n\
    \            binsSize = bins[i]\n        end\n    end\n    local decArr = {}\n\
    \    for i = 1, #bins, 1 do\n        local dec = 0\n        for j = 1, binsSize\
    \ do\n            dec = dec * 2 + bins[j]\n        end\n        decArr\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi1ty8lzo.lua:93: syntax error near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  return arr:sort(function(x,y)\
    \ -- sort by number of ones\n    if x >= y then\n      return x\n    else\n  \
    \    return y\n    end\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprdm_rbed.lua:9:\
    \ attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmprdm_rbed.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmprdm_rbed.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Initialize a sorted array\
    \ to be returned.\n  -- The array is initialized with zeros, except for the first\
    \ value.\n  -- The first value is always 1 because 0 is a valid element.\n  local\
    \ sorted_arr = {}\n  -- The first value is always 1 because 0 is a valid element.\n\
    \  sorted_arr[1] = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_o8rkx2m.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if arr == nil then return\
    \ nil end\n  -- If arr is empty, return the same array as before.\n  if #arr ==\
    \ 0 then\n    return arr\n  end\n  -- Initialize a zero-length array to store\
    \ result.\n  local ans = {}\n  -- Initialize the array index to 0.\n  local idx\
    \ = 0\n  -- Traverse the array from end to begin, and store the element that\n\
    \  -- holds the number of ones at current index in ans array.\n  for i = #arr,\
    \ 1, -1 do\n    -- If i holds the number of ones in arr[idx], append the element\
    \ at\n    -- current index of ans array into ans array. Otherwise, append 0.\n\
    \    ans[idx] = arr[i] ~= 0 and arr[i] or 0\n    -- Increment the array index\
    \ to the next element.\n    idx = idx + 1\n  end\n  return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pvq_enf.lua:33:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {0=4, 3, 2, 5, 1}\nstack traceback:\n\t/tmp/tmp3pvq_enf.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  assert(arr:gt(0), 'Array\
    \ argument must be non-negative integers')\n  -- Create a binary array 'b' such\
    \ that:\n  --   b[i] == 1 iff arr[i] is non-negative and is of even length;\n\
    \  --   b[i] == 0 otherwise.\n  local b = torch.zeros((arr:size(-1) + 1)):fill(1)\n\
    \  local ones_count = arr:cumsum(-1):gt(1)\n  -- We are going to sort elements\
    \ in reverse order starting from ones_count.\n  -- Iterate over ones_count and\
    \ add 1 to each element of b.\n  -- This way the ones_count will correspond to\
    \ the index of each element of arr in b and\n  -- we can use torch.sort later\
    \ to sort the elements.\n  for i = 0, ones_count:size(-1) do\n    b[ones_count[i]\
    \ + 1] = b[ones_count[i]] + 1\n  end\n  -- Sort arr according to b.\n  -- The\
    \ result will be a sorted array.\n  return torch.sort(arr:view(-1)[b]:type(torch.LongTensor))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfbv3aba9.lua:9:\
    \ attempt to call a nil value (method 'gt')\nstack traceback:\n\t/tmp/tmpfbv3aba9.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpfbv3aba9.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if arr == nil then return\
    \ nil end\n  local function ones_count(arr)\n    local function binary(x)\n  \
    \    local bin = \"\"\n      for i = 1, 8 do\n        bin = string.sub(bin, i,\
    \ i) + x\n      end\n      return bin\n    end\n    local function dec(value)\n\
    \      return tonumber(math.floor((value - 0.5) * 10))\n    end\n    local binary\
    \ = binary(arr)\n    local ones = binary.match(\n        \"^(..)(..)(..)(..)(..)(..)(..)(..)$\"\
    )\n    return tonumber(binary.sub(1, 2))\n  end\n  local dec = dec(arr)\n  local\
    \ sorted_arr = {}\n  local ones_count = ones_count(arr)\n  for i = 1, #arr do\n\
    \    local val = arr[i]\n    local num_ones = ones_count(arr[i])\n    if num_ones\
    \ > 1 then\n      -- This means that there are more than one ones in the input\n\
    \      -- array, so we need to use dec to sort based on decimal value.\n     \
    \ local decimal_value = dec + num_ones - 1\n      sorted_arr[i] = arr[i]\n   \
    \   table.insert(sorted_arr, decimal_value)\n    else\n      -- This means that\
    \ there is only one one, so we need\n      -- an ascending sort.\n      table.insert(sorted_arr,\
    \ val)\n    end\n  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp69u7uv_j.lua:26:\
    \ attempt to call a nil value (global 'dec')\nstack traceback:\n\t/tmp/tmp69u7uv_j.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmp69u7uv_j.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local num_ones = arr:len()\n\
    \    local num_zeros = num_ones - 1\n    local num_negatives = -num_ones\n   \
    \ if num_ones < num_zeros then\n        local is_negative = arr[num_ones] <= 0\n\
    \        if num_negatives < num_ones then\n            arr[num_negatives] = -arr[num_ones]\n\
    \        else\n            if is_negative then\n                arr[num_ones]\
    \ = 0\n            else\n                arr[num_ones] = arr[num_ones] - 1\n \
    \           end\n        end\n        local tmp, count = 1, 1\n        local i\
    \ = 1\n        while i < num_ones do\n            if arr[i] <= 0 then\n      \
    \          arr[count] = -arr[i]\n                i = i + 1\n            else\n\
    \                count = count + 1\n            end\n            i = i + 1\n \
    \       end\n        if count > 0 then\n            tmp = tmp - 1 - (arr[count]\
    \ == 0)\n            while count > 1 do\n                arr[count] = arr[count]\
    \ - 1\n                count = count - 1\n            end\n            arr[count]\
    \ = tmp\n        end\n    elseif num_ones < num_negatives then\n        local\
    \ is_negative = arr[num_ones] <= 0\n        if num_zeros < num_ones then\n   \
    \         arr[num_zeros] = arr[num_ones]\n        elseif is_negative then\n  \
    \          arr[num_ones] = 0\n        else\n            arr[num_ones] = arr[num_ones]\
    \ - 1\n        end\n        local tmp, count = 1, 1\n        local i = 1\n   \
    \     while i < num_ones do\n            if arr[i] <= 0 then\n               \
    \ arr[count] = -arr[i]\n                i = i + 1\n            else\n        \
    \        count = count + 1\n            end\n            i = i + 1\n        end\n\
    \        if count > 0 then\n            tmp = tmp - 1 - (arr[count] == 0)\n  \
    \          while count > 1 do\n                arr[count] = arr[count] - 1\n \
    \               count = count - 1\n            end\n            arr[count] = tmp\n\
    \        end\n    elseif num_zeros < num_negatives then\n        local is_negative\
    \ = arr[num_zeros] <= 0\n        if num_ones < num_zeros then\n            arr[num_ones]\
    \ = -arr[num_zeros]\n        elseif is_negative then\n            arr[num_zeros]\
    \ = 0\n        else\n            arr[num_zeros] = arr[num_zeros] - 1\n       \
    \ end\n        local tmp, count = 1, 1\n        local i = 1\n        while i <\
    \ num_zeros do\n            if arr[i] <= 0 then\n                arr[count] =\
    \ -arr[i]\n                i = i + 1\n            else\n                count\
    \ = count + 1\n            end\n            i = i + 1\n        end\n        if\
    \ count > 0 then\n            tmp = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsw1iooaq.lua:92: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if #arr == 1 then\n   \
    \     -- single element\n        return arr\n    end\n    local arr_size, max_bit\
    \ = math.max(#arr, (max_bits and max_bits or 64))\n    if not max_bit then\n \
    \       -- too big, no bits to do splitting\n        return arr\n    end\n   \
    \ local res = {}\n    local idx = 0\n    local max_mask = max_bit - 1\n    local\
    \ max_idx = 0\n    while idx < arr_size do\n        -- find largest chunk\n  \
    \      local max_count = 0\n        for i = idx, #arr do\n            local chunk\
    \ = arr[idx:i]\n            if chunk == 0 then\n                -- no bits, just\
    \ take whole chunk\n                idx = i\n                break\n         \
    \   end\n            local count = 0\n            -- find how many ones in chunk\n\
    \            for j = 1, max_bit do\n                count = count + (chunk & (1\
    \ << (j - 1)))\n                if count > max_count then\n                  \
    \  max_count = count\n                    max_mask = j\n                end\n\
    \            end\n        end\n        -- process chunk\n        idx = idx + max_mask\
    \ + 1\n        if idx > arr_size then\n            -- not enough bits to do splitting\n\
    \            break\n        end\n        local chunk = arr[idx] -- get chunk\n\
    \        if chunk ~= 0 then\n            -- found some ones, add to result\n \
    \           for i = idx, #arr do\n                res[i] = arr[i]\n          \
    \  end\n            -- split result\n            idx = max_idx\n            for\
    \ i = idx, #arr do\n                local chunk = arr[i]\n                if chunk\
    \ == 0 then\n                    -- no bits, just take whole chunk\n         \
    \           res[i] = chunk\n                end\n            end\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmlje41dx.lua:26: function arguments expected near ']'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The below is equivalent\
    \ to:\n  -- local result = {}\n  -- local idx = 0\n  -- -- The below is the equivalent\
    \ to:\n  -- -- -- while idx <= #arr do\n  -- -- --    local value = arr[idx]\n\
    \  -- -- --    local num_ones = 0\n  -- -- --    while value:byte(1) and value:byte(1)\
    \ ~= 1 do\n  -- -- --        num_ones = num_ones + 1\n  -- -- --        value\
    \ = value:byte(1):bit(-1) + value:byte(1):bit(-1)\n  -- -- --    end\n  -- --\
    \ --    if num_ones == 1 then\n  -- -- --        result[idx] = value\n  -- --\
    \ --        idx = idx + 1\n  -- -- --    else\n  -- -- --        result[idx] =\
    \ num_ones\n  -- -- --        idx = idx + 1\n  -- -- --        result[idx] = value\n\
    \  -- -- --        idx = idx + 1\n  -- -- --    end\n  -- -- -- end\n  -- -- return\
    \ result\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpywq772wd.lua:45: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local sorted = {}\n  local\
    \ idx = 0\n  local result = 0\n  for i = 1, #arr do\n    local ones = tostring(arr:byte(i))\n\
    \    local numOnes = #ones\n    if numOnes == 0 then\n      result = idx\n   \
    \   idx = i\n      break\n    end\n    if numOnes == 1 then\n      sorted[idx]\
    \ = tonumber(ones)\n      idx = i\n    elseif numOnes == 2 then\n      if tonumber(ones)\
    \ >= tonumber(ones) then\n        sorted[idx] = tonumber(ones)\n        idx =\
    \ i\n      else\n        result = idx\n        idx = i\n      end\n    else\n\
    \      local decimal = tonumber(ones) / tonumber(numOnes)\n      sorted[idx] =\
    \ decimal\n      idx = i\n    end\n  end\n  if #sorted == 1 then\n    return sorted[1]\n\
    \  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1c4lwjaz.lua:13:\
    \ attempt to call a nil value (method 'byte')\nstack traceback:\n\t/tmp/tmp1c4lwjaz.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp1c4lwjaz.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local comp = function(a,\
    \ b) return a<b end\n  local tt = {}\n  for i=1,#arr do\n    local ones = string.sub(\
    \ tostring( arr[i] ), 1, 1 )\n    local power = tonumber( string.sub( tostring(\
    \ arr[i] ), 1, math.min( 8, #ones+1 ) ) )\n    table.insert( tt, power )\n   \
    \ table.insert( tt, ones )\n  end\n  table.sort( tt, comp )\n  local res = { }\n\
    \  for i=1,#arr do\n    local power = tt[i]\n    local ones = string.sub( tostring(\
    \ arr[i] ), math.min(8, #ones) )\n    local decimal = tonumber( ones )\n    table.insert(\
    \ res, decimal )\n  end\n  table.sort( res, comp )\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphdy428li.lua:9:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmphdy428li.lua:9:\
    \ in function </tmp/tmphdy428li.lua:9>\n\t[C]: in function 'table.sort'\n\t/tmp/tmphdy428li.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmphdy428li.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local ones, dec = 0\n \
    \   for i=1,#arr do\n        local count = arr[dec]\n        arr[dec] = arr[ones]\n\
    \        arr[ones] = count\n        dec = dec + (count > 0)\n    end\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadhgv5py.lua:12:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpadhgv5py.lua:12: in local 'candidate'\n\
    \t/tmp/tmpadhgv5py.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case\n  if #arr ==\
    \ 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5cjsy_o5.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local n = #arr\n    if\
    \ n == 0 then\n        return arr\n    end\n    local zero = tonumber(tostring(arr[0]))\n\
    \    if zero == 0 then\n        return arr\n    end\n    local negatives = zero\
    \ == negative(0) and not tonumber(tostring(arr[1]))\n    local decimal, power\
    \ = math.modf(math.abs(zero))\n    local decimal = decimal * 10\n    local power\
    \ = 10 - power\n    local decimals = tonumber(tostring(decimal - power))\n   \
    \ local result = {zero}\n    for i = 2, n do\n        local ones = tonumber(tostring(arr[i]))\n\
    \        if ones == 0 then\n            if negatives then\n                table.insert(result,\
    \ -arr[i])\n            else\n                table.insert(result, arr[i])\n \
    \           end\n        else\n            local decimal, power = math.modf(math.abs(ones))\n\
    \            local decimal = decimal * 10\n            local power = 10 - power\n\
    \            local decimals = tonumber(tostring(decimal - power))\n          \
    \  decimals = math.max(decimals, 1)\n            local power = math.pow(10, power)\
    \ -- power of 10\n            local decimals_power = tonumber(tostring(decimal))\n\
    \            decimals_power = math.max(decimals_power, 1)\n            local power\
    \ = tonumber(tostring(power))\n            power = math.max(power, 1)\n      \
    \      local decimals_power = tonumber(tostring(decimals_power))\n           \
    \ decimals_power = math.max(decimals_power, 1)\n            local decimals_power\
    \ = tonumber(tostring(decimals_power))\n            decimals_power = math.max(decimals_power,\
    \ 1)\n            local decimals_power = tonumber(tostring(decimals_power))\n\
    \            decimals_power = math.max(decimals_power, 1)\n            local decimals_power\
    \ = tonumber(tostring(decimals_power))\n            decimals_power = math.max(decimals_power,\
    \ 1)\n            local decimals_power = tonumber(tostring(decimals_power))\n\
    \            decimals_power = math.max(decimals_power, 1)\n            local decimals_power\
    \ = tonumber(tostring(decimals_power))\n            decimals_power = math.max(decimals_power,\
    \ 1)\n            local decimals_power = tonumber(tostring(decimals_power))\n\
    \            decimals_power = math.max(decimals_power, 1)\n            local decimals_power\
    \ = tonumber(tostring(decimals_power))\n            decimals_power = math.max(decimals_power,\
    \ 1)\n            local decimals_power = \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz6tnxsjv.lua:59: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local tmp = {}\n  local count\
    \ = {}\n  local num_ones = -1\n  for i = 1, #arr do\n    local tmp = tostring(arr[i])\n\
    \    local count[tmp] = count[tmp] or 0\n    count[tmp] = count[tmp] + 1\n  end\n\
    \  local sortedKeys = {}\n  local sortedVals = {}\n  local tmp = {}\n  for k,\
    \ v in pairs(count) do\n    local tmp = tostring(k)\n    sortedKeys[#sortedKeys+1]\
    \ = tmp\n    sortedVals[#sortedVals+1] = v\n  end\n  table.sort(sortedKeys)\n\
    \  table.sort(sortedVals)\n  for i = 1, #sortedVals do\n    sortedVals[i] = tostring(sortedVals[i])\n\
    \  end\n  for _, k in pairs(sortedKeys) do\n    arr[k] = arr[k] ^ num_ones\n \
    \ end\n  for _, k in pairs(sortedKeys) do\n    arr[k] = arr[k] ^ num_ones\n  end\n\
    \  for _, k in pairs(sortedVals) do\n    arr[k] = tostring(arr[k])\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8p1ypio9.lua:14: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Convert to bit array\n\
    \  local arr_bit_len = #arr\n  local arr_bit_arr = {}\n  for i=1, arr_bit_len\
    \ do\n    arr_bit_arr[#arr_bit_arr + 1] = bit.lshift(1, i)\n  end\n  -- Sort binary\
    \ array and convert to int\n  local arr_sorted\n  if #arr_bit_arr > 0 then\n \
    \   arr_sorted = {}\n    for i=1, #arr_bit_arr do\n      if arr_bit_arr[i] ==\
    \ 1 then\n        arr_sorted[#arr_sorted + 1] = i\n      end\n    end\n    arr_sorted\
    \ = table.concat(arr_sorted)\n  else\n    arr_sorted = arr\n  end\n  return table.sort(arr_sorted,\
    \ function(a, b)\n    return bit.rshift(a, 8) - bit.rshift(b, 8)\n  end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpln25whsc.lua:13:\
    \ attempt to index a nil value (global 'bit')\nstack traceback:\n\t/tmp/tmpln25whsc.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpln25whsc.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local num_ones\n  local num_zeros\n\
    \  local num_negative\n  local num_positive\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpniljttdb.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- convert each number to\
    \ binary representation\n  local bv = map(xlua.tostring(arr), function(x) return\
    \ xlua.byte(x % 2, 2) end)\n  -- get binary array length\n  local bv_len = #bv\
    \ - 1\n  -- create result array\n  local res = {}\n  -- sort based on number of\
    \ ones\n  for i = 1, bv_len do\n    res[i] = xlua.tostring(bv:sub(i))\n  end\n\
    \  -- sort based on decimal value\n  for i in 1, bv_len do\n    local idx = i\n\
    \    for j = i, bv_len, bv_len do\n      if bv:sub(j) == 1 and idx > j then\n\
    \        idx = j\n      end\n    end\n    res[i], res[idx] = res[idx], res[i]\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5jtd4nhk.lua:10:\
    \ attempt to index a nil value (global 'xlua')\nstack traceback:\n\t/tmp/tmp5jtd4nhk.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp5jtd4nhk.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  assert(type(arr) == \"table\"\
    )\n  if #arr == 0 then\n    return arr\n  end\n  local ones = {}\n  local decs\
    \ = {}\n  local len = #arr\n  for i = 1, #arr do\n    local bin = arr:sub(i, i):ldelim(\"\
    0\"):reverse()\n    ones[i] = #bin\n    decs[#decs+1] = bin\n  end\n  table.sort(decs,\
    \ function(a, b)\n    if a < b then\n      return -1\n    elseif a == b then\n\
    \      return 0\n    else\n      return 1\n    end\n  end)\n  local res = {}\n\
    \  for i = 1, len do\n    res[i] = decs[i]:sub(1, decs[i]:len()-1)\n  end\n  for\
    \ i = 1, #ones do\n    if ones[i] > 1 then\n      table.insert(res, decs[i])\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3nsknkly.lua:17:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp3nsknkly.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp3nsknkly.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr == 0 then\n    return\
    \ arr\n  end\n  local tmp_arr = {}\n  for i = 1, #arr do\n    local tmp_ones =\
    \ { }\n    for j = 1, #arr do\n      if arr[j] == i then\n        table.insert(tmp_ones,\
    \ 1)\n      else\n        table.insert(tmp_ones, 0)\n      end\n    end\n    if\
    \ #tmp_ones == 1 then\n      table.insert(tmp_arr, i)\n    else\n      local tmp_num\
    \ = 0\n      local tmp_sum = 0\n      for j = 1, #tmp_ones do\n        tmp_num\
    \ = tmp_num + tmp_ones[j]\n        tmp_sum = tmp_sum + tmp_num\n      end\n  \
    \    local tmp_power = math.pow(10, #tmp_ones)\n      local tmp_div = tmp_sum\
    \ / tmp_power\n      local tmp_sub = tmp_num / tmp_div\n      for j = 1, #tmp_ones\
    \ do\n        tmp_ones[j] = tmp_sub * tmp_power\n      end\n      for j = #tmp_ones,\
    \ 1, -1 do\n        table.insert(tmp_ones, 0)\n      end\n      table.insert(tmp_arr,\
    \ tmp_ones)\n    end\n  end\n  table.sort(tmp_arr)\n  -- Insert zero into last\
    \ of result array\n  if #tmp_arr > 0 then\n    table.insert(tmp_arr, 1, 0)\n \
    \ end\n  -- Convert to array (return array)\n  return tmp_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds,\
    \ 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  return arr.sort(function\
    \ (a, b) return a > b end)\nend\nassert(sort_array([1]) == [1], \"sort_array([1])\
    \ failed, expected [1]\")\nassert(sort_array([5]) == [5], 'sort_array([5]) failed,\
    \ expected [5]')\nassert(sort_array([1, 5]) == [1, 5], 'sort_array([1, 5]) failed,\
    \ expected [1, 5]')\nassert(sort_array([1, 0, 5]) == [1, 0, 5], 'sort_array([1,\
    \ 0, 5]) failed, expected [1, 0, 5]')\nassert(sort_array([3, 0, 0, 6]) == [3,\
    \ 0, 0, 6], 'sort_array([3, 0, 0, 6]) failed, expected [3, 0, 0, 6]')\nassert(sort_array([1,\
    \ 3, 0, 0, 6]) == [1, 3, 0, 0, 6], 'sort_array([1, 3, 0, 0, 6]) failed, expected\
    \ [1, 3, 0, 0, 6]')\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6sa0_53k.lua:11: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Based on the implementation\
    \ in the 'Algorithms' section of the 'Programming Interview' book.\n  -- https://en.wikipedia.org/wiki/Bit_array\n\
    \  local i, j, cur, p, curCount, count\n  -- Initialize the bitmap array (with\
    \ zeros)\n  -- To get the number of ones we start by iterating over the array\
    \ and count each 1 by adding\n  -- to an array the position of the first 1 encountered\
    \ so far.\n  local ones = {}\n  for i = 1, #arr do\n    cur = i\n    count = 0\n\
    \    while cur > 0 do\n      cur = cur >> 1\n      count = count + 1\n    end\n\
    \    ones[count] = cur\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_zf3goea.lua:39: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  return arr\n  -- Sort array\
    \ in place.\n  -- arr should be an array like [1, 0, 2, 3, 4] or [-2, -3, -4,\
    \ -5, -6].\n  -- The algorithm will sort like [2, 1, 4, 0, 3].\n  -- It will first\
    \ sort based on number of ones in binary representation.\n  -- Then it will sort\
    \ based on the decimal value.\n  -- It can be implemented like this.\n  -- >>>\
    \ a = [1, 5, 2, 3, 4]\n  -- >>> a = sort_array(a)\n  -- >>> a == [1, 2, 3, 4,\
    \ 5]\n  -- True\n  -- >>> a = [-2, -3, -4, -5, -6]\n  -- >>> a = sort_array(a)\n\
    \  -- >>> a == [-6, -5, -4, -3, -2]\n  -- True\n  -- >>> a = [1, 0, 2, 3, 4]\n\
    \  -- >>> a = sort_array(a)\n  -- >>> a == [0, 1, 2, 3, 4]\n  -- True\n  -- >>>\
    \ a = [-1]\n  -- >>> a = sort_array(a)\n  -- >>> a == [-1]\n  -- True\n  -- >>>\
    \ a = [0]\n  -- >>> a = sort_array(a)\n  -- >>> a == [0]\n  -- True\n  -- >>>\
    \ a = [1, 2, 3, 4]\n  -- >>> a = sort_array(a)\n  -- >>> a == [1, 2, 3, 4]\n \
    \ -- True\n  -- >>> a = [-1, 0, 1]\n  -- >>> a = sort_array(a)\n  -- >>> a ==\
    \ [0, 0, 1, 1, 2]\n  -- True\n  -- >>> a = [0, 1, 2, 3, 4]\n  -- >>> a = sort_array(a)\n\
    \  -- >>> a == [1, 2, 3, 4, 0]\n  -- True\n  -- >>> a = [-1, -2, -3, -4, -5]\n\
    \  -- >>> a = sort_array(a)\n  -- >>> a == [-4, -3, -2, -1, -5]\n  -- True\n \
    \ -- >>> a = [1, -1, 1, 0, 1]\n  -- >>> a = sort_array(a)\n  -- >>> a == [-1,\
    \ 1, 1, 0, 1]\n  -- True\n  -- >>> a = [1, 0, 1, -1, -2]\n  -- >>> a = sort_array(a)\n\
    \  -- >>> a == [1, -1, -2, -1, 0]\n  -- True\n  -- >>> a = [1, 0, 0, 0, -1]\n\
    \  -- >>> a = sort_array(a)\n  -- >>> a == [1, -1, 0, 0, -1]\n  -- True\n  --\
    \ >>> a = [1, 0, -1, 2, 0]\n  -- >>> a = sort_array(a)\n  -- >>> a == [1, -1,\
    \ 2, 0, 0]\n  -- True\n  -- >>> a = [1, 0, 0, 0, 1]\n  -- >>> a = sort_array(a)\n\
    \  -- >>> a == [1, -1, 0, 0, 1]\n  -- True\n  -- >>> a = [1, 0, 1, 2, 0]\n  --\
    \ >>> \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4tiialur.lua:74: 'end' expected (to close 'function' at line\
    \ 8) near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  return arr:map(function(x)\n\
    \    if x == 0 then\n      return x\n    end\n    local b = math.floor(x)\n  \
    \  local r = math.mod(x, 2)\n    if r == 1 then\n      return b\n    else\n  \
    \    return b + 1\n    end\n  end):sort(function(a,b) return a < b end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpldy48v77.lua:9:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpldy48v77.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpldy48v77.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local sorted = {}\n   \
    \ local len = #arr\n    for i=1,len do\n        local ones\n        if arr[i]\
    \ == 1 then\n            ones = i + 1\n        else\n            ones = arr[i]:bitwise()\n\
    \        end\n        sorted[ones] = arr[i]\n    end\n    table.sort(sorted, function(a,b)\n\
    \        return a[1] < b[1]\n    end)\n    local results = {}\n    for i=1,len\
    \ do\n        results[i] = sorted[i]\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpejop_82r.lua:16:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpejop_82r.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpejop_82r.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use binary search to\
    \ find the position of target number of ones in the\n  -- binary representation\
    \ of each integer in the array.\n  -- Using binary search gives us O(log(N)) performance\
    \ when compared to\n  -- sorting in Python using bubble sort and linear search.\n\
    \  -- We assume the input arr is non-negative.\n  -- We return the sorted array\
    \ in original order.\n  -- We use a variable `target` to keep track of the target\
    \ number of ones in\n  -- each binary representation of the integer.\n  -- The\
    \ variable `count` keeps track of how many ones in each binary number.\n  -- The\
    \ variable `max_count` keeps track of the largest number of ones in\n  -- each\
    \ binary representation of the integer.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgmwwxhc3.lua:34: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local tmp = arr[1]\n  \
    \  arr[1] = arr[1]\n    arr[1], arr[2] = arr[2], arr[1]\n    arr[2], arr[3] =\
    \ arr[3], arr[2]\n    arr[3], arr[4] = arr[4], arr[3]\n    arr[4], arr[5] = arr[5],\
    \ arr[4]\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzx5sc1v.lua:21:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {5, 2, 3, 4, 1}\nstack traceback:\n\t/tmp/tmpyzx5sc1v.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Use two stacks to keep\
    \ track of the current stack (for recursion) and the previous stack (for comparison)\n\
    \  local stack1, stack2 = {}, {}\n  -- Initialise the stack with the input array\n\
    \  for _, item in pairs(arr) do stack1[#stack1 + 1] = item end\n  -- While the\
    \ current stack is not empty, process each item (comparing it to the previous\
    \ item)\n  while stack1 do local element = stack1[1] -- Pop the current item from\
    \ stack\n    for _, other_item in pairs(stack2) do if element == other_item then\
    \ stack1[#stack1 + 1] = element else return stack1 end end\n    -- Push the current\
    \ item onto the previous stack\n    stack2[#stack2 + 1] = element\n    -- While\
    \ the previous stack is not empty, process the current item\n    while stack2\
    \ do local element = stack2[1]\n      -- Push the current item onto the current\
    \ stack\n      stack1[#stack1 + 1] = element\n      -- Pop the current item from\
    \ previous stack\n      stack2[#stack2 + 1] = stack2[1]\n    end\n    -- Pop the\
    \ last item from previous stack\n    stack2[#stack2 + 1] = stack2[1]\n  end\n\
    \  -- Return the stack1\n  return stack1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The second argument is\
    \ a predicate to indicate whether each element\n  -- is the zero or not\n  local\
    \ function is_zero(el)\n    return el == 0 and type(el) == 'number'\n  end\n \
    \ -- The third argument is a function to extract value from each element\n  local\
    \ function extract(el)\n    if is_zero(el) then\n      return el\n    else\n \
    \     return el * 2\n    end\n  end\n  -- The fourth argument is a function to\
    \ combine two elements\n  local function combine(el1, el2)\n    if type(el1) ==\
    \ 'number' and type(el2) == 'number' then\n      if el1 == 0 and el2 ~= 0 then\n\
    \        return el2\n      elseif el2 ~= 0 and el1 ~= 0 then\n        return el1\n\
    \      else\n        return el1 * el2\n      end\n    elseif type(el1) == 'table'\
    \ and type(el2) == 'table' then\n      return combine(el1[tostring(el1)], el2[tostring(el2)])\n\
    \    end\n    return el1\n  end\n  -- The fifth argument is a function to sort\
    \ a pair of elements\n  local function sort_pair(el1, el2)\n    if type(el1) ==\
    \ 'number' and type(el2) == 'number' then\n      if el1 == 0 and el2 ~= 0 then\n\
    \        return el2\n      elseif el2 ~= 0 and el1 ~= 0 then\n        return el1\n\
    \      else\n        return el1 * el2\n      end\n    elseif type(el1) == 'table'\
    \ and type(el2) == 'table' then\n      return sort_pair(el1[tostring(el1)], el2[tostring(el2)])\n\
    \    end\n    return el1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwm6esb6j.lua:66: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The solution is to sort\
    \ the array in ascending order with two pointers,\n  -- the first one to iterate\
    \ through the array from the beginning and\n  -- the second one to the end of\
    \ the array. As we iterate, we compare the\n  -- current element in the array\
    \ with the next one. If they are the same,\n  -- we swap the elements in the array\
    \ at these two pointers until we reach\n  -- a point where the element at these\
    \ pointers is the smallest element\n  -- of the array.\n  --\n  -- After swapping,\
    \ we increase the pointers until we reach the middle\n  -- position of the array.\
    \ The pointers are then moved closer to the\n  -- middle of the array.\n  --\n\
    \  -- The algorithm works even when the array contains negative numbers and\n\
    \  -- zeroes.\n  --\n  -- Time complexity: O(NlogN)\n  -- Space complexity: O(1)\n\
    \  local min_value = nil\n  local max_value = nil\n  local min_pointer = nil\n\
    \  local max_pointer = nil\n  local pointer = nil\n  local swap_index = nil\n\
    \  for _, element in ipairs(arr) do\n    local current_element = element\n   \
    \ local next_element = arr[pointer + 1]\n    -- If the next element is the same,\
    \ we exchange them and move pointer\n    -- forward until we reach an index that\
    \ is not the same.\n    if next_element == current_element then\n      -- If the\
    \ pointers reached the middle of the array, swap the\n      -- elements in the\
    \ array until we reach the middle position.\n      if pointer == #arr then\n \
    \       min_value = arr[min_pointer]\n        max_value = arr[max_pointer]\n \
    \     else\n        -- Swap the elements in the array at these two pointers.\n\
    \        swap_index = pointer\n        while swap_index < #arr and arr[swap_index]\
    \ == arr[swap_index + 1] do\n          swap_index += 1\n        end\n        arr[pointer],\
    \ arr[swap_index] = arr[swap_index], arr[pointer]\n      end\n      -- Move pointers\
    \ closer to the middle of the array.\n      min_pointer = pointer\n      max_pointer\
    \ = swap_index\n      pointer = swap_index\n      -- The current element is the\
    \ smallest of the elements at the\n      -- beginning and the end of the array.\n\
    \      min_value = current_element\n    else\n      -- Otherwise, we update the\
    \ smallest and largest elements accordingly.\n      -- If the current element\
    \ is not the smallest or largest of the array,\n      -- we update these values.\n\
    \      if current_element ~= min_value then\n        min_value = current_element\n\
    \      end\n      if next_element ~= max_value then\n        max_value = next_element\n\
    \      end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3uapf08n.lua:47: syntax error near '+'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local size = math.abs(arr[1])\n\
    \  if size == 0 then return arr end\n  local sorted_arr = {}\n  sorted_arr[1]\
    \ = arr[1]\n  local n = 1\n  while n > 1 do\n    local p = 2\n    local tmp\n\
    \    while p <= size do\n      local q = p + p\n      if q > size then\n     \
    \   q = size - 1\n      end\n      if tmp == 0 then tmp = arr[q] else tmp = arr[q]\
    \ + tmp end\n      if tmp > arr[q] then\n        arr[q] = tmp\n        arr[p]\
    \ = arr[q]\n        sorted_arr[p] = arr[q]\n        p = q\n      else\n      \
    \  arr[p] = arr[q]\n      end\n    end\n    n = n - 1\n  end\n  assert(size ==\
    \ 0)\n  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2n9hd0pa.lua:34:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmp2n9hd0pa.lua:34: in local 'candidate'\n\
    \t/tmp/tmp2n9hd0pa.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local i = 0\n  local max_count\
    \ = 0\n  local max_num = 0\n  local tmp = 0\n  local tmp_num = 0\n  while i <\
    \ #arr do\n    local count = 0\n    local num = 0\n    while i < #arr and arr[i]\
    \ == 1 do\n      count = count + 1\n      i = i + 1\n    end\n    num = arr[i]\n\
    \    if count == max_count then\n      tmp = num\n      tmp_num = i\n    elseif\
    \ count > max_count then\n      if tmp_num == i then\n        tmp = count\n  \
    \      tmp_num = i\n      end\n      max_count = count\n      max_num = num\n\
    \    end\n  end\n  if max_num == 0 then\n    return nil\n  end\n  local ans =\
    \ {}\n  for i = 1, max_num + 1 do\n    ans[i] = max_num\n  end\n  for i = 1, #tmp\
    \ do\n    ans[tmp[i]] = i\n  end\n  return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local arr1 = {}\n  local\
    \ arr2 = {}\n  local arr3 = {}\n  for i, v in ipairs(arr) do\n    arr1[v] = true\n\
    \  end\n  for i, v in ipairs(arr) do\n    arr2[v] = i\n  end\n  local count =\
    \ 0\n  for i, v in ipairs(arr) do\n    if arr1[v] then\n      arr3[count] = v\n\
    \      count = count + 1\n    end\n  end\n  for i, v in ipairs(arr) do\n    if\
    \ arr2[v] ~= i then\n      arr3[count] = v\n      count = count + 1\n    end\n\
    \  end\n  return arr3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5bfe7w1j.lua:37:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {0=1, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp5bfe7w1j.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local results = {}\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local bin = dec2bin(arr[i])\n    n = n + #bin\
    \ + 1\n    table.insert(results, dec2bin(bin))\n  end\n  table.sort(results, function(a,\
    \ b) return #a == #b end)\n  for i = 1, #arr do\n    bin = dec2bin(arr[i])\n \
    \   arr[i] = dec2bin(table.unpack(results, i, #results))\n  end\n  assert(n ==\
    \ #arr)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppq9r4qbv.lua:12:\
    \ attempt to call a nil value (global 'dec2bin')\nstack traceback:\n\t/tmp/tmppq9r4qbv.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmppq9r4qbv.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  return function(t) if type(t)\
    \ ~= 'number' then return t end\n  local zeros = { }\n  local ones = { }\n  local\
    \ sorted = { }\n  local i = 1\n  while i < #arr do\n    local x = arr[i]\n   \
    \ if x == 0 then table.insert(zeros, x) else table.insert(ones, x) end\n    i\
    \ = i + 1\n  end\n  i = i\n  while i < #ones do\n    table.insert(sorted, #sorted\
    \ + #ones)\n    table.insert(sorted, ones[i])\n    i = i + 1\n  end\n  i = i\n\
    \  while i < #zeros do\n    table.insert(sorted, #sorted + #zeros)\n    table.insert(sorted,\
    \ zeros[i])\n    i = i + 1\n  end\n  return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1x36vdkz.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  return arr:gsub(\"(%d%d*)\"\
    , function(s) return tonumber(s) end):gsub(\"%d*\", function(s) return tonumber(s)\
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_pw82rdu.lua:9:\
    \ attempt to call a nil value (method 'gsub')\nstack traceback:\n\t/tmp/tmp_pw82rdu.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_pw82rdu.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Based on code of Python's\
    \ sort function\n  -- See http://rosettacode.org/wiki/Sorting_algorithms/Counting_sort\n\
    \  -- Based on code of Javascript sort function\n  -- See http://stackoverflow.com/a/2660979\n\
    \  -- See http://stackoverflow.com/a/2817887\n  -- See http://www.peterbe.com/plog/uniq\n\
    \  -- See http://www.peterbe.com/plog/quicksort\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9orycuh9.lua:30: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- sort in descending order\n\
    \  local tmp = arr\n  tmp = tmp:reverse()\n  -- sort according to the number of\
    \ 1s\n  local counts = {}\n  for i = 1, #tmp do\n    local count = counts[tmp[i]]\n\
    \    if count == nil then\n      count = 1\n    else\n      count = count + 1\n\
    \    end\n    counts[tmp[i]] = count\n  end\n  for i = 1, #tmp do\n    local count\
    \ = counts[tmp[i]]\n    if count > 1 then\n      tmp:insert(i, count - 1)\n  \
    \  end\n  end\n  return tmp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjplknbj9.lua:11:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpjplknbj9.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpjplknbj9.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local sorted_arr = {}\n\
    \    local num_ones = 0\n    local num_tens = 0\n    local num_hundreds = 0\n\
    \    for i = 1, #arr do\n        if arr[i] > 0 then\n            num_ones = num_ones\
    \ + 1\n            if num_ones % 2 == 0 then\n                num_tens = num_tens\
    \ + (arr[i] % 10)\n                if num_tens == 10 then\n                  \
    \  num_hundreds = num_hundreds + 1\n                    num_tens = 0\n       \
    \         else\n                    num_ones = 0\n                end\n      \
    \      else\n                num_tens = num_tens + 1\n            end\n      \
    \  else\n            num_ones = 0\n        end\n    end\n    for i = 1, #arr do\n\
    \        sorted_arr[i] = arr[i]\n    end\n    local temp_ones = 0\n    local temp_tens\
    \ = 0\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            if arr[i]\
    \ % 10 ~= 0 then\n                if temp_tens == 0 then\n                   \
    \ temp_tens = arr[i]\n                else\n                    if temp_tens ~=\
    \ arr[i] then\n                        if temp_ones == 0 then\n              \
    \              temp_ones = arr[i]\n                        else\n            \
    \                if temp_ones ~= arr[i] then\n                               \
    \ sorted_arr[i] = temp_ones / 10\n                                sorted_arr[i\
    \ + 1] = temp_tens / 10\n                                break\n             \
    \               end\n                        end\n                    end\n  \
    \                  temp_tens = arr[i]\n                end\n            else\n\
    \                if temp_tens == 0 then\n                    temp_ones = arr[i]\n\
    \                else\n                    temp_tens = temp_tens - arr[i]\n  \
    \              end\n            end\n        end\n    end\n    if temp_ones >\
    \ 0 then\n        if temp_ones % 2 == 0 then\n            if temp_tens == 0 then\n\
    \                temp_tens = temp_ones\n            else\n                if temp_ones\
    \ ~= temp_tens then\n                    if temp_ones == 1 then\n            \
    \            sorted_arr[1] = temp_ones\n                    else\n           \
    \             sorted_arr[1] = temp_ones / 2\n                        sorted_arr[2]\
    \ = temp_ones / 2\n                    end\n                end\n            end\n\
    \        else\n            if temp_tens == 0 then\n                temp_tens =\
    \ temp_ones\n            else\n                if temp_ones ~= temp_tens then\n\
    \                    if temp_ones == 1 then\n                        sorted_arr[1]\
    \ = temp_ones\n                    else\n                        sorted_arr[1]\
    \ = temp_ones / 2\n                        sorted_arr[2] = temp_ones / 2\n   \
    \                 end\n                end\n            end\n        end\n   \
    \ end\n    if temp_tens > 0 then\n        if temp_tens == 10 then\n          \
    \  if num_hundreds > 0 then\n                sorted_arr[#sorted_arr + 1] = (num_hundreds\
    \ - 1) * 10\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppdszilow.lua:111: 'end' expected (to close 'if' at line 95)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local counts = {}\n  local\
    \ i = 1\n  local n = 1\n  while i <= #arr do\n    local count = math.floor((arr[i\
    \ - 1] >> n) + 1)\n    if counts[count] == nil then\n      counts[count] = i\n\
    \    end\n    i = i + count - 1\n    n = n + count + 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptsal5z9c.lua:34: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function bin_sort(t)\n\
    \    return #t\n  end\n  local function dec_sort(t)\n    table.sort(t)\n    local\
    \ dec = 0\n    for i = 1, #t do\n      if t[i] < 0 then\n        dec = dec + 1\n\
    \      end\n    end\n    if dec > 0 then\n      table.sort(t, function(a, b)\n\
    \        return dec - tonumber(string.format(\"%.0d\", a))\n      end)\n    end\n\
    \    return t\n  end\n  local function count_ones(t)\n    local n = 0\n    for\
    \ i = 1, #t do\n      if t[i] == 1 then\n        n = n + 1\n      end\n    end\n\
    \    return n\n  end\n  local function cmp(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    return a_ones > b_ones then\n      or a_ones\
    \ < b_ones then\n      or a[1] == b[1]\n    end\n  end\n  return dec_sort(arr:gt(-1))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn51jv1dn.lua:39: 'end' expected (to close 'function' at line\
    \ 36) near 'then'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n   local counts = {}\n   for\
    \ i=1,#arr do\n      if counts[tostring(arr[i])] then\n         counts[tostring(arr[i])]\
    \ = counts[tostring(arr[i])] + 1\n      else\n         counts[tostring(arr[i])]\
    \ = 1\n      end\n   end\n   local res = {}\n   for i=1,#arr do\n      if counts[tostring(arr[i])]\
    \ > 1 then\n         table.insert(res, arr[i])\n      end\n   end\n   return table.sort(res)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp893a2g9a.lua:29:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmp893a2g9a.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n\tlocal num_ones = 0\n\tfor\
    \ i = 1,#arr do\n\t\tlocal x = tostring(arr[i])\n\t\tnum_ones = 1 + num_ones\n\
    \t\tif #x > 0 then\n\t\t\tarr[i], arr[#arr] = arr[#arr], x\n\t\tend\n\tend\n\t\
    return table.sort(arr)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ compare string with number\nstack traceback:\n\nRan 1 tests in 0.000 seconds,\
    \ 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort numbers in ascending\
    \ order according to their binary representation\n  -- using Kata's algorithm.\n\
    \  -- If the number is odd then add 1 to the number before sorting it\n  -- to\
    \ prevent it from being sorted as -4 < -1 as 1 is a negative number.\n  -- We\
    \ then reverse the resulting number array\n  -- e.g. for [8, 1, 8, 2, 3] the sorted\
    \ array is [2, 3, 1, 8, 8]\n  -- This algorithm is O(N^2)\n  local reversed_array\
    \ = {}\n  for i = #arr, 1, -1 do\n    if i % 2 == 1 then\n      table.insert(reversed_array,\
    \ math.floor((math.abs(arr[i-1]) + 1)/2))\n    else\n      table.insert(reversed_array,\
    \ arr[i])\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3cyfp56a.lua:38: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if arr == nil then return\
    \ nil end\n  if #arr == 0 then return arr end\n  local i = 1\n  local tmp = {}\n\
    \  local flags = {}\n  flags[1] = 0\n  while i <= #arr do\n    local tmp_val =\
    \ arr[i]\n    flags[tmp_val] = 1\n    i = i + 1\n  end\n  local i = 1\n  while\
    \ i <= #arr do\n    local tmp_val = arr[i]\n    if flags[tmp_val] == 1 then\n\
    \      table.insert(tmp, tmp_val)\n      flags[tmp_val] = 0\n      i = i + 1\n\
    \    else\n      if tmp_val > arr[i - 1] and tmp_val < arr[i + 1] then\n     \
    \   table.insert(tmp, tmp_val)\n        i = i + 1\n      else\n        if tmp_val\
    \ > arr[i + 1] then\n          tmp[#tmp + 1] = tmp_val\n        end\n      end\n\
    \    end\n  end\n  return tmp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0zae33h.lua:44:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpf0zae33h.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local function binary_search(rest_arr,\
    \ key, lower, upper)\n        local mid = (lower + upper)//2\n        local middle\
    \ = arr[mid]\n        if rest_arr[mid] == key then\n            return mid\n \
    \       elseif key < middle then\n            return binary_search(rest_arr, key,\
    \ mid + 1, upper)\n        else\n            return binary_search(rest_arr, key,\
    \ lower, mid - 1)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbxz_ah9k.lua:34: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if arr == nil then return\
    \ nil end\n    if #arr == 0 then return arr end\n    local count = [0]\n    local\
    \ arr = setmetatable(arr, { __index = function(t, i)\n        count = count[i\
    \ - 1] or 0\n        local bin = string.sub(tostring(i), 0, 1)\n        count\
    \ = count + 1\n        if count == 1 then\n            t[i] = 0\n        else\n\
    \            t[i] = count\n        end\n        return t\n    end})\n    table.sort(arr)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3ozzmef7.lua:11: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr == 0 then\n    return\
    \ arr\n  end\n  local tmp_arr = {}\n  for i = 1, #arr do\n    tmp_arr[tostring(arr[i])]\
    \ = arr[i]\n  end\n  local result = {}\n  for k, v in pairs(tmp_arr) do\n    result[#result\
    \ + 1] = v\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpai67z8vx.lua:27:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpai67z8vx.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n   if #arr == 1 then\n    \
    \  return arr\n   end\n   local counts = {}\n   for i = 1, #arr do\n      local\
    \ num = arr[i]\n      counts[math.ceil(math.log2(num))] = counts[math.ceil(math.log2(num))]\
    \ + 1 if counts[math.ceil(math.log2(num))] > 0 end\n   end\n   local counts =\
    \ counts\n   table.sort(counts)\n   -- print(counts)\n   local output = {}\n \
    \  for i = 1, #counts do\n      -- print(i)\n      local index = counts[i]\n \
    \     output[#output + 1] = arr[i]\n      for j = 0, i do\n         arr[i] = arr[j]\n\
    \      end\n      arr[#arr + index + 1] = 0\n   end\n   -- print(output)\n   return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoppxi91b.lua:15: 'then' expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if #arr == 1 then\n   \
    \     return arr\n    end\n    local result = {}\n    local tmp = {}\n    local\
    \ count = 0\n    for i = 1, #arr do\n        count = count + tostring(arr[i])\n\
    \    end\n    if count == 1 then\n        for i = 1, #arr do\n            tmp[i]\
    \ = arr[i]\n        end\n        table.sort(tmp)\n        for i = 1, #tmp do\n\
    \            result[i] = tmp[i]\n        end\n        return result\n    end\n\
    \    local j = 1\n    local i = 1\n    for i = 1, #arr do\n        local k = i\n\
    \        while k ~= 1 do\n            k = k >> 1\n            j = j + 1\n    \
    \    end\n        if tostring(arr[i]) >= tostring(1) then\n            result[j]\
    \ = arr[i]\n            j = j + 1\n        end\n        if tostring(arr[i]) >\
    \ tostring(1) then\n            while j <= count do\n                result[j]\
    \ = arr[i]\n                j = j + 1\n            end\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2b2i935.lua:53:\
    \ expected: \n{1, 2, 4, 3, 5}\nactual: \n{\n    1,\n    3=5,\n    4=5,\n    5=5,\n\
    \    6=5,\n    7=5,\n    8=5,\n    9=5,\n    10=5,\n    11=5,\n    12=5,\n   \
    \ 13=5,\n    14=5,\n    15=5,\n    17=2,\n    20=3,\n    23=4\n}\nstack traceback:\n\
    \t/tmp/tmph2b2i935.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local sorted = {}\n   \
    \ for _, i in ipairs(arr) do\n        sorted[#sorted+1] = i\n    end\n    for\
    \ _,v in ipairs(sorted) do\n        sorted[_] = v\n    end\n    return sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1qc95ha.lua:22:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpn1qc95ha.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local sorted = {}\n  local\
    \ sort = table.insert\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv62gym27.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use bitwise operators\
    \ for efficiency, it takes two integers and returns a number\n  -- >>> bitwise_and(1,\
    \ 0)\n  -- 1\n  -- >>> bitwise_or(1, 2)\n  -- 3\n  -- >>> bitwise_or(1, 1)\n \
    \ -- 1\n  -- >>> bitwise_xor(1, 0)\n  -- 1\n  -- >>> bitwise_xor(1, 1)\n  -- 0\n\
    \  -- >>> bitwise_not(1)\n  -- 0\n  local one_bits = arr:gmatch(\"%d*\"):byte()\n\
    \  local dec = (\n    ((one_bits - 1) ^ one_bits) ~= 0\n  and ((one_bits - 1)\
    \ ^ one_bits) or\n    (\n      (one_bits - 1) < (one_bits - 1) - (one_bits - 1)\
    \ ^ ((one_bits - 1) & (one_bits - 1))\n    and\n      (one_bits - 1) < (one_bits\
    \ - 1) - (one_bits - 1) ^ (one_bits - 1) ^ ((one_bits - 1) & (one_bits - 1))\n\
    \    )\n  and (((one_bits - 1) & (one_bits - 1)) - one_bits * dec) or 1)\n  return\
    \ arr[#arr]:byte()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdlyem90j.lua:22:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpdlyem90j.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpdlyem90j.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local is_ascending, max_val\
    \ = is_ascending_number(arr)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp072k0rk6.lua:24: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  return table.sort(function(a,\
    \ b) return compare(arr[a], arr[b]) end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qckktno.lua:9:\
    \ bad argument #1 to 'sort' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp9qckktno.lua:9: in local 'candidate'\n\t/tmp/tmp9qckktno.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local count = {}\n  local\
    \ index = {}\n  local length = 0\n  for i=1,#arr do\n    table.insert(count,arr[i])\n\
    \    index = table.concat(index)\n    length = table.concat(length) \n  end\n\
    \  if length == 0 then\n    return arr\n  end\n  for i=1,length do\n    local\
    \ max = 0\n    for j=1,#count do\n      if count[j] ~= 0 then\n        if count[j]\
    \ >= max then\n          max = count[j]\n          index[i] = j\n        end\n\
    \      end\n    end\n    local maxi = 0\n    for j=1,#count do\n      if count[j]\
    \ == max then\n        table.insert(count,0)\n        index[i] = j\n      end\n\
    \    end\n    local temp\n    if max > 0 then\n      for j=1,#count do\n     \
    \   count[j] = count[j] - max\n        if count[j] == 0 then\n          temp =\
    \ j\n        end\n      end\n      for j=1,#count do\n        if count[j] > 0\
    \ then\n          count[temp] = count[temp] + count[j]\n          index[i] = temp\n\
    \          break\n        end\n      end\n    end\n  end\n  local ret = {}\n \
    \ for i=1,length do\n    table.insert(ret,index[i])\n  end\n  return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpybnvf1yg.lua:15:\
    \ bad argument #1 to 'concat' (table expected, got number)\nstack traceback:\n\
    \t/tmp/tmpybnvf1yg.lua:15: in local 'candidate'\n\t/tmp/tmpybnvf1yg.lua:64: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- base case\n  if #arr ==\
    \ 1 then\n    return arr\n  else\n    -- split arr\n    local left, right = arr:sub(1,\
    \ #arr - 1)\n    -- recurse\n    local tmp = sort_array(left)\n    tmp = sort_array(tmp)\n\
    \    -- merge\n    return tmp:merge(right)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyans2os_.lua:14:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpyans2os_.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpyans2os_.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if not arr or #arr <= 1\
    \ then\n        return arr\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8s6wn8xn.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local num_ones = -1\n \
    \   local num_zeros = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprlhtzlpd.lua:25: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local bin = require \"bit.big\"\
    \n  local result = {}\n  local m = {}\n  for i = 1, #arr do\n    local bins =\
    \ bin.pack(arr[i])\n    local l = #bins\n    m[#m + 1] = #bins\n    for k = 0,\
    \ l - 1 do\n      -- Store the count of 1 in the current bin\n      if not m[bins[k]]\
    \ then\n        m[bins[k]] = i\n      else\n        -- Replace the count with\
    \ new one\n        m[bins[k]] = m[bins[k]] + 1\n      end\n    end\n    result[#result\
    \ + 1] = bin.unpack(bins, 0)\n  end\n  -- Return an array of sorted values\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdmi5d2cg.lua:13:\
    \ attempt to call a nil value (field 'pack')\nstack traceback:\n\t/tmp/tmpdmi5d2cg.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpdmi5d2cg.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local counts = {}\n   \
    \ for i = 1,#arr do\n        counts[arr[i]] = counts[arr[i]] + 1 if arr[i] then\
    \ 1 else 0\n    end\n    local sorted_arr, index = {}, 1\n    for i = 1,#arr do\n\
    \        sorted_arr[index] = i\n        if counts[arr[i]] == 1 then\n        \
    \    table.insert(index, i)\n        end\n    end\n    return sorted_arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpag2psnov.lua:11: unexpected symbol near '1'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local function is_negative(n)\n\
    \        return n < 0\n    end\n    local function is_zero(n)\n        return\
    \ n == 0\n    end\n    local function is_positive(n)\n        return n > 0\n \
    \   end\n    local function is_odd(n)\n        return n % 2 == 1\n    end\n  \
    \  local function is_two(n)\n        return n == 1 or n == 0\n    end\n    local\
    \ function is_three(n)\n        return n == 1 or n == 0 or n == 2\n    end\n \
    \   local function is_one(n)\n        return n == 1\n    end\n    local function\
    \ to_binary(n)\n        if n < 0 then\n            return (-n).bit_reverse()\n\
    \        else\n            return n:bit_reverse()\n        end\n    end\n    local\
    \ function get_magnitude(n)\n        if n < 0 then\n            return -1 * to_binary(n)\n\
    \        else\n            return to_binary(n)\n        end\n    end\n    local\
    \ function get_digit_count(n)\n        local dc = 1\n        while n and n % 2\
    \ == 0 do\n            n = n / 2\n            dc = dc + 1\n        end\n     \
    \   return dc\n    end\n    local function get_digits(n)\n        local digits\
    \ = {}\n        for i = 1, math.floor(math.log2(n)) do\n            local d =\
    \ n % 10\n            n = n / 10\n            digits[i] = d\n        end\n   \
    \     return digits\n    end\n    local function get_number_of_zeros(n)\n    \
    \    if n <= 0 then\n            return 0\n        end\n        local num_zeros\
    \ = 1\n        while n > 0 do\n            if n % 2 == 0 then\n              \
    \  num_zeros = num_zeros + 1\n            end\n            n = n / 2\n       \
    \ end\n        return num_zeros\n    end\n    local function get_first_digits(n)\n\
    \        local first_digits = {}\n        for i = 1, math.floor(math.log2(n))\
    \ do\n            local d = n % 10\n            n = n / 10\n            first_digits[i]\
    \ = d\n        end\n        return first_digits\n    end\n    local function get_second_digits(n)\n\
    \        local second_digits = {}\n        for i = 1, math.floor(math.log2(n))\
    \ do\n            local d = n % 10\n            n = n / 10\n            second_digits[i]\
    \ = d\n        end\n        return second_digits\n    end\n    local function\
    \ get_third_digits(n)\n        local third_digits = {}\n        for i = 1, math.floor(math.log2(n))\
    \ do\n            local d = n % 10\n            n = n / 10\n            third_digits[i]\
    \ = d\n        end\n        return third_digits\n    end\n    local function get_fourth_digits(n)\n\
    \        local fourth_digits = {}\n        for i = 1, math.floor(math.log2(n))\
    \ do\n            local d = n % 10\n            n = n / 10\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa01ottkv.lua:120: 'end' expected (to close 'for' at line 103)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We can't use table.sort\
    \ for this, because sorting by value will lead\n  -- to wrong order. For example,\
    \ sort_array([10, 9, 2, 1, 3]) will return\n  -- (1, 2, 3, 9, 10), but expected\
    \ output should be (1 2 3 4 9).\n  local function cmp(a,b)\n    return b - a --\
    \ Lexicographic sort.\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpypqi68p4.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    -- The code below might\
    \ seem a little strange, but all it does is convert\n    -- each non-negative\
    \ number to binary and compare the binary values.\n    local binaries = {}\n \
    \   for i = 1, #arr do\n        local bin = tostring(arr[i])\n        -- The binary\
    \ string should only contain 1 character (1 bit)\n        -- If it's empty or\
    \ contains more that 1 character then it is\n        -- not a binary number.\n\
    \        -- If the binary string contains only zeroes then the number is\n   \
    \     -- 0.\n        if bin ~= \"\" then\n            -- The bitstring contains\
    \ more than one character (1 bit)\n            -- it must be more than one character\
    \ long.\n            if #bin > 1 then\n                -- The binary string has\
    \ more than 1 character (1 bit).\n                -- Convert it to an integer\
    \ and get the binary representation\n                -- of the number.\n     \
    \           binaries[i] = tonumber(bin)\n            else\n                --\
    \ The binary string contains only 1 character (1 bit).\n                -- It\
    \ is empty. No need to convert it.\n                binaries[i] = 0\n        \
    \    end\n        end\n    end\n    -- Convert the binary values to decimal\n\
    \    local decimal_values = {}\n    for i = 1, #binaries do\n        local bin\
    \ = binaries[i]\n        -- Multiply each bit by 2 and add it to the decimal number\n\
    \        -- if the bit is a 1.\n        -- Example: 0010 -> 5\n        -- Example:\
    \ 0100 -> 6\n        -- Example: 1000 -> 16\n        -- Example: 1100 -> 25\n\
    \        if bin == 1 then\n            -- If the bit is a 1, then the number is\
    \ multiplied by 10\n            -- otherwise by 2.\n            -- Example: 0010\
    \ -> 5\n            -- Example: 0100 -> 6\n            -- Example: 1000 -> 16\n\
    \            -- Example: 1100 -> 25\n            decimal_values[i] = bin * 10\n\
    \        else\n            -- If the bit is not a 1, the number is just added\
    \ to the decimal\n            -- number.\n            -- Example: 0010 -> 5\n\
    \            -- Example: 0100 -> 6\n            -- Example: 1000 -> 16\n     \
    \       -- Example: 1100 -> 25\n            decimal_values[i] = bin\n        end\n\
    \    end\n    -- Sort the decimal values in ascending order\n    return table.sort(decimal_values)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5srqvxst.lua:69:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmp5srqvxst.lua:69:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local counts = terralib.newlist()\n\
    \    for _, v in ipairs(arr) do\n        counts:insert(v)\n    end\n    counts:sort(function(lhs,\
    \ rhs)\n        local ls = tonumber(lshift(lshift(lhs, 1), 1))\n        local\
    \ rs = tonumber(lshift(rshift(rhs, 1), 1))\n        if ls > rs then\n        \
    \    return 1\n        elseif ls < rs then\n            return -1\n        else\n\
    \            return 0\n        end\n    end)\n    return array.replicate(#counts,\
    \ -1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9u_0yqea.lua:9:\
    \ attempt to index a nil value (global 'terralib')\nstack traceback:\n\t/tmp/tmp9u_0yqea.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9u_0yqea.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if #arr == 0 then\n   \
    \     return arr\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8xyd8_kd.lua:26: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if type(arr) ~= 'table' then\n\
    \    error('first argument should be a table')\n  end\n  local function is_one(i)\n\
    \    if i > 0 then\n      local s = math.floor((math.log(i) + math.log2(0.5))/math.log2(2))\n\
    \      return (s - math.mod(s, 2)) ~= 0\n    else\n      return false\n    end\n\
    \  end\n  local ones = {}\n  for i = 1, #arr do\n    if is_one(i) then\n     \
    \ table.insert(ones, i)\n    end\n  end\n  table.sort(ones, function(a, b)\n \
    \   local count = 0\n    for _, val in ipairs(ones) do\n      if arr[val] ~= 0\
    \ then\n        count = count + 1\n      end\n    end\n    return count\n  end)\n\
    \  for i, val in ipairs(ones) do\n    arr[val] = ones[i]\n  end\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcpf6o6w7.lua:14:\
    \ attempt to call a nil value (field 'log2')\nstack traceback:\n\t/tmp/tmpcpf6o6w7.lua:14:\
    \ in local 'is_one'\n\t/tmp/tmpcpf6o6w7.lua:22: in local 'candidate'\n\t/tmp/tmpcpf6o6w7.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local n = #arr\n  local index\
    \ = {}\n  local counts = {}\n  for i = 1, n do\n    counts[arr[i]] = counts[arr[i]]\
    \ + 1 or 1\n    index[counts[arr[i]]] = i\n  end\n  -- We sort based on counts\
    \ until the last count is same.\n  local i = 0\n  while i < n do\n    local count\
    \ = 1\n    local j = i\n    while j < n and counts[arr[j]] > count do\n      count\
    \ = counts[arr[j]]\n      j = j + 1\n    end\n    arr[i], arr[j] = arr[j], arr[i]\n\
    \    i = j - 1\n  end\n  -- We reverse index\n  -- This algorithm is slightly\
    \ inefficient, but much better than sorting a table.\n  -- See http://blog.plover.com/prog/sorting-arrays-in-swift/.\n\
    \  local j = 1\n  while j <= n do\n    local i = index[j]\n    index[j] = index[i]\n\
    \    index[i] = j\n    j = j + 1\n  end\n  -- Now we reverse arr\n  for i = 1,\
    \ n do\n    arr[i] = arr[index[i]]\n  end\n  -- And reverse index\n  for i = 1,\
    \ n do\n    index[i] = index[index[i]]\n  end\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpecj44p09.lua:13:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpecj44p09.lua:13: in local 'candidate'\n\t/tmp/tmpecj44p09.lua:52: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr == 0 then return\
    \ arr end\n  local ones = {}\n  local twos = {}\n  local decimal = {}\n  for i\
    \ = 1,#arr do\n    local bin = string.format(\"%b\", arr[i])\n    local count\
    \ = 0\n    for j = 1,#bin do\n      if bin[j] == '1' then\n        count = count\
    \ + 1\n      else\n        if count == 1 then\n          ones[#ones + 1] = i\n\
    \        else\n          twos[#twos + 1] = i\n          break\n        end\n \
    \     end\n    end\n    if count == 1 then\n      decimal[#decimal + 1] = i\n\
    \    end\n  end\n  local index = {}\n  local index2 = 0\n  local index3 = 1\n\
    \  while index2 < #ones and index3 < #twos do\n    if decimal[index2] > decimal[index3]\
    \ then\n      table.insert(index, ones[index2])\n      index2 = index2 + 1\n \
    \   elseif decimal[index2] < decimal[index3] then\n      table.insert(index, twos[index3])\n\
    \      index3 = index3 + 1\n    else\n      index2 = index2 + 1\n      index3\
    \ = index3 + 1\n    end\n  end\n  if #index == 0 then\n    return arr\n  elseif\
    \ index2 == #ones then\n    table.insert(index, ones[index2])\n    return table.concat(sort_array(arr),\
    \ index)\n  elseif index3 == #twos then\n    table.insert(index, twos[index3])\n\
    \    return table.concat(sort_array(arr), index)\n  else\n    return table.concat(sort_array(arr),\
    \ index)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgtch5i1r.lua:14:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpgtch5i1r.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpgtch5i1r.lua:63: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local counts = {}\n   \
    \ for idx = 1, #arr do\n        if arr[~idx] then\n            table.insert(counts,\
    \ 0)\n        end\n        counts[#counts + 1]\n    end\n    return table.sort(counts,\
    \ compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpba5gmenh.lua:15: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  return arr:map(function (x)\n\
    \    if x ~= 0 then\n      local bin = bit.bor(bit.lshift(x, 32), bit.rshift(x,\
    \ 32))\n      local count = math.max(bin:gmatch(\".\"), 10)\n      if count ==\
    \ 0 then\n        return bit.rshift(x, -32)\n      else\n        return x - count\
    \ * 32\n      end\n    else\n      return x\n    end\n  end):sort(function (x,\
    \ y)\n    local xs = x:to_dec()\n    local ys = y:to_dec()\n    if xs == ys then\n\
    \      return x\n    elseif xs == 0 then\n      return -y\n    elseif ys == 0\
    \ then\n      return x\n    elseif xs < ys then\n      return -1\n    elseif xs\
    \ > ys then\n      return 1\n    end\n  end)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_t7h95vy.lua:9:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmp_t7h95vy.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_t7h95vy.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    local counts = {}\n   \
    \ for _ in arr:gmatch\"%d+\" do table.insert(counts, 0) end\n    table.sort(counts,\
    \ function(a,b) return counts[b] - counts[a] end)\n    return table.concat(arr)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvz324z4l.lua:10:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpvz324z4l.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpvz324z4l.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n\tlocal arr2 = {}\n\tlocal\
    \ index = 1\n\tlocal count = 0\n\tlocal temp\n\tlocal max = 0\n\tlocal i\n\tlocal\
    \ j\n\tfor i in pairs(arr) do\n\t\tcount = 1\n\t\ttemp = 0\n\t\twhile count >\
    \ 0 do\n\t\t\ttemp = count % 2\n\t\t\tif temp == 1 then\n\t\t\t\tcount = count\
    \ / 2\n\t\t\telse\n\t\t\t\tcount = count * 2\n\t\t\tend\n\t\tend\n\t\tarr2[#arr2\
    \ + 1] = i\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp80w2ohhi.lua:43: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- This can be done in O(N)\
    \ with O(1) memory allocation\n  -- The idea is to store the number's binary representation\
    \ with 1 or 0\n  -- bits per position, and store them in an array with bits in\
    \ each\n  -- position corresponding to the number's position in its binary representation\n\
    \  local counts = {}\n  for i = 1, #arr do\n    table.insert(counts, math.floor(math.log2(arr[i])))\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0ubvo1kv.lua:31: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Store binary representation\
    \ for each element.\n  local b = arr\n  local b_size = #b\n  local bin_table =\
    \ new_tab(b_size, b_size)\n  for i = 1, b_size do\n    b[i] = \"0\"\n  end\n \
    \ for i = 1, b_size do\n    -- Store a binary representation of the element.\n\
    \    bin_table[b[i]] = tostring(i)\n  end\n  -- Sort them.\n  -- Sum a number\
    \ in binary to another in binary.\n  -- e.g. 1100 => 1 + 2 + 1 + 0 + 1 = 0101\
    \ + 10 + 1 + 1 + 1 = 1110\n  local sorted_arr = {}\n  local current_bin_sum =\
    \ 0\n  local i\n  for i = 1, b_size do\n    local s = bin_table[b[i]]\n    local\
    \ j\n    for j = 1, #sorted_arr do\n      if s <= sorted_arr[j] then\n       \
    \ break\n      else\n        -- Append a binary representation of the element\
    \ to the sorted array.\n        sorted_arr[#sorted_arr + 1] = bin_table[b[i]]\n\
    \      end\n    end\n    if j == #sorted_arr then\n      -- Append a binary representation\
    \ of the element to the sorted array.\n      sorted_arr[#sorted_arr + 1] = bin_table[b[i]]\n\
    \    end\n  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8xatelvi.lua:12:\
    \ attempt to call a nil value (global 'new_tab')\nstack traceback:\n\t/tmp/tmp8xatelvi.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp8xatelvi.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n    if #arr == 1 then\n   \
    \     return arr\n    end\n    if #arr > 1 then\n        local half = math.floor(#arr\
    \ / 2)\n        local left_arr = arr:sub(1, half)\n        local right_arr = arr:sub(half,\
    \ 1)\n        return sort_array(left_arr) + sort_array(right_arr)\n    end\n \
    \   local zeros = 0\n    local ones = 0\n    local i = 0\n    while i < #arr do\n\
    \        local x = arr[i]\n        if x == 1 then\n            ones = ones + 1\n\
    \        elseif x == 0:\n            zeros = zeros + 1\n        else\n       \
    \     break\n        end\n        i = i + 1\n    end\n    local max_ones = #arr\
    \ - ones\n    if max_ones > 1 then\n        return sort_array(arr:sub(1, max_ones))\n\
    \    end\n    return max_ones and arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjfv92wk5.lua:25: 'then' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local ones = {}\n  for i=1,#arr\
    \ do\n    local bin = to_binary(arr[i])\n    local len = #bin\n    local cnt =\
    \ 0\n    for j = 1,len do\n      local n = tonumber(bin[j])\n      if n then cnt=cnt+1\
    \ end\n    end\n    if #ones>0 then\n      local k = 1\n      local m = tonumber(to_binary(ones[k]))\n\
    \      if m then cnt=cnt+1 end\n    end\n    ones[k] = tonumber(bin:sub(1,len-1))\n\
    \    arr[i] = cnt\n  end\n  table.sort(arr)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx3tkt81c.lua:11:\
    \ attempt to call a nil value (global 'to_binary')\nstack traceback:\n\t/tmp/tmpx3tkt81c.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpx3tkt81c.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local sorted_arr = {}\n \
    \ local sorted_arr_size = #arr\n  local sorted_arr_count = 1\n  local sorted_arr_position\
    \ = 1\n  \n  while sorted_arr_position < sorted_arr_size do\n    local current_val\
    \ = arr[sorted_arr_position]\n    \n    -- check if current value in arr is 0\n\
    \    local count = 0\n    local position = 1\n    local i\n    for i = sorted_arr_position\
    \ + 1, sorted_arr_size do\n      local new_val = arr[i]\n      \n      if new_val\
    \ == 0 then\n        count = count + 1\n      else\n        break\n      end\n\
    \    end\n    \n    -- if count is even and current value is not 0 then \n   \
    \ -- append current value to sorted arr and increment position\n    if count %\
    \ 2 == 1 and current_val != 0 then\n      table.insert(sorted_arr, current_val)\n\
    \      sorted_arr_position = sorted_arr_position + 1\n    end\n    \n    -- if\
    \ count is odd and current value is 0 then\n    -- increment position\n    if\
    \ count % 2 == 0 then\n      sorted_arr_position = sorted_arr_position + 1\n \
    \   end\n  end\n  \n  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmqkcbkmo.lua:33: 'then' expected near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  if #arr == 0 then return\
    \ arr end\n  local pos = 0\n  local count = 1\n  while count > 0 do\n    pos =\
    \ pos + count\n    count = count - arr[pos]\n  end\n  table.sort(arr, function(a,\
    \ b) return (a < b) end)\n  while count > 0 do\n    pos = pos - count\n    count\
    \ = count + arr[pos]\n  end\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpje7jazqt.lua:27:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpje7jazqt.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
