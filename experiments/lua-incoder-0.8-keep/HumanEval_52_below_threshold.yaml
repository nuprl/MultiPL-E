name: HumanEval_52_below_threshold
language: lua
prompt: "-- Return True if all numbers in the list l are below threshold t.\n-- >>>\
  \ below_threshold([1, 2, 4, 10], 100)\n-- True\n-- >>> below_threshold([1, 20, 4,\
  \ 10], 5)\n-- False\nlocal function below_threshold(l, t)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = below_threshold\n\
  \    lu.assertEquals(candidate({1, 2, 4, 10}, 100), true)\n    lu.assertEquals(candidate({1,\
  \ 20, 4, 10}, 5), false)\n    lu.assertEquals(candidate({1, 20, 4, 10}, 21), true)\n\
  \    lu.assertEquals(candidate({1, 20, 4, 10}, 22), true)\n    lu.assertEquals(candidate({1,\
  \ 8, 4, 10}, 11), true)\n    lu.assertEquals(candidate({1, 8, 4, 10}, 10), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  assert(type(t) == 'number')\n  for i = 1, #l do\n    if l[i] < t\
    \ then return false end\n  end\n  return true\nend", "  local threshold = 0\n\
    \  if type(l) ~= 'table' then\n    threshold = t\n    t = l\n    l = table()\n\
    \  end", "  return l ~= nil and t and l < t\nend", "  for i, v in ipairs(l) do\n\
    \    if v < t then\n      return false\n    end\n  end\n  return true\nend", " \
    \ for i, v in ipairs(l) do\n    if v < t then\n      return false\n    end\n \
    \ end\n  return true\nend", "  return #l == 0 and t > 0 or t > #l and #l >= #l\
    \ - t\nend", "    for _, v in ipairs(l) do\n        if v < t then return false\
    \ end\n    end\n    return true\nend", "  assert(#l >= 2, \"below_threshold expected\
    \ a list with at least 2 elements\")\n  assert(t >= 0, \"below_threshold expected\
    \ a non-negative threshold\")\n  assert(t <= 100, \"below_threshold expected a\
    \ threshold less than 100\")", "  assert(t > 0, 'Threshold must be positive')\n\
    \  local num_thresholds = 0\n  for i = 1, #l do\n    local n = tonumber(l[i])\n\
    \    if n == nil then\n      error(\n        string.format(\n          'Could\
    \ not convert [%s] to numeric value', l[i]))\n    end\n    if n < t then\n   \
    \   num_thresholds = num_thresholds + 1\n    end\n  end\n  return num_thresholds\
    \ == 0\nend", "  local n = #l\n  for i = 1, n do\n    if l[i] < t then return\
    \ false end\n  end\n  return true\nend", "    local ts = table.remove(l, 1)\n\
    \    return (ts < t)\nend", "  local n = 0\n  for i = 1, #l do\n    local v =\
    \ l[i]\n    if v < t then return false end\n    n = n + 1\n  end\n  return n ==\
    \ #l\nend", "  local is_negative = false\n  for i = #l + 1, 1 do\n    if l[i]\
    \ < t then\n      is_negative = true\n    end\n  end\n  return not is_negative\n\
    end", "   local _,i = select('#', l)\n   for _ = 1, i do\n      if l[_] < t then\n\
    \         return false\n      end\n   end\n   return true\nend", "   for i = 1,\
    \ #l do\n      if l[i] < t then\n         return false\n      end\n   end\n  \
    \ return true\nend", "  return l[1] < t\nend", "  if #l == 0 then return end\n\
    \  return #l > 0 and t >= l[1]\nend", "  return l and #l == 0 and t or #l > 0\
    \ and t*l >= t\nend", "  if #l == 0 then return false end\n  local lsum = sum(l)\n\
    \  if lsum < t then return false end\n  for i = 1, #l do\n    if l[i] < t then\
    \ return false end\n  end\n  return true\nend", "  -- We use an inline for loop\
    \ to avoid unnecessary allocations.\n  for _, x in ipairs(l) do\n    if x >= t\
    \ then return false end\n  end\n  return true\nend", "  local cnt = 0\n  for _,n\
    \ in ipairs(l) do\n    if n <= t then cnt = cnt + 1 end\n  end\n  return cnt ==\
    \ 0\nend", "  local ok = true\n  for _, num in ipairs(l) do\n    if num < t then\n\
    \      ok = false\n      break\n    end\n  end\n  return ok\nend", "  for i, v\
    \ in ipairs(l) do\n    if v < t then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local n = #l\n  for i = 1, n do\n    if l[i] <= t then return\
    \ false end\n  end\n  return true\nend", "  local _ = {n = 0}\n  for _, value\
    \ in ipairs(l) do _.n = _.n + 1 end\n  return _['n'] < t end\nend", "  assert(type(l)\
    \ == 'table' and next(l))\n  for _,v in ipairs(l) do\n    if v < t then return\
    \ false end\n  end\n  return true\nend", "  local count = 0\n  for _, _ in pairs(l)\
    \ do\n    count = count + 1\n    if _ < t then\n      count = count + 1\n    end\n\
    \  end\n  return count < 2\nend", "    local s = 0\n    for i,v in ipairs(l) do\n\
    \        s = s + v\n        if s < t then return false end\n    end\n    return\
    \ true\nend", "  local i = 0\n  local n = 1\n  while i < #l do\n    local v =\
    \ l[i]\n    if v > t then\n      n = n + 1\n    end\n    i = i + 1\n  end\n  return\
    \ n == 1\nend", "  assert(type(l) == 'table')\n  assert(type(t) == 'number')\n\
    \  return not find_threshold(l, t)\nend", "  local n = #l\n  local m = math.max(n\
    \ / 10, 1)\n  -- n / 10 gives us the number of full numbers we want to check.\n\
    \  -- math.max() will return the maximum integer in that range.\n  return #l ==\
    \ m and math.max(l) < t\nend", "    local i, total = 1, #l\n    while i < total\
    \ do\n        if l[i] < t then\n            return false\n        end\n      \
    \  i = i + 1\n    end\n    return true\nend", "   for _, value in ipairs(l) do\n\
    \      if value < t then\n         return false\n      end\n   end\n   return\
    \ true\nend", "  local n = #l\n  if n == 0 then\n    return false\n  end\n  if\
    \ n == 1 then\n    return l[1] <= t\n  end\n  for i, v in ipairs(l) do\n    if\
    \ not below_threshold(t, v) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  -- base case\n  if #l == 0 then return false end\n  -- base case\n\
    \  if l[1] < t then return false end\n  -- recursive case\n  return below_threshold(l[#l\
    \ - 1], t)\nend", "  assert(#l ~= 0, 'below_threshold requires a non-empty list')\n\
    \  assert(t > 0, 'threshold must be positive')\n  local sum = 0\n  for _, v in\
    \ ipairs(l) do\n    sum = sum + v\n  end\n  return sum < t\nend", "  for _, v\
    \ in ipairs(l) do\n    if v <= t then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  return l[2] + t >= #l\nend", "  local n = #l\n  if t == 0 then\n\
    \    return n == 0\n  end\n  for i = 1, n do\n    if l[i] <= t then\n      return\
    \ false\n    end\n  end\n  return true\nend", "   for i = 1, #l do\n      if t\
    \ < l[i] then\n         return false\n      else\n         if t > l[i] then\n\
    \            return true\n         else\n            -- if we get here, l[i] is\
    \ between t and t+1\n         end\n      end\n   end\n   return false\nend", " \
    \ return #l == 0 or #l == 1 or (#l > 0 and #l[i] == t and l[i] < t)\nend", " \
    \ assert(#l > 0)\n  for i = 1, #l do\n    if l[i] < t then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local i = 1\n  for _ in pairs(l) do\n\
    \    if l[i] < t then\n      return false\n    end\n    i = i + 1\n  end\n  return\
    \ true\nend", "  for _,v in ipairs(l) do\n    if v < t then\n      return false\n\
    \    end\n  end\n  return true\nend", "   assert(type(l) == 'table')\n   assert(type(t)\
    \ == 'number')\n   return all(function(x) return x < t end, l)\nend", "  for i,\
    \ n in ipairs(l) do\n    if n <= t then return false end\n  end\n  return true\n\
    end", "  local lower = t\n  local upper = l[1]\n  for _,v in ipairs(l) do\n  \
    \  if lower > v then\n      lower = v\n    end\n    if upper < v then\n      upper\
    \ = v\n    end\n  end\n  return lower < upper\nend", "    for i = 1, #l do\n \
    \       if l[i] <= t then\n            return false\n        end\n    end\n  \
    \  return true\nend", "  return l == nil or t < l:map(function(x) return x + 1\
    \ end)\nend", "    local count = 0\n    for i = 1, #l do\n        if l[i] <= t\
    \ then\n            count = count + 1\n        end\n    end\n    return count\
    \ == 0\nend", "    return #l == 0 or\n        not l[1] or l[1] < t\nend\n</code>\n\
    <|/ a tags=lua,arrays |>\n<| a |>\n<code>", "    local s = #l\n    for i=1,s do\n\
    \        if l[i] < t then\n            return false\n        end\n    end\n  \
    \  return true\nend", "  local count = {}\n  for i = 1, #l do\n    local num =\
    \ l[i]\n    count[num] = count[num] + 1 or 1\n    if count[num] <= t then\n  \
    \    return false\n    end\n  end\n  return true\nend", "  for _, value in ipairs(l)\
    \ do\n    if value >= t then\n      return false\n    end\n  end\n  return true\n\
    end", "  return l ~= nil and #l == 0 or t < 0\nend", "  for _, i in ipairs(l)\
    \ do\n    if i < t then\n      return false\n    end\n  end\n  return true\nend",
  "  for i = 1, #l do\n    if l[i] < t then return false end\n  end\n  return true\n\
    end", "    local count = 0\n    for i, v in ipairs(l) do\n        if v < t then\n\
    \            return false\n        end\n        count = count + 1\n    end\n \
    \   return count == 0\nend", "  local count = 0\n  for i, v in ipairs(l) do\n\
    \    if v <= t then count = count + 1 end\n  end\n  return count == 0\nend", " \
    \   local num_sum = 0\n    local count = 0\n    for i,v in ipairs(l) do\n    \
    \    if v < t then\n            num_sum = num_sum + v\n            count = count\
    \ + 1\n        end\n    end\n    if count ~= 1 then\n        return false\n  \
    \  end\n    return true\nend", "   for _, v in ipairs(l) do\n      if v < t then\n\
    \         return false\n      end\n   end\n   return true\nend", "  for i, v in\
    \ ipairs(l) do\n    if v < t then return false end\n  end\n  return true\nend",
  "  assert(type(l) == \"table\")\n  for i = 1, #l do\n    if l[i] < t then\n    \
    \  return false\n    end\n  end\n  return true\nend", "  local function is_negative(num)\n\
    \    return num < 0\n  end\n  -- TODO: Use `select` here?\n  for i, v in ipairs(l)\
    \ do\n    if v < t then\n      return false\n    end\n    if v > t then\n    \
    \  return true\n    end\n    if is_negative(v) then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local count = 0\n  for _ in pairs(l) do count\
    \ = count + 1 end\n  return count < t\nend", "    local n = #l\n    for i = 1,\
    \ n do\n        if l[i] <= t then\n            return false\n        end\n   \
    \ end\n    return true\nend", "  local count = 0\n  for _, e in ipairs(l) do\n\
    \    if e < t then\n      return false\n    end\n    count = count + 1\n  end\n\
    \  return count == 0\nend", "  local is_negative = false\n  if l > t then\n  \
    \  is_negative = true\n    l = -l\n  end\n  for _, v in ipairs(l) do\n    if v\
    \ < t then\n      return false\n    end\n  end\n  return not is_negative\nend",
  "  local lower = t\n  local upper = math.max(l, lower)\n  return lower <= upper\n\
    end", "  assert(type(l) == 'table')\n  for i, v in pairs(l) do\n    if v < t then\
    \ return false end\n  end\n  return true\nend", "  local count = 0\n  for _, v\
    \ in ipairs(l) do\n    count = count + 1\n    if v < t then\n      return false\n\
    \    end\n  end\n  return count == 0\nend", "  local result = false\n  for _,\
    \ v in ipairs(l) do\n    if v < t then\n      result = true\n      break\n   \
    \ end\n  end\n  return result\nend", "  local found = false\n  for i = 1, #l do\n\
    \    if l[i] <= t then\n      return false\n    end\n    found = true\n  end\n\
    \  return found\nend", "  return l == nil or t <= totable(l)\nend", "   for _,\
    \ v in ipairs(l) do\n      if v < t then return false end\n   end\n   return true\n\
    end", "  if #l == 0 then return false end\n  local v = l[1]\n  for i = 2, #l do\n\
    \    if v < t then\n      return false\n    end\n    v = l[i]\n  end\n  return\
    \ true\nend", "  for i, v in ipairs(l) do\n    if v < t then return false end\n\
    \  end\n  return true\nend", "  assert(type(l) == 'table' and #l > 0, 'below_threshold\
    \ requires a non-empty list of numbers')\n  assert(type(t) == 'number' and t >\
    \ 0, 'below_threshold requires a threshold value greater than 0')\n  local n =\
    \ 0\n  for _, v in ipairs(l) do\n    local n = math.max(n - v, 0)\n  end\n  return\
    \ n < t\nend", "  local n = #l\n  local ok = true\n  for i = 1, n do\n    if not\
    \ l(i - 1) or l(i - 1) < t then ok = false end\n  end\n  return ok\nend", "  local\
    \ is_below = function (x) x >= t end\n  return #l == 0 and false or all(is_below(l))\n\
    end", "  local count = 0\n  for _, v in ipairs(l) do count = count + v < t end\n\
    \  return count == #l\nend", "    local ret = {}\n    for _, v in ipairs(l) do\n\
    \        if v < t then\n            table.insert(ret, v)\n        end\n    end\n\
    \    return #ret == 0\nend", "  local count = 0\n  for _, e in ipairs(l) do\n\
    \    if e < t then\n      return false\n    end\n    count = count + 1\n  end\n\
    \  return count == 0\nend", "  for _, i in ipairs(l) do\n    if i < t then return\
    \ false end\n  end\n  return true\nend", "  assert(type(l) == \"table\")\n  for\
    \ _, v in ipairs(l) do\n    assert(type(v) == \"number\")\n    if v < t then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local n = 1\n  for\
    \ i = 1, #l do\n    local x = l[i]\n    if x > t then\n      return false\n  \
    \  end\n    n = n * x + 1\n  end\n  n = n * t\n  return n < 1\nend", "   -- Return\
    \ True if all numbers in the list l are below threshold t.\n   for _, value in\
    \ pairs(l) do\n      if value < t then\n         return false\n      end\n   end\n\
    \   return true\nend", "  local ln = #l\n  if ln < t then\n    return false\n\
    \  end\n  for i = 1, t do\n    if l[i] > ln then\n      return false\n    end\n\
    \  end\n  return true\nend", "  return all(function(n)\n    return n < t\n  end,\
    \ l)\nend", "  local i = 1\n  while i <= #l do\n    local value = l[i]\n    if\
    \ not (value < t) then\n      return false\n    end\n    i = i + 1\n  end\n  return\
    \ true\nend", "  local function is_under_threshold(x)\n    return x <= t\n  end\n\
    \  return #l == 0 or all(_G.max(t,l[i]) <= l[i] for i = 1, #l)\nend", "  local\
    \ rs = terralib.newlist()\n  for _, v in ipairs(l) do\n    if not less_than(t,\
    \ v) then\n      rs:insert(false)\n    else\n      rs:insert(true)\n    end\n\
    \  end\n  return unpack(rs)\nend", "  assert(#l > 0, \"list l should not be empty\"\
    )\n  return #l == 0 or l[1] <= t\nend", "    local count = 0\n    for _, v in\
    \ ipairs(l) do\n        if v < t then\n            count = count + 1\n       \
    \ end\n    end\n    return count == 0\nend", "  local ok = false\n  for i = 1,\
    \ #l do\n    if l[i] > t then\n      return false\n    end\n  end\n  return ok\n\
    end", "  local count = t\n  local test\n  while count > 1 do\n    count = 0\n\
    \    test = function()\n      for i = 1, #l do\n        if l[i] < t then count\
    \ = count + 1 end\n      end\n    end\n    timer.start() or test()\n  end\n  return\
    \ count < 1\nend", "  assert(#l == 1, 'All elements must be of type number')\n\
    \  return #l == 0 and t >= 0 or t <= #l and t >= l[1]\nend", "  local ok = true\n\
    \  local n = #l\n  for i = 1, n do\n    if not l[i] < t then\n      ok = false\n\
    \      break\n    end\n  end\n  return ok\nend", "  for _, v in ipairs(l) do\n\
    \    if v < t then\n      return false\n    end\n  end\n  return true\nend", " \
    \ -- If the list contains only one number or if the last number is higher\n  --\
    \ than the threshold, then no numbers are below the threshold.\n  if #l <= 1 then\n\
    \    return false\n  elseif l[#l] == t then\n    return true\n  else\n    return\
    \ false\n  end\nend", "  local result = true\n  for i, v in ipairs(l) do\n   \
    \ result = result and (v < t)\n  end\n  return result\nend", "  for _, v in ipairs(l)\
    \ do\n    if v < t then\n      return false\n    end\n  end\n  return true\nend",
  "   for i = 1, #l do\n      if not l[i] <= t then\n         return false\n     \
    \ end\n   end\n   return true\nend", "  local count = 0\n  for _ in pairs(l) do\n\
    \    count = count + 1\n    if _ < t then return false end\n  end\n  return count\
    \ == 0\nend", "  for _, val in ipairs(l) do\n    if val < t then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local n = #l\n  local i = 0\n\
    \  while i < n do\n    if l[i] <= t then return false end\n    i = i + 1\n  end\n\
    \  return true\nend", "  local min_l = math.min(l)\n  if min_l < t then\n    return\
    \ false\n  else\n    return l == nil or min_l < t or min_l <= t\n  end\nend",
  "  if #l == 0 then return false end\n  return l[1] < t or l[#l] <= t\nend", "  local\
    \ ok, result = pcall(function() return all(l < t) end)\n  if ok then\n    return\
    \ result\n  else\n    return false\n  end\nend", "  if #l == 0 then\n    return\
    \ true\n  end\n  local ok, err = pcall(function()\n    local v = {}\n    for _,\
    \ item in ipairs(l) do\n      v[item] = true\n    end\n    for _, item in ipairs(t)\
    \ do\n      v[item] = false\n    end\n    return #v == 0\n  end)\n  return ok\
    \ and err == nil\nend", "   local count = 0\n   for _, value in ipairs(l) do\n\
    \      if value <= t then\n         count = count + 1\n      end\n   end\n   return\
    \ count == 0\nend", "  local num_list = terralib.newlist()\n  for _, elem in ipairs(l)\
    \ do\n    if elem > t then\n      return false\n    end\n    table.insert(num_list,\
    \ elem)\n  end\n  return true\nend", "  -- Return True if all numbers in the list\
    \ l are below threshold t.\n  return all(big <= t or math.abs(big - t) <= t for\
    \ big in l)\nend", "  assert(type(l) == \"table\")\n  assert(type(t) == \"number\"\
    )\n  for _, x in ipairs(l) do\n    if x > t then return false end\n  end\n  return\
    \ true\nend", "  for _, x in ipairs(l) do\n    if x < t then\n      return false\n\
    \    end\n  end\n  return true\nend", "  for i = 1, #l do\n    if l[i] < t then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local r\n  for i,\
    \ v in ipairs(l) do\n    if not (r and (v <= t)) then\n      r = true\n      break\n\
    \    end\n  end\n  return r\nend", "  for _,v in ipairs(l) do\n    if v < t then\
    \ return false end\n  end\n  return true\nend", "  local n = #l\n  if n == 0 then\
    \ return false end\n  -- Only return true if all the numbers in the list are smaller\
    \ than t.\n  for i=1,n do\n    if not (l[i] < t) then return false end\n  end\n\
    \  return true\nend", "  return l < t\nend", "  local _, __, min_count = unpack(l)\n\
    \  return min_count < t\nend", "  local n = 0\n  for _, v in ipairs(l) do\n  \
    \  n = n + 1\n    if v < t then return false end\n  end\n  return n == 0\nend",
  "  return next(l) < t\nend", "  local i = 0\n  while i <= #l do\n    if l[i] > t\
    \ then return false end\n    i = i + 1\n  end\n  return true\nend", "    for _,\
    \ elt in ipairs(l) do\n        if elt < t then\n            return false\n   \
    \     end\n    end\n    return true\nend", "   if t <= 0 then error(\"threshold\
    \ is negative\") end\n   for i = 1, #l do\n      if l[i] <= t then return false\
    \ end\n   end\n   return true\nend", "  if #l == 0 then return false end\n  if\
    \ #l == 1 then return t < l[1] end\n  if t == 0 then return false end\n  for i\
    \ = 1, #l do\n    if l[i] > t then\n      return false\n    end\n  end\n  return\
    \ true\nend", "   for _, v in ipairs(l) do if v < t then return false end end\n\
    \   return true\nend", "    local function is_below(t, v)\n        if t < 0 then\n\
    \            return false\n        end\n        local lv = tonumber(v)\n     \
    \   if lv == nil then\n            return false\n        end\n        if lv <\
    \ t then\n            return true\n        end\n        return false\n    end\n\
    \    return all(function(elt)\n                return is_below(t, elt)\n     \
    \       end, l)\nend", "    for _, v in ipairs(l) do\n        if v <= t then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ count = 0\n  for _, _ in ipairs(l) do\n    count = count + 1\n    if count ==\
    \ t then return false end\n  end\n  return true\nend", "  if #l == 0 then return\
    \ false end\n  for _, v in ipairs(l) do\n    if v <= t then\n      return false\n\
    \    end\n  end\n  return true\nend", "  assert(type(l) == \"table\")\n  assert(type(t)\
    \ == \"number\")\n  assert(t > 0)\n  for i, v in ipairs(l) do\n    if v <= t then\
    \ return false end\n  end\n  return true\nend", "  if #l == 0 then\n    return\
    \ false\n  end\n  if #l == 1 then\n    return l[1] < t\n  end\n  local curr =\
    \ l[1]\n  for i = 2, #l do\n    if curr < t then\n      return false\n    end\n\
    \    curr = l[i]\n  end\n  return true\nend", "  local n = #l\n  for i = 1, n\
    \ do\n    if l[i] > t then return false end\n  end\n  return true\nend", "  return\
    \ not (l >= t)\nend", "\tlocal lcount = #l\n\tif lcount == 0 then return false\
    \ end\n\tlocal lmin = l[1]\n\tfor i = 2, lcount do\n\t\tif l[i] < lmin then return\
    \ false end\n\tend\n\treturn true\nend", "  if #l == 0 then return false end\n\
    \  local first = l[1]\n  for i = 1, #l do\n    local current = l[i]\n    if current\
    \ < t then return false end\n    if current ~= first then return false end\n \
    \ end\n  return true\nend", "  local sum = 0\n  for _, v in ipairs(l) do\n   \
    \ sum = sum + v\n  end", "  for _, value in ipairs(l) do\n    if value < t then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local i = 0\n  while\
    \ true do\n    if l[i] <= t then\n      i = i + 1\n      else\n      return false\n\
    \    end\n  end\nend", "  return l ~= nil and all(function(n)\n    return n <\
    \ t\n  end)\nend", "  return l ~= nil and t < #l\nend", "  assert(#l >= 2, \"\
    list must be at least length 2\")\n  local m = table.max(l)\n  return m <= t \n\
    end", "    local lower = t\n    local upper = t + 1\n    local is_below = true\n\
    \    for _, x in ipairs(l) do\n      if x < lower or x > upper then is_below =\
    \ false end\n    end\n    return is_below\nend", "  local count = 0\n  for i,v\
    \ in ipairs(l) do\n    if v < t then\n      return false\n    end\n    count =\
    \ count + 1\n  end\n  return count == 0\nend", "  if #l == 0 then return false\
    \ end\n  local sum = 0\n  for _, x in ipairs(l) do sum = sum + x end\n  return\
    \ sum < t\nend", "  local ret = 0\n  for _, v in ipairs(l) do\n    if v < t then\
    \ ret = 1 end\n  end\n  return ret\nend", "  return #l == 0 or (t*math.abs(#l)\
    \ - #l) / #l <= t\nend", "  for _, v in ipairs(l) do\n    if v < t then\n    \
    \  return false\n    end\n  end\n  return true\nend", "    local s = #l\n    for\
    \ i = 1,s do\n        if l[i] < t then\n            return false\n        end\n\
    \    end\n    return true\nend", "    local ok = false\n    for i = 1, #l do\n\
    \        if l[i] < t then\n            ok = true\n            break\n        end\n\
    \    end\n    return ok\nend", "  return #l == 0 or\n    (#l == 1 and l[1] < t)\n\
    end", "    local n = 1\n    for i = 1, #l do\n        if l[i] > t then\n     \
    \       n = n + 1\n        end\n    end\n    return n == #l\nend", "  assert(type(l)\
    \ == 'table', 'below_threshold: l is not a table')\n  assert(type(t) == 'number',\
    \ 'below_threshold: t is not a number')\n  assert(t >= 0, 'below_threshold: t\
    \ must be positive')\n  \n  local max = 0\n  for _, v in pairs(l) do\n    if v\
    \ < t then\n      return false\n    end\n    if v > max then\n      max = v\n\
    \    end\n  end\n  return true\nend", "  local n = 0\n  for i = 1, #l do\n   \
    \ if l[i] < t then n = n + 1; end\n  end\n  return n == 0\nend", "  local ok,\
    \ err = p:call(function(l)\n    local ok = terralib.newlist()\n    for _, x in\
    \ ipairs(l) do\n      ok[#ok + 1] = x\n    end\n    return terralib.newlist({true,\
    \ false}):contains({true, false}):map(function(x)\n      return x >= t\n    end)\n\
    \  end, l)\n  return not ok and tostring(err) or ok\nend", "  local s = ''\n \
    \ for _, v in ipairs(l) do\n    if v < t then s = s .. '1' else s = s .. '0' end\n\
    \  end\n  return s
  "  if l == nil then\n    return false\n  end\n  for i = 1, #l do\n    if l[i] <\
    \ t then\n      return false\n    end\n  end\n  return true\nend", "  local counts\
    \ = {}\n  for i, v in ipairs(l) do\n    counts[v] = counts[v] or 0\n    counts[v]\
    \ = counts[v] + 1\n  end\n  for v in pairs(counts) do\n    if counts[v] < t then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local count = 0\n\
    \  for _, v in ipairs(l) do count = count + v end\n  return count < t\nend", " \
    \ local count = #l\n  for i = 1, count do\n    if l[i] < t then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    for _, elem in ipairs(l) do\n\
    \        if elem < t then\n            return false\n        end\n    end\n  \
    \  return true\nend", "  local count = 0\n  local v = l[1]\n  for i = 2, #l do\n\
    \    if v < t then\n      count = count + 1\n      v = l[i]\n    end\n  end\n\
    \  return count == #l\nend", "\tlocal i = 1\n\tfor i = 1, #l do\n\t\tif l[i] <\
    \ t then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  local n\
    \ = #l\n  for _, v in ipairs(l) do\n    if v < t then\n      return false\n  \
    \  end\n  end\n  return true\nend", "  local n = #l\n  local i = 0\n  while i\
    \ < n do\n    if not (l[i] < t) then break end\n    i = i + 1\n  end\n  return\
    \ i == n\nend", "   for _, val in ipairs(l) do\n      if val < t then return false\
    \ end\n   end\n   return true\nend", "   if l == nil then\n      return\n   end",
  "  local n = 1\n  while n < #l do\n    if l[n] <= t then\n      n = n + 1\n    else\n\
    \      return false\n    end\n  end\n  return true\nend", "    local count = 0\n\
    \    for _, v in ipairs(l) do\n        if v <= t then count = count + 1 end\n\
    \    end\n    return count == 0\nend", "  local len = #l\n  for i = 1, len do\n\
    \    if l[i] < t then\n      return false\n    end\n  end\n  return true\nend",
  "  return l and math.max(t,1) >= l and t > 1\nend", "  local _n = tonumber(l)\n\
    \  for i = 1, #l do\n    if _n < t then\n      return false\n    end\n    _n =\
    \ math.ceil(_n)\n  end\n  return true\nend", "  -- The code below is copied from\
    \ lua-users mailing list\n  -- http://lua-users.org/lists/lua-l/2009-02/msg00171.html\n\
    \  local n = 1\n  for _, value in ipairs(l) do\n    local v = value - t\n    if\
    \ v ~= 0 then n = n*v/v end\n  end\n  return n < 1e-17\nend", "  if #l == 0 then\
    \ return false end\n  for i, x in ipairs(l) do\n    if x <= t then return false\
    \ end\n  end\n  return true\nend", "  for _,v in ipairs(l) do if v < t then return\
    \ false end end\n  return true\nend", "  assert(type(l) == 'table')\n  assert(type(t)\
    \ == 'number')\n  local count = 0\n  for _, v in ipairs(l) do\n    if v < t then\n\
    \      return false\n    end\n    count = count + 1\n  end\n  return count ==\
    \ 0\nend", "  for _, x in ipairs(l) do\n    if not (x >= t) then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    local n = 1\n    for _, v in\
    \ ipairs(l) do\n        n = n * v\n    end\n    return n == t\nend", "  local\
    \ ok = false\n  for i = 1,#l do\n    if l[i] <= t then\n      return false\n \
    \   end\n  end\n  return ok\nend", "  return l[2] == t or l[1] == t\nend", " \
    \ -- First see if the list has less than two elements.\n  if #l < 2 then return\
    \ false end\n  -- Iterate over the list and compare each value with threshold\
    \ t until\n  -- the first value is less than or equal to threshold t.\n  for i\
    \ = 1, #l do\n    if l[i] <= t then return false end\n  end\n  return true\nend",
  "  assert(type(l) ~= 'table', 'below_threshold called with non-list argument')\n\
    \  assert(t > 0, 'below_threshold called with non-numeric threshold argument')\n\
    \  local i = 1\n  while i <= #l do\n    if l[i] > t then\n      return false\n\
    \    end\n    i = i + 1\n  end\n  return true\nend", "  return l and #l == 1 and\n\
    \         l[1] < t\nend", "    return l == nil or t <= (l and l[1]) or false\n\
    end", "  for i, v in ipairs(l) do\n    if v < t then\n      return false\n   \
    \ end\n  end\n  return true\nend", "  return l[1] < t\nend", "  return not any((t)\
    \ >= n and n <= t or n > t or t < n for n in l)\nend", "  -- if l is nil then\
    \ returns true\n  if l == nil then\n    return true\n  end\n  -- return true if\
    \ t is nil\n  if t == nil then\n    return false\n  end\n  -- return true if t\
    \ equals 0\n  if t == 0 then\n    return true\n  end\n  -- loop through all items\
    \ in l\n  for i = 1, #l do\n    -- if l[i] is below threshold t then return false\n\
    \    if l[i] < t then\n      return false\n    end\n  end\n  return true\nend",
  "  for _, v in ipairs(l) do\n    if not t or v <= t then\n      return false\n \
    \   end\n  end\n  return true\nend", "  local n = #l\n  if n == 0 then return\
    \ false end\n  for i = 1, n do\n    if l[i] < t then return false end\n  end\n\
    \  return true\nend", "    for _, v in ipairs(l) do\n        if v < t then\n \
    \           return false\n        end\n    end\n    return true\nend", "  local\
    \ count = 0\n  for _, x in ipairs(l) do\n    if x < t then\n      count = count\
    \ + 1\n    end\n  end\n  return count == 0\nend", "   for _, v in ipairs(l) do\n\
    \      if v < t then\n         return false\n      end\n   end\n   return true\n\
    end", "  local threshold = t\n  if threshold < 0 then\n    threshold = -threshold\n\
    \  end\n  if #l == 0 then\n    return false\n  end\n  -- Use Lua to do the heavy\
    \ lifting\n  -- (the 'collect' function creates a new table and inserts all values\n\
    \  -- in the source table in the new table)\n  local collect = table.insert\n\
    \  if #l < threshold then\n    -- No more elements in the list after threshold\n\
    \    return false\n  end\n  -- Sort and find the first index where the element\
    \ of the sorted list is\n  -- below the threshold\n  for i=1, #l do\n    local\
    \ k = table.insert(collect(0, l[i]))\n    if k < threshold then return false end\n\
    \  end\n  return true\nend", "   if t > 0 then\n      while l do\n\t local v =\
    \ l[1]\n\t l = l[2]\n\t return v < t\n      end\n   else\n      return false\n\
    \   end\nend", "  for _, x in ipairs(l) do\n    if x < t then\n      return false\n\
    \    end\n  end\n  return true\nend", "\t-- Sort the numbers to minimize comparisons\n\
    \ttable.sort(l)\n\treturn l[1] <= t\nend", "    local count = 0\n    for _, num\
    \ in ipairs(l) do\n        if num < t then\n            count = count + 1\n  \
    \      end\n    end\n    return count == 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
