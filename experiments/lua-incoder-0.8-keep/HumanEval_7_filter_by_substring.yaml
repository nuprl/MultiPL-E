name: HumanEval_7_filter_by_substring
language: lua
prompt: "-- Filter an input list of strings only for ones that contain given substring\n\
  -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc', 'bacd',\
  \ 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
  \ substring)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
  \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
  \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
  \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'},\
  \ 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
  \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if string.find(strings, substring) == nil then\n        return\
    \ strings\n    end", "  local output = {}\n  for _, str in ipairs(strings) do\n\
    \    local index = string.find(str, substring, 1, true)\n    if index == true\
    \ then\n      table.insert(output, str)\n    end\n  end\n  return output\nend",
  "  if not strings then return end\n  local new_strings = setmetatable({}, {__mode=\"\
    v\"})\n  for _, str in ipairs(strings) do\n    local substring_pos = string.find(str,\
    \ substring)\n    if substring_pos ~= nil then\n      new_strings[#new_strings\
    \ + 1] = str\n    end\n  end\n  return new_strings\nend", "    local ret = {}\n\
    \    for _, s in ipairs(strings) do\n        if string.find(s, substring) then\n\
    \            ret[#ret + 1] = s\n        end\n    end\n    return ret\nend", " \
    \ local filtered_strings = {}\n  for _, str in ipairs(strings) do\n    local str_sub\
    \ = string.find(str, substring)\n    if str_sub and str_sub > 0 then\n      filtered_strings[#filtered_strings\
    \ + 1] = str\n    end\n  end\n  return filtered_strings\nend", "  return filter(\n\
    \    strings,\n    function (s)\n      return s:find(substring, \".-\") ~= nil\n\
    \    end)\nend", "  local result = {}\n  for _, string in ipairs(strings) do\n\
    \    if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend", "   assert(type(strings) == 'table', 'strings\
    \ should be a table')\n   assert(type(substring) == 'string', 'substring should\
    \ be a string')\n   local results = {}\n   for _, string in ipairs(strings) do\n\
    \      if string.find(substring, 1, true) then\n         table.insert(results,\
    \ string)\n      end\n   end\n   return results\nend", "   assert(type(strings)\
    \ == \"table\" and \"table\" in getmetatable(strings))\n   assert(type(substring)\
    \ == \"string\")\n   local table = {}\n   for i,v in ipairs(strings) do\n    \
    \  if not substring == nil then\n         if v:find(substring) then\n        \
    \    table.insert(v, substring)\n         end\n      end\n   end\n   return table\n\
    end", "  local result = {}\n  for _, s in ipairs(strings) do\n    if string.find(s,\
    \ substring) then\n      result[#result + 1] = s\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for i = 1, #strings do\n    if strings[i] ~= substring\
    \ then\n      result[#result + 1] = strings[i]\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for _, s in ipairs(strings) do\n    if s:find(substring)\
    \ then\n      result[#result + 1] = tonumber(s)\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for _, string in ipairs(strings) do\n    if string.find(substring)\
    \ == 1 then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end", "    local result = {}\n    for idx, value in ipairs(strings) do\n     \
    \   if string.sub(value, 1, string.len(substring))==substring then\n         \
    \   result[idx] = value\n        end\n    end\n    return result\nend", "  for\
    \ _, str in ipairs(strings) do\n    if string.sub(s, 1, #substring) == substring\
    \ then\n      table.insert(strings, str)\n    end\n  end\n  return strings\nend",
  "    return filter_by_predicate(\n        function(string) return string.find(substring)\
    \ ~= nil end,\n        strings)\nend", "  return function(s)\n    return string.find(s,\
    \ substring, 1, true) > -1\n  end\nend", "  local list = {}\n  for _, str in ipairs(strings)\
    \ do\n    if str:find(substring) then\n      list[#list + 1] = str\n    end\n\
    \  end\n  return list\nend", "    local result = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string.find(substring, 1, true) ~= nil then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend", "  if substring==nil\
    \ then\n    return strings\n  end\n  local new_strings={}\n  for i,str in ipairs(strings)\
    \ do\n    if string.find(str,substring) then\n      table.insert(new_strings,str)\n\
    \    end\n  end\n  return new_strings\nend", "  assert(type(strings) == 'table')\n\
    \  assert(type(substring) == 'string')\n  local result = {}\n  local first_index\
    \ = nil\n  for index, string in ipairs(strings) do\n    if string.find(substring,\
    \ 1, 1) ~= nil then\n      if not first_index then\n        first_index = index\n\
    \      else\n        if index > first_index then\n          result[#result + 1]\
    \ = strings[first_index]\n        end\n        first_index = nil\n      end\n\
    \    end\n  end\n  if first_index then\n    result[#result + 1] = strings[first_index]\n\
    \  end\n  return result\nend", "   for idx, value in ipairs(strings) do\n    \
    \  if not string.sub(value, 1, string.len(substring))==substring then\n      \
    \   table.remove(strings, idx)\n      end\n   end\n   return strings\nend", " \
    \ return table.filter(function(string) string.find(string) == string.find(substring)\
    \ end, strings)\nend", "  for i = 1, #strings do\n    if string.find(strings[i],\
    \ substring) then\n      strings[i] = nil\n    end\n  end\n  return strings\n\
    end", "    local results = {}\n    for idx, value in ipairs(strings) do\n    \
    \    if string.find(value, substring) then\n            table.insert(results,\
    \ value)\n        end\n    end\n    return results\nend", "    if not strings\
    \ then return strings end\n    if not substring then return strings end", "  if\
    \ type(strings) ~= 'table' then\n    error('strings should be a table but is '\
    \ .. type(strings))\n  end", "  -- TODO: Optimize - check if strings has 'substring'\n\
    \  -- FIXME: Optimize using Lua table.filter (more performant than a loop)\n \
    \ local result = {}\n  for _, value in ipairs(strings) do\n    if value:find(substring)\
    \ then\n      table.insert(result, value)\n    end\n  end\n  return result\nend",
  "  local filtered_strings = {}\n  for _, string in ipairs(strings) do\n    local\
    \ index = string.find(substring, 1, true) + 1\n    if index == 0 then break end\n\
    \    table.insert(filtered_strings, string.sub(string, index))\n  end\n  return\
    \ filtered_strings\nend", "  if #strings == 0 then\n    return {}\n  end", " \
    \ return strings.filter(function(str)\n    return str:find(substring, '') ~= nil\n\
    \  end)\nend", "   assert(type(strings) == \"table\")\n   assert(type(substring)\
    \ == \"string\")\n   local index = 1\n   local filtered_strings = { }\n   while\
    \ true do\n      if #strings == 0 then\n         break\n      end", "  return\
    \ strings:map(function(str)\n    if str:sub(1,#substring) == substring then\n\
    \      return str\n    end\n  end)\nend", "  return filter(\n      function(string)\n\
    \        return string.find(substring, '') == 1\n      end,\n      strings)\n\
    end", "    local strings_with_substring = {}\n    for _, s in ipairs(strings)\
    \ do\n        if string.find(s, substring) then\n            table.insert(strings_with_substring,\
    \ s)\n        end\n    end\n    return table.remove(strings_with_substring, 1)\n\
    end", "  local result = {}\n  local index = 1\n  while index < #strings do\n \
    \   local s = strings[index]\n    local index = index + 1\n    for i = 1, #substring\
    \ do\n      if string.find(s, substring[i]) then\n        result[#result + 1]\
    \ = s\n      end\n    end\n  end\n  return result\nend", "  return filter(\n \
    \   function(string)\n      return string.find(substring)\n    end,\n    strings\n\
    \  )\nend", "  return function(s)\n    -- The 'end' index is the position after\
    \ the substring\n    local i = 1\n    local j = string.find(s, substring, 1, true)",
  "    local filtered_strings = nil\n    for i = 1, #strings do\n        if strings[i]\
    \ then\n            if string.find(strings[i], substring) then\n             \
    \   filtered_strings = filtered_strings or {}\n                table.insert(filtered_strings,\
    \ strings[i])\n            end\n        end\n    end\n    return filtered_strings\n\
    end", "  assert(type(strings) == \"table\")\n  assert(type(substring) == \"string\"\
    )", "  for _, str in ipairs(strings) do\n    if string.find(str, substring, 1,\
    \ true) ~= nil then\n      return str\n    end\n  end\n  return nil\nend", " \
    \ if #strings == 0 then\n    return nil\n  end", "  local function contains_substring(string,\
    \ substring)\n    return (string.find(string, '^') > 0) and\n           (string.find(string,\
    \ substring) > 0)\n  end\n  local function not_contains(string, substring)\n \
    \   return (string.find(string, '^') > 0) and\n           (string.find(string,\
    \ substring) == -1)\n  end\n  local function contains_substring(string, substring)\n\
    \    return (string.find(string, '^') > 0) and\n           (string.find(string,\
    \ substring) > 0)\n  end\n  local function not_contains(string, substring)\n \
    \   return (string.find(string, '^') > 0) and\n           (string.find(string,\
    \ substring) == -1)\n  end", "  local result = {}\n  for _, value in ipairs(strings)\
    \ do\n    if string.sub(value, 1, string.len(substring)) ~= substring then\n \
    \     result[#result + 1] = value\n    end\n  end\n  return result\nend", "  local\
    \ function match(string)\n    return string.find(substring, 1, true) ~= nil\n\
    \  end\n  return filter(strings, match) -- Filter the input list of strings keeping\
    \ only those strings that contain the given substring\nend", "  local filtered_strings\
    \ = { }\n  for _, s in ipairs(strings) do\n    if string.find(s, substring) ==\
    \ 1 then\n      table.insert(filtered_strings, s)\n    end\n  end\n  return filtered_strings\n\
    end", "  if #strings == 0 then\n    return {}\n  end", "  return function(string)\n\
    \    local index = #string + 1\n    local buffer = {}\n    while true do\n   \
    \   local start = string.find(string, substring, index, true)\n      if start\
    \ < 0 then\n        break\n      elseif start == index then\n        table.insert(buffer,\
    \ string[start + 1])\n        index = string.len(string) + 1\n      else\n   \
    \     index = start\n      end\n    end\n    return buffer\n  end(strings)\nend",
  "  local filter = function(x)\n    return string.find(x, substring) ~= nil\n  end\n\
    \  local result = {}\n  for _, value in ipairs(strings) do\n    if filter(string)\
    \ then\n      table.insert(result, value)\n    end\n  end\n  return result\nend",
  "    local results = {}\n    for _, v in ipairs(strings) do\n        if string.sub(v,\
    \ 1, #substring - 1) == substring then\n            table.insert(results, v)\n\
    \        end\n    end\n    return results\nend", "    if type(strings) ~= 'table'\
    \ then\n        strings = {strings}\n    end\n    local new_strings = {}\n   \
    \ for i = 1, #strings do\n        if string.find(strings[i], substring) ~= nil\
    \ then\n            new_strings[#new_strings+1] = strings[i]\n        end\n  \
    \  end\n    return new_strings\nend", "  local results = {}\n  for _, value in\
    \ ipairs(strings) do\n    if value:find(substring) then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend", "  if type(strings) ~= 'table'\
    \ or #strings == 0 then\n    return strings\n  end", "  local new_list = {}\n\
    \  for _, value in ipairs(strings) do\n    if value:find(substring) then\n   \
    \   table.insert(new_list, value)\n    end\n  end\n  return new_list\nend", "\t\
    assert(type(substring) == 'string', '`substring` must be a string')\n\tassert(strings\
    \ and type(strings) == 'table', '`strings` must be a table')", "  for i, str in\
    \ ipairs(strings) do\n    if str:find(substring) then\n      table.insert(strings,\
    \ str)\n    end\n  end\n  return strings\nend", "\tassert(type(strings) == 'table')\n\
    \tassert(type(substring) == 'string')", "  if strings == nil then return nil end\n\
    \  return terralib.newlist(\n    string.gmatch(strings, \"([^\"..substring..\"\
    ]+)\") or nil)\nend", "  return filter(\n    function(value)\n      return type(value)\
    \ == 'string' and value:find(substring) == 1 or\n              type(value) ==\
    \ 'table' and next(value) == substring\n    end,\n    strings\n  )\nend", "  \
    \  if type(strings) ~= 'table' then\n        strings = {strings}\n    end\n  \
    \  local filtered = {}\n    for _, s in ipairs(strings) do\n        if string.find(s,\
    \ substring) ~= nil then\n            table.insert(filtered, s)\n        end\n\
    \    end\n    return filtered\nend", "    assert(type(strings) == 'table')\n \
    \   assert(type(substring) == 'string')\n    local filtered_table = {}\n    local\
    \ count = 0\n    for _, s in pairs(strings) do\n        if string.find(s, substring)\
    \ then\n            filtered_table[count] = s\n            count = count + 1\n\
    \        end\n    end\n    return filtered_table\nend", "    local results = {}\n\
    \    local len = #strings\n    for i = 1, len do\n        if strings[i]:find(substring)\
    \ == 1 then\n            results[#results + 1] = strings[i]\n        end\n   \
    \ end\n    return results\nend", "    if not strings then\n        return\n  \
    \  end", "  assert(#strings > 0, 'empty input list')\n  assert(#substring > 0,\
    \ 'empty substring')", '  local filtered_strings = { }', "    local result = {}\n\
    \    for _, value in ipairs(strings) do\n        if string.find(value, substring)\
    \ then\n            table.insert(result, value)\n        end\n    end\n    return\
    \ result\nend", "  if #substrings == 0 then\n    return strings\n  end\n  local\
    \ result = {}\n  for i = 1, #strings do\n    if string.find(strings[i], substring)\
    \ then\n      table.insert(result, strings[i])\n    end\n  end\n  return result\n\
    end", "    local result = {}\n    for _, str in ipairs(strings) do\n        if\
    \ string.find(str, substring) then\n            result[#result + 1] = str\n  \
    \      end\n    end\n    return result\nend", "  local result = {}\n  for _, string\
    \ in ipairs(strings) do\n    if string.find(substring, 1, true) then\n      table.insert(result,\
    \ string)\n    end\n  end\n  return result\nend", "    local result = {}\n   \
    \ for _, string in ipairs(strings) do\n        if string.find(substring, 1, true)\
    \ then\n            table.insert(result, string)\n        end\n    end\n    return\
    \ result\nend", "  if type(strings) ~= 'table' then\n    error('input must be\
    \ a table')\n  end\n  -- Use a closure to protect against mutation\n  -- Use `string`\
    \ instead of `strings` to avoid mutation\n  return function(input)\n    if type(input)\
    \ ~= 'table' then\n      error('input must be a table')\n    end\n    for i =\
    \ 1, #input do\n      if input[i] ~= substring then\n        return input\n  \
    \    end\n    end\n    return nil\n  end\nend", "  local filtered = {}\n  for\
    \ _, item in pairs(strings) do\n    if string.find(item, substring, 1, true) then\n\
    \      table.insert(filtered, item)\n    end\n  end\n  return filtered\nend",
  "  local output = {}\n  for i = 1, #strings do\n    if strings.substring.call(strings[i],\
    \ substring, 1, #substring) == #substring then\n      table.insert(output, strings[i])\n\
    \    end\n  end\n  return output\nend", "   if #strings ~= 0 then\n      return\
    \ filter_by_substring(strings[#strings - 1], substring)\n   end\n   return strings\n\
    end", "  local output = {}\n  for i=1, #strings do\n    if strings[i] ~= substring\
    \ then\n      table.insert(output, strings[i])\n    end\n  end\n  return output\n\
    end", "  return filter_by_function(function(s) string.find(s, substring) ~= nil,\
    \ nil, strings)\nend", "  local results = {}\n  for _, value in ipairs(strings)\
    \ do\n    if string.find(value, substring, 1, true) then\n      table.insert(results,\
    \ value)\n    end\n  end\n  return results\nend", "    local result = {}\n   \
    \ for _, str in ipairs(strings) do\n        if str:find(substring) then\n    \
    \        result[#result + 1] = str\n        end\n    end\n    return result\n\
    end", "  local results = {}\n  for _, string in ipairs(strings) do\n    if string.find(substring)\
    \ then\n      table.insert(results, string)\n    end\n  end\n  return results\n\
    end", "    local filtered = {}\n    local index_filter = 1\n    local index_string\
    \ = 1\n    for index, value in ipairs(strings) do\n        if string.sub(value,\
    \ 1, string.len(substring)) ~= substring then\n            table.insert(filtered,\
    \ value)\n        else\n            table.insert(filtered, strings[index_filter])\n\
    \            index_filter = index_filter + 1\n            table.insert(filtered,\
    \ strings[index_string])\n            index_string = index_string + 1\n      \
    \  end\n    end\n    return filtered\nend", "  local filtered_strings = { }\n\
    \  for _, string in ipairs(strings) do\n    if string.find(substring) then\n \
    \     table.insert(filtered_strings, string)\n    end\n  end\n  return filtered_strings\n\
    end", "  local result = {}\n  for i = 1, #strings do\n    local s = strings[i]\n\
    \    if substring in s then\n      table.insert(result, s)\n    end\n  end\n \
    \ return result\nend", "\tlocal new_strings = {}\n\tfor i, str in ipairs(strings)\
    \ do\n\t\tif str:find(substring) then\n\t\t\ttable.insert(new_strings, str)\n\t\
    \tend\n\tend\n\treturn new_strings\nend", "  local filtered = {}\n  for i = 1,\
    \ #strings do\n    if string.find(strings[i], substring) then\n      table.insert(filtered,\
    \ strings[i])\n    end\n  end\n  return filtered\nend", "   assert(type(strings)\
    \ ~= 'table')\n   assert(type(substring) == 'string')", "    if not strings then\
    \ return nil end\n    local filtered = {}\n    for _, v in pairs(strings) do\n\
    \        if string.find(v, substring, 1, true) then\n            table.insert(filtered,\
    \ v)\n        end\n    end\n    return filtered\nend", "  if #strings <= 0 then\n\
    \    return nil\n  end", "  return table.filter(\n    strings,\n    function (str)\n\
    \      return string.find(str, substring, 1, true) ~= nil\n    end\n  )\nend",
  "  assert(type.is_list_of_strings(strings))\n  assert(type(substring) == 'string')",
  "   local t = {\n      strings\n   }\n   for i, str in pairs(t) do\n      if string.find(str,\
    \ substring) then\n         t[i] = str\n      end\n   end\n   return t\nend",
  "  local result = {}\n  for _, string in ipairs(strings) do\n    if string.find(substring,\
    \ \".\") ~= nil then\n      result[#result + 1] = string\n    end\n  end\n  return\
    \ result\nend", "  return function(t)\n    if t then\n      local index = string.find(t,\
    \ substring)\n      while index and not next(t) do\n        local index = string.find(t,\
    \ substring, index + 1)\n      end\n      if index then\n        return t\n  \
    \    else\n        return nil\n      end\n    else\n      return nil\n    end\n\
    \  end\nend", "    if substring == nil then\n        strings = nil\n    elseif\
    \ type(strings) ~= 'table' then\n        strings = {strings}\n    end\n    \n\
    \    local table = {}\n    for s in strings do\n        if string.find(s, substring)\
    \ then\n            table.insert(table, s)\n        end\n    end\n    \n    return\
    \ table\nend", "    local new_strings = {}\n    for _, v in ipairs(strings) do\n\
    \        if string.find(v, substring) then\n            new_strings[#new_strings\
    \ + 1] = v\n        end\n    end\n    return new_strings\nend", "  local result\
    \ = {}\n  for _, value in ipairs(strings) do\n    if value:find(substring) ~=\
    \ nil then\n      table.insert(result, value)\n    end\n  end\n  return result\n\
    end", "  assert(type(strings) ~= 'table')\n  assert(type(substring) == 'string')\n\
    \  local result = {}\n  for _, v in pairs(strings) do\n    if substring in v then\n\
    \      table.insert(result, v)\n    end\n  end\n  return result\nend", "  if type(strings)\
    \ ~= 'table' then\n    return strings\n  end\n  local new_strings = {}\n  for\
    \ i = 1, #strings do\n    local string = strings[i]\n    if string.find(substring,\
    \ string, 1, true) then\n      table.insert(new_strings, string)\n    end\n  end\n\
    \  return new_strings\nend", "  assert(type(strings) == 'table')\n  assert(type(substring)\
    \ == 'string')\n  assert(#strings > 0)\n  local results = {}\n  for i = 1, #strings\
    \ do\n    if string.sub(string, 1, string.len(substring)) ~= substring then\n\
    \      table.insert(results, strings[i])\n    end\n  end\n  return results\nend",
  "  local output = {}\n  for _, string in ipairs(strings) do\n    if string.find(substring)\
    \ then\n      output[#output + 1] = string\n    end\n  end\n  return output\n\
    end", "  if type(strings) ~= 'table' then\n    -- FIXME: handle non-string\n \
    \   ngx.log(ngx.ERR, \"filter_by_substring() requires table as first argument.\"\
    , 2)\n  end\n  local filtered_list = {}\n  for i=1, #strings do\n    if string.find(strings[i],\
    \ substring) ~= nil then\n      table.insert(filtered_list, strings[i])\n    end\n\
    \  end\n  return filtered_list\nend", "  return strings:map(function(string) return\
    \ string:find(substring) ~= nil end):filter(function(bool) return bool end)\n\
    end", "  local filtered = {}\n  for _, string in pairs(strings) do\n    if string.find(substring)\
    \ == 1 then\n      table.insert(filtered, string)\n    end\n  end\n  return filtered\n\
    end", "    local result = {}\n    for i, string in ipairs(strings) do\n      \
    \  if string.find(substring) then\n            result[#result + 1] = string\n\
    \        end\n    end\n    return result\nend", "    local new_strings = {}\n\
    \    for _, string in pairs(strings) do\n        if string.find(substring) ==\
    \ 1 then\n            table.insert(new_strings, string)\n        end\n    end\n\
    \    return new_strings\nend", "  local new_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      new_table_insert(new_strings,\
    \ string)\n    end\n  end\n  return new_strings\nend", "  local t = {}\n  for\
    \ i = 1, #strings do\n    if strings.sub(1, #strings[i]) == substring then\n \
    \     table.insert(t, strings[i])\n    end\n  end\n  return t\nend", "  local\
    \ filtered_strings = {}\n  for i = 1, #strings do\n    if strings[i] ~= substring\
    \ then\n      table.insert(filtered_strings, strings[i])\n    end\n  end\n  return\
    \ filtered_strings\nend", "  local results = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      table.insert(results,\
    \ string)\n    end\n  end\n  return results\nend", "  if not substring then\n\
    \    return strings\n  else\n    local filtered_strings = {}\n    for _, string\
    \ in ipairs(strings) do\n      if string.find(substring, 1, true) then\n     \
    \   table.insert(filtered_strings, string)\n      end\n    end\n    return filtered_strings\n\
    \  end\nend", "  local newStrings = {}\n  for _, string in ipairs(strings) do\n\
    \    if string.find(substring) then\n      table.insert(newStrings, string)\n\
    \    end\n  end\n  return newStrings\nend", "  local result = {}\n  for _, str\
    \ in pairs(strings) do\n    if str:find(substring) then\n      result[#result\
    \ + 1] = str\n    end\n  end\n  return result\nend", "  local result = {}\n  for\
    \ _, string in ipairs(strings) do\n    if string.find(substring) then\n      result[#result\
    \ + 1]\n    end\n  end\n  return result\nend", "  local result = {}\n  for _,\
    \ str in ipairs(strings) do\n    local start, _, stop = pcall(string.find,\n \
    \                                substring,\n                                \
    \ str,\n                                 1,\n                                \
    \ true) -- only search the first time\n    if start ~= nil then\n      table.insert(result,\
    \ str:sub(1, start-1))\n    end\n  end\n  return result\nend", "\tlocal result\
    \ = {}\n\tfor i, string in ipairs(strings) do\n\t\tif string.find(substring, 1,\
    \ true) then\n\t\t\ttable.insert(result, string)\n\t\tend\n\tend\n\treturn result\n\
    end", "    assert(#strings > 0, strings)\n    assert(typeof(substring) == 'string',\
    \ strings)\n    \n    local filtered = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string.find(substring, 1, true) then\n            table.insert(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "  local substring_index\
    \ = nil\n  for _, string in ipairs(strings) do\n    if string.find(substring,\
    \ 1, true) then\n      substring_index = string\n      break\n    end\n  end\n\
    \  if substring_index == nil then\n    return strings\n  else\n    local filtered\
    \ = {}\n    for _, string in ipairs(strings) do\n      if string.find(substring,\
    \ 1, true) then\n        table.insert(filtered, string)\n      end\n    end\n\
    \    return filtered\n  end\nend", "  local result = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) ~= nil then\n      table.insert(result,\
    \ string)\n    end\n  end\n  return result\nend", "  assert(type(strings) == 'table')\n\
    \  assert(type(substring) == 'string')\n  local function search(s)\n    return\
    \ s:find(substring)\n  end\n  return filter(strings, search)\nend", "    local\
    \ strings_with_substring = { }\n    for _, string in ipairs(strings) do\n    \
    \    if string.find(substring) then\n            table.insert(strings_with_substring,\
    \ string)\n        end\n    end\n    return strings_with_substring\nend", "  for\
    \ _, value in ipairs(strings) do\n    if string.sub(value, 1, string.len(substring))\
    \ == substring then\n      return value\n    end\n  end\n  return nil\nend", " \
    \ local results = {}\n  for _, string in ipairs(strings) do\n    if string.find(substring,\
    \ 1, true) then\n      table.insert(results, string)\n    end\n  end\n  return\
    \ results\nend", "  assert(type(strings) == 'table' and #strings > 0, 'The argument\
    \ is not a table but ' .. type(strings) .. ' given')\n  assert(type(substring)\
    \ == 'string', 'The argument is not a string but ' .. type(substring) .. ' given')\n\
    \  local filtered_strings = {}\n  for i = 1, #strings do\n    local s = strings[i]\n\
    \    local substring_found = string.find(s, substring, 1, true)\n    if substring_found\
    \ then\n      table.insert(filtered_strings, s)\n    end\n  end\n  return filtered_strings\n\
    end", "    local filtered_strings = {}\n    local num_substring = 0\n    for index,\
    \ string in ipairs(strings) do\n        if string.find(substring) then\n     \
    \       filtered_strings[num_substring] = string\n            num_substring =\
    \ num_substring + 1\n        end\n    end\n    return filtered_strings\nend",
  "  return table.filter(\n    function(input)\n      return (string.sub(input, 1,\
    \ string.len(substring)) == substring)\n    end,\n    strings\n  )\nend", "  \
    \  local list = { }\n    for _, string in ipairs(strings) do\n        if string.find(substring,\
    \ 1, true) then\n            table.insert(list, string)\n        end\n    end\n\
    \    return list\nend", "  local new_strings = {}\n  for index, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      table.insert(new_strings, string)\n\
    \    end\n  end\n  return new_strings\nend", "    local filtered_strings = {}\n\
    \    for _, v in ipairs(strings) do\n        if string.find(v, substring) then\n\
    \            table.insert(filtered_strings, v)\n        end\n    end\n    return\
    \ filtered_strings\nend", "  local new_strings = {}\n  for _, string in pairs(strings)\
    \ do\n    local index = string.find(substring)\n    if index == nil then\n   \
    \   new_strings[#new_strings + 1] = string\n    end\n  end\n  return new_strings\n\
    end", "  local filtered = {}\n  for _, s in ipairs(strings) do\n    if s:find(substring)\
    \ then\n      table.insert(filtered, s)\n    end\n  end\n  return filtered\nend",
  "  if not strings then return nil end\n  return filter(\n    function(string) return\
    \ string.find(string) == substring or false end,\n    strings\n  )\nend", "  --\
    \ Return new list with strings filtered for substring\n  local new_list = terralib.newlist()\n\
    \  for _, str in ipairs(strings) do\n    if string.find(str, substring, 1, true)\
    \ then\n      new_list:insert(str)\n    end\n  end\n  return new_list\nend", " \
    \ assert(type(strings) == 'table', 'strings must be a table')\n  assert(type(substring)\
    \ == 'string', 'substring must be a string')", "  return filter(\n    function(string)\
    \ return string.find(substring) > 0 end,\n    strings)\nend", "  return function(str)\n\
    \    local s = str:lower()\n    return #strings > 0 and #string <= #strings and\
    \ substring == s or substring == '*' or\n      s:find(substring) ~= nil\n  end\n\
    end", "  return filter(function(string) string.find(substring, 1, true) ~= nil,\
    \ strings)\nend", "    local result = {}\n    for _,string in ipairs(strings)\
    \ do\n        if string.find(substring, \".\") then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend", "  assert(type(strings)\
    \ == 'table', 'Expected table input')\n  assert(type(substring) == 'string', 'Expected\
    \ string input')\n  local filtered_strings = {}\n  for _, s in ipairs(strings)\
    \ do\n    if string.find(s, substring) then\n      table.insert(filtered_strings,\
    \ s)\n    end\n  end\n  return filtered_strings\nend", "  if type(strings) ~=\
    \ 'table' then return strings end\n  local filtered_strings = {}\n  for i = 1,\
    \ #strings do\n    if string.sub(strings[i], 1, #substring) == substring then\n\
    \      table.insert(filtered_strings, strings[i])\n    end\n  end\n  return filtered_strings\n\
    end", "  local list = {}\n  for k, v in pairs(strings) do\n    if v:find(substring)\
    \ then\n      table.insert(list, v)\n    end\n  end\n  return list\nend", "  \
    \  if type(strings) ~= 'table' then\n        error('argument 1 must be a table')\n\
    \    end\n    if substring == '' or substring == '.' or substring == '*' then\n\
    \        return strings\n    end\n    local filtered_strings = {}\n    for index,\
    \ string in pairs(strings) do\n        if string.find(substring, '') then\n  \
    \          filtered_strings[index] = string\n        end\n    end\n    return\
    \ filtered_strings\nend", "  local filtered_strings = {}\n  for _, str in ipairs(strings)\
    \ do\n    local idx = string.find(str, substring, 1, 1)\n    if idx ~= nil then\n\
    \      table.insert(filtered_strings, str)\n    end\n  end\n  return filtered_strings\n\
    end", "    local new_strings = {}\n    for _, str in pairs(strings) do\n     \
    \   if string.find(str, substring, 1, true) then\n            new_strings[#new_strings\
    \ + 1] = str\n        end\n    end\n    return new_strings\nend", "    local result\
    \ = {}\n    for _, string in ipairs(strings) do\n        if string.find(substring,\
    \ 1, true) ~= nil then\n            result[#result + 1] = string\n        end\n\
    \    end\n    return result\nend", "  local result = {}\n  for _, s in ipairs(strings)\
    \ do\n    if string.find(s, substring) then\n      result[#result +1] = s\n  \
    \  end\n  end\n  return result\nend", "  return filter_by_start_index(\n    strings,\n\
    \    function(i, s)\n      return string.find(s, substring, 1, true) ~= nil\n\
    \    end,\n    substring)\nend", "  return filter(function(string) return string.find(substring)\
    \ ~= nil end, strings)\nend", "    local results = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string.find(substring, 1, true) then\n            table.insert(results,\
    \ string)\n        end\n    end\n    return results\nend", "  local result = {}\n\
    \  for _, value in ipairs(strings) do\n    if string.sub(value, 1, string.len(substring))\
    \ ~= substring then\n      result[#result + 1] = value\n    end\n  end\n  return\
    \ result\nend", "  if not substring then\n    return strings\n  end\n  local result\
    \ = {}\n  for _, str in ipairs(strings) do\n    local substr_start = str:find(substring)\n\
    \    if substr_start ~= nil then\n      result[#result + 1] = str\n    end\n \
    \ end\n  return result\nend", "    local filtered_strings = {}\n    for _, string\
    \ in pairs(strings) do\n        if string.find(substring) ~= nil then\n      \
    \      filtered_strings[#filtered_strings + 1] = string\n        end\n    end\n\
    \    return filtered_strings\nend", "  local result = {}\n  local found = false\n\
    \  for _, string in ipairs(strings) do\n    if string.find(substring) then\n \
    \     found = true\n      table.insert(result, string)\n    end\n  end\n  if found\
    \ then\n    return result\n  else\n    return nil\n  end\nend", "  local filtered_strings\
    \ = {}\n  for _, string in ipairs(strings) do\n    if string.find(substring, 1,\
    \ true) then\n      table.insert(filtered_strings, string)\n    end\n  end\n \
    \ return filtered_strings\nend", "    local results = {}\n    for i, v in ipairs(strings)\
    \ do\n        if v:find(substring) then\n            table.insert(results, v)\n\
    \        end\n    end\n    return results\nend", "  local filtered_strings = {}\n\
    \  for _, string in ipairs(strings) do\n    if string.find(substring) then\n \
    \     filtered_strings[#filtered_strings + 1] = string\n    end\n  end\n  return\
    \ filtered_strings\nend", "  local new_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, '') then\n      new_strings[#new_strings +\
    \ 1] = string\n    end\n  end\n  return new_strings\nend", "    local filtered_strings\
    \ = {}\n    for _, string in ipairs(strings) do\n        if string.find(substring)\
    \ == 1 then\n            table.insert(filtered_strings, string)\n        end\n\
    \    end\n    return filtered_strings\nend", "    if type(strings) ~= 'table'\
    \ then return nil end\n    local index = 1\n    local result = {}\n    for i =\
    \ 1, #strings do\n        if strings[i]:find(string) == 1 then\n            result[index]\
    \ = strings[i]\n            index = index + 1\n        end\n    end\n    if index\
    \ <= #strings then return result end\nend", "  if type(strings) ~= 'table' then\n\
    \    return nil\n  end", "  for _, str in ipairs(strings) do\n    if string.find(str,\
    \ substring) == 1 then\n      table.insert(strings, str)\n    end\n  end\n  return\
    \ strings\nend", "    local result = {}\n    for _, s in ipairs(strings) do\n\
    \        if string.find(s, substring) == 1 then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local filtered = {}\n\
    \    for _, string in ipairs(strings) do\n        if string.find(substring) ==\
    \ 1 then\n            table.insert(filtered, string)\n        end\n    end\n \
    \   return filtered\nend", "  local results = {}\n  for _, str in ipairs(strings)\
    \ do\n    if string.find(str, substring) then\n      table.insert(results, str)\n\
    \    end\n  end\n  return results\nend", "  if #strings == 0 then return strings\
    \ end\n  if substring == nil then return strings end", "  local new_strings =\
    \ terralib.newlist()\n  for _, string in ipairs(strings) do\n    if string.find(string,\
    \ \"^\" .. re.escape(substring) .. \"$\") then\n      new_strings:insert(string)\n\
    \    end\n  end\n  return new_strings\nend", "  local filter = {}\n  for i = 1,\
    \ #strings do\n    local str = strings[i]\n    if string.find(str, substring,\
    \ 1, true) then\n      table.insert(filter, str)\n    end\n  end\n  return filter\n\
    end", "    local results = {}\n    for _, str in ipairs(strings) do\n        if\
    \ string.find(str, substring) then\n            table.insert(results, str)\n \
    \       end\n    end\n    return results\nend", "  return filter(\n    function(string)\
    \ return string.find(string, \".*\" .. substring .. \".*\") ~= nil end,\n    strings)\n\
    end", "  local result = {}\n  for i, value in ipairs(strings) do\n    if value:find(substring)\
    \ == 1 then\n      table.insert(result, value)\n    end\n  end\n  return result\n\
    end", "  local results = {}\n  for _, str in ipairs(strings) do\n    if string.find(str,\
    \ substring) then\n      table.insert(results, str)\n    end\n  end\n  return\
    \ results\nend", "    if type(strings) ~= 'table' then return end\n    local filtered_strings\
    \ = {}\n    for _, value in ipairs(strings) do\n        if string.sub(value, 1,\
    \ string.len(substring)) ~= substring then\n            table.insert(filtered_strings,\
    \ value)\n        end\n    end\n    return filtered_strings\nend", "  local filter\
    \ = {}\n  local filtered_strings = {}\n  for _, str in ipairs(strings) do\n  \
    \  for _, char in ipairs(str) do\n      if char == substring then\n        table.insert(filter,\
    \ str)\n      end\n    end\n  end\n  for _, str in ipairs(filter) do\n    table.insert(filtered_strings,\
    \ str)\n  end\n  return filtered_strings\nend", "  local new_list = {}\n  for\
    \ _, str in ipairs(strings) do\n    local i = str:find(substring)\n    if i >=\
    \ 1 then\n      table.insert(new_list, str)\n    end\n  end\n  return new_list\n\
    end", "  local out = {}\n  for _, str in ipairs(strings) do\n    local n = str:find(substring)\n\
    \    if n ~= nil then\n      table.insert(out, str)\n    end\n  end\n  return\
    \ out\nend", "    local pattern = \"^\" .. re.escape(substring) .. \"$\"\n   \
    \ return strings:map(function(str)\n        return str:find(pattern) ~= nil\n\
    \    end)\nend", "    local results = {}\n    for i, v in ipairs(strings) do\n\
    \        if string.find(v, substring, 1, true) then\n            table.insert(results,\
    \ v)\n        end\n    end\n    return results\nend", "    local result = {}\n\
    \    for i, string in ipairs(strings) do\n        if string.find(substring, 1,\
    \ true) then\n            result[#result + 1] = string\n        end\n    end\n\
    \    return result\nend", "  local out = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      table.insert(out, string)\n  \
    \  end\n  end\n  return out\nend", "  local result = {}\n  for _, str in ipairs(strings)\
    \ do\n    str = str:lower()\n    if string.find(str, substring, 1, true) then\n\
    \      table.insert(result, str)\n    end\n  end\n  return result\nend", "  local\
    \ filtered = {}\n  for _, value in ipairs(strings) do\n    if value:find(substring)\
    \ then\n      table.insert(filtered, value)\n    end\n  end\n  return filtered\n\
    end", "  return table.filter(\n    strings,\n    function(item) return string.find(item,\
    \ substring, 1, true) ~= nil end)\nend", "  local results = {}\n  for _, s in\
    \ ipairs(strings) do\n    if s:find(substring) then\n      table.insert(results,\
    \ s)\n    end\n  end\n  return results\nend", "  local filter\n  if strings and\
    \ string.substring then\n    filter = string.gsub\n  else\n    filter = function(str)\n\
    \      local list = {}\n      for _, _, _ in string.gmatch(str, \"([^\\n\\r]*)([^\\\
    n\\r]*)(.*)\\n\") do\n        table.insert(list, 3)\n      end\n      return list\n\
    \    end\n  end", "  for _, string in ipairs(strings) do\n    if string.find(substring)\
    \ then\n      table.insert(strings, string)\n    end\n  end\n  return strings\n\
    end", "  local result = {}\n  for _, s in ipairs(strings) do\n    if string.find(s,\
    \ substring, 1, true) then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend", "  return strings:gmatch(string.format(\"^.*(%s)$\", substring))\n\
    end", "  assert(type(strings) == \"table\", \"strings\")\n  assert(type(substring)\
    \ == \"string\", \"substring\")\n  \n  -- Filter all strings containing given\
    \ substring\n  return strings:map(function(str)\n    local _, index = str:find(substring)\n\
    \    return index ~= nil and str or nil\n  end)\nend", "  if string.sub(substring,\
    \ 1, 1) ~= string.sub(substring, 2, 2) then\n    error('The second argument to\
    \ filter_by_substring must be a substring')\n  end\n  for _, str in ipairs(strings)\
    \ do\n    if string.find(str, substring, 1, true) then\n      return str\n   \
    \ end\n  end\n  return nil\nend", "  local filtered_strings = {}\n  for i = 1,\
    \ #strings do\n    if string.find(strings[i], substring) == 1 then\n      filtered_strings[#filtered_strings\
    \ + 1] = strings[i]\n    end\n  end\n  return filtered_strings\nend", "  local\
    \ result = {}\n  for _, s in ipairs(strings) do\n    if string.find(s, substring)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend",
  '  local results = {}', "    if type(strings) ~= 'table' then\n        strings =\
    \ {strings}\n    end\n    local ret = {}\n    for i = 1, #strings do\n       \
    \ if string.find(strings[i], substring, 1, true) ~= nil then\n            table.insert(ret,\
    \ strings[i])\n        end\n    end\n    return ret\nend", "  local filtered_strings\
    \ = nil\n  for i = 1, #strings do\n    if string.sub(strings[i], 1, string.len(substring))\
    \ ~= substring then\n      filtered_strings = filtered_strings or {}\n      table.insert(filtered_strings,\
    \ strings[i])\n    end\n  end\n  return filtered_strings\nend", "  return filter_by_function(function(item)\n\
    \    return string.sub(item, 1, #item) == substring\n  end, strings)\nend", " \
    \ local result = {}\n  for _, string in ipairs(strings) do\n    if string.find(substring)\
    \ ~= nil then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end", "  return table.sort(\n    table.filter(\n      strings,\n      function(string)\
    \ string.find(substring) ~= nil end)\n  )\nend", "  return [string for string\
    \ in strings if string.find(substring, 1, true) > 0]\nend", "  assert(type(strings)\
    \ == \"table\", \"argument 1 should be a table\")\n  assert(type(substring) ==\
    \ \"string\", \"argument 2 should be a string\")", "  local result = {}\n  for\
    \ _, item in ipairs(strings) do\n    if string.find(item, substring) then\n  \
    \    table.insert(result, item)\n    end\n  end\n  return result\nend", "    local\
    \ result = {}\n    for k, v in pairs(strings) do\n        if v:find(substring)\
    \ then\n            result[#result + 1] = v\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    for i, string in ipairs(strings) do\n\
    \        if string.find(substring) ~= nil then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
