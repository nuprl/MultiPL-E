name: HumanEval_82_prime_length
language: lua
results:
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ your code\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n  \
    \  lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7ez56qh.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpy7ez56qh.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ string == nil then return false end\n  local is_prime = true\n  for i = 2, math.sqrt(string)\
    \ do\n    if (string % i) == 0 then\n      is_prime = false\n    end\n  end\n\
    \  return is_prime\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz2ao6t0_.lua:11:\
    \ bad argument #1 to 'sqrt' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpz2ao6t0_.lua:11: in local 'candidate'\n\t/tmp/tmpz2ao6t0_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ prime_numbers = {}\n    \n    -- A prime number is a natural number greater\
    \ than 1 that has no factors other than 1 and itself.\n    -- A natural number\
    \ is composite if it has at least one pair of numbers greater than 1.\n    \n\
    \    -- A prime number is composite if the product of the prime numbers greater\
    \ than 1 \n    -- equals itself and a natural number is composite if it has at\
    \ least one pair of numbers \n    -- greater than 1 whose product equals itself.\n\
    \    \n    -- If a string has less than or equal to 3 characters, return False.\n\
    \    \n    if string == nil then return end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj_c8jd3g.lua:43: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ string == nil then\n    error(\"string expected\")\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr34481mp.lua:34: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ numbers = {}\n    for _, v in pairs(string) do\n        if numbers.contains(v)\
    \ then\n            return false\n        else\n            table.insert(numbers,\
    \ v)\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6rtp1el7.lua:10:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp6rtp1el7.lua:10: in local 'candidate'\n\t/tmp/tmp6rtp1el7.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Fill in the blanks\n  -- Use a loop to compare each character with the next\
    \ character\n  -- Check if character is prime or not\n  -- Return boolean\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7vux2s7.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_7vux2s7.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ your code here\n  return string.len > 1 and\n    string.len <= (math.sqrt(string.len)\
    \ ^ 0.5) and\n    string.len ~= 1 and\n    string.len ~= string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc80d_hap.lua:10:\
    \ attempt to compare number with function\nstack traceback:\n\t/tmp/tmpc80d_hap.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpc80d_hap.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    if\
    \ string == nil or string == '' then return false end\n    if string == '0' then\
    \ return false end\n    local firstNumber, rest = string.sub(1, string.len()),\
    \ string.sub(nil, 1)\n    if string.len(firstNumber) == 0 then return false end\n\
    \    if #firstNumber > 2 then return false end\n    local prime = true\n    for\
    \ i = 2, #firstNumber do\n        if string.sub(firstNumber, i, #firstNumber)\
    \ == string.sub(firstNumber,i, #firstNumber) then\n            prime = false\n\
    \        end\n    end\n    return prime\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg4at4j72.lua:11:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpg4at4j72.lua:11: in local 'candidate'\n\t/tmp/tmpg4at4j72.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    for\
    \ i = 2, math.floor(math.sqrt(#string)+1) do -- Check for factors up to the square\
    \ root\n        if #string%i == 0 then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrw0f0_z.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqrw0f0_z.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  for\
    \ i = 2,math.sqrt(string) do\n    if string:sub(i,i) == 1 then return false end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzg8r7_57.lua:9:\
    \ bad argument #1 to 'sqrt' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpzg8r7_57.lua:9: in local 'candidate'\n\t/tmp/tmpzg8r7_57.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    return\
    \ not (string.find and string.find(string, '[^' .. primes .. ']'))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi8y2i8kk.lua:9:\
    \ attempt to concatenate a nil value (global 'primes')\nstack traceback:\n\t/tmp/tmpi8y2i8kk.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpi8y2i8kk.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  return\
    \ string.match(\"^%d%d*$\") or string.match(\"^%d+%d*$\") or string.match(\"^%d*%d+$\"\
    ) or\n    string.match(\"^%d*%d*%d+$\") -- any form of \"(^n)*$\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe28zu1j6.lua:9:\
    \ bad argument #2 to 'match' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpe28zu1j6.lua:9: in local 'candidate'\n\t/tmp/tmpe28zu1j6.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    --\
    \ base case\n    if string == nil then\n        error('string argument is nil')\n\
    \    end\n    -- get string length\n    local string_length = string.len\n   \
    \ if string_length == nil then\n        error('string argument has no method \"\
    len\"')\n    end\n    -- return True if string is prime and False otherwise\n\
    \    return string_length == 2 or string_length == 3 or string_length == 5 or\
    \ string_length == 7 or string_length == 11 or string_length == 13 or string_length\
    \ == 17 or string_length == 21 or string_length == 25 or string_length == 29 or\
    \ string_length == 31 or string_length == 33 or string_length == 37 or string_length\
    \ == 41 or string_length == 43\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppb37mom_.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppb37mom_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  return\
    \ string~=(string:len()-1) and string%(string:len()) == 0 end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzuiy8v0x.lua:10: <eof> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Write your solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0ib7hz5.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpi0ib7hz5.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ i = 1\n    local length = string[1]\n    for i = 2, #string do\n        local\
    \ tmp = string[i]\n        length = string[i]\n        if length == tmp then\n\
    \            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ut7nf44.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ut7nf44.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   local\
    \ i = 1\n   while i <= math.sqrt(string) do\n      if string.sub(string,i,i+1)\
    \ ~= '#' then\n         return false\n      end\n      i = i + 1\n   end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc81g6_kn.lua:10:\
    \ bad argument #1 to 'sqrt' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpc81g6_kn.lua:10: in local 'candidate'\n\t/tmp/tmpc81g6_kn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   for\
    \ i = 2,string.len() do\n      -- check if the current number is prime\n     \
    \ if string.find(string.sub(string, i , i)) == nil then\n         return false\n\
    \      end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_2wld0ut.lua:9:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp_2wld0ut.lua:9: in local 'candidate'\n\t/tmp/tmp_2wld0ut.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    if\
    \ string == nil then\n        return 'invalid input'\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfisld4yu.lua:34: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    return\
    \ string.match('^%s*$','%d'):reverse():find('/')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptr03x1uy.lua:9:\
    \ attempt to index a nil value\nstack traceback:\n\t/tmp/tmptr03x1uy.lua:9: in\
    \ local 'candidate'\n\t/tmp/tmptr03x1uy.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\t--\
    \ Write your code here\n\tlocal prime_number = 0\n\tlocal prime_number_count =\
    \ 0\n\tfor letter in string.gmatch(\"(.)\", string) do\n\t\tlocal temp = int(letter)\n\
    \t\tif temp%2 == 0 and temp>2 then\n\t\t\tprime_number = prime_number + 1\n\t\t\
    end\n\tend\n\tif prime_number>0 and prime_number_count < prime_number then\n\t\
    \treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflt4zdd6.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpflt4zdd6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\t--\
    \ Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdug5lyq8.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpdug5lyq8.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ #string < 2 then\n    return false\n  end\n  local p = 1\n  local n = #string\n\
    \  for i = 1, n do\n    if string.sub(s, i, i+p) ~= '*' then\n      p = p + 1\n\
    \    end\n  end\n  if p == 2 then\n    return true\n  else\n    return false\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvoey41fg.lua:15:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpvoey41fg.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpvoey41fg.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ string == nil then\n    string = \"\"\n  end\n  local prime = true\n  local\
    \ number = tonumber(string) or 1\n  -- We only need to check odd numbers in list\n\
    \  if number % 2 == 1 then\n    -- We only need to check numbers that are divisible\
    \ by 2\n    for i = number, 2, -1 do\n      if i % 2 == 0 then\n        prime\
    \ = false\n        break\n      end\n    end\n  end\n  return prime\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7y2fwxy.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp7y2fwxy.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ counter = 0\n    for char in string.gmatch(\"%S+\") do\n        if string[counter]\
    \ == \"\" then\n            return false\n        end\n        if string.len(string)\
    \ == counter or string.len(string) == counter + 1 then\n            return true\n\
    \        end\n        counter = counter + 1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpol8xrz5m.lua:10:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpol8xrz5m.lua:10: in local 'candidate'\n\t/tmp/tmpol8xrz5m.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ string==nil then return nil\n  elseif string:len() == 0 then return false\n\
    \  elseif string:len() > 2 then return false\n  else\n    for i = 2,string-1 do\n\
    \      if string:sub(i,i) ~= '0' then return false\n    end\n  end\n  return true\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkx5fy5xf.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkx5fy5xf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ n = string.len()\n    local j = 2\n    local result = true\n    while j < n\
    \ do\n        if not n % j then\n            result = false\n        end\n   \
    \     j = j * 2\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0cmvzkg_.lua:9:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp0cmvzkg_.lua:9: in local 'candidate'\n\t/tmp/tmp0cmvzkg_.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Write your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi6zgsjzt.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpi6zgsjzt.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ count = 0\n    for _, char in string.gmatch('^(.-)%%(.-)$', '') do\n       \
    \ if string.sub(char, 1, string.len(char)) ~= char then\n            count = count\
    \ + 1\n        end\n    end\n    return count % 2 ~= 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe0gc6wyr.lua:11:\
    \ bad argument #1 to 'len' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpe0gc6wyr.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpe0gc6wyr.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ If the string is 0, return True\n  if string == nil then\n    return True\n\
    \  end\n  -- If the string is a number between 0 and 1 inclusively, return True\n\
    \  -- This is to prevent a division by zero error\n  if string.byte() <= 1 then\n\
    \    return true\n  end\n  -- If the string length is 0 return false\n  if string.len()\
    \ == 0 then\n    return false\n  end\n  -- Use a table containing all numbers\
    \ less than or equal to the string length\n  -- that are not divisible by any\
    \ number in the string\n  -- This prevents us from checking numbers that are divisible\
    \ by 0\n  local primes = {}\n  for i=1,string.len() do\n    -- If the string length\
    \ is greater than the number in the string,\n    -- it is divisible by all numbers\
    \ less than the string length\n    if string.len() > i then\n      -- If any number\
    \ in the string is divisible by number in the string,\n      -- we found a prime\
    \ number\n      if string.mod(i,string.len()) == 0 then\n        -- If the prime\
    \ number is not in the table\n        if primes[i] == nil then\n          -- Add\
    \ it to the table containing all numbers less than or equal\n          -- to the\
    \ string length that are not divisible by any number in\n          -- the string\n\
    \          primes[i] = i\n        end\n      end\n    end\n  end\n  -- Check if\
    \ the string length is prime\n  if string.len() ~= 1 then\n    -- If the string\
    \ length is 1, it is not a prime number\n    return false\n  end\n  -- Check if\
    \ the prime is in the table\n  if primes[string.len()] == nil then\n    return\
    \ false\n  end\n  -- If all the above checks failed, it is not a prime number\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n  \
    \  lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpphigaq10.lua:15:\
    \ bad argument #1 to 'byte' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpphigaq10.lua:15: in local 'candidate'\n\t/tmp/tmpphigaq10.lua:59: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   --\
    \ Your code here\n   local length = 0\n   for i = 1, #string do \n      local\
    \ char = string.sub(i, i)\n      if char == \"H\" then\n         return False\n\
    \      else\n         length = length + 1\n         if length == 2 then\n    \
    \        break\n         end\n      end\n   end\n   return True\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngvexlh3.lua:28:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpngvexlh3.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  return\
    \ string.gmatch(string.gsub(string, '[^' .. string.gsub('0123456789', '9') ..\
    \ ']', ''), '%d*$') ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnbwsw5qc.lua:9:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpnbwsw5qc.lua:9: in local 'candidate'\n\t/tmp/tmpnbwsw5qc.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Write your function here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z8av1iy.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp9z8av1iy.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ write your function here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1suy3izb.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1suy3izb.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ string == '' or string == nil then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe53u2wy4.lua:34: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   for\
    \ i = 2, #string do\n      if string[i] ~= string[math.mod(i,#string)] then\n\
    \         return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp596m9p8m.lua:10:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmp596m9p8m.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp596m9p8m.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   for\
    \ i = 2, #string do\n      local current = string[i]\n      for j = 1, #string\
    \ do\n         if string[i] == string[j] then\n            current = string[i]\n\
    \         end\n      end\n      if current == 0 then return false end\n   end\n\
    \   return true\nend\n</cell>\n<text>\n5.4 (3 points)\nWrite a function that returns\
    \ all prime numbers less than or equal to $N$:\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2n14uu7b.lua:20: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    --\
    \ your code here\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcviakveg.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcviakveg.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  for\
    \ i = 1, #string do\n    -- Get the ascii code of each character\n    local ascii\
    \ = string.char(string.byte(string, i))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgzhnevas.lua:34: 'end' expected (to close 'for' at line 9)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ function count(s)\n        local i = 0\n        while s[i] ~= nil do i = i+1\
    \ end\n        return i\n    end\n    \n    local n = count(string)\n    \n  \
    \  for i=1, n/2 do\n        if string.sub(string,i,i)%2 == 1 then\n          \
    \  return false\n        end\n    end\n    return not (n%2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dmxzdqp.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1dmxzdqp.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\t--\
    \ base case\n\tif not string then\n\t\treturn false\n\tend\n\t-- test every letter\n\
    \tfor i = 1, #string, 1 do\n\t\tlocal letter = string.sub(i, i)\n\t\t-- If the\
    \ letter is not a number, then it is not prime\n\t\tif not (string.byte(letter)\
    \ == 0x30) then\n\t\t\treturn false\n\t\tend\n\t\t-- if it is a number, then it\
    \ is only a possibility\n\t\tif string.byte(letter) == 0x31 then\n\t\t\t-- test\
    \ every number between 2 and the\n\t\t\t-- length of the string and only prime\
    \ the number\n\t\t\t-- if it is not a power of two\n\t\t\tfor j = 2, #string do\n\
    \t\t\t\t-- If the letter isn't a power of two, then the letter is\n\t\t\t\t--\
    \ not prime so there is no need to continue testing it\n\t\t\t\t-- since it is\
    \ not a prime number\n\t\t\t\tif not (string.byte(letter) ~= 0x20) then\n\t\t\t\
    \t\treturn false\n\t\t\t\tend\n\t\t\t\t-- test the number\n\t\t\t\tlocal n = string.byte(letter)\
    \ - 0x30\n\t\t\t\t-- if the number is divisble by the length of the string then\
    \ it is\n\t\t\t\t-- not prime\n\t\t\t\tif j % n ~= 0 then\n\t\t\t\t\treturn false\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptlf5r8jc.lua:48:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptlf5r8jc.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  return\
    \ string.find(string, \"%a\") ~= nil and (string.len(string) % 2 == 0 or string.len(string)\
    \ == 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllnje9q5.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpllnje9q5.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\t--\
    \ check for non-string\n\tif type(string) ~= 'string' then\n\t\treturn false\n\
    \tend\n\t-- check if string is empty\n\tif string == nil or string == '' or string\
    \ == ' ' then\n\t\treturn true\n\tend\n\t-- check for a string\n\tif type(string)\
    \ == 'string' then\n\t\t-- Check for length\n\t\tif string.len() > 1 then\n\t\t\
    \t-- Check all characters\n\t\t\tfor i = 1, string.len() do\n\t\t\t\t-- check\
    \ for factors\n\t\t\t\tif math.mod(string.sub(i, i), 2) == 0 then\n\t\t\t\t\t\
    return false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\telse\n\t\t\treturn\
    \ false\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpofeam667.lua:20:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpofeam667.lua:20: in local 'candidate'\n\t/tmp/tmpofeam667.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ count = 0\n    for i = 1, #string do\n        if string.sub(i, i, i) ~= '#'\
    \ then\n            count = count + 1\n        end\n    end\n    return count\
    \ % 2 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8vf5nju.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy8vf5nju.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    --\
    \ base case\n    if string == '' then\n        -- do nothing\n    elseif string\
    \ == 'kittens' then\n        return true\n    end\n    \n    -- iterate over each\
    \ character\n    for i = 1, #string, 1 do\n        -- if the character is not\
    \ in the list of prime characters then\n        -- the string is not prime\n \
    \       if string.sub(i, i + 1) not in prime_characters then\n            return\
    \ false\n        end\n    end\n    \n    -- if we get here then we checked all\
    \ the characters and they all were\n    -- prime\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoz_ixzus.lua:20: 'then' expected near 'not'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   --\
    \ base case\n   if string == '' or string == nil then\n      return false\n  \
    \ end\n   -- base case\n   if #string == 1 then\n      return false\n   end\n\
    \   local found = {}\n   for x = 2, #string do\n      local found = true\n   \
    \   for i = #found + 1, x do\n         if string[x] ~= '^' then\n            if\
    \ string.sub(string,i,i) == string[x] then\n               found = false\n   \
    \            break\n            end\n         end\n      end\n      found[x] =\
    \ found\n   end\n   for x = 2, #string do\n      if found[x] == true then\n  \
    \       return true\n      end\n   end\n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp19jbq50r.lua:20:\
    \ attempt to get length of a boolean value (local 'found')\nstack traceback:\n\
    \t/tmp/tmp19jbq50r.lua:20: in local 'candidate'\n\t/tmp/tmp19jbq50r.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  return\
    \ not not (string.match(string, '^%.%.-%d') or (string:find(' ') == nil))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqknr6z0n.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqknr6z0n.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    --\
    \ Your code here\n    for i = 2, #string do\n        if string:sub(i, i):sub(0,\
    \ 1) ~= '%' then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63fnfa37.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp63fnfa37.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ prime = true\n    for i = 2, #string do\n        if string.sub(i, i, i) ~= ''\
    \ then\n            prime = false\n            break\n        end\n    end\n \
    \   return prime\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqcej96hv.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqcej96hv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  for\
    \ i = 2, #string do\n    for j = i, #string do\n      if string[i] == string[j]\
    \ then\n        return false\n      end\n    end\n    return true\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cjfsp8v.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_cjfsp8v.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    for\
    \ i = 1, #string do\n        if string[i] == '' then\n            return false\n\
    \        end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppw2fnb3g.lua:35: 'end' expected (to close 'for' at line 9)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Reverse the string\n  string = string.char.reverse()\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzd6rd2ps.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   for\
    \ i = 2, #string do\n      if string[i] == string[i-1] then\n         return False\n\
    \      else\n         return True\n      end\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmzlr5hl.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpdmzlr5hl.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\tif\
    \ string == nil then\n\t\tprint('string')\n\tend\n\tlocal is_prime = 1\n\tlocal\
    \ prime = 1\n\tlocal i\n\t\n\tfor i = 2, math.sqrt(string) do\n\t\tif string %\
    \ i == 0 then\n\t\t\tis_prime = 0\n\t\t\tprime = i\n\t\t\tbreak\n\t\tend\n\tend\n\
    \treturn is_prime and prime and prime > 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbynb2g3y.lua:16:\
    \ bad argument #1 to 'sqrt' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpbynb2g3y.lua:16: in local 'candidate'\n\t/tmp/tmpbynb2g3y.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\t--\
    \ Initialize sum\n\tlocal sum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp80l_3tjf.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ primesFound = {}\n    local primesCount = 0\n    local stringLength = string.len()\n\
    \    local stringLength = string.len()\n    for i = 2, stringLength do\n     \
    \   if stringLength % i ~= 0 then\n            primesFound[i] = stringLength %\
    \ i\n            primesCount = primesCount + 1\n        end\n    end\n    return\
    \ primesCount == 1 and primesFound[1] == 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcj1iwmev.lua:11:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpcj1iwmev.lua:11: in local 'candidate'\n\t/tmp/tmpcj1iwmev.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ prime = false\n    local limit = string.len()\n    for i = 2, limit do\n   \
    \     if string.sub(string,i,i)==string.sub(string,i-1,i) then\n            prime\
    \ = true\n        end\n    end\n    return prime\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplpxgorxk.lua:10:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmplpxgorxk.lua:10: in local 'candidate'\n\t/tmp/tmplpxgorxk.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  return\
    \ string.gsub(string, \"\", 1).rem == 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb5z9s50.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqb5z9s50.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    if\
    \ #string == 0 then return false end\n    for i=2, #string do\n        if string[i]\
    \ ~= 'z' then\n            return true\n        end\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmycae0u.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbmycae0u.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    if\
    \ not string then\n        string = ''\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl76q3s48.lua:34: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    if\
    \ string == nil then\n        error('Invalid argument')\n    end\n    local n\
    \ = string.len\n    for i = 1, math.floor(n/2) do\n        if string.sub(i, i,\
    \ string.len() * i) == string[i] then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ywhfvi5.lua:13:\
    \ attempt to perform arithmetic on a function value (local 'n')\nstack traceback:\n\
    \t/tmp/tmp2ywhfvi5.lua:13: in local 'candidate'\n\t/tmp/tmp2ywhfvi5.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  for\
    \ _, item in string.gmatch(string, '([^%s]+)') do\n    if string.len(item) ~=\
    \ 1 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxi7ajm57.lua:10:\
    \ bad argument #1 to 'len' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpxi7ajm57.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpxi7ajm57.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_ogec94.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpj_ogec94.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\tif\
    \ string == nil then\n\t\treturn nil\n\tend\n\t\n\tlocal count = 0\n\tfor char\
    \ in string:gmatch(\"[^\\n\\r]*\") do\n\t\tif string.len(char) == 1 then\n\t\t\
    \tbreak\n\t\telse\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\t\n\treturn count\
    \ % 2 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2k5yp5k2.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2k5yp5k2.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ TODO: replace this with something more efficient\n  local primes = {}\n  local\
    \ i = 1\n  while i <= math.sqrt(#string) do\n    local found = false\n    for\
    \ i=1, #primes do\n      if string[i] == primes[i] then\n        found = true\n\
    \      end\n    end\n    if not found then\n      primes[#primes + 1] = string[i]\n\
    \    end\n    i = i + 1\n  end\n  if #primes == 1 then\n    return true\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33_qehr8.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp33_qehr8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   --\
    \ Base Cases\n   if string.len() == 1 then return true end\n   if string.len()\
    \ == 0 then return false end\n   if string.len() % 2 == 0 then return false end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6ea9fejd.lua:35: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   for\
    \ i = 2, #string do\n      if string:sub(i, i) == '' then\n         return true\n\
    \      end\n      if string:sub(i, i) ~= '' and string:sub(i, i) >= 'a' and string[i]:sub(0,\
    \ 1) ~= 'e' then\n         return false\n      end\n   end\n   return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpprgftess.lua:13:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpprgftess.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpprgftess.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ TODO: use isPrime\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq1w43ds6.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq1w43ds6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ string == nil then\n    return false\n  end\n  local count = 0\n  for i = 1,\
    \ #string do\n    count = count + string.sub(string, i, i)\n  end\n  for i = 2,\
    \ count do\n    if count % i == 0 then\n      return false\n    end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n  \
    \  lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2njldtu9.lua:14:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmp2njldtu9.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp2njldtu9.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  return\
    \ #string ~= 1 and #string <= #string and all(string.sub(string,1,i) == string.sub(string,i+1,i)\
    \ for i = 1, #string-1 and string[i] ~= '2')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg69hkva9.lua:9: ')' expected near 'for'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ base case\n  if string == '' then return false end\n  -- check for factors\n\
    \  for i = 2, #string do\n    if string.sub(i, i) == string.sub(string) then return\
    \ false end\n  end\n  -- all done\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2kn1d5e0.lua:13:\
    \ bad argument #2 to 'sub' (number expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp2kn1d5e0.lua:13: in local 'candidate'\n\t/tmp/tmp2kn1d5e0.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ string==nil then\n      return nil\n  end\n  if #string<2 then\n      return\
    \ nil\n  end\n  if #string==2 then\n      return true\n  end\n  local i=2\n  while\
    \ i<=#string do\n    if string.sub(string,i,i)~=string[i] then\n        return\
    \ false\n    end\n    i=i+1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w2deg53.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5w2deg53.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    return\
    \ string.find(string, \"^0{3,}\") ~= nil and string.find(string, \"^1{3,}\") ~=\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl3qwdo6.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkl3qwdo6.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    if\
    \ string == nil then\n        return nil\n    end\n    local prime_num = 1\n \
    \   local prime_num_str = string\n    local prime_num_len = #string\n    local\
    \ prime_num_len_str = string\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu4sxnuw8.lua:38: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  for\
    \ _, ch in string:gmatch('%d+') do\n    if ch:mod(2):get() == 0 then return false\
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jopvdhc.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2jopvdhc.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ str = ''\n    for _,c in ipairs(string) do\n        str = str .. c\n    end\n\
    \    local count = 1\n    local prime = 0\n    for _,c in ipairs(str) do\n   \
    \     if c == 0 then\n            count = count + 1\n        else\n          \
    \  count = count - 1\n            if count > prime then\n                prime\
    \ = count\n            end\n        end\n    end\n    return prime ~= nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpauexxc07.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpauexxc07.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    --\
    \ Use a for loop to iterate over the characters in the string\n    -- for i =\
    \ 1, #string do\n    for i = 1, #string - 1 do\n    -- Use a for loop to iterate\
    \ over each character in the string\n        for j = 1, #string - 1 do\n     \
    \       if string[i] == 'a' and string[j + 1] == 'a' then\n                --\
    \ If both characters are 'a'\n                if string[i + 1] == 'a' then\n \
    \                   -- If next character is 'a'\n                    -- string[i]\
    \ ~= 'a'\n                    if string[j + 1] ~= 'a' then\n                 \
    \       -- If next character is not 'a'\n                        -- string[j]\
    \ ~= 'a'\n                        -- If length of string is prime\n          \
    \              return string\n                    else\n                     \
    \   -- If next character is non-prime\n                        return nil\n  \
    \                  end\n                else\n                    -- If next character\
    \ is prime\n                    return nil\n                end\n            else\n\
    \                -- If string[i] is not 'a'\n                return nil\n    \
    \        end\n        end\n    end\n    -- Return the final string\n    return\
    \ string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsw_g1mg.lua:45:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmphsw_g1mg.lua:45: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Write your logic here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzp7q_5qz.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpzp7q_5qz.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ count = 0\n    for i = 2, #string do\n        local n = string:sub(i, i)\n \
    \       if n:len() >= 1 and n[1]:len() == 1 then\n            count = count +\
    \ 1\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd9eff5a6.lua:38: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  local\
    \ length = 1\n  for i = 2, math.sqrt(string) do\n    length = length * i -- i\
    \ * i\n    if string and string % i == 0 then return false end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi7tbis00.lua:10:\
    \ bad argument #1 to 'sqrt' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpi7tbis00.lua:10: in local 'candidate'\n\t/tmp/tmpi7tbis00.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ number = tonumber(string)\n    if not number then\n        string = '' -- Force\
    \ a string\n    end\n    if string == '' then return true end\n    if number ==\
    \ 1 then return true end\n    if number == 2 then return false end\n    -- Check\
    \ if number is odd\n    local remainder\n    if number % 2 == 0 then\n       \
    \ remainder = (number % 3)\n    else\n        remainder = (number % 5)\n    end\n\
    \    if remainder == 0 then return false end\n    -- Check from 3 and up\n   \
    \ for i = 3, number-1, 2 do\n        if number % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_g9ulsn.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps_g9ulsn.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ prime = false\n    local p = 1\n    for i = 1,#string do\n        if string.sub(i,i)\
    \ ~= string[i] then\n            prime = true\n            break\n        end\n\
    \        p = p + 1\n    end\n    return prime\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbjmvbrw.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgbjmvbrw.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ base case\n  if string == '' then return false end\n  -- base case\n  if string\
    \ == 'a' then return false end\n  -- base case\n  if string == 'ab' then return\
    \ true end\n  -- base case\n  if string == 'abc' then return true end\n  -- base\
    \ case\n  if string == 'abcde' then return true end\n  -- base case\n  if string\
    \ == 'abcdef' then return true end\n  -- base case\n  if string == 'abcdefg' then\
    \ return true end\n  -- base case\n  if string == 'abcdefgh' then return true\
    \ end\n  -- base case\n  if string == 'abcdefghi' then return true end\n  -- base\
    \ case\n  if string == 'abcdefghij' then return true end\n  -- base case\n  if\
    \ string == 'abcdefghijk' then return true end\n  -- base case\n  if string ==\
    \ 'abcdefghijkl' then return true end\n  -- base case\n  if string == 'abcdefghijklm'\
    \ then return true end\n  -- base case\n  if string == 'abcdefghijklmn' then return\
    \ true end\n  -- base case\n  if string == 'abcdefghijklmno' then return true\
    \ end\n  -- base case\n  if string == 'abcdefghijklmnop' then return true end\n\
    \  -- base case\n  if string == 'abcdefghijklmnopqrs' then return true end\n \
    \ -- base case\n  if string == 'abcdefghijklmnopqrst' then return true end\n \
    \ -- base case\n  if string == 'abcdefghijklmnopqrstu' then return true end\n\
    \  -- base case\n  if string == 'abcdefghijklmnopqrstuv' then return true end\n\
    \  -- base case\n  if string == 'abcdefghijklmnopqrstuvw' then return true end\n\
    \  -- base case\n  if string == 'abcdefghijklmnopqrstuvwx' then return true end\n\
    \  -- base case\n  if string == 'abcdefghijklmnopqrstuvwxy' then return true end\n\
    \  -- base case\n  if string == 'abcdefghijklmnopqrstuvwxyz' then return true\
    \ end\n  -- base case\n  if string == 'abcefghijklmnopqrstuvwxyz' then return\
    \ true end\n  -- base case\n  if string == 'acdefghijklmnopqrstuvwxyz' then return\
    \ true end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt9ujg8wk.lua:84: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\t--\
    \ your code here\n\t\n\t-- Don't edit or remove this line, it's used to grade\
    \ your work\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm99djpet.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm99djpet.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    if\
    \ string ~= string.len(string) or string.len(string) <= 1 then\n        return\
    \ false\n    end\n    if string == 1 or string.len(string) == 2 then\n       \
    \ return true\n    end\n    for i = 2, string.len(string) - 1 do\n        if string.sub(string,i,i)\
    \ == string.sub(string,i,i + 1) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcftm97kq.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcftm97kq.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    string\
    \ = string.gsub(string, \"^%s*(.-)%s*$\", \"%1\")\n    local prime = true\n  \
    \  for i = 2, #string do\n        if string.find(string, \"%.\"..i..\"%\") then\n\
    \            prime = false\n            break\n        end\n    end\n    return\
    \ prime\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qh86nq1.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9qh86nq1.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   for\
    \ i=2,math.sqrt(string) do\n      if string:sub(i,i)==string then\n         return\
    \ true\n      end\n   end\n   return false\nend\n</code>\n<|/ a tags=lua |>\n\
    <| a |>\nHere is a simple implementation that checks whether the input is a prime\
    \ number:\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n  \
    \  lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuanwhltr.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\tlocal\
    \ prime_numbers = { 2, 3 }\n\t\n\tfor i = 2, #string do\n\t\tif string[i] ~= 'z'\
    \ then\n\t\t\tlocal letter = string.sub(string,i,i)\n\t\t\tlocal num = tonumber(letter)\n\
    \t\t\t-- If the letter is a digit then make it a string\n\t\t\tif num == tonumber(letter)\
    \ then\n\t\t\t\tnum = tostring(num)\n\t\t\tend\n\t\t\t-- If num is even then it\
    \ is not\n\t\t\tif num % 2 == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\t\
    -- If num is odd, then it must be prime\n\t\t\tif num % 2 == 1 then\n\t\t\t\t\
    -- The next number is its only divisor\n\t\t\t\tlocal next_number = tonumber(letter\
    \ + letter)\n\t\t\t\t-- If the next number is 0, it is prime\n\t\t\t\tif next_number\
    \ == 0 then\n\t\t\t\t\tfor j = prime_numbers[1], #prime_numbers do\n\t\t\t\t\t\
    \t-- If next_number divides the divisor, it is prime\n\t\t\t\t\t\tif next_number\
    \ % prime_numbers[j] == 0 then\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend\n\t\
    \t\t\t\tend\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\t\t-- If next_number is\
    \ 1, then it is not prime\n\t\t\t\telseif next_number == 1 then\n\t\t\t\t\treturn\
    \ false\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj7h0g6u8.lua:46: <eof> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    for\
    \ i = 2, 10 do\n        for j = 2, i do\n            if string.sub(string, 1,\
    \ i) == string.sub(string, 1, j) then\n                return false\n        \
    \    end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwjp9eue.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcwjp9eue.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  return\
    \ not (string.find(' '))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo7hef4yi.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpo7hef4yi.lua:9: in local 'candidate'\n\t/tmp/tmpo7hef4yi.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Base case\n  if string == nil then\n    return string\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplv7mc6vz.lua:35: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ string.len >= 2 then\n    local prime = 0\n    for i = 2, string.len-1 do\n\
    \      prime = prime + string.sub(i, i, string.len) == string.sub(i, i+1, string.len)\n\
    \    end\n    return prime == string.len\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprzonpr_x.lua:9:\
    \ attempt to compare number with function\nstack traceback:\n\t/tmp/tmprzonpr_x.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmprzonpr_x.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ count = 1\n    local prime = True\n    for i=2, #string do\n        count =\
    \ count\n            if string[i] == string[count] then\n            prime = false\n\
    \            end\n        end\n        if prime then\n            count = count\
    \ + 1\n        end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpac7ebs1o.lua:26:\
    \ expected: true, actual: 1\nstack traceback:\n\t/tmp/tmpac7ebs1o.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\tlocal\
    \ count = 0\n\tlocal length = #string\n\tlocal prime = false\n\tfor i = 1, length\
    \ do\n\t\tif not string.sub(i, i, i) ~= '\\n' then\n\t\t\tcount = count+1\n\t\t\
    \tif count == 2 then\n\t\t\t\tprime = true\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ prime\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoplr9te_.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoplr9te_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ prime = {}\n    for i=1, math.sqrt(#string) do\n        if string.sub(i, i)\
    \ == string[i] then\n            table.insert(prime, string[i])\n        end\n\
    \    end\n    return #prime == 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6noledzo.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6noledzo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\t--\
    \ Fill in the solution here\n\treturn \nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxr0gq7b.lua:16:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpzxr0gq7b.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  local\
    \ prime_numbers, i, result = {}, 0, \"\"\n  for i = 2, #string do\n    prime_numbers[#prime_numbers\
    \ + 1], i\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n  \
    \  lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa3o8qr4h.lua:12: '=' expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    --\
    \ Base Case\n    if string == '' then return False end\n    if string == '' then\
    \ return False end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n  \
    \  lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm_2aqfko.lua:34: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Write your solution here\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbe9ayhbc.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbe9ayhbc.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ string == '' then return true end\n  if string[1] == '+' then string = string[1:end]\
    \ end\n  if string[#string] == '' then return true end\n  for i = 2, #string do\
    \ if string[i] ~= 'z' and string[i - 1] ~= 'z' and string[i] ~= string[i - 1]\
    \ + string[i - 1] then return false end end\n  return true\nend\n</cell>\n<text>\n\
    3.1 Write a function that takes a string and returns True if the string has all\
    \ unique letters , False otherwise\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4luvhd50.lua:10: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    return\
    \ string.len() >= 2 and string.len() <= math.sqrt(math.pow(string.len() - 1, 2))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp18s8_m4r.lua:9:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp18s8_m4r.lua:9: in local 'candidate'\n\t/tmp/tmp18s8_m4r.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   local\
    \ p = 1\n   for _, x in pairs(string) do\n      if p == 1 then return False end\n\
    \      if p == 2 then return True end\n      if x ~= string[p] then p = p + 1\
    \ end\n   end\n   return p == 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1qzwxa7r.lua:10:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp1qzwxa7r.lua:10: in local 'candidate'\n\t/tmp/tmp1qzwxa7r.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  for\
    \ i, x in ipairs(string.gmatch('^1?%d?$') do return true end) do\n    return false\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc00mlrlw.lua:9: ')' expected near 'do'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ count = 0\n    \n    for c in string.gmatch(\"^([%s])+$\",\"%S+\") do\n    \
    \    if (c == \"[\" or c == \"]\" or (string.find(string.sub(c,1,2),\"-\") ==\
    \ 1)) or \n          (string.find(string.sub(c,1,2),\"=\") == 1) or (string.find(string.sub(c,1,2),\"\
    \ \") == 1) then\n            count = count + 1\n        else\n            count\
    \ = count + 1\n        end\n    end \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6yesile1.lua:41: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   local\
    \ prime_count = #string\n   if prime_count <= 0 then return false end\n   for\
    \ i = 2, prime_count do\n      if string.sub(i, i, #string) == string then\n \
    \        return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirwg4lz0.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpirwg4lz0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqdbuemb.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpiqdbuemb.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ number = tonumber(string)\n    if number == nil then return false end\n    local\
    \ primes = {}\n    local i = 1\n    repeat\n        primes[i] = math.floor((math.sqrt((number\
    \ * number) - (i * i))) / 2)\n        i = i + 1\n    until primes[i] == 0\n  \
    \  \n    -- We have found a prime number\n    if primes[prime_length] == number\
    \ then\n        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <text>\nQuestion 3\nNow that we have our prime_length function we can use it to\
    \ verify our prime_length function and use it to validate our prime_length function.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3rw6r_bj.lua:25: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    --\
    \ Write your code here\n    local prime_count = #string\n    for i = 1, prime_count\
    \ do\n        local current_prime = string.sub( string, i, i )\n        for j\
    \ = i + 1, prime_count do\n            if current_prime ~= string.sub( string,\
    \ j, j ) then\n                return false\n            end\n        end\n  \
    \  end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_04ak1sd.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_04ak1sd.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Write your code here\n  return true -- Replace this line with your own code\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiwhz9vsm.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiwhz9vsm.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    for\
    \ i = 2, math.floor(string/2) do\n        if string%i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxvjq2074.lua:9:\
    \ attempt to perform arithmetic on a string value (local 'string')\nstack traceback:\n\
    \t/tmp/tmpxvjq2074.lua:9: in local 'candidate'\n\t/tmp/tmpxvjq2074.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  return\
    \ string.len() ~= 1 and string.len() == math.floor(string:len() / 2)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3clalg71.lua:9:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp3clalg71.lua:9: in local 'candidate'\n\t/tmp/tmp3clalg71.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ s = string.lower(string)\n    for i = 1, #s do\n        if ((string.len(s)/i)\
    \ == 1) then\n            local p = string.len(s) - (i-1)\n            if (string.len(s)\
    \ - (i-1)) ~= math.floor((string.len(s)/i)) then\n                return false\n\
    \            else\n                return true\n            end\n        end\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqon70du5.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqon70du5.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Your code here\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjd_pjk6_.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjd_pjk6_.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  for\
    \ index, value in string.gmatch'(.-)' do\n    return index == 0 or math.mod(index,\
    \ 2) == 0 or index == 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5etits3w.lua:9:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp5etits3w.lua:9: in local 'candidate'\n\t/tmp/tmp5etits3w.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  local\
    \ n = #string\n  for i=2,n do\n    if string[i]==string[n-i] then return False\
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptprh_guu.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmptprh_guu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    --\
    \ base case -- base case is when given a string of length 0\n    -- return True\
    \ because 0 and 1 are not prime numbers\n    if string == '' or string == '0'\
    \ or string == '1' then\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6m1wfdun.lua:36: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\tif\
    \ string == nil then\n\t\treturn nil\n\telseif type(string) ~= 'string' then\n\
    \t\treturn nil\n\telse\n\t\tlocal len = string.len\n\t\tlocal char\n\t\tlocal\
    \ prime\n\t\tfor char in string:gmatch'([^%s]+)' do\n\t\t\tif char == '' then\n\
    \t\t\t\tprime = true\n\t\t\telseif prime then\n\t\t\t\treturn false\n\t\t\tend\n\
    \t\t\tif char == string[(len-1) - 1] then\n\t\t\t\tprime = false\n\t\t\tend\n\t\
    \tend\n\t\treturn prime\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphlx6jhrx.lua:23:\
    \ attempt to perform arithmetic on a function value (local 'len')\nstack traceback:\n\
    \t/tmp/tmphlx6jhrx.lua:23: in local 'candidate'\n\t/tmp/tmphlx6jhrx.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    if\
    \ string ~= nil then\n        for i = 1, #string do\n            if string.sub(i,\
    \ i, i) ~= 1 then\n                return false\n            end\n        end\n\
    \        return true\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsx15qviv.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsx15qviv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1z92gz6m.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1z92gz6m.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ count = 0\n    local prime = true\n    for i = 2, #string do\n        count\
    \ = count + 1\n        if string[i] == string[1] then\n            count = count\
    \ - 1\n        end\n        if string[i] == string[2] then\n            count\
    \ = count - 1\n        end\n        if string[i] == string[3] then\n         \
    \   count = count - 1\n        end\n        if string[i] == string[4] then\n \
    \           count = count - 1\n        end\n        if string[i] == string[5]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[6]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[7]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[8]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[9]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[10]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[11]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[12]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[13]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[14]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[15]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[16]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[17]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[18]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[19]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[20]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[21]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[22]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[23]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[24]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[25]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[26]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[27]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[28]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[29]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[30]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[31]\
    \ then\n            count = count - 1\n        end\n        if string[i] == string[32]\
    \ then\n            count = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphs89kvuc.lua:108: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  return\
    \ string.len() ~= 2 and all(string.sub(1, string.len()) == string.sub(2, string.len()))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv_pdd74c.lua:9:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpv_pdd74c.lua:9: in local 'candidate'\n\t/tmp/tmpv_pdd74c.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ count = 0\n    for character in string.gmatch('(%a+)') do\n        if string.sub('.-',1,1)%string==0\
    \ then\n            count = count+1\n        end\n    end\n    return count==1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp715ci2a3.lua:10:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp715ci2a3.lua:10: in local 'candidate'\n\t/tmp/tmp715ci2a3.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  return\
    \ string.char and #string.char == 1 and string.char:match('^%s*(%d+)$'):first\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmwk2mkts.lua:10: function arguments expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Your code here!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_slwhsu.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpp_slwhsu.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\t--\
    \ Your code here\n\t-- Returning True if string is prime or False otherwise\n\t\
    -- Use while loop for string\n\t\n\t-- If string is empty return True\n\t-- If\
    \ string is null return False\n\t-- For any other string return False\n\t\n\t\
    -- Use for loop for string and if loop for number\n\t\n\treturn false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqm6rsbn.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphqm6rsbn.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\t--\
    \ Write your solution here\n\t-- TODO: Implement it here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1sc7_707.lua:16:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1sc7_707.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ length = #string\n    for i = 2, length do\n        if (string.sub(string,i,i)\
    \ == '') then\n            length = i\n            break\n        end\n    end\n\
    \    if length == 2 then\n        -- Even length is prime number\n        return\
    \ true\n    else\n        -- Odd length is composite number\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvt9zgj8.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplvt9zgj8.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ i, limit = 2, string\n    for i = 2, limit do\n        if string.sub(string,i,i)\
    \ == '' then break end\n        if string.len(string) ~= i then break end\n  \
    \  end\n    return i > 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb565zin6.lua:10:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmpb565zin6.lua:10: in\
    \ local 'candidate'\n\t/tmp/tmpb565zin6.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   for\
    \ i = 2, math.floor(math.sqrt(string.lenght) ) do\n      if string.lenght % i\
    \ == 0 then\n         return False\n      end\n   end\n   return True\nend\n</cell>\n\
    <text>\nTest your Code\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbg8ppjp5.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ i = 1\n    while i <= string.len() do\n        local prime = true\n        --\
    \ Check all odd chars\n        for j = string.len() - 1, 1, -1 do\n          \
    \  if string.sub(i, j, j) ~= 'a' then\n                prime = false\n       \
    \         break\n            end\n        end\n        if prime then\n       \
    \     return true\n        end\n        i = i + 2\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcp9vdvlq.lua:10:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpcp9vdvlq.lua:10: in local 'candidate'\n\t/tmp/tmpcp9vdvlq.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ write your code\n  -- return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyguzz6fv.lua:16:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpyguzz6fv.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    --\
    \ The prime length algorithm goes here.\n    -- The algorithm is very easy to\
    \ understand and can be implemented\n    -- without much effort. Your code will\
    \ be more robust and maintainable\n    -- in the future than if you had to implement\
    \ it yourself.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyxpk8dkj.lua:35: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Your code here\n  \n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcmp95oq3.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcmp95oq3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    if\
    \ string==nil then return end\n    local primes={}\n    local count=0\n    for\
    \ char in string.gmatch( string, \"(%S+)\") do\n        count+=1\n        -- Check\
    \ to see if this char is a prime\n        if count==1 then\n            primes[#primes+1]=count\n\
    \        else\n            -- If the previous char is a prime, then the length\n\
    \            -- is prime\n            if primes[count-1] ~= count\n          \
    \  then\n                return false\n            end\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo786yxd9.lua:13: syntax error near '+'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  return\
    \ string.len > 1 and\n    (string.rep('.', 1, string.len) > string.len or\n  \
    \   (string.len() * string.len == string.len))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjbibdhps.lua:9:\
    \ attempt to compare number with function\nstack traceback:\n\t/tmp/tmpjbibdhps.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpjbibdhps.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ primes = {}\n    for i = 2, math.ceil(string:len() / 2) do\n        if not primes[i]\
    \ then\n            for j = 2, #primes do\n                primes[j] = string.find(string.sub(string,\
    \ i * j, (i + 1) * j), string.sub(string, 1, i)) == nil or\n                 \
    \   string.find(string.sub(string, i * j, (i + 1) * j), string.sub(string, (i\
    \ + 1), i)) == nil\n            end\n            if primes[i] then\n         \
    \       return false\n            end\n        end\n        primes[i] = true\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvc06duub.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvc06duub.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ counter = 2\n    while counter < #string do\n        if string.sub(string,counter,counter\
    \ + 1) ~= '\\n' then\n            counter = counter + 1\n        else\n      \
    \      counter = 0\n        end\n    end\n    if counter >= #string then\n   \
    \     return false\n    else\n        return true\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplfqcw32j.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplfqcw32j.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ count = 0\n    for _, _ in string.gmatch('(^|\\\\W)' .. string.char(97) .. '(%w+)()',\
    \ '') do\n        if string.sub(string, count, count+1) ~= '%W' then\n       \
    \     count = count + 1\n        else\n            count = count + 2\n       \
    \ end\n    end\n    return count >= 3\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4nejufr.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk4nejufr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    --\
    \ your code here\n    return string ~= nil and (string.len() ~= 1) and\n     \
    \      (string.sub(string, 1, string.len() - 1) ~= string.sub(string, string.len()\
    \ - 1)) and\n           (string.sub(string, 1, string.len() / 2) ~= nil) and\n\
    \           (string.sub(string, string.len() / 2 + 1, string.len() - 1) ~= nil)\n\
    end\nprint(prime_length('Hello'))\nprint(prime_length('abcdcba'))\nprint(prime_length('kittens'))\n\
    print(prime_length('orange'))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp43wd3psr.lua:10: bad argument #1 to 'len' (string expected,\
    \ got no value)\nstack traceback:\n\t[C]: in function 'string.len'\n\t/tmp/tmp43wd3psr.lua:10:\
    \ in local 'prime_length'\n\t/tmp/tmp43wd3psr.lua:15: in main chunk\n\t[C]: in\
    \ ?\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ string == nil then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgt0jz8sz.lua:34: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ prime_check = 2\n    for i = 2, 10 do\n        if string.find(string.sub(string,i,i),'[^'..'9'\
    \ .. '!]') then\n            prime_check = i\n        end\n    end\n    return\
    \ prime_check\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n  \
    \  lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4bexjaf.lua:21:\
    \ expected: true, actual: 5\nstack traceback:\n\t/tmp/tmpq4bexjaf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ base case\n  if string == nil then return end\n  \n  -- base case\n  if string.len\
    \ > 1 then return false end\n  \n  -- base case\n  if string.len == 2 then return\
    \ true end\n  \n  -- base case\n  if string.len == 1 and string.chars[1] == string.chars[2]\
    \ then return false end\n  \n  -- base case\n  if string.len == 1 and string.chars[1]\
    \ == 2 then return false end\n  \n  -- base case\n  if string.chars[string.len]\
    \ == string.chars[string.len - 1] then return false end\n  \n  -- base case\n\
    \  if string.chars[string.len] == string.chars[string.len - 2] then return false\
    \ end\n  \n  -- base case\n  if string.chars[string.len] == string.chars[string.len\
    \ - 3] then return false end\n  \n  -- base case\n  if string.chars[string.len]\
    \ == string.chars[string.len - 4] then return false end\n  \n  -- base case\n\
    \  if string.chars[string.len] == string.chars[string.len - 5] then return false\
    \ end\n  \n  -- base case\n  if string.chars[string.len] == string.chars[string.len\
    \ - 6] then return false end\n  \n  -- base case\n  if string.chars[string.len]\
    \ == string.chars[string.len - 7] then return false end\n  \n  -- base case\n\
    \  if string.chars[string.len] == string.chars[string.len - 8] then return false\
    \ end\n  \n  -- base case\n  if string.chars[string.len] == string.chars[string.len\
    \ - 9] then return false end\n  \n  -- base case\n  if string.chars[string.len]\
    \ == string.chars[string.len - 10] then return false end\n  \n  -- base case\n\
    \  if string.chars[string.len] == string.chars[string.len - 11] then return false\
    \ end\n  \n  -- base case\n  if string.chars[string.len] == string.chars[string.len\
    \ - 12] then return false end\n  \n  -- base case\n  if string.chars[string.len]\
    \ == string.chars[string.len - 13] then return false end\n  \n  -- base case\n\
    \  if string.chars[string.len] == string.chars[string.len - 14] then return false\
    \ end\n  \n  -- base case\n  if string.chars[string.len] == string.chars[string.len\
    \ - 15] then return false end\n  \n  -- base case\n  if string.chars[string.len]\
    \ == string.chars[string.len - 16] then return false end\n  \n  -- base \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp40y9g6s3.lua:95: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzbtgdco.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpnzbtgdco.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ count = 0\n    for _, value in ipairs(string.gmatch(\"[%w!%w$%w:]+\", \"%w*\"\
    ) do\n        count = count + 1\n    end)\n    return count ~= 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp51tgeahc.lua:10: ')' expected near 'do'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ string == nil then\n    return\n  end\n  -- Initialise a boolean variable for\
    \ storing whether the number is prime or not\n  local is_prime = false\n  -- Initialise\
    \ a variable for storing the number to test\n  local n = string\n  -- Run through\
    \ the string until we find something which is not divisible by 2\n  while n ~=\
    \ '' do\n    -- If the number is even then there is no need to go into even number\
    \ branches\n    if n % 2 = 0 then\n      -- Initialise a variable for storing\
    \ the number\n      local number = n\n      -- Go through every odd number up\
    \ to n and see if it is divisible by 3\n      while number ~= n do\n        if\
    \ number % 3 = 0 then\n          -- Initialise a variable for storing the number\n\
    \          local number = n\n          -- Go through every even number up to n\
    \ and see if it is divisible by 5\n          while number ~= n do\n          \
    \  if number % 5 = 0 then\n              -- Initialise a variable for storing\
    \ the number\n              local number = n\n              -- Go through every\
    \ odd number up to n and see if it is divisible by 7\n              while number\
    \ ~= n do\n                if number % 7 = 0 then\n                  -- Initialise\
    \ a variable for storing the number\n                  local number = n\n    \
    \              -- Go through every odd number up to n and see if it is divisible\
    \ by 11\n                  while number ~= n do\n                    if number\
    \ % 11 = 0 then\n                      -- Initialise a variable for storing the\
    \ number\n                      local number = n\n                      -- Check\
    \ if it is divisible by 13\n                      if number % 13 = 0 then\n  \
    \                      -- Initialise a variable for storing the number\n     \
    \                   local number = n\n                        -- Check if it is\
    \ divisible by 17\n                        if number % 17 = 0 then\n         \
    \                 -- Initialise a variable for storing the number\n          \
    \                local number = n\n                          -- Check if it is\
    \ divisible by 19\n                          if number % 19 = 0 then\n       \
    \                     -- Initialise a variable for storing the number\n      \
    \                      local number = n\n                            -- Check\
    \ if it is divisible by 23\n                            if number % 23 = 0 then\n\
    \                              -- Initialise a variable for storing the number\n\
    \                              local number = n\n                            \
    \  -- Check if it is divisible by 29\n                              if number\
    \ % 29 = 0 then\n                                -- Initialise a variable for\
    \ storing the number\n                                local number = n\n     \
    \                           -- Check if it is divisible by 31\n              \
    \                  if number % 31 = 0 then\n                                 \
    \ -- Initialise a variable for storing the number\n                          \
    \        local number = n\n                                  -- Check if it is\
    \ divisible by 37\n                                  if number % 37 = 0 then\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptkmet2sr.lua:19: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ length = #string\n    for i = 2, math.floor(math.sqrt(length)) do\n        if\
    \ string.sub(string,i,i)~='' then\n            if string.sub(string,i,i)~='\\\
    n' then\n                return false\n            end\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbne987lk.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbne987lk.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    --\
    \ Your code here\n    --print('string: '..string)\n    if string==nil or string~=''\
    \ then\n        string=''\n    end\n    \n    -- start from 2\n    local flag=true\n\
    \    \n    -- Check each character in the string\n    for i=1,#string do\n   \
    \     -- If it is not prime character\n        if ((string[i]~='0') and isPrime(tostring(string[i]))==false)\
    \ then\n            -- Set the flag to false\n            flag=false\n       \
    \ end\n    end\n    \n    -- Return true or false\n    return flag\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0ceszik.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc0ceszik.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ n = #string\n    if n < 2 then\n        return false\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_sbsci6l.lua:35: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphj1s0a3b.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmphj1s0a3b.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cz2uysz.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp5cz2uysz.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ #string == 0 then\n    return true\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp87umastb.lua:34: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ n = #string\n    if n == 1 then\n        return true\n    end\n    if n % 2\
    \ == 1 then\n        return false\n    end\n    for i = 3, n, 2 do\n        if\
    \ n % i == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_h_qxw7w.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_h_qxw7w.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   for\
    \ _ = 1, #string do\n      if string[_] ~= '.' or tonumber(string[_]) ~= tonumber(string[_]+0)\
    \ then\n         return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoazf9gdb.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoazf9gdb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ write your code in any way you like\n  -- return the result of the computation\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7q6w6r.lua:16:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_a7q6w6r.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    for\
    \ _, v in pairs(string) do\n        if v % 2 == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp40pmf1xq.lua:9:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp40pmf1xq.lua:9: in local 'candidate'\n\t/tmp/tmp40pmf1xq.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ i, count = 1, 0\n    for i = 2, #string do\n        if string:sub(i, i) == string[i]\
    \ then\n            count = count + 1\n            if count > 2 then\n       \
    \         return false\n            end\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbb56dwr.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmbb56dwr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ primes = {} -- Set of primes\n    local counter = 1\n    while true do\n   \
    \     counter = counter + 1\n        for i = 1, counter do\n            -- If\
    \ current character is even or odd (not prime)\n            if string[i] == ''\
    \ or string[i] % 2 == 0 or string[i] % 3 == 0 then\n                return false\n\
    \            else\n                -- If prime, add it to the set\n          \
    \      if string[i] == string[i]:lower() then\n                    if string[i]\
    \ ~= string[i]:lower() then\n                        primes[#primes + 1] = false\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpek0skv2r.lua:15:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpek0skv2r.lua:15: in local 'candidate'\n\t/tmp/tmpek0skv2r.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   for\
    \ i=1, math.sqrt(string) do\n      if string:sub(i,i) == string.sub(1,i) then\n\
    \         return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9vgmyc2t.lua:9:\
    \ bad argument #1 to 'sqrt' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmp9vgmyc2t.lua:9: in local 'candidate'\n\t/tmp/tmp9vgmyc2t.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Write your function here\n  return string.len > 1 and\n    string.len ~= 2 and\
    \ string.len ~= 4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgxtgrg3r.lua:10:\
    \ attempt to compare number with function\nstack traceback:\n\t/tmp/tmpgxtgrg3r.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpgxtgrg3r.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Write your implementation here\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8yk7zwyc.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8yk7zwyc.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   if\
    \ string == nil then\n      return nil\n   else\n      for i = 2, #string do\n\
    \         if string[i] ~= string[i - 1] then\n            return false\n     \
    \    end\n      end\n      return true\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9x8ex8t0.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9x8ex8t0.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ string == '' then return False end\n  local length = #string\n  for i = 1, (math.sqrt(length))\
    \ + 1 do\n    if string.sub(i, i+1) == '' then\n      if string.sub(i, i) ~= ''\
    \ or string.sub(i, i) ~= ' ' then\n        return false\n      end\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx69mdhwd.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx69mdhwd.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    --\
    \ base case\n    if string == '' then\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2xq5ltez.lua:35: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   --\
    \ Write your solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp872b6sak.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp872b6sak.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    --\
    \ Your code here\n    return string.sub(string,2,string.len(string))==string.len(string)\
    \ and string.len(string) ~= 1 -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_c71l1w.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz_c71l1w.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\tlocal\
    \ prime = 2 -- 2 is prime\n\tlocal i = 1\n\twhile i <= string do\n\t\tlocal remainder\
    \ = math.mod(string, prime)\n\t\tif remainder == 0 then\n\t\t\tprime = prime +\
    \ 1\n\t\telse\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ozkeduh.lua:11:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmp0ozkeduh.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp0ozkeduh.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    if\
    \ string == nil then return False end\n    local i = 1\n    while i <= math.ceil(math.sqrt(string))\
    \ do\n        if string % i == 0 then\n            return false\n        end\n\
    \        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q2vvtrd.lua:11:\
    \ bad argument #1 to 'sqrt' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmp1q2vvtrd.lua:11: in local 'candidate'\n\t/tmp/tmp1q2vvtrd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ string == nil then\n    error('Cannot pass nil to string')\n  elseif string.len()\
    \ == 1 then\n    error('Cannot handle single character strings')\n  end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0tey_g4u.lua:36: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ string == nil then\n    error(\"The argument must be a string\")\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphvim_jai.lua:34: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    if\
    \ not string or string == '' then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9h8i8ang.lua:34: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Base cases\n  if string == '' or string == '-' then return False end\n  if string[i]\
    \ == string[#string] then return False end\n  -- If string has only even characters,\
    \ return False\n  if string[i] ~= 'a' then return False end\n  for i = 2, #string\
    \ do\n    if string.sub(string, 1, i) == string.sub(string, (i - 1), i) then return\
    \ False end\n  end\n  return True\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8sx3li9y.lua:23:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp8sx3li9y.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ i = 2\n    local length = 0\n    while i <= #string do\n        if string[i]\
    \ == string[i] then\n            length = length + 1\n        end\n        i =\
    \ i + 1\n    end\n    if length == 0 then\n        return false\n    else\n  \
    \      return true\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrnxb0_2.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprrnxb0_2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ base case\n  if string == '' then return end\n  -- check for factors\n  for\
    \ i = 2, #string - 1 do\n    if string[i] ~= string[(i-1):i] then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6x267hy4.lua:13: function arguments expected near ']'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\t--\
    \ base case\n\tif not string or string.len() <= 0 then\n\t\treturn false\n\tend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5oa9jzw5.lua:35: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Check for prime length\n  if string == nil then\n    return nil\n  end\n  if\
    \ string.isEmpty then\n    return false\n  end\n  local count = 0\n  for char\
    \ in string:gmatch(\".\") do\n    count = count + 1\n    if count % 2 == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbns_knb.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkbns_knb.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    return\
    \ string.len() == prime_length_map[string]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi4d4uyvu.lua:9:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpi4d4uyvu.lua:9: in local 'candidate'\n\t/tmp/tmpi4d4uyvu.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\t--\
    \ base case\n\tif string == '' or string == '-' then\n\t\treturn False\n\tend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxnue8k0p.lua:35: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  return\
    \ string ~= nil and ((string ~= \"\" and string ~= \" \" and string ~= \"\\t\"\
    \ and string ~= \"\\r\" and string ~= \"\\n\") and string.len and string.len(string)\
    \ > 1) and (string.gsub(string, \"[^\\n\\r]\", \"\") == \"\") and (string.find(string,\
    \ \"\\n\", 1, true) > 0 or string.find(string, \"\\r\", 1, true) > 0)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl44yuisk.lua:9:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpl44yuisk.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpl44yuisk.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   for\
    \ i=1, #string do\n       for j=1, #primes do\n          if string.sub(string,\
    \ i, i)==primes[j] then\n             return false\n          end\n       end\n\
    \   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnudv8frl.lua:10:\
    \ attempt to get length of a nil value (global 'primes')\nstack traceback:\n\t\
    /tmp/tmpnudv8frl.lua:10: in local 'candidate'\n\t/tmp/tmpnudv8frl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Write your solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswp70hhc.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpswp70hhc.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   --\
    \ Your code here\n   --\n   return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7cwmwqa.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv7cwmwqa.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ string.len() > 0 then\n    for i = 2, string.len() do\n      if string.sub(i,\
    \ i - 1, 1)^string.sub(i, i, 1)\n      then\n        return false\n      end\n\
    \    end\n    return true\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3olp2ox7.lua:9:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp3olp2ox7.lua:9: in local 'candidate'\n\t/tmp/tmp3olp2ox7.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  if\
    \ string == '' then\n    return true\n  end\n  for i = 2, #string do\n    if string[i]\
    \ == 1 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5efg2qbp.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5efg2qbp.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Your code goes here!\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g2ajnb5.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_g2ajnb5.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    local\
    \ prime_nums = {'2','3','5','7','11','13','17','19','23','29','31','37','41','43','47','53','59','61','67','71','73','79','83','89','97'}\n\
    \    for i = 2, #string do\n        if string.sub(string,i,i) in prime_nums then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphgqkws8w.lua:11: 'then' expected near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  local\
    \ is_prime = True\n  local prime_candidate = 2\n  local prime_limit = (#string)\
    \ + 1\n  for i = 2, prime_limit do\n    if string.sub(string,i,i)~=\"\" then\n\
    \      if string.sub(string,i,i)~=string[i] then\n        is_prime = false\n \
    \     else\n        if is_prime then\n          if string.sub(string,i,i)~= string.sub(string,prime_candidate,prime_candidate)\
    \ then\n            is_prime = false\n          end\n        end\n        prime_candidate\
    \ = prime_candidate + 2\n      end\n    end\n  end\n  return is_prime and prime_candidate\
    \ == prime_limit\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnklgfli2.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnklgfli2.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n\
    \  -- Your code here\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm508c7r.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmm508c7r.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   local\
    \ n = #string\n   for i = 2, n do\n      if string.sub(string,i,i) == '' then\
    \ return False end\n      if string[i] == 0 then return False end\n   end\n  \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n  \
    \  lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8r3upkn.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr8r3upkn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ your code\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n  \
    \  lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjs4a85_t.lua:15:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpjs4a85_t.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  return\
    \ not (string == \"\" or string == nil)\n  and string.lenth % 2 == 0\n  and string.lenth\
    \ ~= 2\n  and string.lenth <= string.count(\"1\", \"2\", \"3\", \"4\", \"5\",\
    \ \"6\", \"7\", \"8\", \"9\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6wy4jo76.lua:10:\
    \ attempt to perform arithmetic on a nil value (field 'lenth')\nstack traceback:\n\
    \t/tmp/tmp6wy4jo76.lua:10: in local 'candidate'\n\t/tmp/tmp6wy4jo76.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    --\
    \ Base case\n    if string == nil or string == \"\" then\n        return false\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps8cm5q38.lua:35: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\t--\
    \ Based on: http://rosettacode.org/wiki/Primality_test#Lua\n\t-- Prime number:\
    \ n is prime if n is equal to 1 or if n is divisible by 2, 3 or 5\n\t-- (n is\
    \ divisible by 2 if it evenly divides n)\n\t--\n\t-- We are using Lua tables (associative\
    \ arrays) for two reasons:\n\t--\n\t-- 1. We don't need to loop through all numbers\n\
    \t--\n\t-- 2. If we were to add more numbers to the table we'd need to update\
    \ all the values\n\t--\n\t-- This way we don't have to keep track of which numbers\
    \ are already checked\n\t--\n\t-- Since Lua tables are unordered lists we can't\
    \ know if our number has already been checked\n\t--\n\t-- There are a few other\
    \ things that need to be done:\n\t--\n\t-- 1. We need to check prime numbers up\
    \ to sqrt(n) because we only need to check prime numbers up to sqrt(n)\n\t-- 2.\
    \ If n is not a prime number we need to return false to not include it in the\
    \ table\n\t-- 3. We need to add a prime number to the table (which we don't do\
    \ currently)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpclj6bztj.lua:50: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n   if\
    \ string == nil or string == '' then return false end\n   for i = 2, #string do\
    \ if string[i] == string[i - 1] then return false end end\n   return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb8ba7u4d.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb8ba7u4d.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  --\
    \ Your code here!\n  \n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0jolafj.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz0jolafj.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    --\
    \ Your code here\n    --local function prime(string)\n        --return false\n\
    \    --end\n    --local function factor(string)\n        --return true\n    --end\n\
    \    --return find(string, prime, factor)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9itbti3.lua:22:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpi9itbti3.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  local\
    \ function is_prime(n)\n    if n == 0 then return false end\n    if n == 1 then\
    \ return true end\n    for i = 2, n do\n      if n % i == 0 then\n        return\
    \ false\n      end\n    end\n    return true\n  end\n  local n, i, s = 2, 2, string\n\
    \  while n <= #string do\n    if is_prime(n) then\n      s = s + string[n]\n \
    \     n = n + 2\n    end\n    n = n + 1\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_2zcvkt.lua:33:\
    \ expected: true, actual: \"Hello\"\nstack traceback:\n\t/tmp/tmph_2zcvkt.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n  return\
    \ string.match('^%s*$') and\n         string.gsub(string, 1, string.rep('\\%s',\
    \ string.len(string)-1))\n             :gsub('%S', ''):gsub('%d', ''):gsub('%w',\
    \ '')\n             :gsub('[^%d%d%d]', '')\n             :gsub('^(%d*%d*)$', ''):gsub('^(%d*)$',\
    \ ''):gsub('^(%d*)$', '')\n             :gsub('^(%d*)$', ''):gsub('^(%d*%d*)$',\
    \ ''):gsub('^(%d*%d*%d*)$', '')\n             :gsub('^(%d*%d*%d*%d*)$', ''):gsub('^(%d*%d*%d*%d*%d*)$',\
    \ '')\n             :gsub('^(%d*%d*%d*%d*%d*%d*)$', ''):gsub('^(%d*%d*%d*%d*%d*%d*%d*)$',\
    \ '')\n             :gsub('^(%d*%d*%d*%d*%d*%d*%d*%d*)$', ''):gsub('^(%d*%d*%d*%d*%d*%d*%d*%d*%d*)$',\
    \ '')\n             :gsub('^(%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*)$', '')\n        \
    \     :gsub('^(%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*)$', '')\n             :gsub('^(%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*)$',\
    \ '')\n             :gsub('^(%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*)$', '')\n\
    \             :gsub('^(%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*)$', '')\n  \
    \           :gsub('^(%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*)$', '')\n    \
    \         :gsub('^(%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*)$', '')\n      \
    \       :gsub('^(%d*%d*%d*%d*%d*%d*%d*%d\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4g_c21zb.lua:10: invalid escape sequence near ''\\%'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    for\
    \ _,c in string.gmatch(string,\"(%a+)\") do \n      if #c == 0 then break end\n\
    \      if c ~= string.lower(c) then return false end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
    \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
    \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
    \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
    \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
    \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
    \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
    \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaeqk13eh.lua:10:\
    \ attempt to get length of a nil value (local 'c')\nstack traceback:\n\t/tmp/tmpaeqk13eh.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpaeqk13eh.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n    return\
    \ ((string.len() == 1) or string.len() == 2) and\n        (string.len() > 1) and\
    \ (string.sub(1, 1).len() == string.len() - 1) and\n        string.sub(2, 2).len()\
    \ == string.len() - 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_length\n    lu.assertEquals(candidate('Hello'), true)\n\
    \    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp198zttqn.lua:9:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp198zttqn.lua:9: in local 'candidate'\n\t/tmp/tmp198zttqn.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a string and returns True if the string\n\
    -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
    \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
    -- prime_length('orange') == False\nlocal function prime_length(string)\n\tlocal\
    \ i = 1\n\twhile i <= math.sqrt(string) do\n\t\tif string % i == 0 then return\
    \ False end\n\t\ti = i + 1\n\tend\n\treturn True\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_length\n    lu.assertEquals(candidate('Hello'),\
    \ true)\n    lu.assertEquals(candidate('abcdcba'), true)\n    lu.assertEquals(candidate('kittens'),\
    \ true)\n    lu.assertEquals(candidate('orange'), false)\n    lu.assertEquals(candidate('wow'),\
    \ true)\n    lu.assertEquals(candidate('world'), true)\n    lu.assertEquals(candidate('MadaM'),\
    \ true)\n    lu.assertEquals(candidate('Wow'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('HI'), true)\n    lu.assertEquals(candidate('go'),\
    \ true)\n    lu.assertEquals(candidate('gogo'), false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'),\
    \ false)\n    lu.assertEquals(candidate('Madam'), true)\n    lu.assertEquals(candidate('M'),\
    \ false)\n    lu.assertEquals(candidate('0'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdca_cds8.lua:10:\
    \ bad argument #1 to 'sqrt' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpdca_cds8.lua:10: in local 'candidate'\n\t/tmp/tmpdca_cds8.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
