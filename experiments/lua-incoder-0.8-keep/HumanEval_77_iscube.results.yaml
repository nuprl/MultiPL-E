name: HumanEval_77_iscube
language: lua
results:
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then\n    return true\n  elseif\
    \ a == 1 then\n    return true\n  elseif a == -1 then\n    return true\n  elseif\
    \ a == -2^31 + 1 then\n    return true\n  elseif a == -2^31 then\n    return true\n\
    \  elseif a == -2^30 + 1 then\n    return true\n  elseif a == -2^30 then\n   \
    \ return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bhu6rm3.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_bhu6rm3.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- base case\n  if a == 1 then\n    return\
    \ true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_lxorc20.lua:30: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 1 then return false end\n \
    \   if a == 0 then return true end\n    if a == -1 then return false end\n   \
    \ local b = a\n    local i = 1\n    while true do\n        if b%i == 0 then\n\
    \            b = b/i\n            i = i + 1\n        else\n            return\
    \ false\n        end\n    end\nend\n</cell>\n<code language=julia-1.0>\n# \U0001F6A8\
    \ DON'T MODIFY ANYTHING BELOW THIS LINE\n# (unless you add additional test code\
    \ to the cell)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpalp97b5d.lua:26: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return (a >= 0 and a <= 9) and (a *\
    \ a == a * a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp2yuwme.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwp2yuwme.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a^a^a^a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp431um45b.lua:18:\
    \ expected: true, actual: 1\nstack traceback:\n\t/tmp/tmp431um45b.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then return false end\n  if\
    \ a < 0 then return false end\n  if a == 1 then return true end\n  if a == 3 then\
    \ return true end\n  if a == 6 then return true end\n  if a == 9 then return true\
    \ end\n  if a == 12 then return true end\n  if a == 15 then return true end\n\
    \  if a == 18 then return true end\n  if a == 21 then return true end\n  if a\
    \ == 24 then return true end\n  if a == 27 then return true end\n  if a == 30\
    \ then return true end\n  if a == 33 then return true end\n  if a == 36 then return\
    \ true end\n  if a == 39 then return true end\n  if a == 42 then return true end\n\
    \  if a == 45 then return true end\n  if a == 48 then return true end\n  if a\
    \ == 51 then return true end\n  if a == 54 then return true end\n  if a == 57\
    \ then return true end\n  if a == 60 then return true end\n  if a == 63 then return\
    \ true end\n  if a == 66 then return true end\n  if a == 69 then return true end\n\
    \  if a == 72 then return true end\n  if a == 75 then return true end\n  if a\
    \ == 78 then return true end\n  if a == 81 then return true end\n  if a == 84\
    \ then return true end\n  if a == 87 then return true end\n  if a == 90 then return\
    \ true end\n  if a == 93 then return true end\n  if a == 96 then return true end\n\
    \  if a == 99 then return true end\n  if a == 102 then return true end\n  if a\
    \ == 105 then return true end\n  if a == 108 then return true end\n  if a == 111\
    \ then return true end\n  if a == 114 then return true end\n  if a == 117 then\
    \ return true end\n  if a == 120 then return true end\n  if a == 123 then return\
    \ true end\n  if a == 126 then return true end\n  if a == 129 then return true\
    \ end\n  if a == 132 then return true end\n  if a == 135 then return true end\n\
    \  if a == 138 then return true end\n  if a == 141 then return true end\n  if\
    \ a == 144 then return true end\n  if a == 147 then return true end\n  if a ==\
    \ 150 then return true end\n  if a == 153 then return true end\n  if a == 156\
    \ then return true end\n  if a == 159 then return true end\n  if a == 162 then\
    \ return true end\n  if a == 165 then return true end\n  if a == 168 then return\
    \ true \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvsh6l72r.lua:71: 'end' expected (to close 'if' at line 70)\
    \ near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a <= 0 then\n        return true\n\
    \    elseif a % 6 == 1 then\n        return true\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_s58ddzo.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_s58ddzo.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a >= 1 and a <= cube then return true\
    \ else return false end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvn0okcv.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmphvn0okcv.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmphvn0okcv.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then return false end\n \
    \   for i=1,a do\n        if a % i == 0 then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjon926mx.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjon926mx.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return a > 0 and a % 3 == 0 and a % 5\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66auu6yj.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp66auu6yj.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then return true end\n  \
    \  if a == 1 then return true end\n    if a == 2 then return true end\n    if\
    \ a == 3 then return true end\n    if a == 4 then return true end\n    if a ==\
    \ 5 then return true end\n    if a == 6 then return true end\n    if a == 7 then\
    \ return true end\n    if a == 8 then return true end\n    if a == 9 then return\
    \ true end\n    if a == 10 then return true end\n    if a == 11 then return true\
    \ end\n    if a == 12 then return true end\n    if a == 13 then return true end\n\
    \    if a == 14 then return true end\n    if a == 15 then return true end\n  \
    \  if a == 16 then return true end\n    if a == 17 then return true end\n    if\
    \ a == 18 then return true end\n    if a == 19 then return true end\n    if a\
    \ == 20 then return true end\n    if a == 21 then return true end\n    if a ==\
    \ 22 then return true end\n    if a == 23 then return true end\n    if a == 24\
    \ then return true end\n    if a == 25 then return true end\n    if a == 26 then\
    \ return true end\n    if a == 27 then return true end\n    if a == 28 then return\
    \ true end\n    if a == 29 then return true end\n    if a == 30 then return true\
    \ end\n    if a == 31 then return true end\n    if a == 32 then return true end\n\
    \    if a == 33 then return true end\n    if a == 34 then return true end\n  \
    \  if a == 35 then return true end\n    if a == 36 then return true end\n    if\
    \ a == 37 then return true end\n    if a == 38 then return true end\n    if a\
    \ == 39 then return true end\n    if a == 40 then return true end\n    if a ==\
    \ 41 then return true end\n    if a == 42 then return true end\n    if a == 43\
    \ then return true end\n    if a == 44 then return true end\n    if a == 45 then\
    \ return true end\n    if a == 46 then return true end\n    if a == 47 then return\
    \ true end\n    if a == 48 then return true end\n    if a == 49 then return true\
    \ end\n    if a == 50 then return true end\n    if a == 51 then return true end\n\
    \    if a == 52 then return true end\n    if a == 53 then return true end\n  \
    \  if a == 54 then return true end\n    if a == 55 then return true end\n    if\
    \ a == 56 then return true end\n    if a == 57 then return true end\n    if a\
    \ == 58 then return true end\n    if a == 59 then return true end\n    if a ==\
    \ 60 then return true end\n    if a == 61 then \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdmny8zv4.lua:88: 'end' expected (to close 'if' at line 73)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then\n        return true\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnnygs0c3.lua:29: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a^0 == a then \n    return a > 0 and\
    \ a % 3 ==0 and a/3 <= 2\n  else\n    return a^0 == 0\n  end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n# === Solve the function and see the result === #\n@time\
    \ iscube(64)\n</cell>\n<text>\n(Exercise: how did you compute that 64^3 == 256?)\
    \ What happened when you compared that with iscube(256)?\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptofx9oe5.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then return false end\n \
    \   local b = 1\n    while b * b <= a do\n        if a % b == 0 then return false\
    \ end\n        local p = b\n        while p > 1 do\n            if a % p == 0\
    \ then return false end\n            p = p / 2\n        end\n        b = b * 2\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm572zdr6.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm572zdr6.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then return true end\n  \
    \  if a == 1 then return true end\n    if a == -1 then return true end\n    if\
    \ a == 64 then return true end\n    if a == 64 then return true end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp459mhsj8.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp459mhsj8.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return a==1 ora\n     a==2 ora\n    \
    \ a==3 ora\n     a==4 ora\n     a==5 ora\n     a==6 ora\n     a==7 ora\n     a==8\
    \ ora\n     a==9 ora\n     a==10 ora\n     a==11 ora\n     a==12 ora\n     a==13\
    \ ora\n     a==14 ora\n     a==15 ora\n     a==16 ora\n     a==17 ora\n     a==18\
    \ ora\n     a==19 ora\n     a==20 ora\n     a==21 ora\n     a==22 ora\n     a==23\
    \ ora\n     a==24 ora\n     a==25 ora\n     a==26 ora\n     a==27 ora\n     a==28\
    \ ora\n     a==29 ora\n     a==30 ora\n     a==31 ora\n     a==32 ora\n     a==33\
    \ ora\n     a==34 ora\n     a==35 ora\n     a==36 ora\n     a==37 ora\n     a==38\
    \ ora\n     a==39 ora\n     a==40 ora\n     a==41 ora\n     a==42 ora\n     a==43\
    \ ora\n     a==44 ora\n     a==45 ora\n     a==46 ora\n     a==47 ora\n     a==48\
    \ ora\n     a==49 ora\n     a==50 ora\n     a==51 ora\n     a==52 ora\n     a==53\
    \ ora\n     a==54 ora\n     a==55 ora\n     a==56 ora\n     a==57 ora\n     a==58\
    \ ora\n     a==59 ora\n     a==60 ora\n     a==61 ora\n     a==62 ora\n     a==63\
    \ ora\n     a==64 ora\n     a==65 ora\n     a==66 ora\n     a==67 ora\n     a==68\
    \ ora\n     a==69 ora\n     a\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgohi60ob.lua:12: 'end' expected (to close 'function' at line\
    \ 11) near 'ora'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a == 0 then return true\n\telseif\
    \ math.floor(a) == a then \n\t\treturn true\n\telse \n\t\treturn false\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprovp99dm.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprovp99dm.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a == 0 then\n\t\treturn true\n\tend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk63pun7p.lua:29: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then\n        return true\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt3xs8idp.lua:29: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- base cases\n    if a == 1 then return\
    \ true end\n    if a == 0 then return true end\n    if a == -1 then return true\
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfzk98ymg.lua:30: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == nil or a == 0 then\n    return\
    \ false\n  else\n    return (a*a*a == a)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctn9oy4a.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpctn9oy4a.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\t-- Check for valid input\n\tif a then\n\
    \t\tlocal c = a\n\t\t-- Check all odd factors\n\t\tdo\n\t\t\tif c%2==0 then\n\t\
    \t\t\tc = c/2\n\t\t\t\tc = c+1\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\
    \tend\n\t\t-- Check all even factors\n\t\tdo\n\t\t\tif c%2==1 then\n\t\t\t\treturn\
    \ false\n\t\t\tend\n\t\t\tc = c/2\n\t\tend\n\t\t-- Check all factors up to the\
    \ cube root of a\n\t\tdo\n\t\t\tif c*c*c == a\n\t\t\tthen\n\t\t\t\treturn true\n\
    \t\t\tend\n\t\t\tc = c/2\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9_zyz3g.lua:46:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx9_zyz3g.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 1 then return true end\n  if\
    \ a == 2 then return false end\n  if a == 3 then return false end\n  if a == 4\
    \ then return false end\n  if a == 5 then return false end\n  if a == 6 then return\
    \ false end\n  if a == 7 then return false end\n  if a == 8 then return false\
    \ end\n  if a == 9 then return false end\n  if a == 10 then return false end\n\
    \  if a == 11 then return false end\n  if a == 12 then return false end\n  if\
    \ a == 13 then return false end\n  if a == 14 then return false end\n  if a ==\
    \ 15 then return false end\n  if a == 16 then return false end\n  if a == 17 then\
    \ return false end\n  if a == 18 then return false end\n  if a == 19 then return\
    \ false end\n  if a == 20 then return false end\n  if a == 21 then return false\
    \ end\n  if a == 22 then return false end\n  if a == 23 then return false end\n\
    \  if a == 24 then return false end\n  if a == 25 then return false end\n  if\
    \ a == 26 then return false end\n  if a == 27 then return false end\n  if a ==\
    \ 28 then return false end\n  if a == 29 then return false end\n  if a == 30 then\
    \ return false end\n  if a == 31 then return false end\n  if a == 32 then return\
    \ false end\n  if a == 33 then return false end\n  if a == 34 then return false\
    \ end\n  if a == 35 then return false end\n  if a == 36 then return false end\n\
    \  if a == 37 then return false end\n  if a == 38 then return false end\n  if\
    \ a == 39 then return false end\n  if a == 40 then return false end\n  if a ==\
    \ 41 then return false end\n  if a == 42 then return false end\n  if a == 43 then\
    \ return false end\n  if a == 44 then return false end\n  if a == 45 then return\
    \ false end\n  if a == 46 then return false end\n  if a == 47 then return false\
    \ end\n  if a == 48 then return false end\n  if a == 49 then return false end\n\
    \  if a == 50 then return false end\n  if a == 51 then return false end\n  if\
    \ a == 52 then return false end\n  if a == 53 then return false end\n  if a ==\
    \ 54 then return false end\n  if a == 55 then return false end\n  if a == 56 then\
    \ return false end\n  if a == 57 then return false end\n  if a == 58 then return\
    \ false end\n  if a == 59 then return false end\n  if a == 60 then return false\
    \ end\n  if a == 61 then return false end\n  if a == 62 \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpayyjjfn7.lua:74: 'then' expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   if a == 0 then\n      return true\n\
    \   elseif a == 1 then\n      return true\n   elseif a > 1 then\n      return\
    \ iscube(a-1) and iscube(a-2)\n   else\n      return false\n   end\nend\n</cell>\n\
    <cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpucn6gkb9.lua:22: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   assert(type(a) == \"number\")\n   return\
    \ ((a==1) or (a==3) or \n           (a==5) or (a==7) or \n           (a==9) or\
    \ (a==11) or\n           (a==13) or (a==15) or\n           (a==17) or (a==19)\
    \ or\n           (a==21) or (a==23) or\n           (a==25) or (a==27) or\n   \
    \        (a==29) or (a==31) or\n           (a==33) or (a==35) or\n           (a==37)\
    \ or (a==39) or\n           (a==41) or (a==43) or\n           (a==45) or (a==47)\
    \ or\n           (a==49) or (a==51) or\n           (a==53) or (a==55) or\n   \
    \        (a==57) or (a==59) or\n           (a==61) or (a==63) or\n           (a==65)\
    \ or (a==67) or\n           (a==69) or (a==71) or\n           (a==73) or (a==75)\
    \ or\n           (a==77) or (a==79) or\n           (a==81) or (a==83) or\n   \
    \        (a==85) or (a==87) or\n           (a==89) or (a==91) or\n           (a==93)\
    \ or (a==95) or\n           (a==97) or (a==99) or\n           (a==101) or (a==103))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprptz_a4m.lua:46:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprptz_a4m.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif type(a) == 'number' and a >= 0 and\
    \ a <= 3 ** 4 then return true end\n\tif type(a) ~= 'number' then return false\
    \ end\n\tif a == 0 then return true end\n\tif a == 1 then return true end\n\t\
    if a == 2 then return true end\n\tif a == 3 then return true end\n\tif a == 4\
    \ then return true end\n\tif a == 5 then return true end\n\tif a == 6 then return\
    \ true end\n\tif a == 7 then return true end\n\tif a == 8 then return true end\n\
    \tif a == 9 then return true end\n\tif a == 10 then return true end\n\tif a ==\
    \ 11 then return true end\n\tif a == 12 then return true end\n\tif a == 13 then\
    \ return true end\n\tif a == 14 then return true end\n\tif a == 15 then return\
    \ true end\n\tif a == 16 then return true end\n\tif a == 17 then return true end\n\
    \tif a == 18 then return true end\n\tif a == 19 then return true end\n\tif a ==\
    \ 20 then return true end\n\tif a == 21 then return true end\n\tif a == 22 then\
    \ return true end\n\tif a == 23 then return true end\n\tif a == 24 then return\
    \ true end\n\tif a == 25 then return true end\n\tif a == 26 then return true end\n\
    \tif a == 27 then return true end\n\tif a == 28 then return true end\n\tif a ==\
    \ 29 then return true end\n\tif a == 30 then return true end\n\tif a == 31 then\
    \ return true end\n\tif a == 32 then return true end\n\tif a == 33 then return\
    \ true end\n\tif a == 34 then return true end\n\tif a == 35 then return true end\n\
    \tif a == 36 then return true end\n\tif a == 37 then return true end\n\tif a ==\
    \ 38 then return true end\n\tif a == 39 then return true end\n\tif a == 40 then\
    \ return true end\n\tif a == 41 then return true end\n\tif a == 42 then return\
    \ true end\n\tif a == 43 then return true end\n\tif a == 44 then return true end\n\
    \tif a == 45 then return true end\n\tif a == 46 then return true end\n\tif a ==\
    \ 47 then return true end\n\tif a == 48 then return true end\n\tif a == 49 then\
    \ return true end\n\tif a == 50 then return true end\n\tif a == 51 then return\
    \ true end\n\tif a == 52 then return true end\n\tif a == 53 then return true end\n\
    \tif a == 54 then return true end\n\tif a == 55 then return true end\n\tif a ==\
    \ 56 then return true end\n\tif a == 57 then return true end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplzx3q7wq.lua:12: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   -- Write your code here.\n   return\
    \ a%1 == 0 and a%2 ==0 and a%3 == 0 and a%4 == 0 and a%5 == 0 and a%6 == 0 \n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7nynxgf_.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7nynxgf_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif type(a) ~= \"number\" then\n\t\terror\
    \ \"iscube needs a number\"\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3ohmsmjj.lua:29: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return (math.fmod(a,1) == 0 and math.fmod(a,2)\
    \ == 0 and math.fmod(a,3) == 0 and math.fmod(a,4) == 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo249yf4e.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo249yf4e.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a >= 0 and a <= 1 then return true\
    \ end\n\tif a == 0 then return true end\n\tif a < 0 then\n\t\tif a == -1 then\
    \ return true end\n\t\tif a < -64 then return false end\n\tend\n\tif a > 64 then\
    \ \n\t\tif a == 64 then return true end\n\t\tif a > 180 then return false end\n\
    \tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8lnkq8l.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt8lnkq8l.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a <= 0 then\n        return false\n\
    \    elseif a == 1 then\n        return true\n    elseif a == 3 then\n       \
    \ return true\n    elseif a == 6 then\n        return true\n    elseif a == 9\
    \ then\n        return true\n    elseif a == 12 then\n        return true\n  \
    \  else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkd5bnkfd.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkd5bnkfd.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  local n = 1\n  local a1 = a\n  while\
    \ a1 ~= 0 do\n    if a1 % n == 0 then\n      a = a\n    else\n      a = a1 / n\n\
    \      n = n + 1\n    end\n    a1 = a\n  end\n  return a1 == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  local b = 1\n  while b < a do b = b *\
    \ b end\n  return b == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == nil then\n     return false\n\
    \  else\n     if a == 0 then\n       return true\n     elseif math.abs(a) % 3\
    \ == 0 then\n       return true\n     else\n       return false\n     end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3aley6hx.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3aley6hx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\treturn (type(a) == \"number\" and a %\
    \ 1 == 0 and a % 2 == 0 and a % 3 == 0)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcw3u1lj.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgcw3u1lj.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\t-- Write your code below this line\n\t\
    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vpgwf0x.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5vpgwf0x.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   if a == nil then return false end\n\
    \   if a ~= 0 and math.floor(a) == a then\n      return true\n   end\n   return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9h95sxml.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9h95sxml.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   if a == nil then return false end\n\
    \   if a == 0 then return true end\n   if a%4==0 or a%8==0 then return false end\n\
    \   if a < 0 then return iscube(-a) end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1lckii1.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx1lckii1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a%3 == 0 and a%7 == 0 and a%3\
    \ == 0 and a%5 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ns66goo.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7ns66goo.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then\n        return true\n\
    \    end\n    if a == 1 then\n        return true\n    end\n    if a == -1 then\n\
    \        return true\n    end\n    if a == -64 then\n        return true\n   \
    \ end\n    if a == -128 then\n        return true\n    end\n    if a == -224 then\n\
    \        return true\n    end\n    if a == -256 then\n        return true\n  \
    \  end\n    if a == -288 then\n        return true\n    end\n    if a == -320\
    \ then\n        return true\n    end\n    if a == -352 then\n        return true\n\
    \    end\n    if a == -384 then\n        return true\n    end\n    if a == -416\
    \ then\n        return true\n    end\n    if a == -448 then\n        return true\n\
    \    end\n    if a == -472 then\n        return true\n    end\n    if a == -504\
    \ then\n        return true\n    end\n    if a == -528 then\n        return true\n\
    \    end\n    if a == -552 then\n        return true\n    end\n    if a == -576\
    \ then\n        return true\n    end\n    if a == -608 then\n        return true\n\
    \    end\n    if a == -640 then\n        return true\n    end\n    if a == -672\
    \ then\n        return true\n    end\n    if a == -704 then\n        return true\n\
    \    end\n    if a == -736 then\n        return true\n    end\n    if a == -768\
    \ then\n        return true\n    end\n    if a == -800 then\n        return true\n\
    \    end\n    if a == -840 then\n        return true\n    end\n    if a == -872\
    \ then\n        return true\n    end\n    if a == -904 then\n        return true\n\
    \    end\n    if a == -934 then\n        return true\n    end\n    if a == -972\
    \ then\n        return true\n    end\n    if a == -1024 then\n        return true\n\
    \    end\n    if a == -1060 then\n        return true\n    end\n    if a == -1104\
    \ then\n        return true\n    end\n    if a == -1148 then\n        return true\n\
    \    end\n    if a == -1192 then\n        return true\n    end\n    if a == -1236\
    \ then\n        return true\n    end\n    if a == -1279 then\n        return true\n\
    \    end\n    if a == -1344 then\n        return true\n    end\n    if a == -1389\
    \ then\n        return true\n    end\n    if a == -1452 then\n        return true\n\
    \    end\n    if a == -1498 then\n        return true\n    end\n    if a == -1543\
    \ then\n        return true\n    end\n    if a == -1590 then\n        return true\n\
    \    end\n    if a == -1663 then\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsnljniaw.lua:158: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   if a==0 then\n      return false\n \
    \  elseif a==1 then\n      return true\n   elseif a==-1 then\n      return true\n\
    \   elseif a==2 then\n      return true\n   elseif a==-2 then\n      return true\n\
    \   elseif a==3 then\n      return true\n   elseif a==-3 then\n      return true\n\
    \   elseif a==4 then\n      return true\n   elseif a==-4 then\n      return true\n\
    \   elseif a==5 then\n      return true\n   elseif a==-5 then\n      return true\n\
    \   elseif a==6 then\n      return true\n   elseif a==-6 then\n      return true\n\
    \   elseif a==7 then\n      return true\n   elseif a==-7 then\n      return true\n\
    \   elseif a==8 then\n      return true\n   elseif a==-8 then\n      return true\n\
    \   elseif a==9 then\n      return true\n   elseif a==-9 then\n      return true\n\
    \   elseif a==10 then\n      return true\n   elseif a==-10 then\n      return\
    \ true\n   elseif a==11 then\n      return true\n   elseif a==-11 then\n     \
    \ return true\n   elseif a==12 then\n      return true\n   elseif a==-12 then\n\
    \      return true\n   elseif a==13 then\n      return true\n   elseif a==-13\
    \ then\n      return true\n   elseif a==14 then\n      return true\n   elseif\
    \ a==-14 then\n      return true\n   elseif a==15 then\n      return true\n  \
    \ elseif a==-15 then\n      return true\n   elseif a==16 then\n      return true\n\
    \   elseif a==-16 then\n      return true\n   elseif a==17 then\n      return\
    \ true\n   elseif a==-17 then\n      return true\n   elseif a==18 then\n     \
    \ return true\n   elseif a==-18 then\n      return true\n   elseif a==19 then\n\
    \      return true\n   elseif a==-19 then\n      return true\n   elseif a==20\
    \ then\n      return true\n   elseif a==-20 then\n      return true\n   elseif\
    \ a==21 then\n      return true\n   elseif a==-21 then\n      return true\n  \
    \ elseif a==22 then\n      return true\n   elseif a==-22 then\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpscnpi4h6.lua:116: 'end' expected (to close 'if' at line 12)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\ta = tonumber(a)\n\tif (a < 0) then\n\t\
    \treturn false\n\telseif (a == 0) then\n\t\treturn true\n\telseif (a ~= a*a*a\
    \ and a ~= a*a*a*a) then\n\t\treturn false\n\telse\n\t\treturn true\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8y6sb_8i.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8y6sb_8i.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a<=0 or a>360 then return false end\n\
    \  local cuber=a^(1/3)\n  return (cuber==1 or cuber==2 or cuber==6)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0a2_ycgq.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0a2_ycgq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tlocal t = a*a*a \n\tlocal u = t - (t%t)\n\
    \tlocal s = (u*u)%t\n\treturn s == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmb_b62h.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgmb_b62h.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then\n        return true\n\
    \    elseif a == 1 then\n        return false\n    elseif a%1 == 0 and iscube(a-1)\
    \ then\n        return true\n    elseif a%1 == 0 and iscube(a+1) then\n      \
    \  return false\n    elseif a%1 == 0 and iscube(a-2) then\n        return true\n\
    \    elseif a%1 == 0 and iscube(a+2) then\n        return false\n    else\n  \
    \      return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb16cjp5.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsb16cjp5.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return a%1 == 0 and a%2 == 0 and a%3\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79p5squt.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp79p5squt.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then return true end\n  if\
    \ a == 1 then return true end\n  if a == 2 then return true end\n  if a == 3 then\
    \ return true end\n  if a == 4 then return true end\n  if a == 5 then return true\
    \ end\n  if a == 6 then return true end\n  if a == 7 then return true end\n  if\
    \ a == 8 then return true end\n  if a == 9 then return true end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpejsw5mzt.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpejsw5mzt.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return cubetable[a] == cubetable[a^a]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9gyulwxf.lua:12:\
    \ attempt to index a nil value (global 'cubetable')\nstack traceback:\n\t/tmp/tmp9gyulwxf.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp9gyulwxf.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 1 then\n    return true\n  elseif\
    \ a == 2 then\n    return true\n  elseif a == 0 then\n    return true\n  elseif\
    \ ((a%3)==0) and ((a%6)==0) and ((a%9)==0) then\n    return true\n  else\n   \
    \ return false\n  end\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsp6t3e53.lua:24: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a == 1 then return true end\n\tif\
    \ a <= 0 and a > -1 then return false end\n\treturn math.floor(a) == a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6wnid4e.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu6wnid4e.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a==nil then\n        return 0\n\
    \    end\n    if a==1 then\n        return 1\n    end\n    if a==2 then\n    \
    \    return 1\n    end\n    if a==3 then\n        return 1\n    end\n    if a==4\
    \ then\n        return 1\n    end\n    if a==5 then\n        return 1\n    end\n\
    \    if a==6 then\n        return 1\n    end\n    if a==7 then\n        return\
    \ 1\n    end\n    if a==8 then\n        return 1\n    end\n    if a==9 then\n\
    \        return 1\n    end\n    if a==10 then\n        return 1\n    end\n   \
    \ if a==11 then\n        return 1\n    end\n    if a==12 then\n        return\
    \ 1\n    end\n    if a==13 then\n        return 1\n    end\n    if a==14 then\n\
    \        return 1\n    end\n    if a==15 then\n        return 1\n    end\n   \
    \ if a==16 then\n        return 1\n    end\n    if a==17 then\n        return\
    \ 1\n    end\n    if a==18 then\n        return 1\n    end\n    if a==19 then\n\
    \        return 1\n    end\n    if a==20 then\n        return 1\n    end\n   \
    \ if a==21 then\n        return 1\n    end\n    if a==22 then\n        return\
    \ 1\n    end\n    if a==23 then\n        return 1\n    end\n    if a==24 then\n\
    \        return 1\n    end\n    if a==25 then\n        return 1\n    end\n   \
    \ if a==26 then\n        return 1\n    end\n    if a==27 then\n        return\
    \ 1\n    end\n    if a==28 then\n        return 1\n    end\n    if a==29 then\n\
    \        return 1\n    end\n    if a==30 then\n        return 1\n    end\n   \
    \ if a==31 then\n        return 1\n    end\n    if a==32 then\n        return\
    \ 1\n    end\n    if a==33 then\n        return 1\n    end\n    if a==34 then\n\
    \        return 1\n    end\n    if a==35 then\n        return 1\n    end\n   \
    \ if a==36 then\n        return 1\n    end\n    if a==37 then\n        return\
    \ 1\n    end\n    if a==38 then\n        return 1\n    end\n    if a==39 then\n\
    \        return 1\n    end\n    if a==40 then\n        return 1\n    end\n   \
    \ if a==41 then\n        return 1\n    end\n    if a==42 then\n        return\
    \ 1\n    end\n    if a==43 then\n        return 1\n    end\n    if a==44 then\n\
    \        return 1\n    end\n    if a==45 then\n        return 1\n    end\n   \
    \ if a==46 then\n        return 1\n    end\n    if a==47 then\n        return\
    \ 1\n    end\n    if a==48 then\n        return 1\n    end\n    if a==49 then\n\
    \        return 1\n    end\n    if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbbbwzrsy.lua:163: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then\n    return false\n  end\n\
    \  local b = 1\n  repeat\n    b = b*a\n    local c = b\n    b = b + 1\n    if\
    \ b > a then return false end\n  until b == a\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y_z_mf4.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2y_z_mf4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then\n        return false\n\
    \    end\n    return ((a%3 == 0 and (a%7 == 0 or a%5 == 0 or a%9 == 0 or a%11\
    \ == 0)) or\n            (a%5 == 0 or a%9 == 0 or a%7 == 0 or a%3 == 0))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjeato5mf.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjeato5mf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then\n    return true\n  else\n\
    \    return (a % 2 == 0) and (a % 3 == 0)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprzpp7292.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprzpp7292.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\ta = a:type(float)\n\t-- TODO: think about\
    \ how negative inputs might arise.\n\treturn a^a^a^a ~= 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprkeirxcl.lua:12:\
    \ attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmprkeirxcl.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmprkeirxcl.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    local b = 3\n    while b > 0 do\n \
    \       if a % b == 0 then \n            if b == 1 then\n                return\
    \ true \n            else\n                b = b \xF7 3\n            end\n   \
    \     else\n            if b \xF7 3 == 1 then\n                return false \n\
    \            else\n                b = b \xF7 3\n            end\n        end\n\
    \    end\n    return true \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa9q1w3hw.lua:18: unexpected symbol near '<\\195>'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a < 0 then\n    return false\n  end\n\
    \  \n  if a <= 1 then\n    return true\n  end\n  \n  if a % 4 == 0 then\n    return\
    \ true\n  end\n  \n  local count = 0\n  \n  while a % 4 == 0 do\n    a = math.floor(a/4)\n\
    \    count = count+1\n  end\n  \n  return count == 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8m8pjzu.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy8m8pjzu.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a == 0 then\n\t\treturn true\n\telseif\
    \ a == -1 then\n\t\treturn false\n\telseif a == -2 then\n\t\treturn false\n\t\
    elseif a == -1 and math.abs(a) == 1 then\n\t\treturn true\n\telse\n\t\treturn\
    \ a == math.abs(a) * math.sqrt(math.abs(a) / 3)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ls8onsc.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_ls8onsc.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    \n    -- write your function here\n\
    \    if a <= 0 or a == 1 then\n        return true\n    end\n    if a%1 == 0 then\n\
    \        return true\n    end\n    if a%2 == 0 then\n        return false\n  \
    \  end\n    if a%3 == 0 then\n        return false\n    end\n    if a%4 == 0 then\n\
    \        return false\n    end\n    if a%5 == 0 then\n        return false\n \
    \   end\n    if a%6 == 0 then\n        return false\n    end\n    if a%7 == 0\
    \ then\n        return false\n    end\n    if a%8 == 0 then\n        return false\n\
    \    end\n    if a%9 == 0 then\n        return false\n    end\n    if a%10 ==\
    \ 0 then\n        return false\n    end\n    if a%11 == 0 then\n        return\
    \ false\n    end\n    if a%12 == 0 then\n        return false\n    end\n    if\
    \ a%13 == 0 then\n        return false\n    end\n    if a%14 == 0 then\n     \
    \   return false\n    end\n    if a%15 == 0 then\n        return false\n    end\n\
    \    if a%16 == 0 then\n        return false\n    end\n    if a%17 == 0 then\n\
    \        return false\n    end\n    if a%18 == 0 then\n        return false\n\
    \    end\n    if a%19 == 0 then\n        return false\n    end\n    if a%20 ==\
    \ 0 then\n        return false\n    end\n    if a%21 == 0 then\n        return\
    \ false\n    end\n    if a%22 == 0 then\n        return false\n    end\n    if\
    \ a%23 == 0 then\n        return false\n    end\n    if a%24 == 0 then\n     \
    \   return false\n    end\n    if a%25 == 0 then\n        return false\n    end\n\
    \    if a%26 == 0 then\n        return false\n    end\n    if a%27 == 0 then\n\
    \        return false\n    end\n    if a%28 == 0 then\n        return false\n\
    \    end\n    if a%29 == 0 then\n        return false\n    end\n    if a%30 ==\
    \ 0 then\n        return false\n    end\n    if a%31 == 0 then\n        return\
    \ false\n    end\n    if a%32 == 0 then\n        return false\n    end\n    if\
    \ a%33 == 0 then\n        return false\n    end\n    if a%34 == 0 then\n     \
    \   return false\n    end\n    if a%35 == 0 then\n        return false\n    end\n\
    \    if a%36 == 0 then\n        return false\n    end\n    if a%37 == 0 then\n\
    \        return false\n    end\n    if a%38 == 0 then\n        return false\n\
    \    end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps_hmutsd.lua:146: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return (a==0 or\n          a==1 or\n\
    \          a==2 or\n          a==3 or\n          a==4 or\n          a==5 or\n\
    \          a==6 or\n          a==7 or\n          a==8 or\n          a==9)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1n8kxto6.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1n8kxto6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a < 0 then\n    return false\n  elseif\
    \ a == 1 then\n    return true\n  elseif a == 2 then\n    return true\n  elseif\
    \ math.abs(a) % 3 == 0 then\n    return true\n  end\n  return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6fuc87d4.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6fuc87d4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a <= 0 then return false end\n  local\
    \ b = 1\n  while b*b < a do\n    if a % b == 0 then return false end\n    local\
    \ m = b\n    while m > 1 do\n      if a % m == 0 then return false end\n     \
    \ m = m / 2\n    end\n    b = b * 2\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjz9z_rxm.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjz9z_rxm.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- Your code here!\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkd789vif.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkd789vif.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then return true end\n  if\
    \ a == 1 then return true end\n  if a == -1 then return true end\n  if a == (1/3)\
    \ then return true end\n  if a == (2/3) then return true end\n  if a == (1/2)\
    \ then return true end\n  if a == (3/2) then return true end\n  if a == (2/3)\
    \ then return true end\n  if a == (1/3) then return true end\n  if a == (1/4)\
    \ then return true end\n  if a == (3/4) then return true end\n  if a == (1/2)\
    \ then return true end\n  if a == (5/4) then return true end\n  if a == (1/2)\
    \ then return true end\n  if a == (3/4) then return true end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpix7awca5.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpix7awca5.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then\n    return true\n  end\n\
    \  \n  local cube = a^((a^2)^((a^3)^(a^4)))\n  \n  if cube == a then \n    return\
    \ true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__5db8e5.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp__5db8e5.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 1 then\n    return true\n  else\n\
    \    return ((a % 2) == 0 and (a % 3) == 0 and (a % 5) == 0)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx33h56y8.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx33h56y8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\treturn a ~= nil and a == (a*a*a) or a\
    \ ~= 0 and a == (a+a*a*a) or a ~= 0 and a == (a-a*a*a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpro1qu765.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpro1qu765.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a < 1 then\n    return false\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwixzwy5u.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwixzwy5u.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a < 0 then\n        return false\n\
    \    end\n    if a ~= (a*a*a) then\n        return false\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3g6i8lm.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_3g6i8lm.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then\n    return true\n  else\n\
    \    return ((a % 2) == 0) and (a / 2 == math.floor(a/2))\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnnrxm_6.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcnnrxm_6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return isinteger(a) and a%3==0 and\n\
    \           isinteger(a/3) and a/3*3==a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ubdcmeh.lua:12:\
    \ attempt to call a nil value (global 'isinteger')\nstack traceback:\n\t/tmp/tmp4ubdcmeh.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp4ubdcmeh.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then\n        return true\n\
    \    end\n    if a == 1 then\n        return true\n    end\n    if a == 2 then\n\
    \        return true\n    end\n    if a == 3 then\n        return true\n    end\n\
    \    if a == 4 then\n        return true\n    end\n    if a == 5 then\n      \
    \  return true\n    end\n    if a == 6 then\n        return true\n    end\n  \
    \  if a == 7 then\n        return true\n    end\n    if a == 8 then\n        return\
    \ true\n    end\n    if a == 9 then\n        return true\n    end\n    if a ==\
    \ 10 then\n        return true\n    end\n    if a == 11 then\n        return true\n\
    \    end\n    if a == 12 then\n        return true\n    end\n    if a == 13 then\n\
    \        return true\n    end\n    if a == 14 then\n        return true\n    end\n\
    \    if a == 15 then\n        return true\n    end\n    if a == 16 then\n    \
    \    return true\n    end\n    if a == 17 then\n        return true\n    end\n\
    \    if a == 18 then\n        return true\n    end\n    if a == 19 then\n    \
    \    return true\n    end\n    if a == 20 then\n        return true\n    end\n\
    \    if a == 21 then\n        return true\n    end\n    if a == 22 then\n    \
    \    return true\n    end\n    if a == 23 then\n        return true\n    end\n\
    \    if a == 24 then\n        return true\n    end\n    if a == 25 then\n    \
    \    return true\n    end\n    if a == 26 then\n        return true\n    end\n\
    \    if a == 27 then\n        return true\n    end\n    if a == 28 then\n    \
    \    return true\n    end\n    if a == 29 then\n        return true\n    end\n\
    \    if a == 30 then\n        return true\n    end\n    if a == 31 then\n    \
    \    return true\n    end\n    if a == 32 then\n        return true\n    end\n\
    \    if a == 33 then\n        return true\n    end\n    if a == 34 then\n    \
    \    return true\n    end\n    if a == 35 then\n        return true\n    end\n\
    \    if a == 36 then\n        return true\n    end\n    if a == 37 then\n    \
    \    return true\n    end\n    if a == 38 then\n        return true\n    end\n\
    \    if a == 39 then\n        return true\n    end\n    if a == 40 then\n    \
    \    return true\n    end\n    if a == 41 then\n        return true\n    end\n\
    \    if a == 42 then\n        return true\n    end\n    if a == 43 then\n    \
    \    return true\n    end\n    if a == 44 then\n        return true\n    end\n\
    \    if a == 45 then\n        return true\n    end\n    if a == 46 then\n    \
    \    return true\n    end\n    if a == 47 then\n        return true\n    end\n\
    \    if a == 48 then\n        return true\n    end\n    if a == 49 then\n    \
    \    return true\n    end\n    if a == \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp86omz_jz.lua:163: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return tonumber(tostring(a))^3==a^3\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0t_55dv.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy0t_55dv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a == 0 then return false end\n\tlocal\
    \ b = 1\n\tlocal c = a\n\twhile c > 0 do\n\t\tb = (b*b)%a\n\t\tc = (c-1)/3\n\t\
    end\n\treturn b == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwotjwc8p.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwotjwc8p.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == nil then\n        return false\n\
    \    end\n    if a < 0 then\n        return false\n    end\n    if a < 16 then\n\
    \        return a == 0 or a^3 == a\n    else\n        return iscube(a-a^3)\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0689853.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz0689853.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   if a == nil then\n      return false\n\
    \   end\n   \n   if type(a) ~= 'number' then\n      return false\n   end\n   \n\
    \   return (a == a and\n          a == a and\n          a == a and\n         \
    \ a == a and\n          a == a and\n          a == a and\n          a == a and\n\
    \          a == a and\n          a == a and\n          a == a and\n          a\
    \ == a and\n          a == a and\n          a == a and\n          a == a and\n\
    \          a == a and\n          a == a and\n          a == a and\n          a\
    \ == a and\n          a == a and\n          a == a and\n          a == a and\n\
    \          a == a and\n          a == a and\n          a == a and\n          a\
    \ == a and\n          a == a and\n          a == a and\n          a == a and\n\
    \          a == a and\n          a == a and\n          a == a and\n          a\
    \ == a and\n          a == a and\n          a == a and\n          a == a and\n\
    \          a == a and\n          a == a and\n          a == a and\n          a\
    \ == a and\n          a == a and\n          a == a and\n          a == a and\n\
    \          a == a and\n          a == a and\n          a == a and\n          a\
    \ == a and\n          a == a and\n          a == a and\n          a == a and\n\
    \          a == a and\n          a == a and\n          a == a and\n          a\
    \ == a and\n          a == a and\n          a == a and\n          a == a and\n\
    \          a == a and\n          a == a and\n          a == a and\n          a\
    \ == a and\n          a == a and\n          a == a and\n          a == a and\n\
    \          a == a and\n          a == a and\n          a == a and\n          a\
    \ == a and\n          a == a and\n          a == a and\n          a == a and\n\
    \          a == a and\n          a == a and\n          a == a and\n          a\
    \ == a and\n          a == a and\n          a == a and\n          a == a and\n\
    \          a == a and\n          a == a and\n          a == a and\n          a\
    \ == a and\n          a == a and\n          a == a and\n          a == a and\n\
    \          a == a and\n          a == a and\n          a == a and\n          a\
    \ == a and\n          a == a and\n          a == a and\n          a == a and\n\
    \          a == a and\n          a == a and\n          a == a and\n          a\
    \ == a and\n          a == \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp34olfx7l.lua:116: ')' expected (to close '(' at line 20) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a == 1 then return true else return\
    \ false end\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9igxabc.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw9igxabc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then return False end\n  if\
    \ a == 1 then return True end\n  if a == -1 then return True end\n  if a == -2\
    \ then return False end\n  if a == -3 then return True end\n  if a == -4 then\
    \ return False end\n  if a == -5 then return True end\n  if a == -6 then return\
    \ False end\n  if a == -7 then return True end\n  if a == -8 then return False\
    \ end\n  if a == -9 then return True end\n  if a == -10 then return False end\n\
    \  if a == -11 then return True end\n  if a == -12 then return False end\n  if\
    \ a == -13 then return True end\n  if a == -14 then return False end\n  if a ==\
    \ -15 then return True end\n  if a == -16 then return False end\n  if a == -17\
    \ then return True end\n  if a == -18 then return False end\n  if a == -19 then\
    \ return True end\n  if a == -20 then return False end\n  if a == -21 then return\
    \ True end\n  if a == -22 then return False end\n  if a == -23 then return True\
    \ end\n  if a == -24 then return False end\n  if a == -25 then return True end\n\
    \  if a == -26 then return False end\n  if a == -27 then return True end\n  if\
    \ a == -28 then return False end\n  if a == -29 then return True end\n  if a ==\
    \ -30 then return False end\n  if a == -31 then return True end\n  if a == -32\
    \ then return False end\n  if a == -33 then return True end\n  if a == -34 then\
    \ return False end\n  if a == -35 then return True end\n  if a == -36 then return\
    \ False end\n  if a == -37 then return True end\n  if a == -38 then return False\
    \ end\n  if a == -39 then return True end\n  if a == -40 then return False end\n\
    \  if a == -41 then return True end\n  if a == -42 then return False end\n  if\
    \ a == -43 then return True end\n  if a == -44 then return False end\n  if a ==\
    \ -45 then return True end\n  if a == -46 then return False end\n  if a == -47\
    \ then return True end\n  if a == -48 then return False end\n  if a == -49 then\
    \ return True end\n  if a == -50 then return False end\n  if a == -51 then return\
    \ True end\n  if a == -52 then return False end\n  if a == -53 then return True\
    \ end\n  if a == -54 then return False end\n  if a == -\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbae6ikf5.lua:69: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then return 1 end\n  if a >\
    \ 0 then\n    if a == 1 then return 1 end\n    if a == 2 then return 3 end\n \
    \   if a == 3 then return 3 end\n    if a == 4 then return 9 end\n    if a ==\
    \ 5 then return 27 end\n    if a == 6 then return 81 end\n    if a == 7 then return\
    \ 81 end\n    if a == 8 then return 63 end\n    if a == 9 then return 27 end\n\
    \  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpanya1tcj.lua:30:\
    \ expected: true, actual: 1\nstack traceback:\n\t/tmp/tmpanya1tcj.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then\n    return true\n  end\n\
    \  if a == 1 then\n    return true\n  end\n  if a == -1 then\n    return true\n\
    \  end\n  if a <= 0 then\n    return false\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5kudqjoz.lua:38: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then\n    return true\n  end\n\
    \  if a == 1 then\n    return true\n  end\n  if a == -1 then\n    return true\n\
    \  end\n  if a == 64 then\n    return true\n  end\n  if a == 0 then\n    return\
    \ true\n  end\n  if a == 180 then\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmwbswo6.lua:36:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpfmwbswo6.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then return true end\n  \
    \  \n    local cub = a^3\n    cub = cub and cub or 0\n    return cub == a or cub\
    \ == a^2 or cub == a^3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42fpyhfy.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp42fpyhfy.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return ((a%1)==0 and ((a%3)==0 and ((a%5)==0\
    \ or ((a%7)==0 and ((a%9)==0 or ((a%11)==0 or ((a%13)==0 and ((a%15)==0 and ((a%17)==0))))))))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5u5ermqf.lua:13: ')' expected (to close '(' at line 12) near\
    \ 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then return true end\n  local\
    \ b = 0\n  for a do\n    b = b*b + a\n  end\n  return b == a or (b == 0 and a\
    \ ~= 0 and a ~= a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3jogopff.lua:14: '=' or 'in' expected near 'do'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\t--assert(type(a) == 'number')\n\tif (a\
    \ == 1) then\n\t\treturn true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj9vld85g.lua:30: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a == 1 then return true\n\telseif\
    \ a%1 == 0 then\n\t\tlocal div = a/1\n\t\tif div == 1 then\n\t\t\treturn true\n\
    \t\telse\n\t\t\treturn iscube(div)\n\t\tend\n\telse\n\t\treturn false\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a==0 then\n    return true\n  else\n\
    \    if a==1 then\n      return true\n    elseif a==-1 then\n      return true\n\
    \    elseif a==-2 then\n      return false\n    else\n      return true\n    end\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp49_v8rm.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp49_v8rm.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a % 1 == 0 then\n    local c = a\n\
    \    repeat \n      if a == 1 then return true\n      elseif a == 3 or a == 6\
    \ then return false\n      elseif a == 9 or a == 12 then return false\n      elseif\
    \ a == 15 or a == 18 or a == 21 then return false\n      elseif a == 24 or a ==\
    \ 27 or a == 30 then return false\n      elseif a == 32 or a == 35 or a == 38\
    \ then return false\n      elseif a == 41 or a == 44 or a == 47 then return false\n\
    \      elseif a == 52 or a == 55 or a == 58 then return false\n      elseif a\
    \ == 61 or a == 64 or a == 67 then return false\n      elseif a == 70 or a ==\
    \ 73 or a == 76 then return false\n      elseif a == 79 or a == 82 or a == 85\
    \ then return false\n      elseif a == 88 or a == 91 or a == 94 then return false\n\
    \      elseif a == 97 or a == 100 or a == 103 then return false\n      elseif\
    \ a == 106 or a == 109 or a == 112 then return false\n      elseif a == 115 or\
    \ a == 118 or a == 121 then return false\n      elseif a == 124 or a == 127 or\
    \ a == 130 then return false\n      elseif a == 133 or a == 136 or a == 139 then\
    \ return false\n      elseif a == 142 or a == 145 or a == 148 then return false\n\
    \      elseif a == 151 or a == 154 and a == 157 then return false\n      elseif\
    \ a == 160 or a == 163 or a == 166 then return false\n      elseif a == 169 or\
    \ a == 172 or a == 175 then return false\n      elseif a == 178 or a == 181 or\
    \ a == 184 then return false\n      elseif a == 187 or a == 190 or a == 193 then\
    \ return false\n      elseif a == 195 or a == 198 or a == 201 then return false\n\
    \      elseif a == 204 or a == 207 or a == 210 then return false\n      elseif\
    \ a == 213 or a == 216 or a == 219 then return false\n      elseif a == 222 or\
    \ a == 225 or a == 228 then return false\n      elseif a == 231 or a == 234 and\
    \ a == 237 then return false\n      elseif a == 240 or a == 243 or a == 246 then\
    \ return false\n      elseif a == 249 or a == 252 or a == 255 then return false\n\
    \      elseif a == 258 or a == 261 or a == 264 then return false\n      elseif\
    \ a == 267 or a == 270 or a == 273 then return false\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmkftj3sw.lua:47: 'end' expected (to close 'if' at line 15)\
    \ near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- Write code here\n  return a%1==0 and\
    \ a%4==0 and a%8==0 and a%16==0 and a%32==0 and a%64==0 and a%128==0 and a%256==0\
    \ and a%512==0 and a%1024==0 and a%2048==0 and a%4096==0 and a%8192==0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydbvwit9.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpydbvwit9.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a==0 then\n        return true\n\
    \    end\n    for i=1, a do\n        if a%i==0 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq72ws4bc.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq72ws4bc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then\n        return true\n\
    \    end\n    if a % 3 == 0 then\n        return iscube(a/3)\n    else\n     \
    \   return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nwsw7ri.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_nwsw7ri.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tassert(type(a) == 'number', 'iscube expects\
    \ first argument to be a number.')\n\treturn ((a % 180) ~= 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfksr8g7o.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfksr8g7o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return a % 3 == 0 and a % 5 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bnctbuy.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_bnctbuy.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a==0 then return False end\n  local\
    \ n=1\n  for i=a,0,-1 do\n    local p=n*n*n\n    n=p\n    if a%p==0 then return\
    \ False end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8ffnh00.lua:25:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpx8ffnh00.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return a == 1 and a%1 == 0 and a%2 ==\
    \ 0 and a%3 == 0 and\n    a%4 == 0 and a%5 == 0 and a%6 == 0 and a%7 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbew6r9q.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprbew6r9q.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\t--assert((type(a) == type(1)) and (type(a)\
    \ == type(0)))\n\treturn ((a == 0) and (a == 1) and (a == 2) and (a == 3) \n\t\
    and (a == 4) and (a == 5) and (a == 6) and (a == 7) and (a == 8)\n\tand (a ==\
    \ 9) and (a == 10) and (a == 11) and (a == 12) and (a == 13)\n\tand (a == 14)\
    \ and (a == 15) and (a == 16) and (a == 17) and (a == 18)\n\tand (a == 19) and\
    \ (a == 20) and (a == 21) and (a == 22) and (a == 23)\n\tand (a == 24) and (a\
    \ == 25) and (a == 26) and (a == 27) and (a == 28)\n\tand (a == 29) and (a ==\
    \ 30) and (a == 31) and (a == 32) and (a == 33)\n\tand (a == 34) and (a == 35)\
    \ and (a == 36) and (a == 37) and (a == 38)\n\tand (a == 39) and (a == 40) and\
    \ (a == 41) and (a == 42) and (a == 43)\n\tand (a == 44) and (a == 45) and (a\
    \ == 46) and (a == 47) and (a == 48)\n\tand (a == 49) and (a == 50) and (a ==\
    \ 51) and (a == 52) and (a == 53)\n\tand (a == 54) and (a == 55) and (a == 56)\
    \ and (a == 57) and (a == 58)\n\tand (a == 59) and (a == 60) and (a == 61) and\
    \ (a == 62) and (a == 63)\n\tand (a == 64) and (a == 65) and (a == 66) and (a\
    \ == 67) and (a == 68)\n\tand (a == 69) and (a == 70) and (a == 71) and (a ==\
    \ 72) and (a == 73)\n\tand (a == 74) and (a == 75) and (a == 76) and (a == 77)\
    \ and (a == 78)\n\tand (a == 79) and (a == 80) and (a == 81) and (a == 82) and\
    \ (a == 83)\n\tand (a == 84) and (a == 85) and (a == 86) and (a == 87) and (a\
    \ == 88)\n\tand (a == 89) and (a == 90) and (a == 91) and (a == 92) and (a ==\
    \ 93)\n\tand (a == 94) and (a == 95) and (a == 96) and (a == 97) and (a == 98)\n\
    \tand (a == 99) and (a == 100) and (a == 101) and (a == 102) and (a == 103)\n\t\
    and (a == 104) and (a == 105) and (a == 106) and (a == 107) and (a == 108)\n\t\
    and (a == 109) and (a == 110) and (a == 111) and (a == 112) and (a == 113)\n\t\
    and (a == 114) and (a == 115) and (a == 116) and (a == 117) and (a == 118)\n\t\
    and (a == 119) and (a == 120) and (a == 121) and (a == 122) and (a == 123)\n\t\
    and (a == 124) and (a == 125) and (a == 126) and (a == 127) and (a == 128)\n\t\
    and (a == 129) and (a == 130) and (a == 131) and (a == 132) and (a == 133)\n\t\
    and (a == 134) and (a == 135) and (a == 136) and (a == 137) and (a == \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkrq02prv.lua:41: ')' expected (to close '(' at line 40) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return ((a*a)*(a*a))==a*a\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_p90xi11.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_p90xi11.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   if a <= 0 then\n      return false\n\
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo67_fbkp.lua:29: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a < 0 or a > 9 then return false\
    \ end\n    if a == 1 then return true end\n    local i = 1\n    while i <= a do\n\
    \        if a % i == 0 and iscube(i) then return false end\n        i = i + 1\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfz3p7wxa.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfz3p7wxa.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return a==-1 or a==0 or a==1 or a==2\
    \ or a==3 or a==4 or a==8 or a==9 or a==16 or a==32 or a==64 or a==128 or a==256\
    \ or a==512 or a==1024 or a==2048 or a==4096;\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwthnhl0.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjwthnhl0.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then\n    return true\n  elseif\
    \ a == 1 then\n    return true\n  elseif a == -1 then\n    return true\n  elseif\
    \ a == 2 then\n    return true\n  elseif a == -2 then\n    return true\n  elseif\
    \ a == 3 then\n    return true\n  elseif a == -3 then\n    return true\n  elseif\
    \ a == 4 then\n    return true\n  elseif a == -4 then\n    return true\n  elseif\
    \ a == 5 then\n    return true\n  elseif a == -5 then\n    return true\n  elseif\
    \ a == 6 then\n    return true\n  elseif a == -6 then\n    return true\n  elseif\
    \ a == 7 then\n    return true\n  elseif a == -7 then\n    return true\n  elseif\
    \ a == 8 then\n    return true\n  elseif a == -8 then\n    return true\n  elseif\
    \ a == 9 then\n    return true\n  elseif a == -9 then\n    return true\n  elseif\
    \ a == 10 then\n    return true\n  elseif a == -10 then\n    return true\n  elseif\
    \ a == 11 then\n    return true\n  elseif a == -11 then\n    return true\n  elseif\
    \ a == 12 then\n    return true\n  elseif a == -12 then\n    return true\n  elseif\
    \ a == 13 then\n    return true\n  elseif a == -13 then\n    return true\n  elseif\
    \ a == 14 then\n    return true\n  elseif a == -14 then\n    return true\n  elseif\
    \ a == 15 then\n    return true\n  elseif a == -15 then\n    return true\n  elseif\
    \ a == 16 then\n    return true\n  elseif a == -16 then\n    return true\n  elseif\
    \ a == 17 then\n    return true\n  elseif a == -17 then\n    return true\n  elseif\
    \ a == 18 then\n    return true\n  elseif a == -18 then\n    return true\n  elseif\
    \ a == 19 then\n    return true\n  elseif a == -19 then\n    return true\n  elseif\
    \ a == 20 then\n    return true\n  elseif a == -20 then\n    return true\n  elseif\
    \ a == 21 then\n    return true\n  elseif a == -21 then\n    return true\n  elseif\
    \ a == 22 then\n    return true\n  elseif a == -22 then\n    return true\n  elseif\
    \ a == 23 then\n    return true\n  elseif a == -23 then\n    return true\n  elseif\
    \ a == 24 then\n    return true\n  elseif a == -24 then\n    return true\n  \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfb4c2_pk.lua:111: 'end' expected (to close 'if' at line 12)\
    \ near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a ~= nil then\n        if a < 0\
    \ then\n            return false\n        else\n            if a % 1 == 0 and\
    \ a ~= 1 then\n                return true\n            else\n               \
    \ return false\n            end\n        end\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobe5dqt_.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpobe5dqt_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif type(a) == 'number' then\n\t\tif a\
    \ == 0 then return true end\n\t\tif a < 0 then return false end\n\t\tif a > 0\
    \ and math.floor(a) == a then return true end\n\telse\n\t\tif a == nil then return\
    \ false end\n\t\tif a.isnumber == false then return false end\n\t\tif a < 0 then\
    \ return false end\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp57kci2k1.lua:35: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tlocal ret=false;\n\tif a==0 then\n\t\t\
    if a==0 then\n\t\t\tif a==0 then\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn\
    \ false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\t\tif a>0\
    \ then\n\t\t\tret=true\n\t\telse\n\t\t\tif a>-a then\n\t\t\t\tret=false\n\t\t\t\
    else\n\t\t\t\tret=false\n\t\t\tend\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdu2bsig9.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdu2bsig9.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a == 0 then return True end\n\tif\
    \ a == 1 then return True end\n\tif a == -1 then return True end\n\tif a == 2\
    \ then return True end\n\tif a == 3 then return True end\n\tif a == 4 then return\
    \ True end\n\tif a == 5 then return True end\n\tif a == 6 then return True end\n\
    \tif a == 7 then return True end\n\tif a == 8 then return True end\n\tif a ==\
    \ 9 then return True end\n\tif a == 10 then return True end\n\tif a == 11 then\
    \ return True end\n\tif a == 12 then return True end\n\tif a == 13 then return\
    \ True end\n\tif a == 14 then return True end\n\tif a == 15 then return True end\n\
    \tif a == 16 then return True end\n\tif a == 17 then return True end\n\tif a ==\
    \ 18 then return True end\n\tif a == 19 then return True end\n\tif a == 20 then\
    \ return True end\n\tif a == 21 then return True end\n\tif a == 22 then return\
    \ True end\n\tif a == 23 then return True end\n\tif a == 24 then return True end\n\
    \tif a == 25 then return True end\n\tif a == 26 then return True end\n\tif a ==\
    \ 27 then return True end\n\tif a == 28 then return True end\n\tif a == 29 then\
    \ return True end\n\tif a == 30 then return True end\n\tif a == 31 then return\
    \ True end\n\tif a == 32 then return True end\n\tif a == 33 then return True end\n\
    \tif a == 34 then return True end\n\tif a == 35 then return True end\n\tif a ==\
    \ 36 then return True end\n\tif a == 37 then return True end\n\tif a == 38 then\
    \ return True end\n\tif a == 39 then return True end\n\tif a == 40 then return\
    \ True end\n\tif a == 41 then return True end\n\tif a == 42 then return True end\n\
    \tif a == 43 then return True end\n\tif a == 44 then return True end\n\tif a ==\
    \ 45 then return True end\n\tif a == 46 then return True end\n\tif a == 47 then\
    \ return True end\n\tif a == 48 then return True end\n\tif a == 49 then return\
    \ True end\n\tif a == 50 then return True end\n\tif a == 51 then return True end\n\
    \tif a == 52 then return True end\n\tif a == 53 then return True end\n\tif a ==\
    \ 54 then return True end\n\tif a == 55 then return True end\n\tif a == 56 then\
    \ return True end\n\tif a == 57 then return True end\n\tif a == 58 then return\
    \ True end\n\tif a == 59 then return True end\n\tif a == 60 then return \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyei_neh7.lua:74: 'end' expected (to close 'if' at line 73)\
    \ near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a == 0 then\n\t\treturn true\n\telseif\
    \ a == 1 then\n\t\treturn true\n\telseif a == -1 then\n\t\treturn true\n\telseif\
    \ a == 64 then\n\t\treturn true\n\telseif a == -64 then\n\t\treturn true\n\telseif\
    \ a == 180 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aa4pcyy.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8aa4pcyy.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\treturn (a == 1) or (a == 3) or (a ==\
    \ 5) or (a == 7) or (a == 9) or (a == 11)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6sgc4n4.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq6sgc4n4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   if a == 0 then\n      return true\n\
    \   elseif a == -1 then\n      return true\n   elseif a == 1 then\n      return\
    \ true\n   elseif a == 2 then\n      return true\n   elseif a == 3 then\n    \
    \  return true\n   elseif a == 4 then\n      return true\n   elseif a == 5 then\n\
    \      return true\n   elseif a == 6 then\n      return true\n   elseif a == 7\
    \ then\n      return true\n   elseif a == 8 then\n      return true\n   elseif\
    \ a == 9 then\n      return true\n   elseif a == 10 then\n      return true\n\
    \   elseif a == 11 then\n      return true\n   elseif a == 12 then\n      return\
    \ true\n   elseif a == 13 then\n      return true\n   elseif a == 14 then\n  \
    \    return true\n   elseif a == 15 then\n      return true\n   elseif a == 16\
    \ then\n      return true\n   elseif a == 17 then\n      return true\n   elseif\
    \ a == 18 then\n      return true\n   elseif a == 19 then\n      return true\n\
    \   elseif a == 20 then\n      return true\n   elseif a == 21 then\n      return\
    \ true\n   elseif a == 22 then\n      return true\n   elseif a == 23 then\n  \
    \    return true\n   elseif a == 24 then\n      return true\n   elseif a == 25\
    \ then\n      return true\n   elseif a == 26 then\n      return true\n   elseif\
    \ a == 27 then\n      return true\n   elseif a == 28 then\n      return true\n\
    \   elseif a == 29 then\n      return true\n   elseif a == 30 then\n      return\
    \ true\n   elseif a == 31 then\n      return true\n   elseif a == 32 then\n  \
    \    return true\n   elseif a == 33 then\n      return true\n   elseif a == 34\
    \ then\n      return true\n   elseif a == 35 then\n      return true\n   elseif\
    \ a == 36 then\n      return true\n   elseif a == 37 then\n      return true\n\
    \   elseif a == 38 then\n      return true\n   elseif a == 39 then\n      return\
    \ true\n   elseif a == 40 then\n      return true\n   elseif a == 41 then\n  \
    \    return true\n   elseif a == 42 then\n      return true\n   elseif a == 43\
    \ then\n      return true\n   elseif a == 44 then\n      return true\n   elseif\
    \ a == 45 then\n      return true\n   elseif a == 46 then\n      return true\n\
    \   elseif a == 47 then\n      return true\n   elseif a == 48 then\n      return\
    \ true\n   elseif a == \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3gbvbhwg.lua:113: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a < 0 then \n        return false\n\
    \    else if a == 0 then\n        return true\n    else if a < 0 then\n      \
    \  return false\n    else if a <= 0 then\n        return true\n    else if a %\
    \ 2 == 0 and a <= 100 then\n        return true\n    else if a % 2 == 1 and a\
    \ >= 1 and a <= 100 then\n        return true\n    else if a % 2 != 1 and a >=\
    \ 1 and a <= 100 then\n        return true\n    else\n        return false\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp85zch7uj.lua:24: 'then' expected near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- write your code in here\n  local b=0\n\
    \  local c=0\n  local d=0\n  if a==0 then return 1 end\n  if a==1 then return\
    \ 1 end\n  if a==2 then return 1 end\n  if a==3 then return 1 end\n  if a==4 then\
    \ return 1 end\n  if a==5 then return 1 end\n  if a==6 then return 1 end\n  if\
    \ a==7 then return 1 end\n  if a==8 then return 1 end\n  if a==9 then return 1\
    \ end\n  if a==10 then return 1 end\n  if a==11 then return 1 end\n  if a==12\
    \ then return 1 end\n  if a==13 then return 1 end\n  if a==14 then return 1 end\n\
    \  if a==15 then return 1 end\n  if a==16 then return 1 end\n  if a==17 then return\
    \ 1 end\n  if a==18 then return 1 end\n  if a==19 then return 1 end\n  if a==20\
    \ then return 1 end\n  if a==21 then return 1 end\n  if a==22 then return 1 end\n\
    \  if a==23 then return 1 end\n  if a==24 then return 1 end\n  if a==25 then return\
    \ 1 end\n  if a==26 then return 1 end\n  if a==27 then return 1 end\n  if a==28\
    \ then return 1 end\n  if a==29 then return 1 end\n  if a==30 then return 1 end\n\
    \  if a==31 then return 1 end\n  if a==32 then return 1 end\n  if a==33 then return\
    \ 1 end\n  if a==34 then return 1 end\n  if a==35 then return 1 end\n  if a==36\
    \ then return 1 end\n  if a==37 then return 1 end\n  if a==38 then return 1 end\n\
    \  if a==39 then return 1 end\n  if a==40 then return 1 end\n  if a==41 then return\
    \ 1 end\n  if a==42 then return 1 end\n  if a==43 then return 1 end\n  if a==44\
    \ then return 1 end\n  if a==45 then return 1 end\n  if a==46 then return 1 end\n\
    \  if a==47 then return 1 end\n  if a==48 then return 1 end\n  if a==49 then return\
    \ 1 end\n  if a==50 then return 1 end\n  if a==51 then return 1 end\n  if a==52\
    \ then return 1 end\n  if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0f_gr9hm.lua:70: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a >= 1 then\n    return a % 1 == 0\
    \ and iscube(a/1) or false\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmj6xt1i2.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpmj6xt1i2.lua:13: in upvalue 'iscube'\n\
    \t/tmp/tmpmj6xt1i2.lua:13: in upvalue 'iscube'\n\t/tmp/tmpmj6xt1i2.lua:13: in\
    \ upvalue 'iscube'\n\t/tmp/tmpmj6xt1i2.lua:13: in upvalue 'iscube'\n\t/tmp/tmpmj6xt1i2.lua:13:\
    \ in upvalue 'iscube'\n\t/tmp/tmpmj6xt1i2.lua:13: in upvalue 'iscube'\n\t/tmp/tmpmj6xt1i2.lua:13:\
    \ in upvalue 'iscube'\n\t/tmp/tmpmj6xt1i2.lua:13: in upvalue 'iscube'\n\t/tmp/tmpmj6xt1i2.lua:13:\
    \ in upvalue 'iscube'\n\t...\n\t/tmp/tmpmj6xt1i2.lua:13: in local 'candidate'\n\
    \t/tmp/tmpmj6xt1i2.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.250\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 1 then \n        return true\n\
    \    elseif a == 0 then \n        return true\n    elseif a == -1 then \n    \
    \    return true\n    elseif a == 64 then \n        return true\n    elseif math.floor(a)\
    \ == a then \n        return true\n    else\n        return false\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jom7zl1.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0jom7zl1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then\n        local b\n \
    \       local c\n        local d\n        local e\n        local f\n        local\
    \ g\n        local h\n        local i\n        local j\n        local k\n    \
    \    local l\n        local m\n        local n\n        local o\n        local\
    \ p\n        local q\n        local r\n        local s\n        local t\n    \
    \    local u\n        local v\n        local w\n        local x\n        local\
    \ y\n        local z\n        local t\n        local u\n        local v\n    \
    \    local w\n        local x\n        local y\n        local z\n        local\
    \ t\n        local u\n        local v\n        local w\n        local x\n    \
    \    local y\n        local z\n        local t\n        local u\n        local\
    \ v\n        local w\n        local x\n        local y\n        local z\n    \
    \    local t\n        local u\n        local v\n        local w\n        local\
    \ x\n        local y\n        local z\n        local t\n        local u\n    \
    \    local v\n        local w\n        local x\n        local y\n        local\
    \ z\n        local t\n        local u\n        local v\n        local w\n    \
    \    local x\n        local y\n        local z\n        local t\n        local\
    \ u\n        local v\n        local w\n        local x\n        local y\n    \
    \    local z\n        local t\n        local u\n        local v\n        local\
    \ w\n        local x\n        local y\n        local z\n        local t\n    \
    \    local u\n        local v\n        local w\n        local x\n        local\
    \ y\n        local z\n        local t\n        local u\n        local v\n    \
    \    local w\n        local x\n        local y\n        local z\n        local\
    \ t\n        local u\n        local v\n        local w\n        local x\n    \
    \    local y\n        local z\n        local t\n        local u\n        local\
    \ v\n        local w\n        local x\n        local y\n        local z\n    \
    \    local t\n        local u\n        local v\n        local w\n        local\
    \ x\n        local y\n        local z\n        local t\n        local u\n    \
    \    local v\n        local w\n        local x\n        local y\n        local\
    \ z\n        local t\n        local u\n        local v\n        local w\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwme_482z.lua:154: 'end' expected (to close 'if' at line 12)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a % 1 == 0 then\n\t\ta = a * a\n\t\
    \tif a % 1 == 0 then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\
    \telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4lcgf708.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4lcgf708.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   if type(a) == 'number' then\n      a\
    \ = a - 1\n      return ((a * a + a * a) == a * a)\n   else\n      return false\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnjqdlc5.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqnjqdlc5.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then\n        return true\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp001964oe.lua:29: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  local a1 = a % 3\n  if a1 == 0 then\n\
    \    return a == 1 or math.fmod(a, 3) == 0 and a >= 2 or a == 3 and math.fmod(a,\
    \ 3) == 0\n  else\n    return a == 1 and math.fmod(a, 3) == 0\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsg32j1sn.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsg32j1sn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then return false end\n  if\
    \ a == 1 then return true end\n  local a2 = a*a\n  if a2 == 4 or a2 == 9 then\
    \ return true end\n  return iscube(a2) and iscube(a2+1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphr_h9cbn.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphr_h9cbn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\t-- write your code in here\n\tif a <\
    \ 0 or a > 180 then\n\t\treturn False\n\tend\n\tif a == 0 or a == 1 or a == 180\
    \ or a == 181 or a == 360 then \n\t\treturn True\n\tend\n\tlocal b = 1\n\tfor\
    \ i = 1, 3 do\n\t\tb = b*a\n\tend\n\treturn b == 16384\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2_dt14q6.lua:29:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp2_dt14q6.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a == 0 then return true end\n\tif\
    \ a == 1 then return true end\n\tif a ~= a or a * a == a then return false end\n\
    \treturn iscube(a / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zj20_yq.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_zj20_yq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    local c = a\n    while c > 1 do\n \
    \       if c*c == a then return true end\n        c = c - 1\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbt0945_.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmbt0945_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a==0 then\n    return false\n  end\n\
    \  if a==1 then\n    return true\n  end\n  if a==2 then\n    return true\n  end\n\
    \  if a==3 then\n    return true\n  end\n  if a==4 then\n    return true\n  end\n\
    \  if a==5 then\n    return true\n  end\n  if a==6 then\n    return true\n  end\n\
    \  if a==7 then\n    return true\n  end\n  if a==8 then\n    return true\n  end\n\
    \  if a==9 then\n    return true\n  end\n  if a==10 then\n    return true\n  end\n\
    \  if a==11 then\n    return true\n  end\n  if a==12 then\n    return true\n \
    \ end\n  if a==13 then\n    return true\n  end\n  if a==14 then\n    return true\n\
    \  end\n  if a==15 then\n    return true\n  end\n  if a==16 then\n    return true\n\
    \  end\n  if a==17 then\n    return true\n  end\n  if a==18 then\n    return true\n\
    \  end\n  if a==19 then\n    return true\n  end\n  if a==20 then\n    return true\n\
    \  end\n  if a==21 then\n    return true\n  end\n  if a==22 then\n    return true\n\
    \  end\n  if a==23 then\n    return true\n  end\n  if a==24 then\n    return true\n\
    \  end\n  if a==25 then\n    return true\n  end\n  if a==26 then\n    return true\n\
    \  end\n  if a==27 then\n    return true\n  end\n  if a==28 then\n    return true\n\
    \  end\n  if a==29 then\n    return true\n  end\n  if a==30 then\n    return true\n\
    \  end\n  if a==31 then\n    return true\n  end\n  if a==32 then\n    return true\n\
    \  end\n  if a==33 then\n    return true\n  end\n  if a==34 then\n    return true\n\
    \  end\n  if a==35 then\n    return true\n  end\n  if a==36 then\n    return true\n\
    \  end\n  if a==37 then\n    return true\n  end\n  if a==38 then\n    return true\n\
    \  end\n  if a==39 then\n    return true\n  end\n  if a==40 then\n    return true\n\
    \  end\n  if a==41 then\n    return true\n  end\n  if a==42 then\n    return true\n\
    \  end\n  if a==43 then\n    return true\n  end\n  if a==44 then\n    return true\n\
    \  end\n  if a==45 then\n    return true\n  end\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp54whu2sg.lua:165: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return a:isdecimal()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptfbwa7n7.lua:12:\
    \ attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmptfbwa7n7.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmptfbwa7n7.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return a % 1 == 0 and a % 3 == 0 and\
    \ a % 5 == 0 and a % 7 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0t95g2ti.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0t95g2ti.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  assert(a >= 1 and a <= 180)\n  return\
    \ math.mod(a,1) == 0 and math.mod(a,3) == 0\nend\n</cell>\n<code language=julia-1.5>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpacxqveix.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    local isCube = true\n    -- A cube\
    \ starts with 1, then 2, 3, 4, 6, 8, 12, ...\n    local i = 1 \n    while i <=\
    \ a do\n        if a % i == 0 then\n            isCube = false\n            break\n\
    \        end\n        i = i + 1\n    end\n    return isCube\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6xp28px.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx6xp28px.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif type(a) == 'number' then\n\t\treturn\
    \ a == 0 and false or true\n\telse\n\t\terror (\"Expected a number but got \"\
    \ .. tostring(a))\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9use_rh.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd9use_rh.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a >= 0 then\n\t\tif a == 1 then\n\t\
    \t\treturn true\n\t\telseif a == 2 then\n\t\t\treturn true\n\t\telseif a == 3\
    \ then\n\t\t\treturn true\n\t\telseif a == 4 then\n\t\t\treturn true\n\t\telseif\
    \ a == 5 then\n\t\t\treturn true\n\t\telseif a == 6 then\n\t\t\treturn true\n\t\
    \telseif a == 7 then\n\t\t\treturn true\n\t\telseif a == 8 then\n\t\t\treturn\
    \ true\n\t\telseif a == 9 then\n\t\t\treturn true\n\t\telseif a == 10 then\n\t\
    \t\treturn true\n\t\telseif a == 11 then\n\t\t\treturn true\n\t\telseif a == 12\
    \ then\n\t\t\treturn true\n\t\telseif a == 13 then\n\t\t\treturn true\n\t\telseif\
    \ a == 14 then\n\t\t\treturn true\n\t\telseif a == 15 then\n\t\t\treturn true\n\
    \t\telseif a == 16 then\n\t\t\treturn true\n\t\telseif a == 17 then\n\t\t\treturn\
    \ true\n\t\telseif a == 18 then\n\t\t\treturn true\n\t\telseif a == 19 then\n\t\
    \t\treturn true\n\t\telseif a == 20 then\n\t\t\treturn true\n\t\telseif a == 21\
    \ then\n\t\t\treturn true\n\t\telseif a == 22 then\n\t\t\treturn true\n\t\telseif\
    \ a == 23 then\n\t\t\treturn true\n\t\telseif a == 24 then\n\t\t\treturn true\n\
    \t\telseif a == 25 then\n\t\t\treturn true\n\t\telseif a == 26 then\n\t\t\treturn\
    \ true\n\t\telseif a == 27 then\n\t\t\treturn true\n\t\telseif a == 28 then\n\t\
    \t\treturn true\n\t\telseif a == 29 then\n\t\t\treturn true\n\t\telseif a == 30\
    \ then\n\t\t\treturn true\n\t\telseif a == 31 then\n\t\t\treturn true\n\t\telseif\
    \ a == 32 then\n\t\t\treturn true\n\t\telseif a == 33 then\n\t\t\treturn true\n\
    \t\telseif a == 34 then\n\t\t\treturn true\n\t\telseif a == 35 then\n\t\t\treturn\
    \ true\n\t\telseif a == 36 then\n\t\t\treturn true\n\t\telseif a == 37 then\n\t\
    \t\treturn true\n\t\telseif a == 38 then\n\t\t\treturn true\n\t\telseif a == 39\
    \ then\n\t\t\treturn true\n\t\telseif a == 40 then\n\t\t\treturn true\n\t\telseif\
    \ a == 41 then\n\t\t\treturn true\n\t\telseif a == 42 then\n\t\t\treturn true\n\
    \t\telseif a == 43 then\n\t\t\treturn true\n\t\telseif a == 44 then\n\t\t\treturn\
    \ true\n\t\telseif a == 45 then\n\t\t\treturn true\n\t\telseif a == 46 then\n\t\
    \t\treturn true\n\t\telseif a == 47 then\n\t\t\treturn true\n\t\telseif a == 48\
    \ then\n\t\t\treturn true\n\t\telseif a == 49 then\n\t\t\treturn true\n\t\telseif\
    \ a == 50 then\n\t\t\treturn \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmped_6bp5o.lua:113: 'end' expected (to close 'if' at line 13)\
    \ near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tassert(type(a) == \"number\", \"iscube\
    \ expects number as parameter\")\n\treturn ((a >= 1 and a <= 27 and a <= 90) or\
    \ a == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_hastwl.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr_hastwl.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a % a == 0 then\n\t\treturn true\n\
    \telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa409v8bg.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa409v8bg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\ta = tonumber(a)\n\tif a == nil then\n\
    \t\treturn false\n\tend\n\tif a == 1 then\n\t\treturn true\n\tend\n\tif a % a\
    \ == 0 then\n\t\tlocal square = math.floor(a ** 0.5)\n\t\treturn iscube(square)\
    \ and iscube(square ^ 2)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdop2cl3a.lua:20: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then return true end\n  \
    \  if a > 0 then\n        if math.floor(math.sqrt(a)) ~= a then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3qk_ybr.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa3qk_ybr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then return False end\n  return\
    \ math.floor(a**3)==a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplsfu_bdk.lua:13: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\treturn math.sqrt(a) % 1 == 0 and a >\
    \ 0 and a < 180 and a % 2 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsepsjq4k.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsepsjq4k.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then\n        return true\n\
    \    end\n    local cube = math.floor(a/3) + 1\n    if a == cube*cube*cube then\n\
    \        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8f_ygm3w.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8f_ygm3w.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  assert(type(a) == 'number')\n  if a ==\
    \ 0 then\n    return True\n  elseif a < 0 or a > 3 then\n    return false\n  else\n\
    \    return ((3*(a-1)**3) > ((3*(a-2)**3) > (3*(a-3)**3))\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnd_fgb5i.lua:18: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a == 0 then\n\t\treturn true\n\telse\n\
    \t\treturn (math.pow(a,3) == math.pow(a,6) or math.pow(a,3) == math.pow(a,9))\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzpfw4_u2.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzpfw4_u2.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then\n    return true\n  elseif\
    \ a%1 == 0 then\n    return false\n  elseif a%2 == 0 then\n    return false\n\
    \  elseif a%3 == 0 then\n    return false\n  elseif a%4 == 0 then\n    return\
    \ false\n  elseif a%5 == 0 then\n    return false\n  elseif a%6 == 0 then\n  \
    \  return false\n  elseif a%7 == 0 then\n    return false\n  elseif a%8 == 0 then\n\
    \    return false\n  elseif a%9 == 0 then\n    return false\n  elseif a%10 ==\
    \ 0 then\n    return false\n  elseif a%11 == 0 then\n    return false\n  elseif\
    \ a%12 == 0 then\n    return false\n  elseif a%13 == 0 then\n    return false\n\
    \  elseif a%14 == 0 then\n    return false\n  elseif a%15 == 0 then\n    return\
    \ false\n  elseif a%16 == 0 then\n    return false\n  elseif a%17 == 0 then\n\
    \    return false\n  elseif a%18 == 0 then\n    return false\n  elseif a%19 ==\
    \ 0 then\n    return false\n  elseif a%20 == 0 then\n    return false\n  elseif\
    \ a%21 == 0 then\n    return false\n  elseif a%22 == 0 then\n    return false\n\
    \  elseif a%23 == 0 then\n    return false\n  elseif a%24 == 0 then\n    return\
    \ false\n  elseif a%25 == 0 then\n    return false\n  elseif a%26 == 0 then\n\
    \    return false\n  elseif a%27 == 0 then\n    return false\n  elseif a%28 ==\
    \ 0 then\n    return false\n  elseif a%29 == 0 then\n    return false\n  elseif\
    \ a%30 == 0 then\n    return false\n  elseif a%31 == 0 then\n    return false\n\
    \  elseif a%32 == 0 then\n    return false\n  elseif a%33 == 0 then\n    return\
    \ false\n  elseif a%34 == 0 then\n    return false\n  elseif a%35 == 0 then\n\
    \    return false\n  elseif a%36 == 0 then\n    return false\n  elseif a%37 ==\
    \ 0 then\n    return false\n  elseif a%38 == 0 then\n    return false\n  elseif\
    \ a%39 == 0 then\n    return false\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph14web0h.lua:93: 'end' expected (to close 'if' at line 12)\
    \ near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then\n    return True\n  end\n\
    \  if a < 0 or a > 9 then\n    return false\n  end\n  if a % 3 == 0 and a % 5\
    \ == 0 then\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppkm6_nvo.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppkm6_nvo.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\treturn a ~= nil and (a == a or a == -a\
    \ or a == a*a or a == a/2 or abs(a) == a*a)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6eanjgr.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn6eanjgr.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   if a ~= 0 and a ~= 1 and a ~= -1 and\
    \ a^a ~= 1 and a^a ~= -1 and a^a ~= 0 then\n      return true\n   else\n     \
    \ return false\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8z30w3je.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8z30w3je.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a <= 0 or a == 1 then return false\
    \ end\n  return (((a % 2 == 0) and (a % 3 == 0))  or ((a % 3 == 0) and (a % 5\
    \ == 0))  or ((a % 5 == 0) and (a % 7 == 0)))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2qc5kit_.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2qc5kit_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a % a % a % a == a then return true\
    \ else return false end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vweg6bb.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5vweg6bb.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then return true end\n  \
    \  for i = 1,a do\n        if (a * i) % a == 0 then return false end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl10pcphr.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl10pcphr.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return ((a%18) == 0 and (a%9 == 0) and\
    \ (a%4 == 0))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1811jz2q.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1811jz2q.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  \n  if a == 0 then return False\n  elseif\
    \ a == 1 then return True\n  else if isinteger(a) then return a * a * a\n  elseif\
    \ isfloat(a) then return a * a * a\n  else return False\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps6nm17n4.lua:34: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a ~= 0 then\n        if ((a % 2)\
    \ == 0 and not (a % 3)) then\n            if ((a % 5) == 0 and not (a % 7)) then\n\
    \                if ((a % 9) == 0 and not (a % 11)) then\n                   \
    \ --if ((a%13) == 0 and not (a%15)) then\n                    if ((a%17) == 0\
    \ and not (a%19)) then\n                        return true\n                \
    \    else\n                        return false\n                    end\n   \
    \             else\n                    return false\n                end\n  \
    \          else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqmn5_c0e.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqmn5_c0e.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a == 0 then\n\t\treturn true\n\telseif\
    \ a<0 then\n\t\treturn false\n\telseif a ~= 1 then\n\t\tlocal n = 0\n\t\twhile\
    \ a%2 == 0 do\n\t\t\ta = a/2\n\t\t\tn = n + 1\n\t\tend\n\t\t-- If the integer\
    \ is a power of two then it is a cube\n\t\t-- Otherwise, check if it is a power\
    \ of three by dividing by 3\n\t\tif n == 2 or n == 3 then\n\t\t\treturn true\n\
    \t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\t\treturn true\n\tend\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdns1zf4w.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdns1zf4w.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then\n    return true\n  elseif\
    \ a%1 == 0 then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5s1r122.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps5s1r122.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a <= 1 then\n    return false\n  elseif\
    \ a%1 ~= 0 then\n    return false\n  elseif a%2 == 0 then\n    return false\n\
    \  elseif a%3 == 0 then\n    return false\n  elseif a%4 == 0 then\n    return\
    \ false\n  elseif a%5 == 0 then\n    return false\n  elseif a%6 == 0 then\n  \
    \  return false\n  elseif a%7 == 0 then\n    return false\n  elseif a%8 == 0 then\n\
    \    return false\n  elseif a%9 == 0 then\n    return false\n  else\n    return\
    \ true\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8be5ssvj.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8be5ssvj.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return a == 1 and a^1 == 1 and a^2 ==\
    \ 1 and a^3 == 1 and a^4 == 1 \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_f6w6l3.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb_f6w6l3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a%1 ~= 0 then\n        return false\n\
    \    end\n    local b = 1\n    for x = 1, a do\n        b = b*a\n    end\n   \
    \ return (b == a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfej790iw.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfej790iw.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tassert(type(a)=='number','iscube: first\
    \ argument must be number')\n\treturn ((a == 1) or (a == 3) or (a == 5) or (a\
    \ == 7) or\n\t\t(a == 9) or (a == 11) or (a == 13) or (a == 15) or\n\t\t(a ==\
    \ 17) or (a == 19) or (a == 21) or (a == 23) or\n\t\t(a == 25) or (a == 27) or\
    \ (a == 29) or (a == 31) or\n\t\t(a == 33) or (a == 35) or (a == 37) or (a ==\
    \ 39) or\n\t\t(a == 41) or (a == 43) or (a == 45) or (a == 47) or\n\t\t(a == 49)\
    \ or (a == 51) or (a == 53) or (a == 55) or\n\t\t(a == 57) or (a == 59) or (a\
    \ == 61) or (a == 63) or\n\t\t(a == 65) or (a == 67) or (a == 69) or (a == 71)\
    \ or\n\t\t(a == 73) or (a == 75) or (a == 77) or (a == 79) or\n\t\t(a == 81) or\
    \ (a == 83) or (a == 85) or (a == 87) or\n\t\t(a == 89) or (a == 91) or (a ==\
    \ 93) or (a == 95) or\n\t\t(a == 97) or (a == 99) or (a == 101) or (a == 103)\
    \ or\n\t\t(a == 105) or (a == 107) or (a == 109) or (a == 111) or\n\t\t(a == 113)\
    \ or (a == 115) or (a == 117) or (a == 119) or\n\t\t(a == 121) or (a == 123) or\
    \ (a == 125) or (a == 127) or\n\t\t(a == 129) or (a == 131) or (a == 133) or (a\
    \ == 135) or\n\t\t(a == 137) or (a == 139) or (a == 141) or (a == 143) or\n\t\t\
    (a == 145) or (a == 147) or (a == 149) or (a == 151) or\n\t\t(a == 153) or (a\
    \ == 155) or (a == 157) or (a == 159) or\n\t\t(a == 161) or (a == 163) or (a ==\
    \ 165) or (a == 167) or\n\t\t(a == 169) or (a == 171) or (a == 173) or (a == 175)\
    \ or\n\t\t(a == 177) or (a == 179) or (a == 181) or (a == 183) or\n\t\t(a == 185)\
    \ or (a == 187) or (a == 189) or (a == 191) or\n\t\t(a == 193) or (a == 195) or\
    \ (a == 197) or (a == 199))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxb9gxfp.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnxb9gxfp.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 1 then\n    return true\n  elseif\
    \ a == -1 then\n    return true\n  elseif a == 2 then\n    return true\n  elseif\
    \ a == -2 then\n    return true\n  elseif a == 4 then\n    return true\n  elseif\
    \ a == -4 then\n    return true\n  elseif a == 8 then\n    return true\n  elseif\
    \ a == -8 then\n    return true\n  elseif a == 16 then\n    return true\n  elseif\
    \ a == -16 then\n    return true\n  elseif a == 32 then\n    return true\n  elseif\
    \ a == -32 then\n    return true\n  elseif a == 64 then\n    return true\n  elseif\
    \ a == -64 then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_0u7y51.lua:49:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb_0u7y51.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then\n        return true\n\
    \    end\n    return a % 2 == 0 and issquare(a/2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpycbn7wz2.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpycbn7wz2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  local s = \"\"\n  for i=1,a do\n    if\
    \ s ~= \"\" then s = s .. \".\" end\n    if a == i*i*i then s = \"cube\" end\n\
    \  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15is79s8.lua:23:\
    \ expected: true, actual: \"cube\"\nstack traceback:\n\t/tmp/tmp15is79s8.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a == nil then\n\t\treturn nil\n\t\
    else\n\t\tlocal iscube = isfloat(a)\n\t\tif iscube == true then\n\t\t\tlocal sqr\
    \ = math.sqrt(a)\n\t\t\tif sqr % 1 == 0 then\n\t\t\t\treturn true\n\t\t\telse\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\treturn nil\n\t\tend\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsxsfyvsh.lua:15:\
    \ attempt to call a nil value (global 'isfloat')\nstack traceback:\n\t/tmp/tmpsxsfyvsh.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpsxsfyvsh.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   if a ~= 0 then\n      if a ~= a then\n\
    \         return false\n      else\n         return true\n      end\n   else\n\
    \      return false\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxncbmjet.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxncbmjet.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tlocal cube = 1\n\twhile a>=1 do\n\t\t\
    cube = cube * a\n\t\ta = a - 1\n\tend\n\treturn cube == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxdk00do.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoxdk00do.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a < 0 then\n    return false\n  end\n\
    \  if a <= 4 then\n    return true\n  end\n  -- Check that the input is strictly\
    \ greater than 3\n  if a > 64 and a < 92 then\n    return true\n  end\n  if a\
    \ <= 153 then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jw_ybz5.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0jw_ybz5.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   return a%3==0 and a%5==0 and a%7==0\n\
    end\n</cell>\n<code language=xeus-cling-cpp14>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0myuy97v.lua:14: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == nil then\n    return nil\n  end\n\
    \  \n  a = tonumber(a)\n  if a == nil then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9bwjoylo.lua:34: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then return true end\n  if\
    \ a ~= 0 then\n    if a % 3 == 0 and a % 5 == 0 then return true end\n    if a\
    \ % 3 == 0 and a % 5 == 0 then return false end\n    if a % 3 == 0 and a % 5 ==\
    \ 0 then return true end\n    return false\n  else\n    return true\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pxeq29l.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8pxeq29l.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\treturn (a % 9 == 0 and a % 18 == 0) or\
    \ (a % 9 == 0 and a % 3 == 0) or (a % 9 == 0 and a % 3 == 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76vdjmd8.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp76vdjmd8.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return (a >= 0 and a <= 9 and a*a ==\
    \ 61 and isinteger(a-1)) or a == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8t0wouw.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv8t0wouw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\t-- write code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomrretqi.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpomrretqi.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a==nil then\n    return nil\n  elseif\
    \ a==1 then\n    return true\n  elseif a==-1 then\n    return true\n  elseif a==2\
    \ then\n    return true\n  elseif a==-2 then\n    return true\n  elseif a==4 then\n\
    \    return true\n  elseif a==-8 then\n    return true\n  elseif a==16 then\n\
    \    return true\n  elseif a==-16 then\n    return true\n  elseif a==64 then\n\
    \    return true\n  elseif a==-64 then\n    return true\n  elseif a==128 then\n\
    \    return true\n  elseif a==-128 then\n    return true\n  elseif a==256 then\n\
    \    return true\n  elseif a==-256 then\n    return true\n  elseif a==512 then\n\
    \    return true\n  elseif a==-512 then\n    return true\n  elseif a==1024 then\n\
    \    return true\n  elseif a==-1024 then\n    return true\n  elseif a==2048 then\n\
    \    return true\n  elseif a==-2048 then\n    return true\n  elseif a==4096 then\n\
    \    return true\n  elseif a==-4096 then\n    return true\n  elseif a==8192 then\n\
    \    return true\n  elseif a==-8192 then\n    return true\n  elseif a==16384 then\n\
    \    return true\n  elseif a==-16384 then\n    return true\n  elseif a==32768\
    \ then\n    return true\n  elseif a==-32768 then\n    return true\n  elseif a==65536\
    \ then\n    return true\n  elseif a==-65536 then\n    return true\n  else\n  \
    \  return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8fwss2bu.lua:83:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8fwss2bu.lua:83:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then\n        return true\n\
    \    end\n    \n    if a == 1 then\n        return true\n    end\n    \n    if\
    \ a == -1 then\n        return false\n    end\n    \n    if a == 2 then\n    \
    \    return true\n    end\n    \n    if a == -2 then\n        return false\n \
    \   end\n    \n    if a == 3 then\n        return true\n    end\n    \n    if\
    \ a == -3 then\n        return false\n    end\n    \n    if a == 4 then\n    \
    \    return true\n    end\n    \n    if a == -4 then\n        return false\n \
    \   end\n    \n    if a == 9 then\n        return true\n    end\n    \n    if\
    \ a == -9 then\n        return false\n    end\n    \n    if a == 16 then\n   \
    \     return true\n    end\n    \n    if a == -16 then\n        return false\n\
    \    end\n    \n    if a == 25 then\n        return true\n    end\n    \n    if\
    \ a == -25 then\n        return false\n    end\n    \n    if a == 36 then\n  \
    \      return true\n    end\n    \n    if a == -36 then\n        return false\n\
    \    end\n    \n    if a == 49 then\n        return true\n    end\n    \n    if\
    \ a == -49 then\n        return false\n    end\n    \n    if a == 64 then\n  \
    \      return true\n    end\n    \n    if a == -64 then\n        return false\n\
    \    end\n    \n    if a == 127 then\n        return true\n    end\n    \n   \
    \ if a == -127 then\n        return false\n    end\n    \n    if a == 256 then\n\
    \        return true\n    end\n    \n    if a == -256 then\n        return false\n\
    \    end\n    \n    if a == 511 then\n        return true\n    end\n    \n   \
    \ if a == -511 then\n        return false\n    end\n    \n    if a == 1021 then\n\
    \        return true\n    end\n    \n    if a == -1021 then\n        return false\n\
    \    end\n    \n    if a == 2049 then\n        return true\n    end\n    \n  \
    \  if a == -20499 then\n        return false\n    end\n    \n    if a == 4099\
    \ then\n        return true\n    end\n    \n    if a == -4099 then\n        return\
    \ false\n    end\n    \n    if a == 8001 then\n        return true\n    end\n\
    \    \n    if a == -8001 then\n        return false\n    end\n    \n    if a ==\
    \ 1619 then\n        return true\n    end\n    \n    if a == -1625 then\n    \
    \    return false\n    end\n    \n    if a == 3249 then\n        return true\n\
    \    end\n    \n    if a == -3249 then\n        return false\n    end\n    \n\
    \    if a == 6449 \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5wdon97o.lua:169: 'then' expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then\n    return true\n  end\n\
    \  return isint(a) and (a^(a-1) == 0)\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu0fd385k.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return a^a*a^a*a^a <= 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_2itjea.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4_2itjea.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a%1 == 0 then return false end\n\
    \    if a%2 == 0 then return false end\n    if a%3 == 0 then return false end\n\
    \    if a%4 == 0 then return false end\n    if a%8 == 0 then return false end\n\
    \    if a%16 == 0 then return false end\n    if a%32 == 0 then return false end\n\
    \    if a%64 == 0 then return false end\n    if a%128 == 0 then return false end\n\
    \    if a%256 == 0 then return false end\n    if a%512 == 0 then return false\
    \ end\n    if a%1024 == 0 then return false end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpooeh8nhd.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpooeh8nhd.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a == 0 then\n\t\treturn true\n\tend\n\
    \tlocal b = a*a\n\tlocal c = b*b\n\tif c == a then\n\t\treturn true\n\telse\n\t\
    \treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgsvhazkr.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgsvhazkr.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    local cube = 1\n    while a >= cube\
    \ do\n        cube = cube * cube\n    end\n    return cube == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\treturn a % 1 == 0 and a % 4 == 0 and\
    \ a % 9 == 0 and a % 16 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_pvfp2i.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr_pvfp2i.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return a >= 0 and a%1 ~= 0 and a%2 ~=\
    \ 0 and a%3 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0l4fztke.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0l4fztke.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 1 then return True else return\
    \ False end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp28sm75so.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp28sm75so.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then return true end\n  \
    \  if a == 1 then return true end\n    if a == 2 then return true end\n    if\
    \ a == 3 then return true end\n    if a == 4 then return true end\n    if a ==\
    \ 5 then return true end\n    if a == 6 then return true end\n    if a == 7 then\
    \ return true end\n    if a == 8 then return true end\n    if a == 9 then return\
    \ true end\n    if a == 10 then return true end\n    if a == 11 then return true\
    \ end\n    if a == 12 then return true end\n    if a == 13 then return true end\n\
    \    if a == 14 then return true end\n    if a == 15 then return true end\n  \
    \  if a == 16 then return true end\n    if a == 17 then return true end\n    if\
    \ a == 18 then return true end\n    if a == 19 then return true end\n    if a\
    \ == 20 then return true end\n    if a == 21 then return true end\n    if a ==\
    \ 22 then return true end\n    if a == 23 then return true end\n    if a == 24\
    \ then return true end\n    if a == 25 then return true end\n    if a == 26 then\
    \ return true end\n    if a == 27 then return true end\n    if a == 28 then return\
    \ true end\n    if a == 29 then return true end\n    if a == 30 then return true\
    \ end\n    if a == 31 then return true end\n    if a == 32 then return true end\n\
    \    if a == 33 then return true end\n    if a == 34 then return true end\n  \
    \  if a == 35 then return true end\n    if a == 36 then return true end\n    if\
    \ a == 37 then return true end\n    if a == 38 then return true end\n    if a\
    \ == 39 then return true end\n    if a == 40 then return true end\n    if a ==\
    \ 41 then return true end\n    if a == 42 then return true end\n    if a == 43\
    \ then return true end\n    if a == 44 then return true end\n    if a == 45 then\
    \ return true end\n    if a == 46 then return true end\n    if a == 47 then return\
    \ true end\n    if a == 48 then return true end\n    if a == 49 then return true\
    \ end\n    if a == 50 then return true end\n    if a == 51 then return true end\n\
    \    if a == 52 then return true end\n    if a == 53 then return true end\n  \
    \  if a == 54 then return true end\n    if a == 55 then return true end\n    if\
    \ a == 56 then return true end\n    if a == 57 then return true end\n    if a\
    \ == 58 then return true end\n    if a == 59 then return true end\n    if a ==\
    \ 60 then return true end\n    if a == 61 then \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4nn72y4t.lua:88: 'end' expected (to close 'if' at line 73)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- Write your code here.\n  return a:isscalar()\
    \ and (a == a ^ 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsyqbhkl5.lua:13:\
    \ attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpsyqbhkl5.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpsyqbhkl5.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a>0 then\n    if a>=1 and a<=9 then\n\
    \      if a==1 then return true end -- 1 is not a cube\n      if a==2 then return\
    \ false end -- 2 is a cube\n      if a==3 then return true end -- 3 is a cube\n\
    \      if a==4 then return false end -- 4 is a cube\n      if a==5 then return\
    \ true end -- 5 is a cube\n      if a==6 then return false end -- 6 is a cube\n\
    \      if a==7 then return true end -- 7 is a cube\n      if a==8 then return\
    \ false end -- 8 is a cube\n      if a==9 then return true end -- 9 is a cube\n\
    \    elseif a>9 and a<=43 then\n      if a==1 then return false end -- 1 is not\
    \ a cube\n      if a==2 then return true end -- 2 is a cube\n      if a==3 then\
    \ return false end -- 3 is a cube\n      if a==4 then return true end -- 4 is\
    \ a cube\n      if a==5 then return false end -- 5 is a cube\n      if a==6 then\
    \ return true end -- 6 is a cube\n      if a==7 then return false end -- 7 is\
    \ a cube\n      if a==8 then return true end -- 8 is a cube\n      if a==9 then\
    \ return false end -- 9 is a cube\n    elseif a>42 and a<=109 then\n      if a==1\
    \ then return false end -- 1 is not a cube\n      if a==2 then return true end\
    \ -- 2 is a cube\n      if a==3 then return false end -- 3 is a cube\n      if\
    \ a==4 then return true end -- 4 is a cube\n      if a==5 then return false end\
    \ -- 5 is a cube\n      if a==6 then return true end -- 6 is a cube\n      if\
    \ a==7 then return false end -- 7 is a cube\n      if a==8 then return true end\
    \ -- 8 is a cube\n      if a==9 then return false end -- 9 is a cube\n    elseif\
    \ a>108 and a<=201 then\n      if a==1 then return false end -- 1 is not a cube\n\
    \      if a==2 then return true end -- 2 is a cube\n      if a==3 then return\
    \ false end -- 3 is a cube\n      if a==4 then return true end -- 4 is a cube\n\
    \      if a==5 then return false end -- 5 is a cube\n      if a==6 then return\
    \ true end -- 6 is a cube\n      if a==7 then return false end -- 7 is a cube\n\
    \      if a==8 then return true end -- 8 is a cube\n      if a==9 then return\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi2mp8s9a.lua:53: 'end' expected (to close 'if' at line 52)\
    \ near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then\n        return true\n\
    \    elseif abs(a) ~= math.floor(a) then\n        return false\n    end\n    --\
    \ Write your code here\n    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpks98quj8.lua:14:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpks98quj8.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpks98quj8.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a <= 0 then\n    return false\n  end\n\
    \  if a > 63 then\n    return false\n  end\n  if a == 1 then \n    return true\n\
    \  end\n  if a == 3 or a == 5 then\n    return true\n  end\n  if a == 7 then\n\
    \    return true\n  end\n  if a == 9 then\n    return true\n  end\n  if a == 11\
    \ then\n    return true\n  end\n  if a == 13 then\n    return true\n  end\n  if\
    \ a == 15 then\n    return true\n  end\n  if a == 17 then\n    return true\n \
    \ end\n  if a == 19 then\n    return true\n  end\n  if a == 21 then\n    return\
    \ true\n  end\n  if a == 23 then\n    return true\n  end\n  if a == 25 then\n\
    \    return true\n  end\n  if a == 27 then\n    return true\n  end\n  if a ==\
    \ 29 then\n    return true\n  end\n  if a == 31 then\n    return true\n  end\n\
    \  if a == 33 then\n    return true\n  end\n  if a == 35 then\n    return true\n\
    \  end\n  if a == 37 then\n    return true\n  end\n  if a == 39 then\n    return\
    \ true\n  end\n  if a == 41 then\n    return true\n  end\n  if a == 43 then\n\
    \    return true\n  end\n  if a == 45 then\n    return true\n  end\n  if a ==\
    \ 47 then\n    return true\n  end\n  if a == 49 then\n    return true\n  end\n\
    \  if a == 51 then\n    return true\n  end\n  if a == 53 then\n    return true\n\
    \  end\n  if a == 55 then\n    return true\n  end\n  if a == 57 then\n    return\
    \ true\n  end\n  if a == 59 then\n    return true\n  end\n  if a == 61 then\n\
    \    return true\n  end\n  if a == 63 then\n    return true\n  end\n  if a ==\
    \ 65 then\n    return true\n  end\n  if a == 67 then\n    return true\n  end\n\
    \  if a == 69 then\n    return true\n  end\n  if a == 71 then\n    return true\n\
    \  end\n  if a == 73 then\n    return true\n  end\n  if a == 75 then\n    return\
    \ true\n  end\n  if a == 77 then\n    return true\n  end\n  if a == 79 then\n\
    \    return true\n  end\n  if a == 81 then\n    return true\n  end\n  if a ==\
    \ 83 then\n    return true\n  end\n  if a == 85 then\n    return true\n  end\n\
    \  if a == 87 then\n    return true\n  end\n  if a == 89 then\n    return true\n\
    \  end\n  if a == 91 then\n    return true\n  end\n  if a == 93 then\n    return\
    \ true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo8wx89ft.lua:170: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then return false end\n \
    \   if a == 1 then return true end\n    if a > 0 and a <= 16 then return true\
    \ end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf4cm14c_.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpf4cm14c_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  local b = 0\n  for i = 1, 3 do\n    b\
    \ = b * a\n    if b > 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4y9nmdq.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg4y9nmdq.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then\n    io.write(\"The input\
    \ is invalid. \")\n    return false\n  end\n  if a <= 0 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 1 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 2 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 3 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 4 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 5 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 6 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 7 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 8 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 9 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 10 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 11 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 12 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 13 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 14 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 15 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 16 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 17 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 18 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 19 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 20 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 21 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 22 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 23 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 24 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n  end\n  if a == 25 then\n    io.write(\"\
    The input is invalid. \")\n    return false\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp03qp2t2n.lua:120: 'end' expected (to close 'if' at line 116)\
    \ near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a == nil then\n\t\treturn false\n\t\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmai16gxj.lua:29: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 1 then\n        return true\n\
    \    elseif a == 0 then\n        return true\n    elseif a%1 == 0 then\n     \
    \   return false\n    elseif a%1==1 then\n        return iscube(a-1)\n    elseif\
    \ a%1==2 then\n        return iscube(a-2)^iscube(a-3)\n    elseif a%1==3 then\n\
    \        return iscube(a-4)^iscube(a-5)^iscube(a-6)\n    elseif a%1==4 then\n\
    \        return iscube(a-4)^iscube(a-5)^iscube(a-6)^iscube(a-7)\n    elseif a%1==5\
    \ then\n        return iscube(a-4)^iscube(a-5)^iscube(a-6)^iscube(a-7)^iscube(a-8)\n\
    \    elseif a%1==6 then\n        return iscube(a-4)^iscube(a-5)^iscube(a-6)^iscube(a-7)^iscube(a-8)^iscube(a-9)\n\
    \    elseif a%1==7 then\n        return iscube(a-4)^iscube(a-5)^iscube(a-6)^iscube(a-7)^iscube(a-8)^iscube(a-9)^iscube(a-10)\n\
    \    elseif a%1==8 then\n        return iscube(a-4)^iscube(a-5)^iscube(a-6)^iscube(a-7)^iscube(a-8)^iscube(a-9)^iscube(a-10)^iscube(a-11)\n\
    \    elseif a%1==9 then\n        return iscube(a-4)^iscube(a-5)^iscube(a-6)^iscube(a-7)^iscube(a-8)^iscube(a-9)^iscube(a-10)^iscube(a-11)^iscube(a-12)\n\
    \    elseif a%1==10 then\n        return iscube(a-4)^iscube(a-5)^iscube(a-6)^iscube(a-7)^iscube(a-8)^iscube(a-9)^iscube(a-10)^iscube(a-11)^iscube(a-12)^iscube(a-13)\n\
    \    elseif a%1==11 then\n        return iscube(a-4)^iscube(a-5)^iscube(a-6)^iscube(a-7)^iscube(a-8)^iscube(a-9)^iscube(a-10)^iscube(a\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphljsx1o3.lua:40: ')' expected (to close '(' at line 39) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- write your code in here \nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wiwpiru.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp0wiwpiru.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a <= 0 then return false end\n  local\
    \ b = 1\n  while b * b <= a do b = b * 2 + 1 end\n  return a == b * b\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rj47olr.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6rj47olr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   return a^a^a^a^a^a^a^a > 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyoc9_aav.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyoc9_aav.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   if type(a) == number then\n      return\
    \ ((a % 1) == 0) and (a > 0)\n   else\n      return nil\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_3uhx0j.lua:22:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp7_3uhx0j.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tif a == 0 then\n\t\treturn true\n\tend\n\
    \tif a > 0 then\n\t\tif a == 1 then\n\t\t\treturn true\n\t\telse\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\tif a < 0 then\n\t\tif a == -1 then\n\t\t\treturn true\n\
    \t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\tlocal b = math.floor(a)\n\treturn\
    \ iscube(a*a) and iscube(a*b) and iscube(b*b)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxqn3gip.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnxqn3gip.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tlocal s = a*a*a\n\ts = s + s\n\ts = s\
    \ + s\n\ts = s + s\n\treturn (a == 1 and s==1) or (a == 2 and s==4) or (a == 3\
    \ and s==9) or (a == 4 and s==16) or (a == 5 and s==25) or (a == 6 and s==36)\
    \ or (a == 7 and s==49) or (a == 8 and s==64) or (a == 9 and s==81) or (a == 10\
    \ and s==100) or (a == 11 and s==125) or (a == 12 and s==160) or (a == 13 and\
    \ s==200) or (a == 14 and s==250) or (a == 15 and s==300) or (a == 16 and s==350)\
    \ or (a == 17 and s==400) or (a == 18 and s==450) or (a == 19 and s==500) or (a\
    \ == 20 and s==550) or (a == 21 and s==600) or (a == 22 and s==650) or (a == 23\
    \ and s==700) or (a == 24 and s==750) or (a == 25 and s==800) or (a == 26 and\
    \ s==850) or (a == 27 and s==900) or (a == 28 and s==950) or (a == 29 and s==1000)\
    \ or (a == 30 and s==1050) or (a == 31 and s==1100) or (a == 32 and s==1150) or\
    \ (a == 33 and s==1200) or (a == 34 and s==1250) or (a == 35 and s==1300) or (a\
    \ == 36 and s==1350) or (a == 37 and s==1400) or (a == 38 and s==1450) or (a ==\
    \ 39 and s==1500) or (a == 40 and s==1550) or (a == 41 and s==1600) or (a == 42\
    \ and s==1650) or (a == 43 and s==1700) or (a == 44 and s==1750) or (a == 45 and\
    \ s==1800) or (a == 46 and s==1850) or (a == 47 and s==1900) or (a == 48 and s==1950)\
    \ or (a == 49 and s==2000) or (a == 50 and s==2050) or (a == 51 and s==2100) or\
    \ (a == 52 and s==2150) or (a == 53 and s==2200) or (a == 54 and s==2250) or (a\
    \ == 55 and s==2300) or (a == 56 and s==2350) or (a == 57 and s==2400) or (a ==\
    \ 58 and s==2450) or (a == 59 and s==2500) or (a == 60 and s==2550) or (a == 61\
    \ and s==2600) or (a == 62 and s==2650) or (a == 63 and s==2700) or (a == 64 and\
    \ s==2750) or (a == 65 and s==2800) or (a == 66 and s==2850\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7yyu1y01.lua:17: ')' expected (to close '(' at line 16) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\t-- Write code here.\n\treturn a % 3 ==\
    \ 0 and a % 2 == 0 and a % 3 == 0 and a % 2 == 0 and a % 3 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb035g1s.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqb035g1s.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    local m = a^a^a\n    local d = m*(m+1)\n\
    \    return d == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_r5o6r5.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn_r5o6r5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   if a == 0 then\n      return true\n\
    \   end\n   if a % 3 == 0 then\n      return true\n   end\n   if a/3 % 3 == 0\
    \ then\n      return true\n   end\n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbk8od6uy.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbk8od6uy.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then\n        return true\n\
    \    end\n    local n = 1\n    while n <= a do\n        if a%n == 0 then\n   \
    \         return false\n        end\n        n = 3*n + 1\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gg9eupn.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3gg9eupn.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then\n        return true\n\
    \    else\n        if a <= 0 or a == 1 then\n            return false\n      \
    \  else\n            return true\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk3y1ztdj.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk3y1ztdj.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then\n    return true\n  elseif\
    \ a == 1 then\n    return true\n  elseif a == -1 then\n    return true\n  elseif\
    \ a == 2 then\n    return true\n  elseif a == 4 then\n    return true\n  elseif\
    \ a == 8 then\n    return true\n  elseif a == 16 then\n    return true\n  elseif\
    \ a == 64 then\n    return true\n  elseif a == -1 then\n    return true\n  elseif\
    \ a == 180 then\n    return false\n  else\n    return false\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdu6hbpvf.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdu6hbpvf.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n   -- Write your code here.\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3vr_aqd.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpa3vr_aqd.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\tlocal b=0\n\tfor i=1,3 do\n\t\tb=b*a%i+a\n\
    \t\tif b==0 then return false end\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7e5jugtk.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7e5jugtk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
