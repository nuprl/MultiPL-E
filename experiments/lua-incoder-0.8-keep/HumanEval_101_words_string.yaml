name: HumanEval_101_words_string
language: lua
prompt: "-- You will be given a string of words separated by commas or spaces. Your\
  \ task is\n-- to split the string into words and return an array of the words.\n\
  -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"\
  name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five, six\"\
  ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal function\
  \ words_string(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
  \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
  \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One',\
  \ 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi, my\
  \ name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,\
  \ four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),\
  \ {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local words = s:gmatch(\"[^,]+\")\n  return words\nend", "  s = s:gsub(\"\
    ([^,]+)\", function (s) return s.split() end)\n  return s[#s]\nend", "\t-- Your\
    \ code here!\n\tassert(type(s) == \"string\", \"input must be string\")\n\treturn\
    \ {}\nend", "   -- Your code goes here!\nend", "  return string.gmatch(s, \"%w+\"\
    ) -- Return a list of words\nend\n</cell>\n<cell>", "  local words = {}\n  for\
    \ word in string.gmatch(s, \"[^,]+\") do\n    table.insert(words, word)\n  end\n\
    \  return words\nend", "  return string.gsub(s, \"([, ])\", \" \")\nend", "  \
    \ local words = {}\n   for w in string.gmatch(s, \",?(%S+)\") do\n      table.insert(words,\
    \ w)\n   end\n   return words\nend", "  return table.unpack(s:gmatch(\"%w+\"))\n\
    end", "  -- Initialize the array of words\n  local words = {}", "    local words\
    \ = s.trim():gsub(\"[^a-zA-Z ]\", \" \"):gsub(\"[,\\\\s]+\", \" \")\n    return\
    \ words:gsub(\"\\\\s+\", \" \"):gsub(\"^\\\\s+\", \"\"):gsub(\"\\\\s+$\", \"\"\
    )\nend", "  -- Return the array of words in the string\n  -- Input s:  \"Hi, \
    \ my  name  is  John\"\n  -- Output: [\"Hi\",\"my\",\"name\",\"is\",\"John\"]\n\
    \  local words = string.gmatch(s, \"[%w\\s]+\")\n  return words\nend", "    --\
    \ Your code here\n    return s\nend", "    local words = string.gsub(s,\" \",\"\
    \")\n    return string.gsub(words,\",\",\"\")\nend", "  s = string.gsub(s, \"\
    [, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(s, \"[, ]\", \", \")\n  s = string.gsub(s,\
    \ \"[, ]+\", \", \")\n  s = string.gsub(", "    local words = \"\"\n    local\
    \ space = 0\n    for i, v in ipairs(string.gmatch(s, \"[^,]+\")) do\n        if\
    \ v == \",\" then\n            words = words .. \" \"\n        elseif v == \"\
    \ \" then\n            space = space + 1\n        else\n            words = words\
    \ .. v\n        end\n    end\n    if space == 0 then\n        words = string.gmatch(s,\
    \ \"[^ ]+\")\n    end\n    return words\nend", "  local words = { }\n  local pos\
    \ = 1\n  local last_space = -1\n  for c in s:gmatch(\"%S+\") do\n    local next_space\
    \ = c:find(\" \", pos)\n    if next_space ~= last_space then\n      table.insert(words,\
    \ c:sub(1, next_space - 1))\n    end\n    pos = next_space + 1\n    last_space\
    \ = c\n  end\n  table.insert(words, s:sub(1, pos))\n  return words\nend", "  return\
    \ s:match(\"(%w+)\")\nend", "  -- Write your code here\n  local result = {}\n\
    \  for _, v in pairs(s) do\n    if v ~= \",\" then\n      result[#result + 1]\
    \ = v\n    end\n  end\n  return result\nend", "    -- Convert the string to a\
    \ table\n    local tbl = s:gmatch(\"([^,]+), *([^,]+), *([^,]+), *([^,]+), *([^,]+),\
    \ *([^,]+)\")", "  local words = string.gmatch(s, \" \") -- Get all the words\
    \ from the given string\n  return words -- Return all the words\nend", "  local\
    \ words = \"\"\n  local word_list = {}\n  for char in s:gmatch(\"[%z():.-]+\"\
    ) do\n    words = words .. char\n    word_list[#word_list + 1] = (word_list[#word_list]\
    \ + 1) / 2\n  end\n  return word_list\nend", "  s = s:gsub(\"(%w+)(%w+)\", function(w1,\
    \ w2)\n    return w1 + w2\n  end)\n  return s:gmatch(\"%w+,?\")\nend", "  return\
    \ s:gmatch('[^,]+')\nend", "  local words = string.gmatch(s, \"[^,]+\")\n  for\
    \ i = 1, #words do\n    words[i] = words[i]:lower()\n  end\n  return words\nend",
  "\tlocal words = string.gmatch(s, \"([^ ]+)\") -- [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\n\treturn words\nend", "    -- Check for a valid\
    \ input\n    if s == nil then\n        return nil, \"Invalid input\"\n    end",
  "  return s:gsub(\"(%w+)\", function (c) return string.lower(c) end):gsub(\"(.)\"\
    , function (c) return string.upper(c) end):gsub(\"%S+\", function (c) return string.upper(c)\
    \ end)\nend", "    local result = {}\n    s = s:gsub(\"([^\" .. table_concat(_ESCAPES,\
    \ \",\") .. \"]+)\", function(c) result[#result + 1] = c end)\n    return result\n\
    end", "  local words = { }\n  for word in string.gmatch(s, \",([^,]+)\") do\n\
    \    table.insert(words, word)\n  end\n  for word in string.gmatch(s, \" \") do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "\t-- Your code here\n\
    \tlocal words = string.gsub(s, '[^ ]+', '')\n\tlocal arr = {}\n\tfor i=1, #words\
    \ do\n\t\ttable.insert(arr, words[i])\n\tend\n\treturn arr\nend", "  return string.split(s,\
    \ \"[^, ]+\")\nend", "  local words = \"\"\n  local i = 1\n  while true do\n \
    \   s = s:gsub(\"([^,]+)(.+)\", \"%1 %2\")\n    if not s then\n      break\n \
    \   end\n    words = words .. s..\" \"\n    i = i + 1\n  end\n  return words:gsub(\"\
    ^ \", \"\"):gsub(\"$ \", \"\")\nend", "   -- Your code here\n   return nil\nend",
  "  local words = {}\n  for word in string.gmatch(s, \"[^,]+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "    local words = {}\n    if s == nil or\
    \ s == \"\" then return end\n    local pattern = \"[^,]+\"\n    table.insert(words,\
    \ table.split(s, \",\"))\n    for i = 1, #words do\n        table.insert(words,\
    \ table.split(words[i], pattern))\n    end\n    return words\nend", "\t-- Split\
    \ the string into words.\n\tlocal words = {}\n\tfor word in string.gmatch(s, \"\
    ([^,]+)\") do\n\t\ttable.insert(words, word)\n\tend\n\t-- Return the words.\n\t\
    return words\nend", "   -- Return the array of words.\n   return unpack(s:gmatch(\"\
    [^,]+\")) -- Use gmatch to match non-commas.\nend", "  local words = s:match(\"\
    (%S+)\")\n  if words then\n    return words\n  else\n    return nil\n  end\nend",
  "  local words\n  if s ~= nil then\n    words = nil\n    local ts = string.gsub(s,\
    \ \"%w+\", \"\")\n    words = ts:gsub(\",\", \" \"):gsub(\"^ \", \"\"):gsub(\"\
    $ \", \"\")\n  else\n    words = \"nil\"\n  end\n  return words\nend", "  -- Your\
    \ code here\nend", "  -- Your code here\n  local function split(s, x)\n  \tlocal\
    \ function word(...)\n      local v = {}\n      for i = 1, select('#', ...) do\n\
    \        table.insert(v, select(\"#\", ...))\n      end\n      return v\n    end\n\
    \  \tlocal words = split(s, x)\n  \treturn words\n  end", "  local words = { }\n\
    \  local i = 0\n  repeat\n    local c = s[i]\n    if c == \",\" then\n      table.insert(words,\
    \ { })\n    elseif c ~= \" \" then\n      table.insert(words, string.sub(s, i,\
    \ i - 1))\n    end\n    i = i + 1\n  until i <= #s\n  return words\nend", "  \
    \  -- Your code goes here\nend", "\tlocal splitter = (s == nil and \",\" or s)\n\
    \ts = string.gsub(s, \"%s+\", \" \")\n\ts = string.gsub(s, \"[,%s]+\", \" \")\n\
    \ts = string.gsub(s, \"[ ]+\", \" \")\n\ts = string.gsub(s, \"[,]+\", \" \")\n\
    \ts = string.gsub(s, \"[\\n]+\", \" \")\n\treturn string.gsplit(s, splitter)\n\
    end\n</cell>\n<cell>", "\ts = s:upper()\n\tlocal words = \"\"\n\tlocal word =\
    \ \"\"\n\tlocal spaces = false\n\tfor char in s:gmatch(\"[%W, %S]+\") do\n\t\t\
    if word:len() == 0 and spaces == false then\n\t\t\tspace = char\n\t\t\tspaces\
    \ = true\n\t\telseif spaces then\n\t\t\twords = word..space\n\t\t\tword = \"\"\
    \n\t\t\tspaces = false\n\t\telse\n\t\t\tword = word..char\n\t\tend\n\tend\n\t\
    if spaces then\n\t\twords = word..space\n\tend\n\treturn words:gsub(\"%S+\", \"\
    \ \")\nend", "  assert(type(s) == 'string')\n  local word_table = nil\n  local\
    \ line_counter = 0\n  local word_counter = 0\n  local spaces = 0\n  local current_word\
    \ = ''\n  local space = \"\"\n  local i = 0\n  local j = 0\n  local len = #s\n\
    \  local result", "  -- Your code here\n  return \nend", "  -- Your code here\n\
    \  \nend", "  -- The list that holds our words\n  local words = {}\n  -- We need\
    \ a string to split into words\n  local str_split = torch.Tensor(s)\n  -- The\
    \ number of words, and the size of the vectors that we have\n  local num_words\
    \ = str_split.size(1)\n  -- We'll go through each word individually\n  for i =\
    \ 1, num_words do\n    -- If the word is longer than 1 character\n    if str_split:size(i)\
    \ > 1 then\n      -- We don't want words like 'I' or 'a'\n      if str_split:size(i)\
    \ ~= 1 then\n        -- The actual word\n        local word = str_split:index(1,\
    \ i)\n        -- If the word is just whitespace then we skip it\n        if word\
    \ == \"\" then\n          -- This is how we know a word is finished\n        \
    \  words[i] = nil\n        else\n          -- We add it to the words vector\n\
    \          table.insert(words, word)\n        end\n      end\n    end\n  end\n\
    \  return words\nend", "    local words = s:gsub(\"[,| ]+\", \" \"):gsub(\"^ *|\
    \ *$\", nil)\n    words = words and words:gsplit(\" \") or nil\n    return words\n\
    end", "    -- Your code here\nend", "  local words = string.gmatch(s, '([^,]+)')\n\
    \  if words then\n    for i = 1, #words - 1 do\n      words[i] = words[i]\n  \
    \  end\n  end\n  return words\nend", "    local words = string.gmatch(s, \"([^,]+)\"\
    ) -- split string into words\n    if words then\n        words = words[1] -- remove\
    \ first word (empty)\n    end\n    return words\nend", "  local w = {}\n  for\
    \ w in string.gmatch(s, \"[^,]+\") do end\n  return w\nend", "  return string.gsub(s,\
    \ '([^%s]+)' % table.concat({',', ' '}, ','), '%(%1)+', '\\0')\nend", "    local\
    \ words = { }\n    \n    for w in string.gmatch(s, \"([^,]+)\") do\n        table.insert(words,\
    \ w)\n    end", "  return string.gmatch(s, \",?([^,]*)\")\nend", "  local words\
    \ = string.gmatch(s, \"[^,]+\")\n  words = {[#words]:gsub(\"^%s*\", \"\"), words}\n\
    \  return words\nend", "  local str = {}\n  for w in string.gmatch(s, \"([^,]+)(.*)\"\
    ) do\n    table.insert(str, w)\n  end\n  return str\nend", '    local splitter
    = string.gmatch', "\tlocal words = string.gsub(s, \"[^ ]+\", \"\")\n\twords =\
    \ string.gsub(words, \", \", \" \")\n\treturn words\nend", "  -- Your code here\n\
    end", "    local words = string.split(s, \" \")\n    table.sort(words)\n    return\
    \ words\nend", "  -- Write your code here\nend", "  local words = s.split(', ')\
    \ or s.split(' ')\n  return words\nend", "  -- Your code here!\nend", "  -- Your\
    \ code here\n  local words = string.gmatch(s, \",+\")\n  return words\nend", " \
    \ -- Your code here\nend", "\t-- Your code here\n\treturn {}\nend", "  assert(type(s)\
    \ == \"string\")\n  s = s:trim()\n  s = s:gsub(\"%w+\", \"\"):gsub(\"%d+\", \"\
    \")\n  s = s:gsub(\"%d+\", \"\")\n  s = s:gsub(\"%w+\", \"\")\n  s = s:gsub(\"\
    %s+\", \"\")\n  return s:gsub(\",+\", \" \")\nend", "\tlocal words = { }\n\tfor\
    \ word in s:gmatch(\"[%w-.,]+\") do\n\t\ttable.insert(words, word)\n\tend\n\t\
    return words\nend", "  s = s:gsub(\"[%a]+\", \" \")\n  s = s.split(', ')\n  return\
    \ s\nend", "  assert(type(s) == 'string', 'Input must be a string.')\n  local\
    \ words = string.gsub(s, '[,[\\s]+]', '').split('\\n')\n  local words_list = {}\n\
    \  for _, word in pairs(words) do\n    words_list[#words_list+1] = word\n  end\n\
    \  return words_list\nend", "\tassert(type(s) == \"string\")\n\tassert(s ~= \"\
    \")\n\tlocal words = string.gmatch(s, \"(%w+[,.?!;:])\")\n\treturn words\nend",
  "    return table.remove_by_ref(s:gmatch(\"[^ ]+\"), nil)\nend", "    local words\
    \ = {}\n    local word_list = {}\n    for _,word in string.gmatch(s, \"[^,]+\"\
    ) do\n        table.insert(word_list, word)\n    end\n    return word_list\nend",
  "\tlocal words = s.Split(\" ,\")\n\ttable.insert(words, nil)\n\treturn words\nend",
  "  -- Your code here\n  \n  local words = s..\",\"\n  local table = {}\n  for i\
    \ = 1, #words do\n    table[i] = words[i]\n  end\n  return table\nend", "  local\
    \ words = string.gmatch(s, \"[^%s]+\")\n  if words == nil then return {s} end\n\
    \  table.sort(words)\n  return words\nend", "  -- Your code here!\nend", "  local\
    \ word_array = s:gmatch(\"[%S]+\")\n  -- print(word_array, \"\\n\")\n  return\
    \ word_array\nend", "  -- Your code here\nend", "    local words = {}\n    local\
    \ words = string.gmatch(s, \",\") or {}\n    words = words or string.gmatch(s,\
    \ \" \") or {}\n    for i = 1, #words do\n        words[i] = string.gsub(words[i],\
    \ \" \", \"\")\n    end\n    return words\nend", "  return string.split(s)\nend",
  "  local words = \"\"\n  for w in string.gmatch(s, \"[^, ]+\") do\n    words = words\
    \ .. w .. \" \"\n  end\n  words = words:gsub(\"^ \", \"\")\n  words = words:gsub(\"\
    ^ \", \"\")\n  words = words:gsub(\"^ \", \"\")\n  words = words:gsub(\"^ \",\
    \ \"\")\n  words = words:gsub(\"^ \", \"\")\n  words = words:gsub(\"^ \", \"\"\
    )\n  words = words:gsub(\"^ \", \"\")\n  words = words:gsub(\"^ \", \"\")\n  words\
    \ = words:gsub(\"^ \", \"\")\n  words = words:gsub(\"^ \", \"\")\n  return words\n\
    end", "\ts = s:gsub(\"([^,]+)\",function(x)\n\t\treturn x:lower()\n\tend)\n\t\
    s = s:gsub(\"[,]+\",\" \")\n\tlocal words = s:split(\" \")\n\tfor i=1,#words do\n\
    \t\twords[i] = words[i]:lower()\n\tend\n\treturn words\nend", "  -- Your code\
    \ here!\n  return nil\nend", "  -- Initialize your variables here.\n  local words\
    \ = {}", "   local words = {}\n   for w in string.gmatch(s, \",?([^,]+)(,.*)?\"\
    ) do\n      table.insert(words, w)\n   end\n   return words\nend", "\ts = string.gsub(s,\
    \ '([%w,]+)', '%1 ')\n\ts = string.gsub(s, '([%w'..string.gsub(string.gsub(',',\
    \ ''), '%[%w]', string.quote)..'-%w])', string.quote)\n\ts = string.gsub(s, '([%w']..string.gsub(string.gsub(',',\
    \ ''), '%[%w]', string.quote)..'-%w])', string.quote)\n\tlocal _, words = string.gfind(s,\
    \ '[%w]')\n\treturn words\nend", "\tlocal split = {}\n\tfor word in string.gmatch(s,\
    \ \"[^,]+\") do\n\t\ttable.insert(split, word)\n\tend\n\treturn split\nend", " \
    \ local words = {}\n  for word in string.gmatch(s, \"[^,]+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = \"\"\n  for w in s:gmatch(\"\
    [%S]+\") do\n    words = words .. w .. \", \"\n  end\n  return words:sub(1, -2)\n\
    end", "  local words = \"\"\n  local word_count = 1\n  -- Iterate through the\
    \ string and record all the words\n  for word in string.gmatch(s, \",*\") do\n\
    \    words = words .. word .. \" \"\n    word_count = word_count + 1\n  end\n\
    \  -- Strip last character\n  if string.len(s) > 0 then\n    words = string.sub(words,\
    \ 1, string.len(s) - 1)\n  end\n  return string.gmatch(words, \" \") -- Return\
    \ an array of all the words\nend", "  local words = {}\n  for word in s:gmatch(\"\
    [^,]+\") do words[#words + 1] = word end\n  return words\nend", "   -- Write your\
    \ function here\n   assert(s ~= nil, 'The argument s is nil.')\n   assert(s ~=\
    \ '', 'The argument s is an empty string.')\n   return string.gsub(s,' ',''):gsub(',+','\
    \ ')\nend", "  s = string.gsub(s, '[%[(%w?),]^%]', function(x)\n    local words\
    \ = { }\n    table.insert(words, x)\n    local last = x\n    if last:len() ==\
    \ 1 then\n      local word = last:lower()\n      -- We want strings surrounded\
    \ by letters.\n      if word:byte() > 64 and word:byte() < 128 then\n        --\
    \ If the first letter is a letter or a number\n        if word:byte() >= 32 and\
    \ word:byte() <= 126 then\n          -- If the last letter is a letter or a number\n\
    \          if word:byte() >= 32 and word:byte() <= 126 then\n            table.insert(words,\
    \ word:sub(1, word:len() - 1))\n          else\n            table.insert(words,\
    \ word)\n          end\n        else\n          -- If it's the only letter\n \
    \         if word:byte() >= 32 and word:byte() <= 126 then\n            table.insert(words,\
    \ word:sub(1, word:len() - 1))\n          else\n            table.insert(words,\
    \ last)\n          end\n        end\n      end\n    end\n    return table.concat(words)\n\
    \  end, 'g')\n  return string.gsub(s, '[,]', ' ')\nend", "  local list = s:gmatch(\"\
    ([^,]+)\")\n  return list\nend", "    local word_list = {}\n    for w in s:gmatch('(%w+)(%S+)')\
    \ do\n        word_list[#word_list + 1] = {\n            string = w,\n       \
    \     number = tonumber(w)\n        }\n    end\n    return word_list\nend", " \
    \ local words = s.split(\", \")\n  return words\nend\n</code>\nAnd lastly your\
    \ function to call words_string in your main function\n<code>", "    local result\
    \ = {}\n    local i, j = 1, 1\n    while j <= #s do\n        if s[i] ~= ' ' and\
    \ s[i] ~= ',' then\n            result[#result + 1] = s[i]\n        end\n    \
    \    i = i + 1\n        j = j + 1\n    end\n    return result\nend", "  s = string.gsub(s,\
    \ \"[%!.,]+\", \" \")\n  local words = {}\n  local last = \"\"\n  for i = 1, string.len(s)\
    \ do\n    if s[i] ~= \" \" then\n      last = s[i]\n      words[#words + 1] =\
    \ last\n    elseif s[i] == \" \" then\n      words[#words + 1] = last .. \"\\\
    n\"\n      last = \"\"\n    end\n  end\n  return words\nend", "  -- Your code\
    \ goes here\nend", "  s = string.gsub(s, \"[%[(%w+)%)]]\", function(w) return\
    \ w end)\n  return string.gsub(s, \",\", \" \") or \"\"\nend\n</textarea></form>",
  "  -- Your code here\nend", "  local words = {}\n  for w in string.gmatch(s, \"\
    ([^,]+)(,|$)\") do\n    table.insert(words, w)\n  end\n  return words\nend", "\t\
    local words = { }\n\t\n\ts = string.gsub(s, \"([,\\\\s]+)\", function (x)\n\t\t\
    table.insert(words, x:lower())\n\tend)", "  s = string.gsub(s, \"%w+\", \" \"\
    );\n  s = string.gsub(s, \"%s\", \" \");\n  s = string.gsub(s, \"%s+\", \" \"\
    );\n  s = string.gsub(s, \"[,]+\", \" \");\n  s = string.gsub(s, \"[,]\", \" \"\
    );\n  s = string.gsub(s, \"[,]$\", \" \");\n  return string.gsub(s, \"[,]+\",\
    \ \" \");\nend", "  s = string.gsub(s, \"[,\\\\s]+\", \" \")\n  return string.gmatch(s,\
    \ \"[^%s]+\")\nend", "  local words = { }\n  for word in string.gmatch(s, \"([^,]+)\"\
    ) do\n    table.insert(words, word)\n  end\n  return words\nend", "    local words\
    \ = s.Split(\" \")\n    return words\nend", "  local words = s:gmatch('([^,]*)')\n\
    \  return words\nend", "\t-- Return the array of words in the string as a list.\n\
    \tlocal words = { }\n\tfor word in string.gmatch(s, \"[%w ,]+\") do table.insert(words,\
    \ word) end\n\treturn words\nend", "  -- Your code here\n  return nil\nend", " \
    \ return s:gsub(\"([^,]+)\", \" \"):gsub(\"([^ ,]+)\", \" \"):trim()\nend", "\t\
    local words = s:match('^[%w-.,]+%w$') or return nil\n\treturn words:gsub(',',\
    \ ' '):gsub(' ', ' ')\nend", "  s = string.gsub(s, \"[, ]+\", \",\")\n  return\
    \ string.gmatch(s, \"[^,]+\")\nend", "  s = s:lower()\n  local words = s:gmatch(\"\
    \ %s*(.-)%s*\", true)\n  return words\nend", "  -- The order of the words doesn't\
    \ matter, so split on \",\" or \" \" first\n  -- The order of the words doesn't\
    \ matter, so split on \",\" or \" \" first\n  s = s:gsub(\",\", \" \"):gsub(\"\
    \ \", \",\")\n  -- Split on \", \" (which separates each word)\n  local words\
    \ = s:gsub(\"%w+\", function(w)\n    w = w:lower()\n    local words = { w }\n\
    \    return table.concat(words, \"_\")\n  end):gsub(\"_%w\", function(w)\n   \
    \ w = w:lower()\n    table.insert(words, w)\n    return \"\"\n  end)\n  return\
    \ words\nend", "\ts = s:lower() or \"\"\n\tlocal words = s.split (\",\")\n\treturn\
    \ words\nend", "  local words = s\n  local delim = \", \"\n  -- Replace commas\
    \ and trim spaces\n  -- Note: This replaces multiple spaces with a single space\n\
    \  -- But it also replaces commas and spaces within words\n  -- For example, if\
    \ we pass in \"Hello World\" as the input,\n  -- This returns: \"HelloWorld\"\n\
    \  words = string.gsub(words, \"[\" .. delim .. \"]+\", \" \")\n  -- Replace multiple\
    \ spaces with single space\n  -- This trims all leading and trailing spaces but\
    \ preserves the multiple spaces\n  -- For example, if we pass in \"   Hello World\"\
    \ as the input,\n  -- This returns: \"Hello World\"\n  words = string.gsub(words,\
    \ \"[\" .. \" \" .. \"]+\", \" \")\n  -- Split words by commas\n  -- This splits\
    \ words by commas\n  -- For example, if we pass in \"One, two, three, four, five,\
    \ six\" as the input,\n  -- This returns: [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  words = string.gsub(words, \" \" .. delim .. \",\", \"\
    , \")\n  -- Split words by spaces\n  -- This splits words by spaces\n  -- For\
    \ example, if we pass in \"One two three four five six\" as the input,\n  -- This\
    \ returns: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words\
    \ = string.gsub(words, \"[\" .. delim .. \"]+\", \" \")\n  -- Split words by one\
    \ or more spaces\n  -- This splits words by one or more spaces\n  -- For example,\
    \ if we pass in \"One two three four five six\" as the input,\n  -- This returns:\
    \ [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words = string.gsub(words,\
    \ \" \" .. delim .. \"?\", \", \")\n  -- Split words by one or more commas\n \
    \ -- This splits words by one or more commas\n  -- For example, if we pass in\
    \ \"One, two, three, four, five, six\" as the input,\n  -- This returns: [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words = string.gsub(words,\
    \ \" \" .. delim .. \",?\", \", \")\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"([^ ,]+)\", nil)\n  if #words == 0 then\n    words = {}\n  end\n  return words\n\
    end", "    local words = string.gmatch(s, '([^,]+)')\n    return words\nend",
  "\tlocal str = {}\n\tfor str in string.gmatch(s, '[^ ]+') do\n\t\ttable.insert(str,\
    \ str)\n\tend\n\treturn str\nend", "  local function explode(str)\n    local words\
    \ = {}\n    local last = 0\n    while true do\n      local idx = string.find(str,\
    \ \",\", last)\n      if idx then\n        table.insert(words, str:sub(last, idx-1))\n\
    \        last = idx + 1\n      else\n        table.insert(words, str:sub(last))\n\
    \        return words\n      end\n    end\n  end", "  -- your code goes here\n\
    end", "    local words\n    if string.find(s, \",\") then\n        words = string.gsub(s,\
    \ \"([^ ]+)\", \" \")\n    else\n        words = string.gsub(s, \"([^,]+)\", \"\
    \ \")\n    end\n    words = string.gsub(words, \"[ ]+\", \" \")\n    words = string.gsub(words,\
    \ \"[,]+\", \" \")\n    return words\nend", "  -- Your code here\nend", "\tlocal\
    \ words = string.gsub(s, \"[,( )]\", \"\")\n\twords = string.gsub(words, \"[%a][%a]+\"\
    , \"%a\")\n\treturn string.gsub(words, \"[%w]\", function(x)\n\t\treturn string.gsub(x,\
    \ \"([%w_.%-]*)(%.*)\", function(a, b, c) return b..string.lower(c) end)\n\tend)\n\
    end", "\tlocal words = string.gmatch(s, \"[^,]+\")\n\tfor i = 1, #words do\n\t\
    \twords[i] = words[i] or \"\"\n\tend\n\treturn words\nend", "  local words = {}\n\
    \  for word in string.gmatch(s, \"[^,]+\") do\n    table.insert(words, word)\n\
    \  end\n  return words\nend", "  return string.gmatch(s, \" ?([%s]+)\", true)\n\
    end", "  local function words(str, list)\n    list = list or {}\n    str:gsub('([^%s]+)',\
    \ function(c) list:insert(c) end)\n    return list\n  end\n  \n  local list =\
    \ {}\n  local last_comma = nil\n  s:gsub('([^%s]+)', function(c) last_comma =\
    \ c end)\n  last_comma:gsub('(,|$)', function(c) list:insert(c) end)\n  return\
    \ list\nend", '  s = s:gsub("[,\\s]", "")', "  s = s:gsub(\"(^|[, ])([^,]+)($|[,\
    \ ])\", \"%2\") -- remove commas and spaces from string\n  s = s:gsub(\"[, ]+\"\
    , \" \") -- split by space\n  return string.gmatch(s, \"([^%s]+)\") -- split by\
    \ non-space\nend", "    -- Remove whitespace\n    s = gsub(s, \" \", \"\")", " \
    \ local words = {}\n  for word in string.gmatch(s, \"([^,]+?)\", 1) do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "\tlocal words\n\t-- Explode string into\
    \ words\n\twords = string.explode(\",\", s)\n\t-- Return array of words\n\treturn\
    \ words\nend", "    -- Remove spaces and commas from string\n    s = s:gsub('%w+[,.]',\
    \ '') -- Remove any words with commas and periods\n    \n    -- Split into words\n\
    \    local words = {}\n    s:gsub('([^,.]+)[,.]?', function(word) table.insert(words,\
    \ word) end)\n    \n    return words\nend", "  -- Your code here\n  return s\n\
    end", "  local words = {}\n  local delim = \",\"\n  for w in s:gmatch(\"([^\"\
    \ .. delim .. \"]+)\") do\n    table.insert(words, w)\n  end\n  return words\n\
    end", "  local words = \"\"\n  for w in string.gmatch(s, \"([^,]+)\") do\n   \
    \ words = words .. w .. \" \"\n  end\n  return words:gsub(\"^ +\", \"\"):gsub(\"\
    $ +\", \"\")\nend", "    local words = s.Split(\" ,\")\n    words[#words]:sub(1,\
    \ #words[#words]-1)\n    return words\nend", "\t-- Your code here\n\treturn {}\n\
    end", "  local words = \"\"\n  -- In Lua 5.2 string.gmatch returns an array of\
    \ tables.\n  for w in string.gmatch(s, \"[%w()]+\") do\n    words = words .. w\
    \ .. \" \"\n  end\n  return words:match(\"^%s*(%d+)%s*$\")\nend", "  -- Your code\
    \ here!\n  local words = string.split(s, \",\")\n  return words\nend", "  -- +++your\
    \ code here+++\n  local words = string.gmatch(s, \" [%w_,]+\")\n  return words\n\
    end", "  local words = {}\n  for _, word in string.gmatch(s, \"[^, ]+\") do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  -- Return the\
    \ string as a list of words.\n  -- The list will contain only non-empty strings.\n\
    \  -- The result will be sorted.\n  return table.sort(\n    string.gmatch (\n\
    \      s,\n      \"[^,]+\"\n    ))\nend", "  -- Your code here\n  local s = string.gsub(s,\
    \ \"[, ]+\", \" \")\n  return string.gmatch(s, \"[^,]+\")\nend", "  local words\
    \ = s:gmatch(\"(%w+)\")\n  local new_words = {}\n  for i = 1, #words do\n    new_words[#new_words\
    \ + 1] = words[i]\n  end\n  return new_words\nend", "  -- Your code here\n  local\
    \ words = string.gsub(s, \" \", \"\"):gsub(\",\", \"<w>\"):gsub(\"<w>\", \"%w\"\
    ):gsub(\"%w\", \"%w\")\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"[%w'-]+\")\n  return words\nend", "    local words = s.split(\", \")\n   \
    \ local words = {}\n    for _, word in pairs(words) do\n        words[#words +\
    \ 1] = word\n    end\n    return words\nend", "    local a = {}\n    for word\
    \ in string.gmatch(s, \"([^,]+)(,|$)\") do\n        a[#a + 1] = word\n    end\n\
    \    return a\nend", "  return s.split( ',' ) or s.split( ' ' ) \nend", "   local\
    \ words = { }\n   for w in string.gmatch(s, \"([^,]+)|([^ ]+)\") do\n      if\
    \ w ~= \"\" then\n         table.insert(words, w)\n      end\n   end\n   return\
    \ words\nend\n</code>\n<|/ a |>\n<| a dscore=0 tags=lua-table,lua |>\nI guess\
    \ this is what you want:\n<code>", "  -- Write your function here!\n  return nil\n\
    end", "  return string.gmatch(s, \"([^,]+)\")\nend", "  -- Write your code here\n\
    \  return nil\nend", "  local words = {}\n  for word in string.gmatch(s, \"[^,]+\"\
    ) do table.insert(words, word) end\n  return words\nend", "    local words = s.split(\"\
    [, ]+\")\n    table.insert(words, \"\")\n    return words\nend", "  local result\
    \ = {}\n  for s in string.gmatch(s, \"[^,]+\") do\n    table.insert(result, s)\n\
    \  end\n  return result\nend", "\t-- Split string on commas.\n\t-- Split result\
    \ to words (remove commas)\n\t-- Rejoin word with commas\n\ts = s:gsub(',', '\
    \ ', 'g')\n\ts = s:gsub(' ', ' ')\n\treturn s:gsub(' %w+', ' %1')\nend", "\t--\
    \ Your code here\n\treturn nil\nend", "  local words = {}\n  for word in string.gmatch(s,\
    \ \"[^,]+\") do\n    table.insert(words, word)\n  end\n  return words\nend", '  s
    = string.gsub(s, "[%z %,]+", " ")', "\tlocal words = { }\n\tfor _, word in string.gmatch(s,\
    \ \"([^,]+)(,|$)\") do\n\t\ttable.insert(words, word)\n\tend\n\treturn words\n\
    end", "\tlocal words = { }\n\tfor word in s:gmatch(\"[^ ]+\") do table.insert(words,\
    \ word) end\n\treturn words\nend\n</cell>\n<text>\nProblem 10\nComplete the function\
    \ below that takes a list of numbers and returns the sum of the numbers.", " \
    \ local strArr = string.split(s, \",\")\n  local arr = {nil}\n  for i = 1, #strArr\
    \ do\n    table.insert(arr, strArr[i])\n  end\n  return arr\nend", "    local\
    \ words = string.gmatch(s, \"([^,]+)\", nil, \"c\")\n    if words then\n     \
    \   return words\n    end\n    return nil\nend", "  s = string.gsub(s, \"[,\\\\\
    s]\", \"\")\n  return string.gmatch(s, \"[^%s]+\")\nend", "\tlocal words = s.Words(2,\
    \ #s - 1)\n\tassert(#words > 0, \"Invalid input: empty string\")\n\treturn words\n\
    end", "   s = string.gsub(s, \",\", \" \")\n   s = string.gsub(s, \" \", \"\"\
    )\n   s = string.gsub(s, \",\", \" \")\n   return string.gmatch(s, \"%w+\")\n\
    end", "  -- Write your code! This may look like a lot of code to you, but coding\
    \ is\n  -- an important part of writing successful software! As we always say,\
    \ this\n  -- is a very important skill for any software developer.\n  -- When\
    \ you have finished this, you can return to the challenge by clicking\n  -- on\
    \ the \"Check\" button at the top of the page.", "  local words = {}\n  local\
    \ i = 0\n  while true do\n    i = i + 1\n    if i > #s then\n      break -- we're\
    \ done\n    end\n    local pos = find(s, ',', i)\n    if pos == nil then\n   \
    \   pos = find(s, ' ', i)\n    end\n    if pos == nil then\n      pos = #s\n \
    \   end\n    table.insert(words, sub(s, i, pos))\n    i = pos + 1\n  end\n  return\
    \ words\nend", "  return str:split(s)\nend", "    local words = s.split(\" \"\
    );\n    for idx = 1, #words do\n        words[idx] = tostring(words[idx]);\n \
    \   end\n    return words;\nend", "  -- Your code here\n  local t = {}\n  local\
    \ words = s:gmatch(\"([^,]+)(,[^,]+)*\")\n  table.insert(t, words)\n  return t\n\
    end\nprint(words_string(\"Hi, my name is John\"))", "\tlocal words = nil\n\ts\
    \ = s.strip()\n\ts = s:gsub(\"[%[%^ ]%]\", \"\")\n\ts = s:gsub(\"[%[ ]%]\", \"\
    \")\n\ts = s:gsub(\"[%[ ]%]\", \"\")\n\ts = s:gsub(\"[%[ ]%]\", \"\")\n\ts = s:gsub(\"\
    ,\", \" \")\n\ts = s:gsub(\"[%[%^ ]%]\", \"\")\n\ts = s:gsub(\"[%[ ]%]\", \"\"\
    )\n\ts = s:gsub(\"[%[ ]%]\", \"\")\n\ts = s:gsub(\"[%[ ]%]\", \"\")\n\twords =\
    \ s:split(\" \")\n\treturn words\nend", "  local words = string.gmatch(s, \"([^,]*)\"\
    )\n  return words\nend", "  local words = \"\"\n  for word in string.gmatch(s,\
    \ \"[^,]+\") do\n    words = words .. word .. \", \"\n  end\n  return string.gmatch(words,\
    \ \"%w+\") -- We return an array of words.\nend\nprint(words_string(\"Hi, my name\
    \ is John\")) -- Hi, my name is John\nprint(words_string(\"One, two, three, four,\
    \ five, six\")) -- One, two, three, four, five, six", "    local words = s:gsub(\"\
    ([^ ,]+)\", \" \"):gsub(\",\", \" \")\n    local result = {word}\n    for i =\
    \ 1, #words do\n        result[#result + 1] = words[i]\n    end\n    return result\n\
    end\n</cell>\n<text>\n3. Write a function that returns the last n elements of\
    \ a list.", "  s = string.gsub(s, '[%c%p]+', ' ')\n  s = string.gsub(s, '[%c%p]+',\
    \ ' %%%1$t')\n  local ts = { }\n  assert(s:gmatch('%1$t %1$t'), s)\n  local i\
    \ = 1\n  for s in s:gmatch('%%%1$t') do\n    ts[i + 1] = s\n    i = i + 1\n  end\n\
    \  assert(i == #ts, i)\n  return ts\nend", "  local words = \"\"\n  for word in\
    \ string.gmatch(s, \",([^,]+)\") do words = words .. word end -- add each word\
    \ to a words-array with a comma\n  return string.gmatch(s, \" \") -- add each\
    \ space-separated word to the words-array with a space\nend", "    local w = {\
    \ }\n    for w in string.gmatch(s, \"([^,]+)(,|$)\") do\n        w[#w+1] = w\n\
    \    end\n    return w\nend", "  local words = string.gmatch(s, \"([^,]+)\") --Split\
    \ on any number of commas.\n  local arr = {}\n  for i=1,#words do --Iterate over\
    \ all the words\n    table.insert(arr,words[i]) --Append the word to the array\n\
    \  end\n  return arr\nend", "  local t = {}\n  for _,v in string.gmatch(s, \"\
    [^,]+\") do\n    table.insert(t, v)\n  end\n  return t\nend", "  local words =\
    \ string.gmatch(s, '([^,]+)') -- Split on commas\n  local result = {}\n  for _,v\
    \ in pairs(words) do\n    result[#result + 1] = pony.string.split(v)\n  end\n\
    \  return result\nend", "    return s:match(\"([^,]+)\"):gsub(\"%w\", function(c)\n\
    \        return c\n    end):gsub(\",+\", \" \")\nend", "  local words = string.split(s,\
    \ \" \")\n  table.sort(words)\n  return words\nend", "  s = string.gsub(s, '[%[(%[%)]%[,)]]',\
    \ '')\n  s = string.gsub(s, '[,]', ' ')\n  s = string.gsub(s, '[%[%]]', ' ')\n\
    \  s = string.gsub(s, '[%]', ' ')\n  s = string.gsub(s, '[%]%', ' ')\n  s = string.gsub(s,\
    \ '%%%', ' ')\n  s = string.gsub(s, '%%', ' ')\n  s = string.gsub(s, '%%', ' ')\n\
    \  s = string.gsub(s, '%%%', ' ')\n  s = string.gsub(s, '%%%', ' ')\n  s = string.gsub(s,\
    \ '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n\
    \  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s,\
    \ '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n\
    \  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s,\
    \ '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n\
    \  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s,\
    \ '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n\
    \  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s,\
    \ '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n\
    \  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s,\
    \ '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n\
    \  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s,\
    \ '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n\
    \  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s,\
    \ '%', ' ')\n  s = string.gsub(s, '%', ' ')\n  s = string.gsub(s, '%', ' ')\n\
    \  s = string.gsub(s, '%', '", "    local words = ''\n    local comma_idx = 1\n\
    \    local word_idx = 1\n    while true do\n        -- Get next word\n       \
    \ if s[comma_idx] == ',' then\n            comma_idx = comma_idx + 1\n       \
    \ end\n        if s[word_idx] == ' ' then\n            word_idx = word_idx + 1\n\
    \        elseif s[word_idx] == ',' then\n            words = words .. ',' -- Add\
    \ a comma before the next word\n            comma_idx = comma_idx + 1\n      \
    \      word_idx = word_idx + 1\n        else\n            words = words .. s[word_idx]\n\
    \            word_idx = word_idx + 1\n        end\n        if s[word_idx] == ''\
    \ then\n            break\n        end\n    end\n    return words\nend", "  local\
    \ words = string.gsub(s,\" \",\"\")\n  return string.gsub(words,\",\",\"\")\n\
    end", "  return string.gmatch(s, \"[%w\\s]+\");\nend", "  -- Your code here\n\
    end", "  -- Write your logic here\n  -- This line will split string by space character\
    \ and return array of words\n  return string.gmatch(s, \".+\")\nend", "  -- The\
    \ code below will return a list with the words in s\n  -- Use a list comprehension\
    \ to do so.\n  return [\n    for w in s:gmatch(\"(%w+)\") do\n      w\n    end\n\
    \  ]\nend", "    local tokens = s.split(\" ,\")\n    local words = {}\n    for\
    \ index, word in ipairs(tokens) do\n        words[#words + 1] = word\n    end\n\
    \    return words\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
