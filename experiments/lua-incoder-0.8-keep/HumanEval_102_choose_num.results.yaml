name: HumanEval_102_choose_num
language: lua
results:
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  -- Check that the given numbers are in range.\n  if x > y then return\
    \ -1 else return x end\n  -- Initialize a variable to be returned.\n  local i\
    \ = 1\n  -- Loop while we haven't found an even number yet.\n  while i <= x do\n\
    \    -- If the number is even ...\n    if i ~= y then\n      -- ... return the\
    \ number ...\n      return i\n    -- Otherwise, increment the number by 1.\n \
    \   i = i + 1\n  end\n  -- There was no even number yet.\n  return -1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc5yiucoa.lua:19: 'end' expected (to close 'if' at line 15)\
    \ near 'i'\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   for _, reply in ipairs(get_my_ips()) do\n     if reply ~= nil then\n\
    \         local x, y = string.find(reply, \"^([^ ]+) ([^ ]+)$\")\n         if\
    \ x ~= nil and y ~= nil then\n           local n1 = tonumber(x)\n           local\
    \ n2 = tonumber(y)\n           if n1 <= x and n2 <= y then\n              if n1\
    \ % 2 == 0 and n2 % 2 == 0 then\n                 return n1 * 10 + n2\n      \
    \        else\n                 return -1\n              end\n           else\n\
    \             return -1\n           end\n         end\n     end\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplmh7t5uk.lua:8:\
    \ attempt to call a nil value (global 'get_my_ips')\nstack traceback:\n\t/tmp/tmplmh7t5uk.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmplmh7t5uk.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local biggest = x or y\n    local smaller = x\n    while smaller <=\
    \ y do\n        if biggest * 2 > smaller then\n            biggest = smaller\n\
    \        else\n            smaller = smaller + 1\n        end\n    end\n    return\
    \ biggest -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    if x < y then\n        x, y = y, x\n    end\n    \n    local div = x/y\n\
    \    local mult = x - div*y\n    \n    if multit == 0 then\n        return div\n\
    \    end\n    \n    return choose_num(y, mult)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x > y then\n    x, y = y, x\n  elseif x == 0 then\n    return x\n \
    \ end\n  local limit = #x\n  local biggest = -1\n  local smaller = 0\n  for i\
    \ = 1, limit do\n    local remainder, result = x%i, x//i\n    if remainder ==\
    \ 0 then\n      biggest = result\n      smaller = i\n    end\n  end\n  return\
    \ biggest < 0 and -1 or biggest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmi9xtnkd.lua:13:\
    \ attempt to get length of a number value (local 'x')\nstack traceback:\n\t/tmp/tmpmi9xtnkd.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmi9xtnkd.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x >= y then\n      x, y = y, x\n   end\n   local limit = x - y + 1\n\
    \   for i = 1, limit do\n      if ((x * y) + i) % 2 == 0 then\n         return\
    \ i\n      end\n   end\n   return -1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpandxfk6v.lua:23:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpandxfk6v.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then\n    return -1\n  end\n  if x > y then\n    return 1\n \
    \ end\n  for i = y, 1, -1 do\n    if x % i == 0 then\n      return i\n    end\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplq30fk7m.lua:24:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmplq30fk7m.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    -- Calculate the middle point between the given points:\n    local middle\
    \ = x + (y - x)/2\n    -- If the middle point is even, return x + 1, otherwise\
    \ return y:\n    return middle%2==0 and x+1 or y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbu0apok.lua:17:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmpwbu0apok.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then return -1 end\n  if x == y then return x end\n  if x ~=\
    \ y and x % 2 == 0 then \n     return choose_num(x div 2, y) \n  else \n     return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjtq578xc.lua:11: ')' expected near 'div'\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal n\n\tfor n in string.gmatch(string.format(\"%0.2d\", x), \"%0.2d\"\
    ) do\n\t\tif tonumber(n)>tonumber(y) then\n\t\t\tbreak\n\t\telseif tonumber(n)==tonumber(y)\
    \ then\n\t\t\tbreak\n\t\tend\n\tend\n\tif n==nil then\n\t\treturn -1\n\telse\n\
    \t\treturn tonumber(n)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv7aefw0l.lua:9:\
    \ invalid capture index %0\nstack traceback:\n\t/tmp/tmpv7aefw0l.lua:9: in local\
    \ 'candidate'\n\t/tmp/tmpv7aefw0l.lua:26: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    for i=x, j=1, y do\n        local k=i\n        i=k\n    end\n    if\
    \ j~=y then\n        return j-1\n    else\n        return -1\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmyu6v74f.lua:8: 'do' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    if x > y then\n        local tmpX = x\n        x = y\n        y = tmpX\n\
    \    end\n    while x >= y and x % 2 == 0 and y % 2 == 0 do\n        x = x - y\n\
    \        y = y - 1\n    end\n    return x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4jzitzwh.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp4jzitzwh.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   for i = x,y, 1 do\n      if i % 2 == 0 then\n         return i\n    \
    \  end\n   end\n   if x > y then x, y = y, x end\n   if x == y then return x end\n\
    \   return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsesken2k.lua:21:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpsesken2k.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x >= y then\n    return -1\n  elseif x == y then\n    return x\n  else\n\
    \    return x + y - 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg8k2grrs.lua:20:\
    \ expected: 14, actual: 26\nstack traceback:\n\t/tmp/tmpg8k2grrs.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local x_start = x\n    local x_end = x\n    local y_start = y\n    local\
    \ y_end = y\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph2vo8k76.lua:26: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal max_number = 0\n\tlocal max_number = x\n\tlocal i = y\n\twhile i\
    \ ~= x do\n\t\tif i & 1 == 1 then\n\t\t\ti = i ^ 2\n\t\telse\n\t\t\ti = i ^ 3\n\
    \t\tend\n\t\tif i > max_number then\n\t\t\tmax_number = i\n\t\tend\n\t\ti = i\
    \ >> 1\n\tend\n\treturn max_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9stttou6.lua:20:\
    \ number (local 'i') has no integer representation\nstack traceback:\n\t/tmp/tmp9stttou6.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp9stttou6.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    for i=x, min(x,y)-1 do\n        if i % 2 == 0 then\n            return\
    \ i\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgg4r7bjh.lua:8:\
    \ attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpgg4r7bjh.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpgg4r7bjh.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x >= y and x <= y then return x\n  else if y >= x and x <= y then return\
    \ y\n  else return -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe_ygbcn8.lua:27: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal x_int = x\n\tlocal y_int = y\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_ceci8kt.lua:24: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local x_big = y\n    local y_big = x\n    \n    if x_big < y_big then\n\
    \        if x_big < math.ceil(x_big) then\n            x_big = math.ceil(x_big)\n\
    \        end\n        if y_big > math.ceil(y_big) then\n            y_big = math.ceil(y_big)\n\
    \        end\n    end\n    \n    if x_big == y_big then\n        if x_big < math.ceil(x_big)\
    \ then\n            x_big = math.ceil(x_big)\n        end\n        \n        if\
    \ x_big < math.ceil(y_big) then\n            y_big = math.ceil(y_big)\n      \
    \  end\n    end\n    \n    return x_big, y_big\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59_d4d89.lua:36:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmp59_d4d89.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  for i = x, y do\n    if i % 2 == 0 and i > 0 then\n      return i\n  \
    \  end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg700kkng.lua:27: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    if x < 0 or y < 0 then return -1 end\n    if x <= y then\n        for\
    \ i = x, y do\n            if i % 2 == 0 then return i end\n        end\n    end\n\
    \    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45ay94nl.lua:20:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp45ay94nl.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  assert(x > 0 and x < y)\n  local z = x + (y - x)\n  while z < x do\n \
    \   z = z + y\n  end\n  return z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rn3skq7.lua:19:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmp6rn3skq7.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x < y then\n      local r = x\n      x = y\n      y = r\n   end\n\
    \   if x < 2 or y < 2 then\n      return -1\n   end\n   local r = x\n   x = y\n\
    \   y = r\n   while x ~= y do\n      y = y - 1\n   end\n   return y\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6chdefs.lua:28:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpe6chdefs.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x <= y then\n      return x\n   else\n      return y\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgf4uwrmo.lua:18:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpgf4uwrmo.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then\n    return choose_num(y, x)\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvboaikib.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tfor i = x, y + 1 do\n\t\tif i % 2 == 0 and i > 0 then\n\t\t\treturn i\n\
    \t\tend\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3tpwzg6.lua:19:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpn3tpwzg6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\t-- Initialize variables\n\tlocal z = 0\n\tlocal biggest_num = 0\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd5nbcn_8.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local min_value = math.min(x, y)\n  local max_value = math.max(x, y)\n\
    \  local result = 0\n  for i = min_value, max_value do \n    result = result +\
    \ i\n    if result % 2 == 0 then\n      return result\n    end\n  end\n  return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmploo74sgh.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmploo74sgh.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    -- assert(x > 0 and x < y and y > 0 and y < x)\n    local min_val =\
    \ math.min(x, y)\n    local max_val = math.max(x, y)\n    local odd_counter =\
    \ 0\n    local even_counter = 0\n    local i = 2\n    \n    while i < max_val\
    \ do\n        local m = i / 2\n        odd_counter = odd_counter + m % 2 == 1\n\
    \        i = i + 1\n    end\n    \n    i = 2\n    \n    while i < max_val do\n\
    \        local m = i / 2\n        even_counter = even_counter + m % 2 == 0\n \
    \       i = i + 1\n    end\n    \n    if min_val < max_val and min_val + 1 ==\
    \ max_val then\n        if odd_counter then\n            return min_val\n    \
    \    else\n            return -1\n        end\n    elseif min_val < max_val and\
    \ min_val + 1 > max_val then\n        if even_counter then\n            return\
    \ min_val\n        else\n            return -1\n        end\n    end\n    return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1c2sv2nq.lua:17:\
    \ attempt to perform arithmetic on a boolean value (local 'odd_counter')\nstack\
    \ traceback:\n\t/tmp/tmp1c2sv2nq.lua:17: in local 'candidate'\n\t/tmp/tmp1c2sv2nq.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal x_min = math.min(x, y)\n\tlocal y_min = math.min(x, y)\n\tlocal\
    \ x_max = math.max(x, y)\n\tlocal y_max = math.max(x, y)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_jt2_mu1.lua:26: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal function check(t, v)\n\t\tif t > 0 then\n\t\t\treturn v\n\t\telseif\
    \ t < 0 then\n\t\t\treturn -1\n\t\telseif t == 0 then\n\t\t\treturn 0\n\t\telse\n\
    \t\t\treturn t\n\t\tend\n\tend\n\t\n\tif x > y then \n\t\tx, y = y, x\n\tend\n\
    \t\n\tif x == 0 then \n\t\treturn y\n\tend\n\t\n\tlocal r = x\n\t\n\tlocal last_r\
    \ = -1\n\t\n\twhile r >= 2 do\n\t\tlocal tmp = r / 2\n\t\tlocal tmp_r = check(tmp,\
    \ r)\n\t\t\n\t\tif tmp_r == last_r then\n\t\t\tbreak\n\t\telse\n\t\t\tlast_r =\
    \ tmp_r\n\t\tend\n\tend\n\t\n\treturn r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qkqwy31.lua:49:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp9qkqwy31.lua:49: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal function is_odd(x)\n\t\tlocal n = math.floor(x)\n\t\treturn x ~=\
    \ math.floor(x) and n % 2 == 1\n\tend\n\tlocal function is_even(x)\n\t\tlocal\
    \ n = math.floor(x)\n\t\treturn x ~= math.floor(x) and n % 2 == 0\n\tend\n\tlocal\
    \ function find_max(n)\n\t\tif n < x or n > y then return -1 end\n\t\tif is_odd(n)\
    \ then return find_max(math.floor(n / 2)) end\n\t\tif is_even(n) then return find_max(math.floor(x\
    \ / 2)) end\n\t\treturn n\n\tend\n\treturn find_max(y)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3urf7asl.lua:28:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmp3urf7asl.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local i = x\n  local j = y\n  -- Check if x is bigger than y\n  if x >\
    \ y then\n    i, j = j, x\n  else\n    -- Check if y is bigger than x\n    if\
    \ x > j then\n      i, j = j, x\n    end\n  end\n  -- Check whether both x and\
    \ y are odd\n  if ((i ^ j) ^ 1) == 0 then\n    return -1\n  end\n  -- Store in\
    \ i\n  i = 1\n  -- Keep adding half of x to i, until it becomes even\n  while\
    \ i ^ x % 2 == 0 do\n    i = i / 2\n  end\n  -- Store in j\n  j = 1\n  -- Keep\
    \ adding half of y to j, until it becomes even\n  while j ^ y % 2 == 0 do\n  \
    \  j = j / 2\n  end\n  -- Return i\n  return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbxit1dc.lua:42:\
    \ expected: 14, actual: 1\nstack traceback:\n\t/tmp/tmpgbxit1dc.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x >= y then\n      x, y = y, x\n   end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5g6tua76.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local result = x\n    for i = y, 1, -1 do\n        if x % i == 0 then\n\
    \            result = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixoskjm1.lua:20:\
    \ expected: 14, actual: 1\nstack traceback:\n\t/tmp/tmpixoskjm1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    for i = x, y + 1 do\n        local num = math.ceil(i/2) + 1\n      \
    \  if num > math.ceil(y) then\n            return num - 1\n        end\n    end\n\
    \    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjav3fgs1.lua:20:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpjav3fgs1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    if x >= y then return x end\n    local a, b, c = {}, {}, {}\n    for\
    \ i = x, y + 1 do\n        if i % 2 ~= 0 then\n            table.insert(a, i)\n\
    \        else\n            table.insert(b, i)\n        end\n    end\n    local\
    \ counts = {}\n    for i = 1, #a do\n        local c = {}\n        for j = 1,\
    \ #b do\n            table.insert(c, a[i] / b[j])\n        end\n        table.insert(counts,\
    \ math.max(#c, 1))\n    end\n    return table.max(counts)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm3fxlwip.lua:25:\
    \ attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmpm3fxlwip.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpm3fxlwip.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local m = math.max(x, y)\n  local t = 1\n  while m % 2 == 0 and m < x\
    \ do \n    m = math.floor(m / 2)\n    t = t * 2\n  end\n  return m\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmsnmgeua.lua:20:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmpmsnmgeua.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tfor i, z in ipairs(list) do\n\t\tif z >= x and z <= y then\n\t\t\treturn\
    \ z\n\t\tend\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a nil value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    for i = x, y + 1 do\n        if math.mod(i, 2) == 0 then return i\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpar_s8nt6.lua:26: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local n = math.max(x, y) - math.min(x, y)\n    for i = x, y + 1 do\n\
    \        if i ~= n and i % 2 == 0 then\n            return i\n        end\n  \
    \  end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf06ky4v8.lua:20:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpf06ky4v8.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local x_even, x_odd = x % 2, x % 2 + 1\n    local y_even, y_odd = y\
    \ % 2, y % 2 + 1\n    if x_even > y_even then\n        if x_even > 0 then\n  \
    \          return x_even\n        end\n        return y_even\n    end\n    if\
    \ y_even > x_even then\n        return y_even\n    end\n    if x_odd > y_odd then\n\
    \        return x_odd\n    end\n    return y_odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0g7ldg4n.lua:28:\
    \ expected: 14, actual: 1\nstack traceback:\n\t/tmp/tmp0g7ldg4n.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local max = -1\n    for i = 1, x+1 do\n        local num = i - 1\n \
    \       if num * 2 <= y then\n            if max < num * 2 then\n            \
    \    max = num * 2\n            end\n        else\n            if max < i then\n\
    \                max = i\n            end\n        end\n    end\n    return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm7rhjq28.lua:28:\
    \ expected: -1, actual: 14\nstack traceback:\n\t/tmp/tmpm7rhjq28.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tif x <= y then\n\t\treturn -1\n\tend\n\tfor i = x, y + 1 do\n\t\tif i\
    \ % 2 == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptcfin6si.lua:22:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmptcfin6si.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  -- TODO: This can probably be optimized a lot more\n  if x <= y then\n\
    \    if x == 2 or x == y then\n      return x\n    else\n      return -1\n   \
    \ end\n  end\n  \n  local result = -1\n  \n  -- x is less than y so we know that\
    \ x is even\n  if x < y then\n    -- x is odd\n    if x % 2 == 1 then\n      --\
    \ x is even, so we check if y is an odd number\n      if y % 2 == 1 then\n   \
    \     -- y is even too, so we return the bigger even number\n        if y > result\
    \ then\n          result = y\n        end\n      else\n        -- y is an even\
    \ number, so we need to multiply x by 2 and add y\n        result = result * 2\
    \ + x\n      end\n    else\n      -- x is odd, so we check if y is an odd number\n\
    \      if y % 2 == 1 then\n        -- y is even too, so we return the bigger even\
    \ number\n        if y > result then\n          result = y\n        end\n    \
    \  else\n        -- y is an even number, so we simply add x\n        result =\
    \ result + x\n      end\n    end\n  end\n  \n  -- x is greater than y so we know\
    \ that y is even\n  if x > y then\n    -- x is even, so we check if x is an odd\
    \ number\n    if x % 2 == 1 then\n      -- x is even, so we check if y is an odd\
    \ number\n      if y % 2 == 1 then\n        -- y is even too, so we return the\
    \ bigger even number\n        if x > result then\n          result = x\n     \
    \   end\n      else\n        -- y is an even number, so we simply subtract y\n\
    \        result = result - y\n      end\n    else\n      -- x is odd, so we check\
    \ if x is an odd number\n      if x % 2 == 0 then\n        -- x is odd, so we\
    \ check if y is an odd number\n        if y % 2 == 1 then\n          -- y is even\
    \ too, so we return the bigger even number\n          if x > result then\n   \
    \         result = x\n          end\n        else\n          -- y is an even number,\
    \ so we simply subtract y\n          result = result - y\n        end\n      else\n\
    \        -- x is even, and y is not even so we simply add x and y\n        result\
    \ = result + x + y\n      end\n    end\n  end\n  \n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2enyzmlp.lua:87:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmp2enyzmlp.lua:87: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  -- If the two numbers are equal then return either of the numbers\n  if\
    \ x == y then\n    return x\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoql8pnh1.lua:26: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    -- Base case\n    if x == 0 or y == 0 then\n        return 0\n    end\n\
    \    -- Recursive case\n    if x > y then\n        return choose_num(y, x)\n \
    \   else\n        return x * x + y * y\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t0un4_t.lua:23:\
    \ expected: 14, actual: 369\nstack traceback:\n\t/tmp/tmp2t0un4_t.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    return x + 1 -- Add one because biggest even number is in the range\
    \ [x, y] inclusive.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprizu458q.lua:14:\
    \ expected: 14, actual: 13\nstack traceback:\n\t/tmp/tmprizu458q.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal result = x or y\n\tx = x or y\n\t\n\tfor i = x, y + 1 do\n\t\tif\
    \ math.mod(i, 2) == 0 then\n\t\t\tresult = i\n\t\t\tbreak\n\t\tend\n\tend\n\t\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn53hnyyv.lua:12:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpn53hnyyv.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpn53hnyyv.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tif x >= y then return -1 end\n\tlocal num = x\n\twhile x + 2 < y do\n\t\
    \tnum = num * 3 + 1\n\t\tx = x + 2\n\tend\n\treturn num\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbpsyfi.lua:20:\
    \ expected: 14, actual: 37\nstack traceback:\n\t/tmp/tmpgjbpsyfi.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    if x > y then\n        x, y = y, x\n    end\n    local z = 1\n    while\
    \ x < y do\n        if z * z <= y then\n            z = z * z + y\n        else\n\
    \            z = z + y\n        end\n        x = x + 1\n    end\n    return z\
    \ - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bkfh9n1.lua:26:\
    \ expected: 14, actual: 45\nstack traceback:\n\t/tmp/tmp9bkfh9n1.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local a = x:max(y)\n    local b = y:max(x)\n    if a:floor() == a:round()\
    \ and b:floor() == b:round() then\n        return a\n    else\n        return\
    \ -1\n    end\nend\nreturn choose_num\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpve07bkbx.lua:17: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then\n    x, y = y, x\n  end\n  local max_value = x\n  local\
    \ i = 1\n  while i <= y do\n    if x%i == 0 then\n      max_value = i\n    end\n\
    \    i = i + 1\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94416qfq.lua:25:\
    \ expected: 14, actual: 5\nstack traceback:\n\t/tmp/tmp94416qfq.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  -- Base Case: if the range is empty, return -1\n  if not y then\n    return\
    \ -1\n  -- Base Case: if the range has only one element or that element is\n \
    \ -- in the range [x, y], then return that element\n  elseif x <= y then\n   \
    \ return x\n  -- Base Case: if the range has two elements, then return the\n \
    \ -- biggest even number that is in [x, y]\n  elseif x == y then\n    return x\
    \ - 2\n  -- The main logic of the function. Here we're going to calculate\n  --\
    \ (x - 2) * (y - 1) * (x - 1) + (x - 2) * (y - 2) * (x - 2) \n  -- and find the\
    \ biggest even number that is in [x, y]\n  else\n    local m = math.abs(x - y)\n\
    \    local result\n    if x > y then\n      result = choose_num(y, x + m)\n  \
    \  else\n      result = choose_num(x + m, y)\n    end\n    return result + m /\
    \ 2\n  end\nend\n</cell>\n<text>\nProblem 3\nThe function below takes an array\
    \ of positive integers and an index k and\nreturns True if there are two elements\
    \ in the array that are the same and \nFalse otherwise.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn9yb3_qs.lua:33: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local z = 1\n    while z <= y do\n        if ((x % z) == 0) then\n \
    \           return z\n        end\n        z = z + 1\n    end\n    return -1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0hnuznvm.lua:21:\
    \ expected: 14, actual: 1\nstack traceback:\n\t/tmp/tmp0hnuznvm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local smallest_limit = math.min(x, y)\n    local second_limit = math.max(x,\
    \ y)\n    local smallest = -1\n    local second = -1\n    for x = smallest_limit,\
    \ second_limit do\n        for y = smallest_limit, second_limit do\n         \
    \   local result = x*x + y*y\n            if result > smallest and result < second\
    \ then\n                smallest, second = result, x\n            end\n      \
    \  end\n    end\n    return smallest or -1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujr71vi7.lua:26:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpujr71vi7.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local function is_prime(n)\n    if n <= 2 then return false end\n    local\
    \ i\n    for i = 2, n do\n      if not n % i then\n        return false\n    \
    \  end\n    end\n    return true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6tngt1rc.lua:32: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   -- We cannot have a negative number\n   if x < 0 or y < 0 then\n    \
    \  return -1\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp40p7uy5c.lua:26: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   local min_int = (x < y and y) or -1\n   local max_int = (x > y and x)\
    \ or -1\n   for i = min_int, max_int do\n      if ((i/2) == (i%2)) then\n    \
    \     return i\n      else\n         return -1\n      end\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkc7jppfk.lua:22:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpkc7jppfk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local z = (x / y) * y\n  return z - z % y \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpep23n14i.lua:15:\
    \ expected: 14, actual: 0\nstack traceback:\n\t/tmp/tmpep23n14i.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x > y then\n    return choose_num(y, x)\n  elseif x < y then\n    return\
    \ choose_num(x, y)\n  else\n    if x % 2 == 0 and y % 2 == 0 then\n      return\
    \ x\n    elseif x % 2 == 0 then\n      return y\n    else\n      return x\n  \
    \  end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x < y then\n     return choose_num(y, x)\n   end\n   if x == y then\n\
    \     return x\n   end\n   if x % 2 = 0 then\n     return x \n   end\n   if y\
    \ % 2 = 0 then\n     return y \n   end\n   local limit = x - (y / 2)\n   while\
    \ limit >= 1 do\n     local m = limit / 2\n     if limit % 2 = 0 then\n      \
    \ return m\n     end\n     limit = limit - m\n   end\n   return -1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0subseju.lua:14: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  while x < y do\n    local xn = x\n    local yn = y\n    local m = xn\n\
    \    local n = yn\n    local i = 1\n    while xn*xn+yn*yn < m do\n      n = (n*(n+1)//2)\n\
    \      xn = (xn*xn + (m//n) * xn) mod m\n      yn = (yn*yn + (m//n) * yn) mod\
    \ m\n      i = i + 1\n    end\n    x, y = xn, yn\n  end\n  return x\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz6_6xsiy.lua:16: syntax error near 'm'\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    -- TODO: Write your solution here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp6cmcv9.lua:14:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmpwp6cmcv9.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local z = 0\n    while x <= y do\n        if x % 2 == 0 and y % 2 ==\
    \ 0 then\n            z = x + y\n        end\n        -- this condition is to\
    \ prevent endless loop\n        if x == y then\n            break\n        end\n\
    \        x = x + 1\n        y = y + 1\n    end\n    return z\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  while y < x do\n    if x <= 15 and y >= 12 then\n      return x\n    end\n\
    \    if x <= 13 and y >= 15 then\n      return y\n    end\n    -- Divide the numbers\
    \ x and y by 2\n    x = math.floor(x/2)\n    y = math.floor(y/2)\n  end\n  --\
    \ This code never reaches here\n  return -1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphvt58ki_.lua:26:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmphvt58ki_.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    if x < y then\n        local min_num = x\n        local max_num = y\n\
    \    else\n        local min_num = y\n        local max_num = x\n    end\n   \
    \ local num = min_num\n    repeat\n        local temp = num\n        num = num\
    \ + 1\n    until num < max_num\n    return num\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpexil8ues.lua:18:\
    \ attempt to perform arithmetic on a nil value (local 'num')\nstack traceback:\n\
    \t/tmp/tmpexil8ues.lua:18: in local 'candidate'\n\t/tmp/tmpexil8ues.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tif x < y then\n\t\treturn choose_num(y, x)\n\telse\n\t\tif x % 2 == 0\
    \ then\n\t\t\tlocal result = x // 2\n\t\t\tif x > y then\n\t\t\t\tresult = result\
    \ + y\n\t\t\telse\n\t\t\t\tresult = result + x\n\t\t\tend\n\t\t\tif result % 2\
    \ == 0 then\n\t\t\t\treturn result\n\t\t\telse\n\t\t\t\treturn -1\n\t\t\tend\n\
    \t\telse\n\t\t\treturn -1\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirqt9eki.lua:32:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpirqt9eki.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local x_inv = x / y\n    if x == y then\n        return 0\n    else\
    \ if y == 0 or x_inv == 0 then\n        return -1\n    else\n        return x\
    \ + x_inv\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn5to5ogc.lua:31: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then\n    return -1\n  end\n  local limit = y -- Start looking\
    \ from highest value to lowest.\n  while limit < x do\n    limit = limit * 2\n\
    \  end\n  while limit > 1 do\n    if limit % 2 == 0 then\n      limit = limit\
    \ / 2\n    else\n      limit = limit / 2 + 1\n    end\n  end\n  return limit\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t3mle61.lua:28:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmp3t3mle61.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local even, odd = 0, 1\n  if x > y then\n    even, odd = 1, 0\n  end\n\
    \  \n  local max_even = 1\n  local max_odd = 1\n  \n  for i = y, 1, -1 do\n  \
    \  local candidate = even + odd + i\n    even, odd = odd, even + odd\n    \n \
    \   if candidate > max_even then\n      max_even = candidate\n    end\n    \n\
    \    if candidate > max_odd then\n      max_odd = candidate\n    end\n  end\n\
    \  \n  if max_even > max_odd then\n    return max_even\n  end\n  \n  return max_odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk2vuqp6p.lua:39:\
    \ expected: 14, actual: 988\nstack traceback:\n\t/tmp/tmpk2vuqp6p.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local even, odd = 0, 0\n    if x < y then\n        even, odd = choose_num(x,\
    \ y - 1)\n    else\n        even, odd = choose_num(x - 1, y)\n    end\n    local\
    \ result = x\n    if even > 0 and odd > even then\n        local temp, i = even,\
    \ odd\n        while temp > 0 and temp % 2 == 0 and i >= 1 do\n            temp\
    \ = temp / 2\n            i = i - 1\n        end\n        result = temp + 1\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzmj91by3.lua:10:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpzmj91by3.lua:10: in upvalue 'choose_num'\n\
    \t/tmp/tmpzmj91by3.lua:12: in upvalue 'choose_num'\n\t/tmp/tmpzmj91by3.lua:10:\
    \ in upvalue 'choose_num'\n\t/tmp/tmpzmj91by3.lua:12: in upvalue 'choose_num'\n\
    \t/tmp/tmpzmj91by3.lua:10: in upvalue 'choose_num'\n\t/tmp/tmpzmj91by3.lua:12:\
    \ in upvalue 'choose_num'\n\t/tmp/tmpzmj91by3.lua:10: in upvalue 'choose_num'\n\
    \t/tmp/tmpzmj91by3.lua:12: in upvalue 'choose_num'\n\t/tmp/tmpzmj91by3.lua:10:\
    \ in upvalue 'choose_num'\n\t...\n\t/tmp/tmpzmj91by3.lua:10: in local 'candidate'\n\
    \t/tmp/tmpzmj91by3.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.080\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   -- Check if 'x' is larger than 'y'.\n   if x > y then\n      x, y = y,\
    \ x\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp057bdidr.lua:26: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local max_num = x\n  local min_num = y\n  for i = x,y do\n    if i % 2\
    \ == 0 then\n      max_num = math.max(max_num, i)\n      min_num = math.min(min_num,\
    \ i)\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_ny73mp.lua:23:\
    \ expected: -1, actual: 13\nstack traceback:\n\t/tmp/tmp3_ny73mp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local x = x or 0\n  local y = y or 1\n  local lower = math.min(x, y)\n\
    \  local upper = math.max(x, y)\n  if lower % 2 == 0 and upper % 2 == 0 then\n\
    \    if lower > upper then\n      return lower\n    else\n      return upper\n\
    \    end\n  elseif lower % 2 == 0 and upper % 2 == 1 then\n    return lower\n\
    \  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8gdmaqp.lua:28:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpf8gdmaqp.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tfor i=x, y-1 do\n\t\tif i % 2 == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\
    \treturn -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5gvouog.lua:19:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpj5gvouog.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x <= y then return -1 end\n  local n = x + 1\n  while true\n    do\n\
    \      if n % 2 ~= 0 then return n end\n      n = n / 2\n    end\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd_rfgbqt.lua:16: <eof> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local num = (x+y)/2\n    local nxt = num+1\n    if nxt <= x and nxt\
    \ >= y then\n        return num\n    end\n    return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpinwsinnc.lua:19:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpinwsinnc.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local num = 1\n  local i = x\n  while i <= y do\n    if i ~= (num + 1)\
    \ then\n      num = i\n    end\n    i = i + 1\n  end\n  return num\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8oz4c7w.lua:23:\
    \ expected: -1, actual: 1\nstack traceback:\n\t/tmp/tmpf8oz4c7w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   local xl = tostring(x)\n   local yl = tostring(y)\n   if xl == yl then\n\
    \      return tonumber(xl)\n   else\n      if tonumber(xl) > tonumber(yl) then\n\
    \         return choose_num(y, xl)\n      else\n         return -1\n      end\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_223um9.lua:24:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpf_223um9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x <= y then\n    return choose_num(y, x)\n  end\n  if x == y then\n\
    \    return -1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_mm4vzo6.lua:28: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal x_lower = x\n\tlocal x_upper = x + 1\n\tlocal y_lower = y\n\tlocal\
    \ y_upper = y + 1\n\tlocal y_diff\n\tlocal new_x\n\tlocal new_y\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxodn40ra.lua:29: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  -- If one or both numbers are negative, then return -1.\n  if x < 0 or\
    \ y < 0 then\n    return -1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6tj7tmtk.lua:26: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local n = y\n  while n >= x and n ~= x + 1 do\n    local tmp = n\n   \
    \ n = math.floor((x + y - 1) / 2.0)\n    x, y = tmp, n - 1\n  end\n  return x\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpje2bf_7i.lua:20:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmpje2bf_7i.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local max_val = x\n  for i = 1, y do\n    if max_val * 2 > x then\n  \
    \    max_val = max_val * 2\n    else\n      return max_val\n    end\n  end\n \
    \ if max_val > x then\n    return max_val\n  else\n    return -1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7lc4_03q.lua:26:\
    \ expected: 14, actual: 393216\nstack traceback:\n\t/tmp/tmp7lc4_03q.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\t-- TODO: Add error handling\n\tif x < y then\n\t\tx, y = y, x\n\tend\n\
    \tif x >= y then\n\t\tx, y = y, x\n\tend\n\tif x == y then\n\t\treturn x\n\tend\n\
    \t\n\t-- Check if x's and y's are even\n\tlocal function is_even(i)\n\t\treturn\
    \ i % 2 == 0\n\tend\n\t\n\tlocal x_even = is_even(x)\n\tlocal y_even = is_even(y)\n\
    \t\n\t-- Check if x is an odd number\n\tif x_even then\n\t\tif y >= x then\n\t\
    \t\treturn y\n\t\telse\n\t\t\treturn -1\n\t\tend\n\tend\n\t\n\t-- Check if y is\
    \ an odd number\n\tif y_even then\n\t\tif x >= y then\n\t\t\treturn x\n\t\telse\n\
    \t\t\treturn -1\n\t\tend\n\tend\n\t\n\t-- Check if x and y are positive\n\tif\
    \ x >= 0 then\n\t\tif y >= 0 then\n\t\t\tif x > y then\n\t\t\t\treturn x\n\t\t\
    \telse\n\t\t\t\treturn y\n\t\t\tend\n\t\telse\n\t\t\treturn -1\n\t\tend\n\tend\n\
    \t\n\t-- Check if x and y are negative\n\tif x < 0 then\n\t\tif y >= 0 then\n\t\
    \t\tif x < y then\n\t\t\t\treturn y\n\t\t\telse\n\t\t\t\treturn -1\n\t\t\tend\n\
    \t\telse\n\t\t\treturn -1\n\t\tend\n\tend\n\t\n\t-- Check if x and y are neither\
    \ positive nor negative\n\tlocal diff = x - y\n\t\n\tif diff > 0 then\n\t\tif\
    \ y_even then\n\t\t\tif diff > abs(y_even) then\n\t\t\t\treturn y\n\t\t\telse\n\
    \t\t\t\treturn -1\n\t\t\tend\n\t\telse\n\t\t\treturn x\n\t\tend\n\telse\n\t\t\
    if x_even then\n\t\t\tif diff > abs(x_even) then\n\t\t\t\treturn x\n\t\t\telse\n\
    \t\t\t\treturn -1\n\t\t\tend\n\t\telse\n\t\t\treturn y\n\t\tend\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6o1j2e3r.lua:100:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmp6o1j2e3r.lua:100: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\t--assert(x >= y)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmwph7h0n.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\t-- Find out which number is bigger and start there:\n\tif x > y then\n\
    \t\treturn choose_num(y, x)\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph9flxbq5.lua:26: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local function evens(x)\n    return #(x:filter(function(x)\n      return\
    \ x % 2 == 0\n    end))\n  end\n  \n  local function odds(x)\n    return #(x:filter(function(x)\n\
    \      return x % 2 ~= 0\n    end))\n  end\n  \n  if x <= y then\n    return -1\n\
    \  elseif evens(x) < evens(y) and odds(x) > odds(y) then\n    return choose_num(x,\
    \ y)\n  elseif evens(x) > evens(y) and odds(x) < odds(y) then\n    return choose_num(y,\
    \ x)\n  elseif evens(x) == evens(y) and odds(x) == odds(y) then\n    return x\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1mvpbzt.lua:34:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpn1mvpbzt.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    if x < y then\n        return -1\n    end\n    local max_num = x\n \
    \   while max_num % 2 == 0 do\n        max_num = max_num / 2\n    end\n    return\
    \ max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqkfn5_c.lua:21:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpkqkfn5_c.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tif x < y then\n\t\tx, y = y, x\n\tend\n\tlocal result = 0\n\twhile y >=\
    \ x do\n\t\tresult = y + result * 2\n\t\ty = y >> 1\n\tend\n\tif y == x then\n\
    \t\tresult = y - 1\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dbc8ilc.lua:25:\
    \ expected: 14, actual: 0\nstack traceback:\n\t/tmp/tmp3dbc8ilc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x >= y then return -1 end\n  local min_num, max_num = x, y\n  while\
    \ max_num - min_num > 1 do\n    if max_num % 2 == 0 then\n      max_num = max_num\
    \ / 2\n    else\n      min_num = min_num * 2 + 1\n    end\n  end\n  return min_num\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4teocanj.lua:23:\
    \ expected: 14, actual: 25\nstack traceback:\n\t/tmp/tmp4teocanj.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then return x end\n  local z = y\n  local k = x\n  while k >\
    \ z and k ~= z do\n    k = k // 2\n  end\n  return k\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf89qud71.lua:20:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpf89qud71.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x ~= nil and y ~= nil then\n      return math.max(x, y)\n   else\n\
    \      return -1\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqj9co1ql.lua:18:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmpqj9co1ql.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    if x < y then\n        x, y = y, x\n    end\n    while y > x do\n  \
    \      if y % 2 == 0 then\n            x = x + 1\n        else\n            y\
    \ = y / 2\n        end\n    end\n    return x\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2btdfoby.lua:24:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmp2btdfoby.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    if x > y then\n        return -1\n    end\n    while y > 0 and x <=\
    \ y do\n        x, y = y, x - y\n    end\n    return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqt5crm0.lua:20:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmpxqt5crm0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   local candidate = x\n   while candidate <= y do\n      if (math.floor(candidate\
    \ / 2) % 2) == 0 then\n         return candidate\n      end\n      candidate =\
    \ candidate + 2\n   end\n   if candidate > y then\n      return -1\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4kayn5y_.lua:23:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp4kayn5y_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tfor a = x, b = y + 1 do\n\t\tif a > b or a < 1 then\n\t\t\tbreak\n\t\t\
    else\n\t\t\tif a % 2 == 0 then\n\t\t\t\tif a < b then a = b end\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\t\ta = b\n\t\tend\n\tend\n\treturn a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm_z2afg7.lua:8: 'do' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  -- check if they're even\n  if x % 2 == 0 and y % 2 == 0 then\n    local\
    \ even = x/2\n    local odd = y/2\n    local biggest = even\n    \n    if even\
    \ > odd then\n      biggest = odd\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpou5_n43i.lua:31: 'end' expected (to close 'if' at line 9)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    if x <= 0 or y <= 0 then return -1 end\n    if x > y then x, y = y,\
    \ x end\n    local z\n    for z=1, x do\n        if x % z == 0 then\n        \
    \    break\n        end\n    end\n    for z=1, y do\n        if y % z == 0 then\n\
    \            break\n        end\n    end\n    if x > y then return -1 else return\
    \ z end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9r5qgss3.lua:27:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp9r5qgss3.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x > y then\n    local m = x\n    x = y\n    y = m\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa99jiq9b.lua:27: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x > y and #x > #y then return x end\n   if x < y and #x < #y then\
    \ return y end\n   local a = x + y\n   for i = x, a + 1, y do\n      if i % 2\
    \ == 0 then\n         return i\n      end\n   end\n   return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8srk67q1.lua:9:\
    \ attempt to get length of a number value (local 'x')\nstack traceback:\n\t/tmp/tmp8srk67q1.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8srk67q1.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   for i=x,y do\n      if i % 2 == 0 then\n         return i\n      else\n\
    \         return -1\n      end\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoqtx6tz.lua:20:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpzoqtx6tz.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal limit = math.max(x,y)\n\t\n\tfor _,v in ipairs(math.floor(limit/2)\
    \ .. limit-1) do\n\t\tif v % 2 == 0 then\n\t\t\treturn v\n\t\tend\n\tend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6c5lekvo.lua:29: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x <= y then\n      if x % 2 = 0 then\n         return x\n      else\n\
    \         return y\n      end\n   else\n      if y % 2 = 0 then\n         return\
    \ y\n      else\n         return x\n      end\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8i5bfbkz.lua:9: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x <= y then\n      return -1\n   end\n   local lower = x\n   local\
    \ upper = y\n   while lower <= upper do\n      local mid = math.floor((lower +\
    \ upper) / 2)\n      if is_even( math.floor( (lower + upper) / 2) ) then\n   \
    \      upper = mid\n      else\n         lower = mid + 1\n      end\n   end\n\
    \   return lower\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp1rzmopw.lua:27:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpp1rzmopw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    if x < 0 or x > y or y < 0 then\n        return -1\n    end\n    --\
    \ Find the highest even number less than or equal to x\n    local max_num = 0\n\
    \    local x = math.ceil(x/2)\n    while x < y do\n        local num = math.floor(x/2)\n\
    \        if num % 2 == 0 then\n            if num ~= max_num then\n          \
    \      max_num = num\n            end\n        end\n        x = x+1\n    end\n\
    \    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6aihl6y.lua:29:\
    \ expected: 14, actual: 6\nstack traceback:\n\t/tmp/tmpl6aihl6y.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal i, ii, r\n\tr = 1\n\tfor i=1, (x-1) % 2+1 do\n\t\ti = ii + 1\n\t\
    \tif (x % 2 == 0) then -- Even\n\t\t\tif (y % 2 == 0) then -- Even\n\t\t\t\tif\
    \ i == (x-1)/2 then -- Found\n\t\t\t\t\tr = i\n\t\t\t\tend\n\t\t\telseif i % 2\
    \ == 0 then -- Odd\n\t\t\t\tif r < i then\n\t\t\t\t\tr = i\n\t\t\t\tend\n\t\t\t\
    end\n\t\telse -- Odd\n\t\t\tif (y % 2 == 0) then -- Even\n\t\t\t\tif i % 2 ==\
    \ 0 then -- Odd\n\t\t\t\t\tr = i\n\t\t\t\tend\n\t\t\telseif i == (x-1)/2 then\
    \ -- Found\n\t\t\t\t\tr = i\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxu1xv7me.lua:34: <eof> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tif x < y then\n\t\tx, y = y, x\n\tend\n\tif x % 2 == 0 then\n\t\tx = x\
    \ / 2\n\telse\n\t\tx = 3 * x + 1\n\tend\n\tif y % 2 == 0 then\n\t\ty = y / 2\n\
    \telse\n\t\ty = 3 * y + 1\n\tend\n\tlocal i = 0\n\twhile i <= y do\n\t\ti = i\
    \ + 1\n\t\tif i % 2 == 0 then\n\t\t\tx = x * (x + 1)\n\t\telse\n\t\t\ty = (y -\
    \ i) / 2 * 3 + 1\n\t\tend\n\tend\n\treturn x\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgzj397i.lua:36:\
    \ expected: 14, actual: 21868777753242\nstack traceback:\n\t/tmp/tmprgzj397i.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then\n    x, y = y, x\n  end\n  local num = x\n  while y > 0\
    \ do\n    num = num * 2 + 1\n    if num > y then\n      y = y-1\n    end\n  end\n\
    \  return num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7d48qh2_.lua:24:\
    \ expected: 14, actual: 65535\nstack traceback:\n\t/tmp/tmp7d48qh2_.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  -- We use -1 to indicate that there's no even number\n  local even = -1\n\
    \  -- We need to loop while there's no even number\n  while even < x and even\
    \ + 2 < y do\n    even = even + 2\n  end\n  -- We'll start at x if even is not\
    \ found\n  local result = x if even < x else x\n  -- If the even number is found,\
    \ the result is the biggest even number\n  -- smaller than x\n  if even > x then\n\
    \    while even > x and even + 2 < y do\n      even = even + 2\n    end\n    --\
    \ If the even number is found, the result is the biggest even number\n    -- larger\
    \ than x\n    if even > x then\n      result = even\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8pzk3215.lua:15: 'then' expected near 'else'\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local x, y = x + 1, y + 1\n    while x <= y do\n        local z = math.ceil(x/2)\n\
    \        if x % 2 == 0 then\n            return z\n        end\n        x = z\
    \ + 1\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0976h_5.lua:22:\
    \ expected: 14, actual: 4\nstack traceback:\n\t/tmp/tmpl0976h_5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   local i, j = 2, x\n   while i <= y do\n      if i % 2 == 0 then\n   \
    \      return i\n      else\n         i = i + j\n         j = i * i\n      end\n\
    \   end\n   if x % 2 == 0 then\n      return x\n   else\n      return -1\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8uimm8va.lua:27:\
    \ expected: 14, actual: 2\nstack traceback:\n\t/tmp/tmp8uimm8va.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    assert(x >= 0 and y > 0)\n    if x <= y then\n        return -1\n  \
    \  end\n    while x >= y do\n        x, y = x-2, y+1\n        if x == 2 then\n\
    \            return y\n        end\n    end\n    return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkyk054w.lua:24:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpmkyk054w.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\t-- The first condition is because if x = 0 then we cannot choose any \n\
    \t-- number from [x, y] inclusive.\n\tif x <= 0 then\n\t\treturn -1\n\tend\n\t\
    if y <= 0 then\n\t\treturn -1\n\tend\n\tif x > y then\n\t\tx, y = y, x\n\tend\n\
    \t-- The second condition is because the maximum number that can be \n\t-- generated\
    \ is 2 * x - 1. So if y > x - 1 then it is impossible to \n\t-- generate this\
    \ number because the number would be out of range.\n\tif x > 2 * x - 1 then\n\t\
    \treturn -1\n\tend\n\t-- The third condition is because if y is even, then the\
    \ biggest number \n\t-- that can be generated is x - 1. So if x is odd, then we\
    \ can choose\n\t-- any number from [x, y] inclusive.\n\tif x % 2 == 1 then\n\t\
    \treturn choose_num(x - 1, y)\n\tend\n\t-- The fourth condition is because if\
    \ y % 2 == 0, then the biggest \n\t-- number that can be generated is x - 1, and\
    \ x % 2 == 1, so it is\n\t-- impossible to generate this number because x % 2\
    \ == 0.\n\tif y % 2 == 0 then\n\t\treturn -1\n\tend\n\t-- This condition is because\
    \ if x is odd and y is even, then the biggest\n\t-- number that can be generated\
    \ is x - 1. If x is even and y is odd, \n\t-- the biggest number that can be generated\
    \ is x - 1. If x is odd\n\t-- but y is even, then the biggest number that can\
    \ be generated is \n\t-- x - 1.\n\tif x % 2 == 1 then\n\t\tif y % 2 == 1 then\n\
    \t\t\treturn choose_num(x - 1, y)\n\t\telse\n\t\t\treturn choose_num(x - 1, y\
    \ - 1)\n\t\tend\n\telse\n\t\tif y % 2 == 1 then\n\t\t\treturn choose_num(x, y\
    \ - 1)\n\t\telse\n\t\t\treturn choose_num(x - 1, y)\n\t\tend\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuk1cne0k.lua:60:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpuk1cne0k.lua:60: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tfor i = x, y-1, -1 do\n\t\tif i ~= 0\n\t\tand i ~= 1\n\t\tand i ~= -1\n\
    \t\tand i ~= -2\n\t\tand i ~= -3\n\t\tand i ~= -4\n\t\tand i ~= -5\n\t\tand i\
    \ ~= -6\n\t\tand i ~= -7\n\t\tand i ~= -8\n\t\tand i ~= -9\n\t\tand i ~= -10\n\
    \t\tand i ~= -11\n\t\tand i ~= -12\n\t\tand i ~= -13\n\t\tand i ~= -14\n\t\tand\
    \ i ~= -15\n\t\tthen return i\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0e5ywy67.lua:34:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp0e5ywy67.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\t--  base case\n\tif x < y then\n\t\tx, y = y, x\n\tend\n\t--  if there\
    \ is no even number between x and y, we return -1\n\t-- notice that x is smaller\
    \ than y here\n\tif x == y then return -1 end\n\t\n\t--  base case\n\tif x ==\
    \ 1 then return x end\n\t\n\tlocal limit = math.floor(math.sqrt(x)) + 1\n\t--\
    \  if x is even and y is odd, then return x+y/2\n\tif x % 2 == 0 and y % 2 ==\
    \ 1 then return x+y/2 end\n\t\n\t--  while we still haven't found the right answer\n\
    \tfor i = 2, limit do\n\t\t--  if x is even, then return 2x + y/i\n\t\tif x %\
    \ 2 == 0 then return 2*x + y/i end\n\t\t\n\t\t--  if y is even, then return 2x\
    \ + y/i\n\t\tif y % 2 == 0 then return 2*x + y/i end\n\t\t\n\t\t--  continue to\
    \ find the right answer\n\t\tx = x + y/i\n\tend\n\t\n\treturn -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmz66tk9.lua:41:\
    \ expected: 14, actual: 36\nstack traceback:\n\t/tmp/tmppmz66tk9.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal result = nil\n\t\n\tlocal x_div, y_div = x/2, y/2\n\twhile x_div\
    \ <= y_div do\n\t\tlocal num = x_div * x_div + y_div * y_div\n\t\tif num % 2 ~=\
    \ 0 then\n\t\t\tresult = x_div\n\t\t\tx_div = x_div + 1\n\t\telse\n\t\t\tresult\
    \ = y_div\n\t\t\ty_div = y_div + 1\n\t\tend\n\tend\n\t\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbzovwr7z.lua:28:\
    \ expected: 14, actual: 7\nstack traceback:\n\t/tmp/tmpbzovwr7z.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    for i = x, y + 1 do\n        if i ~= math.floor(i) then\n          \
    \  return i\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk9bkzou.lua:19:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpvk9bkzou.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local lx = math.floor(x / 2)\n    local ly = math.floor(y / 2)\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxw6s1htc.lua:24: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x < y then x, y = y, x\n   for i = x, y + 1 do\n      if not ((i mod\
    \ 2) == 0) then return i end\n   end\n   return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8x07vfv4.lua:10: ')' expected near 'mod'\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x <= y then\n    return -1\n  end\n  if x > y then\n    return x\n\
    \  end\n  local max = x\n  local m = y\n  while m%2 == 0 do\n    m = m/2\n   \
    \ max = max+1\n  end\n  if x > max then\n    return -1\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzysghi2l.lua:29:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpzysghi2l.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    if x < y then\n        local m\n        for m = x, y do\n          \
    \  if m % 2 == 0 then\n                if m > x then\n                    x, y\
    \ = m, y\n                else\n                    x, y = m, x\n            \
    \    end\n            end\n        end\n    end\n    return x or -1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph7iypm42.lua:27:\
    \ expected: -1, actual: 13\nstack traceback:\n\t/tmp/tmph7iypm42.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local x_even = x % 2\n    local x_odd = x % 2\n    local y_even = y\
    \ % 2\n    local y_odd = y % 2\n    if x_even ~= 0 and x_odd ~= 0 and y_even ~=\
    \ 0 and y_odd ~= 0 then\n        if x_even > x_odd then\n            return x_even\n\
    \        else\n            return x_odd\n        end\n    else\n        return\
    \ -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7xvv1vg.lua:26:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpt7xvv1vg.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then\n    x, y = y, x\n  end\n  if x == y then\n    return x\n\
    \  end\n  if x % 2 ~= 0 then\n    x, y = y, x\n  end\n  local i = x\n  while i\
    \ <= y do\n    i = i * 2 + 1\n    if i % 2 ~= 0 then\n      x, y = y, x\n    end\n\
    \  end\n  return x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9gy3bny.lua:30:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmpe9gy3bny.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal min, max = x, y\n\tif min > max then\n\t\treturn -1\n\tend\n\tlocal\
    \ x, y = min+1, max+1\n\twhile x ~= y do\n\t\tif x%2 == 0 then\n\t\t\treturn x\n\
    \t\telse\n\t\t\tx = x div 2\n\t\tend\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp09i_hrb7.lua:17: syntax error near '2'\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  -- If the range is empty, then return -1\n  if x < 1 or x > y then return\
    \ -1 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8ih3u_m1.lua:24: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local r = x\n  while r < y do\n    if r * 2 <= y then\n      r = r + 1\n\
    \    else\n      break\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r44x0g2.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp4r44x0g2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tif x < y then\n\t\treturn choose_num(y, x)\n\tend\n\tif x == y then\n\t\
    \treturn x\n\tend\n\tfor i = 2, x - 1 do\n\t\tif x % i == 0 then\n\t\t\treturn\
    \ -1\n\t\tend\n\tend\n\treturn x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7bjdk9wu.lua:25:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmp7bjdk9wu.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   for i = x+1, y do\n      if i % 2 == 0 then\n         return i\n    \
    \  end\n   end\n   return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppgse_civ.lua:21:\
    \ expected: 12354, actual: 34\nstack traceback:\n\t/tmp/tmppgse_civ.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then\n    x, y = y, x\n  end\n  \n  -- Initialize max with the\
    \ biggest even number less than or equal to x.\n  local max = x \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphxm47b03.lua:28: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x < y then\n      return -1\n   end\n   if x == y then\n      return\
    \ x\n   end\n   if x > y and x % 2 == 1 then\n      return choose_num(x-1, y)\n\
    \   end\n   if x > y and x % 2 == 0 then\n      return choose_num(x+1, y)\n  \
    \ end\n   if y > x and y % 2 == 1 then\n      return choose_num(x, y-1)\n   end\n\
    \   if y > x and y % 2 == 0 then\n      return choose_num(x, y+1)\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpni7pqyb9.lua:31:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpni7pqyb9.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then\n    return choose_num(y, x)\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0rpucu99.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local result = -1\n  while result < x and result < y do\n    if x == result\
    \ + 1 then\n      x = x + 1\n      y = y - 1\n    else\n      result = result\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yj_9c8n.lua:23:\
    \ expected: 14, actual: 13\nstack traceback:\n\t/tmp/tmp_yj_9c8n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local xs = x:get()\n  local ys = y:get()\n  if xs > ys then\n    local\
    \ tmp = ys -- swap x and y\n    ys = xs\n    xs = tmp\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprreg42mu.lua:29: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   for i = x, y do\n      if ((i & 1) == 0) then\n         return i\n  \
    \    end\n   end\n   return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t0tamuy.lua:19:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp9t0tamuy.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local i = 1\n  while i <= x do\n    if math.floor(i/2) == math.floor(i/2)\
    \ then\n      i = i - 1\n    else\n      i = i + 1\n    end\n  end\n  i = i -\
    \ 1\n  \n  local j = 1\n  while j <= y do\n    if math.floor(j/2) == math.floor(j/2)\
    \ then\n      j = j - 1\n    else\n      j = j + 1\n    end\n  end\n  \n  return\
    \ i - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x >= y then return x else return y end\n   local x_value = math.floor(x)\n\
    \   local y_value = math.floor(y)\n   if x_value == y_value then\n      if x ==\
    \ 1 then return -1 end\n      return -1\n   end\n   if x_value < y_value then\n\
    \      local left_value = choose_num(x_value - 2, y)\n      if left_value == -1\
    \ then return -1 end\n      local right_value = choose_num(x_value + 1, y_value)\n\
    \      if right_value == -1 then return -1 end\n      return left_value + right_value\n\
    \   else\n      local left_value = choose_num(x_value, y_value - 2)\n      if\
    \ left_value == -1 then return -1 end\n      local right_value = choose_num(x_value\
    \ + 1, y_value)\n      if right_value == -1 then return -1 end\n      return left_value\
    \ + right_value\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnujp61v.lua:33:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmpfnujp61v.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tif x > y then\n\t\tx, y = y, x\n\tend\n\tlocal function isprime(n)\n\t\
    \tlocal is_prime = true\n\t\tlocal isprime = 2\n\t\twhile isprime <= n do\n\t\t\
    \tif not (n % isprime) then\n\t\t\t\tis_prime = false\n\t\t\tend\n\t\t\tisprime\
    \ = isprime + 1\n\t\tend\n\t\treturn is_prime\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmn9v3wvg.lua:36: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal smallest\n\tlocal i = 1\n\twhile i < y do\n\t\tif i % 2 == 0 then\n\
    \t\t\tsmallest = i\n\t\tend\n\t\ti = i + 2\n\tend\n\t\n\tlocal biggest\n\ti =\
    \ 1\n\twhile i < x do\n\t\tif i % 2 == 0 then\n\t\t\tbiggest = i\n\t\tend\n\t\t\
    i = i + 2\n\tend\n\t\n\tif smallest and biggest then\n\t\treturn biggest\n\telse\n\
    \t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprp1ud4t.lua:36:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpprp1ud4t.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tif x > y then\n\t\treturn -1\n\tend\n\tif x <= 2 then\n\t\treturn 1\n\t\
    end\n\t\n\tlocal mid = math.floor((x + y) / 2)\n\t\n\tif math.floor(mid) ~= mid\
    \ then\n\t\tx = mid\n\tend\n\t\n\tlocal left = mid - 1\n\tlocal right = mid\n\t\
    \n\trepeat\n\t\tleft = math.floor((left + right) / 2)\n\t\tright = math.floor((left\
    \ + right) / 2) + 1\n\tuntil left > x\n\t\n\treturn math.max(left, right) or -1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   -- Initialize a flag\n   local flag = false -- Initialize a flag variable\n\
    \   -- Use a while loop to iterate until flag is set to true\n   while flag ==\
    \ false do\n      -- Generate a random number between x and y\n      local num\
    \ = math.random(x, y)\n      -- Check if num is even\n      if num % 2 == 0 then\n\
    \         -- Flag is true, so we return num\n         flag = true\n      -- Else,\
    \ num is not even, so we continue\n      else\n         -- We continue to iterate\
    \ until flag is set to true\n      end\n   end\n   return num\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_40a69f5.lua:29:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp_40a69f5.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local max_num\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbe0682if.lua:23: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then\n    x, y = y, x\n  end\n  local m = math.max(x, y)\n  if\
    \ m % 2 == 0 then\n    return m / 2\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptq7r15lr.lua:22:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmptq7r15lr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local range = {\n    [1] = 0,\n    [2] = 1,\n    [3] = 2,\n    [4] = 3,\n\
    \    [5] = 4,\n    [6] = 5,\n    [7] = 6,\n    [8] = 7,\n    [9] = 8,\n    [10]\
    \ = 9,\n    [11] = 10,\n  }\n  local index = range[tostring(y) - tostring(x) +\
    \ 1]\n  if index then\n    return index\n  else\n    return -1\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9g082eq1.lua:32:\
    \ expected: 14, actual: 3\nstack traceback:\n\t/tmp/tmp9g082eq1.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal max_num = (x < y) and x:(x) or y\n\tlocal i = 1\n\twhile i <= max_num\
    \ do\n\t\tlocal m = x + (y - x) * (i - 1) / 2\n\t\tif (m % 2) == 0 then\n\t\t\t\
    break\n\t\tend\n\t\tx = m\n\t\ti = i + 1\n\tend\n\treturn x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfjo0cgi6.lua:8: <name> expected near '('\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local i = x\n    while i <= y do\n        if ((x % 2) == 0 and (y %\
    \ 2) == 0) or ((x % 2) == 1 and (y % 2) == 1) then\n            return i\n   \
    \     else\n            i = i + 2\n        end\n    end\n    return -1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09ezacvk.lua:22:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmp09ezacvk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   for _, i in pairs(string.gmatch(x..y, \"([0-9]*)\")) do\n      if math.floor(i)\
    \ == i then\n         return i\n      end\n   end\n   assert(false)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4m6ts1vs.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp4m6ts1vs.lua:8: in local 'candidate'\n\t/tmp/tmp4m6ts1vs.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local lower = x\n  local upper = y\n  while lower <= upper do\n    local\
    \ result = math.floor((lower + upper) / 2)\n    if math.modf((lower + upper) /\
    \ 2)[1] <= 0.5 then\n      upper = result - 1\n    else\n      lower = result\
    \ + 1\n    end\n  end\n  return lower\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb72yzbr1.lua:12:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmpb72yzbr1.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpb72yzbr1.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local z = 0\n    while x < y do\n        z = z*10 + x%10\n        x\
    \ = x/10\n    end\n    return z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    if x <= y then\n        return -1\n    end\n    while x <= y do\n  \
    \      if x % 2 == 0 then\n            return x\n        end\n        local old_x\
    \ = x\n        x = x + 1\n    end\n    return old_x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2c94ml1g.lua:24:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmp2c94ml1g.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x<=0 or y<=0 then\n      return -1\n   end\n   if y>=x and y%2==1\
    \ then\n      local num = x\n      while num<=y and num%2==0 do\n         num\
    \ = num + 1\n      end\n      return num\n   end\n   if y<=x and y%2==0 then\n\
    \      local num = x\n      while num>=y and num%2==1 do\n         num = num -\
    \ 1\n      end\n      return num\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph48og4_q.lua:30:\
    \ expected: 14, actual: 13\nstack traceback:\n\t/tmp/tmph48og4_q.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    if x > y then x, y = y, x end\n    if x == 0 then return -1 end\n  \
    \  local i, t = 0, x - 1\n    while i <= t do\n        if y <= t then\n      \
    \      return t\n        end\n        t = t + 2\n        if t > x + 1 then return\
    \ -1 end\n        i = i + 1\n    end\n    return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6cxros_0.lua:25:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmp6cxros_0.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    for i=x, lim=y, 2 do\n        if i%2==0 then return i end\n    end\n\
    \    return -1\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work, because `x`\
    \ gets set before `lim` is initialised, so `lim` never gets initialised.\n<|/\
    \ c |>\n<| a |>\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxw8zlsta.lua:8: 'do' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local x_minus_1 = x - 1\n  local y_minus_1 = y - 1\n  local divisor =\
    \ 1 -- 1 is the biggest divisor\n  local result = x -- start with the first number\n\
    \  while x_minus_1 >= y_minus_1 do\n    divisor = divisor * x_minus_1 -- multiply\
    \ the divisor for the next iteration\n    x_minus_1 = x_minus_1 -- subtract the\
    \ divisor from the current number\n    y_minus_1 = y_minus_1 - 1 -- do the same\
    \ for y\n    result = result + divisor -- add them all together to get the result\n\
    \    if result > x then -- if the result is greater than the highest number we\
    \ could get, move to the next number\n      result = result + 1\n    end\n  end\n\
    \  if result > x then -- if the result is greater than the highest number we could\
    \ get, move to the next number\n    result = result + 1\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64pthjen.lua:30:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp64pthjen.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x > y then\n      x, y = y, x\n   end\n   for i = y, 1, -1 do\n  \
    \    if x % i == 0 then\n         return i\n      end\n   end\n   return -1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zyn3dyc.lua:22:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp4zyn3dyc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local biggest = -1\n    local num = x + y\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9zpjpann.lua:24: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\t-- Check if x and y are valid numbers\n\tif x ~= nil and y ~= nil then\n\
    \t\t-- If x is smaller than y then swap them\n\t\tif x < y then\n\t\t\tx, y =\
    \ y, x\n\t\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0yx4rtu6.lua:28: 'end' expected (to close 'if' at line 9)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x > y then\n    x, y = y, x\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiw2x5m_t.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  x = math.min(x, y) + 1 -- Because min(a, b) + 1 equals max(a, b)\n  local\
    \ res = x\n  while res <= y do\n    if res % 2 == 0 and math.floor(res / 2) ==\
    \ res then\n      break\n    end\n    res = res + 1\n  end\n  return -1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprlhsufx5.lua:22:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmprlhsufx5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then return -1 end\n  for _, value in ipairs(x) do\n    if x\
    \ <= value and y > value then \n      return value\n    end\n  end\n  return -1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbk9q0i4o.lua:20:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpbk9q0i4o.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    for _ = x, y + 1 do return end\n    return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5p2ganfn.lua:15:\
    \ expected: 14, actual: nil\nstack traceback:\n\t/tmp/tmp5p2ganfn.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tif x <= y then\n\t\t-- x is lesser than y\n\t\tif y % 2 = 0 then\n\t\t\
    \t-- y is odd, so x's even\n\t\t\t-- return (x * 2) + y\n\t\t\treturn (x * 2)\
    \ + y\n\t\telse\n\t\t\t-- y is odd, so y's even\n\t\t\t-- return x + 2 * (y /\
    \ 2)\n\t\t\treturn x + 2 * (y / 2)\n\t\tend\n\telse\n\t\t-- x is greater than\
    \ y\n\t\tif y % 2 = 0 then\n\t\t\t-- y is even, so x's even\n\t\t\t-- return (x\
    \ * 2) - y\n\t\t\treturn (x * 2) - y\n\t\telse\n\t\t\t-- y is even, so y's even\n\
    \t\t\t-- return x - 2 * (y / 2)\n\t\t\treturn x - 2 * (y / 2)\n\t\tend\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwjw9q9ew.lua:10: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local z = 1\n    while z <= y do\n        if x % z == 0 then\n     \
    \       return z\n        end\n        z = z * 2\n    end\n    return -1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqnd30aa.lua:21:\
    \ expected: 14, actual: 1\nstack traceback:\n\t/tmp/tmppqnd30aa.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tif x < y then\n\t\treturn x\n\tend\n\tif x < 0 then\n\t\treturn y\n\t\
    end\n\tif y < 0 then\n\t\treturn x\n\tend\n\tif x == 0 then\n\t\treturn y\n\t\
    end\n\tif y == 0 then\n\t\treturn x\n\tend\n\tif x % 2 == 0 and y % 2 == 0 then\n\
    \t\treturn x\n\tend\n\tif x % 2 == 0 and y % 2 == 1 then\n\t\treturn y\n\tend\n\
    \tif x % 2 == 1 and y % 2 == 0 then\n\t\treturn y\n\tend\n\tif x % 2 == 1 and\
    \ y % 2 == 1 then\n\t\treturn x\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9989gl4.lua:40:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpw9989gl4.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  -- check both numbers are positive number\n  if x >= 0 and y >= 0 then\n\
    \    -- calculate the biggest even number in the range\n    -- (x-1,y-1] to [x+1,y+1]\n\
    \    local biggest_even =\n      (x - 1) + (y - 1) + (2 * x - y - 1) + 2 * x *\
    \ (y - 1) + 2 * x * y \n    \n    \n    -- check whether the biggest even number\
    \ is the answer\n    if biggest_even % 2 == 0 then\n      return biggest_even\
    \ \n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgz0uvvaj.lua:27:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpgz0uvvaj.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal function evens(x)\n\t\tfor i = 0, x - 1 do\n\t\t\tif i % 2 ~= 0\
    \ then return false end\n\t\tend\n\t\treturn true\n\tend\n\t\n\tlocal function\
    \ high(x, y)\n\t\tlocal n = 0\n\t\tlocal i = 1\n\t\twhile i <= y do\n\t\t\tif\
    \ evens(i) then\n\t\t\t\tn = i * 2\n\t\t\t\ti = i + 1\n\t\t\telse\n\t\t\t\ti =\
    \ i + 1\n\t\t\tend\n\t\tend\n\t\treturn n\n\tend\n\t\n\treturn high(x, y)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyxd5hxk.lua:35:\
    \ expected: 14, actual: 2\nstack traceback:\n\t/tmp/tmpzyxd5hxk.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal n = nil\n\tlocal num = x\n\t\n\tif x >= y and y >= x then\n\t\t\
    n = y\n\telseif x < y and y >= x then\n\t\tn = x\n\telseif x >= y and y < x then\n\
    \t\tn = y\n\telseif x < y and y < x then\n\t\tn = x\n\tend\n\t\n\tif n ~= nil\
    \ then\n\t\twhile true do\n\t\t\tif num % 2 == 0 then\n\t\t\t\treturn n\n\t\t\t\
    end\n\t\t\t\n\t\t\tnum = num/2\n\t\tend\n\tend\n\t\n\treturn -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkow9xnk9.lua:37:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpkow9xnk9.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local min\n    min = x -- initialize min\n    for _ = 1, y do\n    \
    \    if min < x then\n            min = x\n        end\n        x = x + 2 -- next\
    \ number in range\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrqyidq2.lua:22:\
    \ expected: 14, actual: 40\nstack traceback:\n\t/tmp/tmprrqyidq2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tif x > y then\n\t\treturn -1\n\telseif x < 1 then\n\t\treturn -1\n\telseif\
    \ x <= y then\n\t\tlocal i = 1\n\t\twhile i <= y do\n\t\t\tif i % 2 == 0 then\n\
    \t\t\t\treturn i\n\t\t\tend\n\t\t\ti = i + 1\n\t\tend\n\telse\n\t\tlocal i = 1\n\
    \t\twhile i <= x do\n\t\t\tif i % 2 == 0 then\n\t\t\t\treturn i\n\t\t\tend\n\t\
    \t\ti = i + 1\n\t\tend\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplas3zhb7.lua:35:\
    \ expected: 14, actual: 2\nstack traceback:\n\t/tmp/tmplas3zhb7.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local x_min = math.min(x, y)\n  local x_max = math.max(x, y)\n  local\
    \ evens = 0\n  local odds = 0\n  -- Look for an even number between x and y.\n\
    \  for i = x_min, x_max, 2 do\n    if i % 2 == 0 then\n      evens = evens + 1\n\
    \      if evens == 1 then return i end\n    end\n  end\n  -- Look for an odd number\
    \ between x and y.\n  for i = x_min, x_max, 2 do\n    if i % 2 == 1 then\n   \
    \   odds = odds + 1\n      if odds == 1 then return i end\n    end\n  end\n  return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_sdundo.lua:32:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpl_sdundo.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\t-- base case\n\tif x < 1 or y < 1 then return -1 end\n\t\n\t-- base cases\n\
    \tif x == y then return x end\n\tif x % 2 == 0 and y % 2 == 0 then return x end\n\
    \t\n\t-- recursive case\n\tlocal x, y = x - 1, y - 1\n\tlocal max = choose_num(x,\
    \ y)\n\tif max > -1 then\n\t\treturn max\n\telse\n\t\treturn -1\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4a97i8po.lua:28:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmp4a97i8po.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then\n    return -1\n  end\n  local max_num = 0\n  local max_num_index\
    \ = 0\n  for i = x, y do\n    if i % 2 == 0 then\n      max_num = math.max(max_num,\
    \ i)\n      max_num_index = i\n    end\n  end\n  return max_num_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8rxrlwj2.lua:25:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmp8rxrlwj2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   local num = x\n   if y == num then\n      return -1\n   elseif y < num\
    \ then\n      return choose_num(y, num) + 1\n   else\n      return choose_num(y,\
    \ num) + 1\n   end\nend\n</cell>\n<text>\nProblem 4\nThe function should take\
    \ a string as input and return a string as output.\nIf the input string consists\
    \ only of lower case letters, the function should return the string itself.\n\
    If the input string consists only of upper case letters, then the function should\
    \ convert the string into all lower case letters.\nIf the input string consists\
    \ only of digits, then the function should convert the string into all upper case\
    \ letters.\nOtherwise, if the input string consists of any mix of upper case and\
    \ lower case letters and digits, then the function should convert the string into\
    \ all lower case letters and all upper case letters and digits.\nFor example,\
    \ if the input is \"abc123\", then you should return \"Abc123\".\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppw90934p.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    if x > y then\n        x, y = y, x\n    end\n    if x == y then\n  \
    \      return y\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1u2q_ngh.lua:28: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x >= y then\n    return -1\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_c6qujpi.lua:25: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local x_int, y_int = x+1, y+1\n    while x_int <= y_int do\n       \
    \ local is_even = x_int % 2 == 0 and y_int % 2 == 0\n        if is_even then\n\
    \            return x_int\n        end\n        x_int, y_int = (x_int + 1) + (x_int\
    \ / 2), y_int + (y_int / 2)\n    end\n    return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6fw6irl.lua:22:\
    \ expected: 14, actual: 6189645276570042\nstack traceback:\n\t/tmp/tmpx6fw6irl.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local x, y = tonumber(x), tonumber(y)\n    if x < 0 or y <= x then \n\
    \        return -1\n    end\n    if x >= y and x >= y then\n        return x\n\
    \    end\n    if y >= x and y >= x then\n        return y\n    end\n    \n   \
    \ -- The function should return the greatest even number that is in \n    -- range\
    \ [x, y] inclusive.\n    -- The base case is when the two numbers are the same.\n\
    \    if x == y then\n        return x\n    end\n    \n    -- The general case\
    \ when x and y are both odd.\n    local even = false\n    if x % 2 == 0 and y\
    \ % 2 == 1 then\n        even = true\n    else\n        if x % 2 == 1 and y %\
    \ 2 == 0 then\n            even = true\n        elseif x % 2 == 1 and y % 2 ==\
    \ 1 then\n            return x\n        end\n    end\n    \n    if even then\n\
    \        if x <= y then\n            x, y = y, x\n        end\n        \n    \
    \    local max_num = x\n        local min_num = y\n        \n        while true\
    \ do\n            -- Find the max even number that is in the range [min_num, max_num].\n\
    \            local max = max_num * 2\n            if max < min_num then\n    \
    \            -- The first even number is in the range.\n                return\
    \ max\n            end\n            \n            -- Find the next even number\
    \ that is in the range [min, max].\n            max_num = max\n            min\
    \ = max - 2\n            \n            if min < 0 then\n                -- The\
    \ last even number is in the range.\n                return min\n            end\n\
    \        end\n    end\n    \n    -- When x is even, y is odd and bigger than x.\
    \ x should be the greater even \n    -- number that fits in the range.\n    local\
    \ max_num = x\n    if y % 2 == 1 then\n        -- If y is odd, then x should be\
    \ the greater even number that fits in the \n        -- range.\n        max_num\
    \ = x\n        \n        -- Find a biggest even number that is in the range [x,\
    \ y].\n        while true do\n            local max = max_num * 2\n          \
    \  if max < y then\n                -- The first even number is in the range.\n\
    \                return max\n            end\n            \n            -- Find\
    \ the next even number that is in the range [min, max].\n            max_num =\
    \ max\n            min = max - 2\n            \n            if min < 0 then\n\
    \                -- The last even number is in the range.\n                return\
    \ min\n            end\n        end\n    end\nend\n</cell>\n<code language=xeus-cling-cpp14>\n\
    assert(choose_num(1, 3) == 2)\nassert(choose_num(3, 2) == 1)\nassert(choose_num(12,\
    \ 15\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8ho8i1t3.lua:92: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local z\n    local counter = 1000\n    local flag = 0\n    local xx,\
    \ yy, zz, ww = x, y, x, y\n    while counter do\n        z = math.ceil(xx / yy)\n\
    \        ww = ww * yy\n        if z == 0 then\n            if ww == 1 then\n \
    \               return x\n            else\n                return -1\n      \
    \      end\n        end\n        flag = ww\n        xx = xx - zz\n        yy =\
    \ yy - zz\n        if flag < counter then\n            counter = flag\n      \
    \  end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f00323j.lua:34:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmp6f00323j.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x > y then\n    x, y = y, x\n  elseif x == 0 then\n    return y\n \
    \ else\n    local m\n    local n = y\n    if x < y then\n      m = x\n    else\n\
    \      m = y\n    end\n    repeat\n      n = n/2\n    until n < m\n    if n %\
    \ 2 == 0 then\n      return n\n    end\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjb8p_mm.lua:33:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpyjb8p_mm.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal max\n\tlocal max_i\n\t\n\t-- Check if x or y is a natural number.\n\
    \tif x > y or x <= 0 or y <= 0 then\n\t\treturn -1\n\tend\n\t\n\t-- Check if x\
    \ is even. x % 2 should be equal to 1.\n\tif x % 2 == 0 then\n\t\t-- If x is even,\
    \ then check if y is even.\n\t\tif y % 2 == 0 then\n\t\t\t-- x is even, so y's\
    \ even too. Now we can find the biggest\n\t\t\t-- even number between them.\n\t\
    \t\tif x > y then\n\t\t\t\tmax = x\n\t\t\t\tmax_i = x\n\t\t\telse\n\t\t\t\tmax\
    \ = y\n\t\t\t\tmax_i = y\n\t\t\tend\n\t\t\t\n\t\t\t-- Increase x and y by one.\n\
    \t\t\tx = x + 1\n\t\t\ty = y + 1\n\t\telse\n\t\t\t-- If y is not even, then max\
    \ becomes x if x > y else y.\n\t\t\tmax = x\n\t\t\tmax_i = x\n\t\tend\n\telse\n\
    \t\t-- If x is not even, then check if y is even.\n\t\tif y % 2 == 0 then\n\t\t\
    \t-- If y is even, then max becomes y if x > y else x.\n\t\t\tmax = y\n\t\t\t\
    max_i = y\n\t\telse\n\t\t\t-- If y is not even, then max becomes x if x > y else\
    \ y.\n\t\t\tmax = x\n\t\t\tmax_i = x\n\t\tend\n\tend\n\t\n\t-- Check if x is greater\
    \ or equal than y.\n\tif x >= y then\n\t\t-- If x is greater or equal than y,\
    \ then max becomes max + 1.\n\t\tmax = max + 1\n\telse\n\t\t-- If y is not greater\
    \ or equal than x, then max becomes max + 1.\n\t\tmax = max + 1\n\tend\n\t\n\t\
    -- Check if max is even.\n\tif max % 2 == 0 then\n\t\t-- If max is even, then\
    \ max should be increased by 1.\n\t\tmax = max + 1\n\tend\n\t\n\t-- Check if max\
    \ is greater than x and max is greater than y.\n\tif x > y and max > x then\n\t\
    \t-- If max is greater than x and max is greater than y, return max.\n\t\treturn\
    \ max\n\telseif y > x and max > y then\n\t\t-- If max is greater than y and max\
    \ is greater than x, return max.\n\t\treturn max\n\tend\n\t\n\t-- If max is not\
    \ greater than x and max is not greater than y, then max \n\t-- should be decreased\
    \ by 1.\n\tmax = max - 1\t\n\t\n\treturn max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1ayqifp.lua:85:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpr1ayqifp.lua:85: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   for x = x,y do \n      if x % 2 == 0 then return x end\n   end\n   return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphh3_ikhl.lua:17:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmphh3_ikhl.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local a = math.abs(x-y)\n    local b = (math.floor(a/2) - math.floor(a/2)\
    \ % 2)\n    return x + (b == 0 and a or b)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9qsid1g.lua:16:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmpn9qsid1g.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then\n    x, y = y, x\n  end\n  while y < x do\n    if x % 2\
    \ == 0 then\n      x, y = x - 1, y\n    else\n      x, y = y + 1, x\n    end\n\
    \  end\n  return x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprlznu2mu.lua:24:\
    \ expected: 14, actual: 13\nstack traceback:\n\t/tmp/tmprlznu2mu.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  -- TODO: Replace this implementation with faster algorithm.\n  if x <\
    \ y then\n    x, y = y, x\n  end\n  local x_incr = x - 1\n  local x_start = x_incr\
    \ + 2\n  local x_end = x_start + x_incr\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpupcgqtu4.lua:29: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    if x <= y then\n        local biggest_even_number = x\n        local\
    \ i\n        for i = y, 1, -1 do\n            local tmp_even_number = x\n    \
    \        tmp_even_number = tmp_even_number * 2\n            tmp_even_number =\
    \ math.floor(tmp_even_number / 2)\n            if tmp_even_number < biggest_even_number\
    \ then\n                biggest_even_number = tmp_even_number\n            end\n\
    \        end\n        return biggest_even_number\n    end\n    return -1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3qq09oy6.lua:27:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmp3qq09oy6.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  -- The first step is to calculate the difference between x and y\n  --\
    \ which is represented as a string:\n  local diff = \"\"\n  while y ~= x do\n\
    \    diff = diff .. tostring(y - x + 1)\n    y = y - 1\n  end\n  -- Now, we convert\
    \ that string into an integer:\n  local num = tonumber(diff)\n  -- We return -1\
    \ if there's no such number:\n  if num == nil then\n    return -1\n  end\n  --\
    \ Otherwise, if the number is bigger than the given arguments, then we\n  -- return\
    \ the number:\n  if num > x and num > y then\n    return num\n  elseif num < x\
    \ and num < y then\n    return x\n  else\n    return y\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbj2x1yz_.lua:35:\
    \ expected: 14, actual: 432\nstack traceback:\n\t/tmp/tmpbj2x1yz_.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x <= y then\n      return y\n   else\n      return x\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7emh552c.lua:18:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmp7emh552c.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal biggest = math.max(x,y)\n\tif biggest == x or biggest == y then\
    \ return -1 end\n\t\n\t-- Go through every number between x and y and find the\
    \ biggest one that \n\t-- evenly divides them\n\tlocal num = biggest\n\twhile\
    \ num > 1 do\n\t\tif num % 2 == 0 then\n\t\t\tbiggest = math.max(biggest, num)\n\
    \t\telse\n\t\t\tnum = math.floor(num / 2)\n\t\tend\n\tend\n\t\n\t-- If biggest\
    \ still wasn't big enough to evenly divide it, that's okay\n\treturn biggest +\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9of4gxi.lua:29:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpu9of4gxi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal xs = x > y and 1 or -1\n\tlocal ys = x < y and 1 or -1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpta35icb7.lua:24: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   for i = x, y + 1 do\n      if i / 2 ~= math.floor(i/2) and i ~= 0 then\n\
    \         return i\n      end\n   end\n   return -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvw_kv_h.lua:19:\
    \ expected: 14, actual: 13\nstack traceback:\n\t/tmp/tmprvw_kv_h.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then\n    return choose_num(y, x)\n  else\n    if x == 2 or x\
    \ == 3 then\n      return  x\n    else if x == 4 or x == 5 then\n      return\
    \ y\n    end\n    return choose_num(x - y, x - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp4rmj2mp.lua:33: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then\n    return choose_num(y, x)\n  elseif x == y then\n   \
    \ return x\n  elseif y > x then\n    return choose_num(x, y - 1)\n  else\n   \
    \ return -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_z78w6.lua:22:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpfn_z78w6.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local n1, n2 = math.modf(x)\n    if n1 < n2 then\n        return n1\
    \ + y\n    else\n        return n2 + y\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnsr91_ho.lua:19:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmpnsr91_ho.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x >= y then return x else return y end\n   local num = x\n   while\
    \ true do\n      if num % 2 == 0 then return num end\n      num = num >> 1\n \
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8sqg_9_.lua:19:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmpt8sqg_9_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local function choose_num_aux(first, second)\n        if first >= second\
    \ then return -1 end\n        local last_odd = 1\n        for i = 1, second do\n\
    \            last_odd = last_odd + 1\n            if last_odd % 2 ~= 0 then return\
    \ -1\n            end\n        end\n        local last_even = 1\n        for i\
    \ = 1, second do\n            last_even = last_even * 2\n        end\n       \
    \ local last_odd_plus_last_even = last_odd + last_even\n        local first_plus_last_odd\
    \ = first + last_odd\n        if first_plus_last_odd > x or first_plus_last_odd\
    \ < y\n            or last_odd_plus_last_even > x or last_odd_plus_last_even <\
    \ y then\n            return -1\n        end\n        return first_plus_last_odd\n\
    \    end\n    return choose_num_aux(x, y)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjiuxw07y.lua:34:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpjiuxw07y.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then\n    x, y = y, x\n  end\n  if x <= 0 then\n    return -1\n\
    \  end\n  -- Choose the smallest even-divisor larger than x\n  local smallest\
    \ = x\n  for i = 3, x/2, 2 do\n    if x % i == 0 then\n      smallest = i\n  \
    \  end\n  end\n  -- If the smallest even-divisor is larger than y, the answer\
    \ is -1\n  if smallest >= y then\n    return -1\n  end\n  -- Otherwise, return\
    \ the smallest odd divisor that is larger than y\n  local answer = x\n  for i\
    \ = 1, smallest do\n    local div = x % i + 1\n    if div > 0 then\n      break\n\
    \    end\n  end\n  return answer + y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfnyu8g1.lua:39:\
    \ expected: 14, actual: 27\nstack traceback:\n\t/tmp/tmpxfnyu8g1.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tif x <= y then\n\t\treturn x\n\telse\n\t\treturn y\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsoblx2bk.lua:18:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpsoblx2bk.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x < y then\n      return choose_num(y, x)\n   else\n      if x ==\
    \ y then\n         return x\n      else\n         if x % 2 == 0 then\n       \
    \     if y % 2 == 0 then\n               return x + (y - x)\n            else\n\
    \               return choose_num(y, x//2)\n            end\n         else\n \
    \           if y % 2 == 0 then\n               return choose_num(x//2, y)\n  \
    \          else\n               return -1\n            end\n         end\n   \
    \   end\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9a6gi4u.lua:34:\
    \ expected: 14, actual: 3\nstack traceback:\n\t/tmp/tmpn9a6gi4u.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
