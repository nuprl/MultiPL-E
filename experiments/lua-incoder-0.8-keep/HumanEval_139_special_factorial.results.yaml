name: HumanEval_139_special_factorial
language: lua
results:
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0)\n  if n == 0 then\n    return 1\n  end\n  return n * special_factorial(n\
    \ - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8stponop.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp8stponop.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"n must be positive\")\n  if n == 1 then\n    return 1\n  end\n\
    \  local result = 1\n  for i = 1, n do\n    result = result * (i - 1)\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczymtalv.lua:24:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmpczymtalv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n < 1 then return 1 end\n    local factorial = 1\n    for _ = 1, n do\n\
    \        factorial = factorial * factorial\n    end\n    return factorial\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1w8jh7_.lua:21:\
    \ expected: 288, actual: 1\nstack traceback:\n\t/tmp/tmpj1w8jh7_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    local factorial = 1\n    for i = 1, n do\n        factorial = factorial *\
    \ (n - 1)\n    end\n    return factorial\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4jneu16w.lua:20:\
    \ expected: 288, actual: 81\nstack traceback:\n\t/tmp/tmp4jneu16w.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n >= 1 then\n    return math.factorial(n) * special_factorial(n - 1)\n \
    \ else\n    return 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz6f_x9fx.lua:11:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmpz6f_x9fx.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpz6f_x9fx.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n == 0 then return 1 end\n    local factorial = 1\n    for i=1, n do\n\
    \        factorial = factorial * (i - 1)\n    end\n    return factorial\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk6ll1sj.lua:21:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmpvk6ll1sj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   if n == 1 then\n      return 1\n   elseif n <= 0 then\n      return nil\n\
    \   elseif n == 2 then\n      return special_factorial(n - 1) * n\n   else\n \
    \     return special_factorial(n - 1) * n + special_factorial(n - 2) * n^2\n \
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxit5dvj.lua:24:\
    \ expected: 288, actual: 92\nstack traceback:\n\t/tmp/tmpzxit5dvj.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    assert(n > 0, 'Input number must be positive')\n    local factorial = 1\n\
    \    while n > 0 do\n        factorial = factorial * n\n        n = n - 1\n  \
    \  end\n    return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa01opnzn.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpa01opnzn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return nil\n  end\n  local factorial = 1\n  for i = 1, n\
    \ do\n    factorial = factorial * (i - 1)\n  end\n  return factorial\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09guzc0h.lua:23:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmp09guzc0h.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  local fact = 1\n  local i = 1\n  while i <= n do\n    fact = fact * (i + 1)\n\
    \    i = i + 1\n  end\n  return fact\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxhvm8zwi.lua:22:\
    \ expected: 288, actual: 120\nstack traceback:\n\t/tmp/tmpxhvm8zwi.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"The number must be positive in special_factorial(n)\"\
    );\n  end\n  if n == 1 then\n    return 1;\n  else\n    return n*(n-1)*(2*n-2)*(3*n-3)*(4*n-4)\
    \ -- n!\n\t* (factorial(2*n)*factorial(2*n-2)) -- n-2!\n\t* (factorial(3*n)*factorial(3*n-3))\
    \ -- n-3!\n\t* (factorial(4*n)*factorial(4*n-4));\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphooooe5c.lua:17:\
    \ attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmphooooe5c.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmphooooe5c.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n >= 1 then\n    if n%2 then\n      return special_factorial(n-1) * n\n\
    \    else\n      return special_factorial(n-1) * 2 * n\n    end\n  else\n    return\
    \ 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n5bbmw8.lua:24:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp2n5bbmw8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpequqjp7t.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \tlocal nfact = 1\n\tfor i = 1, n do\n\t\tnfact = nfact * (n - i)\n\tend\n\treturn\
    \ nfact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8dapkdz.lua:20:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmpt8dapkdz.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   if n < 2 then\n      return 1\n   end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbc4xss02.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n <= 0 then return 0 end\n    local factorial = 1\n    for i = 2, n do\n\
    \        factorial = factorial * i\n    end\n    return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7g53ex0g.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp7g53ex0g.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   if n == 1 then\n      return 1\n   else\n      return (n * special_factorial(n-1))\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6mxtipd.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpd6mxtipd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  local fact = 1\n  for i = 1, n do\n    fact = fact * i\n  end\n  return fact\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7566siqu.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp7566siqu.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0, \"Negative factorial is not defined yet.\")\n  local factorial\
    \ = 1\n  for i = 1, n do\n    factorial *= i\n  end\n  return factorial\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_u1d6btk.lua:13: syntax error near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"Error: factorial number must be positive\")\n  if n == 0 then\
    \ return 1 end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * (i - 1)\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp31blwlnx.lua:22:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmp31blwlnx.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n ~= math.floor(n) then\n    return nil\n  elseif n == 1 then\n    return\
    \ 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa36_sf1s.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpa36_sf1s.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, 'The given value should be positive.')\n  if n == 0 then\n  \
    \  return 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp63a4_oou.lua:24: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n < 1 then\n        return nil\n    end\n    local factorial = 1\n   \
    \ for i = 1, n do\n        factorial = factorial * i\n    end\n    return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp996gy3gn.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp996gy3gn.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  local factorial = 1\n  local factorial_value = 1 -- initialize factorial_value\
    \ to 1\n  for i = 1, n do\n    factorial = factorial * i\n    factorial_value\
    \ = factorial_value * i\n  end\n  return factorial_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8dx204hu.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp8dx204hu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   assert(n > 0, \"Error: factorial is only defined for n > 0\")\n   if n <=\
    \ 1 then\n      return 1\n   else\n      return n * special_factorial(n - 1)\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmt8m65hp.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmt8m65hp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0)\n  local factorial = math.factorial(n) -- n!\n  for i = 2, n\
    \ do\n    factorial = factorial * (i - 1)!\n  end\n  return factorial\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2d1zdi6o.lua:13: unexpected symbol near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 1 then\n    return 1\n  elseif n < 0 then\n    return special_factorial(-n)\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnyhuujn3.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   if n < 0 then\n      return nil\n   elseif n == 0 then\n      return 1\n \
    \  else\n      return n * special_factorial(n - 1)\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv35tiybp.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpv35tiybp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \t-- Handle special cases\n\tif n < 2 then\n\t\treturn 1\n\tend\n\tif n == 1 then\n\
    \t\treturn 1\n\tend\n\tif n < 4 then\n\t\treturn n * special_factorial(n-1)\n\t\
    end\n\tlocal product = 1\n\t-- Multiply by (n-1)!\n\tproduct = product * special_factorial(n\
    \ - 1)\n\t-- Multiply by (n-2)!\n\tproduct = product * special_factorial(n - 2)\n\
    \t-- Multiply by (n-3)!\n\tproduct = product * special_factorial(n - 3)\n\t--\
    \ Multiply by (n-4)!\n\tproduct = product * special_factorial(n - 4)\n\t-- Multiply\
    \ by (n-5)!\n\tproduct = product * special_factorial(n - 5)\n\treturn product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1zmbqjmm.lua:37:\
    \ expected: 288, actual: 12\nstack traceback:\n\t/tmp/tmp1zmbqjmm.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    local factorial = 1\n    for i = 1, n do\n        factorial *= i\n    end\n\
    \    return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdijxlviq.lua:12: syntax error near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The factorial of a negative integer isn't defined\")\n  assert(n\
    \ >= 0, \"factorial only defined for integers > 0\")\n  local result = 1\n  local\
    \ i = 1\n  while i <= n do\n    result = result * i\n    i = i + 1\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfenuyufu.lua:24:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpfenuyufu.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n <= 1 then\n    return 1\n  else\n\
    \    return n * special_factorial(n-1)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37e5k8w2.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp37e5k8w2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then return nil end\n  local factorial_array = array.replicate(n,\
    \ 1)\n  for i = 2, n do\n    factorial_array = factorial_array * i\n  end\n  return\
    \ factorial_array[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpygxuryjx.lua:11:\
    \ attempt to index a nil value (global 'array')\nstack traceback:\n\t/tmp/tmpygxuryjx.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpygxuryjx.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 0 then\n    return 1\n  end\n  return n * special_factorial(n - 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_foj2b4.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp5_foj2b4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n==0 then\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2aih1agm.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp2aih1agm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   -- Base case is when n is 0\n   if n == 0 then\n      return 1\n   end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe4b7z9uv.lua:24: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   local nfactorial = 1\n   for i = 1, n do\n      nfactorial = nfactorial *\
    \ i\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp349rdnme.lua:24: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"A factorial of a negative integer is not defined.\")\n  assert(n\
    \ <= 17, \"factorial: argument must be between 1 and 17\")\n  local result = 1\n\
    \  for i = 2, n do\n    result = result * i\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp300kevju.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp300kevju.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \tlocal ret = 1\n\tlocal i = 1\n\twhile i <= n do\n\t\tret = ret * i\n\t\ti =\
    \ i + 1\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdm1azzyy.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpdm1azzyy.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 1 then\n    return 1\n  else\n    return (n * special_factorial(n -\
    \ 1))\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwq7mg7s_.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwq7mg7s_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 1 then return 1 else n * special_factorial(n - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjj2kjuco.lua:10: syntax error near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    local fact = 1\n    for i = 1, n do\n        fact = fact * i\n    end\n \
    \   return fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjawhyzn4.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpjawhyzn4.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwg6o1z3s.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwg6o1z3s.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  local result = 1\n  for i = 1, n do\n\
    \    result = result * (i + 1)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6luml5mh.lua:23:\
    \ expected: 288, actual: 120\nstack traceback:\n\t/tmp/tmp6luml5mh.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    print(\"\\nThe factorial of the negative value must be positive\"\
    )\n    return\n  end\n  if n <= 1 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqwsuh_x2.lua:27: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 or n == 1 then return 1 end\n  local factorial = math.factorial(n);\n\
    \  factorial = factorial / (factorial * (n - 1));\n  return factorial;\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzuweaftf.lua:11:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmpzuweaftf.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpzuweaftf.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    local factorial = 1\n    for i = 1, n do\n        factorial = factorial *\
    \ (i - 1)\n    end\n    return factorial\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5n8jil8.lua:20:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmpl5n8jil8.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then return 1 end\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplq_4nakv.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmplq_4nakv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 1 then\n    return 1\n  else\n    local factorial = 1\n    for i =\
    \ 2, n do\n      factorial = factorial * i\n    end\n    return factorial\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4t30c5e.lua:24:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph4t30c5e.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    local fact = 1\n    local factorial = 1\n    for i = 1, n do\n        fact\
    \ = fact * (i - 1)\n        factorial = factorial * (i + 1)\n    end\n    return\
    \ fact * factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2xb91r8.lua:22:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmpd2xb91r8.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfr3w4oz0.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpfr3w4oz0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0)\n  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgauze6vq.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpgauze6vq.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphv9bz4du.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmphv9bz4du.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, 'factorial is undefined for negative or zero inputs')\n  if n\
    \ == 0 then\n    return 1\n  elseif n <= 1 then\n    return 1\n  else\n    return\
    \ n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphr8kzv1n.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmphr8kzv1n.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n < 0 then\n    return nil\n  elseif\
    \ n < 1 then\n    return special_factorial(abs(n))\n  elseif n > 0 then\n    return\
    \ n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhk8fjmj.lua:24:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpdhk8fjmj.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 1)\n  if n == 1 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo852dd2f.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpo852dd2f.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n==0 then\n    return 1\n  elseif n==1 then\n    return n\n  else\n    return\
    \ n * special_factorial(n-1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2udltftm.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp2udltftm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 or n == 1 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6jnn_aam.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp6jnn_aam.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * (n-i+1)\n\
    \  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp04b_956z.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp04b_956z.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"n must be bigger than 0\")\n  return math.factorial(n) .. \"\
    ! * \" .. special_factorial(n-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp43bet_ny.lua:11:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmp43bet_ny.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp43bet_ny.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \tassert(type(1) <= n and n <= 0)\n\tif n == 1 then\n\t\treturn 1\n\telseif n\
    \ <= 1 then\n\t\treturn 0\n\telse\n\t\treturn special_factorial(n-1) * n\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn46_rxs8.lua:10:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpn46_rxs8.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpn46_rxs8.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 0 then\n    return 1\n  end\n  if n == 1 then\n    return 1\n  end\n\
    \  return n * special_factorial(n - 1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqa3wwdk.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpyqa3wwdk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   if n < 0 then\n      error(\"special_factorial() received an invalid input:\
    \ \" .. n)\n   elseif n < 2 then\n      return 1\n   else\n      local product\
    \ = 1\n      for i=2,n do product = product * (i-1) end\n      return product\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xgu7hz4.lua:24:\
    \ expected: 288, actual: 6\nstack traceback:\n\t/tmp/tmp4xgu7hz4.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then return 1 end\n  return n * special_factorial(n - 1)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoh40vm5j.lua:17:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpoh40vm5j.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    assert(n > 0, 'The factorial of a negative number is undefined.')\n    local\
    \ fact = 1\n    for i = 1, n do\n        fact = fact * i\n    end\n    return\
    \ fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq6k1q2n.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpgq6k1q2n.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then\n    error(\"The special factorial of a negative integer is not\
    \ defined\")\n  end\n  local factorial = 1\n  for i = 2, n do\n    factorial =\
    \ factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcoxchy6q.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpcoxchy6q.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    assert(n >= 0, \"Negative factorial is not defined. Please check your input.\"\
    )\n    local result = 1\n    for i = 2, n do\n        result = result * i\n  \
    \  end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdk827ol2.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpdk827ol2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  local fact = 1\n  for i = 1, n do\n    fact = fact * i\n  end\n  return fact\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxtizw05e.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpxtizw05e.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then return 1 end\n  local factorial = 1\n  for i = 2, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuse_gs7x.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpuse_gs7x.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0)\n  if n == 1 then\n    return 1\n  end\n  if n == 2 then\n  \
    \  return 2\n  end\n  return n * special_factorial(n - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp953wg74j.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp953wg74j.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then return 0 end\n  local fact = 1\n  for i = 1, n do\n    fact =\
    \ fact * (i + 1)\n  end\n  return fact\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjf54_l_u.lua:21:\
    \ expected: 288, actual: 120\nstack traceback:\n\t/tmp/tmpjf54_l_u.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   if n == 0 then\n      return 1\n   end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvoj3lu_n.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(type(n) == \"number\")\n  assert(n > 0)\n  local factorial = 1\n  for\
    \ i = 1, n do\n    factorial = factorial * (i + 1)\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqm3uf4c.lua:22:\
    \ expected: 288, actual: 120\nstack traceback:\n\t/tmp/tmppqm3uf4c.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n == 0 then\n        return 1\n    end\n    if n == 1 then\n        return\
    \ 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprxjpt1d7.lua:26: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \tassert(n > 0, \"Error: the factorial of a negative value is not defined\")\n\
    \tlocal result = 1\n\twhile n > 1 do\n\t\tresult = result * n\n\t\tn = n - 1\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67isetzh.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp67isetzh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n < 0 then\n        return error(\"Negative number\", n)\n    end\n  \
    \  if n == 0 then\n        return 1\n    end\n    return n * special_factorial(n\
    \ - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaadsux_p.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpaadsux_p.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0, \"Negative factorial numbers are not allowed\")\n  assert(n\
    \ > 0, \"The factorial of 0 is not allowed\")\n  local result = 1\n  for i = 1,\
    \ n do\n    result = result * i\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2w_gdmj.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpt2w_gdmj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwwh7cl49.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwwh7cl49.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0, 'n must be non-negative')\n  local fact = 1\n  repeat\n    fact\
    \ = fact * n\n    N = N + 1\n  until N > n\n  return fact\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpopwzgf1q.lua:14:\
    \ attempt to perform arithmetic on a nil value (global 'N')\nstack traceback:\n\
    \t/tmp/tmpopwzgf1q.lua:14: in local 'candidate'\n\t/tmp/tmpopwzgf1q.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then\n    return 1\n  else\n    return (n * special_factorial(n -\
    \ 1))\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop90roi9.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpop90roi9.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n <= 1 then\n    return 1\n  else\n\
    \    return math.factorial(n)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpikm70arq.lua:15:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmpikm70arq.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpikm70arq.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n == 0 then\n        return 1\n    end\n    return n * special_factorial(n\
    \ - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprd0uwu9f.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmprd0uwu9f.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcdfw1g4.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmppcdfw1g4.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpescr3l9k.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpescr3l9k.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    local factorial = 1\n    for i = 2, n do\n        factorial = factorial *\
    \ i\n    end\n    return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmnsxgvgw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmnsxgvgw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n == 0 then\n        return 1\n    elseif n == 1 then\n        return\
    \ n\n    elseif n > 1 then\n        return n * special_factorial(n - 1)\n    else\n\
    \        error(\"Error with special_factorial, invalid number entered\")\n   \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4o2izgd.lua:24:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpx4o2izgd.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   if n < 2 then\n      return 1\n   else\n      return n * special_factorial(n\
    \ - 1)\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6h2t250.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpa6h2t250.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    local factorial = 1\n    for i =\
    \ 1, n do\n      factorial = factorial * (i - 1)!\n    end\n    return factorial\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxnjpopu4.lua:15: unexpected symbol near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"special_factorial: argument must be a positive integer\"\
    )\n  end\n  if n==0 then\n    return 1\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpavegl5py.lua:26: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  -- Special cases are handled in special_factorial.lua\n  if n < 2 then return\
    \ 1 end\n  return n*(n-1)*(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetaa3d0k.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpetaa3d0k.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    local factorial = 1\n    for i = 1, n do\n        factorial = factorial *\
    \ i\n    end\n    return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wdrsbxi.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_wdrsbxi.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then return 1 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_yz8fnaw.lua:21: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \tassert(type(n) == \"number\", \"The input must be a number\")\n\tassert(n >=\
    \ 0, \"Negative factorial is not define\")\n\tlocal factorial_function = {}\n\t\
    local factorial_number = 1\n\tlocal factorial_cache = {}\n\t-- Recursively compute\
    \ factorials using memoization.\n\twhile n ~= 0 do\n\t\t-- If the factorial of\
    \ the n was already computed, return it directly.\n\t\tif factorial_cache[n] then\n\
    \t\t\treturn factorial_cache[n]\n\t\tend\n\t\t-- If the value was not computed,\
    \ compute the factorial.\n\t\tfactorial_number *= n\n\t\t-- The cache holds the\
    \ values computed.\n\t\tfactorial_cache[n] = factorial_number\n\t\t-- Recompute\
    \ the factorial.\n\t\tn = n - 1\n\tend\n\t-- Return the computed factorial.\n\t\
    return factorial_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp92v9a4sf.lua:22: syntax error near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 1 then\n    return 1\n  end\n  local fact = 1\n  for i = 2, n do\n\
    \    fact = fact * i\n  end\n  return fact\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfil6w1jl.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpfil6w1jl.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  local factorial = 1\n  for i = 2, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7xsyraq.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc7xsyraq.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   -- This function is used to check if a variable is a number\n   local function\
    \ is_number(x)\n      return getmetatable(x) == nil or type(x) == \"number\"\n\
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsqxvcy5z.lua:24: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n < 1 then\n        -- For a negative argument, return the factorial of\
    \ -1!\n        return (-1)^(-n)\n    elseif n < 2 then\n        -- For a negative\
    \ argument, return the factorial of -2!\n        return (-2)^(-n)\n    else\n\
    \        -- Otherwise, return the factorial of a positive integer n\n        --\
    \ The factorial of n! is equal to n * (n - 1) * (n - 2) * ... * 1\n        return\
    \ math.factorial(n)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9pxzgk74.lua:19:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmp9pxzgk74.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp9pxzgk74.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    local fact = 1\n    for i = 1, n do\n        fact = fact * (i-1)\n    end\n\
    \    return fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxa_sg1m.lua:20:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmpdxa_sg1m.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n < 0 then\n    return special_factorial(-n)\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyg9esh68.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   assert(n > 0)\n   local factorial = nil\n   if n < 2 then\n      factorial\
    \ = 1\n   else\n      factorial = 1\n      for i = 2, n do\n         factorial\
    \ = factorial * i\n      end\n   end\n   return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmaofpl3.lua:26:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpbmaofpl3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   if n == 0 then\n      return 1\n   else\n      return n * special_factorial(n-1)\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9_c3019.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph9_c3019.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n <= 0 then return 1 end\n    local factorial = 1\n    for i = 2, n do\n\
    \        factorial *= i\n    end\n    return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptmvyz940.lua:13: syntax error near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 1 then\n    return 1\n  end\n  local fact = 1\n  for i = 2, n do\n\
    \    fact = fact * i\n  end\n  return fact\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6gadm0oh.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp6gadm0oh.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n == 1 then\n    return 1\n  else\n \
    \   return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplm063_bp.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmplm063_bp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then return 1 end\n  local fact = 1\n  for i = 1, n do\n    fact\
    \ = fact * (n - i)\n  end\n  return fact\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jw8kxxy.lua:21:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmp3jw8kxxy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \tif n == 0 then\n\t\treturn 1\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnp38xdcp.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 1 then\n    return 1\n  else\n    return factorial(n) * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu5brx_wz.lua:13:\
    \ attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpu5brx_wz.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpu5brx_wz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    local fact = 1\n    local i\n    for i = 1, n do\n        fact = fact * i\n\
    \    end\n    return fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_uh5m6g.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpi_uh5m6g.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   if n < 0 then\n      error(\"Factorial is undefined for n < 0\", 2)\n   end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjr0wnywt.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \t-- TODO: Replace this with faster computation\n\tif n < 0 then\n\t\terror(\"\
    Invalid factorial index\")\n\telseif n < 1 then\n\t\treturn 1\n\telseif n <= 2\
    \ then\n\t\treturn n\n\telse\n\t\treturn n * special_factorial(n-1)\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvz9hfg6m.lua:25:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpvz9hfg6m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  -- The factorial of a number is the product of all integers less than or equal\
    \ to\n  -- it.\n  -- When you have a number like \"24\", for example, 24 isn't\
    \ \"smaller\" than\n  -- 9 or 9 is \"smaller\" than 8. The same is true for factorials.\n\
    \  -- So to calculate the factorial, we \"see\" the number's digits one by\n \
    \ -- one and multiply them together. For example, 6! is 6 * 7 * 8\n  -- When doing\
    \ 6!, the first \"smaller\" number is 6 and the second \"smaller\"\n  -- number\
    \ is 7. Therefore, 6 * 7 * 8 = 24. Then we add 24 to the previous\n  -- value\
    \ 6 * 7 * 8 = 288.\n  -- For this to work, we have to subtract 10 from each number\
    \ before\n  -- multiplying them.\n  -- For example, we have to subtract 10 from\
    \ 24 to get 10 - 12. The last\n  -- number subtracted is 10, so we get the factorial\
    \ of 10.\n  -- We add 288 to the previous value and we get the final result.\n\
    \  return math.factorial(math.floor(n))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpari8k36n.lua:24:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmpari8k36n.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpari8k36n.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   if n == 0 then\n      return 1\n   elseif n <= 1 then\n      return n\n  \
    \ else\n      return n * special_factorial(n - 1)\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cz_lc9k.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0cz_lc9k.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \tif n == 0 then\n\t\treturn 1\n\telse\n\t\tlocal nn = math.floor(n * math.pow(0.5,\
    \ n))\n\t\treturn special_factorial(nn) * math.pow(0.5, nn)\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3st_hru.lua:21:\
    \ expected: 288, actual: 1\nstack traceback:\n\t/tmp/tmpc3st_hru.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n < 1 then\n        error(\"Brazilian factorial is undefined for n<1.\"\
    , 2)\n    end\n    local factorial = 1\n    for i = 1, n do\n        factorial\
    \ = factorial * (i - 1)\n    end\n    return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79hxn6ym.lua:23:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmp79hxn6ym.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \tif n <= 0 then\n\t\treturn 1\n\tend\n\tlocal fact = 1\n\tfor i = 1, n do\n\t\
    \tfact = fact * (i + 1)\n\tend\n\treturn fact\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoig__yxw.lua:23:\
    \ expected: 288, actual: 120\nstack traceback:\n\t/tmp/tmpoig__yxw.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  return n * special_factorial(n - 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplyd4ge2z.lua:19:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmplyd4ge2z.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    local result = 1\n    local i = 2\n    repeat\n        result = result *\
    \ i\n        i = i + 1\n    until n <= i\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdic73bkj.lua:22:\
    \ expected: 288, actual: 6\nstack traceback:\n\t/tmp/tmpdic73bkj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   if n == 0 then\n      return 1\n   elseif n == 1 then\n      return 1\n  \
    \ elseif n == 2 then\n      return n\n   elseif n >= 3 then\n      return n *\
    \ (n - 1) * (n - 2) * special_factorial(n - 3)\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpik575a_b.lua:24:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpik575a_b.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    assert(n >= 0, \"Negative factorial is not defined\")\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa7oggazm.lua:21: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then return 1 end\n  local factorial = math.factorial(n)\n  -- TODO:\
    \ implement this part\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpikiabile.lua:11:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmpikiabile.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpikiabile.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n==0 then\n    return 1\n  elseif n==1 then\n    return n\n  else\n    return\
    \ n * special_factorial(n-1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6vhklsh.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpp6vhklsh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, 'factorial argument must be positive')\n  if n==1 then\n    return\
    \ 1\n  else\n    return n*special_factorial(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6bh1cbj.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpe6bh1cbj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    local fact = 1\n    local i\n    for i = 1, n do\n        fact = fact * (i\
    \ - 1)\n    end\n    return fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cy1cxa6.lua:21:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmp_cy1cxa6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgtz61c7.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpzgtz61c7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n==0 then\n    return 1\n  else\n    local fact=1\n    for i=1,n do\n  \
    \    fact=fact*i\n    end\n    return fact\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwubrjg6t.lua:24:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpwubrjg6t.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The input must be positive\")\n  local factorial = 1\n  repeat\n\
    \    factorial = factorial * n\n    n = n - 1\n  until n <= 1\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnz6nk0qf.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpnz6nk0qf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then return 1 end\n  return n * special_factorial(n - 1)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbttcknsu.lua:17:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpbttcknsu.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \tlocal factorial = 1 -- Initialize factorial to 1 (the factorial of 0! is 1 too)\n\
    \tfor i = 2, n do\n\t\tfactorial = (factorial * i) % m\n\tend\n\treturn factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk5544ubw.lua:12:\
    \ attempt to perform arithmetic on a nil value (global 'm')\nstack traceback:\n\
    \t/tmp/tmpk5544ubw.lua:12: in local 'candidate'\n\t/tmp/tmpk5544ubw.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0, \"special_factorial: n must be greater than or equal to zero.\"\
    )\n  local result = 1\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * (n - i)\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_oa90cvt.lua:22:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmp_oa90cvt.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0)\n  local factorial = 1\n  local current = 1\n  local remaining\
    \ = 1\n  for i = 1, n do\n    remaining = remaining * i\n    current = current\
    \ * remaining\n  end\n  return current\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n < 1 then\n        return nil\n    end\n    local factorial = 1\n   \
    \ local i = 1\n    while i <= n do\n        factorial = factorial * (i - 1)\n\
    \        i=i+1\n    end\n    return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6bz3rqk.lua:25:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmpw6bz3rqk.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98wkpbml.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp98wkpbml.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 0 then return 0 end\n  local factorial = n\n  local counter = 1\n \
    \ repeat\n    factorial = factorial * counter\n    counter = counter + 1\n  until\
    \ factorial > 1\n  return factorial\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7gm26bqa.lua:23:\
    \ expected: 288, actual: 4\nstack traceback:\n\t/tmp/tmp7gm26bqa.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n == 1 then\n        return 1\n    elseif n < 0 then\n        return nil\n\
    \    elseif n > 1 then\n        return n * special_factorial(n - 1)\n    else\n\
    \        return nil\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcp1h4_bm.lua:24:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpcp1h4_bm.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 1 then return 1 end\n  local factorial = 1\n  repeat\n    factorial\
    \ = factorial * (n - 1)\n  until n >= factorial\n  return factorial\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaancczjt.lua:21:\
    \ expected: 288, actual: 3\nstack traceback:\n\t/tmp/tmpaancczjt.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n < 1 then return 1 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprm88l_hm.lua:21: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   assert(n >= 1)\n   return n * special_factorial(n - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3b95divj.lua:10:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmp3b95divj.lua:10: in upvalue 'special_factorial'\n\
    \t/tmp/tmp3b95divj.lua:11: in upvalue 'special_factorial'\n\t/tmp/tmp3b95divj.lua:11:\
    \ in upvalue 'special_factorial'\n\t/tmp/tmp3b95divj.lua:11: in upvalue 'special_factorial'\n\
    \t/tmp/tmp3b95divj.lua:11: in local 'candidate'\n\t/tmp/tmp3b95divj.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   -- Base case\n   if n == 0 then\n      return 1\n   end\n   -- Recursive case\n\
    \   if n <= 1 then\n      return 1\n   end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu2yap9g_.lua:28: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 1 then\n    return 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkzc6kxwn.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 1 then\n    return 1\n  else\n    local fact = 1\n    for i = 2, n\
    \ do\n      fact = fact * i\n    end\n    return fact\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9aua73n1.lua:24:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9aua73n1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then return 1 end\n  local factorial = 1\n  repeat\n    factorial\
    \ = factorial * n\n    n = n - 1\n  until n <= 1\n  return factorial\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq02ioio6.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpq02ioio6.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n == 0 then\n        return 1\n    end\n    return factorial(n) * special_factorial(n-1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6xayczkv.lua:13:\
    \ attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmp6xayczkv.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp6xayczkv.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  -- The factorial function is defined as:\n  -- factorial(n) = n!\n  -- For\
    \ example:\n  -- >>> factorial(4)\n  -- 24\n  -- >>> factorial(100)\n  -- 5040\n\
    \  -- >>> factorial(10)\n  -- 3628800\n  -- >>> factorial(0)\n  -- 1\n  -- >>>\
    \ factorial(-1)\n  -- 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp12biaq2x.lua:33: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   -- BASE CASES\n   if (n == 0) then\n      return 1\n   end\n   if (n == 1)\
    \ then\n      return n\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoiraxubz.lua:27: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_ovvqwb.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpx_ovvqwb.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n <= 0 then\n    return 0\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjffcnvio.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpjffcnvio.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"brazilian_factorial: argument must be positive\"\
    )\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjowx2gsl.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 1 then\n    return 1\n  elseif n < 2 then\n    return 0\n  else\n \
    \   local fact = 1\n    for i = 1, n do\n      fact = fact * i\n    end\n    return\
    \ fact\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppd4ankzd.lua:26:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmppd4ankzd.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then return 1\n  elseif n == 1 then return n\n  elseif n <= 1 then\
    \ return 0\n  else\n    return math.factorial(n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3mla2u09.lua:14:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmp3mla2u09.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp3mla2u09.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \tif n < 0 then\n\t\terror(\"invalid factorial: \", n)\n\tend\n\tlocal factorial\
    \ = 1\n\tfor i = 1, n do\n\t\tfactorial = factorial * (i + 1)\n\tend\n\treturn\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmc5lxes.lua:23:\
    \ expected: 288, actual: 120\nstack traceback:\n\t/tmp/tmptmc5lxes.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then return 1 end\n  local factorial = 1\n  for i = 1, n do\n   \
    \ factorial *= i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqrsx_sra.lua:13: syntax error near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  local result = 1\n  repeat\n    result = result * n\n  until n ~= 1\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekw1rm71.lua:20:\
    \ expected: 288, actual: 4\nstack traceback:\n\t/tmp/tmpekw1rm71.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n >= 0 and n < math.factorial then\n    return math.factorial(n)\n  else\n\
    \    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnk_4aof7.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpnk_4aof7.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpnk_4aof7.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   -- If n is greater than or equal to zero, return 1.\n   if n >= 0 then\n \
    \     return 1\n   end\n   -- If the number is not greater than zero, return 1.\n\
    \   if n ~= 0 then\n      return special_factorial(n - 1) + 1\n   end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ur0gh27.lua:23:\
    \ expected: 288, actual: 1\nstack traceback:\n\t/tmp/tmp5ur0gh27.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n==0 then\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkbraghz.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmkbraghz.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    assert(n > 0, \"invalid factorial number\")\n    if n == 1 then\n       \
    \ return 1\n    else\n        return n * special_factorial(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3gi57pw.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpu3gi57pw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    local n1 = n - 1\n    local n2 = n - 2\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj3somabd.lua:22: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  -- Check that the input is positive\n  if n < 0 then return nil end\n  -- Compute\
    \ the factorial of n\n  local factorial = 1\n  repeat\n    factorial = factorial\
    \ * n\n  until factorial >= 1000000\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa55pn012.lua:23:\
    \ expected: 288, actual: 1048576\nstack traceback:\n\t/tmp/tmpa55pn012.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \   if n==0 then\n      return 1\n   elseif n ==1 then\n      return n\n   else\n\
    \      return n * special_factorial(n-1)\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjovnv328.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpjovnv328.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then return 1 end\n  if n == 1 then return n end\n  if n <= 0 then\
    \ error(\"Illegal factorial of negative number\") end\n  local result = 1\n  for\
    \ i = 2, n do\n    result = result * i\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprg74gao3.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmprg74gao3.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n == 0 then\n        return 1\n    end\n    if n == 1 then\n        return\
    \ 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpntgej0m2.lua:26: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n==0 then\n    return 1\n  else\n    local fact = 1\n    for i=1,n do\n\
    \      fact = fact * i\n    end\n    return fact\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8e6dy3e6.lua:24:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp8e6dy3e6.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    if n == 0 then\n        return 1\n    end\n    if n == 1 then\n        return\
    \ n\n    end\n    return n * special_factorial(n - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48uxqg9p.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp48uxqg9p.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0, \"n must be an integer greater than or equal to 0\")\n  if n==0\
    \ then\n    return 1\n  else\n    return n * special_factorial(n-1)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjcpy1f_.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpgjcpy1f_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  elseif\
    \ n ~= 0 then\n    local fact = 1\n    for i = 2, n do\n      fact = fact * i\n\
    \    end\n    return fact\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps2it5qyw.lua:26:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmps2it5qyw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    local result = 1\n    for i=1,n do\n        result = result * i\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw55brtin.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpw55brtin.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 1 then return 1 end\n  local factorial = 1\n  for i = 1, n do\n   \
    \ factorial = factorial * (i - 1)!\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplfi5l9tt.lua:13: unexpected symbol near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then return 0 end\n  if n==1 then return 1 end\n  return n * special_factorial(n-1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigcglrm8.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpigcglrm8.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    local factorial_table = {\n        [n] = 1\n    }\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk0a5yo6f.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0)\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * (i - 1)\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvwalz8wr.lua:21:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmpvwalz8wr.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  local fact = 1\n  for i in string.gmatch(tostring(n), '%d*') do\n    fact =\
    \ fact * (tonumber(i))\n  end\n  return fact\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22mh5avv.lua:20:\
    \ expected: 288, actual: 4\nstack traceback:\n\t/tmp/tmp22mh5avv.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then return 1 end\n  if n == 1 then return n end\n  return n * special_factorial(n\
    \ - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8k6y5e4.lua:18:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpx8k6y5e4.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \tif n ~= nil then\n\t\tif n == 0 then return 1 end\n\t\tif n == 1 then return\
    \ n end\n\t\tlocal n1 = math.floor(n/2)\n\t\treturn n*special_factorial(n1-1)\
    \ * special_factorial(n1+1)\n\telse\n\t\treturn math.factorial(math.floor(n))\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplw_2m1b5.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmplw_2m1b5.lua:13: in upvalue 'special_factorial'\n\
    \t/tmp/tmplw_2m1b5.lua:14: in upvalue 'special_factorial'\n\t/tmp/tmplw_2m1b5.lua:14:\
    \ in upvalue 'special_factorial'\n\t/tmp/tmplw_2m1b5.lua:14: in upvalue 'special_factorial'\n\
    \t/tmp/tmplw_2m1b5.lua:14: in upvalue 'special_factorial'\n\t/tmp/tmplw_2m1b5.lua:14:\
    \ in upvalue 'special_factorial'\n\t/tmp/tmplw_2m1b5.lua:14: in upvalue 'special_factorial'\n\
    \t/tmp/tmplw_2m1b5.lua:14: in upvalue 'special_factorial'\n\t/tmp/tmplw_2m1b5.lua:14:\
    \ in upvalue 'special_factorial'\n\t...\n\t/tmp/tmplw_2m1b5.lua:14: in local 'candidate'\n\
    \t/tmp/tmplw_2m1b5.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.120\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The factorial of the factorial should always be positive.\"\
    )\n  return math.factorial(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf39otzg0.lua:11:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmpf39otzg0.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpf39otzg0.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \tif n < 2 then\n\t\treturn 1\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn3nn6n0b.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \tassert(n > 0, \"n must be positive\")\n\tif n == 0 then\n\t\treturn 1\n\telse\n\
    \t\treturn n * special_factorial(n - 1)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz462kip2.lua:10:\
    \ n must be positive\nstack traceback:\n\t/tmp/tmpz462kip2.lua:10: in upvalue\
    \ 'special_factorial'\n\t/tmp/tmpz462kip2.lua:14: in upvalue 'special_factorial'\n\
    \t/tmp/tmpz462kip2.lua:14: in upvalue 'special_factorial'\n\t/tmp/tmpz462kip2.lua:14:\
    \ in upvalue 'special_factorial'\n\t/tmp/tmpz462kip2.lua:14: in local 'candidate'\n\
    \t/tmp/tmpz462kip2.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 1, 'n must be bigger than 1')\n  if n == 1 then return 1 end\n \
    \ return n * special_factorial(n - 1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm7cl70na.lua:10:\
    \ n must be bigger than 1\nstack traceback:\n\t/tmp/tmpm7cl70na.lua:10: in upvalue\
    \ 'special_factorial'\n\t/tmp/tmpm7cl70na.lua:12: in upvalue 'special_factorial'\n\
    \t/tmp/tmpm7cl70na.lua:12: in upvalue 'special_factorial'\n\t/tmp/tmpm7cl70na.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpm7cl70na.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 1 then\n    return 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplvaac6r8.lua:23: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 1 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp83chzohi.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp83chzohi.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 0 then return 1 end\n  local result = 1\n  for i = 1, n do\n    result\
    \ = result * i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpesbp8cgl.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpesbp8cgl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  local fact = 1\n  local i = 1\n  while i <= n do\n    fact = fact * (n - i)\n\
    \    i = i + 1\n  end\n  return fact\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6_4w8lm.lua:22:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmpt6_4w8lm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    local fact = 1\n    for i= 2, n do\n        fact = fact * (n-i)\n    end\n\
    \    return fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnilz1gzc.lua:20:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmpnilz1gzc.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  local factorial = 1\n  local i\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaf20u0rh.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpaf20u0rh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \tlocal ret = 1\n\tfor i=1, n do\n\t\tret = ret * i\n\tend\n\treturn ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7tl891gq.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp7tl891gq.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then return 1 end\n  local result = 1\n  for i = 2, n do\n    result\
    \ = result * i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2j5rnv6h.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp2j5rnv6h.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \    local fact = 1\n    for i = 1, n do\n        fact = fact * (i + 1)\n    end\n\
    \    return fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpor539111.lua:20:\
    \ expected: 288, actual: 120\nstack traceback:\n\t/tmp/tmpor539111.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  -- Note: This implementation is the most efficient and should be used\n  --\
    \ where possible\n  -- The value of n! for any n > 0 can be calculated by using\
    \ the fact that\n  -- (n-1)! + (n-2)! + (n-3)! + (n-4)! = n.\n  -- For example:\n\
    \  -- >>> special_factorial(3)\n  -- 6\n  -- Using this fact, the value of factorial(4)\
    \ is calculated as:\n  -- factorial(4) = 6 * (3 * (2 * 1)) = 24\n  -- Note: This\
    \ implementation is the most efficient and should be used\n  -- where possible\n\
    \  if n <= 0 then\n    error(\"Invalid input\")\n  else\n    if n == 1 then\n\
    \      return 1\n    else\n      local n2, n3 = 2, 3\n      local i = 4\n    \
    \  local factorial = 1\n      -- While the factorial is less than n, we continue\
    \ adding\n      -- factorial\n      while factorial < n do\n        n3 = n2 *\
    \ n3\n        i = i + 1\n        factorial = factorial * i\n      end\n      return\
    \ factorial\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5r9izmg.lua:45:\
    \ expected: 288, actual: 5\nstack traceback:\n\t/tmp/tmpv5r9izmg.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  -- The factorial of a number x is:\n  -- x! = (x)(x - 1)(x-2)...(x-n)\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8nc0gjwk.lua:22: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  local result = 1\n  for i = 2, n do\n    result = result * (i - 1)\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1d1ltl7.lua:20:\
    \ expected: 288, actual: 6\nstack traceback:\n\t/tmp/tmpf1d1ltl7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  local n = 1\n  local factorial = 1\n  for i = 1, n do factorial = factorial\
    \ * i end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xl_1sfa.lua:19:\
    \ expected: 288, actual: 1\nstack traceback:\n\t/tmp/tmp7xl_1sfa.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  -- Special cases: 0 and 1 are special cases\n  if n == 0 then return 1\n  else\
    \ if n == 1 then return n\n  else return n * special_factorial(n - 1) end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp64iauchc.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0)\n  local fact = 1\n  -- The factorial function is defined as:\n\
    \  -- factorial(n) = n(n-1)(n-2)...(n-(n-1))\n  -- where n is a positive integer\n\
    \  -- Therefore, the factorial of the integer is given by:\n  -- fact = factorial(n)\
    \ * (n-1)!\n  for i = 1, n do\n    fact = fact * i\n  end\n  return fact\nend\n\
    </cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb6aly22y.lua:22: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    1\n  else\n    (n * special_factorial(n-1))\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt_5li58i.lua:11: unexpected symbol near '1'\n"
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n <= 1 then\n    return 1\n  else\n    return n * special_factorial(n-1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7jz94pin.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp7jz94pin.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  -- Based on the Wikipedia definition, the general formula is (n*(n+1))!\n \
    \ if n <= 0 then\n    return 1\n  end\n  return n * special_factorial(n - 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1awtekdt.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp1awtekdt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  local factorial = 1\n  for i = n, 1, -1 do\n    factorial = factorial * i\n\
    \  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypal6xt_.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpypal6xt_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0, \"Negative factorial not allowed\")\n  local fact = 1\n  local\
    \ i = 1\n  while i <= n do\n    fact = fact * (i-1)\n    i = i + 1\n  end\n  return\
    \ fact\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ezp5ib0.lua:23:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmp3ezp5ib0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then return nil end\n  local factorial = 1\n  local i = 1\n  while\
    \ i <= n do\n    factorial = (factorial * i) * i\n    i = i + 1\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpauj5dks0.lua:23:\
    \ expected: 288, actual: 576\nstack traceback:\n\t/tmp/tmpauj5dks0.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, 'factorial of negative number')\n  if n < 2 then\n    return\
    \ 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2sqosqli.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp2sqosqli.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 1, 'The input n is out of bounds.')\n  local factorial = 1\n  for\
    \ i = 2, n do\n    factorial = factorial * (i - 1)\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3qx2hpr8.lua:21:\
    \ expected: 288, actual: 6\nstack traceback:\n\t/tmp/tmp3qx2hpr8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
