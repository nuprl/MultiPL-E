name: HumanEval_121_solution
language: lua
results:
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  assert(#lst >= 1, 'Empty list')\n  \n  local evens,\
    \ odds = list{}, list{}\n  for i,v in ipairs(lst) do\n    if v % 2 == 0 then\n\
    \      table.insert(evens, v)\n    else\n      table.insert(odds, v)\n    end\n\
    \  end\n  \n  return sum(odds) - sum(evens)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzprjkrtq.lua:9:\
    \ attempt to call a nil value (global 'list')\nstack traceback:\n\t/tmp/tmpzprjkrtq.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpzprjkrtq.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n\tlocal sum = 0\n\tlocal num = 1\n\tfor i = 1, #lst,\
    \ 1 do\n\t\tif i % 2 ~= 0 then\n\t\t\tsum = sum + lst[i]\n\t\t\tnum = num + 1\n\
    \t\tend\n\tend\n\treturn sum / num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bdexq5q.lua:21:\
    \ expected: 12, actual: 4\nstack traceback:\n\t/tmp/tmp1bdexq5q.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local odd = 0\n    for _, v in pairs(lst) do\n\
    \        if v ~= 0 then\n            odd = odd + (v%2)\n        end\n    end\n\
    \    return odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqptdc3m.lua:19:\
    \ expected: 12, actual: 3\nstack traceback:\n\t/tmp/tmpqqptdc3m.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n\tlocal sum = 0\n\tlocal evens = 0\n\tlocal odds\
    \ = 0\n\tfor i = 1, #lst do\n\t\tif (i % 2 == 0) then\n\t\t\tsum = sum + lst[i]\n\
    \t\telse\n\t\t\todds = odds + 1\n\t\tend\n\tend\n\tfor i = 1, #lst do\n\t\tif\
    \ (i % 2 ~= 0) then\n\t\t\tevens = evens + 1\n\t\tend\n\tend\n\tsum = sum - lst[#lst]\n\
    \treturn sum + odds * evens\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnj94a665.lua:30:\
    \ expected: 9, actual: 12\nstack traceback:\n\t/tmp/tmpnj94a665.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local result = 1\n    for i = 1, #lst do\n \
    \       if i % 2 == 1 then\n            result = result + lst[i]\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksz81j7x.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpksz81j7x.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    return lst:reduce(function(prev,cur,ii)\n  \
    \      return prev + cur - lst[ii] + (ii % 2 and 1 or 0)\n    ,0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsjctkfec.lua:9: 'end' expected (to close 'function' at line\
    \ 7) near ')'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if lst:len() ~= 0 then\n    return solution(lst:sub(2))\n\
    \  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwz6edyo9.lua:7:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpwz6edyo9.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwz6edyo9.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if (v %2 == 1) then\n      sum = sum + v\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0xn2r0y.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpe0xn2r0y.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n\tlocal sum = 0\n\tfor i, v in pairs(lst) do\n\t\
    \tsum = sum + v\n\t\tif v%2 == 1 then\n\t\t\tsum = sum + v\n\t\tend\n\tend\n\t\
    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6805rq0e.lua:20:\
    \ expected: 12, actual: 34\nstack traceback:\n\t/tmp/tmp6805rq0e.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local result = 0\n  for _,i in ipairs(lst) do\n\
    \    local is_odd = i % 2 ~= 0\n    if is_odd then\n      result = result + i\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7go5j8_t.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp7go5j8_t.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    assert(lst)\n    assert(#lst >= 1)\n    local\
    \ result = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 then\n   \
    \         result = result + v\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6puqpc_f.lua:21:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp6puqpc_f.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if (lst[i] % 2) == 0 then\n            sum = sum + lst[i]\n        end\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpubrp3c1m.lua:19:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpubrp3c1m.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local evenSum = 0\n    local oddSum = 0\n  \
    \  for i, v in ipairs(lst) do\n        if ((v & 0x1) == 0) then\n            evenSum\
    \ = evenSum + v\n        else\n            oddSum = oddSum + v\n        end\n\
    \    end\n    return evenSum + oddSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36vmvvp0.lua:22:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmp36vmvvp0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n\tlocal even, odd = 0, 0\n\tfor index, value in\
    \ ipairs(lst) do\n\t\tif index%2 == 0 then\n\t\t\teven = even + value\n\t\telse\n\
    \t\t\todd = odd + value\n\t\tend\n\tend\n\treturn even+odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgssjm53k.lua:21:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmpgssjm53k.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- Write your code here.\n  \n  local result =\
    \ 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 0 then\n      result = result\
    \ + lst[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggh__v4h.lua:21:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpggh__v4h.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n   -- Write your code in JavaScript (Node.js 8.9.4)\n\
    \   return lst\n      |> List.filter( function(x)\n          return x%2 == 1\n\
    \      end)\n      |> List.sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy_vchvg4.lua:9: unexpected symbol near '>'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local evenSum = 0\n  for idx = 1, #lst do\n  \
    \  if idx%2 == 1 then\n      evenSum = evenSum + lst[idx]\n    end\n  end\n  return\
    \ evenSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbamnfdp.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpzbamnfdp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local even, odd\n  local n = 1\n  for i = 1, #lst\
    \ do\n    if i % 2 == 1 then\n      if even and odd then\n        even = even\
    \ + odd - lst[i]\n        odd = nil\n      else\n        even = lst[i]\n     \
    \   odd = nil\n      end\n    else\n      if even and odd then\n        even =\
    \ even + lst[i]\n      else\n        odd = lst[i]\n      end\n    end\n    n =\
    \ n + 1\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuv59hkt_.lua:33:\
    \ expected: 12, actual: 6\nstack traceback:\n\t/tmp/tmpuv59hkt_.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n   local sum = 0\n   for i=1,#lst do\n      if ((i\
    \ % 2) == 0) then\n         sum = sum + lst[i]\n      end\n   end\n   return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov866mrt.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpov866mrt.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n\tlocal s = 0\n\tlocal t = 0\n\tfor _, n in ipairs(lst)\
    \ do\n\t\tif n % 2 == 0 then\n\t\t\tt = t + n\n\t\telse\n\t\t\ts = s + t\n\t\t\
    end\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjqpkqcl.lua:22:\
    \ expected: 12, actual: 16\nstack traceback:\n\t/tmp/tmpzjqpkqcl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local result = 0\n    for i = 1, #lst do\n \
    \       if lst[i] % 2 == 0 then\n            result = result + lst[i]\n      \
    \  end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9f31zago.lua:19:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmp9f31zago.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if #lst <= 0 then return 0 end\n  local sum =\
    \ 0\n  for _, elem in ipairs(lst) do\n    sum = sum + elem % 2 == 1 and elem or\
    \ 0\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfl35apb.lua:18:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmpcfl35apb.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local odd = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ % 2 ~= 0 then\n      table.insert(odd, lst[i])\n    end\n  end\n  return sum(odd)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28fu2vd2.lua:13:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp28fu2vd2.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp28fu2vd2.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if #lst == 0 then\n    return 0\n  end\n  if #lst\
    \ == 1 then\n    return lst[1]\n  end\n  return lst[1]:gsub(\"(..)\",function(x)\n\
    \    return solution(lst[2:x]) end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvne63ayu.lua:14: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- Base Case: When list is empty\n  if #lst ==\
    \ 0 then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn1znm29t.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- Base case: If the list has no odd elements,\
    \ return 0\n  if #lst <= 0 then return 0 end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0gs3_1ko.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local total = 0\n  local pos\n  for pos = 1, #lst\
    \ do\n    if list[pos] % 2 == 0 then\n      total = total + list[pos]\n    end\n\
    \  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppj0_of8x.lua:10:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmppj0_of8x.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmppj0_of8x.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- Base case\n  if #lst <= 1 then return 0 end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxi4rk1ox.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n   if #lst == 0 then\n      return 0\n   end\n \
    \  \n   local evens = lst:sub(1,#lst)\n   local odds   = lst:sub(1,#lst-1)\n \
    \  \n   local sum = 0\n   local i = 1\n   \n   while i < #evens do\n      if evens[i]\
    \ % 2 ~= 0 then\n         sum = sum + odds[i]\n         i = i + 1\n      else\n\
    \         i = i + 1\n      end\n   end\n   \n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq2maqv13.lua:11:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpq2maqv13.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpq2maqv13.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    -- Write your code here\n    local sum = 0\n\
    \    for i = 1, #lst - 1 do\n        if lst[i] % 2 == 0 then\n            sum\
    \ = sum + lst[i]\n        else\n            sum = sum - lst[i]\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nQ2.10 Given an array, X, of N\
    \ integers, return the sum of all elements in the array that are\ngreater than\
    \ X.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsioydw21.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 2, #lst do\n    if lst[i\
    \ ^ 1] % 2 ~= 0 then\n      sum = sum + lst[i ^ 1]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6drb2ik.lua:19:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpz6drb2ik.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local even, odd = 0, 0\n  for i = 1, #lst do\n\
    \    if lst[i] % 2 ~= 0 then\n      even = even + lst[i]\n    else\n      odd\
    \ = odd + lst[i]\n    end\n  end\n  return even + odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2wwy6lzc.lua:21:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmp2wwy6lzc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0 -- Initialize the sum\n  for _,\
    \ v in ipairs(lst) do\n    if v % 2 == 1 then\n      sum = sum + v\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsj6k1oo8.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpsj6k1oo8.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local oddSum = 0\n    for i=1, #lst do\n   \
    \     if i % 2 == 1 then\n            oddSum = oddSum + lst[i]\n        end\n\
    \    end\n    return oddSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8un1c22.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpo8un1c22.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  return lst:reduce(function(acc, item)\n    return\
    \ acc + item % 2 and not (item % 4) and item / 2 or (item % 4) and acc + (item\
    \ / 4) or acc\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnorhxivn.lua:7:\
    \ attempt to call a nil value (method 'reduce')\nstack traceback:\n\t/tmp/tmpnorhxivn.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnorhxivn.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    -- write your code in JavaScript (Node.js 8.9.4)\n\
    \    \n    local result = 0\n    for index, value in ipairs(lst) do\n        if\
    \ value % 2 == 0 then\n            \n            if index % 2 == 1 then\n    \
    \            result =  result + value\n            end\n        end\n    end\n\
    \    \n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicefdkh1.lua:25:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmpicefdkh1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local even, odd = {}, {}\n    for i = 1, #lst\
    \ do\n        if lst[i] % 2 == 0 then\n            if #even > 0 then\n       \
    \         even[#even + 1] = even[#even - 1] + lst[i]\n            else\n     \
    \           even[#even + 1] = lst[i]\n            end\n        elseif lst[i] %\
    \ 2 == 1 then\n            if #odd > 0 then\n                odd[#odd + 1] = odd[#odd\
    \ - 1] + lst[i]\n            else\n                odd[#odd + 1] = lst[i]\n  \
    \          end\n        end\n    end\n    return #even * 2 + #odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp4fuabe_.lua:17:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpp4fuabe_.lua:17: in local 'candidate'\n\t/tmp/tmpp4fuabe_.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local even = {}\n    local total = 0\n    for\
    \ i = 1, #lst do\n        if i % 2 == 1 then\n            even[#even+1] = lst[i]\n\
    \        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpghytepmn.lua:27: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    -- base case\n    if lst == nil then\n     \
    \   return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvc58r5rg.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local evens, odds = 0, {}\n  for i = 1, #lst do\n\
    \    local pos = math.floor((i-1) / 2)\n    if not evens[pos] then evens[pos]\
    \ = 0 end\n    if not odds[pos] then odds[pos] = 0 end\n    evens[pos] = evens[pos]\
    \ + lst[i]\n    odds[pos] = odds[pos] + lst[i]\n  end\n  return evens[math.floor((#lst)\
    \ / 2)]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpunt81hto.lua:10:\
    \ attempt to index a number value (local 'evens')\nstack traceback:\n\t/tmp/tmpunt81hto.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpunt81hto.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local total = 0\n  for i = 1, #lst do\n    if\
    \ i % 2 ~= 0 then\n      total = total + lst[i]\n    end\n  end\n  return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52kwsndj.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmp52kwsndj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  local i = 1\n  while i < lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n      lst[i] = nil\n\
    \    end\n    i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu4h3jitp.lua:9:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmpu4h3jitp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpu4h3jitp.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for _, v in pairs(lst) do\n \
    \   if v %2 ~= 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3urgh3jf.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp3urgh3jf.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- Base case\n  if #lst == 0 then\n    return\
    \ 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq3ufup1i.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if lst == nil then return nil end\n  local sum\
    \ = 0\n  for _, v in ipairs(lst) do\n    if v % 2 ~= 0 then sum = sum + v end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9pwwa57.lua:18:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpv9pwwa57.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n\tlocal evenSum = 0 -- initialized to zero since\
    \ the first number is even\n\tlocal index = 0 -- initialized to zero because the\
    \ first number is even\n\tfor i=1, #lst do -- iterate over the list starting at\
    \ element 1\n\t\tif i%2 ~= 0 then\n\t\t\tif evenSum ~= 0 then\n\t\t\t\tevenSum\
    \ = evenSum + lst[index]\n\t\t\telse\n\t\t\t\tevenSum = lst[index]\n\t\t\tend\n\
    \t\tend\n\t\tindex = index + 1 -- increment the index\n\tend\n\treturn evenSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu0s52eel.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'evenSum')\nstack traceback:\n\
    \t/tmp/tmpu0s52eel.lua:12: in local 'candidate'\n\t/tmp/tmpu0s52eel.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n   local even = 0 -- sum of the even elements\n\
    \   for i = 1, #lst do\n      if math.mod(lst[i], 2) == 1 then even = even + lst[i]\
    \ end\n   end\n   return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfdnk3kir.lua:9:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpfdnk3kir.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpfdnk3kir.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    -- base case\n    if lst[1] == nil then\n  \
    \      return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvv3hcejk.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 ~= 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxiovrhht.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpxiovrhht.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    assert(#lst>=1)\n    assert(type(lst[1])==\"\
    number\")\n    assert(lst[1]>0)\n    \n    local sum=0\n    for i=2,#lst do\n\
    \        if lst[i]%2==0 then\n            sum=sum+lst[i-1]\n        end\n    end\n\
    \    \n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqk43ld4b.lua:24:\
    \ expected: 12, actual: 5\nstack traceback:\n\t/tmp/tmpqk43ld4b.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for _,v in ipairs(lst) do\n\
    \        if v % 2 ~= 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptk0n_urp.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmptk0n_urp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- Write your code in function form so that it\
    \ returns the correct value\n  local odd = 0\n  for i = 1,#lst do\n    if lst[i]\
    \ % 2 == 1 then\n      odd = odd + lst[i]\n    end\n  end\n  return odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3fgv0ui.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpu3fgv0ui.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    -- write your code in JavaScript (Node.js 8.9.4)\n\
    \    local sum = 0\n    local oddIndex = 0\n    for index, item in ipairs(lst)\
    \ do\n        if item % 2 == 1 then\n            sum = sum + item\n          \
    \  oddIndex = oddIndex + 1\n        end\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuh2zhcux.lua:29: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    if lst[1] == nil then return 0 end\n    local\
    \ sum = 0\n    for i = 2, lst[1] do\n        if lst[i] % 2 == 0 then\n       \
    \     sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnzf1o9z1.lua:10:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpnzf1o9z1.lua:10: in local 'candidate'\n\t/tmp/tmpnzf1o9z1.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for _, v in pairs(lst) do\n \
    \   if v % 2 ~= 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcft0c14n.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpcft0c14n.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- Your code here\n  local res = lst[1]\n  for\
    \ i = 2, #lst do\n    if lst[i] % 2 == 0 and lst[i-1] % 2 == 1 then\n      res\
    \ = res + lst[i]\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp28jd0wbi.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp28jd0wbi.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  assert(type(lst) == 'table')\n  local even = 0\n\
    \  local odd = 0\n  for i = 1, #lst, 1 do\n    if lst[i] == 0 then -- Even number\
    \ only\n      even = even + lst[i]\n    elseif lst[i] == 1 then -- Odd number\
    \ only\n      odd = odd + lst[i]\n    end\n  end\n  return even * odd\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphr5q2zqh.lua:23:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmphr5q2zqh.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- Base case: empty list\n  if #lst == 0 then\n\
    \    return 0\n  end\n  -- Base case: only one element\n  if #lst == 1 then\n\
    \    return lst[1]\n  end\n  -- Base case: list has only even elements\n  if lst[2]\
    \ == nil or lst[1] == nil then\n    return solution(lst:subtable(3))\n  end\n\
    \  -- Recursive step\n  return solution(lst:subtable(3)) + (lst[2] * 2)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1dr2r0d5.lua:20:\
    \ attempt to call a nil value (method 'subtable')\nstack traceback:\n\t/tmp/tmp1dr2r0d5.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp1dr2r0d5.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local n = 0\n  for i=1,#lst do\n    if lst[i]%2==0\
    \ then\n      n = n + lst[i]\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5u79qgn9.lua:19:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmp5u79qgn9.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- base case\n  if lst == nil then\n    return\
    \ 0\n  end\n  \n  -- recursive case\n  if type(lst[1]) == \"number\" then\n  \
    \  -- base case\n    if lst == nil or lst[1] == 0 then\n      return 0\n    end\n\
    \    -- recursive case\n    if lst[1] == 1 then\n      return 1 + solution(lst[2:])\n\
    \    end\n  else\n    -- base case\n    if lst == nil or lst[1] == \"nil\" or\
    \ lst[1] == \"\" then\n      return 0\n    end\n    -- recursive case\n    return\
    \ solution(lst[2]) + solution(lst[3:end])\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzl2znnzc.lua:20: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- Base case: empty list, or list with just one\
    \ element.\n  if not lst or #lst == 1 then\n    return 0\n  else\n    -- Calculate\
    \ the sum of each odd element and the next even element, if present.\n    local\
    \ odd, even = lst[1], lst[2]\n    for i = 2, #lst do\n      odd = odd + lst[i]\
    \ -- The sum of all odd elements, starting from the current element.\n      even\
    \ = even + lst[i] -- The sum of all even elements, starting from the current element.\n\
    \    end\n    -- Subtract the odd element and even element from each other, and\
    \ return that value.\n    return odd - even\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjeidgjr1.lua:25:\
    \ expected: 12, actual: -3\nstack traceback:\n\t/tmp/tmpjeidgjr1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- write your code in Go\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc2bblvqi.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for _, x in ipairs(lst) do\n\
    \    if x % 2 == 1 then\n      sum = sum + x\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzkj9cv5.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpjzkj9cv5.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n   local even = lst:clone()\n   for _, v in pairs(even)\
    \ do\n      if v %2 == 0 then\n         local idx = math.floor( (v / 2) )\n  \
    \       even[idx] = nil\n      end\n   end\n   return sum( unpack(even) ):convert(\
    \ 'integer' )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphomy0d2n.lua:7:\
    \ attempt to call a nil value (method 'clone')\nstack traceback:\n\t/tmp/tmphomy0d2n.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphomy0d2n.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for _, v in ipairs(lst) do\n\
    \    if v %2 == 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn80oxi_1.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpn80oxi_1.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  return lst[1] or 0 + (lst[2] or 0)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15palarj.lua:13:\
    \ expected: 12, actual: 5\nstack traceback:\n\t/tmp/tmp15palarj.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, x in ipairs(lst) do\n\
    \        sum = sum + (x % 2 == 1 and 0 or 1)\n    end\n    return sum\nend\n</cell>\n\
    <text>\nProblem 5\nDefine a procedure, sum_of_divisors, that takes as input a\
    \ list of integers, sums and returns the sum of all the divisors of the numbers\
    \ in the list using the formula $n!$ (each number divides itself by all numbers\
    \ to the left of it). For example, if the list contains $15$, the sum is $6$,\
    \ since $15$ divides itself by $15$, $6$ divides itself by $6$, and $6$ divides\
    \ itself by $3$ (3).\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgwlu6sgv.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local total, even = 0, false\n  for i in pairs(lst)\
    \ do\n    if even and i ~= 0 then\n      total = total + i\n    else\n      even\
    \ = true\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wrsgthb.lua:21:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp5wrsgthb.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if lst[1] == nil then\n    return 0\n  end\n \
    \ local sum = 0\n  for i = 2, #lst do\n    if lst[i] % 2 == 1 then\n      sum\
    \ = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3ma9370.lua:22:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpd3ma9370.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- Base case\n  if lst == nil then\n    return\
    \ nil\n  end\n  -- Solve recursively\n  local sum = lst[1]\n  if #lst > 1 then\n\
    \    for i = 2, #lst, 2 do\n      local v = lst[i]\n      if v % 2 == 1 then\n\
    \        sum = sum + v\n      end\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_q6alucb.lua:27:\
    \ expected: 12, actual: 6\nstack traceback:\n\t/tmp/tmp_q6alucb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for _, v in ipairs(lst) do\n\
    \    sum = sum + v ^ 2 - (v & 1)\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q550qqu.lua:17:\
    \ expected: 12, actual: 136\nstack traceback:\n\t/tmp/tmp2q550qqu.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      if lst[i] % 2 == 1 then\n        sum = sum + lst[i]\n \
    \     end\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n   local odd = 0\n   for i = 1, #lst do\n      if\
    \ i % 2 == 1 then\n         odd = odd + lst[i]\n      end\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa6bq05uj.lua:26: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    if not lst then\n        return 0\n    end\n\
    \    if #lst <= 0 then\n        return 0\n    end\n    local total, idx1, idx2\
    \ = 0, 0, 0\n    for idx1, x in pairs(lst) do\n        if idx1 % 2 == 1 then\n\
    \            total = total + x\n        end\n        if idx1 == #lst - 1 then\n\
    \            break\n        end\n        if idx1 % 2 ~= 0 then\n            total\
    \ = total + lst[idx1 + 1]\n        end\n    end\n    return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1_1mc7r.lua:31:\
    \ expected: 12, actual: 20\nstack traceback:\n\t/tmp/tmpc1_1mc7r.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local result = 0\n  for i = 1, #lst do\n    if\
    \ i % 2 == 0 then\n      result = result + lst[i]\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqc7tuvlu.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpqc7tuvlu.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local i, sum = 0, 0\n    for i = 1, #lst do\n\
    \        if i % 2 ~= 0 then\n            sum = sum + lst[i]\n        end\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwts13hsw.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpwts13hsw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for _, value in pairs(lst)\
    \ do\n        if value:byte() % 2 == 1 then\n            sum = sum + value\n \
    \       end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgzux0ide.lua:9:\
    \ attempt to index a number value (local 'value')\nstack traceback:\n\t/tmp/tmpgzux0ide.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpgzux0ide.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n   local sum = 0\n   for i = 1, #lst do\n      if\
    \ i % 2 == 0 then\n         sum = sum + lst[i]\n      end\n   end\n   return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5a5c72mb.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp5a5c72mb.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if #lst < 1 then return nil end\n  if #lst < 2\
    \ then return 0 end\n  return lst[#lst+1] + solution(lst:sub(2))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb4b20h3c.lua:9:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpb4b20h3c.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpb4b20h3c.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  return lst and lst[math.floor((#lst-1)/2)]+lst[math.floor((#lst-1)/2)]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr0bpk5wy.lua:13:\
    \ expected: 12, actual: 10\nstack traceback:\n\t/tmp/tmpr0bpk5wy.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for _, elem in pairs(lst) do\n\
    \    if elem % 2 == 1 then\n      sum = sum + elem\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xkw7agj.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp6xkw7agj.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local total = 0\n  for i, num in ipairs(lst) do\n\
    \    if num % 2 == 1 then\n      if i ~= i-1 then\n        total = total + num\n\
    \      end\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm670508x.lua:21:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpm670508x.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    if not lst or #lst == 0 then\n        return\
    \ 0\n    end\n    local n = 0\n    for i = 1, #lst do\n        if lst[i] % 2 ==\
    \ 1 then\n            n = n + lst[i]\n        end\n    end\n    return n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcvg3zu2.lua:22:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpwcvg3zu2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n\tlocal even = 0\n\tlocal odd = 0\n\tfor i = 0,\
    \ lst:len() do\n\t\tlocal num = lst[i]\n\t\tif i % 2 == 0 then\n\t\t\teven = even\
    \ + num\n\t\telse\n\t\t\todd = odd + num\n\t\tend\n\tend\n\treturn even + odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89ql4kta.lua:9:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp89ql4kta.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp89ql4kta.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local evens = 0\n  for i = 1,#lst do\n    if lst[i]\
    \ % 2 == 1 then\n      if i % 2 == 0 then\n\tevens = evens + lst[i]\n      end\n\
    \    end\n  end\n  return evens\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyfbtf9f.lua:21:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpzyfbtf9f.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local even = 0\n    local odd = 0\n    for _,\
    \ v in ipairs(lst) do\n        if v %2 == 0 then\n            even = even + v\n\
    \        else\n            odd = odd + v\n        end\n    end\n    return even\
    \ + odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5zo25xg.lua:22:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmpd5zo25xg.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- base case\n  if lst[1] == nil then return 0\
    \ end\n  \n  -- initialize a variable\n  local sum = 0 \n  \n  -- iterate through\
    \ the list\n  for i=2, #lst do\n    -- check if the element is even\n    if i\
    \ % 2 == 0 then -- it is even\n      -- add it to the sum\n      sum = sum + lst[i]\n\
    \    end\n  end\n  \n  -- return the sum\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrq8_wyh.lua:29:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpxrq8_wyh.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- Your code here\n  local sum = 0\n  local temp\
    \ = 0\n  for i=1,#lst do\n    temp = temp + lst[i]\n    if i % 2 == 1 then\n \
    \     sum = sum + temp\n    end\n  end\n  return sum\nend\nprint(solution([5,\
    \ 8, 7, 1])) -- 12\nprint(solution([3, 3, 3, 3, 3])) -- 9\nprint(solution([30,\
    \ 13, 24, 321])) -- 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi3ktnh33.lua:18: unexpected symbol near '['\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  return lst[#lst]:reduce(function(sum, x)\n   \
    \ return sum + x % 2 ~= 0 and x + sum or sum\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpffdb1e4v.lua:7:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpffdb1e4v.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpffdb1e4v.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- base case\n  if lst == nil then return 0 end\n\
    \  -- base case\n  if #lst == 0 then return 0 end\n  -- base case\n  if lst[1]\
    \ == 0 then return lst[2] end\n  -- base case\n  if lst[1] == 1 then return lst[2]\
    \ - lst[1] end\n  -- recursion\n  local sum = 0\n  local sumEven = 0\n  for i\
    \ = 1, #lst do\n    if i % 2 == 0 then\n      sum = sum + lst[i]\n    else\n \
    \     sumEven = sumEven + lst[i]\n    end\n  end\n  return sumEven + sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpob9a0d4o.lua:31:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmpob9a0d4o.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i=1, #lst do\n    if lst[i]\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pby2kii.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp8pby2kii.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local evenSum = 0\n  local oddSum = 0\n  for _,\
    \ v in pairs(lst) do\n    if v %2 == 0 then\n      evenSum = evenSum + v\n   \
    \ else\n      oddSum = oddSum + v\n    end\n  end\n  return evenSum + oddSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vbbl163.lua:22:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmp_vbbl163.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  local len = #lst\n  for i = 1,\
    \ len do\n    if math.mod(i, 2) == 1 then\n      sum = sum + lst[i]\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpde6dp8cq.lua:10:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpde6dp8cq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpde6dp8cq.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum_even = 0\n  for i = 1, #lst do\n   \
    \ if (lst[i] % 2) ~= 0 then\n      sum_even = sum_even + lst[i]\n    end\n  end\n\
    \  return sum_even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplc1qm1xz.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmplc1qm1xz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n   local total = 0\n   for _, v in pairs(lst) do\n\
    \      if v % 2 == 1 then\n         total = total + v\n      end\n   end\n   return\
    \ total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvhmsc4d.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpuvhmsc4d.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    local evenIndex = 0\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqaosqf1t.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if #lst == 0 then\n    return 0\n  end\n  \n \
    \ local odd = 0 -- sum of odd numbers\n  for i = 1, #lst do\n    if i % 2 == 0\
    \ then\n      odd = odd + lst[i]\n    end\n  end\n  return odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpos8tpqcv.lua:23:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpos8tpqcv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n   local sum = 0\n   local i = 1\n   while i <=\
    \ lst do\n      if lst:sub(i,i) == 1 then\n         sum = sum + lst:sub(i-1,i)\n\
    \      end\n      i = i + 1\n   end\n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9zt3kf3u.lua:9:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmp9zt3kf3u.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9zt3kf3u.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n\tlocal sum = 0\n\tlocal odd = 0\n\tfor i=1,#lst,2\
    \ do\n\t\tlocal value = lst[i]\n\t\tif (value % 2) == 1 then\n\t\t\tsum = sum\
    \ + value\n\t\t\todd = 1\n\t\telseif (odd == 0) then\n\t\t\tsum = value\n\t\t\t\
    odd = 1\n\t\telseif (odd == 1) then\n\t\t\tsum = sum + value\n\t\t\todd = 0\n\t\
    \tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvayub_74.lua:30:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpvayub_74.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i=1,#lst do\n    local el\
    \ = lst[i]\n    if el % 2 == 0 then\n      if el > 1 then\n        sum = (el +\
    \ sum) / 2\n      else\n        sum = (el + sum) / 2\n      end\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1m6uesbm.lua:24:\
    \ expected: 12, actual: 4\nstack traceback:\n\t/tmp/tmp1m6uesbm.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  assert(lst)\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if i > 1 then\n      if lst[i] > lst[i - 1] + 1 then\n        sum =\
    \ sum + lst[i - 1] + 1\n      end\n    else\n      sum = sum + lst[i] + 1\n  \
    \  end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23c0llaz.lua:25:\
    \ expected: 9, actual: 4\nstack traceback:\n\t/tmp/tmp23c0llaz.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local n = 1\n  local even = true\n  for v in lst\
    \ do\n    if not even then\n      n = n + v\n    elseif v % 2 == 1 then\n    \
    \  n = n + v\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmjdo5lni.lua:9:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpmjdo5lni.lua:9: in\
    \ local 'candidate'\n\t/tmp/tmpmjdo5lni.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for _, v in ipairs(lst) do\n\
    \        if v % 2 ~= 0 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0mi9xyb.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpb0mi9xyb.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  assert(#lst >= 1)\n  local sum = 0\n  for i=1,\
    \ #lst do\n    if i % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp58rwt7p.lua:20:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpp58rwt7p.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i]%2\
    \ == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg_k1jd_.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpqg_k1jd_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  return lst\n  and sum(lst)\n  and lst[math.floor(#lst/2)+math.mod(#lst,2)]:zero()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp15bgnjy2.lua:8:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp15bgnjy2.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp15bgnjy2.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst, 2 do\n    if\
    \ lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    if lst[1] == nil then\n        return 0\n  \
    \  end\n    local sum_even = 0\n    local sum_odd = 0\n    local n = #lst\n  \
    \  for i, v in pairs(lst) do\n        if i % 2 == 0 then\n            sum_even\
    \ = sum_even + v\n        else\n            sum_odd = sum_odd + v\n        end\n\
    \    end\n    return sum_even + sum_odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19c19d0h.lua:26:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmp19c19d0h.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    if lst[1] == nil then return nil\n    else if\
    \ lst[1] == 1 then return lst[2] -- First element of list is 1\n    else local\
    \ sum = 0 -- Second element of list is odd\n    for i = 2, #lst do\n        if\
    \ lst[i] % 2 ~= 0 then return nil -- Element is odd\n        sum = sum + lst[i]\n\
    \    end\n    return sum\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvh2tfgw2.lua:12: 'end' expected (to close 'if' at line 11)\
    \ near 'sum'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    assert(lst)\n    local sum = 0\n    for i =\
    \ 1, #lst do\n        if i % 2 == 1 then\n            sum = sum + lst[i]\n   \
    \     end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gyry79n.lua:22:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmp_gyry79n.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local oddsum = 0\n  for _, item in pairs(lst)\
    \ do\n    if item % 2 == 0 then\n      oddsum = oddsum + item\n    end\n  end\n\
    \  return oddsum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqeoh0s73.lua:19:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpqeoh0s73.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 1 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkbde59d.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpgkbde59d.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    if #lst == 0 then\n        return 0\n    end\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[#lst]%2 == 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\n</cell>\n\
    <cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm07j72tf.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local s = 0\n    for i=1,#lst do\n        if\
    \ lst[i]%2==1 then\n            s = s + lst[i]\n        end\n    end\n    return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1pcsfk6j.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp1pcsfk6j.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  local i = 1\n  while i < #lst\
    \ do\n    if lst[i] == 0 then\n      i = i + 1\n      continue\n    end\n    sum\
    \ = sum + lst[i]\n    i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvvnpvl21.lua:13: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i=1, #lst do\n    if lst[i]\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm1t9giq.lua:19:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmprm1t9giq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if lst == nil or #lst == 0 then\n    return 0\n\
    \  end\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 1 then\n      odd\
    \ = odd + lst[i]\n    end\n  end\n  return odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2l6cjbz4.lua:24:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmp2l6cjbz4.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local evens, odds = 0, 0\n    for i = 1, #lst\
    \ do\n        if i % 2 == 0 then\n            evens = evens + lst[i]\n       \
    \ else\n            odds = odds + lst[i]\n        end\n    end\n    return odds\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnwz5aaun.lua:23:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpnwz5aaun.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local evenSum = 0\n  local oddSum = 0\n  for i\
    \ = 1, #lst do\n    if i ~= #lst and i % 2 = 0 then\n      evenSum = evenSum +\
    \ lst[i]\n    else\n      oddSum = oddSum + lst[i]\n    end\n  end\n  return evenSum\
    \ + oddSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnq0ms479.lua:10: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  assert(type(lst) == \"table\")\n  \n  if #lst\
    \ == 0 then\n    return 0\n  else\n    local sum = 0\n    \n    for i = 1, #lst\
    \ do\n      if lst[i] % 2 == 0 then\n        sum = sum + lst[i]\n      end\n \
    \   end\n    \n    return sum\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzx321kd9.lua:27:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpzx321kd9.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    if lst == nil then\n        return nil\n   \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0b6ju82i.lua:23: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  assert(type(lst) == 'table')\n  if #lst == 0 then\n\
    \    return 0\n  else\n    local even, odd = 0, 0\n    for i=1,#lst do\n     \
    \ if i%2 == 0 then\n        even = even + lst[i]\n      else\n        odd = odd\
    \ + lst[i]\n      end\n    end\n    return odd - (even + lst[1])\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1w639bul.lua:26:\
    \ expected: 12, actual: -2\nstack traceback:\n\t/tmp/tmp1w639bul.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst - 1 do\n    if\
    \ lst[i]%2 ~= 0 and lst[i+1]%2 ~= 0 then\n      sum = sum + lst[i]\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyu7s2u4v.lua:19:\
    \ expected: 12, actual: 7\nstack traceback:\n\t/tmp/tmpyu7s2u4v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if lst:len() == 0 then\n    return 0\n  end\n\
    \  local sum = 0\n  for i = 2, lst:len() do\n    if lst[i]%2 == 0 then\n     \
    \ sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1rqq6tpi.lua:7:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp1rqq6tpi.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1rqq6tpi.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    return lst[math.ceil(#lst / 2)] + math.abs(lst[math.ceil(#lst\
    \ / 2) - 1] - lst[math.ceil(#lst / 2)])\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpce48rxqw.lua:13:\
    \ expected: 12, actual: 11\nstack traceback:\n\t/tmp/tmpce48rxqw.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for _, v in ipairs(lst) do\n\
    \    if v % 2 == 1 then sum = sum + v end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpesnzts5o.lua:17:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpesnzts5o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    -- write your code in JavaScript (Node.js 8.9.4)\n\
    \    return sum(lst) ~= lst and sum(lst) ~= lst + 1 and sum(lst) - sum(lst:sub(1,lst\
    \ % 2)) > lst + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr50j_kl5.lua:8:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpr50j_kl5.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpr50j_kl5.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if v %2 == 1 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfnrptce.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpdfnrptce.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 1 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdjbbwrz.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpgdjbbwrz.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- Write your function here\n  local even = 0\n\
    \  local odd = 0\n  for _, i in ipairs(lst) do\n    if i % 2 == 0 then\n     \
    \ even = even + i\n    else\n      odd = odd + i\n    end\n  end\n  return odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6drwq36t.lua:23:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp6drwq36t.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local odd = 1\n    local total = 0\n    for\
    \ _, value in pairs(lst) do\n        if value % 2 ~= 0 then\n            total\
    \ = total + odd\n            odd = 1\n        else\n            odd = odd + 2\n\
    \        end\n    end\n    return total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63dkpwcu.lua:23:\
    \ expected: 12, actual: 5\nstack traceback:\n\t/tmp/tmp63dkpwcu.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if #lst < 1 then return 0 end\n  local sum = 0\n\
    \  local pos = 1\n  while pos < #lst do\n    if lst[pos] % 2 == 0 then\n     \
    \ sum = sum + lst[pos]\n    end\n    pos = pos + 1\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8r_72bpd.lua:22:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmp8r_72bpd.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if #lst == 0 then\n    return 0\n  else\n    return\
    \ lst / 2 + lst % 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnj_q8arc.lua:10:\
    \ attempt to perform arithmetic on a table value (local 'lst')\nstack traceback:\n\
    \t/tmp/tmpnj_q8arc.lua:10: in local 'candidate'\n\t/tmp/tmpnj_q8arc.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if lst[i]%2==1 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\n13. Using a for loop, print every third\
    \ number in the list (1 2 3 4 5 6 7 8 9 10).\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp09b72fs5.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if lst == nil then return 0 end\n  local total\
    \ = 0\n  for i = 1, #lst do\n    if i % 2 == 1 then\n      total = total + lst[i]\n\
    \    end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8yzypcpy.lua:22:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmp8yzypcpy.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if #lst~=0 then\n    local even=0\n    for i=1,#lst-1\
    \ do\n      if lst[i]==3 then\n        even=even+lst[i+1]\n      end\n    end\n\
    \    return even\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44aq6yzx.lua:23:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmp44aq6yzx.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  return lst:gsub(\"[^%d]\", function(num) return\
    \ num end):gsub(\"^%d\", function(num) return \"\" end):gsub(\"%d\", function(a,\
    \ b) return a + b end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprhl0v7un.lua:7:\
    \ attempt to call a nil value (method 'gsub')\nstack traceback:\n\t/tmp/tmprhl0v7un.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprhl0v7un.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n   -- Base Case: Empty list or list with one element\n\
    \   return lst[1] == nil and 1 or lst[#lst] + (lst[#lst+1] == nil and 0 or 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpil7qp1y1.lua:14:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpil7qp1y1.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local even, odd = 0, 1\n    for _, elem in pairs(lst)\
    \ do\n        if elem % 2 == 0 then\n            even = even + elem\n        else\n\
    \            odd = odd + elem\n        end\n    end\n    return even * odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa52fvs8w.lua:21:\
    \ expected: 12, actual: 112\nstack traceback:\n\t/tmp/tmpa52fvs8w.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n   if lst[1] == nil then return 0 end\n   local\
    \ even = 0\n   local odd = 0\n   local sum_ = 0\n   for i=1, #lst do\n      if\
    \ i % 2 == 0 then\n         even = even + lst[i]\n      else\n         odd = odd\
    \ + lst[i]\n      end\n   end\n   sum_ = even + odd\n   return sum_\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8t8onods.lua:25:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmp8t8onods.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum=0\n  local l=#lst\n  for i=1, l do\n\
    \    if lst[i]%2==0 then\n      sum=sum+lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdj_jr5i7.lua:20:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpdj_jr5i7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if lst[1] == nil then\n    return 0\n  end\n \
    \ local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 0 then\n      sum\
    \ = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy44z85sc.lua:22:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpy44z85sc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if #lst == 0 then return 0 end\n  if #lst == 1\
    \ then return lst[1]*2 end\n  if lst[#lst] % 2 == 0 then return 0 end\n  local\
    \ sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 1 then\n      sum = sum\
    \ + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25iw1kq3.lua:22:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp25iw1kq3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  return lst[#lst]:reduce(function(a, b, c) \n \
    \   if c%2 = 0 then return a + b end\n    return a\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg64vb1m1.lua:8: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i in lst:gmatch('%d*') do\n\
    \    if string.sub(i,1,1) == 'o' then\n      sum = sum + tonumber(i)\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsac4907c.lua:8:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpsac4907c.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpsac4907c.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for _, v in ipairs(lst) do\n\
    \    if v % 2 ~= 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zbbwo6q.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp6zbbwo6q.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n   -- Base case\n   if #lst == 0 then\n      return\
    \ 0\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyr0fxyw4.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  local n = 0\n  for i = 1,#lst\
    \ do\n    if i - n % 2 == 0 then\n      sum = sum + lst[i]\n    end\n    n = i\
    \ + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnbr52gd.lua:21:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmpjnbr52gd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local ret = 0\n    for i = 1, #lst do\n    \
    \    if string.sub(lst,i,i)==\"Od\" then\n            ret =+ string.sub(lst,i,i)\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_vpm9eqr.lua:10: unexpected symbol near '+'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n\tlocal ans, i, flag = 0, 0, false\n\tfor i, v in\
    \ ipairs(lst) do\n\t\tif not flag then\n\t\t\tif v % 2 == 1 then\n\t\t\t\tans\
    \ = ans + v\n\t\t\t\tflag = true\n\t\t\tend\n\t\telse\n\t\t\tans = ans - v\n\t\
    \t\tflag = false\n\t\tend\n\tend\n\treturn ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnwphbna.lua:25:\
    \ expected: 12, actual: 3\nstack traceback:\n\t/tmp/tmpxnwphbna.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n\tlocal sum = 0\n\t\n\tfor i = 1, #lst do\n\t\t\
    if i % 2 == 0 then\n\t\t\tsum = sum + lst[i]\n\t\tend\n\tend\n\t\n\treturn sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06ggwqd0.lua:21:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp06ggwqd0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ ~= math.floor(i) then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\
    \ % 2 == 0 and sum or 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpze29dpjf.lua:19:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmpze29dpjf.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    return lst[#lst]:sum(function(a, b) return b\
    \ == 1 and a % 2 == 1 end) or 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppna1ue51.lua:7:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmppna1ue51.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmppna1ue51.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  assert(lst)\n  local total = 0\n  for _, val in\
    \ ipairs(lst) do\n    if val % 2 ~= 0 then\n      total = total + val\n    end\n\
    \  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawetn76_.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpawetn76_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    return lst:reduce(function(accum, elem) \n \
    \       return accum + elem % 2 and 0 or accum\n    end, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm3zf46ds.lua:7:\
    \ attempt to call a nil value (method 'reduce')\nstack traceback:\n\t/tmp/tmpm3zf46ds.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpm3zf46ds.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local even = 0\n  for idx = 1, #lst do\n    if\
    \ math.mod(idx, 2) == 0 then\n      even = even + lst[idx]\n    end\n  end\n \
    \ return even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpasrtojuu.lua:9:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpasrtojuu.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpasrtojuu.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local even = 0\n  local odd = 0\n  for _, i in\
    \ pairs(lst) do\n    if i % 2 == 0 then even = even + i end\n    if i % 2 == 1\
    \ then odd = odd + i end\n  end\n  return even + odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj66oi6iw.lua:19:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmpj66oi6iw.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n   local result = {}\n   for i,v in ipairs(lst)\
    \ do\n      if i % 2 == 1 then \n         result[#result+1] = v\n      end\n \
    \  end\n   return result\nend\n</code>\n<|/ a dscore=1 tags=lua |>\n<| a |>\n\
    Just to provide a different approach that should be faster: use one less loop.\
    \ \n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_ramfh98.lua:15: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    return lst[#lst] * (lst[#lst] - 1) / 2 + lst[#lst]\
    \ - (lst[#lst] - 1) * (lst[#lst] - 1) / 2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq7m6t6r.lua:13:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpcq7m6t6r.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- Base case\n  if lst[1] % 2 = 0 then\n    return\
    \ 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphfk2bkay.lua:8: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n\tassert(type(lst) == \"table\")\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb8153qdp.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  assert(type(lst) == \"table\")\n  local sum =\
    \ 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 then\n      sum = sum + v\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa15cpn45.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpa15cpn45.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    -- write your code in JavaScript (Node.js 8.9.4)\n\
    \    local oddsum = 0\n    for i = 1, #lst do\n        if ((i % 2 == 0) and (lst[i]\
    \ % 2 == 1)) then\n            oddsum = oddsum + lst[i]\n        end\n    end\n\
    \    return oddsum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjcj2hj6v.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpjcj2hj6v.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    if lst == nil then return nil end\n    local\
    \ n = 0\n    for i, x in ipairs(lst) do\n        if x % 2 == 0 then\n        \
    \    n=n+x\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp746py464.lua:20:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmp746py464.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local odds = 0\n    for i, v in pairs(lst) do\n\
    \        if ((v % 2) == 1) then\n            odds = odds + v\n        end\n  \
    \  end\n    return odds\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9cp3i8i.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpx9cp3i8i.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if #lst > 0 then\n    local total = 0\n    local\
    \ i = 1\n    while i < #lst do\n      if i % 2 ~= 0 then\n        total = total\
    \ + lst[i]\n      end\n      i = i + 1\n    end\n    return total\n  else\n  \
    \  return nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2ecd3ap.lua:26:\
    \ expected: 9, actual: 6\nstack traceback:\n\t/tmp/tmpz2ecd3ap.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local even, odd = 0, 1\n    for _, x in ipairs(lst)\
    \ do\n        if x % 2 == 0 then\n            even = even  + x\n        else\n\
    \            odd = odd  + x\n        end\n    end\n    return even + odd\nend\n\
    </cell>\n<text>\nThe solutions below will work with any list that has a finite\
    \ number of elements; however, they may suffer from poor performance for long\
    \ lists. A more efficient solution will require more complicated logic and will\
    \ have a runtime that is roughly proportional to the length of the input list.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5v7afhqn.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i=1,#lst do\n    if lst[i]\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq92u8vln.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpq92u8vln.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9h97h6y.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmp_9h97h6y.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  -- Base Case\n  if lst[1] == nil or lst[2] ==\
    \ nil then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplcrk5bt9.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  return lst:reduce((acc, val) -> ((val % 2) and\
    \ acc + val) or (acc)) or 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1rr1xdvx.lua:7: ')' expected near ','\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local odd = 0\n  for i = 0, lst:len() do\n   \
    \ if i % 2 ~= 0 then\n      odd = odd + lst[i]\n    end\n  end\n  return odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvt6sl0v5.lua:8:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpvt6sl0v5.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpvt6sl0v5.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n\tlocal result = 0\n\tfor i = 1, #lst do\n\t\tif\
    \ lst[i] % 2 == 0 then\n\t\t\tresult = result + lst[i]\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxae7zzc7.lua:19:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpxae7zzc7.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if #lst == 0 then\n    return 0\n  end\n  if lst[1]\
    \ % 2 == 0 then\n    return lst[1] + solution(lst[#lst]:gsub(2, \"\"))\n  end\n\
    \  return solution(lst[#lst]:gsub(2, \"\")) + (lst[1] / 2) * 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps3f9fivz.lua:13:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmps3f9fivz.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmps3f9fivz.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    local i = 0\n    while i\
    \ < lst do\n        if i % 2 == 1 then\n            sum = sum + lst[i]\n     \
    \   end\n        i = i + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsq72rfv8.lua:9:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmpsq72rfv8.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpsq72rfv8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  return lst:reduce(function(total, val)\n    if\
    \ val %2 == 0 then\n      return total + val\n    end\n  end, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplgn85wn5.lua:7:\
    \ attempt to call a nil value (method 'reduce')\nstack traceback:\n\t/tmp/tmplgn85wn5.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplgn85wn5.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n\tlocal sum = 0 \n\t\n\tfor i = 1, #lst do\n\t\t\
    if i % 2 == 1 then\n\t\t\tsum = sum + lst[i]\n\t\tend\n\tend\n\t\n\treturn sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpybpshelh.lua:23:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpybpshelh.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local odd = 0\n    local even = 0\n    for i=1,#lst\
    \ do\n        if lst[i] % 2 == 0 then\n            even = even+lst[i]\n      \
    \  else\n            odd = odd+lst[i]\n        end\n    end\n    return odd +\
    \ even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6an363_.lua:22:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmpr6an363_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local index = 0\n    local sum = 0\n    for\
    \ i = 1, #lst do\n        if index % 2 ~= 0 then\n            sum = sum + lst[i]\n\
    \        else\n            index = index + 1\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcaqjuirf.lua:22:\
    \ expected: 12, actual: 16\nstack traceback:\n\t/tmp/tmpcaqjuirf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  return lst.filter(function(_, i)\n      return\
    \ (i%2) == 1\n    end)\n  .reduce(function(x, y)\n    return x + y\n  end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2q37b5xd.lua:7:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmp2q37b5xd.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2q37b5xd.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 2, #lst do\n    \
    \    if ((i - 1) % 2 == 0) and (lst[i] % 2 == 1) then\n            sum = sum +\
    \ lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7s49w0hi.lua:19:\
    \ expected: 12, actual: 7\nstack traceback:\n\t/tmp/tmp7s49w0hi.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if lst[1] == nil then\n    return 0\n  end\n \
    \ local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 0 then\n      sum\
    \ = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgmb5zfw.lua:22:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpkgmb5zfw.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local odd = 0\n  for i=1,#lst do\n    if i % 2\
    \ == 1 then\n      odd = odd + lst[i]\n    end\n  end\n  return odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqayyotx.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpgqayyotx.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if #lst <= 0 then return 0 end\n  local even =\
    \ {}\n  for _, i in ipairs(lst) do\n    if i % 2 ~= 0 then table.insert(even,\
    \ 0) else table.insert(even, i) end\n  end\n  table.sort(even)\n  return even[#even]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fhl9vdq.lua:19:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmp4fhl9vdq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i=2,#lst do\n       \
    \ if lst[i]%2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzosafhe2.lua:19:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpzosafhe2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  return reduceRight(function(sum,elem,idx)\n  \
    \  if idx%2 ~= 0 then\n      return sum + elem\n    end\n  end, lst, 0)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpalvief61.lua:7:\
    \ attempt to call a nil value (global 'reduceRight')\nstack traceback:\n\t/tmp/tmpalvief61.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpalvief61.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    if lst == nil or lst == false then\n       \
    \ return 0\n    end\n    if type(lst) == \"table\" then\n        if #lst > 0 then\n\
    \            if type(lst[1]) == \"table\" then\n                if #lst[1] ==\
    \ 0 then\n                    return 0\n                else\n               \
    \     local evens = #lst[1] - 1\n                    for _, val in ipairs(lst)\
    \ do\n                        if val % 2 ~= 0 and val ~= 1 then\n            \
    \                evens = evens + 1\n                        end\n            \
    \        end\n                    return evens * 2\n                end\n    \
    \        else\n                return 0\n            end\n        end\n    end\n\
    end\n</cell>\n<cell>\n%%python\ndef solution(lst):\n    even = 0\n    odd = 1\n\
    \    for x in lst:\n        if x % 2 == 0:\n            even = even + x\n    \
    \    else:\n            odd = odd + x\n    return even + odd\n</cell>\n<text>\n\
    sum() function\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmyseavyw.lua:30: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    return lst:sum():gmatch(function(x) return x%2\
    \ ~= 0 end):sum()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp362_90uw.lua:7:\
    \ attempt to call a nil value (method 'sum')\nstack traceback:\n\t/tmp/tmp362_90uw.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp362_90uw.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local evens = {}\n    for i, v in ipairs(lst)\
    \ do\n        if v%2==0 then\n            table.insert(evens, v)\n        end\n\
    \    end\n    return #evens\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2xxo3bc.lua:19:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpc2xxo3bc.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for _, v in ipairs(lst) do\n\
    \    if v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w8n23t2.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp2w8n23t2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if lst == nil then return 0 end\n  local n = 1\n\
    \  for _, v in ipairs(lst) do\n    if v %2 ~= 0 then\n      n = n + v\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5pjetvf.lua:20:\
    \ expected: 12, actual: 14\nstack traceback:\n\t/tmp/tmpp5pjetvf.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  local maxIndex = #lst - 1\n \
    \ \n  for i = 1, maxIndex do\n    if i % 2 ~= 0 then\n      sum = sum + lst[i]\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7ys60kq.lua:22:\
    \ expected: 9, actual: 6\nstack traceback:\n\t/tmp/tmpj7ys60kq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if lst == nil then\n    return \"No elements\"\
    \n  elseif #lst <= 1 then\n    return lst[1]\n  else\n    local evens, odds =\
    \ 2, 3\n    local total = 0\n    for i=1, #lst do\n      total = total + lst[i]\n\
    \      if i == evens then\n        evens = evens + 2\n      elseif i == odds then\n\
    \        odds = odds + 2\n      else\n        evens = evens + 1\n        odds\
    \ = odds + 1\n      end\n    end\n    return total\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpluabscb0.lua:32:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmpluabscb0.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    if lst == nil then\n        return 0\n    end\n\
    \    local sum = 0\n    for i = 2, #lst do\n        if lst[i - 1] % 2 == 1 then\n\
    \            sum = sum + lst[i - 1]\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbx27eb3.lua:23:\
    \ expected: 9, actual: 12\nstack traceback:\n\t/tmp/tmpmbx27eb3.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  if lst == nil then return 0 end\n  local even\
    \ = lst:select( function (x) return x % 2 == 0 end )\n  local odd = lst:select(\
    \ function (x) return x % 2 ~= 0 end )\n  return even:reduce(function(acc, x)\
    \ return acc + x end) + odd:reduce(function(acc, x) return acc + x end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvy9vdtkk.lua:8:\
    \ attempt to call a nil value (method 'select')\nstack traceback:\n\t/tmp/tmpvy9vdtkk.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpvy9vdtkk.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuitj5wxk.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpuitj5wxk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    if not lst or #lst == 1 then\n        return\
    \ 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjl9hw28m.lua:23: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    if lst == nil then\n        return 0\n    end\n\
    \    local evenSum = 0\n    for idx = 1, #lst do\n        if idx == 2 or idx ==\
    \ 3 or idx == 6 then\n            evenSum = evenSum + lst[idx]\n        else\n\
    \            evenSum = evenSum + lst[idx - 2]\n        end\n    end\n    return\
    \ evenSum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7,\
    \ 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13,\
    \ 24, 321]) == 0\n</cell>\n<text>\n4.4. The average of numbers\nWrite a function\
    \ average that calculates the average of the numbers in a list l.\nExamples\n\
    average([2, 1, 3]) ==> 2\naverage([2, 4, 6, 8]) ==> 5.5\naverage([5]) ==> 5\n\
    average([100]) ==> 50\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppo9mrqok.lua:20: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for _, v in pairs(lst) do\n \
    \   if v %2 == 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1erqsvbq.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp1erqsvbq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local result = 0\n  for i = 1, #lst do\n    if\
    \ i % 2 == 0 then\n      result = result + lst[i]\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo23d7n1k.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpo23d7n1k.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
