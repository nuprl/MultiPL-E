name: HumanEval_35_max_element
language: lua
prompt: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n--\
  \ 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
  \ function max_element(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
  \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #l == 0 then\n    return nil\n  end\n  local n = l[1]\n  for i\
    \ = 2, #l do\n    if l[i] > n then\n      n = l[i]\n    end\n  end\n  return n\n\
    end", "  if #l == 0 then return nil end\n  local max, max_val = l[1], l[1]\n \
    \ for i = 2, #l do\n    if l[i] > max_val then\n      max_val = l[i]\n      max\
    \ = i\n    end\n  end\n  return max\nend", "  local max = l[1]\n  for i = 2, #l\
    \ do\n    if l[i] > max then\n      max = l[i]\n    end\n  end\n  return max\n\
    end", "  if l==nil then return nil end\n  if #l == 0 then return nil end\n  local\
    \ m = l[1]\n  for i=2, #l do\n    if l[i] > m then\n      m = l[i]\n    end\n\
    \  end\n  return m\nend", "    local _, s = l[1]\n    for _, v in l[#l]:gmatch(\"\
    %d*%d*\") do\n        s = v < s and v or s\n    end\n    return s\nend", '  if
    l == nil then return nil end', "  assert(not nil or l)\n  local r = l[1]\n  for\
    \ i=2,#l do\n    local e = l[i]\n    if e > r then\n      r = e\n    end\n  end\n\
    \  return r\nend", "  local max_element\n  if #l == 0 then\n    return nil\n \
    \ else\n    max_element = l[1]\n    for i = 2, #l do\n      if l[i] > max_element\
    \ then\n        max_element = l[i]\n      end\n    end\n    return max_element\n\
    \  end\nend", "  if l==nil then return nil end\n  local max=0\n  local t={}\n\
    \  for i=1,#l do t[#t+1]=l[i] end\n  local j=1\n  for _,v in ipairs(t) do\n  \
    \  if v>max then\n      max=v\n    end\n  end\n  return max\nend", "  local max\
    \ = 0\n  local idx = 0\n  for i = 1, #l do\n    if max < l[i] then idx = i else\
    \ max = l[i] end\n  end\n  return idx\nend", "  if l==nil then return nil end\n\
    \  local max = l[1]\n  for i = 2, #l do\n    if l[i]>max then max = l[i] end\n\
    \  end\n  return max\nend", "  local max_element = nil\n  local max_value = nil",
  "  return l[#l]\nend", "    local m = nil\n    local i = 1\n    for i, v in ipairs(l)\
    \ do\n        if m == nil or m > v then\n            m = v\n        end\n    end\n\
    \    return m\nend", "    if l == nil then return nil end\n    local ln = #l\n\
    \    if ln == 0 then return nil end\n    local max = l[1]\n    for i = 2, ln do\n\
    \        if l[i] > max then\n            max = l[i]\n        end\n    end\n  \
    \  return max\nend", "  if #l == 0 then\n    return nil\n  end\n  local largest\
    \ = nil\n  for i = 1, #l do\n    local e = l[i]\n    if largest == nil or e >\
    \ largest then\n      largest = e\n    end\n  end\n  return largest\nend", " \
    \ if #l == 0 then return nil end\n  local maxVal = l[1]\n  for i = 2, #l do\n\
    \    if l[i] > maxVal then maxVal = l[i] end\n  end\n  return maxVal\nend", " \
    \ if l == nil then return nil end\n  if #l == 0 then return nil end\n  if #l ==\
    \ 1 then return l[1] end\n  local i = 1\n  local m = l[1]\n  for i = 2, #l do\n\
    \    if l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend", "  return\
    \ l[1]\n  if l == nil then\n    return nil\n  end\n  local min_element = l[1]\n\
    \  for i = 2, #l do\n    if l[i] > min_element then\n      min_element = l[i]\n\
    \    end\n  end\n  return min_element\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local m = l[1]\n  for i = 2, #l do\n    if l[i] > m then\n      m =\
    \ l[i]\n    end\n  end\n  return m\nend", "  assert(type(l) == 'table')\n  local\
    \ m = nil\n  local max = nil\n  for i, v in ipairs(l) do\n    if v > m then\n\
    \      m, max = v, i\n    end\n  end\n  return m or max\nend", "  local n = #l\n\
    \  if n == 0 then\n    return nil\n  end", "  local maxValue = -math.inf\n  for\
    \ _, value in pairs(l) do\n    if value > maxValue then maxValue = value end\n\
    \  end\n  return maxValue\nend", "  if l == nil then return nil end\n  local n\
    \ = 1 -- start\n  local m = nil -- maximum\n  for _, e in ipairs(l) do\n    if\
    \ n > e then\n      if m == nil or n > m then\n        m = n\n      end\n    end\n\
    \    n = e\n  end\n  if m == nil then\n    m = -n -- maximum\n  end\n  return\
    \ m\nend", "  assert(#l ~= 0)\n  local i, max_i = 1, 0\n  for i in l, nil do\n\
    \    if i > max_i then\n      max_i = i\n    end\n  end\n  return max_i\nend",
  "  return l[#l]\nend", "  local maxv = 1\n  for _, v in ipairs(l) do\n    if v >\
    \ maxv then\n      maxv = v\n    end\n  end\n  return maxv\nend", "  return l[#l]\n\
    end", "  local max\n  local i = 1\n  for l in pairs(l) do\n    if max and max\
    \ < l then\n      max = l\n      i = i\n    end\n  end\n  return i\nend", "  \
    \  local largest = nil\n    for i, x in ipairs(l) do\n        if x == nil then\n\
    \            largest = nil\n        elseif largest==nil then\n            largest\
    \ = x\n        else\n            if x <= largest then\n                largest\
    \ = x\n            end\n        end\n    end\n    return largest\nend", "  if\
    \ #l == 0 then\n    return nil\n  end", "  local result = nil\n  local max_value\
    \ = nil\n  for _,v in ipairs(l) do\n    if type(v) == 'number' then\n      if\
    \ result == nil or v > max_value then\n        result = v\n      end\n    else\n\
    \      if type(v) == 'table' and max_value == nil then\n        max_element =\
    \ v\n      end\n    end\n  end\n  return result\nend", "  if #l == 0 then\n  \
    \  return nil\n  end\n  local max_element, max_value = l[1], l[1]\n  for i = 2,\
    \ #l do\n    if l[i] > max_value then\n      max_element, max_value = l[i], l[i]\n\
    \    end\n  end\n  return max_element\nend", "  local max = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] > max then max = l[i] end\n  end\n  return max\nend", " \
    \   local m\n    for _, m in ipairs(l) do\n        if m > m then\n           \
    \ return m\n        end\n    end\n    return nil\nend", "  return l[1] and l[1]\
    \ > 0 and #l > 1 and max_element(l) or nil\nend", "  assert(#l >= 1)\n  local\
    \ max\n  local i = 1\n  for _, e in ipairs(l) do\n    if max is None or e > max\
    \ then\n      max = e\n    end\n    i = i + 1\n  end\n  return max\nend", "\t\
    assert(#l > 0)\n\tlocal m, e = 0, l[1]\n\tfor i = 2, #l do\n\t\tif e > l[i] then\
    \ e = l[i] end\n\t\tif m > e then\n\t\t\tm = e\n\t\tend\n\tend\n\treturn m\nend",
  "    local max_value = nil\n    for i = 1, #l do\n        local v = l[i]\n     \
    \   if v > max_value then\n            max_value = v\n        end\n    end\n \
    \   return max_value\nend", "   local max = l[1]\n   for i=2,#l do\n      if max\
    \ < l[i] then\n         max = l[i]\n      end\n   end\n   return max\nend", " \
    \ local max_v, max_k = nil, nil\n  for k, v in ipairs(l) do\n    if v > max_v\
    \ then\n      max_v = v\n      max_k = k\n    end\n  end\n  return max_k\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local i, largest = 1, nil\n  for i\
    \ = 2, #l do\n    if l[i] > largest then\n      largest = l[i]\n    end\n  end\n\
    \  return largest\nend", "  if #l == 0 then return nil end\n  local max_elem =\
    \ l[1]\n  for i = 2, #l do\n    if max_elem < l[i] then max_elem = l[i] end\n\
    \  end\n  return max_elem\nend", "  return function(x, i, rest) rest = rest or\
    \ {} end,\n    i == #l and x or x >= l[i] and max_element(l[i + 1])(x, i + 1),\n\
    \    x\nend", "    local result = l[1]\n    for i = 2, #l do\n        if result\
    \ > l[i] then\n            result = l[i]\n        end\n    end\n    return result\n\
    end", "  assert(#l > 0)\n  local i, j = 0, #l - 1\n  while i <= j do\n    if l[i]\
    \ > l[j] then i, j = i, j + 1 else\n      assert(l[i] == l[j])\n    end\n  end\n\
    \  return l[j]\nend", "  if l == nil then\n    return nil\n  else\n    local max,\
    \ max_i = nil, 1\n    for i = 1, #l do\n      if max and max < l[i] then\n   \
    \     max, max_i = l[i], i\n      elseif max and max > l[i] then\n        max,\
    \ max_i = l[i], max_i\n      end\n    end\n    return max\n  end\nend", "  if\
    \ l[1] == nil then\n    return l\n  elseif l[1] == l[2] then\n    return max_element(l[2])\n\
    \  else\n    return l[1]\n  end\nend", "    if l == nil then return nil end\n\
    \    local _, last = unpack(l):max(1)\n    return last\nend", "  local max_val\
    \ = nil\n  for i = 1, #l do\n    local e_value = l[i]\n    if max_val == nil or\
    \ e_value > max_val then\n      max_val = e_value\n    end\n  end\n  return max_val\n\
    end", "  if l==nil then\n    return nil\n  end", "  local maxVal = nil\n  local\
    \ maxIndex = nil\n  local i = 1\n  for i = 1, #l do\n    if l[i] > maxVal then\n\
    \      maxVal = l[i]\n      maxIndex = i\n    end\n  end\n  return maxIndex, maxVal\n\
    end", "  local max\n  for _, v in ipairs(l) do\n    if max and v > max then\n\
    \      max = v\n    end\n  end\n  return max\nend", "  if l==nil then\n    return\
    \ nil\n  else\n    return l[#l]\n  end\nend", "   assert(type(l) == \"table\"\
    \ and \"table\" == type(l[1])) -- list with more than one element\n   local max_v\
    \ = l[1]\n   local i = 1\n   for _, v in ipairs(l) do\n      if v > max_v then\n\
    \         max_v = v\n      end\n      i = i + 1\n   end\n   return max_v\nend",
  "  if l==nil then return nil end\n  local i = 1\n  local max = l[1]\n  local v =\
    \ l\n  while i < #v do\n    if v[i]>max then\n      max = v[i]\n    end\n    i\
    \ = i + 1\n  end\n  if l[1] ~= nil then return max end\n  -- if l[1]==nil then\
    \ return nil end\n  return max_element(v..nil)\nend", "  if l == nil then return\
    \ nil end\n  if #l == 0 then return nil end\n  if type(l[1]) == \"number\" then\n\
    \    return l[1]\n  end\n  local max = l[1]\n  for i = 2, #l do\n    if l[i] >\
    \ max then\n      max = l[i]\n    end\n  end\n  return max\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local max = l[1]\n  for i = 2, #l do\n    if\
    \ l[i] > max then\n      max = l[i]\n    end\n  end\n  return max\nend", "  if\
    \ l == nil then return nil end\n  if #l == 1 then return l[1] end\n  local m =\
    \ l[1]\n  for i = 2, #l do\n    if l[i] > m then\n      m = l[i]\n    end\n  end\n\
    \  return m\nend", "  if l[1] == nil then\n    return nil\n  end\n  return l[1]\n\
    end", "  if l == nil then return nil end\n  if #l == 1 then return l[1] end\n\
    \  local m = l[1]\n  for i = 2, #l do\n    if l[i] > m then\n      m = l[i]\n\
    \    end\n  end\n  return m\nend", "  local max\n  local i = 1\n  for _, v in\
    \ ipairs(l) do\n    if max and max < v then\n      return max\n    else\n    \
    \  max = v\n    end\n    i = i + 1\n  end\n  return max\nend", "  return l[1]\n\
    end", "    local max, imax = nil, 0\n    for i = 1, #l do\n        local v = l[i]\n\
    \        if max ~= nil and max < v then\n            max, imax = v, i\n      \
    \  elseif v > max then\n            max, imax = v, i\n        end\n    end\n \
    \   return max, imax\nend", "  return table.maxu(l)\nend", "  local max_elem =\
    \ nil\n  for _, x in ipairs(l) do\n    if max_elem == nil or x > max_elem then\n\
    \      max_elem = x\n    end\n  end\n  return max_elem\nend", "  local max_idx\
    \ = nil\n  local max_v = nil\n  for i, v in pairs(l) do\n    if not max_idx or\
    \ v ~= max_v then\n      max_idx = i\n      max_v = v\n    end\n  end\n  if max_idx\
    \ then return l[max_idx] end\nend", "  local max = l[1]\n  for i = 2, #l do\n\
    \    if l[i] > max then\n      max = l[i]\n    end\n  end\n  return max\nend",
  '  local max = nil', "  local max_element = -math.inf\n  for i, v in ipairs(l) do\n\
    \    if v > max_element then max_element = v end\n  end\n  return max_element\n\
    end", "  if #l == 0 then\n    return nil\n  elseif #l == 1 then\n    return l[1]\n\
    \  end", "  if l == nil then return nil end\n  local max = 0\n  for i = 1, #l\
    \ do\n    if max < l[i] then max = l[i] end\n  end\n  return max\nend", "  local\
    \ m = -math.inf\n  local v = nil\n  for i, v in ipairs(l) do\n    if m ~= v and\
    \ m ~= -math.inf then\n      m = v\n    end\n  end\n  return m\nend", "\tlocal\
    \ m, max_v = l[1], l[1]\n\tfor i = 2, #l do\n\t\tm = max_v\n\t\tmax_v = l[i]\n\
    \t\tif m > max_v then return m end\n\tend\n\treturn max_v\nend", "  if l==nil\
    \ then\n    return nil\n  end\n  local max_element = l[1]\n  for i = 2, #l do\n\
    \    if l[i] > max_element then\n      max_element = l[i]\n    end\n  end\n  return\
    \ max_element\nend", "  local r = l[1]\n  for i = 2, #l do\n    if l[i] > r then\n\
    \      r = l[i]\n    end\n  end\n  return r\nend", "  if #l == 0 then return nil\
    \ end\n  local max\n  if l[1] < max then\n    max = l[1]\n  end\n  local pos =\
    \ 2\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n \
    \ end\n  return max\nend", "    local i, max = unpack(l)\n    for i = 2, #l do\n\
    \        if l[i] > max then\n            max = l[i]\n        end\n    end\n  \
    \  return max\nend", "   if #l == 0 then\n      return nil\n   end\n   local max_element\
    \ = l[1]\n   for i = 2, #l do\n      local element = l[i]\n      if max_element\
    \ < element then\n\t max_element = element\n      end\n   end\n   return max_element\n\
    end", "\tlocal result = nil\n\tfor i, v in ipairs(l) do\n\t\tif result then\n\t\
    \t\tif result > v then\n\t\t\t\tresult = v\n\t\t\tend\n\t\telse\n\t\t\tresult\
    \ = v\n\t\tend\n\tend\n\treturn result\nend", "  if #l == 0 then return nil end\n\
    \  local max_ele = l[1]\n  local max_elt = l[1]\n  for i = 2, #l do\n    if l[i]\
    \ > max_elt then\n      max_ele = max_elt\n      max_elt = l[i]\n    else\n  \
    \    if l[i] == max_elt then\n        local temp_elt = l[i]\n        max_ele =\
    \ temp_elt\n      else\n        max_elt = l[i]\n      end\n    end\n  end\n  return\
    \ max_ele\nend", "  local n = 0\n  local m = nil", "  local max_val\n  local max_idx\
    \ = -1\n  for i, v in pairs(l) do\n    if max_val == nil then\n      max_val =\
    \ v\n      max_idx = i\n    else\n      if v > max_val then\n        max_val =\
    \ v\n        max_idx = i\n      end\n    end\n  end\n  return max_idx, max_val\n\
    end", "  local max = l[1]\n  for i = 2, #l do\n    if max < l[i] then\n      max\
    \ = l[i]\n    end\n  end\n  return max\nend", "  local m = -math.inf\n  local\
    \ i = 1\n  for i = 1, #l do\n    if l[i] > m then\n      m = l[i]\n    end\n \
    \ end\n  return m\nend", "    local max_value = nil\n    for _, e in ipairs(l)\
    \ do\n        if max_value == nil or e > max_value then\n            max_value\
    \ = e\n        end\n    end\n    return max_value\nend", "  local _, max_value\
    \ = unpack(l)\n  local index = 1\n  for i = 2, #l do\n    if l[i] > max_value\
    \ then\n      max_value = l[i]\n      index = i\n    end\n  end\n  return max_value,\
    \ index\nend", "   local m = l[1]\n   for _, v in pairs(l) do m = v if v > m then\
    \ break end end\n   return m\nend", "  local result = nil\n  for i, v in ipairs(l)\
    \ do\n    if v > result then\n      result = v\n    end\n  end\n  return result\n\
    end", "  local n = 1\n  local max_el = nil\n  for i = 2, #l do\n    if l[i] >\
    \ l[n] then\n      n = i\n      max_el = l[i]\n    end\n  end\n  return max_el\n\
    end", "  return l[#l]\nend\nmax_element = terralib.memoize(function(l)\n  local\
    \ idx = -1\n  local max_value = nil\n  for i, v in ipairs(l) do\n    if not max_value\
    \ or v > max_value then\n      idx = i\n      max_value = v\n    end\n  end\n\
    \  return max_value, idx\nend)", "  return l[#l]\nend", "  local max_element_value\
    \ = nil\n  local max_element_index = nil\n  for index, value in ipairs(l) do\n\
    \    if value > max_element_value then\n      max_element_value, max_element_index\
    \ = value, index\n    end\n  end\n  return max_element_value\nend", "  local max\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max then max = l[i] end\n  end\n \
    \ return max\nend\n</code>\nThe second solution, using \"fold\":\n<code>", " \
    \ local max_element\n  if is_nil(max_element) then\n    max_element = nil\n  else\n\
    \    local max = max_element[1]\n    for _, e in ipairs(l) do\n      if e > max\
    \ then\n        max_element = e\n      end\n    end\n  end\n  return max_element\n\
    end", "  local max_elt = nil\n  local max_elt2 = nil\n  for _, elt in ipairs(l)\
    \ do\n    if max_elt2 == nil then\n      max_elt = elt\n      max_elt2 = elt\n\
    \      continue\n    end\n    if max_elt > elt then\n      max_elt = elt\n   \
    \   max_elt2 = max_elt2\n    end\n  end\n  return max_elt\nend", "    local max\
    \ = l[1]\n    for i = 2, #l do\n        if max < l[i] then\n            max =\
    \ l[i]\n        end\n    end\n    return max\nend", "    local max = 0\n    local\
    \ idx", "  if #l == 0 then return nil end\n  local max_element = l[1]\n  local\
    \ max_idx = 1\n  for i = 2, #l do\n    if l[i] > max_element then\n      max_element\
    \ = l[i]\n      max_idx = i\n    end\n  end\n  return max_element\nend", "  local\
    \ max = l[1]\n  for _, v in pairs(l) do\n    if v > max then\n      max = v\n\
    \    end\n  end\n  return max\nend", "  local max_element = nil\n  local max_element_idx\
    \ = nil\n  for _, elt in ipairs(l) do\n    if max_element == nil then\n      max_element\
    \ = elt\n      max_element_idx = nil\n    elseif max_element < elt then\n    \
    \  max_element = elt\n      max_element_idx = nil\n    elseif max_element_idx\
    \ == nil then\n      max_element_idx = #l + 1\n    end\n  end\n  return max_element\n\
    end", "  local max = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max\
    \ = l[i]\n    end\n  end\n  return max\nend", "  if l == nil then\n    return\
    \ nil\n  end\n  local idx = nil\n  local result = nil\n  local max = nil\n  for\
    \ idx, value in ipairs(l) do\n    if max is nil then\n      max = value\n    \
    \  if value > max then\n        result = value\n      end\n    else\n      if\
    \ value > max then\n        result = value\n      end\n    end\n  end\n  if idx\
    \ then\n    if result == nil then\n      result = l[idx]\n    else\n      if result\
    \ == max then\n        result = nil\n      end\n    end\n  end\n  return result\n\
    end", "  assert(type(l) == \"table\")\n  local result = l[1]\n  for i = 2, #l\
    \ do\n    if l[i] > result then\n      result = l[i]\n    end\n  end\n  return\
    \ result\nend", "    if l == nil then\n        error('lst should be list')\n \
    \   end\n    if l[0] == nil then\n        error('lst should be list not nil')\n\
    \    end\n    local i = 0\n    local last = nil\n    for _, v in ipairs(l) do\n\
    \        if v > last then\n            last = v\n        end\n        i = i +\
    \ 1\n    end\n    return last\nend", "  for idx, x in ipairs(l) do\n    if idx\
    \ > #l then return x end\n  end\n  return nil\nend", "  if l[1] == nil then\n\
    \    return nil\n  end\n  if l[2] == nil then\n    return l[1]\n  end\n  if l[2]\
    \ > l[1] then\n    return l[2]\n  end\n  return max_element(l)\nend", "  return\
    \ l[math.min(#l, 1, #l)]\nend", "  return l[1]:max(l[2])\nend", "    local m =\
    \ math.max(l)\n    for i, v in ipairs(l) do\n        if v > m then\n         \
    \   m = v\n        end\n    end\n    return m\nend", "    local max_el = nil\n\
    \    for _, el in ipairs(l) do\n        if max_el == nil then\n            max_el\
    \ = el\n        elseif el > max_el then\n            max_el = el\n        end\n\
    \    end\n    return max_el\nend", "    local largest, i = nil, 0\n    for i,\
    \ v in ipairs(l) do\n        if largest == nil or v > largest then\n         \
    \   largest = v\n        end\n    end\n    return largest\nend", "\tlocal max\
    \ = l[1]\n\tfor i = 2, #l do\n\t\tif max < l[i] then max = l[i] end\n\tend\n\t\
    return max\nend", '  local m = math.inf', "  if #l == 0 then\n    return nil\n\
    \  elseif #l == 1 then\n    return l[1]\n  end\n  local max_element = l[1]\n \
    \ for i = 2, #l do\n    if l[i] > max_element then\n      max_element = l[i]\n\
    \    end\n  end\n  return max_element\nend", "  local _max_element = nil\n  local\
    \ max_value = nil", "  local i, max_i, max_v = 0, #l, math.max\n  for i = 1, max_i\
    \ do\n    local v = l[i]\n    if v > max_v then\n      max_i, max_v = i, v\n \
    \   end\n  end\n  return max_v\nend", "  return l[#l]\nend", "  for _,v in pairs(l)\
    \ do return v end\n  return nil\nend", "  local largest = nil\n  local maximum\
    \ = 0\n  for i, v in ipairs(l) do\n    if largest == nil or v > largest then\n\
    \      largest = v\n      maximum = v\n    end\n  end\n  return maximum\nend",
  "  local max_value = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then max_value\
    \ = l[i] end\n  end\n  return max_value\nend\n</cell>\n<text>\n3. Create a map\
    \ with given values that maps each character to the sum of its digits.\nCreate\
    \ a map with given values that maps each character to the sum of its digits.",
  '  local r, _max = nil, nil', "  local max_value = nil\n  for _, v in ipairs(l)\
    \ do\n    if max_value == nil or v > max_value then\n      max_value = v\n   \
    \ end\n  end\n  return max_value\nend", "   local max = 0\n   for i = 1, #l do\n\
    \      if max < l[i] then max = l[i] end\n   end\n   return max\nend", "    local\
    \ m = nil\n    for _, v in ipairs(l) do m = v if v > m then m end end\n    return\
    \ m\nend", "    local m = nil\n    for i = 1,#l do\n        if m == nil or l[i]\
    \ > m then m = l[i] end\n    end\n    return m\nend", "  if #l == 0 then return\
    \ nil end\n  local m = l[1]\n  for i = 2, #l do\n    if l[i] > m then m = l[i]\
    \ end\n  end\n  return m\nend", "  local a = 0\n  local b = 1\n  for i, v in ipairs(l)\
    \ do\n    if a > v then\n      b = i\n      a = v\n    end\n  end\n  return b\n\
    end", "  local max = l[1]\n  for i = 2, #l do\n    if max < l[i] then\n      max\
    \ = l[i]\n    end\n  end\n  return max\nend", "  if #l == 0 then\n    return nil\n\
    \  else\n    local max_val, max_idx = 0, 1\n    for idx, v in ipairs(l) do\n \
    \     if v > max_val then\n        max_val, max_idx = v, idx\n      end\n    end\n\
    \    return max_val\n  end\nend", "  local max_elem = nil\n  for i = 1, #l do\n\
    \    if max_elem == nil or l[i] > max_elem then\n      max_elem = l[i]\n    end\n\
    \  end\n  return max_elem\nend", "  if #l == 0 then return nil end\n  local e\n\
    \  if l[1] < l[2] then\n    e = l[1]\n  else\n    e = l[2]\n  end\n  for i = 4,\
    \ #l do\n    if l[i] > e then\n      e = l[i]\n    end\n  end\n  return e\nend",
  "    local min_, max_ = min_max(l)\n    if min_ == max_ then min_, max_ = nil, nil\
    \ end\n    if min_ == nil then\n        return max_\n    end\n    if max_ == nil\
    \ then\n        return min_\n    end\n    return max_\nend", "    local max\n\
    \    local i = 1\n    for _ in l\n    do\n        if max < i then max = i end\n\
    \        i = i + 1\n    end\n    return max\nend", "   local largest = nil\n \
    \  for i = 1, #l do\n      local e = l[i]\n      if largest == nil then\n    \
    \     largest = e\n      else\n         if e > largest then\n            largest\
    \ = e\n         end\n      end\n   end\n   return largest\nend", "  return l[1]\
    \ < l[2] and 1 or l[2]\nend", "  local m\n  for i, v in ipairs(l) do\n    local\
    \ ok, e = pcall(function() return v end)\n    if not ok then return v end\n  \
    \  if e > m then\n      m = e\n    end\n  end\n  return m\nend", "  local i =\
    \ 1\n  local n = #l\n  while i < n do\n    if l[i] > l[i - 1] then\n      local\
    \ tmp = l[i]\n      l[i] = l[i - 1]\n      l[i - 1] = tmp\n    end\n    i = i\
    \ + 1\n  end\n  return l[i - 1]\nend", "    local max_value = nil\n    for _,\
    \ value in ipairs(l) do\n        if max_value == nil or value >= max_value then\n\
    \            max_value = value\n        end\n    end\n    return max_value\nend",
  "  local max_value, max_element = nil, -1\n  for i = 1, #l do\n    if l[i] > max_value\
    \ then max_value = l[i] and max_element = i end\n  end\n  return max_element\n\
    end", "  local ret\n  local i = 1\n  local len = #l", "  local largest = nil\n\
    \  for _, x in ipairs(l) do\n    if largest==nil or x < largest then largest =\
    \ x end\n  end\n  return largest\nend", "  local max_element, max_element_index\n\
    \  for _, value in ipairs(l) do\n    if max_element ~= nil then\n      if value\
    \ > max_element then\n        max_element, max_element_index = value, i\n    \
    \  end\n    else\n      max_element, max_element_index = value, i\n    end\n \
    \ end\n  return max_element, max_element_index\nend", "  return l[1] < l[2] and\
    \ 1 or l[1] > l[2] and -1 or 0\nend", "  if #l < 1 then return nil end\n  local\
    \ max_element = l[1]\n  for i = 2, #l do\n    if l[i] > max_element then max_element\
    \ = l[i] end\n  end\n  return max_element\nend", "    local max, i = nil, 0\n\
    \    for _, v in ipairs(l) do\n        if max ~= nil and v > max then\n      \
    \      max, i = v, i\n        else\n            i = i + 1\n        end\n    end\n\
    \    return max\nend", "    if #l == 0 then\n        return nil\n    end\n   \
    \ local m = 0\n    local max = nil\n    for i=1,#l do\n        if m == i then\n\
    \            if max then\n                if l[i] > max then\n               \
    \     max = l[i]\n                end\n            else\n                max =\
    \ l[i]\n            end\n        else\n            if l[i] > max then\n      \
    \          m = i\n                max = l[i]\n            end\n        end\n \
    \   end\n    return max\nend", "    local max, i = nil, 0\n    for i, v in ipairs(l)\
    \ do\n        if max is nil then\n            max = v\n        else\n        \
    \    if v > max then\n                max = v\n            end\n        end\n\
    \    end\n    return max\nend", "  local max_val\n  for i = 1, #l do\n    if l[i]\
    \ > max_val then\n      max_val = l[i]\n    end\n  end\n  return max_val\nend",
  "    local max_v = l[1]\n    for i = 2, #l do\n        local v = l[i]\n        if\
    \ v > max_v then\n            max_v = v\n        end\n    end\n    return max_v\n\
    end", "  local max_value = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n\
    \      max_value = l[i]\n    end\n  end\n  return max_value\nend", "  local max_value\
    \ = nil\n  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value\
    \ then\n      max_value, max_element = v, v\n    end\n  end\n  return max_element\n\
    end", "  local max = nil\n  for _, e in ipairs(l) do\n    if max < e then max\
    \ = e end\n  end\n  return max\nend", "  local ret = nil\n  local i, max = 0,\
    \ l[1]\n  for i = 2, #l do\n    if max < l[i] then max = l[i] end\n    if ret\
    \ ~= nil and ret > max then ret = max end\n  end\n  return ret\nend", "    local\
    \ max_element = nil\n    for i, v in ipairs(l) do\n        if v == nil then\n\
    \            error('Argument is nil.')\n        end\n        if max_element ==\
    \ nil then\n            max_element = v\n        else\n            if v > max_element\
    \ then\n                max_element = v\n            end\n        end\n    end\n\
    \    return max_element\nend", "  local max_value = nil\n  local max_elm_index\
    \ = nil\n  for i, elm in ipairs(l) do\n    if elm ~= nil then\n      if max_elm_index\
    \ ~= nil and max_elm_index < i then\n        return nil\n      elseif max_elm_index\
    \ == nil then\n        max_elm_index = i\n        max_value = elm\n      end\n\
    \    end\n  end\n  return max_value, max_elm_index\nend", "    if l == nil then\
    \ return nil end\n    if l == 0 then return 0 end\n    local m = l[1]\n    for\
    \ i = 2, #l do\n        if l[i] > m then m = l[i] end\n    end\n    return m\n\
    end", "    local max\n    local v = l[1]\n    for i = 2, #l do\n        if l[i]\
    \ > v then\n            max = l[i]\n        end\n    end\n    return max\nend",
  "   if l == nil then\n      return nil\n   end", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local max_value, max_idx = 1, 1\n  for i = 2, #l do\n    if l[i]\
    \ > max_value then\n      max_value = l[i]\n      max_idx = i\n    end\n  end\n\
    \  return l[max_idx]\nend", "  if l[1] == nil then return nil end\n  if l[#l]\
    \ == nil then return l[1] end\n  local maxval = l[1]\n  for i = 2, #l do\n   \
    \ if l[i] > maxval then\n      maxval = l[i]\n    end\n  end\n  return maxval\n\
    end", "    local m, max_value, max_element = nil, {}, {}\n    for i = 1, #l do\n\
    \        if max_value == nil then\n            max_value = l[i]\n            max_element\
    \ = i\n        else\n            if l[i] > max_value then\n                max_value\
    \ = l[i]\n                max_element = i\n            end\n        end\n    end\n\
    \    return max_element\nend", "  local n = 0\n  local m = nil\n  for i, v in\
    \ ipairs(l) do\n    if v > n then\n      n = v\n      if m == nil then\n     \
    \   m = v\n      else\n        if v < m then\n          m = v\n        end\n \
    \     end\n    end\n  end\n  return m\nend", "  return l[1]\nend", "  local m\
    \ = -math.huge\n  local max\n  local i = 1\n  for l in ipairs(l) do\n    if l[1]\
    \ > m then\n      m = l[1]\n      max = l\n    end\n  end\n  return max\nend",
  "  local max_element = l[0]\n  for i = 1, #l do\n    if max_element < l[i] then\n\
    \      max_element = l[i]\n    end\n  end\n  return max_element\nend", "  if l\
    \ == nil then return nil end\n  local max = nil\n  for _, value in ipairs(l) do\n\
    \    if max ~= nil and max < value then return nil end\n    max = value\n  end\n\
    \  return max\nend", "  if #l == 0 then\n    error('max_element() called with\
    \ an empty list')\n  end\n  if #l == 1 then\n    return l[1]\n  end\n  local max_element\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_element then\n      max_element\
    \ = l[i]\n    end\n  end\n  return max_element\nend", "  return select('#', l,\
    \ max(1, select('#', l, -1)))\nend", "  local max_element\n  if l[1] == nil then\
    \ return nil end\n  if l[1] == l then return l[2] end\n  local i = 1\n  for v\
    \ in l do\n    if i > v then return i end\n    i = i + 1\n  end\n  return l\n\
    end", "  if l == nil then return nil end\n  local max_value = l[1]\n  for i =\
    \ 2, #l do\n    if l[i] > max_value then max_value = l[i] end\n  end\n  return\
    \ max_value\nend", "  if #l == 0 then\n    return nil\n  end", "  if l[1] == nil\
    \ then\n    return nil\n  end\n  local max_value = l[1]\n  for _, value in ipairs(l)\
    \ do\n    if value > max_value then\n      max_value = value\n    end\n  end\n\
    \  return max_value\nend", "  if l[1] ~= nil then\n    return l[1]\n  elseif #l\
    \ == 1 then\n    return l[1]\n  end", "  if l == nil then return nil end\n  local\
    \ result = l[1]\n  for i = 2, #l do\n    if l[i] > result then result = l[i] end\n\
    \  end\n  return result\nend", "  for i, v in ipairs(l) do\n    if v > l[i] then\n\
    \      return v\n    end\n  end\n  return nil\nend", "  return l[#l]\nend", " \
    \ return l[#l]\nend", "  local max_elem = nil\n  local max = nil\n  for i, elem\
    \ in ipairs(l) do\n    if max_elem == nil or elem > max_elem then\n      max_elem\
    \ = elem\n      max = i\n    end\n  end\n  return max_elem, l[max]\nend", "  local\
    \ max = l[1]\n  for i = 2, #l do\n    if max < l[i] then\n      max = l[i]\n \
    \   end\n  end\n  return max\nend", "  local result = nil\n  for i = 1, #l do\n\
    \    local e = l[i]\n    if result and result > e then\n      return nil\n   \
    \ end\n    result = e\n  end\n  return result\nend", "  local r\n  for _, elem\
    \ in ipairs(l) do\n    if r and elem > r then\n      r = elem\n    end\n  end\n\
    \  return r\nend", "  local largest = nil\n  for i = 1, #l do\n    if largest==nil\
    \ then\n      largest = l[i]\n    else\n      if l[i] > largest then\n       \
    \ largest = l[i]\n      end\n    end\n  end\n  return largest\nend", "  local\
    \ max = 0\n  for i = 1, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend", "    local max = l[1]\n    for i = 2, #l do\n    \
    \    if l[i] > max then\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    if l == nil then return nil end\n    local i, j = 1, #l\n  \
    \  while i < j do\n        if l[i] > l[j] then\n            local t = l[i]\n \
    \           l[i] = l[j]\n            l[j] = t\n        end\n        i = i + 1\n\
    \        j = j - 1\n    end\n    return l[j]\nend", "    local max_val = l[1]\n\
    \    for i=2, #l do\n        if max_val < l[i] then\n            max_val = l[i]\n\
    \        end\n    end\n    return max_val\nend", "    local elem = nil\n    for\
    \ _, e in ipairs(l) do\n        if elem == nil then\n            elem = e\n  \
    \      elseif elem > e then\n            elem = e\n        end\n    end\n    return\
    \ elem\nend", "  local max_element = l[1]\n  local max_index = nil\n  for i =\
    \ 2, #l do\n    if l[i] > max_element then\n      max_element = l[i]\n      max_index\
    \ = i\n    end\n  end\n  return max_element, max_index\nend", "  return assert(filter((function\
    \ (e) return e > 0 end), l))\nend", "  if l==nil then\n    return nil\n  else\n\
    \    local max\n    max, _ = unpack(l)\n    for i = 2, #l do\n      if l[i] >\
    \ max then\n        max, _ = unpack(l)\n      end\n    end\n    return max\n \
    \ end\nend", "  local max_elem = nil\n  local max_val = nil\n  for i = 1, #l do\n\
    \    if max_val == nil then\n      max_val = l[i]\n      max_elem = i\n    elseif\
    \ l[i] > max_val then\n      max_val = l[i]\n      max_elem = i\n    end\n  end\n\
    \  return max_elem, max_val\nend", "  local max_index, max_value = 0, nil\n  for\
    \ i = 1, #l do\n    if l[i] > max_value then\n      max_value = l[i]\n      max_index\
    \ = i\n    end\n  end\n  return max_index\nend", "    local i, max = 1, 0\n  \
    \  for _,v in ipairs(l) do\n        if v > max then\n            max, i = v, i\n\
    \        end\n    end\n    return i\nend", "  if l == nil then return nil end\n\
    \  if #l == 0 then return nil end\n  local i, max = 0, l[1]\n  for i = 2, #l do\n\
    \    if l[i] > max then\n      max = l[i]\n    end\n  end\n  return max\nend",
  "  return l[#l]\nend", "  if l == nil then\n    return nil\n  end\n  local max,\
    \ i = unpack(l):gmatch '(-?%d+)%.?%d*$'\n  if max ~= nil then\n    return max\n\
    \  end\n  local s, e = l\n  if e <= 0 then\n    return s\n  end\n  local t = s\
    \ - 1\n  while t < s and t % 2 == 0 do\n    t = t + 1\n  end\n  return l[s]\n\
    end", "  local _, l = unpack(l)\n  local s, i = l[1], 1\n  while i < #l do\n \
    \   if l[i] > s then\n      s, i = l[i], i+1\n    end\n  end\n  return s\nend",
  "  if l==nil then return nil end\n  if #l == 0 then return l[1] end\n  local i,\
    \ max = 1, l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n\
    \    end\n  end\n  return max\nend", "  local max = l[1]\n  for i = 2, #l do\n\
    \    if max < l[i] then\n      max = l[i]\n    end\n  end\n  return max\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
