name: HumanEval_36_fizz_buzz
language: lua
prompt: "-- Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
  -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
  \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
  \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
  \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000), 192)\n\
  \    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
  \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local num = 0\n  while n > 0 do\n    if n <= 2 then\n      if n %\
    \ 11 == 1 then num = num + 1 end\n      if n % 13 == 1 then num = num + 1 end\n\
    \    end\n    local f = tostring(n % 11)\n    if f == \"1\" then num = num + 1\
    \ end\n    local t = tostring(n % 13)\n    if t == \"1\" then num = num + 1 end\n\
    \    n = math.floor(n / 10)\n  end\n  return num\nend", "  if n < 10 then\n  \
    \  return n\n  else\n    local n2 = n / 10\n    if n % 10 == 1 then\n      return\
    \ fizz_buzz(n2)\n    elseif n % 10 == 2 then\n      return fizz_buzz(n2) + 1\n\
    \    elseif n % 10 == 3 then\n      return fizz_buzz(n2) + 2\n    elseif n % 10\
    \ == 7 then\n      return fizz_buzz(n2) + 3\n    elseif n % 10 == 13 then\n  \
    \    return fizz_buzz(n2) + 4\n    elseif n % 10 == 17 then\n      return fizz_buzz(n2)\
    \ + 5\n    elseif n % 10 == 31 then\n      return fizz_buzz(n2) + 6\n    else\n\
    \      return fizz_buzz(n2) + 7\n    end\n  end\nend", "  return ((n % 11) ==\
    \ 0 and (n % 13) == 0) or\n    ((n % 13) == 0 and (n % 11) == 0) or\n    ((n %\
    \ 13) == 0 and (n % 11) == 0)\nend", "    local num = 0\n    local limit = math.floor((n\
    \ - 1) / 11)\n    local div = math.floor((n - 1) / 13)\n    repeat\n        if\
    \ n % 11 == 1 then num = num + 1 end\n        if n % 13 == 1 then num = num +\
    \ 1 end\n        n = n / 13\n    until n > 1\n    return num\nend", "  local count\
    \ = 0\n  for i = 1, n do\n    if math.mod(i, 11) == 0 or math.mod(i, 13) == 0\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "  if n\
    \ % 11 == 1 then return n end\n  if n % 13 == 1 then return n end\n  local count\
    \ = 0\n  for i = 1, n do\n    count = count + count_digits(i)\n    if i % 11 ==\
    \ 0 and i % 13 == 0 then break end\n  end\n  return count\nend", "  local count\
    \ = 0\n  for i = 1, n do \n    local d = math.floor(math.abs((i % 11) - 7))\n\
    \    count = count + d * (d > 0 and 1 or 0)\n  end\n  return count\nend", "  if\
    \ n == 0 then return end\n  if n >= 11 and n <= 13 then return n end\n  if n %\
    \ 11 == 0 and n % 13 == 0 then return n end\n  return fizz_buzz(n - 1) or fizz_buzz(n\
    \ - 13)\nend", "\tlocal count = 0\n\tlocal i = math.floor(n)\n\tlocal p = math.fmod(n,\
    \ 3)\n\twhile i >= 3 do\n\t\t-- if the last digit is 1, then add one to the count\n\
    \t\tif i == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\t\t-- if the last digit\
    \ is 5, then add one to the count\n\t\tif i == 5 and p ~= 0 then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\t\t-- if the last digit is 7, then add one to the count\n\
    \t\tif i == 7 and p ~= 0 then\n\t\t\tcount = count + 1\n\t\tend\n\t\t-- subtract\
    \ the last digit from n, adding 3 to the number of digits\n\t\tn = n - math.floor(n/3)\n\
    \t\ti = math.floor(n)\n\t\tp = math.fmod(n, 3)\n\tend\n\t-- if the last digit\
    \ is 7, then add one to the count\n\tif i == 7 then\n\t\tcount = count + 1\n\t\
    end\n\t-- return the count\n\treturn count\nend", "   if n == 0 then return 0\
    \ end\n   if n <= 3 then\n      if n % 10 == 1 then return 1 end\n      if n %\
    \ 10 == 2 then return 2 end\n      if n % 10 == 3 then return 3 end\n   end\n\
    \   if n <= 5 then\n      if n % 10 == 1 then return 1 end\n      if n % 10 ==\
    \ 2 then return 3 end\n      if n % 10 == 3 then return 2 end\n      if n % 10\
    \ == 4 then return 4 end\n      if n % 10 == 5 then return 5 end\n      if n %\
    \ 10 == 6 then return 6 end\n      if n % 10 == 7 then return 7 end\n      if\
    \ n % 10 == 8 then return 8 end\n      if n % 10 == 9 or n % 10 == 10 then return\
    \ 9 end\n   end\n   if n <= 9 then\n      if n % 10 == 1 then return 1 end\n \
    \     if n % 10 == 2 then return 3 end\n      if n % 10 == 3 then return 5 end\n\
    \      if n % 10 == 4 then return 7 end\n      if n % 10 == 5 then return 9 end\n\
    \      if n % 10 == 6 then return 11 end\n      if n % 10 == 7 then return 13\
    \ end\n      if n % 10 == 8 then return 17 end\n      if n % 10 == 9 or n % 10\
    \ == 10 then return 21 end\n   end\n   if n % 10 == 1 or n % 10 == 2 or n % 10\
    \ == 3 or n % 10 == 4 or n % 10 == 5 then return fizz_buzz(n - 10)\n   return\
    \ fizz_buzz(n / 10)\nend", "  local i, x = 0, 1\n  repeat\n    i = i + 1\n   \
    \ if i % 11 == 0 and i % 13 == 0 then\n      x = x + 1\n    elseif n % 11 == 0\
    \ and n % 13 == 0 then\n      x = x + 1\n    elseif n < x then\n      return x\n\
    \    end\n  until n < i\nend", "    local result = 0\n    for i = 1, n do\n  \
    \      if i % 11 == 0 and i % 13 == 0 then\n            result = result + 1\n\
    \        end\n    end\n    return result\nend", "    -- If the number is divisible\
    \ by 11, then the number is divisible by 11.\n    -- If the number is divisible\
    \ by 13, then the number is divisible by 13.\n    if n % 11 == 0 or n % 13 ==\
    \ 0 then\n        return n -- Return the number.\n    elseif n % 11 == 1 then\n\
    \        return 11 -- Return the number of times the digit 1 appears in integers\
    \ less than n which are divisible by 11.\n    elseif n % 13 == 1 then\n      \
    \  return 13 -- Return the number of times the digit 1 appears in integers less\
    \ than n which are divisible by 13.\n    end\n    return 0 -- Return the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13.\nend", "    local count = 0\n    for i = 1, n do\n        count =\
    \ count + 1\n        if ((i % 11) == 0) or ((i % 13) == 0) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "  local count =\
    \ 0\n  for i = 1, n do\n    if i %% 11 == 0 and i %% 13 == 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "   -- Return the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13.\n   -- >>> fizz_buzz(50)\n   -- 0\n   -- >>> fizz_buzz(78)\n   --\
    \ 2\n   -- >>> fizz_buzz(79)\n   -- 3\n   local x = math.floor(n/11)\n   local\
    \ y = math.floor(n/13)\n   if x == 11 and y == 11 then\n      return 1\n   end\n\
    \   if x == 31 and y == 13 then\n      return 1\n   end\n   if x == 31 and y ==\
    \ 31 then\n      return 2\n   end\n   if x == 31 and y == 51 then\n      return\
    \ 3\n   end\n   if x == 31 and y == 71 then\n      return 4\n   end\n   if x ==\
    \ 31 and y == 91 then\n      return 5\n   end\n   if x == 13 and y == 13 then\n\
    \      return 1\n   end\n   if x == 13 and y == 13 then\n      return 1\n   end\n\
    \   if x == 13 and y == 13 then\n      return 1\n   end\n   if x == 13 and y ==\
    \ 13 then\n      return 1\n   end\n   return 0\nend", "  if n < 10 then\n    return\
    \ n\n  elseif n >= 10 and n % 10 == 0 and n % 100 != 0 then\n    return fizz_buzz(n\
    \ / 10) + 1\n  elseif n >= 10 and n % 10 == 0 and n % 100 == 0 then\n    return\
    \ fizz_buzz(n / 10) + 3\n  elseif n >= 10 and n % 10 == 0 and n % 100 != 0 then\n\
    \    return fizz_buzz(n / 10) + 5\n  elseif n >= 10 and n % 10 != 0 and n % 100\
    \ == 0 then\n    return fizz_buzz(n / 10) + 7\n  elseif n >= 10 and n % 10 !=\
    \ 0 and n % 100 != 0 then\n    return fizz_buzz(n / 10) + 9\n  else\n    return\
    \ 0\n  end\nend", "  n = n or 0\n  if n < 10 then return n end\n  if n < 100 then\
    \ return n - 10 end\n  if n < 1000 then return n - 100 end\n  if n < 10000 then\
    \ return n - 1000 end\n  if n < 100000 then return n - 10000 end\n  if n < 1000000\
    \ then return n - 100000 end\n  if n < 10000000 then return n - 1000000 end\n\
    \  if n < 100000000 then return n - 10000000 end\n  if n < 1000000000 then return\
    \ n - 100000000 end\n  if n < 10000000000 then return n - 1000000000 end\n  return\
    \ n - 100000000000\nend", "    local counter = 1\n    while n >= 11 do\n     \
    \   n = math.floor(n/11)\n        counter = counter + 1\n    end\n    while n\
    \ >= 13 do\n        n = math.floor(n/13)\n        counter = counter + 1\n    end\n\
    \    return counter\nend", "  if n < 1 then return end -- Undefined behavior when\
    \ given 0.\n  if n % 11 == 1 then return fizz_buzz(n / 11) + 1 end -- Fizz\n \
    \ if n % 13 == 1 then return fizz_buzz(n / 13) + 1 end -- Buzz\n  return n end\n\
    end", "    local i = math.floor(n/11) * 11\n    local f = math.floor(n/13) * 13\n\
    \    local z = n - i - f\n    if i <= z and f <= z then\n        return i\n  \
    \  elseif i <= z then\n        return z\n    elseif f <= z then\n        return\
    \ f\n    else\n        return 0\n    end\nend", "    if n < 10 then\n        return\
    \ n\n    end", "  local divisors = {11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79}\n  local count = 0\n  local i = 1\n  while i <=\
    \ n do\n    count = count + i\n    if count==3 or count==5 or count==7 or count==11\
    \ or count==13 or count==17 or count==19 or count==23 or count==29 or count==31\
    \ or\n      count==37 or count==41 or count==43 or count==47 or count==53 or count==59\
    \ or count==61 or count==67 or\n      count==71 or count==73 or count==79 then\n\
    \      print(string.format(\"%d\",count))\n      return count\n    end\n    if\
    \ count == #divisors then\n      print(string.format(\"%d\",count))\n      return\
    \ count\n    end\n    i = i + 1\n  end\n  print(string.format(\"%d\",count))\n\
    \  return count\nend\nfizz_buzz(100)", "  local counter = 0\n  for i = 1, n do\n\
    \    local digit = math.mod(i, 10)\n    if digit == 7 then\n      counter = counter\
    \ + 1\n    end\n  end\n  return counter\nend", "  -- Return number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \ return math.floor(math.log10(math.pow(10, n))) + 1\nend", "  if n % 11 == 1\
    \ then return 1 end\n  if n % 13 == 1 then return 2 end\n  return 0\nend", " \
    \ n = n % 10\n  local fizzbuzz = nil\n  if n >= 0 and n % 11 == 0 then\n    fizzbuzz\
    \ = 2\n  elseif n >= 0 and n % 13 == 0 then\n    fizzbuzz = 3\n  else\n    fizzbuzz\
    \ = 0\n  end\n  return fizzbuzz\nend", "\t-- Check n to be between 1 and 99\n\t\
    if n < 1 or n > 99 then\n\t\treturn nil\n\tend", "\tlocal count = 0\n\tlocal i\
    \ = 1\n\twhile i < n do\n\t\tif ((i % 11) == 0) or ((i % 13) == 0) then\n\t\t\t\
    count = count + 1\n\t\telse\n\t\t\tif count == 0 then\n\t\t\t\tcount = count +\
    \ 1\n\t\t\telse\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn count\nend", "  if n > 0 and n % 11 == 1 then\n    return 1\n\
    \  elseif n > 0 and n % 13 == 1 then\n    return 2\n  else\n    return 0\n  end\n\
    end\nreturn fizz_buzz", "  local count = 0\n  if n % 11 == 0 then count = count\
    \ + 1 end\n  if n % 13 == 0 then count = count + 1 end\n  return count\nend",
  "    local nn = n % 11\n    local nn = nn + nn % 13\n    return nn\nend", "  if\
    \ n < 0 then return 0 end\n  if n == 0 then return 0 end\n  if n % 11 == 1 then\
    \ return 1 end\n  if n % 13 == 1 then return 2 end\n  return fizz_buzz(n - 1)\n\
    end", "  if n < 0 then return end\n  local count = 0\n  while n >= 11 or n > 13\
    \ do\n    count = count + 1\n    n = math.mod(n, 12)\n  end\n  return count\n\
    end", "\tlocal digits = {}\n\tfor i = 1, 10 do\n\t\tdigits[i] = i\n\tend\n\tlocal\
    \ nDigits\n\tif n > 0 then\n\t\tnDigits = math.floor(math.log(n) / math.log(10))\n\
    \telse\n\t\tnDigits = 0\n\tend\n\tlocal count = 0\n\tfor i = 1, nDigits do\n\t\
    \tlocal d\n\t\tif i <= nDigits then\n\t\t\td = digits[i + 1]\n\t\telse\n\t\t\t\
    d = 10\n\t\tend\n\t\tif n % d == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\t\
    end\n\treturn count\nend", "    local b\n    local i\n    local l\n    if n <\
    \ 1 then\n        return 0\n    end\n    if n < 10 then\n        return n\n  \
    \  end\n    if n < 1000 then\n        b = \"11000\"\n        i = 2\n    else\n\
    \        b = \"13000\"\n        i = 5\n    end\n    while n >= i do\n        l\
    \ = math.floor(n / i)\n        if l == i and n % i == 0 then\n            n =\
    \ n - l\n        else\n            n = n - l\n        end\n        if b == \"\
    11000\" then\n            b = \"1000\"\n        else\n            b = \"13000\"\
    \n        end\n    end\n    return b\nend", "  if n < 1 then\n    return 0\n \
    \ elseif n < 3 then\n    return 1\n  elseif n % 11 == 1 then\n    return fizz_buzz(n\
    \ - 1) + 1\n  elseif n % 13 == 1 then\n    return fizz_buzz(n - 2) + 1\n  else\n\
    \    return fizz_buzz(n - 3) + 1\n  end\nend", "  return string.gsub(\n    string.format(\"\
    %.0f\", n),\n    \"^%s*(.-)%s*$\",\n    \"\",\n    function(digit)\n      local\
    \ digits = tonumber(digit)\n      if digits % 11 == 0 or (digits % 13 == 0 and\
    \ digits % 11 != 0) then\n        return digit\n      end\n    end\n  )\nend",
  "    -- Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n    if n % 11 == 0 and n % 13 == 0 then\n      \
    \  return 0\n    end\n    if n % 11 == 1 then\n        return 1\n    end\n   \
    \ if n % 13 == 1 then\n        return 2\n    end\n    return 3\nend", "  return\
    \ math.floor(n/11) * 13 + math.floor(n/7) + fizz_buzz(n%7 + 11)\nend", "  return\
    \ math.floor(math.pow(10, math.floor(math.log10(n))) / math.pow(10, math.floor(math.log10(math.fmod(n,\
    \ 10)))))\nend", "   -- Check that the number is divisible by 11\n   if n % 11\
    \ ~= 0 then\n      -- Check if number is divisible by 13\n      if n % 13 ~= 0\
    \ then\n         return n\n      else\n         -- Check if number is divisible\
    \ by 3 AND 5\n         if n % 3 ~= 0 and n % 5 ~= 0 then\n            return n\n\
    \         else\n            -- Check if number is divisible by 3 or 5\n      \
    \      if n % 3 ~= 0 or n % 5 ~= 0 then\n               return n\n           \
    \ else\n               return nil\n            end\n         end\n      end\n\
    \   else\n      return n\n   end\nend", "  return (n * 100) % 17 + 1 - (n * 100)\
    \ % 7\nend", "  local n\n  if n > 100 then n = 100\n  else if n < 1 then n = 1\
    \ end\n  local count = 0\n  local is_multiple = n >= 10\n  -- The below code works\
    \ because Python integers have a maximum of 232 different values\n  -- which means\
    \ that any number between 10 and 232 can be represented as a number between 10\
    \ and 232 by converting it to an integer value.\n  -- This means that the number\
    \ will always be between 10 and 232 inclusive.\n  -- The only way it can be larger\
    \ than 232 is when the number is too large.\n  -- For numbers between 1 and 100\
    \ there will only be a maximum of 12 different values\n  -- which means all numbers\
    \ between 1 and 100 will be represented as a number between 1 and 12 by converting\
    \ it to an integer value.\n  -- This means that the number will always be between\
    \ 1 and 12 inclusive.\n  -- For the largest number greater than 100 there will\
    \ be 242 different values\n  -- which means that all numbers between 1 and 242\
    \ will be represented as a number between 1 and 242 by converting it to an integer\
    \ value.\n  -- This means that the number will always be between 1 and 242 inclusive.\n\
    \  -- For the numbers less than 1 there will be 1 different value\n  -- which\
    \ means that any number less than 1 will be represented as a number between 1\
    \ and 1 by converting it to an integer value.\n  -- This means that the number\
    \ will always be between 1 and 1 inclusive.\n  -- This code is used to help with\
    \ these issues and because Python integers have a maximum of 232 different values\n\
    \  -- which means that any number between 10 and 232 can be represented as a number\
    \ between 10 and 232 by converting it to an integer value.\n  -- This means that\
    \ the number will always be between 10 and 232 inclusive.\n  -- The only way it\
    \ can be larger than 232 is when the number is too large.\n  -- For numbers between\
    \ 1 and 100 there will only be a maximum of 12 different values\n  -- which means\
    \ all numbers between 1 and 100 will be represented as a number between 1 and\
    \ 12 by converting it to an integer value.\n  -- This means that the number will\
    \ always be between 1 and 12 inclusive.\n  -- For the largest number greater than\
    \ 100 there will be 242 different values\n  -- which means that all numbers between\
    \ 1 and 242 will be represented as a number between 1 and 242 by converting it\
    \ to an integer value.\n  -- This means that the number will always be between\
    \ 1 and 242 inclusive.\n  -- For the numbers less than 1 there will be 1 different\
    \ value\n  -- which means that any number less than 1 will be represented as a\
    \ number between 1 and 1 by converting it to an integer value.\n  -- This means\
    \ that the number will always be between 1 and 1 inclusive.\n  -- This code is\
    \ used to help with these ", "  if n % 11 == 0 then\n    return 0\n  end\n  if\
    \ n % 13 == 0 then\n    return 1\n  end\n  local i = 1\n  repeat\n    i = i +\
    \ 1\n  until ((n % i) % 11 == 0 and (n % i) % 13 == 0)\n  return i\nend", "  if\
    \ n == 0 then return 0 end\n  local count = 0\n  local factors = {11, 13, 17}\n\
    \  for i = 1, n do\n    count = count + 1\n    for _, factor in ipairs(factors)\
    \ do\n      if n % factor == 0 then\n        break\n      end\n    end\n  end\n\
    \  return count\nend", "  if n > 0 and n < 100 then\n    return fizz_buzz_count(n,\
    \ 0, 11)\n  elseif n > 100 then\n    return fizz_buzz_count(n, 11, 13)\n  else\n\
    \    return n\n  end\nend", "  n = n or 0\n  if n <= 1 then\n    return n\n  else\n\
    \    if n % 11 == 1 then\n      return fizz_buzz(math.floor(n / 11))\n    elseif\
    \ n % 13 == 1 then\n      return fizz_buzz(math.floor(n / 13))\n    else\n   \
    \   return fizz_buzz(math.floor(n/7) + 1) + fizz_buzz(math.floor(n/3)) -- Add\
    \ 1 to last number\n    end\n  end\nend", "  if n < 10 then return fizz_buzz(n\
    \ * 10 + 3) or n end\n  if n < 100 then return fizz_buzz(n * 10 + 6) or n end\n\
    \  if n < 1000 then return fizz_buzz(n * 10 + 9) or n end\n  if n % 11 == 0 and\
    \ n % 13 == 0 then return n end\n  return fizz_buzz(n - 7)\nend", "  if n < 10\
    \ then return n end\n  if n < 13 then return n*3 + 1 end\n  if n%11 == 0 then\
    \ return n*3 end\n  if n%13 == 0 then return n*3 + 1 end\n  -- Return an extra\
    \ 1 for a count of 0.\n  return n*3 + 1 - (n*3+1)\nend", "  if n < 0 then\n  \
    \  return 0\n  elseif n <= 3 then\n    return n\n  elseif n % 11 == 0 or n % 13\
    \ == 0 then\n    return fizz_buzz(n-1) + fizz_buzz(n-2)\n  end\nend", "  if n\
    \ < 10 then\n    return n\n  elseif n < 100 then\n    if n % 11 == 0 and n % 13\
    \ == 0 then\n      return 3\n    end\n    return 2\n  else\n    return 1\n  end\n\
    end", "    local n1 = n % 11\n    if n1 ~= 0 then\n        return n + 1\n    end\n\
    \    local n2 = n % 13\n    if n2 ~= 0 then\n        return n + 1\n    end\n \
    \   return n\nend", "  if n % 11 == 1 then\n    return 1 + fizz_buzz(math.floor(n\
    \ / 11))\n  elseif n % 13 == 1 then\n    return 1 + fizz_buzz(math.floor(n / 13))\n\
    \  else\n    return 1\n  end\nend", "  local i, remainder, digits\n  for i = 1,\
    \ n do\n    -- The remainder is set to zero to avoid having a zero remainder for\
    \ multiples of 11.\n    remainder = 0\n    digits = string.format(\"%05d\", i)\n\
    \    -- If the last digit is 7 then the remainder is set to one, otherwise to\
    \ zero.\n    remainder = remainder + (digits[#digits] == \"7\")\n    -- If the\
    \ number is divisible by 11 or 13 then the remainder is set to zero, otherwise\
    \ to one.\n    remainder = remainder + (i % 11 or i % 13)\n    -- Add the remainder\
    \ to the count.\n    i = i + 1\n    if remainder == 1 then\n      print(i)\n \
    \   end\n  end\nend", "  if n < 11 then\n    return n\n  elseif n < 13 then\n\
    \    return n * 2\n  else\n    return n * 3\n  end\nend", "  if n < 10 then return\
    \ n end\n  if n % 11 == 0 or n % 13 == 0 then\n    return 0\n  elseif n % 7 ==\
    \ 1 then\n    return 1\n  else\n    return fizz_buzz(n/7) + fizz_buzz(n/7)\n \
    \ end\nend", "  -- A number n is said to be divisible by 11 if n is divisible\
    \ by 11 and n is divisible by 13 if n is divisible by 13.\n  -- >>> fizz_buzz(50)\n\
    \  -- 0\n  -- >>> fizz_buzz(78)\n  -- 2\n  -- >>> fizz_buzz(79)\n  -- 3\n  return\
    \ math.floor((math.floor(n/11) * 11) + (math.floor(n/13) * 13))\nend", "    --\
    \ Base case\n    if n < 0 then\n        return n\n    end\n    -- Recursive case\n\
    \    if n <= 10 then\n        return n\n    elseif n % 11 == 0 then\n        return\
    \ fizz_buzz(n / 11) + 3\n    elseif n % 13 == 0 then\n        return fizz_buzz(n\
    \ / 13) + 1\n    end\nend", "  if n == 1 then\n    return 0\n  else\n    local\
    \ fizzbuzz = 0\n    local count = 0\n    while n >= 11 or n >= 13 do\n      count\
    \ = count + 1\n      local remainder = n % 11\n      n = n / 11\n      if not\
    \ remainder and count == 1 then\n        fizzbuzz = fizzbuzz + 1\n      elseif\
    \ remainder == 7 then\n        fizzbuzz = fizzbuzz + 1\n      end\n    end\n \
    \   return fizzbuzz\n  end\nend", "  local count=0\n  if n<0 then return nil end\n\
    \  for i=1,n do\n    if mod(n,11)==0 and mod(n,13)==0 then count=count+1 end\n\
    \  end\n  return count\nend", "  if n < 1 then\n    return 0\n  elseif n % 11\
    \ == 0 and n % 13 == 0 then\n    return 2\n  elseif n % 11 == 1 then\n    return\
    \ 1\n  elseif n % 13 == 1 then\n    return 0\n  else\n    return 3\n  end\nend",
  "  -- Convert to string to make it easier to count characters in numbers\n  n =\
    \ tonumber(tostring(n))\n  if n % 11 == 0 then\n    return 0\n  elseif n % 13\
    \ == 0 then\n    return 1\n  else\n    return n % 7\n  end\nend", "\t-- The numbers\
    \ of the form 511 or 1113 are divisible by 11 or 13 by 10.\n\t-- In these cases,\
    \ we return the number itself.\n\tif n % 11 == 0 and n % 13 == 0 then\n\t\treturn\
    \ n\n\tend", "\t-- Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n\t-- >>> fizz_buzz(50)\n\t-- 0\n\
    \t-- >>> fizz_buzz(78)\n\t-- 2\n\t-- >>> fizz_buzz(79)\n\t-- 3\n\t-- >>> fizz_buzz(100000)\n\
    \t-- 5\n\t-- >>> fizz_buzz(90000)\n\t-- 3\n\tlocal count = 0\n\tif n < 10 then\n\
    \t\tcount = count + 1\n\telseif n % 11 == 0 then\n\t\tcount = count + 1\n\telseif\
    \ n % 13 == 0 then\n\t\tcount = count + 1\n\tend\n\treturn count\nend", "  local\
    \ t\n  for t = 1, n do\n    if n % 13 == 0 then return 3 end\n    if n % 11 ==\
    \ 0 then return 2 end\n    if n % 7 == 0 then return 1 end\n  end\nend", "  return\
    \ math.floor(n / 11) * 11 + math.floor(n / 13) * 13\nend", "  local counter =\
    \ 0\n  if n % 11 == 1 then\n    counter += 1\n  end\n  if n % 13 == 1 then\n \
    \   counter += 1\n  end\n  return counter\nend", "  if n % 11 == 0 then\n    return\
    \ 1\n  elseif n % 13 == 0 then\n    return 2\n  else\n    return 0\n  end\nend",
  "  if n <= 0 then return 0 end\n  local count = 1\n  local i = 1\n  while i <= n\
    \ do\n    -- if the number is divisible by 11\n    local a = i % 11\n    if a\
    \ ~= 0 then\n      if a ~= 7 then count = count + 1 end\n      i = i / 11\n  \
    \  end\n    -- if the number is divisible by 13\n    local b = i % 13\n    if\
    \ b ~= 0 then\n      if b ~= 7 then count = count + 1 end\n      i = i / 13\n\
    \    end\n    i = i + 1\n  end\n  return count\nend", "  local t\n  local count\
    \ = 0\n  repeat\n    local t = n % 10\n    if (t % 11 == 0) or (t % 13 == 0) then\n\
    \      count = count + 1\n    end\n    n = n / 10\n  until n == 0\n  return count\n\
    end", "  if n < 10 then\n    return n\n  end\n  local sum = 0\n  for i = 1, n\
    \ do\n    local x = math.floor(i / 10)\n    local y = math.mod(i, 10)\n    if\
    \ y == 7 then\n      sum = sum + 1\n    end\n    sum = sum + fizz_buzz(x)\n  end\n\
    \  return sum\nend", "  local count = 0\n  for i = 1,n do\n    if i % 11 == 0\
    \ and i % 13 == 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "\tlocal count=0\n\twhile n>0 do\n\t\tif n%13==0 then\n\t\t\tcount=count+1\n\
    \t\tend\n\t\tif n%11==0 then\n\t\t\tcount=count+1\n\t\tend\n\t\tn=math.floor(n/13)\n\
    \tend\n\treturn count\nend", "  local s = \"\"\n  if n >= 11 then\n    s = s +\
    \ string.format(\"%d\",n-11)\n    if n ~= 11 then\n      s = s .. string.format(\"\
    %+d\",fizz_buzz(n-11))\n    end\n  end\n  if n >= 13 then\n    s = s + string.format(\"\
    %d\",n-13)\n    if n ~= 13 then\n      s = s .. string.format(\"%+d\",fizz_buzz(n-13))\n\
    \    end\n  end\n  if s ~= \"\" then\n    return s\n  else\n    return n\n  end\n\
    end", "  local nFizz = 0\n  local nBuzz = 0\n  local nFizzBuzz = 0\n  for i =\
    \ 1, n do\n    local divisor = math.floor(i / 11)\n    if divisor == 7 then\n\
    \      nFizzBuzz = nFizzBuzz + 1\n      if i % 11 == 0 then\n        nBuzz = nBuzz\
    \ + 1\n      end\n      if i % 13 == 0 then\n        nFizz = nFizz + 1\n     \
    \ end\n    else\n      nFizz = nFizz + 1\n    end\n  end\n  return nBuzz, nFizzBuzz,\
    \ nFizz\nend", "  if n < 0 then return nil end\n  if n % 11 == 1 then return n\
    \ end\n  if n % 13 == 1 then return n end\n  return fizz_buzz(n - 1)\nend", " \
    \ -- Return 1 if n is divisible by 11, otherwise return 0.\n  return ((n % 11)\
    \ == 0) or ((n % 13) == 0)\nend\n</cell>\n<cell>", "  n = n or 0\n  local sum\
    \ = 0\n  local n\n  for n = 1, n do\n    local nstr = string.format(\"%07d\",\
    \ n)\n    local m\n    if m = (#nstr + 3) / 4 then\n      sum = sum + 1\n    elseif\
    \ m > 0 and m ~= n then\n      sum = sum + 2\n    end\n  end\n  return sum\nend",
  "  if n < 1 then return 0 end\n  if n < 13 then return 1 end\n  if n % 13 == 0 then\n\
    \    return fizz_buzz(n / 13) + 1\n  else\n    if n % 11 == 0 then\n      return\
    \ fizz_buzz(n / 11) + 1\n    end\n  end\nend", "  if n > 0 then\n    local nn\
    \ = math.ceil(n)\n    local x = math.mod(n, nn)\n    if n % 11 == 0 or n % 13\
    \ == 0 then\n      return 1 + fizz_buzz(nx)\n    else\n      return fizz_buzz(nx)\n\
    \    end\n  else\n    return 0\n  end\nend", "  if n < 11 then\n    return 1\n\
    \  end\n  if n < 13 then\n    return 0\n  end\n  return fizz_buzz(n / 11) + fizz_buzz(n\
    \ % 11) + 1 end\nend", "    if n < 0 then\n        return 0\n    end\n    if n\
    \ < 11 then\n        return n\n    end\n    if n % 11 == 0 then\n        return\
    \ n\n    end\n    if n % 13 == 0 then\n        return n\n    end\n    return fizz_buzz(n\
    \ - 1)\nend", "  local count = 0\n  if n < 10 then return 1 end\n  while n > 0\
    \ and n % 11 == 0 or n % 13 == 0 do\n    count = count + 1\n    n = n / 10\n \
    \ end\n  return count\nend", "  -- First check it is not a multiple of 11 or 13\n\
    \  -- If it is then return zero\n  if n % 11 == 0 and n % 13 == 0 then\n    return\
    \ 0\n  end\n  -- If it is then check if the number is a multiple of 7\n  -- If\
    \ it is then add one to n and return it.\n  if n % 7 == 0 then\n    n = n + 1\
    \ -- the number is a multiple of 7\n    return n\n  end\n  -- If the number is\
    \ not a multiple of 11 or 13 then return it\n  return n\nend", "  if n < 0 then\n\
    \    return 0\n  else\n    -- Count the number of times 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    return math.floor((math.ceil(n/11)*11\
    \ + math.floor(n/13)*13) / n)\n  end\nend", "  -- Base case.\n  if n <= 0 then\n\
    \    return n\n  end\n  -- Recursive case.\n  if n % 11 == 0 or n % 13 == 0 then\n\
    \    return fizz_buzz(n-1)\n  end\n  return 0\nend", "    local count=0\n    while\
    \ n >= 0 and n <= 13 do\n        if ((n%11==0) or (n%13==0)) then\n          \
    \  count=count+1\n        end\n        local m = math.floor(n/11)\n        local\
    \ d = math.mod(n,11)\n        n = math.floor(n/13)\n    end\n    return count\n\
    end", "    local num_times = 0\n    while n > 0 do\n        if n % 11 == 0 then\n\
    \            num_times = num_times + 1\n        end\n        if n % 13 == 0 then\n\
    \            num_times = num_times + 1\n        end\n        n = n / 10\n    end\n\
    \    return num_times\nend\n</cell>\n<text>\nExploring fizz_buzz\nThis time we're\
    \ going to explore what happens when we get down to a single number.", "  if n\
    \ < 0 then return end\n  local digits = string.gsub(n:mod(10):gsub(\"%d+\",\"\"\
    ,\"%1%d\"):reverse(),\"..\",\"\")\n  local count\n  local divisor\n  if string.sub(n:mod(10):reverse(),1,1):sub(1,1)\
    \ == \"1\" then\n    divisor = 11\n    count = n:gsub(\"%d+\",\"\",\"%1%d\"):gsub(\"\
    %d+\",\"\",\"%1%d\"):reverse()\n  else\n    divisor = 13\n    count = n:gsub(\"\
    %d+\",\"\",\"%1%d\"):reverse()\n  end\n  return string.gsub(digits,\"7%d+\",\"\
    \")\n    + string.gsub(count,\"%d+\",\"\")\n    + string.gsub(divisor:reverse(),\"\
    %d+\",\"\")\nend", "    if n < 11 then\n        return n\n    elseif n < 13 then\n\
    \        if n % 11 == 1 then\n            return n\n        else\n           \
    \ return n + 1\n        end\n    else\n        return fizz_buzz(n % 11) * fizz_buzz(n\
    \ % 13)\n    end\nend", "  local i = 1\n  while i <= n do\n    if ((i % 11) ==\
    \ 0) or ((i % 13) == 0) then\n      print(i)\n    end\n    i = i + 1\n  end\n\
    end", "  local divisors = { 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53 }\n\
    \  -- Use a table because lookups are faster than a for loop\n  local fizz_buzzes\
    \ = {}\n  for i = 1, n do\n    local divisor = divisors[i]\n    local remainder\
    \ = n % divisor\n    if remainder == 0 then\n      if divisors[i] > n then fizz_buzzes[i]\
    \ = 1 end\n    else\n      fizz_buzzes[i] = fizz_buzzes[i] || 0\n      fizz_buzzes[i]:add(remainder)\n\
    \    end\n    n = n / divisor\n  end\n  -- Return the maximum value\n  return\
    \ fizz_buzzes[#fizz_buzzes]\nend", "  if n < 10 then\n    return n\n  else\n \
    \   -- Get the remainder when n is divided by 11.\n    -- A remainder of 0 means\
    \ that n is divisible by 11, and a remainder of 1 means that n is divisible by\
    \ 13.\n    local remainder = (n % 11) % 13", "  if n % 11 == 0 then\n    return\
    \ 0\n  end\n  if n % 13 == 1 then\n    return 1\n  end\n  return fizz_buzz(n -\
    \ 1)\nend", "    local count = 0\n    while n > 0 do\n        local t = math.floor(n\
    \ / 11) * 11 + math.floor(n / 13) * 13\n        if t == n then\n            count\
    \ = count + 1\n        end\n        n = t\n    end\n    return count\nend", "\t\
    local count = 0\n\twhile n > 0 do\n\t\tlocal div1 = n%11\n\t\tif div1 == 0 then\n\
    \t\t\tcount = count + 1\n\t\telse\n\t\t\tlocal div2 = n%13\n\t\t\tif div2 == 0\
    \ then\n\t\t\t\tcount = count + 1\n\t\t\telse\n\t\t\t\tif div1 < 5 then -- Divisible\
    \ by 5.\n\t\t\t\t\tcount = count + 1\n\t\t\t\telse\n\t\t\t\t\tcount = count +\
    \ 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tn = n/12\n\tend\n\treturn count\nend",
  "  -- Base case\n  if n == 0 then return 0 end", "  if n % 11 == 0 and n % 13 ==\
    \ 0 then\n    return 0\n  end", "  -- Convert to a string\n  local s = string.gsub(tostring(n),\
    \ '%d+', '%d*') -- Convert each number to a string containing just the number\
    \ (ex: \"50\" -> \"50\")\n  -- Find the index of the first occurrence of \"7\"\
    \ in the string.\n  -- If it isn't found, return -1\n  return string.find(s, '7')\n\
    end", "  if n < 0 then\n    error('The argument must be a positive integer')\n\
    \  end\n  if n < 11 then\n    return 0\n  end\n  if n < 13 then\n    return 1\n\
    \  end\n  return fizz_buzz(n - 11) + fizz_buzz(n - 13)\nend", "  if n%11==0 then\
    \ return end\n  if n%13==0 then return end\n  local count = 0\n  repeat\n    count\
    \ = count+1\n  until n % 10 == 7\n  return count\nend", "\tlocal count = 0\n\t\
    while n > 0 do\n\t\tif n % 11 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\t\t\
    if n % 13 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\t\tn = math.floor(n/10)\n\
    \tend\n\treturn count\nend", "  local counter = 0\n  for i = 1, n do\n    local\
    \ div = i % 11 or i % 13\n    if div == 1 then\n      counter = counter + 1\n\
    \    elseif div == 0 then\n      if i == 7 then\n        counter = counter + 1\n\
    \      end\n    else\n      counter = counter + 0\n    end\n  end\n  return counter\n\
    end", "  if n < 2 then return n end\n  if n % 11 == 1 then return fizz_buzz(n\
    \ + 1) end\n  if n % 13 == 1 then return fizz_buzz(n + 1) end\n  return n\nend",
  "  if n < 10 then\n    return n\n  end", "    local sum = 0\n    while n >= 11 do\n\
    \        sum = sum + 1\n        n = n - (n % 11) + 1\n    end\n    return sum\n\
    end", "  if n < 0 then return nil end\n  if n == 0 then return 0 end\n  if n %\
    \ 11 == 0 then return 1 end\n  if n % 13 == 0 then return 2 end\n  return fizz_buzz(n\
    \ - 1)\nend", "  if n < 0 then\n    return 0\n  end", "  -- Return the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13.\n  return ((math.floor(n/11) - math.floor(n/13) + 1):rep(7)):sum()\n\
    end", "  local count = 0\n  for i = 1, math.floor(n) do\n    if math.modf(n/i)[1]\
    \ == 0 then\n      if i % 11 == 0 or i % 13 == 0 then\n        count = count +\
    \ 1\n      end\n    end\n  end\n  return count\nend", "\t-- A prime number is\
    \ a number that is a product of two smaller primes.\n\tif n >= 0 and n <= 59 then\n\
    \t\treturn n \n\telseif n == 60 then\n\t\treturn \"FizzBuzz\"\n\telseif n == 61\
    \ then\n\t\treturn \"Buzz\"\n\telseif n >= 61 and n <= 99 then\n\t\treturn n\n\
    \telseif n > 99 and n <= 193 then\n\t\tlocal s = n % 100\n\t\tif s ~= 0 and s\
    \ ~= 11 and s ~= 13 then\n\t\t\treturn s\n\t\telse\n\t\t\tlocal r = n / 100\n\t\
    \t\tlocal t1 = n / 10\n\t\t\tlocal t2 = n - (r * 10)\n\t\t\treturn fizz_buzz(t1)\
    \ .. fizz_buzz(t2)\n\t\tend\n\telseif n > 193 and n <= 299 then\n\t\tlocal s =\
    \ n % 100\n\t\tif s ~= 0 and s ~= 11 and s ~= 13 then\n\t\t\treturn s\n\t\telse\n\
    \t\t\tlocal r = n / 100\n\t\t\tlocal t1 = n / 10\n\t\t\tlocal t2 = n - (r * 10)\n\
    \t\t\treturn fizz_buzz(t1) .. fizz_buzz(t2)\n\t\tend\n\telseif n > 299 and n <=\
    \ 399 then\n\t\tlocal s = n % 100\n\t\tif s ~= 0 and s ~= 11 and s ~= 13 then\n\
    \t\t\treturn s\n\t\telse\n\t\t\tlocal r = n / 100\n\t\t\tlocal t1 = n / 10\n\t\
    \t\tlocal t2 = n - (r * 10)\n\t\t\treturn fizz_buzz(t1) .. fizz_buzz(t2)\n\t\t\
    end\n\telseif n > 399 and n <= 419 then\n\t\tlocal s = n % 100\n\t\tif s ~= 0\
    \ and s ~= 11 and s ~= 13 then\n\t\t\treturn s\n\t\telse\n\t\t\tlocal r = n /\
    \ 100\n\t\t\tlocal t1 = n / 10\n\t\t\tlocal t2 = n - (r * 10)\n\t\t\treturn fizz_buzz(t1)\
    \ .. fizz_buzz(t2)\n\t\tend\n\telseif n > 419 and n <= 599 then\n\t\treturn n\
    \ % 10\n\telse\n\t\treturn n\n\tend\nend", "    local i = 1\n    while i < n do\n\
    \        if n % i == 0 and n / i ~= 11 then\n            i = i + 1\n        else\n\
    \            if n % i == 0 and n / i ~= 13 then\n                i = i + 1\n \
    \               if i == n then\n                    return i\n               \
    \ else\n                    return i\n                end\n            else\n\
    \                i = i + 1\n            end\n        end\n    end\nend", "  if\
    \ n < 10 then\n    return n\n  end\n  if n%11 == 0 then\n    return n\n  end\n\
    \  if n%13 == 0 then\n    return n\n  end\n  return 0\nend", "  -- We use a modulo\
    \ operator to find the remainder of division by 11 or 13 while n remains less\
    \ than n.\n  return n % 11 or n % 13 or fizz_buzz(n / 11)\nend", "  local count\
    \ = 0\n  local factor = 1\n  local count = 0\n  -- Start with n\n  repeat\n  \
    \  count = count + 1\n    -- Factor out the number until we're left with two digits\n\
    \    factor = factor + factor\n    factor = factor % 11\n  until factor > 13\n\
    \  -- Return the number of times 7 appears in integers less than n which are divisible\
    \ by 11 or 13.\n  return count + n % 11\nend", "  if n % 11 == 1 then\n    return\
    \ 0\n  end\n  if n % 13 == 1 then\n    return 1\n  end\n  return fizz_buzz(n -\
    \ 1)\nend", "    -- Find out the highest number that can fit in the given number\n\
    \    local max = 1\n    while max <= n do\n        local count = 0\n        for\
    \ i=1,n do\n            if n % i == 0 and i ~= 7 then\n                count =\
    \ count + 1\n            end\n        end\n        if count == 0 then\n      \
    \      return max\n        end\n        max = max + 1\n    end\nend", "    local\
    \ counter = 0\n    while n > 0 and n % 11 ~= 0 or n % 13 ~= 0 do\n        n =\
    \ n / 10\n        counter = counter + 1\n    end\n    return counter\nend", " \
    \ local c = 0\n  if n % 11 == 0 then\n    c += 1\n  end\n  if n % 13 == 0 then\n\
    \    c += 1\n  end\n  return c\nend", "  if n < 1 then return nil end\n  local\
    \ n2 = tostring(n)\n  if #n2 == 0 then return nil end\n  local digits = string.gsub(n2,\
    \ '.', ':')\n  local digit = string.sub(n2, 1, -1)\n  if digit == '7' then\n \
    \   local n3 = tonumber(digits .. '9')\n    if n3 then\n      return n3 + 1\n\
    \    end\n  end\n  return fizz_buzz(math.floor(n / 10))\nend\nprint(fizz_buzz(50))\n\
    print(fizz_buzz(78))\nprint(fizz_buzz(79))", "\t-- Return 1 if n is divisible\
    \ by 7, 0 otherwise.\n\tif n % 7 == 0 then\n\t\treturn 1\n\tend", "  if n < 0\
    \ or n > 1000000000000 or n % 11 or n % 13 then\n    return nil\n  elseif n %\
    \ 11 then\n    return n / 11\n  elseif n % 13 then\n    return n / 13\n  else\n\
    \    return n\n  end\nend", "  local nstr = string.format(\"%0d\", n)\n  local\
    \ count = 0\n  local re\n  -- We use re.compile to compile the pattern, so we\
    \ save it for later.\n  re = s:match(\"^%d+$\") or re:compile(\"^%d+$\")\n  --\
    \ We need to add + 1 to the number because the first digit is a 0.\n  -- Also\
    \ note that this code only works until n goes up to 90.\n  for i = 1, nstr * 10\
    \ + 1 do\n    local s = string.format(\"%d\", i / 10)\n    if s == 7 then\n  \
    \    if n % 11 == 0 then count = count + 1 end\n      if n % 13 == 0 then count\
    \ = count + 1 end\n    end\n  end\n  return count\nend", "  local num\n  num =\
    \ tonumber(n)\n  local z = 0\n  while num ~= 0 do\n    z = z + math.mod(num, 11)\n\
    \    num = math.floor(num / 11)\n    if num == 10 then z = 0 end\n    if z ==\
    \ 10 then z = 11 end\n  end\n  return z\nend", "    local cnt = 0\n    while n\
    \ > 0 do\n        if n % 11 == 1 then\n            cnt = cnt + 1\n        elseif\
    \ n % 13 == 1 then\n            cnt = cnt + 1\n        else\n            n = math.trunc(n/10)\n\
    \        end\n    end\n    return cnt\nend", "  local div, result = n % 11, n\n\
    \  while div >= 11 do\n    result = result + 1\n    n = n / 11\n    div, result\
    \ = n % 11, result\n  end\n  return div >= 13 and result + 1\nend", "  if n <\
    \ 10 then\n    return n\n  end\n  if n <= 12 and n % 11 == 1 then\n    return\
    \ fizz_buzz(n - 11) + 7\n  end\n  if n <= 13 and n % 13 == 1 then\n    return\
    \ fizz_buzz(n - 13) + 7\n  end\n  return 0\nend", "  return math.floor((n / 11)\
    \ * 13 + (n / 11))\nend", "\tlocal i\n\t\n\t-- If the integer is divisible by\
    \ 11 or 13 then return the number '0'.\n\tif math.mod(n, 11) == 0 or math.mod(n,\
    \ 13) == 0 then\n\t\treturn '0'\n\tend\n\t\n\t-- If the integer is divisible by\
    \ 13 then return '1'.\n\tif math.mod(n, 13) == 0 then\n\t\treturn '1'\n\tend\n\
    \t\n\t-- If the integer is divisible by 11 then return '2'.\n\tif math.mod(n,\
    \ 11) == 0 then\n\t\treturn '2'\n\tend\n\t\n\t-- If the integer is divisible by\
    \ 12 then return '3'.\n\tif math.mod(n, 12) == 0 then\n\t\treturn '3'\n\tend\n\
    \t\n\t-- If the integer is divisible by 2 then return '4'.\n\tif math.mod(n, 2)\
    \ == 0 then\n\t\treturn '4'\n\tend\n\t\n\t-- If the integer is divisible by 3\
    \ then return '5'.\n\tif math.mod(n, 3) == 0 then\n\t\treturn '5'\n\tend\n\t\n\
    \t-- If the integer is divisible by 4 then return '6'.\n\tif math.mod(n, 4) ==\
    \ 0 then\n\t\treturn '6'\n\tend\n\t\n\t-- If the integer is divisible by 5 then\
    \ return '7'.\n\tif math.mod(n, 5) == 0 then\n\t\treturn '7'\n\tend\n\t\n\t--\
    \ If the integer is divisible by 6 then return '8'.\n\tif math.mod(n, 6) == 0\
    \ then\n\t\treturn '8'\n\tend\n\t\n\t-- If the integer is divisible by 7 then\
    \ return '9'.\n\tif math.mod(n, 7) == 0 then\n\t\treturn '9'\n\tend\n\t\n\t--\
    \ If the integer is divisible by 8 then return '10'.\n\tif math.mod(n, 8) == 0\
    \ then\n\t\treturn '10'\n\tend\n\t\n\t-- If the integer is divisible by 9 then\
    \ return '11'.\n\tif math.mod(n, 9) == 0 then\n\t\treturn '11'\n\tend\n\t\n\t\
    -- If the integer is divisible by 10 then return '12'.\n\tif math.mod(n, 10) ==\
    \ 0 then\n\t\treturn '12'\n\tend\n\t\n\t-- If the integer is divisible by 11 then\
    \ return '13'.\n\tif math.mod(n, 11) == 0 then\n\t\treturn '13'\n\tend\n\t\n\t\
    -- If the integer is divisible by 12 then return '14'.\n\tif math.mod(n, 12) ==\
    \ 0 then\n\t\treturn ", "  -- Initialise a table of factors and return 0 if the\
    \ number is not divisible by any factor.\n  local factors = {} -- factors[i] =\
    \ # times that i divides n\n  -- Compute and store the factorial of n.\n  local\
    \ function factorial(n)\n    -- A factorial is defined as the product of the positive\
    \ integers, starting from 1.\n    if n < 1 then\n      return 1\n    else\n  \
    \    return n * factorial(n - 1)\n    end\n  end\n  -- Divide n by each number\
    \ from 1 to 20 and assign the results to factors\n  for i=1, 20 do\n    local\
    \ d = n / i\n    local f = factorial(i)\n    if f == d then\n      factors[i]\
    \ = d\n    end\n  end\n  -- Find out how many numbers from 1 to 20 divide n\n\
    \  local num = 0\n  local i = 1\n  while i <= 20 do\n    local d = n / i\n   \
    \ if factors[i] == d then\n      num = num + 1\n    end\n    i = i + 1\n  end\n\
    \  return num\nend", "  if n >= 11 then\n    return (n + 3) % 12\n  elseif n >=\
    \ 13 then\n    return ((n - 11) % 12) + 1\n  else\n    return 0\n  end\nend",
  "  if n < 1 then\n    return n\n  end", "  if n % 11 == 0 or (n % 11 == 0 and n\
    \ % 13 == 0) then\n    return 0\n  elseif n < 0 then\n    return fizz_buzz(-n)\n\
    \  else\n    return fizz_buzz((n / 11) * 11) + (n % 11 == 0 and n % 13 == 0 and\
    \ 1 or 3)\n  end\nend", "  if n==0 then\n    return 0\n  end\n  if n==1 then\n\
    \    return 1\n  end\n  if n==2 then\n    return 2\n  end\n  if n==3 then\n  \
    \  return 3\n  end\n  if n==4 then\n    return 4\n  end\n  if n==5 then\n    return\
    \ 5\n  end\n  if n==6 then\n    return 6\n  end\n  if n==7 then\n    return 7\n\
    \  end\n  if n==8 then\n    return 8\n  end\n  if n==9 then\n    return 9\n  end\n\
    \  if n%11==0 then\n    return n\n  end\n  if n%13==0 then\n    return n\n  end\n\
    \  -- There are four other possibilities for this number (n).\n  -- We'll handle\
    \ all four of these by recursively calling ourselves.\n  return fizz_buzz(n /\
    \ 10) * 10 + fizz_buzz(n % 10)\nend", "  if n==0 or n==1 then\n    return n\n\
    \  end\n  if n%11==0 then\n    return fizz_buzz(n/11)\n  end\n  if n%13==0 then\n\
    \    return fizz_buzz(n/13)\n  end\n  return n\nend", "  return tonumber(math.floor(n/11)*11+math.floor(n/13)*13+n%11*n%13)\
    \ -- add 1 to account for leading zero\nend", "  local result = 0\n  for i=1,n\
    \ do\n    if i % 11 == 0 then result = result + 1 end\n    if i % 13 == 0 then\
    \ result = result + 1 end\n  end\n  return result\nend", "  if n < 11 then return\
    \ n end\n  if n < 13 then return n*3 end\n  if n%11 == 0 or n%13 == 0 then return\
    \ n*3 end\n  return fizz_buzz(n/3)\nend", "  local count = 0\n  if n >= 0 and\
    \ n <= 100 then\n    count = count + count_digits(n % 11, 3)\n    count = count\
    \ + count_digits(n % 13, 2)\n    count = count + count_digits(n / 100, 1)\n  \
    \  count = count + count_digits(n / 10, 1)\n  end\n  return count\nend", "  local\
    \ fbb = {}\n  local b = 0\n  while n >= 10 do\n    table.insert(fbb,n % 10)\n\
    \    n = math.floor(n / 10)\n  end\n  if n > 0 then\n    table.insert(fbb,n)\n\
    \  end\n  for i = 1,table.getn(fbb) do\n    if fbb[i] == 7 and fbb[i+1] == 0 then\n\
    \      b = b + 1\n    end\n  end\n  return b\nend", "  if n < 10 then\n    return\
    \ n\n  end\n  if n <= 13 and (n % 11 == 0 or n % 13 == 0) then\n    return n -\
    \ 10\n  end\n  if n <= 31 and (n % 11 == 0 or n % 13 == 0) then\n    return n\
    \ - 10\n  end\n  return nil\nend", "    if n < 10 then\n        if n % 11 == 1\
    \ then\n            return 1\n        end\n        if n % 13 == 1 then\n     \
    \       return 2\n        end\n        return n\n    end\n    local counter =\
    \ 0\n    while n > 0 do\n        local temp = n % 10\n        if temp % 11 ==\
    \ 1 then\n            counter = counter + 1\n        end\n        if temp % 13\
    \ == 1 then\n            counter = counter + 1\n        end\n        n = n / 10\n\
    \    end\n    return counter\nend", "  local nstr = tostring(n)\n  local counts\
    \ = {} -- count of each digit 1..9\n  for digit, n in pairs(string.gmatch(nstr,\
    \ '%d+') -- count each digit 1..9\n      :gsub('%d+', function(digit)\n      \
    \  counts[digit] = counts[digit] or 1\n        local ret = counts[digit] - 1\n\
    \        counts[digit] = ret\n        return ret\n      end\n      )) do\n   \
    \ if n % 11 == 0 or (n % 13 == 0 and n % 11 == 0) then -- both divisible by 11\
    \ and 13\n      counts[digit] = 0\n    else -- divisible by 11\n      counts[digit]\
    \ = 1\n    end\n  end\n  local count = 0\n  for digit, n in pairs(string.gmatch(nstr,\
    \ '%d+') -- count each digit 1..9\n      :gsub('%d+', function(digit)\n      \
    \  if counts[digit] then count = count + 1 end\n        return count\n      end\n\
    \      )) do\n    if n % 11 == 0 then count = count + 1 end\n  end\n  return count\n\
    end", "    if n <= 0 then return 0 end\n    local z = 0\n    while n > 0 do\n\
    \        z = z * 10 + n % 10\n        n = math.floor((n - n % 10) / 10)\n    end\n\
    \    if z == 0 or n % 11 == 0 and n % 13 == 0 then\n        return z\n    end\n\
    \    return z + 1\nend", "  if n < 0 then\n    error(\"Invalid argument\")\n \
    \ end\n  if n % 11 == 1 then\n    return 0\n  end\n  if n % 13 == 1 then\n   \
    \ return 2\n  end\n  return 3\nend\nfizz_buzz = coroutine.wrap(fizz_buzz)", "\t\
    -- Initialize a variable to contain the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n\tlocal count = 0\n\t\
    -- If the input number is less than 10, add one to the count variable.\n\tif n\
    \ < 10 then\n\t\tcount = count+1\n\t-- If the input number is between 10 and 99,\
    \ add one to the count variable if both the first and second digits are divisible\
    \ by 11 or 13.\n\telseif n < 100 then\n\t\t-- If both the first and second digits\
    \ are divisible by 11, add one to the count variable.\n\t\tif n % 11 == 0 then\n\
    \t\t\tcount = count+1\n\t\t-- If the first and second digits are divisible by\
    \ 13, add one to the count variable.\n\t\telseif n % 13 == 0 then\n\t\t\tcount\
    \ = count+1\n\t\t-- If the first digit is between 10 and 99 and the first and\
    \ second digits are divisible by 11, add one to the count variable if both the\
    \ second and third digits are divisible by 11 or 13.\n\t\telseif n < 1000 then\n\
    \t\t\t-- If both the second and third digits are divisible by 11, add one to the\
    \ count variable.\n\t\t\tif n % 11 == 0 then\n\t\t\t\tcount = count+1\n\t\t\t\
    -- If the second and third digits are divisible by 13, add one to the count variable.\n\
    \t\t\telseif n % 13 == 0 then\n\t\t\t\tcount = count+1\n\t\t\t-- If the first\
    \ and second digits are between 10 and 99 and the first and second digits are\
    \ divisible by 11, add one to the count variable if the third digit is divisible\
    \ by 11 or 13.\n\t\t\telseif n < 10000 then\n\t\t\t\t-- If all the digits are\
    \ divisible by 11, add one to the count variable.\n\t\t\t\tif n % 11 == 0 then\n\
    \t\t\t\t\tcount = count+1\n\t\t\t\t-- If the third digit is divisible by 11 or\
    \ 13, add one to the count variable.\n\t\t\t\telseif n % 11 == 0 or n % 13 ==\
    \ 0 then\n\t\t\t\t\tcount = count+1\n\t\t\t\t-- If the first digit is between\
    \ 10 and 99 and both the second and third digits are divisible by 11 or 13, add\
    \ one to the count variable.\n\t\t\t\telseif n < 100000 then\n\t\t\t\t\t-- If\
    \ all the digits are divisible by 13 or 14, add one to the count variable.\n\t\
    \t\t\t\tif n % 13 == 0 or n % 14 == 0 then\n\t\t\t\t\t\tcount = count+1\n\t\t\t\
    \t\t-- If the third digit is between 10 and 99 and all digits are divisible by\
    \ 11 or 13, add one to the count variable if the fourth digit is divisible by\
    \ 11 or 13.\n\t\t\t\t\telseif n < 1000000 then\n\t\t\t\t\t\t-- If all the digits\
    \ are divisible by 11 or 13, add one to the count variable.\n\t\t\t\t\t\tif n\
    \ % 11 == 0 or n % 13", "  if n < 11 then return n end\n  if n < 13 then return\
    \ n - 11 end\n  local count = 0\n  local div = math.floor(n / 11) * 11\n  local\
    \ mult = 1\n  while mult < 13 do\n    n = div + mult\n    count = count + 1\n\
    \    mult = mult + 1\n    div = math.floor(n / 13) * 13\n  end\n  return count\n\
    end", "    local count = 0\n    while n > 0 do\n        local mod = n % 11\n \
    \       if mod == 7 then\n            count = count + 1\n        end\n       \
    \ n = math.floor(n/10)\n    end\n    return count\nend\n</cell>\n<text>\nThe solution\n\
    Let's solve the problem. First, let's see what happens when we call fizz_buzz(1):",
  "  local s = 0\n  for i = 1, n do\n    if i % 13 == 0 then\n      s = s + 1\n  \
    \  end\n    if i % 11 == 0 then\n      s = s + 1\n    end\n  end\n  return s\n\
    end", "   if n < 0 then return nil end\n   if n < 11 then return n end\n   if\
    \ n < 13 then return n end\n   if n >= 13 then return nil end\n   return fizz_buzz(n\
    \ - 13) + 1 end\nend", "    local ret = 0\n    for i = 1, n do\n        if (math.mod(n,\
    \ 11) == 0 or math.mod(n, 13) == 0) then\n            ret = ret + 1\n        end\n\
    \    end\n    return ret\nend", "  local s = \"\"\n  for i = 1, n do\n    if i\
    \ % 11 == 0 and i % 13 == 0 then\n      s = s .. \"FizzBuzz\"\n    else\n    \
    \  if i % 11 == 1 then\n        s = s .. \"Fizz\"\n      elseif i % 13 == 1 then\n\
    \        s = s .. \"Buzz\"\n      else\n        s = s .. i\n      end\n    end\n\
    \  end\n  return s\nend", "  -- Handle the case in which n isn't an integer.\n\
    \  if n == '' then return 0 end", "  local count = 0\n  for i = 1, n do\n    if\
    \ (i %% 11 == 0) or (i %% 13 == 0) then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local n2 = math.floor(n/3)\n  if n2 > 1 and n2 % 11\
    \ == 0 or n2 % 13 == 0 then\n    return n2\n  else\n    return fizz_buzz(n2)\n\
    \  end\nend", "  if n < 11 then\n    return 0\n  elseif n < 13 then\n    return\
    \ 1\n  else\n    local count = 0\n    for x = 1, n do\n      if n ~= x * x then\n\
    \        count = count + 1\n      end\n    end\n    return count\n  end\nend",
  "  local counter = 0\n  local i\n  for i = 1, n do\n    if i % 11 == 0 and i % 13\
    \ == 0 then\n      counter = counter + 1\n    else\n      if i % 11 == 0 then\n\
    \        counter = counter + 1\n      end\n      if i % 13 == 0 then\n       \
    \ counter = counter + 1\n      end\n    end\n  end\n  return counter\nend", " \
    \   -- Base Case: If the number is divisible by 11, just return the number.\n\
    \    -- Base Case: If the number is divisible by 13, return the sum of three Fizz\
    \ Buzz numbers.\n    -- Base Case: If the number is divisible by both 11 and 13,\
    \ return 0\n    if n%11==0 and n%13==0 then\n        return 0\n    elseif n%11==0\
    \ then\n        return fizz_buzz(n/11)\n    elseif n%13==0 then\n        return\
    \ fizz_buzz(n/13)+3\n    else\n        return fizz_buzz(n/11)+fizz_buzz(n/13)\n\
    \    end\nend", "  if n % 11 == 0 or n % 13 == 0 then\n    return 0\n  end\n \
    \ return math.floor(n / 11) + math.floor(n / 13)\nend", "  if n < 3 then\n   \
    \ return n\n  end\n  local n1 = n - 1\n  local n2 = n - 2\n  local n3 = n - 3\n\
    \  local n4 = n - 4\n  local n5 = n - 5\n  local n6 = n - 6\n  local n7 = n -\
    \ 7\n  local n8 = n - 8\n  local n9 = n - 9\n  local n10 = n - 10\n  local n11\
    \ = n - 11\n  local n12 = n - 12\n  local n13 = n - 13\n  local n14 = n - 14\n\
    \  local n15 = n - 15\n  local n16 = n - 16\n  local n17 = n - 17\n  local n18\
    \ = n - 18\n  local n19 = n - 19\n  local n20 = n - 20\n  local n21 = n - 21\n\
    \  local n22 = n - 22\n  local n23 = n - 23\n  local n24 = n - 24\n  local n25\
    \ = n - 25\n  local n26 = n - 26\n  local n27 = n - 27\n  local n28 = n - 28\n\
    \  local n29 = n - 29\n  local n30 = n - 30\n  local n31 = n - 31\n  local n32\
    \ = n - 32\n  local n33 = n - 33\n  local n34 = n - 34\n  local n35 = n - 35\n\
    \  local n36 = n - 36\n  local n37 = n - 37\n  local n38 = n - 38\n  local n39\
    \ = n - 39\n  local n40 = n - 40\n  local n41 = n - 41\n  local n42 = n - 42\n\
    \  local n43 = n - 43\n  local n44 = n - 44\n  local n45 = n - 45\n  local n46\
    \ = n - 46\n  local n47 = n - 47\n  local n48 = n - 48\n  local n49 = n - 49\n\
    \  local n50 = n - 50\n  local n51 = n - 51\n  local n52 = n - 52\n  local n53\
    \ = n - 53\n  local n54 = n - 54\n  local n55 = n - 55\n  local n56 = n - 56\n\
    \  local n57 = n - 57\n  local n58 = n - 58\n  local n59 = n - 59\n  local n60\
    \ = n - 60\n  local n61 = n - 61\n  local n62 = n - 62\n  local n63 = n - 63\n\
    \  local n64 = n - 64\n  local n", "  local result = 1\n  local i = 1\n  while\
    \ i <= n do\n    if i % 11 == 0 and i % 13 == 0 then\n      result = result +\
    \ 1\n    end\n    i = i + 1\n  end\n  return result\nend", "    local count =\
    \ 0\n    local num = 1\n    while n >= num do\n        if n % num == 0 then\n\
    \            count = count + 1\n        end\n        num = num * 3 + 1\n    end\n\
    \    if n % num == 1 then\n        count = count + 1\n    end\n    return count\n\
    end", "  if n < 10 then\n    return n\n  elseif n < 13 then\n    return fizz_buzz(n\
    \ - 10) * 11 + 13\n  else\n    return fizz_buzz(n - 13) * 13 + 11\n  end\nend",
  "  local counter = 1\n  while n > 0 do\n    if n % 11 == 1 then\n      counter =\
    \ counter + 1\n    elseif n % 13 == 1 then\n      counter = counter + 2\n    end\n\
    \    n = math.floor(n / 10)\n  end\n  return counter\nend", "    local count=0\n\
    \    local divisor_val=1\n    local last_count=count\n    while n>0 do\n     \
    \   count=count+1\n        n=n/divisor_val\n        last_count=count\n    end\n\
    \    return count\nend", "  if n % 11 == 1 then return 1 end\n  if n % 13 == 1\
    \ then return 2 end\n  return 0\nend", "  if n < 0 then\n    return -1\n  elseif\
    \ n < 10 then\n    return 1\n  elseif n % 11 == 1 then\n    return fizz_buzz(n\
    \ / 11) + 1\n  elseif n % 13 == 1 then\n    return fizz_buzz(n / 13) + 1\n  else\n\
    \    return fizz_buzz(n / 10) + 1\n  end\nend", "  local count=0\n  for i=1,n\
    \ do\n    if (i%3==0 and i%7==0) or (i%11==0 and i%13==0) then\n      count=count+1\n\
    \    end\n  end\n  return count\nend\n</cell>\n<text>\nProblem 2b\nWrite a function\
    \ that returns the number of times the digit 3 appears in integers less than n\
    \ which are divisible by 5 but not by 3.", "   if n < 2 then return nil end\n\
    \   local digits = string.gsub(n, \"%d*$\", \"\")\n   for i = 2, #digits do\n\
    \      if i % 11 == 0 or (i % 13 == 0 and i ~= 1) then return digits end\n   end\n\
    \   return nil\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThank you for sharing\
    \ your code. The problem I have is I am not allowed to use any functions other\
    \ than the ones in my code.\n<|/ c |>\n<| c |>\nAwesome! This is really cool!\
    \ I learned something new today! Thanks a lot!\n<|/ c |>\n<| c |>\nGlad I could\
    \ help out! :)\n<|/ c |>\n<| a dscore=2 |>\nHere's an alternative solution:\n\
    <code>", "  if n < 2 then\n    return n\n  end\n  if n % 11 == 1 then\n    return\
    \ n + fizz_buzz(n - 11)\n  end\n  if n % 13 == 1 then\n    return n + fizz_buzz(n\
    \ - 13)\n  end\n  return n\nend", "  if n == 1 then\n    return 0\n  end\n  if\
    \ n % 11 == 0 or n % 13 == 0 then\n    return 1\n  end\n  return fizz_buzz(n -\
    \ 1) + fizz_buzz(n - 3)\nend", "  -- Handle \"special\" values.\n  if n < 0 then\
    \ return 0 end\n  if n == 1 then return 1 end\n  -- Handle values between 1 and\
    \ n.\n  if n > 1 then\n    -- Return the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13.\n    return math.floor(n\
    \ / 11) + math.floor(n / 13)\n  else\n    -- Handle values between 1 and n.\n\
    \    return 0\n  end\nend", "\t-- Based on: https://math.stackexchange.com/questions/126405/fizz-buzz-problem-in-number-systems-of-the-integers-greater-than-36",
  "  -- Start at 1, and count downwards.\n  -- If the remainder of n/11 is zero, then\
    \ divide n by 11 and use that as the new n\n  -- If the remainder of n/13 is zero,\
    \ then divide n by 13 and use that as the new n\n  -- This continues until n is\
    \ no longer divisible by 11 or 13\n  local count = 0\n  local new_n = n\n  while\
    \ (new_n % 11 == 0 or new_n % 13 == 0) do\n    -- We don't want to count multiples\
    \ of 11 when n % 11 == 0, so we check whether n is divisible by 11, and if so\
    \ then divide it by 11\n    if new_n % 11 == 0 then\n      new_n = new_n / 11\n\
    \      count = count + 1\n    end\n    -- We don't want to count multiples of\
    \ 13 when n % 13 == 0, so we check whether n is divisible by 13, and if so then\
    \ divide it by 13\n    if new_n % 13 == 0 then\n      new_n = new_n / 13\n   \
    \   count = count + 1\n    end\n    -- We don't want to count multiples of 11\
    \ when n % 11 == 0, so we check whether n is divisible by 13, and if so then divide\
    \ it by 13\n    if new_n % 13 == 0 then\n      new_n = new_n / 13\n      count\
    \ = count + 1\n    end\n    -- We don't want to count multiples of 13 when n %\
    \ 13 == 0, so we check whether n is divisible by 11, and if so then divide it\
    \ by 11\n    if new_n % 11 == 0 then\n      new_n = new_n / 11\n      count =\
    \ count + 1\n    end\n    -- We don't want to count multiples of 11 when n % 11\
    \ == 0, so we check whether n is divisible by 11, and if so then divide it by\
    \ 11\n    if new_n % 11 == 0 then\n      new_n = new_n / 11\n      count = count\
    \ + 1\n    end\n  end\n  -- Return the number of multiples of 11 that we counted.\n\
    \  return count\nend", "  if n <= 0 then return end\n  local count = 1\n  if n%11\
    \ == 0 then count = count + 1 end\n  if n%13 == 0 then count = count + 1 end\n\
    \  return count\nend", "  local result = 0\n  for i = 1, n do\n    if (i % 11\
    \ == 0) or (i % 13 == 0) then\n      if i % 7 == 1 then\n        result = result\
    \ + 1\n      end\n    end\n  end\n  return result\nend", "\t-- Base cases.\n\t\
    if n < 0 then return end\n\tif n < 11 then return n end\n\tif n < 13 then return\
    \ n end", "  if n < 0 or n >= 100 or n % 11 == 0 or n % 13 == 0 then\n    return\
    \ 0\n  end\n  local count = 0\n  for i = 1, n do\n    if i % 11 == 0 and i % 13\
    \ == 0 then\n      count = count + 1\n    else\n      count = count + 1\n    \
    \  if i % 11 == 1 then\n        count = count + 1\n      elseif i % 13 == 1 then\n\
    \        count = count + 1\n      end\n    end\n  end\n  return count\nend", " \
    \ local function is_divisible_by_11(n)\n    return (math.mod(n, 11) == 0)\n  end\n\
    \  local function is_divisible_by_13(n)\n    return (math.mod(n, 13) == 0)\n \
    \ end\n  local function is_divisible_by_7(n)\n    return (math.mod(n, 7) == 0)\n\
    \  end\n  local function count_divisible_by_11_or_13(n)\n    if is_divisible_by_11(n)\
    \ then return 1 end\n    if is_divisible_by_13(n) then return 2 end\n  end\n \
    \ local function count_divisible_by_7(n)\n    if is_divisible_by_7(n) then return\
    \ 1 end\n  end\n  local count = 0\n  local i = 1\n  while i <= n do\n    count\
    \ = count + count_divisible_by_11_or_13(i)\n    count = count + count_divisible_by_7(i)\n\
    \    i = i + 1\n  end\n  return count\nend", "  local total = 0\n  while n >=\
    \ 11 do\n    total = total + 1\n    n, n = math.modf(n/10)\n  end\n  while n >=\
    \ 13 do\n    total = total + 1\n    n, n = math.modf(n/10)\n  end\n  return total\n\
    end", "  return ((math.floor(n/11) == 0 and n % 11 == 0) or (math.floor(n/13)\
    \ == 0 and n % 13 == 0)) and\n         n and n > 0 and n <= 1000 and n ~= 7*11\n\
    end", "    if n < 1 then return end\n    if n % 11 == 1 then return 0 end\n  \
    \  if n % 13 == 1 then return 0 end\n    return fizz_buzz(n - 1) + 1\nend", " \
    \ if n > 0 then\n    local digits = math.floor(n/10)\n    local remainder = n\
    \ - digits * 10\n    if remainder == 7 then\n      return digits + 1\n    end\n\
    \    if remainder == 11 then\n      return digits + 2\n    end\n    if remainder\
    \ == 13 then\n      return digits + 3\n    end\n    return digits\n  end\n  return\
    \ 0\nend", "  if n < 0 or n > 100 then\n    error(\"expected an int between 0\
    \ and 100\")\n  end\n  local result = 0\n  for i = 1, n do\n    local div, mod\
    \ = div(i % 11, 7)\n    if div == 0 and mod ~= 0 then\n      result = result +\
    \ 1\n    end\n  end\n  return result\nend", "  if n < 10 then\n    return n\n\
    \  else\n    local n2 = math.floor(n)\n    if n2 % 11 == 0 then\n      return\
    \ n2 + 1\n    elseif n2 % 13 == 0 then\n      return n2 + 2\n    else\n      return\
    \ n2\n    end\n  end\nend", "  local result = 0\n  for i=1,n do -- The loop will\
    \ run at most n times\n    local n1 = i\n    -- Loop till the number n1 is divisible\
    \ by 11 or 13\n    while (n1 % 11 == 0 and n1 % 13 == 0) or n1 % 10 == 0 do\n\
    \      n1 /= 10\n      if n1 % 11 == 0 then\n        n1 %= 13\n        result\
    \ = result + 1\n      end\n      if n1 % 13 == 0 then\n        n1 %= 11\n    \
    \    result = result + 1\n      end\n      if n1 % 10 == 0 then\n        result\
    \ = result + 1\n      end\n    end\n  end\n  return result\nend", "  local count\
    \ = 1\n  if n <= 1 then\n    return n\n  end\n  while n >= 11 do\n    count =\
    \ count + n % 11\n    n = n / 11\n  end\n  while n >= 13 do\n    count = count\
    \ + n % 13\n    n = n / 13\n  end\n  return count\nend", "  return tonumber(string.format('%.f',\
    \ ((math.floor(n/10) % 11 + 11) * 13 + math.floor(n%10) / 11)))\nend", "  local\
    \ s = ''\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      s =\
    \ s .. i\n    else\n      s = s .. '7'\n    end\n  end\n  return s\nend", "  return\
    \ n % 11 == 0 and n % 13 == 0 and (n/11 or n/13) or n\nend", "  if n < 13 then\n\
    \    return n\n  end\n  local count = 0\n  for i = 1, n do\n    if n % 13 == 0\
    \ and n % 11 == 0 then\n      count = count + 1\n    end\n    n, i = i % 13, i\
    \ + 1\n  end\n  return count\nend", "  if n % 11 == 0 then\n    return 1\n  end\n\
    \  if n % 13 == 0 then\n    return 2\n  end\n  if n % n % 11 == 1 then\n    return\
    \ 3\n  end\n  if n % n % 13 == 1 then\n    return 4\n  end\n  if n % n % n % 11\
    \ == 1 then\n    return 5\n  end\n  if n % n % n % 13 == 1 then\n    return 6\n\
    \  end\n  if n % n % n % n % 11 == 1 then\n    return 7\n  end\n  if n % n % n\
    \ % n % 13 == 1 then\n    return 8\n  end\n  return 0\nend", "    if n < 1 then\n\
    \        return n\n    elseif n % 11 == 1 then\n        return n\n    elseif n\
    \ % 13 == 1 then\n        return n\n    else\n        return fizz_buzz(n - 1)\n\
    \    end\nend", "  return math.floor((n - math.floor(n/11)) * math.floor(n/13))\n\
    end", "  -- Only for numbers less than 100\n  if n < 100 then\n    local count\
    \ = 0\n    -- Count the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n    local i = 0\n    for i=1, n do \n  \
    \    if ((n % i) == 0) then\n        count = count + 1\n      end\n    end\n \
    \   -- Return the number of times the digit 7 appears in integers less than n\
    \ which are divisible by 11 or 13.\n    -- >>> fizz_buzz(50)\n    -- 0\n    --\
    \ >>> fizz_buzz(78)\n    -- 2\n    -- >>> fizz_buzz(79)\n    -- 3\n    return\
    \ count\n  end\n  return -1\nend", "\t-- If the number is less than or equal to\
    \ zero return zero.\n\tif n <= 0 then\n\t\treturn 0\n\tend\n\t-- If the number\
    \ is divisible by 11 and less than n return 0.\n\tif n % 11 == 0 and n <= 1 then\n\
    \t\treturn 0\n\tend\n\t-- If the number is divisible by 13 and less than n return\
    \ 1.\n\tif n % 13 == 0 and n <= 2 then\n\t\treturn 1\n\tend\n\t-- If the number\
    \ is divisible by 15 and less than n return 2.\n\tif n % 15 == 0 and n <= 3 then\n\
    \t\treturn 2\n\tend\n\t-- If the number is divisible by 17 and less than n return\
    \ 3.\n\tif n % 17 == 0 and n <= 4 then\n\t\treturn 3\n\tend\n\t-- If the number\
    \ is divisible by 19 and less than n return 4.\n\tif n % 19 == 0 and n <= 5 then\n\
    \t\treturn 4\n\tend\n\t-- If the number is divisible by 21 and less than n return\
    \ 5.\n\tif n % 21 == 0 and n <= 6 then\n\t\treturn 5\n\tend\n\t-- If the number\
    \ is divisible by 23 and less than n return 6.\n\tif n % 23 == 0 and n <= 7 then\n\
    \t\treturn 6\n\tend\n\t-- If the number is divisible by 25 and less than n return\
    \ 7.\n\tif n % 25 == 0 and n <= 8 then\n\t\treturn 7\n\tend\n\t-- If the number\
    \ is divisible by 27 and less than n return 8.\n\tif n % 27 == 0 and n <= 9 then\n\
    \t\treturn 8\n\tend\n\t-- If the number is divisible by 29 and less than n return\
    \ 9.\n\tif n % 29 == 0 and n <= 10 then\n\t\treturn 9\n\tend\n\t-- If the number\
    \ is divisible by 31 and less than n return 10.\n\tif n % 31 == 0 and n <= 11\
    \ then\n\t\treturn 10\n\tend\n\t-- If the number is divisible by 33 and less than\
    \ n return 11.\n\tif n % 33 == 0 and n <= 12 then\n\t\treturn 11\n\tend\n\t--\
    \ If the number is divisible by 35 and less than n return 12.\n\tif n % 35 ==\
    \ 0 and n <= 13 then\n\t\treturn 12\n\tend\n\t-- If the number is divisible by\
    \ 37 and less than n return 13.\n\tif n % 37 == 0 and n <= 14 then\n\t\treturn\
    \ 13\n\tend\n\t-- If the number is divisible by 39 and less than n return 14.\n\
    \tif n % 39 == 0 and n <= 15 then\n\t\treturn 14\n\tend\n\t-- If the number is\
    \ divisible by 41 and less than n return 15.\n\tif n % 41 == 0 and n <= 16 then\n\
    \t\treturn 15\n\tend\n\t-- If the number is divisible by 43 and ", "  if n ==\
    \ 0 then return 0 end\n  if n % 11 == 0 and n % 13 == 0 then\n    return 1 + fizz_buzz(n\
    \ - 1)\n  end\n  return fizz_buzz(n - 1)\nend", "\tlocal i = 0\n\tlocal j = 0\n\
    \twhile i < n do\n\t\tif i % 11 == 0 and i % 13 == 0 then\n\t\t\tj = j + 1\n\t\
    \tend\n\t\ti = i + 1\n\tend\n\treturn j\nend", "    local cnt = 0\n    for i =\
    \ 1, n do\n        if ((n % 11) == 0) or ((n % 13) == 0) then\n            cnt\
    \ = cnt + 1\n        else\n            n = n / 11\n            cnt = cnt + 1\n\
    \        end\n    end\n    return cnt\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
