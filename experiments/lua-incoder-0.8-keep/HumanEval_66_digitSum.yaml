name: HumanEval_66_digitSum
language: lua
prompt: "-- Task\n-- Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
  \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
  helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") => 153\n\
  local function digitSum(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n\
  \    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
  \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
  \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
  \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  for i = 1, #s do\n    sum = sum + string.sub(s,i,i)\n\
    \  end\n  return sum\nend\nprint(digitSum(\"helloE\"))", "  -- Write your solution\
    \ here\n  local sum = 0\n  for i = 1, #s do\n    sum = sum + string.char(string.byte(s,i)-97)\n\
    \  end\n  return sum\nend\nprint(digitSum(\"test\"))\nprint(digitSum(\"aAaaaXa\"\
    ))\nprint(digitSum(\"aAaaaXa\"))", "   -- Write your solution here\n   assert(s)\n\
    \   return 0\nend", "   local total = 0\n   for i=1,#s do\n      total = total\
    \ + tonumber(s[i])\n   end\n   return total\nend", "  local sum = 0\n  local i\
    \ = 1\n  for _ in pairs(s) do\n    sum = sum + tonumber(string.sub(s, i, i + 1))\n\
    \    i = i + 1\n  end\n  return sum\nend", "  local sum = 0\n  for i=1,#s do\n\
    \    sum = sum + string.sub(s,i,i)\n  end\n  return sum\nend", "  -- Base case\n\
    \  if s == \"0\" then\n    return 0\n  end\n  -- Recursive case\n  local result\
    \ = 0\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    local code = string.byte(c)\n\
    \    local char = string.char(c)\n    if code > 47 and code < 58 then\n      --\
    \ If ASCII code greater than or equal to 58, it is upper case character\n    \
    \  -- Add ASCII code of the character\n      result = result + (code - 64)\n \
    \   elseif code > 64 and code < 71 then\n      -- If ASCII code greater than or\
    \ equal to 71, it is lower case character\n      -- Add ASCII code of the character\n\
    \      result = result + (code - 72)\n    end\n  end\n  return result\nend", " \
    \   local sum = 0\n    for i = 1, #s do\n        sum = sum + string.sub(s,i,i)\n\
    \    end\n    return sum\nend", "  -- base case\n  if s == nil then\n    return\
    \ 0\n  end", "\ts = s:gsub(\"[^0-9]\", \"\")\n\tlocal n = 0\n\tfor i = 1, #s do\n\
    \t\tn = n + tonumber(s[i])\n\tend\n\treturn n\nend", "  local sum = 0\n  for i\
    \ = 1, #s do\n    sum = sum + string.byte(s,i)\n  end\n  return sum\nend", " \
    \   local sum = 0\n    for i = 1, #s do\n        local c = string.sub(s,i,i)\n\
    \        if string.byte(c) > 47 and string.byte(c) < 58 then\n            sum\
    \ = sum + string.byte(c) - 48\n        end\n    end\n    return sum\nend", " \
    \   local digitSum = 0\n    for i=1,#s do\n        if string.sub(s,i,i) ~= string.sub(s,i,i)\
    \ or string.sub(s,i,i) ~= '' then\n            digitSum = digitSum + string.sub(s,i,i):byte()\n\
    \        end\n    end\n    return digitSum\nend", "\t-- Your code here\n\tlocal\
    \ sum = 0\n\tlocal len = #s\n\tlocal i = 0\n\tfor i = 1, len do\n\t\tif string.sub(s,i,i)\
    \ == string.sub(s,i-1,i) then\n\t\t\tsum = sum + string.byte(string.sub(s,i-1,i))\
    \ + string.byte(string.sub(s,i,i+1))\n\t\t\ti = i + 2\n\t\telse\n\t\t\tsum = sum\
    \ + string.byte(string.sub(s,i-1,i))\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn\
    \ sum\nend", "    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum +\
    \ tonumber(string.sub(s,i,i))\n    end\n    return sum\nend", "    local sum =\
    \ 0\n    for i=1,#s do\n        sum = sum + string.sub(s,i,i)\n    end\n    return\
    \ sum\nend", "\tlocal chars = {}\n\tfor c in string.gmatch(s, \"%S+\") do\n\t\t\
    table.insert(chars, string.byte(c))\n\tend\n\treturn table.sum(chars)\nend", " \
    \   local count = 0\n    for letter in s:gmatch '[%a%A]+' do\n        count =\
    \ count + letter:byte()\n    end\n    return count\nend", "    local result =\
    \ 0\n    for i = 1, #s do\n        local char = string.sub(s,i,i)\n        --\
    \ Convert char to ascii code \n        local char_as_int = string.byte(char) \n\
    \        -- Add up the ascii codes\n        result = result + char_as_int \n \
    \   end\n    return result \nend", "\tlocal s = 0\n\tfor i = 1, #s do\n\t\tif\
    \ string.byte(s,i,i) > 47 and string.byte(s,i,i) < 58 then\n\t\t\ts = s + string.byte(s,i,i)\n\
    \t\tend\n\tend\n\treturn s\nend", "    local sum = 0\n    \n    for c in s:gmatch\
    \ \"[%a]+\" do\n        sum = sum + tonumber(c)\n    end\n    \n    return sum\n\
    end", "  return #s .. s.upper:gsub(\"^[%z\\1-\\127]+\", \"\")\nend", "  s = tostring(s)\n\
    \  local sum = 0\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    sum\
    \ = sum + string.char(tonumber(c))\n  end\n  return sum\nend", "  local sum =\
    \ 0\n  for i = 1, #s do\n    local x = string.sub(s,i,i)\n    sum = sum + tonumber(x)\n\
    \  end\n  return sum\nend", "\tlocal result = 0\n\tfor i = 1, #s do\n\t\tif string.sub(s,i,i)\
    \ >= string.sub(s,i,i) + string.sub(s,i,i) or string.sub(s,i,i) == string.sub(s,i,i)\
    \ + string.sub(s,i,i) - 1 then\n\t\t\tresult = result + string.sub(s,i,i)\n\t\t\
    end\n\tend\n\treturn result\nend", "    local sum = 0\n    for i = 1, #s do\n\
    \        sum = sum + tonumber(string.sub(s, i, i + 1)) + 9\n    end\n    return\
    \ sum\nend", "\t-- Write your code in Lua 5.4\n\treturn #string.gsub(s, \".\"\
    , \"\"):gsub(\"(%w+)\",function(c) return tonumber(c:sub(1,1)) * tonumber(c:sub(2:end))\
    \ end):gsub(\"%w+\",function(c) return tonumber(c:sub(1,1)) + tonumber(c:sub(2:end))\
    \ end)\nend", "\tlocal ret = 0\n\tfor i, char in s:gmatch(\"[%D-%.]+\") do\n\t\
    \tret = ret + string.byte(char, i, i+1)\n\tend\n\treturn ret\nend", "   s = string.gsub(s,\
    \ '[\\\\^%$*+?./()|-]', '') -- Remove special characters\n   return s:gsub('%d%d+',\
    \ function(a,b) return tonumber(a) + tonumber(b) end) -- Add digits\nend", " \
    \ local n = 1\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if c ==\
    \ 'A' then\n      n = n*26\n    else\n      n = n*10 +tonumber(c)\n    end\n \
    \ end\n  return n\nend", "  if s == nil then\n    return \"nil\"\n  end", "  --\
    \ Only run this code if the string has at least 1 character\n  if not s then return\
    \ 0 end\n  -- Run this on every character in each string\n  -- If the character\
    \ is not an upper case or lower case\n  -- add the character to the total\n  return\
    \ string.gsub(s, \"([A-Za-z])\", function(c) return string.upper(c) + string.lower(c)\
    \ end)\n     + digitSum(string.sub(s, 2))\nend", "  -- base case\n  if #s <= 0\
    \ then\n    return 0\n  end", "    local sum = 0\n    for i=1,#s do\n        local\
    \ c = string.sub(s,i,i)\n        sum = sum + string.byte(c):byte()\n    end\n\
    \    return sum\nend", "  if s == nil then\n    return 0\n  end\n  local sum =\
    \ 0\n  local i = 1\n  while i <= #s do\n    sum = sum + string.sub(s,i,i)\n  \
    \  i = i + 1\n  end\n  return sum\nend", "  local sum = 0\n  for _, ch in s:gmatch\"\
    (.)\"\n    do\n      sum = sum + tonumber(ch)\n    end\n  return sum\nend", " \
    \ s = s:lower() -- remove all digts and lower case\n  local sum = 0\n  for i =\
    \ 1, #s do\n    if tonumber(string.sub(s,i,i)) > 47 then\n      sum = sum + tonumber(string.sub(s,i,i))\n\
    \    end\n  end\n  return sum\nend", "  assert(type(s) == 'string', 'digitSum\
    \ expects a string input')\n  local result = 0\n  for i, c in pairs(s) do \n \
    \   result = result + (c > 47 and c or 48) - c\n  end\n  return result\nend",
  "    local sum = 0\n    for _, c in ipairs(s) do\n        if string.byte(c) >= 48\
    \ and string.byte(c) <= 57 then\n            sum = sum + string.byte(c)\n    \
    \    end\n    end\n    return sum\nend", "  s = string.gsub(s, \"\", \"%a\")\n\
    \  return string.char(string.len(s)-string.len(string.sub(s,2,string.len(s)-1)))\n\
    end", "    local sum = 0\n    for i=1,#s do\n        sum = sum + tonumber(tostring(s[i]))\
    \ * 32 + tonumber(tostring(s[#s]))\n    end\n    return sum\nend", "    local\
    \ sum = 0\n    for i,v in string.gmatch(s, \"[^ ]+\") do\n        if v then\n\
    \            sum = sum + string.byte(v)\n        end\n    end\n    return sum\n\
    end", "    local sum = 0\n    for i=1, #s do\n        sum = sum + string.sub(s,i,i)\n\
    \    end\n    return sum\nend", "  s = string.gsub(s, \".\", \"\")\n  local sum\
    \ = 0\n  for i = 1, #s do\n    sum = sum + (string.byte(string.sub(s, i, i)) +\
    \ string.byte(string.sub(s, \"aAaaaXa\", i)))\n  end\n  return sum\nend", "  \
    \  local sum = 0\n    for i = 1, #s do\n        local c = string.sub(s,i,i)\n\
    \        if string.byte(c) >= 47 and string.byte(c) <= 90 then\n            sum\
    \ = sum + string.byte(c)\n        end\n    end\n    return sum\nend", "    local\
    \ s = s:upper()\n    local count = 0\n    for i = 1, #s do\n        if string.sub(s,\
    \ i, i) ~= \"\" then\n            count = count + 1\n        end\n    end\n  \
    \  return count\nend", "    -- your implementation\nend", "   local count = 0\n\
    \   for char in string.gmatch(s, '[^A-Z]') do\n      count = count + #char\n \
    \  end\n   return count\nend", "  local sum = 0\n  local lastChar = \"\"\n  local\
    \ charCount = 0\n  for char in string.gmatch(s, \"([A-Za-z0-9]+)\") do\n    charCount\
    \ = charCount + 1\n    if charCount <= string.len(lastChar) then\n      sum =\
    \ sum + string.byte(lastChar, charCount)\n    end\n    lastChar = char\n  end\n\
    \  return sum\nend", "  -- Write your logic here\n  local function charToInt(c)\n\
    \    return string.byte(c) -- Returns the ASCII code\n  end\n  \n  return s:gsub(\"\
    [^%d]+\", charToInt):gsub(\"%d\", sum):gsub(\"^%d\", \"\")\nend", "\tlocal sum\
    \ = 0\n\tfor i = 1, #s do\n\t\tlocal c = string.sub(s,i,i)\n\t\tif string.upper(c)\
    \ == c then\n\t\t\tsum = sum + string.upper(c)\n\t\tend\n\tend\n\treturn sum\n\
    end", "  -- your code here\n  return 1\nend", "  local digits={}\n  for _,i in\
    \ string.gfind(s, \"%l+\") do\n    digits[i+1]=digits[i+1] or 0\n    digits[i+1]=digits[i+1]+i\n\
    \  end\n  return table.concat(digits)\nend", "  s = string.gsub(s, '%a', '+')\n\
    \  s = string.gsub(s, '%A', '+')\n  return #s + string.len(s)\nend", "  local\
    \ sum = 0\n  for char in s:gmatch(\"%W\") do\n    sum = sum + tonumber(char)\n\
    \  end\n  return sum\nend", "    return #s + #s:gsub(\"^.-\", \"\")\nend", " \
    \   local sum = 0\n    for _, _ in s:gmatch'[^%z]+' do\n        sum = sum + tonumber(_)\n\
    \    end\n    return sum\nend\n</cell>\n<text>\n9. Write a function that takes\
    \ a string and returns the length of the string.", "  -- Check empty string\n\
    \  if s == \"\" then\n    return 0\n  end\n  -- Convert string to list of characters\n\
    \  local result = {}\n  for i = 1, #s do\n    table.insert(result, string.sub(s,i,i))\n\
    \  end\n  -- Convert list of characters to a list of numbers\n  for i = 1, #result\
    \ do\n    local number = tonumber(result[i])\n    if number == nil then\n    \
    \  return nil\n    end\n    table.insert(result, number)\n  end\n  -- Sum the\
    \ numbers\n  return table.sum(result)\nend", "\tlocal sum = 0\n\tfor i = 1, #s\
    \ do\n\t\tsum = sum + tonumber(string.sub(s,i,i))\n\tend\n\treturn sum\nend",
  "\tlocal sum = 0\n\tfor _, c in ipairs(s) do\n\t\tsum = sum + tonumber(string.sub(s,\
    \ c, c + 1))\n\tend\n\treturn sum\nend", "  s = s:lower() -- lowercase string\
    \ for case-insensitive summing\n  local sum = 0\n  for i = 0, #s do\n    if string.byte(s):byte(i)\
    \ == 32 then -- 32 equals 'space' char\n      sum = sum + string.byte(s):byte(i)\n\
    \    end\n  end\n  return sum\nend", "  local sum = 0\n  s:gsub(\".\", function(x)\n\
    \    sum = sum + tonumber(x)\n  end)\n  return sum\nend", "  -- initialize total\
    \ to 0\n  local total = 0\n  -- iterate through string character by character\n\
    \  for char in string.gmatch(s, \"%a\") do\n    -- check if char is upper case\n\
    \    local isUpper = string.byte(char) >= 65 and string.byte(char) <= 90\n   \
    \ -- if char is upper\n    if isUpper then\n      -- add char to total\n     \
    \ total = total + string.byte(char)\n    end\n  end\n  return total\nend", " \
    \ local sum = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= \"\" then\n \
    \     sum = sum + string.sub(s,i,i)\n    end\n  end\n  return sum\nend", "  local\
    \ total = 0\n  for i=1,#s do\n    total = total + tonumber(string.sub(s, i,i))\n\
    \  end\n  return total\nend", "  local sum = 0\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if string.match(c,\"^[%w]\") then\n      sum = sum\
    \ + string.byte(c)\n    end\n  end\n  return sum\nend", "  local sum = 0\n  for\
    \ i in string.gmatch(s, '%A+') do\n    sum = sum + tonumber(i)\n  end\n  return\
    \ sum\nend", "  -- Your code here\nend", "\tlocal sum = 0\n\tfor _, c in s:gmatch(\"\
    %c\") do\n\t\tsum = sum + #c\n\tend\n\treturn sum\nend", "  local sum = 0\n  for\
    \ i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n  end\n  return sum\n\
    end", "    local n = 1\n    local digit = 0\n    for s in string.gmatch(s, \"\
    %S+\") do\n        digit = string.byte(s, '8') + 1\n        n = n * 10 + digit\n\
    \    end\n    return n\nend", "\tassert(type(s) == 'string', 'Argument must be\
    \ a string.')\n\tassert(#s == '' or #s == '1', 'Argument must be a string of length\
    \ 1.')\n\tlocal digitSum = 0\n\tfor i = 1, #s do\n\t\tif string.upper(s[i:i])\
    \ then\n\t\t\tdigitSum = digitSum + string.upper(s[i:i]) - 64\n\t\tend\n\tend\n\
    \treturn digitSum\nend", "  local sum = 0\n  for i = 1, #s do\n    sum = sum +\
    \ tonumber(string.sub(s,i,i)):byte()\n  end\n  return sum\nend", "    local sum\
    \ = 0\n    for i = 1, #s, 1 do\n        sum = sum + tonumber(string.sub(s,i,i))\n\
    \    end\n    return sum\nend", "  local sum = 0\n  for _, c in ipairs(s) do\n\
    \    sum = sum + string.byte(c) - 96\n  end\n  return sum\nend", "  local sum\
    \ = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s, i, i))\n  end\n\
    \  return sum\nend", "    local result = {}\n    for _, i in ipairs(s) do\n  \
    \      if string.byte(i) >= 65 and string.byte(i) <= 122 then\n            table.insert(result,\
    \ string.byte(i))\n        end\n    end\n    return table.concat({result})\nend",
  "    -- base case\n    if not s then\n        return 0\n    end", "  -- Your code\
    \ here\nend", "  s = string.gsub(s, \"[%z\\1-\\3]\", \"\")\n  return string.gsub(s,\
    \ \"%z+\", function(s) return string.char(string.sub(s, 1, 1)) end)\nend", " \
    \ return s:gsub(\"([A-Z])\", function(c) return #c + 1 end)\nend", "  local sum\
    \ = 0\n  for c in s:gmatch(\"%w\") do\n    sum = sum + tonumber(c)\n  end\n  return\
    \ sum\nend", "  local total = 0\n  for _, _ in pairs(s) do\n    total = total\
    \ + tonumber(string.sub(s, 1, 1)) + tonumber(string.sub(s, 2))\n  end\n  return\
    \ total\nend", "  -- base case\n  if #s == 0 then\n    return 0\n  end\n  -- recursive\
    \ case\n  local sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n\
    \  end\n  return sum\nend", "\tlocal sum = 0\n\tfor char in s:gmatch(\"%a\") do\n\
    \t\tsum = sum + string.char(string.byte(char) + 64)\n\tend\n\treturn sum\nend",
  "  -- Write your solution here\n  return string.gsub(s, function(a)\n    return\
    \ string.char(a)\n  end)\nend", "    return #s + 1\nend", "  -- TODO: Rewrite\
    \ without recursion\n  local digitSum = 0\n  for i = 1, #s do\n    digitSum =\
    \ digitSum + string.sub(s,i,i)\n  end\n  return digitSum\nend", "    local sum\
    \ = 0\n    for i = 1, #s do\n        sum = sum + tonumber(string.sub(s,i,i))\n\
    \    end\n    return sum\nend", "  local sum = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i) then\n      sum = sum + tonumber(string.sub(s, i, i))\n    end\n  end\n\
    \  return sum\nend", "  if s == nil then\n    return 0\n  end\n  local total =\
    \ 0\n  for i = 1, #s do\n    total = total + tonumber(string.sub(s,i,i))\n  end\n\
    \  return total\nend", "  local sum = 0\n  for i = 1, #s do\n    local letter\
    \ = string.sub(s, i, i)\n    sum = sum + string.byte(letter)\n  end\n  return\
    \ sum\nend", "  -- base case\n  if not s then\n    return 0\n  end", "\tlocal\
    \ count = 0\n\tfor _, c in ipairs(s:gsub(\"%W\", \"\")) do\n\t\tcount = count\
    \ + string.byte(\"0123456789abcdef\"[c])\n\tend\n\treturn count\nend", "    local\
    \ sum = 0\n    for i=1,#s do\n        sum = sum + tonumber(string.sub(s,i,i)):byte()\n\
    \    end\n    return sum\nend", "    local sum = 0\n    for i = 1, #s do\n   \
    \     sum = sum + tonumber(string.sub(s,i,i))\n    end\n    return sum\nend",
  "  local str=string.lower(s)\n  local sum=0\n  for i=1,#str do \n    sum=sum+string.byte(string.sub(str,i,i))\n\
    \  end\n  return sum\nend", "\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tsum = sum\
    \ + string.char(tonumber(string.sub(s,i,i)))\n\tend\n\treturn sum\nend", "  local\
    \ sum = 0\n  for _, c in pairs(s) do sum = sum + tonumber(c:byte()) end\n  return\
    \ sum\nend", "\t-- Create a list to accumulate sums.\n\tlocal sums = {}\n\t--\
    \ Loop through characters in the string.\n\tfor i, c in ipairs(s) do\n\t\t-- If\
    \ the character is an uppercase letter, add the ASCII code to the accumulator.\n\
    \t\tif string.byte(c) >= 65 and string.byte(c) <= 90 then\n\t\t\tsums[#sums+1]\
    \ = string.byte(c) + #sums\n\t\tend\n\tend\n\t-- Return the sum from the accumulator.\n\
    \treturn #sums + 1\nend", "  local sum = 0\n  for i = 0, #s do\n    sum = sum\
    \ + tonumber(string.sub(s,i,i)) \n  end\n  return sum\nend", "  -- base case\n\
    \  if #s < 1 then\n    return 0\n  end\n  \n  -- get first char\n  local digit\
    \ = string.sub(s, 1, 1)\n  \n  -- init sum\n  local sum = 0\n  \n  -- loop through\
    \ remainder\n  for i = 2, #s do\n    -- get char at i\n    local char = string.sub(s,\
    \ i, i)\n    -- get code of this char\n    local code = string.byte(char)\n  \
    \  -- add code to the sum\n    sum = sum + code\n  end\n  \n  -- return sum\n\
    \  return sum\nend", "  local sum = 0\n  for i=1,#s do\n    sum = sum + tonumber(string.sub(s,i,i))\n\
    \  end\n  return sum\nend", "  if s == nil then return 0 end\n  local sum = 0\n\
    \  for i = 1, #s, 1 do\n    sum = sum + string.char(string.byte(s,i)) - (string.byte(s,i)-1)\n\
    \  end\n  return sum\nend", "   local sum = 0\n   for _,c in ipairs(s) do\n  \
    \    sum = sum + string.byte(c)\n   end\n   return sum\nend", "  -- Check empty\
    \ string.\n  if not s then\n    return 0\n  end", "  -- Write your solution here\n\
    \  local sum = 0\n  for i=1,#s do\n    sum = sum + string.char(string.byte(s,i)-1)\n\
    \  end\n  return sum\nend", "    local sum = 0\n    \n    for i = 1, #s do\n \
    \       if string.byte(string.sub(s,i,i)) > 0 then\n            sum = sum + string.byte(string.sub(s,i,i))\n\
    \        end\n    end\n    \n    return sum\nend", "  local sum = 0\n  for i =\
    \ 1, #s do\n    sum = sum + string.sub(s,i,i) or 0\n  end\n  return sum\nend",
  "  -- Base case\n  -- return sum + 1 for empty string\n  return s if string.len(s)\
    \ == 0 then 1 end", "  local sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n\
    \  end\n  return sum\nend", "    local sum = 0\n    for i = 1, #s do\n       \
    \ sum = sum + tonumber(s:sub(i, i + 1))\n    end\n    return sum\nend", "    return\
    \ string.gsub(s, \"([a-z])\", function (c)\n        local ret = string.byte(c)\n\
    \        return string.char(string.byte(c) + ret)\n    end)\nend", "   local result\
    \ = {}\n   for i=1,#s do\n      if string.byte(s,i)>=48 and string.byte(s,i)<=57\
    \ then\n         result[i] = result[i] + (string.byte(s,i))\n      end\n   end\n\
    \   return result\nend", "\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tsum = (sum\
    \ * 10) + (tonumber(string.sub(s,i,i)) - '0')\n\tend\n\treturn sum\nend", "  --\
    \ Your code here\n  \n  return sum;\nend", "  s = string.gsub(s, \"[^\" .. string.char(string.upper(string.sub(\"\
    A\", 1, 1))) .. \"]\", \"\")\n  return tonumber(s)\nend", "  local c = 0\n  for\
    \ i = 1, #s do\n    local a = string.char(string.byte(s,i))\n    if not a:match(\"\
    %w\") then\n      c = c + string.byte(s,i)\n    end\n  end\n  return c\nend",
  "\tlocal sum = 0\n\tfor _, c in string.gmatch(s, \"[%a]\") do\n\t\tsum = sum + string.byte(\"\
    a\") - string.byte(c)\n\tend\n\treturn sum\nend", "  assert(type(s) == \"string\"\
    , \"[digitSum] expects a string\")\n  local sum = 0\n  for i = 1, #s do\n    sum\
    \ = sum + tonumber(string.sub(s, i, i)) + 12\n  end\n  return sum\nend", "\tlocal\
    \ res = 0\n\tfor i = 1, #s, 2 do\n\t\tlocal c = tonumber(s:sub(i,i))\n\t\tif not\
    \ c then break end\n\t\tif c < 128 then res = res + c end\n\tend\n\treturn res\n\
    end", "  local sum = 0\n  for i = 1, #s do\n    sum = sum + string.char(string.byte(string.sub(s,\
    \ i, i)) + 1)\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #s do\n\
    \    if string.sub(s,i,i) ~= \"\" then sum = sum + string.sub(s,i,i) end\n  end\n\
    \  return sum\nend", "  s = s:lower()\n  local ret = 0\n  for i = 1, #s do\n \
    \   local c = string.sub(s,i,i)\n    ret = ret + string.byte(c) - 96\n  end\n\
    \  return ret\nend", "  local sum = 0\n  for i=1,#s do\n    if string.sub(s,i,i)\
    \ ~= string.sub(s,i,i) then -- not upper case\n      sum = sum + string.byte(s,i,i)\n\
    \    end\n  end\n  return sum\nend", "  -- your code here\n  return #s\nend",
  "  s = s:gsub(\"[^0-9]\", \"\")\n  return s:gsub(\"^%w+\", \"\"):gsub(\"%w+$\",\
    \ \"\"):gsub(\"^%w+\", \"0\")\nend", "   local sum = 0\n   for i = 1,#s do\n \
    \     sum = (sum + string.byte(s,i)) or (string.byte(s,i))\n   end\n   return\
    \ sum\nend", "   local sum = 0\n   for i=1,#s do\n      sum = (sum + string.sub(s,i,i))\
    \ + string.sub(s,i,i+1)\n   end\n   return sum\nend", "  -- Write your code here.\n\
    \  local sum = 0\n  for _, c in pairs(s) do\n    if math.abs(c - '0') > 9 then\n\
    \      sum = sum + math.abs(c - '0')\n    else\n      sum = sum + math.abs(c -\
    \ 'a')\n    end\n  end\n  return sum\nend", "   local sum = 0\n   for i=1,#s do\n\
    \      sum = tostring(sum) + tostring(string.sub(s,i,i))\n   end\n   return sum\n\
    end", "    local sum = 0\n    for i = 1, #s do\n        sum = sum + string.char(string.byte(s,\
    \ i))\n    end\n    return sum\nend", "  if s == nil then\n    return 0\n  end\n\
    \  local upperCase = 0\n  for char in string.gmatch(s, \"[^A-Z]+\") do\n    upperCase\
    \ = upperCase + #char\n  end\n  return upperCase\nend", "  -- TODO: Write your\
    \ code here\n  -- Your code here\n  return result\nend", "  -- write your code\
    \ in JavaScript (Node.js 8.9.4)\n  return 0\nend", "    local sum = 0\n    local\
    \ digits = s:gsub(\"%a+\", \"\")\n    for i = 1, #digits do\n        sum = sum\
    \ + tonumber(digits[i])\n    end\n    return sum\nend", "  local s = 0\n  for\
    \ i = 1, #s do\n    if string.sub(s,i,i) >= \"a\" and string.sub(s,i,i) <= \"\
    z\" then\n      s = s + string.sub(s,i,i)\n    end\n  end\n  return s\nend", "\t\
    -- Write your code here!\n\treturn 0\nend", "    return #s:gsub(\"([A-Z])\", function()\n\
    \        return tonumber(string.sub(_, 1, 1))\n    end)\nend", "  s = string.lower(s)\n\
    \  local sum = 0\n  for i = 1, #s do\n    sum = sum + string.byte(s,i)\n  end\n\
    \  return sum\nend", "\tlocal t = 0\n\tfor i = 1, #s do\n\t\tt = t + string.byte(string.sub(s,i,i))\n\
    \tend\n\treturn t\nend", "\ts = s:upper()\n\tlocal sum = 0\n\tfor i = 1, #s, 1\
    \ do\n\t\tsum = sum + tonumber(string.sub(s,i,i))\n\tend\n\treturn sum\nend",
  "   local sum = 0\n   for _, v in string.gmatch(s, \"[%a]+\") do\n      sum = sum\
    \ + string.char(v)\n   end\n   return sum\nend", "  local sum = 0\n  for i = 1,\
    \ #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n  end\n  return sum\nend",
  "  return string.gsub(string.gsub(s, '[^%s]', ''), \"%d+\", \"\")\nend", "    local\
    \ sum = 0\n    for i = 1, #s do\n        sum = sum + tonumber(string.sub(s,i,i))\n\
    \    end\n    return sum\nend", "  assert(s ~= nil, \"s is nil\")\n  assert(s:sub(1,1)\
    \ ~= nil, \"s is empty\")\n  assert(type(s) == \"string\", \"s is not a string\"\
    )\n  local sum = 0\n  for i = 1,#s do\n    -- Convert the character at the index\
    \ to a number\n    sum = sum + tostring(s:sub(i,i):byte())\n  end\n  return sum\n\
    end", "    return #s and math.add(#s:gsub(\"([A-Z]+)\", function(x)\n        return\
    \ string.char(x:upper()):byte()\n    end))\nend", "    local sum = 0\n    for\
    \ i = 1, #s do\n        sum = sum + tonumber(string.sub(s,i,i))\n    end\n   \
    \ return sum\nend", "  local sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,\
    \ i, i)) - tonumber(string.sub(s, i - 1, i - 1))\n  end\n  return sum\nend", " \
    \ -- Your code here\nend", "    return string.gsub(s, '([A-Z])', function(s) return\
    \ tonumber(s) or 0 end)\nend", "    local i = 0\n    local sum = 0\n    while\
    \ i < #s do\n        local c = string.sub(s,i,i)\n        if string.len(c) > 0\
    \ then sum = sum + string.byte(c) end\n        i = i + 1\n    end\n    return\
    \ sum\nend", "    -- TODO: Write your code here.\n    return 0\nend", "  -- assert(type(s)\
    \ == \"string\")\n  local n = 0\n  -- assert(s:len() > 0)\n  -- assert(s:len()\
    \ <= 65535)\n  for i = 1, #s do\n    n = n + tonumber(string.sub(s,i,i))\n  end\n\
    \  return n\nend", "  local sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n\
    \  end\n  return sum\nend", "  local s = 0\n  for i = 1, #s do\n    local c =\
    \ string.byte(s,i)\n    local sum = 48\n    if c >= 65 and c <= 90 then sum =\
    \ sum + c + 32\n    else if c >= 97 and c <= 122 then sum = sum + c - 64\n   \
    \ end -- ASCII\n    sum = sum + string.byte(s,i)\n    s = sum\n  end\n  return\
    \ s\nend", "  -- Split into an array of characters.\n  -- For each character in\
    \ the array, subtract the ascii code of the first character.\n  -- Add the ascii\
    \ code of the resulting array (sum of all characters).\n  -- This is what we return.\n\
    \  local digitSum = 0\n  for i = 1, #s do\n    digitSum = digitSum + (string.sub(s,i,i)\
    \ - 'a' + 10)\n  end\n  return digitSum\nend", "  -- Your code here\n  return\
    \ \nend", "  local s = string.gsub(s, \"^%s*\", \"\")\n  local total = 0\n  for\
    \ i = 1, #s do\n    total = total + (string.byte(string.sub(s, \"^\"..i..\"$\"\
    , \"\")) or 0)\n  end\n  return total\nend", "    local sum = 0\n    for i = 1,\
    \ #s do\n        if string.sub(s,i,i) > \"9\" then\n            sum = sum + string.sub(s,i,i)-48\n\
    \        end\n    end\n    return sum\nend", "    local sum = 0\n    for i = 1,\
    \ #s do\n        sum = sum + tonumber(string.sub(s,i,i))\n    end\n    return\
    \ sum\nend", "\t-- Write code here\n\tlocal sum = 0\n\tfor i=1,#s,1 do\n\t\tsum\
    \ = sum + string.byte(s,i)\n\tend\n\treturn sum\nend", "  -- Write your code here.\n\
    \  \nend", "  local ret = 0\n  for c in s:gmatch(\"%u%u\") do\n    ret = ret +\
    \ c\n  end\n  return ret\nend", "    local sum = 0\n    for i=1,#s,1 do\n    \
    \    sum = sum + tonumber(string.sub(s,i,i))\n    end\n    return sum\nend", " \
    \  local result = {}\n   for _,v in ipairs(s) do\n       local nv = tonumber(v)\n\
    \       if nv then\n           result[nv+1] = result[nv+1] or 0\n           result[nv+1]\
    \ = result[nv+1] + 96\n       end\n   end\n   return table.concat(result)\nend",
  "  local sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i)):byte()\n\
    \  end\n  return sum\nend", "  if s == nil then\n    return 0\n  end\n  local\
    \ sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i+1))\n\
    \  end\n  return sum\nend", "  local t = 0 -- total\n  for _,c in ipairs(s) do\
    \ t = t + math.abs(ord(c)) - ord('A') end\n  return t\nend", "\tlocal s = 0\n\t\
    for i = 1, #s, 1 do\n\t\ts = s + tostring(s:sub(i,i))\n\tend\n\treturn s\nend",
  "    local sum = 0\n    for i = 1, #s do\n        sum = sum + (string.char(string.byte(s,i))\
    \ - '0')\n    end\n    return sum\nend", "    local sum = 0\n    for i=1,#s do\n\
    \        sum = sum + string.sub(s,i,i+1) - (string.sub(s,i,i)=='A')*26\n    end\n\
    \    return sum\nend", "\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tlocal c = string.sub(s,i,i)\n\
    \t\tsum = sum + string.byte(c)\n\tend\n\treturn sum\nend", "    return #s + #s\
    \ .. 0\nend", "    local sum = 0\n    for i = 1, #s do\n        sum = sum + (string.byte(s[i],\
    \ 2) - 32)\n    end\n    return sum\nend", "   local sum = 0\n   for char in s:gmatch(\"\
    %a\") do\n      sum = sum + char\n   end\n   return sum\nend", "  local sum =\
    \ 0\n  for c in string.gmatch(s, \"%a+\") do\n    sum = sum + string.byte(c)\n\
    \  end\n  return sum\nend\nprint(digitSum(\"helloE\")) -- 69", "  local sum =\
    \ 0\n  for i = 1, #s, 1 do\n    sum = sum + tonumber(string.sub(s,i,i))\n  end\n\
    \  return sum\nend", "  -- TODO\nend", "  local sum = 0\n  for _, c in string.gmatch(s,\
    \ \"[%A]+\") do\n    sum = sum + string.byte(c)\n  end\n  return sum\nend", "\t\
    -- your code here\n\ts = s:upper()\n\tlocal sum = 0\n\tfor i, v in pairs(s) do\n\
    \t\tsum = sum + tonumber(v)\n\tend\n\treturn sum\nend", "  s = s:gsub(\"^%S+$\"\
    , \"\") -- remove leading whitespace\n  local c\n  local sum = 0\n  for i = 1,\
    \ #s do\n    c = string.byte(s:sub(i, i))\n    sum = sum + math.floor(c/26)\n\
    \  end\n  return sum\nend", "  -- Write your solution here\n  return nil\nend",
  "    local sum = 0\n    for i = 1, #s do\n        sum = sum + tonumber(string.sub(s,i,i)):byte()\n\
    \    end\n    return sum\nend", "  local sum = 0\n  for i = 1, #s do\n    sum\
    \ = sum + string.byte(s,i)\n  end\n  return sum\nend", "  -- base case\n  if #s\
    \ == '0' then\n    return 0\n  end\n  -- recurse\n  local n = 0\n  for i = 1,\
    \ #s do\n    n = n + tonumber(s:sub(i,i))\n  end\n  return n\nend", "    local\
    \ sum = 0\n    for char in s do\n        if char <= '9' and char ~= '_' then\n\
    \            sum = sum + char\n        end\n    end\n    return sum\nend", " \
    \   local sum = 0\n    for i=1,#s do\n        sum = sum + string.byte(s[i],1)\n\
    \    end\n    return sum\nend", "\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tsum\
    \ = (sum * 10) + tonumber(string.sub(s,i,i))\n\tend\n\treturn sum\nend", "  local\
    \ sum = 0\n  -- Get the first character (first character of the string)\n  local\
    \ firstChar = s[1]\n  -- Loop over the characters\n  for i = 2, #s do\n    --\
    \ Get the ASCII code of character at i\n    local currentChar = tonumber(s[i])\n\
    \    -- If the character is a digit, add its ASCII code to sum\n    if currentChar\
    \ > 47 and currentChar < 58 then\n      sum = sum + currentChar\n    end\n   \
    \ -- If the character is an uppercase letter, add its ASCII code to the sum\n\
    \    if currentChar > 64 and currentChar < 91 then\n      sum = sum + currentChar\n\
    \    end\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #s do\n  \
    \  sum = sum + string.byte(string.sub(s,i,i)) - 96\n  end\n  return sum\nend",
  "    local sum = 0\n    for letter in s:gmatch\"^%S\" do\n        sum = sum + math.floor(letter:byte()\
    \ + 64)\n    end\n    return sum\nend", "    local result = 0\n    for i,c in\
    \ pairs(s) do\n        local sum = string.byte(c) - (string.byte('0') - i)\n \
    \       result = result + sum\n    end\n    return result\nend", "  local result\
    \ = 0\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    local num =\
    \ tonumber(char)\n    if num ~= nil then\n      result = result + num\n    end\n\
    \  end\n  return result\nend", "  s = string.lower(s)\n  local sum = 0\n  for\
    \ i = 1, #s do\n    sum = sum + string.byte(s,i)\n  end\n  return sum\nend", "\t\
    local sum = 0\n\ts:gsub(\"[^%z0-9]\", \"\")\n\tfor i = 1, #s do\n\t\tsum = sum\
    \ + tonumber(s[i])\n\tend\n\treturn sum\nend", "  local sum = 0\n  for i = 1,\
    \ #s, 1 do\n    sum = sum + string.sub(s,i,i) + string.sub(s,i+1,i+1)\n  end\n\
    \  return sum\nend", "  s = string.gsub(s, \"[A-Z]\", \"\")\n  return string.gsub(s,\
    \ \"^%s*(%d%d?%d?%d?%d?%d?%d?%d?%d?%d?%d?%d?%d?%d?)\", \n    function(digits)\n\
    \      return tonumber(digits)\n    end\n  ) or 0\nend", "   local sum = 0\n \
    \  for i = 1, #s do\n      sum = sum + tonumber(string.sub(s,i,i))\n   end\n \
    \  return sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
