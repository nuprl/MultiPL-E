name: HumanEval_61_correct_bracketing
language: lua
results:
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"(%b)(%b)\", function(c1,c2)\n\
    \    return c1:len() == 1 and c1:sub(1,1) == \"(\" and c2:len() == 1 and c2:sub(1,1)\
    \ == \")\"\n  end)\n  return brackets:len() == 1 and brackets:sub(1,1) == \"(\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuyu6lcd1.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuyu6lcd1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"[(%w)]+\"\
    , \"\"):gsub(\"%w+\", \"\"):gsub(\"%w\", \"\")\n  local closed_brackets = brackets:gsub(\"\
    [(%w)]+\", \"\")\n  local open_count = open_brackets:len()\n  local closed_count\
    \ = closed_brackets:len()\n  if open_count ~= closed_count then\n    return false\n\
    \  end\n  -- Check for balanced parens.\n  for i = 1, open_count do\n    local\
    \ open_char = open_brackets:sub(i, 1)\n    if open_char:sub(1, 1) ~= close_char\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ez72hpd.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0ez72hpd.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"()\", \"\")\n  return\
    \ brackets:sub(1, 1):find(\")\") == nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0z5rdxp.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw0z5rdxp.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal opening, brackets = brackets:gsub(\"%([()])\"\
    , \"%%%1\"):gsub(\"%([()]*)(%%)\", \"%%%1%%\"):gsub(\"%([()]*)(%%)\", \"%%%1%%\"\
    ):gsub(\"%([()]*)(%%)\", \"%%%1%%\")\n\tlocal closing, brackets = brackets:gsub(\"\
    %([)]\"), \"%%%1\"):gsub(\"%([)]*)(%%)\", \"%%%1%%\"):gsub(\"%([)]*)(%%)\", \"\
    %%%1%%\"):gsub(\"%([)]*)(%%)\", \"%%%1%%\")\n\treturn opening:sub(1, 1) == closing:sub(1,\
    \ 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3rdsxh8_.lua:13: unexpected symbol near ')'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[()\"]\", \"\")\n\
    \  return brackets:match(\"^[()]*$\") == brackets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7iplpnjk.lua:12: ')' expected near ']'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   local opening_brackets = brackets:gsub(\"[()]\"\
    , \"\"):gsub(\"{()}\", \"\"):gsub(\"{{}}\", \"\"):gsub(\"{}}\", \"\"):gsub(\"\
    {}\", \"\"):gsub(\"()\", \"\"):gsub(\"{}\", \"\")\n   for i = 1, #opening_brackets\
    \ do\n      local opening = opening_brackets:sub(i, i)\n      if opening:sub(1,\
    \ 1) ~= opening:sub(#opening - 1, #opening - 1) then\n         return false\n\
    \      end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73d1tw2r.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp73d1tw2r.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   local stack = {}\n   for i = 1, #brackets do\n\
    \      local c = brackets[i]\n      if c == '(' or c == '[' then\n         table.insert(stack,\
    \ 1)\n      elseif c == ')' or c == ']' then\n         if stack[#stack] == 1 then\n\
    \            stack[#stack] = nil\n         else\n            table.insert(stack,\
    \ 0)\n         end\n      else\n         return false\n      end\n   end\n   if\
    \ #stack > 0 then\n      return false\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipyiijp2.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpipyiijp2.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal open_brackets = brackets:gsub(\"^%w+%w\"\
    , \"\"):gsub(\"%w+%w+\", \"\")\n\tlocal closed_brackets = brackets:gsub(\"%w+%w\"\
    , \"%w%w\"):gsub(\"%w+\", \"%w\")\n\tlocal num_open_brackets = #open_brackets\n\
    \tlocal num_closed_brackets = #closed_brackets\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgo22p2dc.lua:34: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets == \"\" or brackets ~= brackets\
    \ then return false end\n  local opening, closing = brackets:find('%[(%['), brackets:find('%[%]')\n\
    \  if opening == -1 or closing == -1 then return false end\n  local opening =\
    \ brackets:find(opening)\n  if opening == -1 then return false end\n  local closing\
    \ = brackets:find(closing)\n  if closing == -1 then return false end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp21vipfn2.lua:15:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp21vipfn2.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp21vipfn2.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   brackets = brackets:gsub(\"(%b()%b)\", \"%b()\"\
    )\n   brackets = brackets:gsub(\"(%b()%b()%b)\", \"%b()\")\n   brackets = brackets:gsub(\"\
    (%b()%b()%b()%b)\", \"%b()\")\n   brackets = brackets:gsub(\"(%b()%b()%b()%b()%b)\"\
    , \"%b()\")\n   brackets = brackets:gsub(\"(%b()%b()%b()%b()%b()%b)\", \"%b()\"\
    )\n   return brackets:sub(1, 1) == \"()\" \nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpehjd977z.lua:12:\
    \ malformed pattern (missing arguments to '%b')\nstack traceback:\n\t/tmp/tmpehjd977z.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpehjd977z.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_count\n  local opening_brackets\n\
    \  local closing_count\n  local closing_brackets\n  for opening_count, opening_brackets\
    \ in string.gmatch(brackets, \"([^()]+)(.*)\") do\n    local opening_bracket =\
    \ opening_brackets\n    local closing_count = opening_count + 1\n    local closing_brackets\
    \ = \"\"\n    while closing_count < opening_count and opening_bracket ~= \"\"\
    \ and opening_bracket:sub(1, 1) ~= \")\" do\n      closing_count = closing_count\
    \ + 1\n      closing_brackets = closing_brackets .. opening_bracket:sub(1, 1)\n\
    \      opening_bracket = opening_bracket:sub(2)\n    end\n    if closing_count\
    \ < opening_count then\n      return false\n    end\n    if opening_bracket:sub(1,\
    \ 1) ~= \"(\" then\n      return false\n    end\n    local closing_symbol = closing_brackets\n\
    \    if closing_symbol:sub(1, 1) ~= \")\" then\n      closing_symbol = closing_symbol\
    \ .. \")\"\n    end\n    if opening_bracket:len() ~= opening_count + 1 or opening_bracket:sub(1,\
    \ 1) ~= closing_symbol then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc2w6r1n.lua:49:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnc2w6r1n.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening = brackets:sub(1,1)\n    local\
    \ closing = brackets:sub(2)\n    if opening ~= opening or closing ~= closing then\n\
    \        return false\n    end\n    local new_brackets = brackets:gsub(\"%S+\"\
    , function (str)\n        return str:sub(1,1)\n    end)\n    if new_brackets ~=\
    \ brackets then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3y2_oan9.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3y2_oan9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i, s in pairs(brackets) do\n    if string.sub(s,\
    \ 1, 1) == \"(\" then\n      return string.sub(s, 1, 1) == \")\" and (i+1) ==\
    \ #brackets\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoijw0ndi.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpoijw0ndi.lua:12: in local 'candidate'\n\t/tmp/tmpoijw0ndi.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening, closing = brackets:gsub(\"^[()]+\"\
    , \"\"), brackets:gsub(\"[)]+$\", \"\")\n  return not (opening:find(closing) or\
    \ closing:find(opening))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5o8rl823.lua:13:\
    \ unfinished capture\nstack traceback:\n\t/tmp/tmp5o8rl823.lua:13: in local 'candidate'\n\
    \t/tmp/tmp5o8rl823.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets or \"\"\n    local open_brackets\
    \ = \"\"\n    local close_brackets = \"\"\n    for i = 1, #brackets do\n     \
    \   if brackets[i] == \"(\" then\n            open_brackets = open_brackets ..\
    \ brackets[i]\n        elseif brackets[i] == \")\" then\n            close_brackets\
    \ = close_brackets .. brackets[i]\n        elseif brackets[i] == \",\" then\n\
    \            if open_brackets ~= \"\" then\n                close_brackets = close_brackets\
    \ .. \",\"\n            end\n        else\n            return false\n        end\n\
    \    end\n    open_brackets = open_brackets:sub(1, #open_brackets)\n    close_brackets\
    \ = close_brackets:sub(1, #close_brackets)\n    return open_brackets == close_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjeye1eh.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxjeye1eh.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets:sub(1,1) == \"(\" then\n     \
    \   return correct_bracketing(brackets)\n    end\n    if brackets:sub(1,1) ~=\
    \ \")\" then\n        return false\n    end\n    return correct_bracketing(brackets:sub(2))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tbrackets = brackets:gsub(\"^%[(%+%?)(%-)(]\"\
    , \"%%%1\")\n\tbrackets = brackets:gsub(\"%[(%+%?)(%-)(]\", \"%1\")\n\tbrackets\
    \ = brackets:gsub(\"%[)(%+%?)(%-)(%]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %[)(%+%?)(%-)%]\", \"%1\")\n\tbrackets = brackets:gsub(\"%[)(%+%?)(%-)%]\", \"\
    %1\")\n\tbrackets = brackets:gsub(\"%[)(%+%?)(%-)]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %[)(%+%?)(%-)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%[)(%+%?)(%)]\", \"%1\"\
    )\n\tbrackets = brackets:gsub(\"%[)(%+%?)(%)]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %[)(%+%?)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%[)(%+%?)]\", \"%1\")\n\t\
    brackets = brackets:gsub(\"%[)(%+)]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %[)(%+)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%[)(%)]\", \"%1\")\n\tbrackets\
    \ = brackets:gsub(\"%[)(%)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%[)]\", \"\
    %1\")\n\tbrackets = brackets:gsub(\"%[)]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%)]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%)]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%)]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%)]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %)]\", \"%1\")\n\tbrackets = brackets:gsub(\"%)]\", \"%1\")\n\tbrackets = brackets:gsub(\"\
    %)]\", \"%1\")\n\tbrackets = brackets:gsub\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxsfvi1kz.lua:41: function arguments expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opens = true\n  local closes = true\n\
    \  for i = 1, #brackets do\n    local c = brackets[i]\n    if c == \"(\" then\n\
    \      if not opens then\n        return false\n      end\n      opens = false\n\
    \    elseif c == \")\" then\n      if not closes then\n        return false\n\
    \      end\n      closes = false\n    else\n      if opens or closes then\n  \
    \      return false\n      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h19y0lo.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4h19y0lo.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets:sub(1,1) ~= brackets:sub(#brackets,1)\
    \ then\n    return false\n  end\n  local i = 0\n  while i < #brackets and brackets[i]:sub(#brackets,1)\
    \ ~= brackets[i+1]:sub(#brackets,1) do\n    i = i + 1\n  end\n  if i == #brackets\
    \ then\n    return true\n  elseif i == #brackets-1 then\n    return correct_bracketing(brackets[i+1])\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qusd3nl.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4qusd3nl.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   return brackets == string.gsub(brackets, \"\
    ([^()]+)(\\()\", \"%1(%2)\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgc6ia_e8.lua:12: invalid escape sequence near '\"([^()]+)(\\\
    ('\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"()\", \"\"):gsub(\"\
    ^\\\\)?\\\\(([^)]*)\\\\)$\", \"$1\")\n  for i = 1, #brackets do\n    if brackets[i]\
    \ != brackets[#brackets] then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3emvd8cs.lua:14: 'then' expected near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for idx = 1, #brackets do\n    local opening\
    \ = brackets[idx:idx:len()]\n    local closing = brackets[idx+1:idx+2:len()]\n\
    \    if opening ~= closing then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpffcglfz8.lua:13: function arguments expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets .. \" \"\n  local open_count,\
    \ close_count = 1, 0\n  local i = 1, #brackets\n  while i < #brackets do\n   \
    \ if brackets[i] == \"(\" then\n      open_count = open_count + 1\n    elseif\
    \ brackets[i] == \")\" then\n      close_count = close_count + 1\n    end\n  \
    \  i = i + 1\n  end\n  local open_brackets = open_count > close_count\n  -- if\
    \ the number of open brackets is greater than the number of close brackets,\n\
    \  -- then the brackets are correct\n  return open_brackets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpblo1sh5_.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpblo1sh5_.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\t-- If brackets is empty, return True.\n\tif\
    \ brackets == \"\" then return True end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpib1pottg.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets == \"()\" or brackets == \"\
    []\" or\n         (brackets == \"()\" and brackets:sub(1, 1)) == \"[\" or\n  \
    \       (brackets == \"()\" and brackets:sub(2, 2)) == \"{\" or\n         (brackets\
    \ == \"[]\" and brackets:sub(1, 1)) == \"{\" or\n         (brackets == \"[]\"\
    \ and brackets:sub(2, 2)) == \"(\" or\n         brackets == \")(\"\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkalzifw7.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkalzifw7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[()%[(%)]]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[()%[)]]\", \"\")\n  return\
    \ opening_brackets == closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30s4k590.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp30s4k590.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[^()]+\", function\
    \ (x)\n    if x == \"(\" then\n      return \")\"\n    elseif x == \"[\" then\n\
    \      return \"]\"\n    elseif x == \"{\" then\n      return \"}\"\n    else\n\
    \      return x\n    end\n  end)\n  return brackets:sub(1, 1) == \"(\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kv2gfsn.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2kv2gfsn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local brackets = brackets or \"\"\n  for _,\
    \ opening_bracket in string.gmatch(brackets, \"()\") do\n    local closing_bracket\
    \ = brackets[string.len(brackets) - 1]\n    if closing_bracket ~= opening_bracket\
    \ then\n      return false\n    end\n    brackets = brackets[string.len(brackets)\
    \ - 2:]\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc5dxm_d1.lua:18: ']' expected near ':'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets == \"\" then return true end\n \
    \ for i = 1, #brackets do\n    if brackets[i+1] ~= brackets[i] then return false\
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3kzt6cg.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi3kzt6cg.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local openings = string.gsub(brackets, \"\\\\\
    (\", \"\\\\2(\")\n  local closings = string.gsub(brackets, \"\\\\)\", \"\\\\1\\\
    \\2\")\n  return openings:len() == closings:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg56cr_uc.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg56cr_uc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   if #brackets == 1 then\n      return brackets[1]\
    \ == brackets[#brackets] -- first and last brackets are the same\n   else\n  \
    \    for i = 1, #brackets do\n         if brackets[i] == '(' and brackets[i -\
    \ 1] ~= '(' then\n            return false\n         end\n         if brackets[i]\
    \ == '[' and brackets[i - 1] ~= ']' then\n            return false\n         end\n\
    \         if brackets[i] == ']' and brackets[i - 1] == '[' then\n            return\
    \ false\n         end\n      end\n      return true\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkxow4kp.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgkxow4kp.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   if not brackets or brackets ~= brackets then\n\
    \      return false\n   end\n   local opening_brackets = brackets:sub(1, 1)\n\
    \   local closing_brackets = brackets:sub(2)\n   return opening_brackets == \"\
    (\" and closing_brackets == \")\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknxyvzh9.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpknxyvzh9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets:gsub(\"^[()]*\", \"\"\
    ):gsub(\"[)]*$\", \"\"):gsub(\"^()*\", \"\"):gsub(\"()*$\", \"\")\n    return\
    \ brackets:sub(1, 1):sub(1, 1) ~= brackets:sub(3, 3):sub(1, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyinfv75z.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyinfv75z.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = {}\n  for char in brackets:gmatch(\"\
    [()%-]\") do\n    opening_brackets[char] = true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdcyjs1yj.lua:34: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = false\n  for char in brackets\
    \ do\n    if char == \"(\" then\n      opening = not opening\n    end\n  end\n\
    \  return not opening\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmmc0sgce.lua:13:\
    \ attempt to call a string value\nstack traceback:\n\t/tmp/tmpmmc0sgce.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmmc0sgce.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local i = 1\n    while i <= #brackets do\n\
    \        if brackets[i + 1] ~= brackets[i] then\n            return false\n  \
    \      end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazjjpm6x.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpazjjpm6x.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[(%[(%[]%)]*)]\"\
    , \"\"):gsub(\"%[%)]\", \"\"):gsub(\"%[(%)%]\", \"\")\n  if brackets ~= \"\" then\n\
    \    if brackets[1] == brackets[#brackets] then\n      -- the brackets match,\
    \ so the string is syntactically correct.\n      return true\n    else\n     \
    \ -- wrong number of brackets.\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6trtktna.lua:12:\
    \ invalid pattern capture\nstack traceback:\n\t/tmp/tmp6trtktna.lua:12: in local\
    \ 'candidate'\n\t/tmp/tmp6trtktna.lua:28: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening, closing = brackets:match(\"^[(%a]+$\"\
    )\n  assert(opening ~= nil, \"brackets must be a string\")\n  assert(closing ~=\
    \ nil, \"brackets must be a string\")\n  assert(opening == \"(\" and closing ==\
    \ \")\", \"brackets must be a string\")\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpam87a5g8.lua:13:\
    \ brackets must be a string\nstack traceback:\n\t/tmp/tmpam87a5g8.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmpam87a5g8.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\treturn brackets == brackets or brackets == \"\
    ()\" or\n\t\t(brackets == \"[\" and brackets ~= brackets and brackets ~= brackets\
    \ .. \"]\" and\n\t\tbrackets ~= brackets .. \"][]\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gyijk5o.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1gyijk5o.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   local stack = {}\n   local result = true\n\
    \   for i = 1, #brackets do\n      local char = brackets[i]\n      if char ==\
    \ \"(\" then\n         table.insert(stack, char)\n      elseif char == \")\" then\n\
    \         if stack[#stack] == char then\n            stack[#stack] = nil\n   \
    \      else\n            result = false\n         end\n      elseif char == \"\
    ,\" then\n         if stack[#stack] == nil then\n            result = false\n\
    \         elseif stack[#stack] == char then\n            stack[#stack] = nil\n\
    \         else\n            result = false\n         end\n      else\n       \
    \  result = false\n      end\n   end\n   return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb5j9rh6.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqb5j9rh6.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- Find out if the brackets string only contains\
    \ brackets.\n  if brackets == \"\" then\n    return true\n  end\n  -- Find out\
    \ if the brackets string contains brackets and opening brackets.\n  local open_brackets\
    \ = brackets:find(\"()\")\n  if open_brackets == 0 then\n    -- Find out if the\
    \ brackets string contains brackets and closing brackets.\n    local closing_brackets\
    \ = brackets:find(\")\")\n    -- If there are no closing brackets in the brackets\
    \ string then this string only contains opening brackets.\n    return closing_brackets\
    \ == 0\n  else\n    -- If there are brackets in the brackets string then there\
    \ are multiple opening brackets.\n    return true\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5pf5ruw.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx5pf5ruw.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opens = brackets:gsub(\"(%b+)\", function(a)\n\
    \        return a:reverse()\n    end)\n    local closes = brackets:gsub(\"(%b+)\"\
    , function(a)\n        return a:reverse()\n    end)\n    for i=1,#opens do\n \
    \       if opens[i-1] == closes[i] then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ymrcs10.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2ymrcs10.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets:gsub(\"(\", \"($1\")\n\
    \    brackets = brackets:gsub(\")\", \"($1)\")\n    return brackets ~= brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi25p2ma9.lua:13:\
    \ invalid pattern capture\nstack traceback:\n\t/tmp/tmpi25p2ma9.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmpi25p2ma9.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    return brackets ~= \"\" and\n        (brackets:find(\"\
    (\") == brackets:find(brackets:reverse(\")\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp67o8eppb.lua:14: ')' expected (to close '(' at line 13) near\
    \ 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local brackets = brackets == \"()\" .. brackets\
    \ or brackets == \"[]\" .. brackets\n  local opening = brackets:sub(1,1)\n  local\
    \ closing = brackets:sub(end,1)\n  return opening ~= closing or opening\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyj5phxlz.lua:14: unexpected symbol near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets:gsub(\"%w+\", function\
    \ (string)\n        local open_count = string:gsub(\"^%s*\", \"\"):gsub(\"%s*$\"\
    , \"\"):gsub(\"^%s*(%W)\", \"\"):gsub(\"(%W)*$\", \"\")\n        if open_count\
    \ ~= \"\" then return open_count == \"(\" end\n        open_count = string:gsub(\"\
    ^(%W)*\", \"\"):gsub(\"(%W)*$\", \"\")\n        if open_count ~= \"\" then return\
    \ open_count == \"(\" end\n        return false\n    end)\n    return brackets\
    \ ~= \"\" and brackets:sub(1, #brackets) == brackets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxva0fvt6.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxva0fvt6.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- Split brackets string into an array of\
    \ \"(\" and \")\".\n    local opening_brackets = brackets:gsub(\"[()]\", \"\"\
    )\n    for i = 1, #opening_brackets do\n        if opening_brackets[i] != opening_brackets[i+1]\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjmd2v9tq.lua:15: 'then' expected near '!'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:sub(1, #brackets):gsub(\"%[(%)][(%)]\"\
    , function(s)\n    local opening = s:sub(1, 1)\n    local closing = s:sub(2, 1)\n\
    \    return brackets ~= opening .. closing ~= opening .. \"()\"\n  end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetapbqxs.lua:22:\
    \ expected: true, actual: \"()\"\nstack traceback:\n\t/tmp/tmpetapbqxs.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_bracket = brackets:sub(1, 1)\n\
    \  local closing_bracket = brackets:sub(2, 1)\n  return opening_bracket..closing_bracket\
    \ ~= \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmasgwl6.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptmasgwl6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   brackets = brackets:gsub(\"[()]+\", \" \")\n\
    \   return brackets ~= \"\" and brackets:find(brackets+1, true) ~= nil end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpusqpreck.lua:14: <eof> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"^%[()%](%[()%])*$\"\
    , \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%[()%]\", \"\")\n  brackets = brackets:gsub(\"\
    %[()%]\", \"\")\n  brackets = brackets:gsub(\"%\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp27c3ga28.lua:45: unfinished string near '\"%'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for i = 1, #brackets do\n\
    \    stack[i] = {}\n    stack[i][1] = brackets[i]\n    stack[i][2] = brackets[i]\n\
    \  end\n  while true do\n    local top = stack[1][1]\n    local bottom = stack[1][2]\n\
    \    if top == \"\" then\n      stack[1] = stack[2]\n      stack[2] = nil\n  \
    \  else\n      if top == \")\" then\n        if stack[1][1] == \"(\" then\n  \
    \        stack[1] = nil\n          stack[2] = stack[3]\n          stack[3] = nil\n\
    \        else\n          stack[1] = stack[2]\n          stack[2] = nil\n     \
    \   end\n      elseif top == \"(\" then\n        if stack[1][1] == \"(\" then\n\
    \          stack[1] = nil\n          stack[2] = stack[3]\n          stack[3] =\
    \ nil\n        else\n          stack[1][#stack[1] + 1] = top\n          stack[1]\
    \ = stack[2]\n          stack[2] = nil\n          stack[3] = nil\n        end\n\
    \      else\n        if stack[1][1] == \"\" then\n          stack[1][1] = top\n\
    \          stack[1][2] = bottom\n          stack[1] = stack[2]\n          stack[2]\
    \ = nil\n          stack[3] = nil\n        elseif bottom == \"\" then\n      \
    \    stack[1][#stack[1] + 1] = top\n          stack[1] = stack[2]\n          stack[2]\
    \ = nil\n          stack[3] = nil\n        elseif top ~= \")\" and top ~= \")()\"\
    \ and top ~= \")()()\" then\n          stack[1][#stack[1] + 1] = top\n       \
    \   stack[1] = stack[2]\n          stack[2] = nil\n          stack[3] = nil\n\
    \        else\n          stack[1][#stack[1] + 1] = top\n          stack[1] = stack[3]\n\
    \          stack[3] = nil\n        end\n      end\n    end\n    local ok = true\n\
    \    for i = 1, #stack do\n      if not stack[i] then\n        ok = false\n  \
    \      break\n      end\n    end\n    if not ok then\n      return false\n   \
    \ end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpffiyis54.lua:19:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpffiyis54.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpffiyis54.lua:85: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    return brackets:gsub(\"^([(])(.*)$\", function(parens,\
    \ left, right)\n        return parens:find(right) == nil\n    end)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg6bu3h9y.lua:13:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpg6bu3h9y.lua:13:\
    \ in function </tmp/tmpg6bu3h9y.lua:12>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpg6bu3h9y.lua:12: in local 'candidate'\n\t/tmp/tmpg6bu3h9y.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal opening = {}\n\tfor _, b in ipairs(brackets)\
    \ do\n\t\topening[b] = true\n\tend\n\tlocal closing = {}\n\tfor b, o in pairs(opening)\
    \ do\n\t\tif b == \"(\" then\n\t\t\tclosing[b] = o\n\t\tend\n\tend\n\t-- test\
    \ if every opening bracket has a corresponding closing bracket\n\tfor _, o in\
    \ pairs(opening) do\n\t\tif not closing[o] then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn552_lzb.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn552_lzb.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- If there are no brackets, it's fine.\n  --\
    \ Brackets is \"\" by default.\n  if #brackets == 0 then return true end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpepu2o_bg.lua:33: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    return brackets:match(\"%S+\") ~= nil and\
    \ brackets:sub(1, 1) ~= brackets:sub(2) \nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=lua-patterns,lua |>\nI thought I'd contribute something more robust than\
    \ the other answers proposed. These are the functions I wrote based on this SO\
    \ answer. I didn't want to use Lua's internal string parsing functions to accomplish\
    \ my goals.\nThe functions I wrote:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpad3wyrt7.lua:14: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets and #brackets == #(brackets):len()\
    \ and\n    brackets:sub(1, #brackets)\n      and brackets:sub(1, #brackets):gsub(\"\
    [()]+\", brackets)\n      and brackets:sub(1, #brackets):gsub(\"[^()]+\", \"\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7xx9eku1.lua:12:\
    \ attempt to get length of a number value\nstack traceback:\n\t/tmp/tmp7xx9eku1.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp7xx9eku1.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local openings = brackets:gsub(\"^%[(%[%[(%[(%[\"\
    , \"\")\n  local closings = brackets:gsub(\"%]%]%]%]%]\", \"\")\n  return openings:len()\
    \ == closings:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtptlcz2.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphtptlcz2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i, j in pairs(brackets) do\n    if i ~=\
    \ j then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7ne4045.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpb7ne4045.lua:12: in local 'candidate'\n\t/tmp/tmpb7ne4045.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[()]+\"\
    , \"(.-)\")\n  local closing_brackets = opening_brackets:gsub(\"(.-)(?!$)\", \"\
    (.)\")\n  return opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1uz7msfk.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1uz7msfk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal opening = brackets:match(\"^%[(%w+)\\\\\
    )%]$\")\n\tlocal closing = brackets:match(\"^%[%w%](%w+)$\")\n\treturn not opening:find(closing)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptxcq9ub6.lua:14:\
    \ attempt to index a nil value (local 'opening')\nstack traceback:\n\t/tmp/tmptxcq9ub6.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmptxcq9ub6.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   local open_count = 0\n   local close_count\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvu9ri0ka.lua:32: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- check for a stray bracket at the end of\
    \ the string\n    if not brackets:match(\"%s*\") then\n        return false\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv_e_hhlk.lua:34: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   return brackets and brackets:match(\"^%[(%)]*$\"\
    ) ~= nil and\n      brackets:match(\"^(%[(%)]*%[(%)]*%[)]*)$\") ~= nil and\n \
    \     brackets:match(\"^(%[(%)]*%[(%)]*)%[(%)]*%[)]*)$\") ~= nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmc1bl306.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmc1bl306.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\treturn brackets:find(brackets) ~= nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1tvweao3.lua:12:\
    \ invalid pattern capture\nstack traceback:\n\t/tmp/tmp1tvweao3.lua:12: in local\
    \ 'candidate'\n\t/tmp/tmp1tvweao3.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      if brackets[i]\
    \ == \"(\" then\n         for j = 1, #brackets do\n            if brackets[j]\
    \ == \")\" then\n               return false\n            else\n             \
    \  return true\n            end\n         end\n      end\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpct7_r_qm.lua:28:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpct7_r_qm.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets ~= \"\" then\n    for i = 1, #brackets\
    \ do\n      if brackets[i] == \"(\" then\n        brackets[i] = \")\"\n      elseif\
    \ brackets[i] == \")\" then\n        brackets[i] = \"(\"\n      end\n    end\n\
    \    return brackets == \"\"\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqpdbioc.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppqpdbioc.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i=1, #brackets do\n      if brackets[i]\
    \ ~= '(' and brackets[i] ~= ')' then\n         return false\n      end\n   end\n\
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpny985i8n.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpny985i8n.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- assert brackets ~= '()', 'Brackets are\
    \ supposed to be \"()\".'\n    -- assert brackets ~= '[]', 'Brackets are supposed\
    \ to be \"[]\".'\n    -- assert brackets ~= '{}', 'Brackets are supposed to be\
    \ \"{}\".'\n    return brackets:sub(1, 1) == '(' and brackets:sub(brackets:len()-1,\
    \ 1) == ')'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7uywogd.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj7uywogd.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- Return true if brackets is an expression\
    \ that is enclosed by brackets.\n  -- >>> correct_bracketing(\"(foo\")\n  -- False\n\
    \  -- >>> correct_bracketing(\"(foo)\")\n  -- True\n  -- >>> correct_bracketing(\"\
    foo)\")\n  -- False\n  -- >>> correct_bracketing(\"foo())\")\n  -- True\n  --\
    \ >>> correct_bracketing(\"foo()\")\n  -- False\n  -- >>> correct_bracketing(\"\
    foo()())\")\n  -- True\n  -- >>> correct_bracketing(\"foo()())\")\n  -- True\n\
    \  -- >>> correct_bracketing(\"(foo))\")\n  -- False\n  -- >>> correct_bracketing(\"\
    (foo)))\")\n  -- True\n  -- >>> correct_bracketing(\"(foo))))))\")\n  -- True\n\
    \  -- >>> correct_bracketing(\"(foo))\"))\n  -- False\n  -- >>> correct_bracketing(\"\
    (foo\"))\n  -- False\n  -- >>> correct_bracketing(\"foo)\")\n  -- False\n  --\
    \ >>> correct_bracketing(\"foo)\"))\n  -- False\n  -- >>> correct_bracketing(\"\
    foo)\"))\n  -- False\n  -- >>> correct_bracketing(\"(\")\n  -- False\n  -- >>>\
    \ correct_bracketing(\"))\")\n  -- False\n  -- >>> correct_bracketing(\"))(\"\
    )\n  -- False\n  -- >>> correct_bracketing(\"))))\")\n  -- False\n  -- >>> correct_bracketing(\"\
    )))))\")\n  -- False\n  -- >>> correct_bracketing(\"()))\")\n  -- False\n  --\
    \ >>> correct_bracketing(\"()))(\")\n  -- False\n  -- >>> correct_bracketing(\"\
    ()))))\")\n  -- False\n  -- >>> correct_bracketing(\"()))))(\")\n  -- False\n\
    \  -- >>> correct_bracketing(\"())((\")\n  -- False\n  -- >>> correct_bracketing(\"\
    ())(()\")\n  -- False\n  -- >>> correct_bracketing(\"(()))\")\n  -- False\n  --\
    \ >>> correct_bracketing(\"(()))(\")\n  -- False\n  -- >>> correct_bracketing(\"\
    (()))))\")\n  -- False\n  -- >>> correct_bracketing(\"(()))))(\")\n  -- False\n\
    \  -- >>> correct_bracketing(\"(()))(()\")\n  -- False\n  -- >>> correct_bracketing(\"\
    (()())\")\n  -- False\n  -- >>> correct_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp10bxom8p.lua:96: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets or \"\"\n  return #brackets\
    \ > 0 and #brackets == #(brackets) * 2 and \"(\" == brackets[1] and \")\" == brackets[#brackets]\
    \ and\n         #brackets == #(brackets) * 2 and \"(\" == brackets[#brackets]\
    \ and\n         #brackets == #(brackets) * 2 and \"(\" == brackets[#brackets]\
    \ and\n         #brackets == #(brackets) * 2 and \"(\" == brackets[#brackets]\
    \ and\n         #brackets == #(brackets) * 2 and \"(\" == brackets[#brackets]\
    \ and\n         #brackets == #(brackets) * 2 and \"(\" == brackets[#brackets]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnt4q8ld.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqnt4q8ld.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets:len() ~= 1 then\n    return false\n\
    \  end\n  for i = 1, brackets:len() do\n    if brackets:sub(i,i) ~= brackets:sub(i,i\
    \ + 1) then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmd8_ccq.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbmd8_ccq.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  for i, v in ipairs(brackets)\
    \ do\n    if v == \"(\" then\n      table.insert(stack, v)\n    elseif v == \"\
    )\" then\n      if #stack == 1 then\n        return true\n      else\n       \
    \ table.remove(stack, 1)\n      end\n    end\n  end\n  return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpyg9k3o.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbpyg9k3o.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:find(\"%l\")\n  local\
    \ closing = brackets:find(\"%l\", opening+1)\n  local opening_closed = false\n\
    \  if opening ~= nil and closing ~= nil then\n    local next_opening = brackets:find(\"\
    %l\", closing+2)\n    if next_opening ~= nil then\n      if next_opening < opening\
    \ then\n        opening_closed = true\n        opening = nil\n      else\n   \
    \     closing = next_opening\n      end\n    end\n  end\n  if opening ~= nil then\n\
    \    if opening > opening then closing = opening end\n    brackets = brackets:gsub(\"\
    %l\", \")\")\n  else\n    brackets = brackets:gsub(\"%l\", \"(\")\n  end\n  if\
    \ opening_closed then\n    brackets = brackets:gsub(\"%l\", \"(\")\n  end\n  return\
    \ brackets == \"()\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7t70bit8.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'opening')\nstack traceback:\n\
    \t/tmp/tmp7t70bit8.lua:13: in local 'candidate'\n\t/tmp/tmp7t70bit8.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"%[(%)([%)])\", \"\
    \\1\\2\\3\")\n  return brackets:gsub(\"%[(%)]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0xj3reo.lua:19:\
    \ expected: true, actual: \"()\"\nstack traceback:\n\t/tmp/tmpn0xj3reo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal opening = {}\n\tlocal closing = {}\n\t\
    local open = 0\n\tlocal i = 0\n\t\n\twhile i <= #brackets do\n\t\tlocal char =\
    \ brackets[i]:sub(1, 1)\n\t\t\n\t\tif open == 0 then\n\t\t\tif char == '(' then\n\
    \t\t\t\topening[#opening+1] = true\n\t\t\tend\n\t\t\t\n\t\t\tif char == ')' then\n\
    \t\t\t\topening[#opening] = true\n\t\t\tend\n\t\t\t\n\t\t\topen = #opening\n\t\
    \telseif open == #opening then\n\t\t\tif char == '(' then\n\t\t\t\topening[#opening+1]\
    \ = true\n\t\t\tend\n\t\t\t\n\t\t\tif char == ')' then\n\t\t\t\topening[#opening]\
    \ = true\n\t\t\tend\n\t\t\t\n\t\t\topen = 0\n\t\telse\n\t\t\topening[open] = true\n\
    \t\t\topen = open + 1\n\t\tend\n\t\t\n\t\ti = i + 1\n\tend\n\t\n\tlocal ok = true\n\
    \t\n\tfor i = 1, #opening do\n\t\tif not opening[i] then\n\t\t\tok = false\n\t\
    \tend\n\tend\n\t\n\treturn ok\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqjszx0kl.lua:18:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpqjszx0kl.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpqjszx0kl.lua:62: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   -- If brackets is null, return the boolean\
    \ true.\n   if brackets == nil then\n      return true\n   end\n   -- If brackets\
    \ contains only \"(\" and \")\", then return true.\n   if #brackets == 2 and brackets\
    \ == \"(\" and brackets == \")\" then\n      return true\n   end\n   -- If brackets\
    \ contains \"[\", \"]\", \"<\", \">\", \"{\", \"}\", and \"(\", return false.\n\
    \   if #brackets == 2 and brackets == \"[\" and brackets == \"]\" and\n      brackets\
    \ == \"<\" and brackets == \">\" and\n      brackets == \"{\" and brackets ==\
    \ \"}\" and\n      brackets == \"(\" then\n      return false\n   end\n   -- If\
    \ brackets is something other than \"(\" and \")\", return false.\n   return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp068yv2r1.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp068yv2r1.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   if brackets:sub(1,1) ~= \")\" and brackets:sub(1,1)\
    \ ~= \"(\" then\n      return false\n   end\n   local opening_bracket, closing_bracket\
    \ = string.match(brackets, \"(%S)(%S)\")\n   if opening_bracket ~= closing_bracket\
    \ then return false end\n   local left_brackets = brackets:sub(2) -- string with\
    \ leading \"(\" removed\n   if left_brackets:sub(1,1) ~= \")\" and left_brackets:sub(1,1)\
    \ ~= \"(\" then\n      return false\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0nbwbs_2.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0nbwbs_2.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   if brackets == \"\" then\n      return false\n\
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo4xal5l_.lua:33: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   return brackets:gsub(\"[()]*\", function()\n\
    \      local _, _i, open = string.find(brackets, \"[\", 1, true)\n      if not\
    \ open then return \"\" end\n      local _, _i, close = string.find(brackets,\
    \ \"]\", open + 1, true)\n      if not close then return \"\" end\n      return\
    \ brackets[open + 1]\n   end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfacdnynj.lua:24:\
    \ expected: true, actual: \"\"\nstack traceback:\n\t/tmp/tmpfacdnynj.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open = brackets:find(\"(\")\n    local\
    \ close = brackets:find(\")\")\n    if close == nil then\n        return open\
    \ ~= nil\n    else\n        return open ~= close and close < open\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfme6hm_t.lua:12:\
    \ unfinished capture\nstack traceback:\n\t/tmp/tmpfme6hm_t.lua:12: in local 'candidate'\n\
    \t/tmp/tmpfme6hm_t.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets:gsub(\"(\", \"\\\\(\"\
    ):gsub(\")\", \"\\\\)\")\n    return brackets:match(\"^\\\\(.*\\\\)$\") ~= nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqu8fzkjm.lua:12:\
    \ invalid pattern capture\nstack traceback:\n\t/tmp/tmpqu8fzkjm.lua:12: in local\
    \ 'candidate'\n\t/tmp/tmpqu8fzkjm.lua:19: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening_brackets = brackets:gsub(\"\
    ^%[(%)][(%)]*$\", \"\")\n    local closing_brackets = brackets:gsub(\"^%[%)][(%)]*$\"\
    , \"\")\n    for i = 0, #opening_brackets, 1 do\n        if not opening_brackets[i]:find(\"\
    %[\") then\n            return false\n        end\n        if not closing_brackets[i]:find(\"\
    %]\") then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwz180jdz.lua:15:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpwz180jdz.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpwz180jdz.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_count = 0\n  local close_count =\
    \ 0\n  for i = 1, #brackets do\n    local bracket = brackets[i]\n    if bracket\
    \ == \"(\" then\n      open_count = open_count + 1\n    elseif bracket == \")\"\
    \ then\n      close_count = close_count + 1\n    end\n  end\n  return open_count\
    \ == close_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm26y4i3o.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm26y4i3o.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal openings = {}\n\tlocal closings = {}\n\
    \tlocal opening = true\n\tfor i = 1, #brackets do\n\t\tif not opening then\n\t\
    \t\topening = brackets[i]\n\t\t\topenings[opening] = true\n\t\telse\n\t\t\tif\
    \ brackets[i] == \"(\" then\n\t\t\t\topening = false\n\t\t\t\tif not openings[opening]\
    \ then\n\t\t\t\t\tclosings[opening] = brackets[i]\n\t\t\t\tend\n\t\t\telseif brackets[i]\
    \ == \")\" then\n\t\t\t\topening = true\n\t\t\telse\n\t\t\t\tassert(false)\n\t\
    \t\tend\n\t\tend\n\tend\n\tfor i = #brackets, 1, -1 do\n\t\tif not opening then\n\
    \t\t\topening = brackets[i]\n\t\t\topenings[opening] = true\n\t\telse\n\t\t\t\
    if brackets[i] == \")\" then\n\t\t\t\topening = true\n\t\t\telse\n\t\t\t\tassert(false)\n\
    \t\t\tend\n\t\tend\n\tend\n\tfor key, value in pairs(openings) do\n\t\tif value\
    \ ~= closings[key] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpac_5ol33.lua:28:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpac_5ol33.lua:28: in local 'candidate'\n\
    \t/tmp/tmpac_5ol33.lua:55: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   -- Check that brackets is well-formed.\n  \
    \ if not brackets:match \"^%s*(%()%()%s*$\" then\n      return false\n   end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkl5yqs73.lua:34: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   return (string.len(brackets) == 1 and brackets[1]\
    \ == \"(\") or\n          string.find(brackets, \"(\", 1) + 1 == string.find(brackets,\
    \ \")\", 1))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxqld_cnb.lua:13: 'end' expected (to close 'function' at line\
    \ 11) near ')'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"([^()]+)\", \"\"\
    )\n  for i = 1, #brackets do\n    if brackets[i]:sub(1, 1) == \"(\" then\n   \
    \   if not (i + 1 == #brackets) or brackets[i + 1]:sub(1, 1) == \"(\" then\n \
    \       return false\n      end\n    end\n    if brackets[i]:sub(1, 1) == \"(\"\
    \ then\n      return false\n    end\n    if brackets[i]:sub(1, 1) == \")\" then\n\
    \      if brackets[i + 1] ~= \"(\" then\n        return false\n      end\n   \
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplmtoizfg.lua:14:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmplmtoizfg.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmplmtoizfg.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal opening_brackets = brackets:gsub(\"[()%]\"\
    , \"\")\n\tlocal closing_brackets = brackets:gsub(\"[%)]\", \"\")\n\tlocal num_opening\
    \ = #opening_brackets\n\tlocal num_closing = #closing_brackets\n\tif num_opening\
    \ ~= num_closing then\n\t\treturn false\n\tend\n\tfor i = 1, num_opening do\n\t\
    \tlocal opening_bracket = opening_brackets[i]\n\t\tlocal closing_bracket = closing_brackets[i]\n\
    \t\tif opening_bracket ~= closing_bracket then\n\t\t\treturn false\n\t\tend\n\t\
    end\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_5izt47v.lua:12:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmp_5izt47v.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp_5izt47v.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"%[(%a)]\"\
    , function(bracket)\n    local open_count = 0\n    for c in string.gmatch(bracket,\
    \ \"()\") do\n      open_count = open_count + 1\n      if c == '(' then\n    \
    \    return open_count\n      elseif c == ')' then\n        return open_count\
    \ - 1\n      end\n    end\n    return 0\n  end)\n  return open_brackets == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9h3jga6x.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9h3jga6x.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- First, split the brackets string into a list.\n\
    \  -- >>> brackets = \"()\"\n  -- >>> brackets = \"(()())\"\n  -- >>> brackets\
    \ = \"(()\"\n  -- >>> brackets = \"()()\"\n  -- >>> brackets = \"())\"\n  -- >>>\
    \ brackets = \"(())\"\n  -- >>> brackets = \"()()())\"\n  -- >>> brackets = \"\
    (()()())\"\n  -- >>> brackets = \"(()()(()())())\"\n  -- >>> brackets = \"(()(())())\"\
    \n  -- >>> brackets = \"(()(()()))\"\n  -- >>> brackets = \"()(()())\"\n  -- >>>\
    \ brackets = \"()(())\"\n  -- >>> brackets = \"()()())\"\n  -- >>> brackets =\
    \ \"(()())()\"\n  -- >>> brackets = \"(()()())(\"\n  -- >>> brackets = \"(()(())())\"\
    \n  -- >>> brackets = \"(()()(()())())\"\n  -- >>> brackets = \"(()(()(()())())\"\
    \n  -- >>> brackets = \"(()(()(()())))\"\n  -- >>> brackets = \"(()(()(()())))\"\
    \n  -- >>> brackets = \"(()(()(()())))\"\n  -- >>> brackets = \"(()()())())\"\n\
    \  -- >>> brackets = \"(()()())(\"\n  -- >>> brackets = \"(()()(())())\"\n  --\
    \ >>> brackets = \"(()(())())\"\n  -- >>> brackets = \"(()(()())())\"\n  -- >>>\
    \ brackets = \"(()())(()())\"\n  -- >>> brackets = \"(()())(()())\"\n  -- >>>\
    \ brackets = \"(()())(()())\"\n  -- >>> brackets = \"(()()())(()())\"\n  -- >>>\
    \ brackets = \"(()(())(()())\"\n  -- >>> brackets = \"(()(()())(()())\"\n  --\
    \ >>> brackets = \"(()(()())(()())\"\n  -- >>> brackets = \"(()())())(()())\"\n\
    \  -- >>> brackets = \"(()())())(()())\"\n  -- >>> brackets = \"(()())())(()())\"\
    \n  -- >>> brackets = \"(()())())(()())\"\n  -- >>> brackets = \"(()())())(()())\"\
    \n  -- >>> brackets = \"(()())(()())()\"\n  -- >>> brackets = \"(()())(()())(\"\
    \n  -- >>> brackets = \"(()())(()())())\"\n  -- \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp36xd3n7g.lua:74: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    return brackets == \"\" or brackets ~= brackets:upper()\
    \ or\n           brackets:sub(1, 1):lower() ~= brackets:sub(2, 2):lower()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8a1g3me.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy8a1g3me.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"(%b())(%b)(%b)\"\
    , \"%b%1%2%3\")\n  return brackets:sub(1, 1):sub(1, 1):sub(1, 1):sub(1, 1) ==\
    \ brackets:sub(2, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbbeiglb.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfbbeiglb.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    return brackets:find(\"[()\")\n        ~=\
    \ nil and\n        brackets:find(\")\")\n        ~= nil and\n        brackets:find(\"\
    [\")\n        ~= nil and\n        brackets:find(\"]\")\n        ~= nil and\n \
    \       brackets:find(\"()\")\n        ~= nil\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp96_9rzhg.lua:12:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmp96_9rzhg.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp96_9rzhg.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   if brackets == \"\" or brackets == \"()\" or\
    \ brackets == \"[]\" then\n      return true\n   end\n   local opening_brackets\
    \ = brackets:gsub(\"%b([%a])\", \"%1\")\n   for i = 1, #opening_brackets do\n\
    \      local closing_bracket = opening_brackets[i+1]\n      if not closing_bracket\
    \ then\n         return false\n      elseif closing_bracket == \"(\" then\n  \
    \       return not correct_bracketing(opening_brackets[i+2])\n      elseif closing_bracket\
    \ == \"[\" then\n         return not correct_bracketing(opening_brackets[i+2])\n\
    \      else\n         return false\n      end\n   end\n   return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaeh2k6wi.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaeh2k6wi.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"^[()]*\"\
    , \"\")\n  for i = 1, #opening_brackets do\n    if not opening_brackets:sub(i,\
    \ i):sub(1, 1) = \")\" then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpon5w2xv4.lua:14: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening, closing = brackets:gsub(\"[()%]\"\
    , \"\")\n  return opening:len() == closing:len() -- true if both brackets are\
    \ the same\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprsaopkba.lua:12:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmprsaopkba.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmprsaopkba.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_count = 1\n    local closed_count\
    \ = 0\n    for i = 1, #brackets do\n        if brackets[i] ~= brackets[i-1] then\n\
    \            open_count = open_count + 1\n        else\n            closed_count\
    \ = closed_count + 1\n        end\n    end\n    if open_count ~= closed_count\
    \ then\n        return false\n    else\n        return true\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_b_kyuwg.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_b_kyuwg.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets == \"\" then\n        return false\n\
    \    end\n    brackets = brackets:gsub(\"[(){}]\",\"\")\n    if brackets:find(\"\
    (\") == -1 then\n        return false\n    end\n    brackets = brackets:gsub(\"\
    ([)]\",\"&\")\n    brackets = brackets:gsub(\"(%a)(%b)\",\"%%%02x%%%1x%%%1b\"\
    )\n    brackets = brackets:gsub(\"(&)(%%)\",\"%%%1a\")\n    brackets = brackets:gsub(\"\
    (%%)\",\"%1a\")\n    return brackets:find(\"&\") == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxm_eww34.lua:16:\
    \ unfinished capture\nstack traceback:\n\t/tmp/tmpxm_eww34.lua:16: in local 'candidate'\n\
    \t/tmp/tmpxm_eww34.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local stack = {}\n  local opening, bracket,\
    \ closing = unpack(brackets)\n  local function push_bracket(stack)\n    table.insert(stack,\
    \ opening)\n  end\n  local function pop_bracket(stack)\n    opening = stack[#stack]\n\
    \    table.remove(stack)\n  end\n  local function add_closing_bracket(stack)\n\
    \    if #stack > 1 then\n      table.insert(stack, closing)\n    end\n  end\n\
    \  add_closing_bracket(stack)\n  while #stack > 0 do\n    if opening = stack[#stack]\
    \ then\n      push_bracket(stack)\n      add_closing_bracket(stack)\n    elseif\
    \ opening = opening then\n      pop_bracket(stack)\n    else\n      break\n  \
    \  end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1xb7mg1f.lua:28: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   return brackets and (\n     brackets:gsub(\"\
    [^()]\", function (char)\n        if char == \"(\" then\n           return \"\
    )\"\n        elseif char == \")\" then\n           return \"(\"\n        else\n\
    \           return char\n        end\n     end)\n   )\nend\n</cell>\n<text>\n\
    The next function, remove_brackets, removes every occurrence of the string \"\
    (\" and \")\" in the string \"brackets\". It returns a new string with the brackets\
    \ removed. If the string \"brackets\" does not contain any brackets, then this\
    \ function returns \"brackets\".\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8u4klu0i.lua:24: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets == \"\" then\n    return true\n\
    \  end\n  local open_brackets = brackets:gsub(\"%([()]+)(%)\", \"%1\")\n  local\
    \ closed_brackets = brackets:gsub(\"%[(]%)\", \"%1\")\n  return open_brackets\
    \ ~= closed_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk44w31y6.lua:15:\
    \ invalid pattern capture\nstack traceback:\n\t/tmp/tmpk44w31y6.lua:15: in local\
    \ 'candidate'\n\t/tmp/tmpk44w31y6.lua:23: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for match in pairs(brackets) do\n      if match\
    \ == \"(\" then\n\t return false\n      end\n      if match == \")\" then\n\t\
    \ return true\n      end\n   end\n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmw1pk_1v.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpmw1pk_1v.lua:12: in local 'candidate'\n\t/tmp/tmpmw1pk_1v.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i = 1, #brackets do\n    local opening =\
    \ brackets[i]:sub(1, 1)\n    local closing = brackets[i]:sub(2, 1)\n    if opening\
    \ ~= closing then return False end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcth0r002.lua:13:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpcth0r002.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpcth0r002.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:sub(1, #brackets) * brackets:sub(1,\
    \ #brackets - 1) == '()' or (brackets:sub(1, #brackets) * brackets:sub(1, #brackets\
    \ - 1) == '[' or (brackets:sub(1, #brackets) * brackets:sub(1, #brackets - 1)\
    \ == '{') and not brackets:sub(2, #brackets)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps9op4we0.lua:13: ')' expected (to close '(' at line 12) near\
    \ 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local i = 1\n  while i <= #brackets do\n   \
    \ if brackets[i] == \"(\" then\n      i = i + 1\n    elseif brackets[i] == \"\
    )\" then\n      i = i + 1\n    elseif brackets[i] == \"(\" then\n      i = i +\
    \ 2\n    elseif brackets[i] == \")\" then\n      i = i + 2\n    else\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqr9lveu.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfqr9lveu.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i, j in pairs(brackets) do\n    local current\
    \ = brackets[i]\n    local next = brackets[j+1]\n    if not (current and next)\
    \ then\n      return false\n    end\n    if current ~= \")\" then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsltoz8_b.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpsltoz8_b.lua:12: in local 'candidate'\n\t/tmp/tmpsltoz8_b.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- If the brackets string has a single character,\
    \ it's not valid.\n    if #brackets > 1 then\n        -- A stack of brackets,\
    \ as we iterate through.\n        local stack = {brackets[1]}\n        for i =\
    \ 2, #brackets do\n            -- If we encounter a closing bracket, remove the\
    \ corresponding opening bracket.\n            if brackets[i] == \"(\" or brackets[i]\
    \ == \")\" then\n                -- A closing bracket, remove it from our stack.\n\
    \                -- If the stack is empty (nothing left to remove in this iteration),\
    \ we know that it's valid.\n                if stack:len() == 0 then\n       \
    \             return true\n                end\n                -- Pop out our\
    \ top item from the stack and add to the result set.\n                stack:pop()\n\
    \            else\n                -- A non-closing bracket, add it to the stack.\n\
    \                stack:insert(brackets[i])\n            end\n        end\n   \
    \ end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy62yqyu0.lua:28:\
    \ attempt to call a nil value (method 'insert')\nstack traceback:\n\t/tmp/tmpy62yqyu0.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpy62yqyu0.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"\\(\"\
    , \"(.*)\")\n  local close_brackets = brackets:gsub(\"\\)\", \"(.*)\")\n  return\
    \ open_brackets ~= close_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpclqn4t5e.lua:12: invalid escape sequence near '\"\\('\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   if brackets == \"\" then return end\n   brackets\
    \ = brackets:gsub(\"^.\", \".\")\n   local opening = brackets:gsub(\"[()]+\",\
    \ \"\")\n   local closing = brackets:gsub(\"[)]+\", \"\")\n   if opening:len()\
    \ < closing:len() then return end\n   local bracket = brackets:sub(1, brackets:len()-1)\n\
    \   local open_count = opening:find(bracket)\n   local close_count = closing:find(bracket)\n\
    \   return open_count == close_count and open_count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dax7gfi.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2dax7gfi.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:sub(1,1) == brackets:sub(3,1)\
    \ and brackets:sub(1,2) == brackets:sub(3,2) and\n         brackets:sub(1,3) ==\
    \ brackets:sub(3,3) and brackets:sub(1,4) == brackets:sub(3,4) and\n         brackets:sub(1,5)\
    \ == brackets:sub(3,5) and brackets:sub(1,6) == brackets:sub(3,6)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxj3h7di5.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxj3h7di5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets:sub(1,1) ~= brackets:sub(#brackets,1)\
    \ then return False end\n  for i = 1, #brackets do\n    local opening = brackets:sub(i,i)\n\
    \    if not closings[opening] then return False end\n    local closing = brackets:sub(i+1,i+1)\n\
    \    if not openings[closing] then return False end\n  end\n  return True\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppysn8_vb.lua:25:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmppysn8_vb.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"(\", \"\\\\(\")\n\
    \  brackets = brackets:gsub(\")\", \"\\\\)\")\n  brackets = brackets:gsub(\"[\"\
    , \"\\\\[\")\n  brackets = brackets:gsub(\"]\", \"\\\\]\")\n  brackets = brackets:gsub(\"\
    {\", \"\\\\{\")\n  brackets = brackets:gsub(\"}\", \"\\\\}\")\n  return brackets:match(\"\
    ^[\\(\\[]*\\[?\\)\\]]*$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7rdl35av.lua:18: invalid escape sequence near '\"^[\\('\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening, closing = brackets:gsub(\"%[(%)][^)]*\"\
    )\n  local openings = opening:gsub(\"[()%](%\")\n  local closings = closing:gsub(\"\
    [()%)](%\")\n  \n  for i = 1, opening:len(), 2 do\n    if openings[i+1] ~= closings[i]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5hy8oegy.lua:12:\
    \ bad argument #2 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmp5hy8oegy.lua:12: in local 'candidate'\n\t/tmp/tmp5hy8oegy.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    -- print(\"brackets = \", brackets)\n    local\
    \ openings = string.match(brackets, \"%[(%w+)\")\n    -- print(\"openings = \"\
    , openings)\n    local closings = string.match(brackets, \"%(%w+)\")\n    -- print(\"\
    closings = \", closings)\n    for i = 1, #openings do\n        local opening_char\
    \ = openings[i]\n        if opening_char ~= closings[i] then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnka8588b.lua:17:\
    \ attempt to get length of a nil value (local 'openings')\nstack traceback:\n\t\
    /tmp/tmpnka8588b.lua:17: in local 'candidate'\n\t/tmp/tmpnka8588b.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local in_brackets = true\n  local last_bracket\
    \ = brackets\n  while in_brackets do\n    -- check brackets aren't balanced\n\
    \    if not open_bracket_balanced(last_bracket) then\n      return false\n   \
    \ end\n    -- check last bracket is correctly opened\n    if not close_bracket_balanced(last_bracket)\
    \ then\n      return false\n    end\n    -- we're in a bracket, so increment our\
    \ counter\n    last_bracket = last_bracket:sub(1,-1) + last_bracket:sub(-2,-1)\n\
    \    -- check for end of brackets\n    if last_bracket == \"()\" then\n      in_brackets\
    \ = false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppy_upj0e.lua:16:\
    \ attempt to call a nil value (global 'open_bracket_balanced')\nstack traceback:\n\
    \t/tmp/tmppy_upj0e.lua:16: in local 'candidate'\n\t/tmp/tmppy_upj0e.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets ~= \"\" and\n         brackets:sub(1,\
    \ 1) ~= '(' and brackets:sub(1, 1) ~= ')'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukc__ejw.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpukc__ejw.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening = brackets:match(\"%[(%+%-+)\"\
    )\n    local closing = brackets:match(\"%[%-+(%+%-+)\")\n    return opening ~=\
    \ nil and closing ~= nil and opening ~= closing\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8qflo4lf.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8qflo4lf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i = 1, #brackets do\n    if brackets[i]\
    \ == \"(\" then\n      return true\n    elseif brackets[i] == \")\" then\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprjheynld.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprjheynld.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   if brackets ~= \"\" then\n      if brackets[1]\
    \ ~= brackets then\n         return false\n      end\n      local opening_bracket\
    \ = brackets[1]\n      local closing_bracket = brackets[#brackets]\n      if opening_bracket\
    \ ~= closing_bracket then\n         return false\n      end\n      return true\n\
    \   else\n      return true\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndlzyu1a.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpndlzyu1a.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets or \"\"\n  return brackets:find(\"\
    ^<%[%]-[%s-[%]%>-[%s-[%]%>-[%s-[%]%>-[%]%>-[%s-[%]%>-[%sn\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplw78xdw2.lua:13: unfinished string near '\"^<%[%]-[%s-[%]%>-[%s-[%]%>-[%s-[%]%>-[%]%>-[%s-[%]%>-[%s-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>-[%]%>'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:gsub(\"^%s*(%d(%w*))*%s*$\"\
    ,\"%2\"):gsub(\"%d(%w*)\",\"%1\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4j4pyfc.lua:18:\
    \ expected: true, actual: \"()\"\nstack traceback:\n\t/tmp/tmpc4j4pyfc.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i, bracket_str in pairs(brackets) do\n \
    \   if string.sub(bracket_str, 1, 1) == '(' then\n      assert(string.sub(bracket_str,\
    \ 2, -1) == ')', \"Mismatched bracketing at character \" .. i .. \" in \" .. brackets)\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk6j3obbi.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpk6j3obbi.lua:12: in local 'candidate'\n\t/tmp/tmpk6j3obbi.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_bracket, close_bracket = brackets:gsub(\"\
    ^%[(%)][(%)]?$\", \"%1%2\")\n    local open_bracket = open_bracket == \"(\" and\
    \ open_bracket:len()\n    local close_bracket = close_bracket == \")\" and close_bracket:len()\n\
    \    return open_bracket ~= 0 and close_bracket ~= 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppzk650pb.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppzk650pb.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets or \"\"\n  local open_brackets\
    \ = brackets:gsub(\"%D\", \"+\")\n  local close_brackets = brackets:gsub(\"%D\"\
    , \"%1\")\n  return open_brackets:len() == close_brackets:len() and open_brackets:gsub(\"\
    %1\", \"(\") == close_brackets:gsub(\"%1\", \")\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ckolqvr.lua:15:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmp3ckolqvr.lua:15: in local\
    \ 'candidate'\n\t/tmp/tmp3ckolqvr.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets ~= \"\" and\n    (brackets:sub(1,\
    \ 1) ~= brackets:sub(#brackets, 1)) and\n    (brackets:sub(#brackets, 1) ~= brackets:sub(1,\
    \ #brackets)) \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2ccbjm3.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu2ccbjm3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   if brackets == \"\" then return false end\n\
    \   local opening_brackets = brackets:gsub(\"[\\(\\)]\", \"\")\n   for i = 1,\
    \ #opening_brackets do\n      local opening_bracket = opening_brackets[i]\n  \
    \    if opening_bracket ~= \"\" then return false end\n   end\n   return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp83su2pzh.lua:13: invalid escape sequence near '\"[\\('\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets == nil or\n         brackets:sub(1,\
    \ 1) == \"(\" or\n         brackets:sub(1, 1) == \")\" or\n         brackets:sub(1,\
    \ 1) == \"[\" or\n         brackets:sub(1, 1) == \"]\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46yz1gnn.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp46yz1gnn.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets or \"{(}\"\n  local opening_brackets,\
    \ closing_brackets = brackets:gsub(\"%b()\", \"\")\n  return opening_brackets\
    \ == closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbswqi9js.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbswqi9js.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub('()', '{}')\n  local\
    \ opening_counts = brackets:gsub('{[(%)}]', '%d'):gsub('%d', '1'):gsub('%s+$',\
    \ '{}')\n  local closing_brackets = {}\n  for opening, count in opening_counts:gmatch('%d+')\
    \ do\n    table.insert(closing_brackets, count > 0 and opening or '')\n  end\n\
    \  local opening_brackets = #opening_counts > 0 and opening_counts or 0\n  local\
    \ closing_brackets = #closing_brackets == #brackets and #closing_brackets or 0\n\
    \  local opening_and_closing_brackets = #opening_counts + #closing_brackets ==\
    \ #brackets\n  return opening_brackets == opening_and_closing_brackets\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdok5id8h.lua:13:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpdok5id8h.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpdok5id8h.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:gsub(\"([()])\",function(m)\n\
    \    local i = m:gsub(\"(\",\"%\"):gsub(\")\",\"%\"):gsub(\"%)\",\"\")\n    return\
    \ i..\"}\"\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw6tu1kv3.lua:13:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpw6tu1kv3.lua:13:\
    \ in function </tmp/tmpw6tu1kv3.lua:12>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpw6tu1kv3.lua:12: in local 'candidate'\n\t/tmp/tmpw6tu1kv3.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i=1, #brackets do\n      local c = brackets[i]\n\
    \      if c == \"(\" then return not (i+1) % #brackets end\n      if c == \")\"\
    \ then return (i-1) % #brackets end\n   end\n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n2jlz9x.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2n2jlz9x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets ~= \"\" and brackets ~= brackets\
    \ then return false end\n  brackets = brackets:gsub(\"()\", \"*\"):gsub(\"[]\"\
    , \"*\")\n  return (brackets:find(\"*\")) == (brackets:find(\"*\"))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu015su1u.lua:13:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpu015su1u.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpu015su1u.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"[^(%a)]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"(%a[^(]])\", \"\")\n  local\
    \ open_brackets_sorted = {}\n  local closing_brackets_sorted = {}\n  for i,k in\
    \ ipairs(open_brackets) do\n    if open_brackets_sorted[i] then\n      open_brackets_sorted[i]\
    \ = open_brackets_sorted[i]\n    else\n      open_brackets_sorted[i] = k\n   \
    \ end\n  end\n  for i,k in ipairs(closing_brackets) do\n    if closing_brackets_sorted[i]\
    \ then\n      closing_brackets_sorted[i] = closing_brackets_sorted[i]\n    else\n\
    \      closing_brackets_sorted[i] = k\n    end\n  end\n  for i,k in ipairs(open_brackets_sorted)\
    \ do\n    for j,l in ipairs(open_brackets_sorted) do\n      if k == l then\n \
    \       return false\n      end\n    end\n  end\n  for i,k in ipairs(closing_brackets_sorted)\
    \ do\n    for j,l in ipairs(closing_brackets_sorted) do\n      if k == l then\n\
    \        return false\n      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7d1z5oky.lua:54:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7d1z5oky.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   return (brackets ~= '()' and brackets ~= '[]'\
    \ and brackets ~= '{}')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7brlo8km.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7brlo8km.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    return (brackets ~= \"\") and (\n        \
    \ brackets:match(\"^([%z()]+[%z()]+)(.*)$\") or brackets:match(\"^%z(.*)$\")\n\
    \    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7pwj3ddc.lua:20:\
    \ expected: true, actual: \"()\"\nstack traceback:\n\t/tmp/tmp7pwj3ddc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal result = false\n\tfor i = 1, #brackets\
    \ do\n\t\tlocal opening = brackets[i]\n\t\tlocal closing = brackets[i + 1]\n\t\
    \tif opening == \"(\" and closing == \")\" then\n\t\t\tresult = true\n\t\tend\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jlvkp08.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1jlvkp08.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i = 1, #brackets do\n    if brackets[i]\
    \ == \"(\" then return false end\n    if brackets[i] == \")\" then return false\
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bwq4ite.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9bwq4ite.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return brackets:find(brackets[1]) == brackets:find(brackets[2])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo5z13524.lua:12:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpo5z13524.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpo5z13524.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local stack = {}\n    for idx, ch in pairs(brackets)\
    \ do\n        if idx == 0 then\n            stack[#stack+1] = ch\n        else\n\
    \            if stack[#stack] == nil then\n                return false\n    \
    \        else\n                stack[#stack] = ch\n            end\n        end\n\
    \    end\n    for idx = #stack+1 to 1 do\n        if stack[idx] == nil then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_e2b0xvd.lua:24: ',' expected near 'to'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local openings = string.gmatch(brackets, \"\
    [^()]+\")\n  local closings = string.gmatch(brackets, \"[^()]+$\")\n  for _,i\
    \ in ipairs(openings) do\n    local opening = openings[i]\n    if string.find(closings,\
    \ opening, 1, true) then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets == \"\" then\n    return true\n\
    \  end\n  local pos = 1\n  local opening_brackets = 0\n  local closing_brackets\
    \ = 0\n  while pos <= #brackets do\n    local chr = brackets[pos]\n    if chr\
    \ == \"(\" then\n      opening_brackets = opening_brackets + 1\n      if closing_brackets\
    \ == 0 then\n        return true\n      end\n    elseif chr == \")\" then\n  \
    \    closing_brackets = closing_brackets - 1\n      if opening_brackets ~= closing_brackets\
    \ then\n        return false\n      end\n    elseif chr == \"\" then\n      if\
    \ opening_brackets ~= closing_brackets then\n        return false\n      end\n\
    \    end\n    pos = pos + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug3dtddu.lua:47:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpug3dtddu.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets == \"\" then return true end\n \
    \ local opening, closing = brackets:find(\"^(%S+)\"..\"%S+$\")\n  return opening\
    \ ~= nil and closing ~= nil and opening:len() == closing and\n    closing:len()\
    \ > 0 and closing:len() == opening:len() - 1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnemr7by2.lua:14:\
    \ attempt to index a number value (local 'opening')\nstack traceback:\n\t/tmp/tmpnemr7by2.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpnemr7by2.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    for _, bracket in pairs(brackets) do\n   \
    \     if string.find(bracket, \"(\") ~= nil then\n            -- Find an open\
    \ bracket\n            local open_bracket = string.find(bracket, \"(\")\n    \
    \        -- Find the closing bracket\n            local close_bracket = string.find(bracket,\
    \ \")\")\n            -- Make sure the brackets are properly nested\n        \
    \    if open_bracket ~= nil and close_bracket ~= nil then\n                if\
    \ open_bracket < close_bracket then\n                    return False\n      \
    \          else\n                    return true\n                end\n      \
    \      else\n                return true\n            end\n        else\n    \
    \        return true\n        end\n    end\nend\n</code>\n<|/ a tags=parsing,lua,regex,string\
    \ |>\n<| a |>\nI've been doing this using Lua 5.1.\nThe solution is actually really\
    \ simple if you use a proper tokenizer. Just use string.find and string.gsub to\
    \ find all open and close brackets matching the given pattern. Once you've done\
    \ that you can simply use string.sub to remove the brackets from the string while\
    \ keeping the correct syntax or use string.gsub to replace the pattern with the\
    \ brackets. \nI wrote a blog post on this here if you wanna see it in action:\
    \ http://kristopherjones.com/blog/2012/10/17/parsing-a-string-with-regular-expressions\n\
    <|/ a dscore=2 tags=parsing,lua,regex,string |>\n<| a tags=parsing,lua,regex,string\
    \ dscore=2 |>\nI wrote the following to match a string with a specific format\
    \ and return a table:\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv5bd_v3c.lua:33: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return string.find(brackets, \"(\", true) and\
    \ string.find(brackets, \")\", true) and\n    string.find(brackets, \"()\", true)\
    \ == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy5tbab51.lua:12:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpy5tbab51.lua:12: in local 'candidate'\n\t/tmp/tmpy5tbab51.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local b = 1\n    local c = 0\n    while b\
    \ <= #brackets do\n        if brackets[b] == '(' then\n            if brackets[b\
    \ + 1] == ')' then\n                c = c + 1\n            elseif brackets[b +\
    \ 1] == ')' then\n                c = c + 1\n            elseif brackets[b + 1]\
    \ == brackets[b + 2] then\n                c = c + 1\n            end\n      \
    \  end\n        b = b + 1\n    end\n    return c == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvcy842n.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbvcy842n.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets == nil then\n        return false\n\
    \    end\n    local opening_brackets = brackets:gsub(\"^%L\", \"(\")\n    local\
    \ closing_brackets = brackets:gsub(\"%L)$\", \")\")\n    local all_opening_brackets\
    \ = \"[(\"\n    local all_closing_brackets = \")]\"\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9g5cqvar.lua:37: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for c, v in pairs(brackets) do\n    if v ~=\
    \ '(' or v ~= ')' then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpztpt4vpu.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpztpt4vpu.lua:12: in local 'candidate'\n\t/tmp/tmpztpt4vpu.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   if brackets == \"\" then\n      return true\n\
    \   elseif brackets == \"(\" then\n      return false\n   elseif brackets == \"\
    (()\" then\n      return true\n   elseif brackets == \"()(())\" then\n      return\
    \ true\n   elseif brackets == \"(()()())\" then\n      return true\n   elseif\
    \ brackets == \")(())\" then\n      return false\n   else\n      return false\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppxrmqvf.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpppxrmqvf.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    for bracket in string.gmatch(brackets, \"\
    (%b()\") do\n        if brackets[bracket:len()] ~= \")\" then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpap8wcu47.lua:12:\
    \ unfinished capture\nstack traceback:\n\t/tmp/tmpap8wcu47.lua:12: in local 'candidate'\n\
    \t/tmp/tmpap8wcu47.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local openings = {brackets[1], brackets[2],\
    \ brackets[3], brackets[4]}\n    local closings = {brackets[5], brackets[6], brackets[7],\
    \ brackets[8]}\n    for i = 1, #openings do\n        if openings[i] ~= closings[i]\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvgqcikf.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuvgqcikf.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  return (brackets ~= \"()\" and brackets ~= \"\
    )()\" and brackets ~= \"(()()\")) \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp87cu995.lua:12: 'end' expected (to close 'function' at line\
    \ 11) near ')'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    for i = 1, #brackets do\n        local open_count\
    \ = brackets:sub(i, i)\n        if open_count:len() == 1 then\n            if\
    \ open_count:sub(1, 1) ~= brackets[i]:len() then\n                return false\n\
    \            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppia0zcmg.lua:15:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmppia0zcmg.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmppia0zcmg.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"^%W+\"\
    , \"\"):gsub(\"%W+$\", \"\"):gsub(\"%W+\", \"+\")\n  return open_brackets ~= brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9yln2om.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm9yln2om.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal open_brackets = {\n\t\t[\"(\"] = true,\n\
    \t\t[\")\"] = true,\n\t\t[\"[\"] = true,\n\t\t[\"]\"] = true,\n\t\t[\"{\"] = true,\n\
    \t\t[\"}\"] = true,\n\t\t[\"<\"] = true,\n\t\t[\">\"] = true,\n\t\t[\"==\"] =\
    \ true,\n\t\t[\">=\"] = true,\n\t\t[\"<=\"] = true,\n\t}\n\tlocal close_brackets\
    \ = {\n\t\t[\"(\"] = true,\n\t\t[\")\"] = true,\n\t\t[\"[\"] = true,\n\t\t[\"\
    ]\"] = true,\n\t\t[\"{\"] = true,\n\t\t[\"}\"] = true,\n\t\t[\"<\"] = true,\n\t\
    \t[\">\"] = true,\n\t\t[\"==\"] = true,\n\t\t[\">=\"] = true,\n\t\t[\"<=\"] =\
    \ true,\n\t}\n\tlocal bracketing_level = 0\n\tfor char in brackets:gmatch(\"[^(){}<>]\"\
    ) do\n\t\tbracketing_level = bracketing_level + 1\n\t\tif open_brackets[char]\
    \ then\n\t\t\tbracketing_level = bracketing_level - 1\n\t\t\tif bracketing_level\
    \ == 0 then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexo4b0cm.lua:54:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpexo4b0cm.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   if brackets ~= \"\" and brackets ~= brackets:gsub(\"\
    [^()]+\", '') then\n      brackets = brackets:gsub(\"%[(%)][(%)]\", \"\")\n  \
    \    return brackets == brackets:gsub(\"[()%]\", \"\")\n   end\n   return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgu3b1fn.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprgu3b1fn.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"(.-)\"\
    , function (c)\n    local bracket = string.byte(c)\n    if bracket == 35 then\
    \ return \"}\" end\n    if bracket == 36 then return \"{\"  end\n    return c\n\
    \  end)\n  local closing_brackets = brackets:gsub(\"({-)}\", function (c)\n  \
    \  local bracket = string.byte(c)\n    if bracket == 35 then return \"{\" end\n\
    \    if bracket == 36 then return \"-}\" end\n    return c\n  end)\n  return opening_brackets\
    \ = closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpni26m6c9.lua:24: 'end' expected (to close 'function' at line\
    \ 11) near '='\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local brackets_stack = brackets:gsub(\"(%b+)\"\
    , function (match) return match ~= '()' end):gsub(\"(%b+)\", function (match)\
    \ return '()' end):gsub(\"(%b+)\", function (match) return '()' end)\n  local\
    \ result = true\n  for i = 1, #brackets_stack do\n    if brackets_stack[i] ~=\
    \ brackets_stack[i + #brackets_stack] then\n      result = false\n      break\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggohlhh7.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpggohlhh7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i, c in ipairs(brackets) do\n    if c ==\
    \ \"(\" then\n      if not brackets[i+1] then\n        return false\n      elseif\
    \ brackets[i+1] == \"(\" then\n        return false\n      elseif brackets[i+1]\
    \ == \")\" then\n        return false\n      end\n    elseif c == \")\" then\n\
    \      if not brackets[i-1] then\n        return false\n      elseif brackets[i-1]\
    \ == \"(\" then\n        return false\n      elseif brackets[i-1] == \")\" then\n\
    \        return false\n      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgilor0y.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphgilor0y.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal stack = brackets:gsub(\"%[(%)]\", function\
    \ (c) return { '(', ')' }[c] end):gsub(\"%[(%)]\", \"()\")\n\tlocal bracket_count\
    \ = #stack\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpytokptd9.lua:12: 'end' expected near '['\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = counting(brackets)\n \
    \ local close_brackets = counting(brackets, \"()\")\n  return open_brackets ==\
    \ close_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt_vnld9o.lua:12:\
    \ attempt to call a nil value (global 'counting')\nstack traceback:\n\t/tmp/tmpt_vnld9o.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpt_vnld9o.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"(%W+)\"\
    , \"%1\")\n  local close_brackets = brackets:gsub(\"(%W+%1)\", \"%1\")\n  return\
    \ open_brackets ~= close_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo89fgh2t.lua:13:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmpo89fgh2t.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmpo89fgh2t.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:sub(1,1)\n  for i=2,#brackets\
    \ do\n    if brackets[i-1] ~= opening then return false end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgplzo7yp.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgplzo7yp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local brackets = {brackets}\n  local opening_brackets\
    \ = {}\n  for i = 1, #brackets do\n    local bracket = brackets[i]\n    if bracket\
    \ == \"(\" then\n      table.insert(opening_brackets, i)\n    elseif bracket ==\
    \ \")\" then\n      local opening_index = opening_brackets[i]\n      if opening_index\
    \ == #opening_brackets then\n        return false\n      end\n      table.remove(opening_brackets,\
    \ opening_index)\n    end\n  end\n  return #opening_brackets == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj517rr0v.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj517rr0v.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening_brackets = {}\n    local closing_brackets\
    \ = {}\n    for i = 1, #brackets do\n        local bracket = brackets[i]\n   \
    \     if bracket == \"(\" then\n            table.insert(opening_brackets, bracket)\n\
    \        elseif bracket == \")\" then\n            local last_bracket = opening_brackets[#opening_brackets]\n\
    \            table.insert(closing_brackets, last_bracket)\n        end\n    end\n\
    \    for i = 1, #opening_brackets do\n        for j = 1, #closing_brackets do\n\
    \            local opening = opening_brackets[i]\n            local closing =\
    \ closing_brackets[j]\n            if opening and closing then\n             \
    \   return closing ~= opening\n            end\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuy_1eshe.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuy_1eshe.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"%l*%l+\"\
    , \"%1\")\n  return open_brackets:find(\"%1\") ~= nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl_ifb3w2.lua:13:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmpl_ifb3w2.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmpl_ifb3w2.lua:19: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal opening_brackets = {}\n\tlocal closing_brackets\
    \ = {}\n\tfor i=1, #brackets do\n\t\tlocal opening = brackets[i]\n\t\tif opening\
    \ then\n\t\t\tif opening_brackets[opening] then\n\t\t\t\topening_brackets[opening]\
    \ = opening_brackets[opening] + 1\n\t\t\telse\n\t\t\t\topening_brackets[opening]\
    \ = 1\n\t\t\tend\n\t\tend\n\t\tlocal closing = brackets[i+1]\n\t\tif closing then\n\
    \t\t\tif closing_brackets[closing] then\n\t\t\t\tclosing_brackets[closing] = closing_brackets[closing]\
    \ + 1\n\t\t\telse\n\t\t\t\tclosing_brackets[closing] = 1\n\t\t\tend\n\t\tend\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpovayryln.lua:50: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"%[(%)][(%)]\", \"\
    %1%\")\n  brackets = brackets:gsub(\"%[(%)]%\", \"%1%\")\n  brackets = brackets:gsub(\"\
    %[)]\", \"%1%\")\n  return brackets:sub(1, 1) == \"()\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe43l84gy.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe43l84gy.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local brackets = brackets:gsub(\"[()\\n]+\"\
    , \"\")\n  local last_bracket = nil\n  for _, bracket in ipairs(brackets) do\n\
    \    if last_bracket ~= nil then\n      -- a closing bracket was found between\
    \ the last opened bracket and the\n      -- current one, so we must fix it.\n\
    \      if last_bracket == bracket then\n        brackets[last_bracket] = bracket\n\
    \      else\n        -- If the closing bracket was an opening bracket, then we\
    \ must have found\n        -- a closing bracket between the previous closing bracket\
    \ and the current\n        -- opening bracket. For example, \")()\" has an opening\
    \ bracket \"(\", a\n        -- closing bracket \")\" and an opening bracket \"\
    )\". So, we must correct\n        -- this by replacing the previous closing bracket\
    \ \")\" with an opening one\n        -- \"(\" and then a closing one \")\".\n\
    \        brackets[last_bracket] = bracket\n      end\n    end\n    last_bracket\
    \ = bracket\n  end\n  return brackets:sub(1, #brackets) == brackets\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1gwmnu2.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo1gwmnu2.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"(%b)(%b)\", function(left,\
    \ right)\n    return left:reverse .. right\n  end)\n  return brackets:reverse()\
    \ == \"()\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_jl1zjit.lua:13: function arguments expected near '..'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\t-- If there are not at least two brackets, return\
    \ False.\n\t-- >>> correct_bracketing(\"(\")\n\t-- False\n\t-- >>> correct_bracketing(\"\
    )\")\n\t-- False\n\t-- >>> correct_bracketing(\"{}\")\n\t-- False\n\t-- >>> correct_bracketing(\"\
    []\")\n\t-- False\n\tif brackets == nil then\n\t\treturn false\n\tend\n\tif brackets:sub(1,\
    \ 1) ~= \"(\" and brackets:sub(1, 1) ~= \")\" then\n\t\treturn false\n\tend\n\t\
    -- Go through brackets, one character at a time.\n\t-- If the character is \"\
    )\", then return True, else return False.\n\tfor i = 1, #brackets do\n\t\t-- If\
    \ the character is \")\", then return False.\n\t\tif brackets[i] == \")\" then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\t-- If the brackets string is not empty,\
    \ return False.\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc46ap06x.lua:46:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc46ap06x.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local bracket_count = 0\n    local opening_brackets\
    \ = \"\"\n    for i = 1, #brackets do\n        if brackets[i] == \"(\" then\n\
    \            if opening_brackets == \"\" then\n                opening_brackets\
    \ = brackets[i]\n                bracket_count = bracket_count + 1\n         \
    \   elseif opening_brackets ~= brackets[i] then\n                bracket_count\
    \ = bracket_count + 1\n            end\n        elseif brackets[i] == \")\" then\n\
    \            if opening_brackets == \"\" then\n                bracket_count =\
    \ bracket_count - 1\n            elseif opening_brackets ~= brackets[i] then\n\
    \                bracket_count = bracket_count - 1\n            end\n        end\n\
    \    end\n    return bracket_count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgzt3rbm.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprgzt3rbm.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\treturn brackets:sub(1, #brackets - 1):match(\"\
    ^[({%)(]$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gjhbspw.lua:18:\
    \ expected: true, actual: \"(\"\nstack traceback:\n\t/tmp/tmp1gjhbspw.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening = brackets:sub(1,1)\n    local\
    \ closing = brackets:sub(1,2)\n    local openings = {opening}\n    local closings\
    \ = {closing}\n    local i = 1\n    while i ~= #openings do\n        openings\
    \ = {openings:sub(1,i-1)}\n        closings = {closings:sub(1,i-1)}\n        i\
    \ = i + 1\n    end\n    local ok = true\n    for i, opening in ipairs(openings)\
    \ do\n        ok = false and ok\n        local closing = closings[i]\n       \
    \ if opening ~= closing then\n            ok = false\n        end\n    end\n \
    \   return ok\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaqcc51x.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbaqcc51x.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:sub(1,1)\n  local closing\
    \ = brackets:sub(2)\n  return opening ~= closing ~= \"(\" and opening ~= closing\
    \ and closing ~= \"(\" and\n         closing ~= \"(\" and opening ~= closing and\
    \ opening ~= \"(\" and opening ~= closing and\n         opening ~= closing and\
    \ opening ~= closing and opening ~= closing\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_jgkvvh.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8_jgkvvh.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = {}\n  for char in brackets:gmatch(\"\
    [()%]\") do\n    opening_brackets[char] = true\n  end\n  for opening_bracket in\
    \ pairs(opening_brackets) do\n    local closing_bracket = opening_brackets[opening_bracket]\n\
    \    if not closing_bracket then\n      return false\n    end\n    opening_brackets[opening_bracket]\
    \ = false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkf8ild5y.lua:13:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpkf8ild5y.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpkf8ild5y.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i, c in pairs(brackets) do\n    if c ~=\
    \ '(' or not brackets[i+1] then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm37kxea.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmplm37kxea.lua:12: in local 'candidate'\n\t/tmp/tmplm37kxea.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets == \"\" or brackets == \"()\" then\
    \ return false end\n  local open_brackets = {}\n  for _, opening_bracket in ipairs(brackets)\
    \ do\n    open_brackets[opening_bracket] = true\n  end\n  for _, _ in ipairs(brackets)\
    \ do\n    local opening_bracket = brackets[_]\n    if open_brackets[opening_bracket]\
    \ == nil then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqakdlubn.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqakdlubn.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets:find(\"(\") == nil then\n    --\
    \ empty brackets means no brackets found\n    return false\n  end\n  local opening_bracket\
    \ = brackets:sub(1,1)\n  local closing_bracket = brackets:sub(2,2)\n  for i=1,\
    \ #brackets do\n    if brackets[i]:sub(1,1) ~= opening_bracket then\n      --\
    \ no opening bracket found\n      return false\n    end\n    if brackets[i]:sub(#brackets,2)\
    \ ~= closing_bracket then\n      -- no closing bracket found\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq7q313lt.lua:12:\
    \ unfinished capture\nstack traceback:\n\t/tmp/tmpq7q313lt.lua:12: in local 'candidate'\n\
    \t/tmp/tmpq7q313lt.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets == nil then\n    return false\n\
    \  end\n  brackets = brackets:gsub(\"%([%)(]?)([%)]?)(%[%)]?([%)]?)\", \"%1\"\
    )\n  return brackets:match(\"%1\"):match(\"%1\"):find(\"%1\"):sub(-1)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd93rtdt7.lua:15:\
    \ invalid pattern capture\nstack traceback:\n\t/tmp/tmpd93rtdt7.lua:15: in local\
    \ 'candidate'\n\t/tmp/tmpd93rtdt7.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  -- Don't treat \"(\" as a single opening bracket.\n\
    \  if brackets:sub(1,1) == \"(\" then\n    return false\n  end\n  -- Don't treat\
    \ \")\" as a single closing bracket.\n  if brackets:sub(#brackets,1) == \")\"\
    \ then\n    return false\n  end\n  -- Don't treat \"((\", \")(\", or \"()()\"\
    \ as a single set of brackets.\n  if brackets:sub(1,1) == \"(\" and brackets:sub(#brackets,1)\
    \ == \")\" or\n     brackets:sub(1,1) == \"(\" and brackets:sub(#brackets,1) ==\
    \ \"(\" or\n     brackets:sub(1,1) == \"(\" and brackets:sub(#brackets,1) == \"\
    (()\" then\n    return false\n  end\n  -- Don't treat \")(\", \")(\", \")(()\"\
    , or \"())()\" as a single set of brackets.\n  if brackets:sub(1,1) == \")\" and\
    \ brackets:sub(#brackets,1) == \")\" or\n     brackets:sub(1,1) == \")\" and brackets:sub(#brackets,1)\
    \ == \")(\" or\n     brackets:sub(1,1) == \")\" and brackets:sub(#brackets,1)\
    \ == \"(()\" or\n     brackets:sub(1,1) == \"(\" and brackets:sub(#brackets,1)\
    \ == \")()\" then\n    return false\n  end\n  -- Don't treat \"((\", \")(\", \"\
    )(()\", or \"())()\" as a single set of brackets.\n  if brackets:sub(1,1) == \"\
    (\" and brackets:sub(#brackets,1) == \")(\" or\n     brackets:sub(1,1) == \"(\"\
    \ and brackets:sub(#brackets,1) == \"(()\" or\n     brackets:sub(1,1) == \"(\"\
    \ and brackets:sub(#brackets,1) == \"(()()\" then\n    return false\n  end\n \
    \ -- Don't treat \")((\", \")(\", \")(()\", or \"())()\" as a single set of brackets.\n\
    \  if brackets:sub(1,1) == \")\" and brackets:sub(#brackets,1) == \")(\" or\n\
    \     brackets:sub(1,1) == \")\" and brackets:sub(#brackets,1) == \")(\" or\n\
    \     brackets:sub(1,1) == \")\" and brackets:sub(#brackets,1) == \")(()\" or\n\
    \     brackets:sub(1,1) == \")\" and brackets:sub(#brackets,1) == \"(()()\" then\n\
    \    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdeze41t.lua:52:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppdeze41t.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets == nil then brackets = \"\" return\
    \ false end\n  brackets = brackets:gsub(\"%([()\"])([^)]+)%\", function(all, bracket,\
    \ bracket2)\n    if bracket:sub(1, 1) == \"(\" then\n      if bracket2:sub(2,\
    \ 2) ~= \"()\" then return false end\n      return true\n    end\n    if bracket:sub(1,\
    \ 1) == \"{\" then\n      if bracket2:sub(1, 1) ~= \"}\" then return false end\n\
    \      return true\n    end\n    if bracket:sub(1, 1) == \"[\" then\n      if\
    \ bracket2:sub(1, 1) ~= \"]\" then return false end\n      return true\n    end\n\
    \    return false\n  end)\n  return brackets:sub(1, 1) ~= \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwwmjv8zi.lua:13: ')' expected near ']'\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets == \"\" then\n        return true\n\
    \    end\n    local opening_brackets = string.gsub(brackets, \"{[(%W)\", \"()\"\
    )\n    local closing_brackets = string.gsub(brackets, \"{[(%W+)}\", \"()\")\n\
    \    local opening_brackets_count = #opening_brackets\n    local closing_brackets_count\
    \ = #closing_brackets\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5j6u6x_r.lua:37: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets == \"()\" then return true end\n\
    \    local stack = {}\n    for i = 1, #brackets do\n        if brackets[i] ==\
    \ \"(\" then\n            table.insert(stack, i)\n        elseif brackets[i] ==\
    \ \")\" then\n            local pop = stack[#stack]\n            if pop == i then\
    \ return false end\n            table.remove(stack, pop)\n        end\n    end\n\
    \    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fx58q0s.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4fx58q0s.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local openings = {}\n    for _, bracket in\
    \ string.gmatch(brackets, \"%[(%)*%]\") do\n        openings[bracket] = true\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwpqbclms.lua:34: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i = 1, #brackets do\n    local opening =\
    \ brackets[i]\n    if opening:sub(1, 1) == \"(\" then\n      local closing = brackets[i+1]\n\
    \      if closing:sub(1, 1) == \")\" then\n        return false\n      end\n \
    \   end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkygk4fxn.lua:14:\
    \ attempt to index a nil value (local 'opening')\nstack traceback:\n\t/tmp/tmpkygk4fxn.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpkygk4fxn.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"%b()%b\"\
    ,\"%b\")\n  local close_brackets = brackets:gsub(\"%b()%b\",\"%b\"):gsub(\"%b%b\"\
    ,\"\")\n  return open_brackets:find(close_brackets) == 0 -- if no brackets match,\
    \ return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0_688c60.lua:12:\
    \ malformed pattern (missing arguments to '%b')\nstack traceback:\n\t/tmp/tmp0_688c60.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp0_688c60.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  for i = 1, #brackets do\n    if brackets[i]\
    \ == \"(\" then\n      local opening = brackets[i]\n      local closing = brackets[i+1]\n\
    \      if not (opening==\"()\" or opening==\"[]\" or opening==\"{}\") then\n \
    \       return false\n      end\n      if not (closing==\"()\" or closing==\"\
    []\" or closing==\"{}\") then\n        return false\n      end\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphlnwv0ak.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphlnwv0ak.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal openings, closings = {}, {}\n\tfor _,\
    \ bracket in ipairs(brackets) do\n\t\tif bracket:sub(1,1) == \")\" then\n\t\t\t\
    table.insert(closings, bracket)\n\t\telseif bracket:sub(1,1) == \"(\" then\n\t\
    \t\ttable.insert(openings, bracket)\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\t\
    if #openings == 0 and #closings == 0 then\n\t\treturn false\n\telseif #openings\
    \ == 0 then\n\t\treturn true\n\telseif #closings == 0 then\n\t\treturn false\n\
    \telseif #openings == #closings then\n\t\treturn true\n\telse\n\t\treturn false\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4odlwy9.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe4odlwy9.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets ~= '()' then return false end\n\
    \    brackets = brackets:gsub(')(', '):'):gsub('(', '):')\n    brackets = brackets:gsub('):',\
    \ '(')\n    return brackets:match('^(()|()())$') == nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzywb7npy.lua:13:\
    \ invalid pattern capture\nstack traceback:\n\t/tmp/tmpzywb7npy.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmpzywb7npy.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[()]\", \"%1\")\n\
    \  local opening = brackets:sub(1, 1)\n  local closing = brackets:sub(2, 1)\n\
    \  return opening ~= closing and opening ~= \"}\" and closing ~= \"{\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp90hxb5e2.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp90hxb5e2.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening = brackets:sub(1,1)\n    local\
    \ closing = brackets:sub(2)\n    if opening == \"(\" and closing == \")\" then\n\
    \        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxw_1mj02.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxw_1mj02.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets ~= '()' then\n    return false\n\
    \  end\n  local opening = brackets:sub(1,1)\n  local closing = brackets:sub(2,2)\n\
    \  local openingCount = 1\n  local closingCount = 0\n  local openingCountLast\
    \ = 1\n  for i = #brackets, 1, -1 do\n    if brackets[i:sub(1,1)] == opening then\n\
    \      openingCount = openingCount + 1\n      if openingCountLast ~= openingCount\
    \ then\n        return false\n      end\n      openingCountLast = openingCount\n\
    \    elseif brackets[i:sub(1,1)] == closing then\n      closingCount = closingCount\
    \ + 1\n      if closingCountLast ~= closingCount then\n        return false\n\
    \      end\n      closingCountLast = closingCount\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu6kejxdf.lua:21:\
    \ attempt to index a number value (local 'i')\nstack traceback:\n\t/tmp/tmpu6kejxdf.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpu6kejxdf.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets == \"\" then\n    return true\n\
    \  end\n  local opening_brackets = brackets:gsub(\"^(%w+)\",\"\")\n  local closing_brackets\
    \ = brackets:gsub(\"(%w+)\",\"\")\n  for i = 1, #opening_brackets do\n    if opening_brackets[i]\
    \ == \"(\" then\n      local j = i\n      while j < #opening_brackets and opening_brackets[j]\
    \ == \")\" do\n        j = j + 1\n      end\n      if not closing_brackets then\n\
    \        return false\n      elseif j ~= i then\n        return false\n      end\n\
    \    else\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph76mf0my.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph76mf0my.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  if brackets == \"\" then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd420b36w.lua:33: 'end' expected (to close 'function' at line\
    \ 11) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n\tlocal opening = brackets:gsub(\"(%W)\", \"%1\"\
    )\n\tlocal closing = brackets:gsub(\"(%w%)\", \"%1\")\n\treturn opening:len()\
    \ == closing:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8v6wa9og.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8v6wa9og.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   return brackets:find(brackets[1]) == brackets:find(brackets[2])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7w33rqe3.lua:12:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp7w33rqe3.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp7w33rqe3.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   return brackets:find(brackets) ~= nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmposuu_l77.lua:12:\
    \ invalid pattern capture\nstack traceback:\n\t/tmp/tmposuu_l77.lua:12: in local\
    \ 'candidate'\n\t/tmp/tmposuu_l77.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_counts = {}\n  for _, paren in\
    \ string.gmatch(brackets, \"([^()]+)(%)\") do\n    opening_counts[paren] = opening_counts[paren]\
    \ + 1 or 1\n  end\n  for _, paren in string.gmatch(brackets, \"(%)\") do\n   \
    \ opening_counts[paren] = opening_counts[paren] - 1\n    if opening_counts[paren]\
    \ ~= 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe8ttplbz.lua:16:\
    \ unfinished capture\nstack traceback:\n\t/tmp/tmpe8ttplbz.lua:16: in local 'candidate'\n\
    \t/tmp/tmpe8ttplbz.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local brackets_count = brackets:len()\n  local\
    \ open_brackets = 0\n  for i = 1, brackets_count do\n    if brackets[i]:find(\"\
    (\") then\n      open_brackets = open_brackets + 1\n    end\n    if brackets[i]:find(\"\
    )\") then\n      open_brackets = open_brackets - 1\n    end\n  end\n  return open_brackets\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp09ct6l2r.lua:15:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp09ct6l2r.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp09ct6l2r.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
