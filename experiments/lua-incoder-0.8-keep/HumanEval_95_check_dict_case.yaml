name: HumanEval_95_check_dict_case
language: lua
prompt: "-- Given a dictionary, return True if all keys are strings in lower \n--\
  \ case or all keys are strings in upper case, else return False.\n-- The function\
  \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
  a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"a\"\
  :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
  a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
  Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n--\
  \ check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
  local function check_dict_case(dict)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}),\
  \ false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana',\
  \ ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age']\
  \ = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
  \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] =\
  \ 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if #dict == 0 then return false end\n    for k, v in pairs(dict)\
    \ do\n        if type(v) == \"string\" then\n            if v ~= k:lower() or\
    \ v ~= k:upper() then return false end\n        else\n            if type(v) ~=\
    \ \"table\" then return false end\n            if not check_dict_case(v) then\
    \ return false end\n        end\n    end\n    return true\nend", "   if dict ==\
    \ nil then\n      return false\n   end\n   for key, value in pairs(dict) do\n\
    \      -- if type(value) == 'string' then\n      --   if string.lower(value) ==\
    \ value then\n      --     return true\n      --   end\n      -- elseif type(value)\
    \ == 'table' then\n      --   if check_dict_case(value) then\n      --     return\
    \ true\n      --   end\n      -- end\n   end\n   return false\nend", "\tassert(type(dict)==\"\
    table\")\n\tlocal okay=true\n\tfor key in pairs(dict) do\n\t\tlocal lowercase=key:lower()\n\
    \t\tif lowercase:find(lowercase)==0 then\n\t\t\treturn false\n\t\telse\n\t\t\t\
    local uppercase=key:upper()\n\t\t\tif uppercase:find(uppercase)==0 then\n\t\t\t\
    \treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn okay\nend", "  local dict_size\
    \ = #dict\n  if dict_size == 0 then\n    return true\n  end\n  local true_keys\
    \ = {}\n  local false_keys = {}\n  local true_dict = {}\n  local false_dict =\
    \ {}\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string' or type(v) ~= 'string'\
    \ then\n      return false\n    end\n    local lower = k:lower()\n    local upper\
    \ = k:upper()\n    \n    if lower == k then\n      true_dict[lower] = true_dict[lower]\
    \ or true_dict[k]\n      true_keys[lower] = true_keys[lower] or true_keys[k]\n\
    \    else\n      false_dict[upper] = false_dict[upper] or false_dict[k]\n    \
    \  false_keys[upper] = false_keys[upper] or false_keys[k]\n    end\n  end\n  return\
    \ true_keys == dict_size and false_keys == dict_size\nend", "    local lowercase_keys\
    \ = true\n    local uppercase_keys = true\n    local values = false\n    for key,\
    \ value in pairs(dict) do\n        if type(key) == \"string\" then\n         \
    \   if key ~= key:lower() or key ~= key:upper() then \n                lowercase_keys\
    \ = false\n            end\n        else\n            uppercase_keys = false\n\
    \        end\n        -- We do not want to compare the values.\n        values\
    \ = false\n    end\n    \n    return lowercase_keys or uppercase_keys or values\n\
    end", "  local first_letter = true\n  local string_key\n  for string_key,value\
    \ in pairs(dict) do\n    if type(value) ~= \"string\" then\n      return false\n\
    \    end\n    if first_letter then\n      first_letter = false\n    else\n   \
    \   if not string.lower(string_key) or not string.lower(value) then\n        return\
    \ false\n      end\n    end\n  end\n  return true\nend", "    local is_upper =\
    \ true\n    for k,v in pairs(dict) do\n        if not is_upper and k~=string.lower(k)\
    \ then\n            return false\n        end\n        if not is_upper and k~=string.upper(k)\
    \ then\n            return false\n        end\n        if not is_upper and k~=string.gsub(k,\
    \ \"%S+\", \"\") then\n            return false\n        end\n        is_upper\
    \ = false\n    end\n    return true\nend", "  local key1, key2 = next(dict)\n\
    \  if not key1 or not key2 then return false end\n  \n  local key1str = tostring(key1)\n\
    \  local key2str = tostring(key2)\n  \n  local key1low = tolower(key1str)\n  local\
    \ key2low = tolower(key2str)\n  \n  return (key1low == key2low) or (key1str ==\
    \ key2str)\nend", "    local ret=true\n    for k, v in pairs(dict) do\n      \
    \  if type(v) ~= \"string\" then\n            ret=false\n            break\n \
    \       end\n    end\n    return ret\nend", "    local count = 0\n    for key,\
    \ value in pairs(dict) do\n        if type(value) == 'string' then\n         \
    \   count = count + 1\n        end\n    end", "  -- Check length of dictionary\n\
    \  if #dict == 0 then\n    return true\n  end", "  local flag = true\n  for k,v\
    \ in pairs(dict) do\n    if not (type(k) == \"string\" or type(k) == \"number\"\
    ) then \n      flag = False\n    end\n  end\n  return flag\nend", "   if type(dict)\
    \ ~= \"table\" then return false end\n   for k, v in pairs(dict) do\n      if\
    \ type(k) ~= \"string\" or k:upper() ~= k:lower() then\n         return false\n\
    \      end\n   end\n   return true\nend", "  if #dict == 0 then return false end\n\
    \  for key, value in pairs(dict) do\n    if type(value) == 'string' and tostring(value)\
    \ ~= tostring(value) then return false end\n  end\n  return true\nend", "  if\
    \ not dict then\n    return false\n  end\n  for k, v in pairs(dict) do\n    local\
    \ t = type(k)\n    if t == \"number\" then\n      -- integer\n      if k > 0 or\
    \ k < 0 then\n        return false\n      end\n    elseif t == \"string\" then\n\
    \      -- lower\n      if k:lower() == k:lower() then\n        return false\n\
    \      end\n      -- upper\n      if k:upper() == k:upper() then\n        return\
    \ false\n      end\n    elseif t ~= \"string\" and t ~= \"number\" then\n    \
    \  return false\n    end\n  end\n  return true\nend", "    local ok,ok2 = false\n\
    \    for k,v in pairs(dict) do\n        if type(k) == \"string\" and (k:lower()\
    \ == k or k:upper() == k) then\n            ok = true\n        elseif type(k)\
    \ == \"number\" then\n            ok2 = true\n        elseif type(k) ~= \"string\"\
    \ then\n            ok2 = true\n        end\n    end\n    return ok and ok2\n\
    end", "   assert(type(dict)==table or type(dict)==string, \"check_dict_case()\
    \ expects table or string.\")\n   assert(dict~=nil, \"check_dict_case() expects\
    \ non-empty table.\")\n   local ok = true\n   for k,v in pairs(dict) do\n    \
    \  ok = ok and type(k)==string\n      ok = ok and type(v)==string\n   end\n  \
    \ return ok\nend", "  -- Write your code here\n  local ok, count  = true, 0\n\
    \  for k, v in pairs(dict) do\n    count = count + 1\n    ok = ok and ( type(k)\
    \ == \"string\" and type(v) == \"string\" ) or ok\n  end\n  return not ok and\
    \ count > 0\nend", "    local result\n    if #dict == 0 then\n        return true\n\
    \    end", "    local upper = true\n    for key,value in pairs(dict) do\n    \
    \    if type(value) == 'string' and string.find(value, \"^%s*$\") then\n     \
    \       upper = false\n        else\n            return false\n        end\n \
    \   end\n    if upper then\n        for key,value in pairs(dict) do\n        \
    \    if type(value) == 'string' and string.find(value, \"%s*$\") then\n      \
    \          return false\n            end\n        end\n    end\n    return true\n\
    end", "  if dict == nil then\n    return true\n  else\n    for k,v in pairs(dict)\
    \ do\n      if not type(k) == \"string\" or not type(v) == \"string\" then\n \
    \       return false\n      end\n    end\n    return true\n  end\nend", "    if\
    \ not dict then\n        return false\n    end\n    for k,v in pairs(dict) do\n\
    \        if type(k) ~= 'string' then return false end\n        if k == 'Name'\
    \ or k == 'Age' or k == 'City' then return false end\n        if type(k) ~= 'string'\
    \ or k:byte() ~= k:lower():byte() then return false end\n        if type(v) ~=\
    \ 'string' or v:byte() ~= v:upper():byte() then return false end\n    end\n  \
    \  return true\nend", '   assert(type(dict) == "table")', "    if not dict then\n\
    \        return true\n    end\n    \n    if type(dict) ~= 'table' then\n     \
    \   return true\n    end\n    \n    for k,v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return true\n        end\n        \n        if\
    \ k ~= tostring(k) then\n            return true\n        end\n    end\n    \n\
    \    return false\nend", "    local upper_dict = {}\n    local lower_dict = {}\n\
    \    for k, v in pairs(dict) do\n        if k == upper_key(v) then\n         \
    \   upper_dict[k] = v\n        elseif k == lower_key(v) then\n            lower_dict[k]\
    \ = v\n        end\n    end\n    return #upper_dict == #lower_dict and #upper_dict\
    \ == 0 and #lower_dict == 0\nend", "  local is_lower_case_or_upper_case = true\
    \ \n  for key, value in pairs(dict) do\n    if type(value) == \"string\" then\n\
    \      local is_upper_case_or_lower_case = false \n      \n      if key:len()\
    \ > 0 and key:sub(1,1) == \"_\" then\n        is_upper_case_or_lower_case = true\
    \ \n      elseif key:len() > 0 and key:sub(1,1) == \".\" then\n        is_upper_case_or_lower_case\
    \ = false \n      end\n      \n      if is_lower_case_or_upper_case ~= is_upper_case_or_lower_case\
    \ then\n        is_lower_case_or_upper_case = is_upper_case_or_lower_case \n \
    \     end\n    end\n  end\n  return is_lower_case_or_upper_case\nend", "\tlocal\
    \ keys_to_check = {}\n\tfor k,v in pairs(dict) do\n\t\tif type(k) ~= 'string'\
    \ then return false end\n\t\tlocal k = k:lower()\n\t\tif k == 'state' or k ==\
    \ 'state' then k = 'state' end\n\t\tk = k:upper()\n\t\tif k == 'zip' or k == 'zip'\
    \ then k = 'zip' end\n\t\ttable.insert(keys_to_check, k)\n\tend\n\tfor k,v in\
    \ pairs(keys_to_check) do\n\t\tif dict[v] == nil then return false end\n\tend\n\
    \treturn true\nend", "    local retVal = true\n    for key, value in pairs(dict)\
    \ do\n        if type(key) ~= \"string\" then\n            retVal = false\n  \
    \          break\n        end\n    end\n    return retVal\nend", "    for k,v\
    \ in pairs(dict) do\n        if type(k) ~= \"string\" or type(v) ~= \"string\"\
    \ then return false end\n    end\n    return true\nend", "    local res = False\n\
    \    for k,v in pairs(dict) do\n        if type(k) == \"string\" then\n      \
    \      if v:lower() == v then\n                res = true\n            elseif\
    \ v:upper() == v then\n                res = true\n            end\n        end\n\
    \    end\n    return res\nend", "    if dict == nil then\n        return false\n\
    \    end\n    local allStrings = true\n    for k,v in pairs(dict) do\n       \
    \ if type(k) ~= 'string' then\n            allStrings = false\n            break\n\
    \        end\n        if tolower(k) ~= tolower(k) then\n            allStrings\
    \ = false\n            break\n        end\n    end\n    return allStrings\nend",
  "   local all_keys_are_case_sensitive\n   all_keys_are_case_sensitive = true\n \
    \  for key, value in pairs(dict) do\n      if type(value) ~= \"string\" then all_keys_are_case_sensitive\
    \ = false; break; end\n   end\n   return all_keys_are_case_sensitive\nend", " \
    \  if #dict == 0 then\n      return false\n   end\n   for k,v in pairs(dict) do\n\
    \      if type(k) ~= 'string' or type(v) ~= 'string' then\n         return false\n\
    \      end\n   end\n   return true\nend", "    if not dict then\n        return\
    \ false\n    end\n    local ok = true\n    for k,v in pairs(dict) do\n       \
    \ if type(k) ~= \"string\" then\n            ok = false\n            break\n \
    \       end\n        if type(k) ~= \"string\" then\n            ok = false\n \
    \           break\n        end\n    end\n    return ok\nend", "  local ok = true\n\
    \  local keys = dict:keys()\n  for i, k in ipairs(keys) do\n    if type(k) ~=\
    \ 'string' then\n      ok = false\n      break\n    end\n  end\n  \n  return ok\n\
    end", "    if not dict then\n        return false\n    end\n    local keys = {}\n\
    \    for k, v in pairs(dict) do \n        if type(k) ~= \"string\" then\n    \
    \        return false\n        end\n        k = k:lower()\n        if not k then\n\
    \            return false\n        end\n        k = k:upper()\n        if not\
    \ k then\n            return false\n        end\n        keys[#keys+1] = k\n \
    \   end\n    return true\nend", "  local upper_case_key = false\n  local lower_case_key\
    \ = false\n  for k, v in pairs(dict) do\n    if type(k) == \"string\" then\n \
    \     if k:upper() == k then\n        upper_case_key = true\n      elseif k:lower()\
    \ == k then\n        lower_case_key = true\n      end\n    end\n  end\n  return\
    \ upper_case_key and lower_case_key\nend", "    if not dict then\n        error(\"\
    Given dictionary is empty\")\n    end\n    for key,value in pairs(dict) do\n \
    \       if not is_string_lower(key) or not is_string_upper(key) then\n       \
    \     return false\n        end\n    end\n    return true\nend", "   if #dict\
    \ == 0 then\n      return false\n   end\n   local keys = terralib.newlist()\n\
    \   for k,v in pairs(dict) do\n      local k = k\n      if type(k) == 'number'\
    \ then\n         k = tostring(k)\n      end\n      table.insert(keys, k)\n   end\n\
    \   table.sort(keys)\n   for _, k in ipairs(keys) do\n      local v = dict[k]\n\
    \      if type(v) == 'number' then\n         v = tostring(v)\n      end\n    \
    \  if k ~= string.lower(k) or v ~= string.lower(v) then\n         return false\n\
    \      end\n   end\n   return true\nend", "   if #dict == 0 then\n      return\
    \ true\n   end\n   local allkeys = {}\n   for key, value in pairs(dict) do\n \
    \     if type(key) == \"string\" then\n         table.insert(allkeys, key)\n \
    \     else\n         if type(key[1]) == \"string\" then\n            table.insert(allkeys,\
    \ key[1])\n         end\n      end\n   end\n   if #allkeys == 0 then\n      return\
    \ true\n   else\n      for i = 1, #allkeys do\n         if allkeys[i]~=tostring(tolower(allkeys[i]))\
    \ then\n            return false\n         end\n      end\n      return true\n\
    \   end\nend", "  if #dict == 0 then\n    return false\n  else\n    for k, v in\
    \ pairs(dict) do\n      if type(k) ~= 'string' then\n        return false\n  \
    \    end\n      if type(v) ~= 'string' then\n        return false\n      end\n\
    \    end\n  end\n  return true\nend", "  local ok = true\n  for key,value in pairs(dict)\
    \ do\n    local lower_case_key = key:lower()\n    local upper_case_key = key:upper()\n\
    \    if lower_case_key == upper_case_key then\n      ok = false\n    elseif lower_case_key\
    \ ~= upper_case_key then\n      ok = false\n    end\n  end\n  return ok\nend",
  "  if not dict then return false end\n  for k, v in pairs(dict) do\n    if type(k)\
    \ ~= 'string' then\n      return false\n    end\n    if type(k) == 'string' and\
    \ k:upper() == k then return false end\n    if type(k) == 'string' and k:lower()\
    \ == k then return false end\n  end\n  return true\nend", "  -- Base case\n  if\
    \ #dict == 0 then\n    return true\n  end\n  -- Go through each key\n  for k,\
    \ v in pairs(dict) do\n    -- If key is not in lower case, return false\n    if\
    \ not v then\n      return false\n    end\n    -- If key is not in upper case,\
    \ return false\n    if not v:upper() then\n      return false\n    end\n  end\n\
    \  -- Return true if all keys are in lower case or all keys are in upper case\n\
    \  return true\nend", "  if dict:len() == 0 then return false end\n  local lower\
    \ = true\n  for k, v in pairs(dict) do\n    if not lower and type(k) ~= \"string\"\
    \ or type(v) ~= \"string\" then \n      lower = false\n    end\n  end\n  return\
    \ lower\nend", "    if not dict or #dict == 0 then \n        return false\n  \
    \  end\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string' or type(v)\
    \ ~= 'string' then return false end\n        local lower = k:lower()\n       \
    \ local upper = k:upper()\n        if lower == upper then return false end\n \
    \   end\n    return true\nend", "  local all_keys = false\n  local all_keys_lower\
    \ = false\n  local all_keys_upper = false\n  for k,v in pairs(dict) do\n    --\
    \ First check if this key is a string.\n    if type(k) ~= 'string' then return\
    \ false end\n    -- Now check if this key is a string.\n    if type(k) == 'string'\
    \ then\n      all_keys = true\n      -- Check if all strings are in lower case.\n\
    \      all_keys_lower = all_keys_lower or k:lower() == k\n      -- Check if all\
    \ strings are in upper case.\n      all_keys_upper = all_keys_upper or k:upper()\
    \ == k\n    end\n  end\n  return all_keys and all_keys_lower and all_keys_upper\n\
    end", "    if next(dict) == nil then\n        return false\n    end\n    for key,\
    \ value in pairs(dict) do\n        if type(key) ~= 'string' or type(key) ~= 'string'\
    \ then\n            return false\n        end\n        if tonumber(key) == 0 or\
    \ tonumber(key) == nil then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local bool = false\n    local count = 1\n    for\
    \ k,v in pairs(dict) do\n        if string.lower(k) ~= k then\n            bool\
    \ = false\n        elseif string.upper(k) ~= k then\n            bool = false\n\
    \        elseif k ~= \"STATE\" then\n            bool = false\n        elseif\
    \ v ~= k then\n            bool = false\n        end\n        count = count +\
    \ 1\n    end\n    if count ~= #dict then\n        bool = false\n    end\n    return\
    \ bool\nend", "  local ok, err = false\n  if #dict == 0 then\n    return ok, err\n\
    \  end\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string' or type(v) ~=\
    \ 'string' then\n      ok = false\n    end\n  end\n  return ok, err\nend", " \
    \ if #dict == 0 then return false end\n  for k, v in pairs(dict) do\n    if type(k)\
    \ ~= 'string' then\n      return false\n    end\n    if type(v) ~= 'string' then\n\
    \      return false\n    end\n  end\n  return true\nend", "    local keys = {}\n\
    \    for k,v in pairs(dict) do\n        if type(k) ~= 'string' or type(v) ~= 'string'\
    \ then\n            return false\n        end\n        keys[k] = true\n    end\n\
    \    for key in pairs(keys) do\n        if key ~= string.lower(key) or key ~=\
    \ string.upper(key) then\n            return false\n        end\n    end\n   \
    \ return true\nend", "\tlocal flag = true\n\tfor k,v in pairs(dict) do\n\t\tif\
    \ not (type(k) == \"string\" and type(v) == \"string\") then\n\t\t\tflag = False\n\
    \t\t\tbreak\n\t\tend\n\tend\n\treturn flag\nend", "  for k,v in pairs(dict) do\n\
    \    if type(k) ~= \"string\" then\n      return false\n    end\n    if type(k)\
    \ ~= \"string\" then\n      return false\n    end\n  end\n  return true\nend\n\
    </textarea></form>\n    <script>\n      var editor = CodeMirror.fromTextArea(document.getElementById(\"\
    code\"), {\n        lineNumbers: true,\n        matchBrackets: true,\n       \
    \ mode: \"text/x-lua\"\n      });\n    </script>\n    <p>\n      Themes are powered\
    \ by <a href=\"http://codemirror.net\" target=\"_blank\">CodeMirror</a>\n    \
    \  (also included in <a href=\"../theme/clouds.html\">Clouds</a>).\n    </p>\n\
    \    <p>\n      The W3C <a href=\"http://www.w3.org/Style/CSS/Test/CSS3/Selector/test.html\"\
    >Selector</a> tests\n      provide a framework for constructing simple selectors.\
    \ They build upon the following theory:\n    </p>\n    <ul>\n      <li>\n    \
    \    All <code>a</code>, <code>area</code>, <code>link</code>, <code>script</code>,\n\
    \        <code>style</code>, and <code>title</code> elements are determined to\
    \ match \n        <code>:link</code>, <code>:any-link</code>, <code>:visited</code>,\
    \ \n        <code>:local-link</code>, <code>:local</code> and <code>:target</code>\n\
    \        (when appropriate), as well as any value selected by <code>:target</code>.\n\
    \      </li>\n      <li>\n        Any <code>input</code> element with an <code>id</code>\
    \ attribute matching the\n        test string <code>[\\\\w-]+</code> (where <code>\\\
    \\w</code> matches any alphanumeric\n        character) selected by <code>:link</code>,\
    \ <code>:any-link</code>, \n        <code>:visited</code>, <code>:local-link</code>,\
    \ <code>:local</code>, \n        <code>:target</code>, or an <code>area</code>\
    \ element with a <code>name</code> attribute\n        that matches the test string\
    \ <code>[\\\\w-]+</code> selected by \n        <code>:any-link</code>, <code>:visited</code>,\
    \ <code>:local-link</code>, \n        <code>:local</code>, <code>:target</code>,\
    \ or <code>input</code>\n        with a <code>name</code> attribute that matches\
    \ the test string <code>[\\\\w-]+</code>\n        selected by <code>:link</code>,\
    \ <code>:any-link</code>, \n        <code>:visited</code>, <code>:local-link</code>,\
    \ <code>:local</code>, \n        <code>:target</code>.\n      </li>\n      <li>\n\
    \        Any <code>a</code>, <code>area</code>, <code>link</code>, <code>script</code>,\n\
    \        <code>style</code>, or <code>title</code> element selected by <code>:link</code>,\n\
    \        <code>:any-link</code>, <code>:visited</code>, <code>:local-link</code>,",
  "    if type(dict) == \"table\" then\n        if #dict == 0 then\n            return\
    \ false\n        end\n        for k,v in pairs(dict) do\n            if type(k)\
    \ ~= \"string\" then\n                return false\n            end\n        \
    \    if k:gsub(\"^%l\",\"\") ~= k:gsub(\"^%U\",\"\") then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    return\
    \ false\nend", "    local upper = string.rep(string.upper, string.len(dict))\n\
    \    local lower = string.rep(string.lower, string.len(dict))\n    for key,value\
    \ in pairs(dict) do\n        if type(key) ~= 'string' then\n            return\
    \ false\n        end\n        if type(key) == lower then\n            if type(key)\
    \ ~= upper then\n                return false\n            end\n        elseif\
    \ type(key) == upper then\n            if type(key) ~= lower then\n          \
    \      return false\n            end\n        else\n            return false\n\
    \        end\n    end\n    return true\nend", "  for k, v in pairs(dict) do\n\
    \    if type(k) ~= 'string' or k:upper() ~= k:lower():find(k:lower():upper())\
    \ == nil then\n      return false\n    end\n  end\n  return true\nend", "  if\
    \ not dict then return false end\n  for k,v in pairs(dict) do\n    if type(v)\
    \ ~= 'string' then return false end\n    local lower = k:lower()\n    local upper\
    \ = k:upper()\n    if lower ~= upper then return false end\n  end\n  return true\n\
    end", "    local ok,msg\n    if not dict then\n        return true\n    end",
  "\tlocal result = true\n\tfor k,v in pairs(dict) do\n\t\tif not isstring(k) then\n\
    \t\t\treturn false\n\t\telseif not isstring(v) then\n\t\t\treturn false\n\t\t\
    elseif not k:lower():find(v:lower())~=0 then\n\t\t\treturn false\n\t\telseif not\
    \ k:upper():find(v:upper())~=0 then\n\t\t\treturn false\n\t\telse\n\t\t\tresult\
    \ = false\n\t\tend\n\tend\n\treturn result\nend", "  for k,v in pairs(dict) do\n\
    \    if type(k) ~= 'string' or k ~= k:lower() or k ~= k:upper() then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  for k, v in pairs(dict) do\n\
    \    if type(k) ~= 'string' or type(v) ~= 'string' then\n      return false\n\
    \    end\n  end\n  return true\nend", "    if not dict then\n        return false\n\
    \    end", "  local result=true\n  local keys={}\n  for k,v in pairs(dict) do\
    \ keys[k]=v end\n  for k,v in pairs(keys) do\n    if type(v) == \"string\" then\n\
    \      if k:lower():find(v:lower()) ~= nil then\n        if k:upper():find(v:upper())\
    \ ~= nil then\n          result=false\n        end\n      elseif k:upper():find(v:upper())\
    \ ~= nil then\n        result=false\n      end\n    end\n  end\n  return result\n\
    end", "  local upper = dict\n  upper = upper\n  upper[#upper+1] = \"key\"\n  local\
    \ lower = {}\n  local count = 0\n  for key, value in pairs(dict) do\n    lower[#lower+1]\
    \ = key\n  end\n  for key, value in pairs(dict) do\n    if type(key) == 'string'\
    \ then\n      count = count + 1\n      if upper[key] ~= lower[key] then\n    \
    \    return false\n      end\n    end\n  end\n  if count ~= #dict then\n    return\
    \ false\n  end\n  return true\nend", "   if #dict == 0 then\n      return false\n\
    \   end", "  -- Write your code here\n  local ok = True\n  for k, v in pairs(dict)\
    \ do\n    if type(k) ~= \"string\" then\n      return false\n    end\n    if type(k)\
    \ ~= \"string\" then\n      return false\n    end\n  end\n  return true\nend",
  "\tlocal keys={}\n\t-- Extract all the keys into a vector.\n\tfor key in pairs(dict)\
    \ do table.insert(keys, key) end\n\t-- Return true if all keys are strings in\
    \ lower case or all keys are strings in upper case.\n\treturn (check_keys(keys)\
    \ and check_keys(string.rep(\"upper\", #keys)) or (check_keys(keys) and check_keys(string.rep(\"\
    lower\", #keys))))\nend", "   if #dict == 0 then return false end\n   for k, v\
    \ in pairs(dict) do\n      if type(k) ~= 'string' or (type(v) ~= 'string' and\
    \ v) then return false end\n      if k ~= v:lower() then return false end\n  \
    \ end\n   return true\nend", "   for key, value in pairs(dict) do\n      if type(key)\
    \ == \"string\" then\n         if string.lower(key) == key or string.upper(key)\
    \ == key then\n            return true\n         else\n            return false\n\
    \         end\n      else\n         if type(value) == \"string\" then\n      \
    \      if string.lower(value) == value or string.upper(value) == value then\n\
    \               return true\n            else\n               return false\n \
    \           end\n         else\n            return false\n         end\n     \
    \ end\n   end\n   return true\nend", "  for key,value in pairs(dict) do\n    if\
    \ type(key) == \"string\" then\n      if type(key) == \"string\" then\n      \
    \  local lower_key = key:lower()\n        local upper_key = key:upper()\n    \
    \    if lower_key == upper_key then\n          return true\n        end\n    \
    \  end\n    end\n  end\n  return false\nend", "    local check_dict = true\n \
    \   if dict ~= nil then\n        for key in pairs(dict) do\n            if type(key)\
    \ ~= 'string' then\n                check_dict = false\n            end\n    \
    \    end\n    end\n    return check_dict\nend", "  assert(type(dict)=='table')\n\
    \  for key,value in pairs(dict) do\n    if not type(value) ==type(key) then\n\
    \      return false\n    end\n    if type(value) == 'string' and tostring(value)\
    \ ~= tostring(key) then\n      return false\n    end\n  end\n  return true\nend",
  "    for key,value in pairs(dict) do\n        if key ~= tostring(key) or key ~=\
    \ tostring(value) then\n            return false\n        end\n    end\n    return\
    \ true\nend", "   if dict == nil then return false end\n   for k in pairs(dict)\
    \ do\n      if type(k) ~= 'string' then return false end\n      if type(k) ==\
    \ 'string' and k ~= k:lower() and k ~= k:upper() then return false end\n   end\n\
    \   return true\nend", "   if dict == nil or #dict == 0 then\n      return false\n\
    \   elseif type(dict) == \"table\" then\n      for k,v in pairs(dict) do\n   \
    \      if type(k) ~= \"string\" or k:lower() ~= k then\n            return false\n\
    \         end\n         if type(v) ~= \"string\" or v:upper() ~= v then\n    \
    \        return false\n         end\n      end\n      return true\n   else\n \
    \     return false\n   end\nend", "\tlocal is_lowercase_keys = false\n\tlocal\
    \ is_uppercase_keys = false\n\t\n\t-- Check if dict is not empty.\n\tif not dict\
    \ then\n\t\treturn false\n\tend", "    local function check_val(val)\n       \
    \ if type(val) ~= 'string' then\n            return false\n        end\n     \
    \   local lower = val:lower()\n        local upper = val:upper()\n        return\
    \ lower == upper or (lower == upper and lower ~= '')\n    end\n    local function\
    \ check_keys(keys)\n        if type(keys) ~= 'table' then\n            return\
    \ false\n        end\n        local l = #keys\n        for k = 1, l do\n     \
    \       local key = keys[k]\n            if not check_val(val) then\n        \
    \        return false\n            end\n        end\n        return l == 0\n \
    \   end\n    return check_keys(dict) and check_keys(dict)\nend", "  local has_upper\
    \ = false\n  local has_lower = false\n  for k, v in pairs(dict) do\n    has_upper\
    \ = has_upper or k:upper()\n    has_lower = has_lower or k:lower()\n  end\n  return\
    \ not has_upper or not has_lower or #dict == 0\nend", "  local retval = true\n\
    \  -- Check for empty dictionary.\n  if #dict == 0 then\n    return retval\n \
    \ end", "  if not dict then\n    return false\n  end", "\tlocal keys = {}\n\t\
    for k,v in pairs(dict) do\n\t\ttable.insert(keys, k)\n\tend\n\tfor k,v in pairs(dict)\
    \ do\n\t\tif type(k) ~= 'string' or k:upper() ~= k:lower():lower() or k:upper()\
    \ ~= k:lower():upper() then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "    if #dict == 0 then\n        return false\n    end\n    local lower\
    \ = {}\n    local upper = {}\n    for key, value in pairs(dict) do\n        if\
    \ type(value) == 'string' then\n            lower[tolower(key)] = key\n      \
    \      upper[toupper(key)] = key\n        else\n            if lower(value) ==\
    \ lower(key) then\n                lower(value) = nil\n            else\n    \
    \            lower(value) = nil\n                upper(value) = nil\n        \
    \    end\n        end\n    end\n    for key, value in pairs(dict) do\n       \
    \ if type(value) ~= 'string' and lower(value) == lower(key) then\n           \
    \ return false\n        elseif type(value) ~= 'string' and upper(value) == upper(key)\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local upperCase, lowerCase, noCase = false, false, false\n    for key, value\
    \ in pairs(dict) do\n        if value ~= nil and type(value) == \"string\" then\n\
    \            if string.lower(value) == value then\n                lowerCase =\
    \ true\n            elseif string.upper(value) == value then\n               \
    \ upperCase = true\n            else\n                noCase = true\n        \
    \    end\n        end\n    end\n    return upperCase and lowerCase and noCase\n\
    end", "\tlocal keys = {}\n\tfor key in pairs(dict) do\n\t\ttable.insert(keys,\
    \ key)\n\tend\n\ttable.sort(keys)\n\tfor _, key in pairs(keys) do\n\t\tlocal lower,\
    \ upper = string.lower(key), string.upper(key)\n\t\tif lower == upper then\n\t\
    \t\treturn true\n\t\telseif lower ~= upper then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend", "    local retval = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' or k:upper() ~= k then\n            retval\
    \ = false\n            break\n        end\n    end\n    return retval\nend", " \
    \   local lowercase_keys = {}\n    local uppercase_keys = {}", "   local result\
    \ = {}\n   for key, value in pairs(dict) do\n      if not type(value)==\"string\"\
    \ then\n         result[#result+1] = {key}\n      else\n         if tonumber(value)==value\
    \ or tonumber(value)==tonumber(value) then\n            result[#result+1] = {key}\n\
    \         else\n            result[#result+1] = {key, \"Wrong format for dictionary\"\
    }\n         end\n      end\n   end\n   return #result == #dict:len() and true\
    \ or false\nend", "    if not dict then\n        return false\n    end\n    for\
    \ k, v in pairs(dict) do\n        if v ~= nil and type(k) == type(v) and v:lower()\
    \ then\n            return true\n        end\n        if v ~= nil and type(k)\
    \ == type(v) and v:upper() then\n            return true\n        end\n    end\n\
    \    return false\nend", "   for k, v in pairs(dict) do\n      if not is_string(k)\
    \ or (not is_string(v) and v ~= k) then\n         return false\n      end\n  \
    \ end\n   return true\nend", "  local all_strings = true\n  for key in pairs(dict)\
    \ do\n    if not (type(key) == \"string\" or type(key) == \"number\") then\n \
    \     all_strings = false\n      break\n    end\n  end\n  return all_strings\n\
    end", "   for key in pairs(dict) do\n      if type(key) ~= \"string\" then\n \
    \        return false\n      else\n         local first_char = string.sub(tostring(key),\
    \ 1, 1)\n         if first_char == string.lower or first_char == string.upper\
    \ then\n            return true\n         else\n            return false\n   \
    \      end\n      end\n   end\nend", "\tlocal keys = {}\n\tfor k, v in pairs(dict)\
    \ do table.insert(keys, k) end\n\tif #keys == 0 then return false end\n\tfor i\
    \ = 1, #keys do\n\t\tif not (type(keys[i]) ~= \"string\" or keys[i]:lower() ==\
    \ keys[i]) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  \
    \  local result = true\n    for k,v in pairs(dict) do\n        if type(k) ~= \"\
    string\" then\n            result = false\n        end\n        if type(v) ~=\
    \ \"string\" then\n            result = false\n        end\n    end\n    return\
    \ result\nend", "    local is_in_lower_case = false\n    local is_in_upper_case\
    \ = false\n    local is_in_all_caps = false", "   if dict == nil then\n      return\
    \ false\n   end\n   for key, value in pairs(dict) do\n      if type(key) ~= \"\
    string\" then\n         return false\n      end\n      if type(key) ~= \"string\"\
    \ and type(key) ~= \"number\" then\n         return false\n      end\n      if\
    \ type(key) == \"string\" then\n         if key:lower() ~= key:upper() then\n\
    \            return false\n         end\n      end\n   end\n   return true\nend",
  "  if dict==nil then return false end\n  for k, v in pairs(dict) do\n    if type(k)\
    \ ~= 'string' then return false end\n    if string.lower(k) ~= k then return false\
    \ end\n    if string.upper(k) ~= k then return false end\n  end\n  return true\n\
    end", "    -- Write your code here.\n    local count = 0\n    for key, value in\
    \ pairs(dict) do\n        if type(value) ~= \"string\" or value == \"\" then\n\
    \            count = count + 1\n        end\n    end\n    if count == 0 then\n\
    \        return true\n    else\n        return false\n    end\nend", "  local\
    \ result = true\n  for key, val in pairs(dict) do\n    if type(val) ~= \"string\"\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend",
  "    for key, value in pairs(dict) do\n        if type(key) ~= 'string' then\n \
    \           return false\n        end\n        if type(key) ~= 'string' then\n\
    \            return false\n        end\n        if string.lower(key) == key then\n\
    \            return true\n        end\n        if string.upper(key) == key then\n\
    \            return true\n        end\n    end\n    return false\nend", "   if\
    \ #dict == 0 then\n      return true\n   elseif #dict == 1 then\n      return\
    \ all(k == '' or k == '*' for k,v in pairs(dict))\n   else\n      return all(k\
    \ == '' or k == '*' or check_dict_case(tostring(k) and tostring(v) and \n    \
    \     tostring(k) == tostring(v))\n                 for k,v in pairs(dict))\n\
    \   end\nend", "    local ok, err = check_condition(type(dict) == \"table\", \"\
    check_dict_case: dictionary is not a table\")\n    if not ok then\n        return\
    \ false, err\n    end\n    local new_dict = make_dict_with_case_insensitive_checks(dict)\n\
    \    local ok, err = check_condition(type(new_dict) == \"table\", \"check_dict_case:\
    \ dictionary has non-string keys\")\n    if not ok then\n        return false,\
    \ err\n    end\n    local all_keys_are_upper_case = true\n    local all_keys_are_lower_case\
    \ = true\n    for k, v in pairs(new_dict) do\n        if type(k) ~= \"string\"\
    \ then\n            return false, (\"check_dict_case: dictionary keys is not strings\
    \ in either upper or lower case: \" .. tostring(k) .. \", \" .. tostring(v))\n\
    \        end\n        local ok, err = check_condition((type(k) == \"string\")\
    \ and (not (string.lower(k) == k) and (not (string.upper(k) == k))), \"check_dict_case:\
    \ dictionary keys is not strings in either upper or lower case: \" .. tostring(k)\
    \ .. \", \" .. tostring(v))\n        if not ok then\n            return false,\
    \ err\n        end\n        if string.lower(v) ~= v then\n            all_keys_are_lower_case\
    \ = false\n        end\n        if string.upper(v) ~= v then\n            all_keys_are_upper_case\
    \ = false\n        end\n    end\n    if all_keys_are_upper_case and all_keys_are_lower_case\
    \ then\n        return true\n    else\n        return false\n    end\nend", " \
    \ local case_dict={}\n  local check_key=false\n  for key,value in pairs(dict)\
    \ do\n    local case_key=key:lower()\n    local case_value=value:lower()\n   \
    \ if case_key~=case_value then\n      check_key=true\n      case_dict[case_key]=case_value\n\
    \    end\n  end\n  return check_key\nend", "  -- Base case.\n  if dict == nil\
    \ then\n    return true\n  end\n  -- Iterate over the keys of the dictionary and\
    \ check each key.\n  for k,v in pairs(dict) do\n    -- If the given dictionary\
    \ entry is a string, then all keys are in lower case\n    -- or all keys are in\
    \ upper case, return true. \n    if type(k) == 'string' then\n      -- Check each\
    \ string key against the given dictionary key. If the given \n      -- dictionary\
    \ key is a lower case string, the string key must be lower case,\n      -- else\
    \ if the given dictionary key is an upper case string, the string key must\n \
    \     -- be upper case. \n      if type(k) ~= 'string' then\n        for k2,v2\
    \ in pairs(k) do\n          -- If the given dictionary key is a lower case string,\
    \ the string key \n          -- must be lower case, else if the given dictionary\
    \ key is an upper \n          -- case string, the string key must be upper case.\n\
    \          if not (v2 == nil) then\n            if type(v2) == 'string' then\n\
    \              if lower(k) == lower(v2) then \n                return true\n \
    \             end\n              if upper(k) == upper(v2) then\n             \
    \   return true\n              end\n            end\n          end\n        end\n\
    \      end\n    end\n  end\n  return false\nend", "  for k, v in pairs(dict) do\n\
    \    if not is_string(k) or not is_string(v) then\n      return false\n    end\n\
    \  end", "    if #dict == 0 then\n        return false\n    end\n    local keys\
    \ = setmetatable({}, {__mode = \"v\"})\n    for key,value in pairs(dict) do\n\
    \        if type(value) == \"string\" then\n            if string.find(key, \"\
    ^[a-z]$\") or string.find(key, \"^[A-Z]$\") then\n                keys[key]:add(key)\n\
    \            end\n        end\n    end\n    for key,value in pairs(keys) do\n\
    \        if #value > 1 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    if dict == nil then\n        return false\n    end\n\
    \    for k, v in pairs(dict) do\n        if type(v) == \"string\" then\n     \
    \       if k ~= v then\n                return false\n            end\n      \
    \  end\n    end\n    return true\nend", "  local count = 0\n  for k,v in pairs(dict)\
    \ do\n    if k:sub(1,1) ~= v:sub(1,1) then\n      count = count + 1\n    end\n\
    \  end\n  if count == 0 then\n    return true\n  else\n    return false\n  end\n\
    end", "  local str_to_lower = string.gsub\n  local str_to_upper = string.gsub",
  "   assert(type(dict) == \"table\" and #dict > 0)\n   for k,v in pairs(dict) do\n\
    \      assert(type(k) == \"string\" and type(v) == \"string\")\n      assert(#k\
    \ <= 1 and #v <= 1)\n   end\n   return true\nend", "    -- base case\n    if #dict\
    \ == 0 then\n        return true\n    end", "   if #dict == 0 then\n      return\
    \ false\n   end\n   for key, value in pairs(dict) do\n      if not (type(key)\
    \ == \"string\" or type(key) == \"number\" or type(value) == \"string\" or type(value)\
    \ == \"number\") then\n         return false\n      end\n   end\n   return true\n\
    end", "   if dict == nil then\n      return false\n   else\n      for k,v in pairs(dict)\
    \ do\n         if type(k) == \"string\" and type(v) == \"string\" then\n     \
    \       if k:lower():find(v:lower()) == 0 then\n               return true\n \
    \           end\n         end\n      end\n      return false\n   end\nend", " \
    \   local new_dict = {}\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ \"string\" and k == tolower(k) then\n            new_dict[tolower(k)] = v\n\
    \        elseif type(k) == \"string\" and k == toupper(k) then\n            new_dict[toupper(k)]\
    \ = v\n        else\n            return false\n        end\n    end\n    return\
    \ #new_dict == 0 and true or false\nend\n</code>\nAnd now the function check_dict_key\
    \ which takes a dictionary as input and checks if the keys are all strings in\
    \ lower case or all strings in upper case:\n<code>", "   if dict == nil or #dict\
    \ == 0 then return false end\n   for k, v in pairs(dict) do\n      if type(v)\
    \ == \"string\" then\n         if v:lower() == v then\n            return true\n\
    \         elseif v:upper() == v then\n            return true\n         else\n\
    \            return false\n         end\n      else\n         return false\n \
    \     end\n   end\n   return true\nend", "    local keys = table.keys(dict)\n\
    \    if not #keys then\n        return false\n    end\n    local lower_keys =\
    \ {}\n    local upper_keys = {}\n    for i, key in pairs(keys) do\n        local\
    \ is_upper = string.find(key, \"[A-Z]\", 1, true)\n        if is_upper then\n\
    \            table.insert(upper_keys, key)\n        else\n            table.insert(lower_keys,\
    \ key)\n        end\n    end\n    return #lower_keys == #upper_keys\nend", " \
    \  local result = true\n   for k,v in pairs(dict) do\n      if type(k) ~= \"string\"\
    \ then\n         if type(k) ~= \"number\" then\n            result = false\n \
    \        end\n      end\n   end\n   return result\nend", "  if #dict == 0 then\n\
    \    return false\n  end\n  local is_upper_case = false\n  for k, v in pairs(dict)\
    \ do\n    local is_string_upper_case = true\n    for letter in string.gsub(string.lower(v),\
    \ \"%c\", \"%c\") do\n      if not letter == letter then\n        is_string_upper_case\
    \ = false\n        break\n      end\n    end\n    if is_string_upper_case ~= is_upper_case\
    \ then\n      return false\n    end\n    if #k > 0 then\n      is_upper_case =\
    \ is_string_upper_case\n    end\n  end\n  return is_upper_case\nend", "  local\
    \ uppercase = true\n  local lowercase = true\n  for key, value in pairs(dict)\
    \ do\n    uppercase, lowercase = check_dict_case(key), check_dict_case(value)\n\
    \  end\n  return uppercase and lowercase\nend", "    local is_in_lower_case =\
    \ true -- True or False\n    local is_in_upper_case = true -- True or False",
  "  local result\n  for k, v in pairs(dict) do\n    if type(k) ~= \"string\" then\
    \ return false end\n    if k:lower():sub(1,1) == k:upper():sub(1,1) then return\
    \ true end\n  end\n  return false\nend", "  if #dict == 0 then\n    return true\n\
    \  end\n  for k, v in pairs(dict) do\n    local s = type(k) == 'string' and tostring(k)\
    \ or tostring(k)\n    local u = type(v) == 'string' and tostring(v) or tostring(v)\n\
    \    if s == u then\n      -- No need to check the values.\n    elseif s == 'string'\
    \ and u == 'string' then\n      return false\n    end\n  end\n  return true\n\
    end", "   local result = false\n   for k,v in pairs(dict) do\n      if type(k)\
    \ ~= \"string\" then\n         result = true\n         break\n      end\n    \
    \  if type(k) ~= \"string\" and type(k) ~= \"number\" then\n         result =\
    \ true\n         break\n      end\n   end\n   return result\nend\n   ", "  for\
    \ k,v in pairs(dict) do\n    if type(k) ~= \"string\" then\n      if type(k) ~=\
    \ \"number\" then\n        return false\n      else\n        return true\n   \
    \   end\n    end\n  end\n  return true\nend", "    local ok, err = pcall(function()\n\
    \        for k, v in pairs(dict) do\n            local key = tostring(k)\n   \
    \         if key == \"name\" then\n                if tonumber(k) ~= k then\n\
    \                    return false\n                end\n            else\n   \
    \             if tonumber(k) ~= tonumber(k) then\n                    return false\n\
    \                end\n            end\n        end\n        \n        return true\n\
    \    end)\n    if ok then return true end\n    print(\"check_dict_case: \" ..\
    \ err .. \" returned \" .. ok .. \" instead of true\")\n    return false\nend",
  "  local result = false\n  if #dict > 0 then\n    local key_count = 0\n    local\
    \ upper = false\n    local lower = false\n    for key, value in pairs(dict) do\n\
    \      if type(value) == \"string\" then\n        if upper and lower then return\
    \ false end\n        if key == upper then upper = true else lower = true end\n\
    \      elseif type(value) == \"table\" then\n        if not check_dict_case(value)\
    \ then return false end\n      else\n        return false\n      end\n      key_count\
    \ = key_count + 1\n    end\n    if key_count == 1 then\n      if upper then lower\
    \ = false else upper = false end\n      if lower and upper then return false end\n\
    \      result = true\n    end\n  end\n  return result\nend", "    local keys =\
    \ #dict\n    for i = 1,keys do\n        if type(dict[i]) ~= \"string\" then\n\
    \            return false\n        end\n    end\n    return true\nend", "   if\
    \ #dict == 0 then\n      return false\n   end\n   local true = true\n   for key,\
    \ val in pairs(dict) do\n      if type(key) ~= \"string\" then\n         true\
    \ = false\n      elseif key ~= tolower(key) or key ~= toupper(key) then\n    \
    \     true = false\n      elseif type(val) ~= \"string\" then\n         true =\
    \ false\n      elseif val ~= tolower(val) or val ~= toupper(val) then\n      \
    \   true = false\n      end\n   end\n   return true\nend", "   for k,v in pairs(dict)\
    \ do\n      if type(k) ~= \"string\" then\n         return false\n      end\n\
    \      if type(v) ~= \"string\" then\n         return false\n      end\n   end\n\
    \   return true\nend", "    if not dict then\n        return false\n    end\n\
    \    \n    for key,value in pairs(dict) do\n        if not value then\n      \
    \      return false\n        end\n        \n        if type(key) ~= 'string' or\
    \ type(key) ~= 'number' then\n            return false\n        end\n    end\n\
    \    \n    return true\nend", "    local ok, ret = {}, {}\n    for k,v in pairs(dict)\
    \ do\n        if type(k) == \"string\" then\n            table.insert(ok, k)\n\
    \        else\n            table.insert(ret, k)\n        end\n    end\n    return\
    \ #ok == 0 and #ret == 0\nend", "  for k,v in pairs(dict) do\n    if type(v) ==\
    \ \"string\" then\n      if v:lower() == v then\n        return true\n      end\n\
    \      if v:upper() == v then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "    local bool = #dict > 0 and false\n    for k,v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            bool = bool and false\n\
    \        elseif v:lower() == v:upper() then\n            bool = bool and true\n\
    \        else\n            bool = bool and false\n        end\n    end\n    return\
    \ bool\nend", "    local uppercase\n    local lowercase\n    uppercase = true\n\
    \    lowercase = true\n    for key, value in pairs(dict) do\n        if type(value)\
    \ == 'string' then\n            if uppercase and key ~= tostring(toupper(key))\
    \ then\n                uppercase = false\n            end\n            if lowercase\
    \ and key ~= tostring(tolower(key)) then\n                lowercase = false\n\
    \            end\n        else\n            uppercase = false\n            lowercase\
    \ = false\n        end\n    end\n    return uppercase and lowercase\nend", " \
    \   if dict[FIRST_KEY]~= FIRST_KEY or dict[LAST_KEY]~= LAST_KEY then\n       \
    \ return false\n    end\n    local keys = {}\n    for k, v in pairs(dict) do\n\
    \        if k:sub(1,1) ~= LOWER_KEY:sub(1,1) then\n            keys[#keys+1] =\
    \ v\n        else\n            if not v:sub(2,2) ~= UPPER_KEY:sub(1,1) then\n\
    \                return false\n            end\n        end\n    end\n    if #keys\
    \ == 0 then\n        return true\n    else\n        return false\n    end\nend",
  "  local lower, upper = false, false\n  for key in pairs(dict) do lower = lower\
    \ or #key==1 or (key:sub(1,1) == key:sub(2:end)) end\n  for key in pairs(dict)\
    \ do upper = upper or #key==1 or (key:sub(1,1) ~= key:sub(2:end)) end\n  return\
    \ (lower or upper)\nend", "    local first_key = next(dict)\n    local second_key\
    \ = next(dict)\n    if first_key ~= second_key then\n        return false\n  \
    \  end\n    local first_value = dict[first_key]\n    local second_value = dict[second_key]\n\
    \    if type(first_value) == \"string\" and type(second_value) == \"string\" then\n\
    \        return true\n    elseif type(first_value) == \"string\" then\n      \
    \  return false\n    elseif type(second_value) == \"string\" then\n        return\
    \ false\n    else\n        return false\n    end\nend", "    if #dict == 0 then\n\
    \        return false\n    end\n    for _, v in ipairs(dict) do\n        if type(v)\
    \ == \"string\" then\n            if v:lower() == v then\n                return\
    \ true\n            end\n        else\n            if v:upper() == v then\n  \
    \              return true\n            end\n        end\n    end\n    return\
    \ false\nend", "  if #dict == 0 then\n    return false\n  end\n  for k,v in pairs(dict)\
    \ do\n    if not k:match(\"^[A-Z]\") then\n      return false\n    end\n  end\n\
    \  return true\nend", "\tif dict == nil then return false end\n\tfor key, value\
    \ in pairs(dict) do\n\t\tif not check_dict_case(value) then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "  local res = true\n  for k in pairs(dict)\
    \ do\n    if not is_string(k) then\n      res = false\n      break\n    end\n\
    \  end\n  return res\nend", "    local is_first_key = true\n    local is_upper_case\
    \ = false\n    local is_lower_case = false\n    local is_ok = false\n    for k,\
    \ v in pairs(dict) do\n        if is_first_key then\n            is_first_key\
    \ = false\n        else\n            is_ok = false\n        end\n        if is_upper_case\
    \ and tonumber(k) == k then\n            is_upper_case = false\n        elseif\
    \ is_lower_case and toupper(k) == k then\n            is_lower_case = false\n\
    \        else\n            is_ok = true\n        end\n        if is_ok then\n\
    \            if tonumber(v) == v then\n                is_ok = true\n        \
    \    elseif toupper(v) == v then\n                is_ok = true\n            else\n\
    \                is_ok = false\n            end\n        end\n    end\n    return\
    \ is_ok\nend", "  local result=true\n  for k in pairs(dict) do\n    local v=dict[k]\n\
    \    if type(k) ~= \"string\" then\n      if not (type(k) ~= \"number\") then\n\
    \        result=false\n      end\n    end\n    if type(v) == \"string\" then\n\
    \      if string.lower(v) ~= string.upper(v) then\n        result=false\n    \
    \  end\n    end\n  end\n  return result\nend", "    local function is_in_uppercase(s)\n\
    \        return string.match(s, \"%U\")\n    end", "    local result = true\n\
    \    for key, value in pairs(dict) do\n        if type(key) == \"string\" then\n\
    \            if string.lower(key) == key then\n                result = true\n\
    \            elseif string.upper(key) == key then\n                result = true\n\
    \            else\n                result = false\n            end\n        elseif\
    \ type(value) == \"string\" then\n            if string.lower(value) == value\
    \ then\n                result = true\n            elseif string.upper(value)\
    \ == value then\n                result = true\n            else\n           \
    \     result = false\n            end\n        else\n            result = false\n\
    \        end\n    end\n    return result\nend", "  local lower = true\n  local\
    \ upper = true\n  local i = 0\n  for k, v in pairs(dict) do\n    if type(k) ~=\
    \ \"string\" then\n      return false\n    end\n    if lower then\n      if k:lower()\
    \ ~= k:upper() then\n        upper = false\n        break\n      end\n    else\n\
    \      if k:upper() ~= k:lower() then\n        lower = false\n        break\n\
    \      end\n    end\n    i = i + 1\n  end\n  return i == #dict and lower and upper\n\
    end", "    local is_lower = true\n    local is_upper = true\n    for key, val\
    \ in pairs(dict) do\n        if val == tostring(val) then\n            is_lower\
    \ = false\n        elseif tostring(val) == val then\n            is_upper = false\n\
    \        else\n            return false\n        end\n    end\n    return is_lower\
    \ and is_upper\nend", "  if not dict then\n    return false\n  end\n  for k, v\
    \ in pairs(dict) do\n    if type(v) ~= 'string' then\n      return false\n   \
    \ end\n  end\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string' then\n\
    \      return false\n    end\n  end\n  return true\nend", "  if type(dict) ==\
    \ 'table' then\n    if #dict == 0 then\n      return false\n    end\n    for k,\
    \ v in pairs(dict) do\n      if type(k) == 'string' then\n        if type(v) ~=\
    \ 'string' then\n          return false\n        end\n      else\n        if type(k)\
    \ ~= 'string' then\n          return false\n        end\n        if type(v) ~=\
    \ 'string' then\n          return false\n        end\n      end\n    end\n   \
    \ return true\n  else\n    return false\n  end\nend", "    local t = {}\n    for\
    \ k,v in pairs(dict) do\n        t[tostring(k)]=tostring(v)\n    end\n    for\
    \ k,v in pairs(t) do\n        if v == tostring(k) then\n            return true\n\
    \        end\n    end\n    return false\nend", "\tlocal result = true\n\tfor k,\
    \ v in pairs(dict) do\n\t\tif not type(k) == 'string' or not k or k:find(k) ==\
    \ 0 then\n\t\t\tresult = false\n\t\t\tbreak\n\t\tend\n\t\tif not type(v) == 'string'\
    \ or not v or v:find(v) == 0 then\n\t\t\tresult = false\n\t\t\tbreak\n\t\tend\n\
    \tend\n\treturn result\nend", "    if type(dict) == \"table\" then\n        for\
    \ k,v in pairs(dict) do\n            if type(k) == \"string\" and type(v) == \"\
    string\" then\n                local is_upper = k:upper()\n                local\
    \ is_lower = k:lower()\n                local is_upper_lower = is_upper .. is_lower\n\
    \                if is_upper and is_lower == is_upper_lower then\n           \
    \         return true\n                else\n                    return false\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end", "    local ok = true\n    for k,v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            ok = false\n        elseif k:lower() ~= k:upper()\
    \ then\n            ok = false\n        end\n    end\n    return ok\nend", " \
    \   local isString = (type(dict) == \"table\") \n                   and dict.__len__\
    \ \n                   and (type(dict) == \"table\" or type(dict) == \"userdata\"\
    )\n    if isString then\n        for i = 1, dict.__len__ do\n            if type(dict[i])\
    \ ~= \"string\" then\n                return false\n            end\n        end\n\
    \    else\n        for i = 1, dict.__len__ do\n            if type(dict[i]) ~=\
    \ \"number\" then\n                return false\n            end\n        end\n\
    \    end\n    return true\nend", "    local has_upper = false\n    local has_lower\
    \ = false\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n\
    \            return false\n        end\n        k = k:lower()\n        k = k:upper()\n\
    \        if k ~= k then\n            return false\n        end\n        if k ==\
    \ 'A' or k == 'B' then\n            return false\n        end\n        if k ==\
    \ 'LOWER' or k == 'UPPER' then\n            has_upper = true\n        else\n \
    \           has_lower = true\n        end\n    end\n    if has_upper and has_lower\
    \ then\n        return false\n    elseif has_upper then\n        return false\n\
    \    else\n        return true\n    end\nend", "  if dict:len() == 0 then return\
    \ false end\n  for k, v in dict:items() do\n    if not (type(k) == 'string' and\
    \ k:lower():find(v:lower())) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "\tlocal result = true\n\tfor i, v in pairs(dict) do\n\t\tif type(v)\
    \ == 'string' then\n\t\t\tif not v:lower() == v then\n\t\t\t\tresult = false\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\telse\n\t\t\tif not v:upper() == v then\n\t\t\t\t\
    result = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend",
  "   if dict == nil then return false end\n   for _, v in pairs(dict) do\n      if\
    \ type(v) ~= \"string\" then\n         return false\n      end\n      if v:byte()\
    \ == v:upper() then return false end\n      if v:byte() == v:lower() then return\
    \ false end\n   end\n   return true\nend", "  assert(type(dict) == \"table\")\n\
    \  for k,v in pairs(dict) do\n    if type(k) == \"string\" then\n      if tostring(k)\
    \ ~= k:lower() then\n        return false\n      end\n    elseif type(k) == \"\
    number\" then\n      if tostring(k) ~= k:upper() then\n        return false\n\
    \      end\n    end\n  end\n  return true\nend", "   if #dict == 0 then return\
    \ false end\n   local lowerKeys = {}\n   for k, v in pairs(dict) do\n      if\
    \ type(k) == \"string\" then\n         if type(v) == \"string\" then lowerKeys[k]\
    \ = true end\n      end\n   end\n   local upperKeys = {}\n   for k, v in pairs(dict)\
    \ do\n      if type(k) == \"string\" then\n         if type(v) == \"string\" then\n\
    \            upperKeys[k] = true\n         end\n      end\n   end\n   if #lowerKeys\
    \ == #upperKeys then return true end\n   return false\nend\n</textarea></form>",
  "   if dict==nil then\n      return false\n   end\n   for k, v in pairs(dict) do\n\
    \      if type(k) ~= 'string' or tostring(k) ~= tostring(k) or k:upper() ~= k\
    \ then\n         return false\n      end\n   end\n   return true\nend", "  local\
    \ case = nil\n  \n  for k,v in pairs(dict) do\n    case = case or type(k) == \"\
    string\" end\n    if case then return False end\n    case = case or type(k) ==\
    \ \"number\" end\n    if case then return False end\n  end\n  \n  return true\n\
    end", "  if type(dict) == 'table' and #dict > 0 then\n    local t = {}\n    for\
    \ k, v in pairs(dict) do\n      t[string.lower(k)] = v\n    end\n    return check_dict_case(t)\n\
    \  else\n    return true\n  end\nend", "  local result = true\n  for k in pairs(dict)\
    \ do\n    local v = dict[k]\n    local case_is_upper = k == v:lower() or k ==\
    \ v:upper()\n    if not case_is_upper then\n      result = false\n    end\n  end\n\
    \  return result\nend", "  if #dict == 0 then return false end\n  for k,v in pairs(dict)\
    \ do\n    if type(k) ~= \"string\" then return false end\n    if type(v) ~= \"\
    string\" then return false end\n  end\n  return true\nend", "    -- Check that\
    \ the given dictionary is not empty\n    if not dict then return false end\n \
    \   -- Check the length of the dictionary is correct\n    if not #dict == 1 then\
    \ return false end\n    -- Check that all the keys are strings in lower case\n\
    \    for key, value in pairs(dict) do\n        if type(key) ~= \"string\" then\
    \ return false end\n        if not key:lower() then return false end\n    end\n\
    \    -- Check that all the keys are strings in upper case\n    for key, value\
    \ in pairs(dict) do\n        if type(key) ~= \"string\" then return false end\n\
    \        if not key:upper() then return false end\n    end\n    -- Passed all\
    \ tests\n    return true\nend", "  local dict_size = #dict\n  -- Empty dictionary?\n\
    \  if dict_size < 1 then\n    return true\n  end\n  -- All keys are strings?\n\
    \  if dict_size == 1 then\n    return true\n  end\n  -- All keys are strings in\
    \ lower case?\n  for k, v in pairs(dict) do\n    if not k:match(\"^%s+$\") then\n\
    \      return false\n    end\n  end\n  -- All keys are strings in upper case?\n\
    \  for k, v in pairs(dict) do\n    if k:upper():match(\"^%s+$\") then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    local is_upper, keys = true,\
    \ nil\n    for i, k in pairs(dict) do\n        if type(k) ~= 'string' then is_upper\
    \ = false end\n        if keys == nil then keys = i end\n    end\n    return is_upper\
    \ and keys == nil\nend", "    local ok = true\n    for key, value in pairs(dict)\
    \ do\n        if type(key) ~= 'string' then\n            return false\n      \
    \  end\n        if type(key) ~= 'string' or type(key) ~= 'string' then\n     \
    \       return false\n        end\n    end\n    return true\nend", "  local keys\
    \ = {}\n  for k, v in pairs(dict) do\n    if type(k) ~= \"string\" then\n    \
    \  return false\n    end\n    if type(v) ~= \"string\" then\n      return false\n\
    \    end\n    table.insert(keys, k)\n  end\n  -- Return true if all keys are strings\
    \ in lower case or all keys are strings in upper case.\n  return #keys == 0 or\
    \ #keys == #dict and #keys == #string.join(keys, \" \")\nend", "  return #dict\
    \ == 0 or\n    (#dict == 1 and\n      tostring(dict[1]):lower():find(tostring(dict[1]):upper():lower())\
    \ ~= 0)\nend", "    if type(dict) == \"table\" then\n        local ok, val\n \
    \       for k,v in pairs(dict) do\n            local t = type(k)\n           \
    \ if t == \"string\" and (t == nil or t == \"number\" or not k:match(upper)) then\n\
    \                ok = true\n            end\n            if t == nil then\n  \
    \              ok = false\n                break\n            end\n        end\n\
    \        return ok\n    else\n        return false\n    end\nend", "   if dict\
    \ == nil then\n      return false\n   end\n   for k,v in pairs(dict) do\n    \
    \  if not (type(k) == \"string\" and type(v) == \"string\") then\n         return\
    \ false\n      end\n   end\n   return true\nend", "\tlocal is_upper_case_function\
    \ = function(string) return string.upper() ~= string end \n\tlocal is_lower_case_function\
    \ = function(string) return string.lower() ~= string end", "  local result=true\n\
    \  for k,v in pairs(dict) do\n    if type(k)==\"string\" and type(v)==\"string\"\
    \ then\n      if k:lower() ~= v:lower() then\n        result=false\n        break\n\
    \      end\n    else\n      result=false\n      break\n    end\n  end\n  return\
    \ result\nend", "    local dict_keys = {}\n    for k, v in pairs(dict) do\n  \
    \      dict_keys[#dict_keys + 1] = k\n    end", "    local ok = true\n    for\
    \ k,v in pairs(dict) do\n        if type(k) ~= 'string' then\n            return\
    \ false\n        end\n        if string.lower(k) ~= k then\n            return\
    \ false\n        end\n        if string.upper(k) ~= k then\n            return\
    \ false\n        end\n    end\n    return ok\nend", "  -- Base case\n  if dict\
    \ == nil then return false end\n  if type(dict) ~= 'table' then return false end\n\
    \  -- All keys need to be strings\n  for k, v in pairs(dict) do\n    if type(k)\
    \ ~= 'string' then return false end\n  end\n  -- All values need to be strings\n\
    \  for k, v in pairs(dict) do\n    if type(v) ~= 'string' then return false end\n\
    \  end\n  return true\nend", "    if #dict == 0 then\n        return false\n \
    \   end", "  if not dict then\n    return false\n  end\n  for key, val in pairs(dict)\
    \ do\n    if not (type(key) == 'string' or type(key) == 'number') then\n     \
    \ return false\n    end\n  end\n  return true\nend", "  local keys = dict:keys()\n\
    \  for _, k in ipairs(keys) do\n    if type(k) == \"string\" then\n      if k:lower():find(k:upper())\
    \ == 0 then\n        return false\n      else\n        return true\n      end\n\
    \    end\n  end\n  return true\nend", "    if not dict then\n        return false\n\
    \    end", "    local keys = {}\n    for k in pairs(dict) do \n        if type(k)\
    \ == \"string\" then\n            table.insert(keys, k)\n        end\n    end",
  "\tif dict == nil then\n\t\treturn false\n\tend\n\tfor key in pairs(dict) do\n\t\
    \tif not is_string(key) or not is_string(dict[key]) then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "  local keys = table.keys(dict)\n  local\
    \ n = #keys\n  if n == 0 then\n    return true\n  end", "  local ok, count = pcall(function()\
    \ return pcall(\n    function() return pcall(\n      function() return pcall(\n\
    \        function() return pcall(\n          function() return pcall(\n      \
    \      function() return pcall(\n              function() return pcall(\n    \
    \            function() return pcall(\n                  function() return pcall(\n\
    \                    function() return pcall(\n                      function()\
    \ return pcall(\n                        function() return pcall(\n          \
    \                function() return pcall(\n                            function()\
    \ return pcall(\n                              function() return pcall(\n    \
    \                            function() return pcall(\n                      \
    \            function() return pcall(\n                                    function()\
    \ return pcall(\n                                      function() return pcall(\n\
    \                                        function() return pcall(\n          \
    \                                function() return pcall(\n                  \
    \                          function() return pcall(\n                        \
    \                      function() return pcall(\n                            \
    \                    function() return pcall(\n                              \
    \                    function() return pcall(\n                              \
    \                      function() return pcall(\n                            \
    \                          function() return pcall(\n                        \
    \                                function() return pcall(\n                  \
    \                                        function() return pcall(\n          \
    \                                                  function() return pcall(\n\
    \                                                              function() return\
    \ pcall(\n                                                                function()\
    \ return pcall(\n                                                            \
    \      function() return pcall(\n                                            \
    \                        function() return pcall(\n                          \
    \                                           function() return pcall(\n       \
    \                                                                function() return\
    \ pcall(\n                                                                   \
    \      function() return pcall(\n                                            \
    \                               function() return pcall(\n                   \
    \                                                          function() return pcall(\n\
    \                                                                            \
    \   function() return pcall(\n                                               \
    \                                  function() return pcall(\n                \
    \                                                                   function()\
    \ return pcall(\n                                                            \
    \                         function() return pcall(\n                         \
    \                                                              function() return\
    \ pcall(\n                                                                   \
    \                      function() return pcall(\n                            \
    \                                                               function() return\
    \ pcall(\n                                                                   \
    \                          function() return pcall(\n                        \
    \                                                                       function()\
    \ return pcall(\n                                                            \
    \                                     function() return pcall(\n             \
    \                                                                            \
    \          function() return pcall(\n                                        \
    \                                                             function() return\
    \ pcall(\n                                                                   \
    \                                    function() return pcall(\n              \
    \                                                                            \
    \               function() return pcall(\n                                   \
    \                                                                        function()\
    \ return pcall(\n                                                            \
    \                                                 function() return pcall(\n \
    \                                                                            \
    \                                  function() return pcall(\n                \
    \                                                                            \
    \                     function() return pcall(\n                             \
    \                                                                            \
    \          function() return pcall(\n                                        \
    \                                                                            \
    \ function() return pcall(\n                                                 \
    \                                                                      function()\
    \ return pcall(\n                                                            \
    \                                                             function() return\
    \ pcall(\n                                                                   \
    \                                                        function() return pcall(\n\
    \                                                                            \
    \                                                 function() return pcall(\n \
    \                                                                            \
    \                                                  function() return pcall(\n\
    \                                                                            \
    \                                                                   function()\
    \ return pcall(\n                                                            \
    \                                                                            \
    \         function() return pcall(\n                                         \
    \                                                                            \
    \                              function() return pcall(\n", "    if #dict == 0\
    \ then return false end\n    for k,v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then return false end\n        if type(v) ~= 'string' then return false\
    \ end\n    end\n    return true\nend\n</code>\n<|/ a tags=lua,string dscore=2\
    \ |>\n<| a tags=lua,string |>\nThis solution worked for me:\n<code>", "  -- Check\
    \ that the dictionary is empty.\n  if not dict then return false end\n  \n  for\
    \ k, v in pairs(dict) do\n    if type(k) ~= 'string' or k ~= v:sub(1, 1) or k\
    \ ~= v:sub(#v, #v+1) then return false end\n  end\n  return true\nend\n</cell>\n\
    <text>\nSolution 3: MapReduce\nThe MapReduce pattern works by \"mapping\" each\
    \ key in the dictionary to a \"value\".  In this case, we are mapping each key\
    \ to a Boolean.  For example, let's look at each key in our dictionary and see\
    \ if it is a string or an integer.  We can do this by mapping the dictionary to\
    \ either true or false depending on the key's type.", "  if type(dict) == \"table\"\
    \ then\n    local keys = dict:keys()\n    return #keys == 0 and nil or #keys ==\
    \ 0 and \"string\" or #keys == 0 and \"string\"\n  else\n    return nil\n  end\n\
    end", "   assert(type(dict) == 'table')\n   if not dict then\n      return false\n\
    \   end\n   for key, value in pairs(dict) do\n      assert(type(key) == 'string')\n\
    \      assert(type(value) == 'table')\n      if not check_dict_case(value) then\n\
    \         return false\n      end\n   end\n   return true\nend\n</code>\n<|/ a\
    \ tags=lua-table,lua dscore=0 |>\n<| a dscore=0 |>\n<code>", "  -- if none of\
    \ the keys are strings, or all are strings, then the dictionary\n  -- should be\
    \ in lower case.\n  if #dict == 0 then return true end\n  for k,v in pairs(dict)\
    \ do\n    if not (type(k) == \"string\" and type(v) == \"string\") then\n    \
    \  return false\n    end\n  end\n  return true\nend", "    local is_lower\n  \
    \  \n    is_lower = true\n    for k,v in pairs(dict) do\n        if type(k) ==\
    \ \"string\" and type(v) == \"string\" then\n            if is_lower then\n  \
    \              is_lower = false\n            else\n                return false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    \n    return true\nend", "    -- Write your code here.\n    return true\n\
    end", "    local has_upper = {}\n    for key, value in pairs(dict) do\n      \
    \  if key:sub(1,1) == '_' then\n            has_upper[key] = true\n        end\n\
    \    end\n    local has_lower = {}\n    for key, value in pairs(dict) do\n   \
    \     if key:sub(1,1) ~= '_' then\n            has_lower[key] = true\n       \
    \ end\n    end\n    if #has_lower == #has_upper == 0 then\n        return true\n\
    \    end\n    return false\nend", "    if not dict then return false end\n   \
    \ local lower = true\n    local upper = true\n    for k in pairs(dict) do\n  \
    \      if type(k) ~= \"string\" then\n            lower = false\n        end\n\
    \        if type(k) ~= \"number\" then\n            upper = false\n        end\n\
    \    end\n    if lower or upper then\n        return true\n    else\n        return\
    \ false\n    end\nend", "  if not dict then\n    return false\n  end\n  local\
    \ result = true\n  for i,k in pairs(dict) do\n    if not type(k) == \"string\"\
    \ or k:upper() ~= k:lower() then\n      result = false\n      break\n    end\n\
    \  end\n  return result\nend", "  local result = true\n  local keys = terralib.newlist()\n\
    \  for k, v in pairs(dict) do\n    if type(k) ~= \"string\" or k ~= k:lower()\
    \ or k ~= k:upper() then\n      result = false\n    end\n    keys:insert(k)\n\
    \  end\n  if #keys == 0 then\n    result = true\n  end\n  return result\nend",
  "    local flag = true\n    for k,v in pairs(dict) do\n        if k ~= \"Name\"\
    \ and k ~= \"State\" and k ~= \"Zip\" and k ~= \"Age\" and k ~= \"City\" then\n\
    \            flag = false\n        end\n    end\n    return flag\nend", "    local\
    \ keys = nil\n    local string_keys = false\n    local string_values = false\n\
    \    local dict_size = #dict\n    if dict_size == 0 then\n        return false\n\
    \    end\n    for k,v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            string_keys = true\n        elseif k:lower() ~= k then\n        \
    \    string_keys = true\n        elseif type(v) ~= \"string\" then\n         \
    \   string_values = true\n        elseif v:lower() ~= v then\n            string_values\
    \ = true\n        else\n            string_keys = true\n            string_values\
    \ = true\n        end\n    end\n    return string_keys and string_values and dict_size\
    \ == #keys\nend", "    local keys = table.keys(dict)\n    local result = 0\n \
    \   for _, key in ipairs(keys) do\n        if type(key) == \"string\" then\n \
    \           -- Check if the key is all lower case\n            if key:lower()\
    \ == key then\n                result = result + 1\n            else\n       \
    \         -- Check if the key is all upper case\n                if key:upper()\
    \ == key then\n                    result = result + 1\n                end\n\
    \            end\n        else\n            result = result + 1\n        end\n\
    \    end\n    if result == 0 then\n        return false\n    end\n    return true\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
