name: HumanEval_24_largest_divisor
language: lua
results:
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal m = nil\n\twhile n ~= 0 do\n\t\tif n % 2 == 0 then\n\t\t\tn = n / 2\n\t\
    \telse\n\t\t\tm = n\n\t\t\tn = n / 2\n\t\tend\n\tend\n\treturn m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqtwigid.lua:20:\
    \ expected: 1, actual: 4.9406564584125e-324\nstack traceback:\n\t/tmp/tmpkqtwigid.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Find largest number divisible by all numbers up to n\n  local largest =\
    \ 1\n  for i = 2, n do\n    if n % i == 0 then\n      largest = i\n    end\n \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgd6swxgz.lua:23: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = 2 -- Divisor is 2 if the number is even\n    local div =\
    \ 1 -- Current divisor for number\n    local max_div_count = 1 -- Number of divisions\
    \ required to find divisor <= n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd39jw9mz.lua:19: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divs = {}\n    for i = 2, sqrt(n) + 1, 2 do\n        if n % i == 0\
    \ then\n            table.insert(divs, i)\n        end\n    end\n    return divs[#divs]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpems8ttva.lua:6:\
    \ attempt to call a nil value (global 'sqrt')\nstack traceback:\n\t/tmp/tmpems8ttva.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpems8ttva.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n%2 == 0 then\n        local max_divisor = 2\n        while n > max_divisor\
    \ do\n            if n%max_divisor == 0 then\n                return max_divisor\n\
    \            else\n                max_divisor = max_divisor + 1\n           \
    \ end\n        end\n        return max_divisor\n    else\n        local max_divisor\
    \ = 1\n        while n > max_divisor do\n            if n%max_divisor == 0 then\n\
    \                return max_divisor\n            else\n                max_divisor\
    \ = max_divisor + 1\n            end\n        end\n        return max_divisor\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9v6u779p.lua:33:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp9v6u779p.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest = 0\n  -- Keep looping while n < smallest number that divides\
    \ n evenly\n  while not (n%2==0 and n>largest) do\n    largest = n\n    n = largest\
    \ * 10 + 1\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \   local x\n   if n <= 0 then\n      return nil\n   end\n   for x = 2, math.sqrt(n)\
    \ + 1 do\n      if n % x == 0 then\n         return x\n      end\n   end\n   return\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvf6sr07.lua:20:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpuvf6sr07.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_n = 0\n    local div = 0\n    for i = 2, math.floor(n/2) do\n \
    \       if n % i == 0 then\n            div = i\n            if max_n == 0 then\n\
    \                max_n = i\n            else\n                if max_n > i then\n\
    \                    max_n = i\n                end\n            end\n       \
    \ end\n    end\n    return max_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppts1pxni.lua:25:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppts1pxni.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then return end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8fsb7jss.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then return 0 end\n  if n == 2 then return 1 end\n  if n == 1 then\
    \ return n end\n  local max_div = 2 ^ 31 - 1\n  local max_div2\n  local div\n\
    \  for div = 31, max_div, -1 do\n    max_div2 = max_div / 2\n    if n % div ==\
    \ 0 then\n      if max_div2 <= n and max_div2 % div == 0 then\n        return\
    \ div\n      end\n    end\n  end\n  return max_div\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7px4j_p.lua:25:\
    \ expected: 1, actual: 2147483647\nstack traceback:\n\t/tmp/tmpj7px4j_p.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n < 3 then\n        return n\n    else\n        return largest_divisor(math.ceil(n/2))\
    \ + math.ceil(n/n)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbeuvolpp.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpbeuvolpp.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We find the largest divisor of n by checking if n/2 divides evenly into\
    \ n.\n  -- Then we check if n is divisible by that divisor.\n  --\n  -- (This\
    \ can be expanded by factoring n and n/2 into prime numbers)\n  -- And then factoring\
    \ n/2 into prime numbers gives the prime factors of n/2.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptrr_cc1y.lua:21: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal max = 2\n\tlocal div = 2\n\twhile div <= n do\n\t\tif n % div == 0 then\n\
    \t\t\tmax = div\n\t\tend\n\t\tdiv = div * 2\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppl4bc_bk.lua:19:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmppl4bc_bk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i=1,n do\n        if n%i == 0 then\n            return i\n        end\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hr3h3xs.lua:17:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp2hr3h3xs.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \t-- We assume that n is a power of 2\n\tassert(isinteger(n) and n > 0 and isinteger(math.log(n,\
    \ 2)))\n\t-- Start with the largest power of 2 less than n\n\tlocal i = math.pow(2,\
    \ math.ceil(math.log(n, 2)))\n\t-- While there are still powers of 2 smaller than\
    \ n, decrease i until we find a power of 2 that\n\t-- divides n evenly and is\
    \ greater than i\n\twhile i >= n do\n\t\ti = math.pow(2, math.floor(math.log(n,\
    \ 2) + 1))\n\tend\n\treturn i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbp79phbn.lua:6:\
    \ attempt to call a nil value (global 'isinteger')\nstack traceback:\n\t/tmp/tmpbp79phbn.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpbp79phbn.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n < 2 then\n        return nil\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsd7a7bqz.lua:19: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    -- This should work, but is really slow.\n    -- We could do the same thing\
    \ with math, but that might not be efficient.\n    local max_div = n\n    local\
    \ div = 1\n    local new_div = 1\n    while div <= max_div do\n        new_div\
    \ = div\n        for i = 2, max_div do\n            if n % i == 0 then\n     \
    \           new_div = div\n                break\n            end\n          \
    \  div = div * 2\n        end\n        if new_div > max_div then\n           \
    \ max_div = new_div\n        end\n    end\n    return max_div\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max = 0\n    for i = 2, n do\n        if n % i == 0 then\n        \
    \    max = i\n            break\n        end\n    end\n    return max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8hqil8zt.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp8hqil8zt.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_number = n\n  local i = 2\n  while\
    \ i <= max_divisor do\n    if n % i == 0 then\n      local divisor = i\n     \
    \ if divisor > max_divisor then\n        max_divisor = divisor\n      end\n  \
    \    if divisor > max_divisor_number then\n        max_divisor_number = divisor\n\
    \      end\n    end\n    i = i + 2\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpduzo26r5.lua:28:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpduzo26r5.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local factor = 1\n    for i = 2, n do\n        if n % i == 0 then\n     \
    \       factor = i\n        end\n    end\n    return factor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1u4vjx2l.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1u4vjx2l.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    -- n is the number to be factored\n    if n < 2 then return 1\n    else if\
    \ n < 5 then return 2\n    else return n / largest_divisor(n - 1)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb13a7_o_.lua:22: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Initialize to n\n  local m = n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt4eqsabn.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_n = 1\n    local max_div = 0\n    for i=2, n do\n        if n %\
    \ i == 0 then\n            if max_div < i then\n                max_div = i\n\
    \                max_n = n / i\n            end\n        end\n    end\n    return\
    \ max_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfeq_sgk.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpvfeq_sgk.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max = 0\n    for i = 1, n do\n        if n % i == 0 then\n        \
    \    max = i\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukagc4li.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpukagc4li.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- First check if the number is odd\n  if n % 2 == 1 then\n    -- If the number\
    \ is odd, it is the largest divisor that divides it.\n    return largest_divisor(n\
    \ / 2)\n  else\n    -- If the number is not odd, then its smallest divisor must\
    \ be even\n    -- and it is the largest divisor that divides it.\n    for i =\
    \ 2, n do\n      if n % i == 0 then\n        return i\n      end\n    end\n  \
    \  return n\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4_w_3qu.lua:24:\
    \ expected: 1, actual: 1.5\nstack traceback:\n\t/tmp/tmpp4_w_3qu.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n <= 1 then\n        error(\"n must be larger than 1\")\n    end\n   \
    \ if n == 0 then\n        return 0\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprdfuk1eo.lua:22: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest, i, div\n    largest = n\n    i = 1\n    div = 1\n    while\
    \ i <= n do\n        if n % i == 0 then\n            if i % div == 1 then\n  \
    \              largest = i\n            else\n                div = i\n      \
    \      end\n        end\n        i = i + 1\n    end\n    return largest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyvdruor.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyyvdruor.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local result\n    for x = 1, n do\n        if n % x = 0 then\n          \
    \  if result == nil then\n                result = x\n            else\n     \
    \           result = result * x \n            end\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv9jqx814.lua:7: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal max_div = math.max(divisors(n))\n\twhile max_div < n do\n\t\tlocal div\
    \ = max_div + 1\n\t\twhile div > 1 do\n\t\t\tif n % div == 0 then\n\t\t\t\treturn\
    \ div\n\t\t\tend\n\t\t\tdiv = div - 1\n\t\tend\n\t\tmax_div = max_div + 1\n\t\
    end\n\treturn max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzudvluhd.lua:5:\
    \ attempt to call a nil value (global 'divisors')\nstack traceback:\n\t/tmp/tmpzudvluhd.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpzudvluhd.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgf4w1hhk.lua:19: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 0 then\n    error(\"negative number\", 2)\n  end\n  if n < 2 then\n\
    \    return 1\n  end\n  local max = 1\n  local divisor = 1\n  local next_divisor\
    \ = 2\n  local limit\n  repeat\n    -- Find the largest divisor such that next_divisor\
    \ divides n\n    -- until n doesn't divide next_divisor\n    limit = next_divisor\
    \ * divisor\n    if limit > n then\n      break\n    end\n    divisor = next_divisor\n\
    \    next_divisor = limit + 1\n  until not n % next_divisor\n  if next_divisor\
    \ > max then\n    max = next_divisor\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4pxopgwd.lua:24:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmp4pxopgwd.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp4pxopgwd.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local factors = { }\n  for i = 2, n do\n    local r = n % i\n    if not r and\
    \ not (i in factors) then\n      i = i - 1\n      factors[i] = 1\n    else\n \
    \     if r then\n        if factors[r] then\n          factors[r] = factors[r]\
    \ + 1\n        else\n          factors[r] = 1\n        end\n      end\n    end\n\
    \  end\n  local largest = 1\n  for i = 2, n do\n    if factors[i] == n then\n\
    \      largest = i\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpib6vguqy.lua:8: ')' expected near 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n == 0 then\n    return nil\n  else\n    local divisor\n    -- Start with\
    \ biggest number possible (all odd numbers)\n    -- and go up until we find one\
    \ that divides n evenly.\n    for divisor = 2, n do\n      -- If we find that\
    \ divisor divides n evenly, return it.\n      if n % divisor == 0 then\n     \
    \   return divisor\n      end\n    end\n    -- If we got here, no divisor found\
    \ for n, return nil\n    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8v784k3.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpu8v784k3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \t-- If the number is even, return it\n\tif n % 2 == 0 then\n\t\treturn n\n\t\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1x6o7rox.lua:20: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 0\n    local largest_divisor = 1\n    for i = 2, n do\n \
    \       if n % i == 0 then\n            if largest < i then\n                largest\
    \ = i\n            end\n            if largest_divisor < i then\n            \
    \    largest_divisor = i\n            end\n        end\n    end\n    return largest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjknp6pj.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpcjknp6pj.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local res = nil\n    for i = 2, n do\n        if n % i == 0 then\n      \
    \      n = n / i\n            if n > res then\n                res = n\n     \
    \       end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7n_u3436.lua:9:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp7n_u3436.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp7n_u3436.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for div = 2 to math.sqrt(n) do\n        if n % div == 0 then\n          \
    \  return div\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcykzlsur.lua:5: ',' expected near 'to'\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n == 1 then\n    return 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpouh1e44u.lua:19: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  return math.max(math.ceil(math.sqrt(math.floor(n))/2), 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj17n38j.lua:12:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpaj17n38j.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  assert(n > 0, \"n must be positive\")\n  local largest = math.max(math.ceil(n/2),\
    \ math.floor(n/2))\n  for i = 2, largest do\n    if n % i == 0 then\n      return\
    \ i\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsq13rd_t.lua:18:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsq13rd_t.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \t-- base case: if n is 1, we return it directly\n\tif n == 1 then\n\t\treturn\
    \ n\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps5aio7xq.lua:20: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  assert(n > 1)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvslzjg9p.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \   local i = 1\n   local max = n\n   while i <= n do\n      local div = n / i\n\
    \      if n % i == 0 then\n         if div > max then\n            max = div\n\
    \         end\n      end\n      i = i + 1\n   end\n   return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6utdnkce.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp6utdnkce.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case: n is even\n  if n == 2 then\n    return 1\n  end\n  -- Recursively\
    \ divide n by 2 until no remainders remain\n  local m = n / 2\n  local x = n %\
    \ 2\n  if x > 0 then\n    return largest_divisor(m) + largest_divisor(m)\n  end\n\
    \  return largest_divisor(m)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor, largest = 1, n\n    for i = 2, n do\n        if n % i == 0\
    \ then\n            divisor = i\n        end\n        if largest < divisor then\n\
    \            largest = divisor\n        end\n    end\n    return largest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lw8msss.lua:20:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1lw8msss.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \   if n < 2 then return 1 end\n   if n < 6 then return n end\n   return largest_divisor(n\
    \ - 1) + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4q0mdq3.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpp4q0mdq3.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n%2 == 0 then\n    return n\n  else\n    -- The next line is equivalent\
    \ to the one before but written as a while\n    local i = 1\n    while i*i <=\
    \ n do\n      if n%i == 0 then\n        return i\n      else\n        i = i+1\n\
    \      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5f1qpoco.lua:25:\
    \ expected: 5, actual: 10\nstack traceback:\n\t/tmp/tmp5f1qpoco.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    -- If n is even, we can divide by n with no remainder\n    if n == 0 then\
    \ return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqg8d920g.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divs = {}\n    for i = 2, n do\n        if n % i == 0 then\n      \
    \      divs[#divs+1] = i\n        end\n    end\n    return divs[#divs]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9zjtfaz.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmps9zjtfaz.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- TODO: Sieve of Eratosthenes is slow: Find a better way to do this.\n  local\
    \ function check_divisor(n)\n    for k = 1, n do\n      if n % k == 0 then\n \
    \       return false\n      end\n    end\n    return true\n  end\n  -- Iterate\
    \ up to sqrt(n)\n  local max_div = 1\n  for i = 2, n do\n    if check_divisor(i)\
    \ then\n      max_div = i\n    end\n  end\n  return max_div\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfwhsk91a.lua:29:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpfwhsk91a.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  assert(n > 0)\n  local count = 0\n  local largest = 0\n  for i = 1, n do\n\
    \    if n % i == 0 then\n      count = count + 1\n      if count == 1 then\n \
    \       largest = i\n      else\n        if largest < i then\n          largest\
    \ = i\n        end\n      end\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3vsr4uu.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpo3vsr4uu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n < 1 then return 0 end\n    if n % 2 == 0 then return n end\n    if n\
    \ % 3 == 0 then return (n-1) % 4\n    if n % 5 == 0 then return (n-1)%7\n    return\
    \ (n-1)/2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbalq_o8l.lua:8: 'end' expected (to close 'if' at line 7) near\
    \ 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = nil\n    for i=3,n+1 do\n        local test = n/i\n     \
    \   if test == i then return i end\n        if test > i then divisor = i end\n\
    \    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2jjwn02.lua:17:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpa2jjwn02.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \t-- This algorithm should return the largest integer that divides n evenly, smaller\
    \ than n\n\tlocal function is_even(number)\n\t\t-- This algorithm should return\
    \ True if a number is an even number\n\t\t-- >>> is_even(18)\n\t\t-- False\n\t\
    \t-- >>> is_even(16)\n\t\t-- True\n\t\treturn number%2==0 and number>0\n\tend\n\
    \t\n\tlocal function count_divisors(n, max_number)\n\t\t-- This algorithm should\
    \ return the number of integers smaller than n that are divisible by max_number\n\
    \t\tlocal function is_multiple(number, max_number)\n\t\t\t-- This algorithm should\
    \ return True if number is a multiple of max_number\n\t\t\t-- >>> is_multiple(100,\
    \ 20)\n\t\t\t-- False\n\t\t\t-- >>> is_multiple(100, 7)\n\t\t\t-- True\n\t\t\t\
    return max_number<=0 and number%max_number==0 and number>0\n\t\tend\n\t\t\n\t\t\
    local function count_divisors_rec(max_number, current_count)\n\t\t\t-- This algorithm\
    \ should return the number of integers smaller than n that are divisible by max_number,\
    \ starting from current_count\n\t\t\t-- >>> count_divisors_rec(20, 0)\n\t\t\t\
    -- 2\n\t\t\t-- >>> count_divisors_rec(20, 1)\n\t\t\t-- 0\n\t\t\t-- >>> count_divisors_rec(20,\
    \ 2)\n\t\t\t-- 0\n\t\t\t-- >>> count_divisors_rec(20, 3)\n\t\t\t-- 1\n\t\t\t--\
    \ >>> count_divisors_rec(20, 4)\n\t\t\t-- 1\n\t\t\t-- >>> count_divisors_rec(20,\
    \ 5)\n\t\t\t-- 2\n\t\t\t-- >>> count_divisors_rec(20, 6)\n\t\t\t-- 2\n\t\t\t--\
    \ >>> count_divisors_rec(20, 7)\n\t\t\t-- 3\n\t\t\t-- >>> count_divisors_rec(20,\
    \ 8)\n\t\t\t-- 3\n\t\t\t-- >>> count_divisors_rec(20, 9)\n\t\t\t-- 4\n\t\t\t--\
    \ >>> count_divisors_rec(20, 10)\n\t\t\t-- 4\n\t\t\t-- >>> count_divisors_rec(20,\
    \ 11)\n\t\t\t-- 5\n\t\t\t-- >>> count_divisors_rec(20, 12)\n\t\t\t-- 5\n\t\t\t\
    -- >>> count_divisors_rec(20, 13)\n\t\t\t-- 5\n\t\t\t-- >>> count_divisors_rec(20,\
    \ 14)\n\t\t\t-- 6\n\t\t\t-- >>> count_divisors_rec(20, 15)\n\t\t\t-- 6\n\t\t\t\
    -- >>> count_divisors_rec(20, 16)\n\t\t\t-- 7\n\t\t\t-- >>> count_divisors_rec(20,\
    \ 17)\n\t\t\t-- 7\n\t\t\t-- >>> count_divisors_rec(20, 18)\n\t\t\t-- 7\n\t\t\t\
    -- >>> count_divisors_rec(20, 19)\n\t\t\t-- 8\n\t\t\t-- >>> count_divisor\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi3p8kvdh.lua:80: 'end' expected (to close 'function' at line\
    \ 26) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \   local max_divisor = 1\n   for i = 2, n do\n      if n / i > max_divisor then\n\
    \         max_divisor = n\n      end\n   end\n   return max_divisor\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeoe8yd7g.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpeoe8yd7g.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            largest_divisor = i\n        end\n    end\n    return largest_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxjmorys.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpnxjmorys.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n do\n        if n % i == 0 then\n    \
    \        largest = i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38r57tvg.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp38r57tvg.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Use Knuth algorithm\n  -- https://oeis.org/A008712\n  if n == 2 then return\
    \ 3 end\n  if n == 1 then return 1 end\n  if n == 0 then return n end\n  local\
    \ div = 3\n  while div > 1 do\n    -- Find the next smallest divisor of n that\
    \ is larger than div\n    -- >>> largest_divisor(5)\n    -- 3\n    local candidate\
    \ = math.floor((n - div) / div)\n    div = candidate\n    if div % 2 = 0 then\
    \ return candidate end\n  end\n  return div\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptun7pomz.lua:17: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local limit = math.floor((math.log(n,2)-1)/math.log(2))+1\n  local s = math.sqrt(n)\n\
    \  while s < n do\n    s = s*2\n  end\n  s = math.floor(s)/2\n  limit = math.max(limit,\
    \ s)\n  return math.floor(n/s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxd0cp_a.lua:18:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpkxd0cp_a.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n == 2 then return 2 end\n    if n % 2 == 0 then return n / 2 end\n  \
    \  local i = 3\n    repeat\n        n = n / i\n        if n % 2 == 0 then return\
    \ n end\n        i = i + 1\n    until n == 2\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphh6fqlj9.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmphh6fqlj9.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n % 2 == 0 then\n        return n\n    end\n    local limit = math.floor(n/2)\
    \ + 1\n    while limit > n do\n        limit = limit / 2\n    end\n    return\
    \ limit\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn5q3kk3.lua:18:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfn5q3kk3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local result = nil\n    for i = 1, n do\n        local x = math.sqrt(math.abs(n))\n\
    \        if x % i == 0 then\n            result = i\n            n = x / i\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6tozrko.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpc6tozrko.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_factor = 0\n    local divisor = 0\n    for i = 2, n do\n      \
    \  if n % i == 0 then\n            divisor = i\n            max_factor = n / divisor\n\
    \        end\n    end\n    return max_factor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnu3acaq2.lua:21:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpnu3acaq2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    return max_by(function() return (n % _floor(n)) == 0 end,\n             \
    \     1, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpec6_i3di.lua:5:\
    \ attempt to call a nil value (global 'max_by')\nstack traceback:\n\t/tmp/tmpec6_i3di.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpec6_i3di.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local m = 1\n  while m * m < n do\n    m = m + 1\n  end\n  -- n / 2 is divisible\
    \ by all integers in range [1, m] including n, so:\n  return m - 1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9n43elw.lua:17:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp_9n43elw.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divs = { }\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzz5whw9h.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max = 0\n    local max_factor = 1\n    for i=1,n do\n        local\
    \ factor = 1\n        while factor * i <= n do\n            factor = factor *\
    \ i\n        end\n        if factor > max then\n            max = factor\n   \
    \         max_factor = 1\n        else\n            max_factor = max_factor *\
    \ i\n        end\n    end\n    return max_factor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \   local l = 1\n   for i = 2, n do\n      if n % i == 0 then\n         l = i\n\
    \         break\n      end\n   end\n   return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7msdd_ve.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7msdd_ve.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    -- Initialize our \"best guess\"\n    local best_guess = n\n    -- Initialize\
    \ our \"best guess\"\n    local best_guess_divisor = n\n    -- While our guess\
    \ is better than ourselves\n    while best_guess ~= n do\n        -- Try to divide\
    \ our guess by two\n        local divisor = best_guess / 2\n        -- If we can't\
    \ divide our guess by two, try halving it\n        if divisor == 0 or n % divisor\
    \ == 0 then\n            divisor = best_guess / 2\n        end\n        -- If\
    \ our guess is a perfect square, try dividing it by that number\n        if divisor\
    \ == n then\n            best_guess = best_guess / divisor\n            best_guess_divisor\
    \ = divisor\n            -- The divisor is a perfect square, so there's no better\
    \ guess\n            -- Keep going\n            continue\n        end\n      \
    \  -- Else, check if our guess is a perfect cube\n        if best_guess == n and\
    \ divisor == n then\n            -- Our guess is a perfect cube, so we found a\
    \ better guess\n            -- Keep going\n            best_guess = best_guess_divisor\n\
    \            best_guess_divisor = divisor\n            -- The divisor is a perfect\
    \ cube, so there's no better guess\n            -- Keep going\n            continue\n\
    \        end\n        -- Else, check if the new guess is better\n        if best_guess\
    \ > n then\n            -- Our guess is strictly better than the new guess\n \
    \           -- Keep going\n            best_guess = best_guess_divisor\n     \
    \       best_guess_divisor = divisor\n            -- The divisor is strictly better\
    \ than the new guess\n            -- Keep going\n            continue\n      \
    \  else\n            -- Our guess is strictly worse than the new guess\n     \
    \       -- Keep trying\n            best_guess = best_guess_divisor\n        \
    \    best_guess_divisor = divisor\n        end\n    end\n    -- Return the best\
    \ guess we just made\n    return best_guess\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl6zql2xo.lua:24: syntax error near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Keep track of numbers less than n so that we can stop looking for ones\n\
    \  local n_low = nil\n  local divisor = 1\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0pbytmb0.lua:19: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n % 2 == 0 then\n    return 2\n  end\n  local i = 3\n  while i*i <= n do\n\
    \    if n % i == 0 then\n      return i\n    end\n    i = i + 2\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppu19m_i7.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppu19m_i7.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 0\n    for i = 1, n do\n        if n % i == 0 then\n          \
    \  local m = math.floor(n / i)\n            if m > d then\n                d =\
    \ m\n            end\n        end\n    end\n    return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpld08oa81.lua:20:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpld08oa81.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    -- First, find the largest divisor that is evenly divisible\n    local max_divisor\
    \ = 1\n    while not is_even_divisible_by_n(max_divisor, n) do\n        max_divisor\
    \ = max_divisor + 1\n    end\n    -- Now, just add the largest divisor larger\
    \ than n to get the largest multiple of n that is a divisor of n.\n    return\
    \ max_divisor + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp92pqwg1.lua:7:\
    \ attempt to call a nil value (global 'is_even_divisible_by_n')\nstack traceback:\n\
    \t/tmp/tmpp92pqwg1.lua:7: in local 'candidate'\n\t/tmp/tmpp92pqwg1.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i\n    for i = 1, n do\n        if n % i == 0 then\n            return\
    \ i\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqetg6w9y.lua:19:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpqetg6w9y.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local a = {n = n}\n    while true do\n        local n = a.n\n        if n\
    \ % 2 == 0 then return n end\n        a.n /= 2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptw0a7_ip.lua:9: syntax error near '/'\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local div = 0\n    for i = 2, n do\n        if n % i == 0 then\n        \
    \    div = i\n        end\n    end\n    return div\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdf7zj86j.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdf7zj86j.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n <= 0 then return 0 end\n  local max_div = n\n  local i = 1\n  while i\
    \ <= n do\n    if n % i == 0 then\n      if i % 2 == 0 then max_div = i end\n\
    \      break\n    end\n    i = i * 2 + 1\n  end\n  return max_div\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug_dp336.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpug_dp336.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphp8s8k8p.lua:19: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Use Euclid's algorithm to find all the prime factors of n.\n  -- For instance,\
    \ if n=21, then {n=21,2=1}\n  local factors = {}\n  local factor = 1\n  local\
    \ i = 2\n  while i <= n do\n    factor = factor ^ i\n    if factor == 1 then\n\
    \      factors[#factors+1] = factor\n    end\n    i = i + 2\n  end\n  -- Start\
    \ with the largest prime factor of n, then add all the multiples of that prime\
    \ factor.\n  -- This is called \"The Greatest Common Divisor\".\n  -- In other\
    \ words, if n=2, then {n = 2, 2=1}\n  local max_factor = 1\n  local max_prime_factor\
    \ = 1\n  local prime_factor = 1\n  for prime_factor in pairs(factors) do\n   \
    \ max_factor = max_factor ^ prime_factor\n    if max_factor > n then return n\
    \ end\n    if max_factor < n then max_prime_factor = prime_factor end\n  end\n\
    \  if max_prime_factor > n then return n end\n  -- The largest prime factor of\
    \ n is larger than n.\n  -- But it is still smaller than n. So it must be a factor.\n\
    \  return max_prime_factor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3r4x048.lua:38:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmph3r4x048.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 1 then return nil end\n  local result = 1\n  repeat\n    local n = n/result\n\
    \    result = result+1\n  until n > 1\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0gkb4nd.lua:17:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv0gkb4nd.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local factor = 1\n    for i = 1, n do\n        if n % i == 0 then\n     \
    \       factor = i\n        end\n    end\n    return factor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpib75ugio.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpib75ugio.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local m = 1\n    local k = n\n    while k > 1 do\n        if ((n / k) % 2\
    \ == 0) then\n            m = k\n        end\n        k = k * 2\n    end\n   \
    \ return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0x3dv_nc.lua:21:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp0x3dv_nc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We have no numbers smaller than n\n  if n < 2 then return n end\n  -- We\
    \ have no numbers smaller than or equal to n\n  if n < 10 then return n end\n\
    \  -- We only have numbers that are divisible by 2\n  if n % 2 == 0 then return\
    \ n end\n  -- We have numbers divisible by 2 and the number is also divisible\
    \ by 3\n  if n % 3 == 0 then return n end\n  -- We have numbers divisible by 2\
    \ and the number is also divisible by 5\n  if n % 5 == 0 then return n end\n \
    \ -- We have numbers divisible by 2 and the number is also divisible by 3\n  if\
    \ n % 3 == 0 then return n end\n  -- We have numbers divisible by 2 and the number\
    \ is also divisible by 5\n  if n % 5 == 0 then return n end\n  -- We have numbers\
    \ divisible by 2 and the number is also divisible by 7\n  if n % 7 == 0 then return\
    \ n end\n  -- We have numbers divisible by 2 and the number is also divisible\
    \ by 11\n  if n % 11 == 0 then return n end\n  -- We have numbers divisible by\
    \ 2 and the number is also divisible by 13\n  if n % 13 == 0 then return n end\n\
    \  -- We have numbers divisible by 2 and the number is also divisible by 17\n\
    \  if n % 17 == 0 then return n end\n  -- We have numbers divisible by 2 and the\
    \ number is also divisible by 19\n  if n % 19 == 0 then return n end\n  -- We\
    \ have numbers divisible by 2 and the number is also divisible by 31\n  if n %\
    \ 31 == 0 then return n end\n  -- We have numbers divisible by 2 and the number\
    \ is also divisible by 37\n  if n % 37 == 0 then return n end\n  -- We have numbers\
    \ divisible by 2 and the number is also divisible by 41\n  if n % 41 == 0 then\
    \ return n end\n  -- We have numbers divisible by 2 and the number is also divisible\
    \ by 43\n  if n % 43 == 0 then return n end\n  -- We have numbers divisible by\
    \ 2 and the number is also divisible by 47\n  if n % 47 == 0 then return n end\n\
    \  -- We have numbers divisible by 2 and the number is also divisible by 53\n\
    \  if n % 53 == 0 then return n end\n  -- We have numbers divisible by 2 and the\
    \ number is also divisible by 59\n  if n % 59 == 0 then return n end\n  -- We\
    \ have numbers divisible by 2 and the number is also divisible by 61\n  if n %\
    \ 61 == 0 then return n \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf_uagxzj.lua:45: 'end' expected (to close 'if' at line 44)\
    \ near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_factor = 1\n    local max_factor_count = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            local mult = 1\n            for j = 2,\
    \ i do\n                if n % i == j then\n                    mult = mult *\
    \ j\n                else\n                    break\n                end\n  \
    \          end\n            if mult > max_factor then\n                max_factor_count\
    \ = max_factor_count\n                max_factor = mult\n            end\n   \
    \     end\n    end\n    return max_factor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5tk_u56.lua:31:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpm5tk_u56.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local n = n or 0\n    for i = 1, n do\n        if n%i == 0 then\n       \
    \     return i\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkj1zh4e.lua:19:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpvkj1zh4e.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Initialisation\n  local max_divisor = 1\n  -- Main loop\n  for i = 2, n\
    \ do\n    -- If this number divides n evenly and has greater or equal divisor,\
    \ update current divisor\n    if i % 2 == 0 and i % max_divisor <= n then\n  \
    \    max_divisor = i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapqt546f.lua:20:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpapqt546f.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest number is one less than the number\n  -- that divides n evenly,\
    \ smaller than n\n  -- >>> largest_divisor(21)\n  -- 5\n  local largest = n -\
    \ 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4aff3gu2.lua:21: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local n = tonumber(n)\n  assert(n ~= nil, 'Input value is not a number')\n\
    \  assert(n > 0, 'Input value cannot be less than 1')\n  local divisor = 1\n \
    \ local remainder = n\n  repeat\n    remainder = remainder * 2\n    divisor =\
    \ divisor + 1\n  until remainder > divisor\n  return divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpht9gpqd0.lua:20:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpht9gpqd0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    -- Make sure we don't go past our maximum allowed number (2**64 - 1).\n \
    \   local max_divisor = math.min(sys.maxint, n)\n    local factor = 1\n    while\
    \ factor <= max_divisor do\n        if n % factor == 0 then\n            return\
    \ factor\n        end\n        factor = factor + 1\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzvwvj6l9.lua:6:\
    \ attempt to index a nil value (global 'sys')\nstack traceback:\n\t/tmp/tmpzvwvj6l9.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpzvwvj6l9.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest, largest2, largest3 = 1, n, n\n    for i = 2, n do\n      \
    \  if n % i == 0 then\n            largest = i\n            largest2 = n / i\n\
    \            if largest2 > largest3 then\n                largest3 = largest2\n\
    \            end\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjyt2reg.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpzjyt2reg.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = nil\n    local count = 0\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            count = count + 1\n            if max_divisor\
    \ == nil or count > max_divisor then\n                max_divisor = count\n  \
    \          end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fqgjipy.lua:23:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmp1fqgjipy.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max = 0\n    local result = 0\n    for i = 1, n do\n        local remainder\
    \ = n % i\n        if remainder == 0 then\n            result = i\n          \
    \  max = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ojxg0rr.lua:20:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp3ojxg0rr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 1\n    local m = 1\n    while i <= math.sqrt(n) do\n        if\
    \ n % i == 0 then\n            m = i\n        end\n        i = i + 1\n    end\n\
    \    return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hd7rlxs.lua:21:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp4hd7rlxs.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local factors\n  for factors = 2, n do\n    local i\n    for i = 1, n do\n\
    \      if n % i == 0 then break end\n    end\n    if i == n then return i end\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0ifilsn.lua:18:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmps0ifilsn.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local candidate = nil\n    for _ = 1, n do\n        if n % 2 == 0 and n %\
    \ 2 ~= 0 then\n            candidate = n\n            break\n        end\n   \
    \     n = n / 2\n    end\n    return candidate\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3j09ipe0.lua:19:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp3j09ipe0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = nil\n  for i = 1, n do\n    if n % i == 0 then\n      if divisor\
    \ == nil or divisor > i then\n        divisor = i\n      end\n    end\n  end\n\
    \  return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8q3vbpfg.lua:21:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp8q3vbpfg.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local ld_cnts = {}\n    for i = 2, n do\n        table.insert(ld_cnts, n\
    \ / i)\n    end\n    local max_ld = table.remove(ld_cnts, 1)\n    return max_ld\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_x7ejft.lua:16:\
    \ expected: 1, actual: 1.5\nstack traceback:\n\t/tmp/tmpb_x7ejft.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  return math.max(math.ceil(math.log(n, 2) / 2), math.ceil(math.sqrt(n)))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprflvgsge.lua:11:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprflvgsge.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \   if n < 2 then\n      return nil\n   end\n   local max = 0\n   for i = 2, n\
    \ do\n      if n % i == 0 then\n         if max < i then\n            max = i\n\
    \         end\n      end\n   end\n   return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzr1nao7.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptzr1nao7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    -- A prime is greater than 1, so return 1 instead of 0 if we want a divisor\n\
    \    if n == 2 then\n        return 1\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfhyhzfdl.lua:20: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  local max_divisor = 1\n  for _ = 2, n\
    \ do\n    -- If max_divisor is smaller than n, the largest divisor must be >=\
    \ 2\n    if max_divisor > n then\n      break\n    end\n    -- For a given n and\
    \ max_divisor >= n, we know the largest divisor must be <= n\n    local divisor\
    \ = 1\n    while divisor <= n do\n      -- If divisor divides max_divisor evenly,\
    \ then max_divisor must be >= divisor\n      -- If divisor divides n evenly then\
    \ n must be >= divisor and divisor must be < n\n      -- If divisor divides n\
    \ evenly and less than n, then n must be <= divisor and divisor must be < n\n\
    \      -- If divisor divides n evenly and greater than n, then divisor must be\
    \ > n and n must be < max_divisor\n      if n % divisor == 0 then\n        max_divisor\
    \ = divisor\n      end\n      divisor = divisor + 1\n    end\n  end\n  return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxst__xn.lua:33:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmplxst__xn.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_i = math.huge\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_i > i then\n                max_i = i\n            end\n \
    \       end\n    end\n    return max_i\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaer341m.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpbaer341m.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n == 1 then\n    return 1\n  else\n    local i = math.ceil(n/2)\n    if\
    \ n % i == 0 then\n      return i\n    else\n      return n\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpym09qlxn.lua:20:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpym09qlxn.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Find all divisors until n reaches 1.\n  local divisors = {}\n  -- Fill up\
    \ the divisors array from 1 to n.\n  local i = 1\n  while i <= n do\n    -- If\
    \ i is a divisor, add it to the divisors array, and increment i by 1.\n    if\
    \ n % i == 0 then\n      divisors[i] = i\n      i = i + 1\n    end\n  end\n  --\
    \ Return the largest number in the divisors array.\n  return table.Max(divisors)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = {}\n  for i=1,n do divisor[i] = i end\n  local largest = 0\n\
    \  local max_divisor = 0\n  for i=1,n do\n    if divisor[i] > max_divisor then\n\
    \      largest = i\n      max_divisor = divisor[i]\n    end\n  end\n  return largest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hhcm9g8.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp2hhcm9g8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = 1\n  while true do\n    if n%divisor == 0 then\n      divisor\
    \ = divisor + 1\n    else\n      return divisor\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpleyyryo0.lua:18:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpleyyryo0.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \t-- The largest divisor is equal to n / 2 + n^2 /4.\n\treturn (n/2) + math.pow(n,2)/4\
    \ \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqwn9g35.lua:12:\
    \ expected: 1, actual: 3.75\nstack traceback:\n\t/tmp/tmpdqwn9g35.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            largest_divisor = i\n        end\n    end\n    return largest_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv16fo13c.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv16fo13c.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  assert(type(n) == 'number', 'First argument must be a number')\n  assert(n\
    \ >= 0, 'First argument must be >= 0')\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb1g4g9u0.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \   assert(n > 0, \"n must be greater than 0\")\n   assert(n % 2 == 0, \"n must\
    \ be an even number\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp771ujkwn.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal max = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tif n > max then\n\
    \t\t\t\tmax = n\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1etbuc1.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpe1etbuc1.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local res = n\n    local i = 1\n    while true do\n        res = res / i\n\
    \        if res == n then\n            break\n        end\n        i = i + 1\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvuiddta9.lua:20:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpvuiddta9.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n == 0 then\n    return n\n  elseif n % 2 == 0 then\n    return largest_divisor(n\
    \ / 2)\n  else\n    return largest_divisor(n / 2) + 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5f0pyzy.lua:17:\
    \ expected: 1, actual: 1077\nstack traceback:\n\t/tmp/tmpn5f0pyzy.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local function is_even(n)\n        return (n%2)==0\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi4595wwt.lua:19: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \t-- Find largest divisor for number in range 0 to n\n\t-- >>> largest_divisor(15)\n\
    \t-- 5\n\tlocal divisor_count = 0\n\tfor i = 1, n do\n\t\tlocal d = i\n\t\t--\
    \ Keep incrementing until we get a divisor that is less than n\n\t\t-- >>> largest_divisor(15)\n\
    \t\t-- 5\n\t\twhile n % d == 0 do\n\t\t\t-- Keep incrementing until we get a divisor\
    \ that is smaller than n\n\t\t\t-- >>> largest_divisor(15)\n\t\t\t-- 2\n\t\t\t\
    d = d + 1\n\t\tend\n\t\t-- Store the largest divisor for our number in our list\
    \ of divisors\n\t\tif d > divisor_count then\n\t\t\tdivisor_count = d\n\t\tend\n\
    \tend\n\treturn divisor_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirew0o_w.lua:31:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpirew0o_w.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \   if n < 1 then return 1 end\n   if n < 2 then return 1 end\n   local s = math.sqrt(n)\n\
    \   if s <= n then\n      if s % 2 == 0 then\n         return math.floor(n / 2)\n\
    \      else\n         return math.floor((n % 2 + s) / 2) / 2\n      end\n   else\n\
    \      local div = math.floor((n % s + s + 1) / 2)\n      -- This should never\
    \ happen\n      if div >= n then return 1 end\n      return div\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcs9t1wk1.lua:25:\
    \ expected: 1, actual: 0.5\nstack traceback:\n\t/tmp/tmpcs9t1wk1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \   -- Find largest divisor by trial division\n   local div = 1\n   while div\
    \ <= n do\n      if n % div == 0 then\n         return div\n      end\n      div\
    \ = div * 2\n   end\n   return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q8qihz6.lua:21:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp7q8qihz6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = 0\n  while n > divisor do\n    divisor = divisor + 1\n  end\n\
    \  \n  return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpup44_7ga.lua:16:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpup44_7ga.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Initialise a table of candidates for divisors\n  local divisors = {}\n \
    \ -- Iterate from 2 to the square root of the number\n  for i = 2, math.floor(math.sqrt(n))\
    \ do\n    -- Check for divisibility by each number until n is found\n    while\
    \ n % i == 0 do\n      -- Add the number to the candidate set\n      divisors[i]\
    \ = n\n      -- Divide the number by i\n      n = n / i\n    end\n    -- If a\
    \ divisor has been found, break out of the loop\n    if divisors[i] ~= 0 then\
    \ break end\n    -- If no divisors have been found yet, use the number itself\n\
    \  end\n  -- Return the largest divisor in the candidate set\n  return maxn(divisors)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxizpigtx.lua:21:\
    \ attempt to call a nil value (global 'maxn')\nstack traceback:\n\t/tmp/tmpxizpigtx.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpxizpigtx.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i=1, n do\n        if n % i == 0 then\n            return i\n       \
    \ end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsz1qcl2u.lua:17:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpsz1qcl2u.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.ceil(n)\n    for div = 2, max_div * 2 do\n        if\
    \ n % div == 0 then\n            return div\n        end\n    end\n    return\
    \ max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmz1m8x4r.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmz1m8x4r.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \   if n % 2 == 0 then\n      return n / 2\n   elseif n % 3 == 0 then\n      return\
    \ n / 3\n   elseif n % 5 == 0 then\n      return n / 5\n   else\n      return\
    \ largest_divisor(n / 3)\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnttvidz5.lua:20:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpnttvidz5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp89q3a_ql.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is prime number, then n is largest number\n  if n == 1 then return\
    \ 1 end\n  -- If n is even number, then n is largest number that divides n evenly\n\
    \  if n % 2 == 0 then return (largest_divisor(n / 2)) end\n  -- If n is odd number,\
    \ then n is smallest number that divides n evenly\n  return largest_divisor(3\
    \ * n + 1) / 3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmc9f1l9n.lua:16:\
    \ expected: 1, actual: 0.11111111111111\nstack traceback:\n\t/tmp/tmpmc9f1l9n.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Check for corner cases\n  if n == 2 then return 1 end\n  if n == 0 then\
    \ return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0vfmgxnm.lua:19: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = 0\n    for i = 2, n-1 do\n        if n % i == 0 then\n  \
    \          if max_div < i then\n                max_div = i\n            end\n\
    \        end\n    end\n    return max_div\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcmpppzcq.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpcmpppzcq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    assert(n > 0)\n    assert(n >= 2)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkmptg7cs.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    return math.max(math.ceil(n / math.log(2)),1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9n0vurwt.lua:11:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmp9n0vurwt.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \t-- Base case: when n is even, return n\n\tif n <= 1 then return n end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_nfgvtxd.lua:18: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqabtj62b.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \   local max = 1\n   for i = 2, n do\n      if n % i == 0 then\n         if n\
    \ > max then\n            max = n\n         else\n            max = i\n      \
    \   end\n      end\n   end\n   return max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxtdpbct7.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpxtdpbct7.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor of n is always evenly divisible by n\n  if n%2==0 then\n\
    \    return 2\n  end\n  -- The largest divisor of n is always evenly divisible\
    \ by n\n  local m=0\n  for i = 3, n-1, 2 do\n    -- If n is divisible by i, then\
    \ the largest divisor of n is i\n    if n%i==0 then\n      m=i\n      break\n\
    \    end\n  end\n  return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa23fdbap.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpa23fdbap.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Find the largest divisor that's smaller than n\n  local max_divisor = 1\n\
    \  for i = 2, n do\n    if n % i == 0 then\n      -- If the next divisor is less\
    \ than the current divisor, it's larger\n      if max_divisor < i then\n     \
    \   max_divisor = i\n      end\n    end\n  end\n  return max_divisor\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvz49xdy8.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpvz49xdy8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local div, maxdiv = n, 0\n    while div > 1 do\n        div = div / 2\n \
    \       if div > maxdiv then\n            maxdiv = div\n        end\n    end\n\
    \    return maxdiv\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsifx3uti.lua:18:\
    \ expected: 1, actual: 1.5\nstack traceback:\n\t/tmp/tmpsifx3uti.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- assert(n >= 0)\n  if n == 1 then\n    return 1\n  elseif n % 2 == 0 then\n\
    \    return largest_divisor(n / 2)\n  else\n    return largest_divisor(3 * n +\
    \ 1) - n % 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpke8_o6m9.lua:18:\
    \ expected: 1, actual: -1\nstack traceback:\n\t/tmp/tmpke8_o6m9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    -- Find largest number that divides n evenly\n    -- >>> largest_divisor(15)\n\
    \    -- 5\n    -- (n * (n + 1) / 2) is the highest number that divides n evenly\
    \ and is still smaller than n\n    -- (n - 1) divides n evenly\n    -- >>> largest_divisor(15)\n\
    \    -- 7\n    -- (n * (n - 1) / 2) is the highest number that divides n evenly\
    \ and is still smaller than n\n    -- ((n-1) * (n-2) / 2) is the highest number\
    \ that divides n evenly and is still smaller than n\n    -- (((n - 1) * n - 2)\
    \ / 2) = n * ((n-1) * (n-2) / 2)\n    -- so this expression gives the largest\
    \ number that divides n evenly, smaller than n\n    local result = math.floor(((n\
    \ * (n + 1) / 2) - math.floor((n - 1) * (n - 1) / 2))) -- ((n * (n + 1) / 2) -\
    \ math.floor((n - 1) * (n - 1) / 2))\n    -- if result is 1, then result is 1,\
    \ because n * (n + 1) / 2 divides n evenly\n    -- if result is 2, then result\
    \ is 2, because (n * (n + 1) / 2) is the highest number that divides n evenly\
    \ and is still smaller than n\n    -- if result is 2, then result is 3, because\
    \ ((n - 1) * n - 2) / 2) = n * ((n-1) * (n-2) / 2)\n    -- so this expression\
    \ gives the largest number that divides n evenly, smaller than n\n    return result\
    \ == math.floor(result) or result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7hpfnmos.lua:27:\
    \ expected: 1, actual: true\nstack traceback:\n\t/tmp/tmp7hpfnmos.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n == 1 then\n        return n\n    end\n    if n%2 == 0 then\n       \
    \ return largest_divisor(math.floor(n/2))\n    end\n    if n%3 == 0 then\n   \
    \     return largest_divisor(math.floor(n/3))\n    end\n    return largest_divisor(math.floor(n/4))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0hlpnyi.lua:22:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpk0hlpnyi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  return math.floor((math.ceil(n) / math.ceil(n)) * math.ceil(n))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj3bbezb.lua:11:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpgj3bbezb.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n < 1 then return end\n    local s = #n\n    for i=1,s do\n        if\
    \ n%i == 0 then\n            n = n/i\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmpsvb21y.lua:6:\
    \ attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmpmpsvb21y.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpmpsvb21y.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 0\n    for i=1, n do\n        if n % i == 0 then\n      \
    \      largest = i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6p7ahoy_.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp6p7ahoy_.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_count = 0\n  for i = 2, n do\n    if math.fmod(n,i)\
    \ == 0 then\n      -- If there is another divisor that's even smaller\n      --\
    \ than n, we might not have any idea of the largest\n      -- divisor yet.\n \
    \     if max_div_count > 0 then\n        break\n      else\n        max_div_count\
    \ = 0\n        max_div = i\n      end\n    end\n    -- If we've already found\
    \ an even smaller divisor than n\n    -- then we just need to make sure that the\
    \ largest\n    -- divisor we found is less than n.\n    if max_div_count > 0 then\n\
    \      break\n    end\n  end\n  return max_div\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0p86lto.lua:32:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_0p86lto.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisors = {}\n    for i = 1, n do\n        local n = n - i -- Remainder\n\
    \        local count = 0\n        for j = 1, #divisors do\n            if n %\
    \ divisors[j] == 0 then\n                count = count + 1\n                divisors[j]\
    \ = n\n            end\n        end\n        if count == #divisors then\n    \
    \        table.insert(divisors, n)\n        end\n    end\n    return #divisors\
    \ -- Return the largest number that divides n evenly\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbztqgso3.lua:25:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbztqgso3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  local a = largest_divisor(n/2)\n  if\
    \ n % a == 0 then\n    return n\n  elseif n == a then\n    return a\n  else\n\
    \    return a + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1xabr_u.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpi1xabr_u.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \   -- First loop over all even numbers to find divisor divisible by it\n   local\
    \ divisior = nil\n   for i = 2, n do\n      if n % i == 0 then\n         divisior\
    \ = i\n         break\n      end\n   end\n   if divisior ~= nil then\n      return\
    \ divisior\n   else\n      -- Second loop over all odd numbers to find divisor\
    \ divisible by it\n      divisior = nil\n      for i = 3, 1, -1 do\n         if\
    \ n % i == 0 then\n            divisior = i\n            break\n         end\n\
    \      end\n      return divisior\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17f7za2d.lua:31:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp17f7za2d.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local div = 1\n    local max_div = div\n    for i = 1, n do\n        if n\
    \ % i == 0 then\n            if div > max_div then\n                max_div =\
    \ div\n            else\n                div = div + 1\n            end\n    \
    \    end\n    end\n    return max_div\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9alep4_.lua:22:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx9alep4_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor\n    for i = 1, n do\n        divisor = n / i\n        if n\
    \ % divisor == 0 then return divisor end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mn6sikf.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9mn6sikf.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local s = 2\n    local k = 0\n    while s <= n do\n        if n % s == 0\
    \ then\n            k = s\n        end\n        s = s + 2\n    end\n    return\
    \ k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnuxf9xz.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpqnuxf9xz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Find largest divisor less than or equal to n\n  local maxDivisor = 1\n \
    \ while n > maxDivisor do\n    -- If n is divisible by maxDivisor, we know that\
    \ maxDivisor must be too large\n    -- So we increment maxDivisor\n    maxDivisor\
    \ = maxDivisor + 1\n  end\n  -- If n is not divisible by maxDivisor, n must be\
    \ divisible by maxDivisor\n  -- So return maxDivisor + 1\n  return maxDivisor\
    \ + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0z76y9l2.lua:20:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmp0z76y9l2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Return largest divisor of n\n  -- >>> largest_divisor(15)\n  -- 5\n  --\
    \ >>> largest_divisor(361)\n  -- 13\n  -- >>> largest_divisor(500)\n  -- 20\n\
    \  -- >>> largest_divisor(1000)\n  -- 100\n  -- >>> largest_divisor(1000)\n  --\
    \ 10\n  -- >>> largest_divisor(2000)\n  -- 20\n  -- >>> largest_divisor(2000)\n\
    \  -- 20\n  -- >>> largest_divisor(3000)\n  -- 100\n  if n < 2 then return 1 end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt_xl94l5.lua:34: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_factor = 1\n    for i = 2, n do\n        if n % i == 0 then\n \
    \           local factor = n / i\n            if factor > max_factor then\n  \
    \              max_factor = factor\n            end\n        end\n    end\n  \
    \  return max_factor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Initialize maxDiv to n\n  local maxDiv = n\n  -- If n is even, maxDiv is\
    \ n\n  if n % 2 == 0 then\n    maxDiv = n\n  -- If n is odd, maxDiv is evenly\
    \ divisible by n\n  elseif n % 2 == 1 then\n    -- Find smallest odd number smaller\
    \ than n\n    local m = n - (n + 1) / 2\n    -- If m divides n, then maxDiv is\
    \ n / m\n    if m % n == 0 then\n      maxDiv = m / n\n    -- If m does not divide\
    \ n, then maxDiv is n\n    else\n      maxDiv = n\n    end\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph7jbp4ga.lua:33: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest, n = n, 1\n  local div = 2\n  while div <= n do\n    if n % div\
    \ == 0 then\n      largest = div\n    end\n    n = div * 2 + 1\n    div = div\
    \ * 2 + 1\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswjlnfmv.lua:20:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpswjlnfmv.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal largest_factor = 1\n\tlocal i = 2\n\twhile i <= n do\n\t\tlocal factor\
    \ = n / i\n\t\tif factor > largest_factor then\n\t\t\tlargest_factor = factor\n\
    \t\tend\n\t\ti = i + 1\n\tend\n\treturn largest_factor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lj1soif.lua:20:\
    \ expected: 1, actual: 1.5\nstack traceback:\n\t/tmp/tmp1lj1soif.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local limit = math.floor(n/2 + 1)\n    local current = 1\n    local found\
    \ = false\n    while current <= limit do\n        if n % current == 0 then\n \
    \           found = true\n            limit = math.floor(n / current)\n      \
    \  end\n        current = current + 1\n    end\n    if not found then\n      \
    \  return n\n    end\n    return limit\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw24hoo6p.lua:26:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpw24hoo6p.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest_divisor, next_divisor = 2, n\n    for i = 2, next_divisor do\n\
    \        if n % i == 0 then\n            if i % 2 == 0 then\n                if\
    \ n > largest_divisor then\n                    largest_divisor = i\n        \
    \        end\n            else\n                if n < largest_divisor then\n\
    \                    largest_divisor = i\n                end\n            end\n\
    \        end\n        next_divisor = next_divisor / 2\n    end\n    return largest_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpfs4lfc.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmplpfs4lfc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    assert(n > 0 and n <= 2^32)\n    local max_div = 2^32-1\n    local max_div_step\
    \ = 2^32\n    while max_div > 1 and max_div_step > 1 do\n        if n % max_div\
    \ == 0 then\n            max_div = max_div - 1\n        else\n            max_div\
    \ = max_div / 2\n        end\n        max_div_step = max_div * 2\n    end\n  \
    \  return max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjyi5w_j.lua:22:\
    \ expected: 1, actual: 0.99999999976717\nstack traceback:\n\t/tmp/tmpwjyi5w_j.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpim676ugc.lua:19: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local num = 1\n    while n % num == 0 do\n        num = num * 3 + 1\n   \
    \ end\n    return num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphah44knl.lua:15:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmphah44knl.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            return i\n     \
    \   end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_rt7ac9p.lua:16:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_rt7ac9p.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i=2,n/2 do\n        if n%d == 0 then\n   \
    \         max_divisor = i\n        end\n    end\n    return max_divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdm11ixs7.lua:7:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpdm11ixs7.lua:7: in local 'candidate'\n\t/tmp/tmpdm11ixs7.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local smaller_than_n = math.floor(n/2)\n    local max_divisor = smaller_than_n\n\
    \    local i = 2\n    while i <= smaller_than_n do\n        if n % i == 0 then\n\
    \            max_divisor = i\n        end\n        i = i + 1\n    end\n    return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajii_ouh.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpajii_ouh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = 0\n    for d = 2, n do\n        if n % d == 0 then\n    \
    \        if d > max_div then\n                max_div = d\n            end\n \
    \       end\n    end\n    return max_div\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbc2h49a.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppbc2h49a.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  assert(n >= 0, \"n must be >= 0\")\n  local i = 1\n  while i <= n do\n    local\
    \ d = n\n    while i * d <= n and d % i == 0 do\n      d = d / i\n    end\n  \
    \  i = i + 1\n  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 1 then return nil end\n  local max_divisor\n  for i = 2, n do\n    if\
    \ n % i == 0 then\n      local divisor = i\n      if max_divisor == nil then max_divisor\
    \ = divisor end\n      if max_divisor < divisor then max_divisor = divisor end\n\
    \    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexgj202v.lua:20:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpexgj202v.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then return n end\n  if n == 2 then return 2 end\n  if n % 2 == 0\
    \ then return largest_divisor(n/2) end\n  if n == 1 then return 1 end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvre6tx_r.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpvre6tx_r.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    -- Find all divisors of the number n\n    for i = 1, n do\n        if n %\
    \ i == 0 then\n            -- if there are no divisors smaller than n, then n\
    \ is divisible by i\n            if i == 1 then\n                return i\n  \
    \          end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3n8vi3p.lua:21:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpg3n8vi3p.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Using Euclid's algorithm: O(sqrt(n)) time\n  local m = n\n  local factor\
    \ = 1\n  local while factor * factor <= m do\n    factor = factor * factor\n \
    \ end -- for i = 2, m, 2\n  while factor < n do\n    factor = factor + 1\n  end\
    \ -- for i = 2, m, 2\n  return factor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3rw42gdr.lua:8: <name> expected near 'while'\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local div = 1\n    while div <= n do\n        if\
    \ n % div == 0 then\n            max_div = div\n        end\n        div = div\
    \ * 2\n    end\n    return max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yaanv83.lua:21:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp7yaanv83.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \   if n==0 then\n      return 0\n   else\n      local i = n\n      while i%2==0\
    \ do\n         i = i/2\n      end\n      return i\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9is3iee.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmph9is3iee.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \   if n == 1 then\n      return n\n   end\n   local m, r = n % 2, 0\n   while\
    \ m do\n      r = r * m + 1\n      m, r = m / 2, r\n   end\n   return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- TODO: This can be done more efficiently and probably more easily\n  -- without\
    \ having to go through every number and checking if it\n  -- divides evenly\n\
    \  if n<0 then return 0 end\n  local max_factor = 1\n  local max_divisor = 1\n\
    \  local i = 2\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      local\
    \ factor = (n/i)\n      if factor > max_factor then\n        max_factor = factor\n\
    \        max_divisor = i\n      end\n    end\n    i = i+1\n  end\n  return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6f4k7yd.lua:30:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpr6f4k7yd.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest = 1\n  local factor = 1\n  for _ = 1, n do\n    while n >= factor\
    \ do\n      if n % factor == 0 then\n        largest = factor\n      end\n   \
    \   factor = factor * 10\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbc542mh4.lua:23:\
    \ expected: 5, actual: 10\nstack traceback:\n\t/tmp/tmpbc542mh4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local result = 1\n    while n ~= 0 do\n        if n % result == 0 then\n\
    \            break\n        end\n        result = result + 1\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprcwd4s5v.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmprcwd4s5v.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local s = math.floor(math.sqrt(n)) + 1\n    local i = 1\n    while i <= s\
    \ do\n        if n % i == 0 then\n            return i\n        end\n        i\
    \ = i + 1\n    end\n    return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8tapriba.lua:21:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp8tapriba.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local primes = {}\n    for i=2,n do\n        for j=2,n do \n            if\
    \ i%j == 0 then table.insert(primes,j) end\n        end\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3cl3wa_c.lua:22: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i=1,n do\n        if n % i == 0 then\n       \
    \     if largest * i > n then -- If largest is bigger than n\n               \
    \ largest = n\n            end\n        else\n            largest = i\n      \
    \  end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnaj7_g52.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpnaj7_g52.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n == 1 then\n    return n\n  else\n    if n % 2 == 0 then\n      return\
    \ largest_divisor(n / 2)\n    else\n      return 2 * largest_divisor(3 * n) +\
    \ 1\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj560s49q.lua:11:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpj560s49q.lua:11: in upvalue 'largest_divisor'\n\
    \t/tmp/tmpj560s49q.lua:11: in upvalue 'largest_divisor'\n\t/tmp/tmpj560s49q.lua:11:\
    \ in upvalue 'largest_divisor'\n\t/tmp/tmpj560s49q.lua:11: in upvalue 'largest_divisor'\n\
    \t/tmp/tmpj560s49q.lua:11: in upvalue 'largest_divisor'\n\t/tmp/tmpj560s49q.lua:11:\
    \ in upvalue 'largest_divisor'\n\t/tmp/tmpj560s49q.lua:11: in upvalue 'largest_divisor'\n\
    \t/tmp/tmpj560s49q.lua:11: in upvalue 'largest_divisor'\n\t/tmp/tmpj560s49q.lua:11:\
    \ in upvalue 'largest_divisor'\n\t...\n\t/tmp/tmpj560s49q.lua:11: in local 'candidate'\n\
    \t/tmp/tmpj560s49q.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.260\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local factor = 1\n  repeat\n    factor = factor + 1\n  until n % factor ==\
    \ 0 and factor <= n / factor\n  return factor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = 0\n  for i = 1, n do\n    if n % i == 0 then\n      divisor\
    \ = i\n      break\n    end\n  end\n  return divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvahyl0y.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpwvahyl0y.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal ans = 0\n\tfor i = 1, n do\n\t\tif isprime(i) then\n\t\t\tlocal r = math.floor(math.sqrt(i))\n\
    \t\t\tlocal s = i-r\n\t\t\tif s < 0 then\n\t\t\t\ts = s+1\n\t\t\tend\n\t\t\tif\
    \ r*r > i then\n\t\t\t\tans = r\n\t\t\tend\n\t\tend\n\tend\n\treturn ans\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0h0a9d0h.lua:7:\
    \ attempt to call a nil value (global 'isprime')\nstack traceback:\n\t/tmp/tmp0h0a9d0h.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0h0a9d0h.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then return end\n  local max = 0\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      if n % i == 1 then\n        max = i - 1\n      else\n     \
    \   max = i\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m0h1mgi.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp8m0h1mgi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n == 1 then\n    return 1\n  elseif n < 2 then\n    return n\n  else\n \
    \   local m = n / 2\n    local r = largest_divisor(m)\n    return m if r > n else\
    \ r\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwwn9ay99.lua:12: 'end' expected (to close 'if' at line 5)\
    \ near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpydkibznb.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local factors = {}\n  local max = n\n  for i = 1, n do\n    -- find factors\
    \ other than 1 and i\n    local p = i\n    while p * p <= n do\n      p = p *\
    \ p\n    end\n    factors[p] = factors[p] or 1\n    factors[p] = factors[p] +\
    \ 1 or 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbyoql4j1.lua:27: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \t-- >>> largest_divisor(23)\n\t-- 13\n\t-- -5\n\t-- >>> largest_divisor(12)\n\
    \t-- 10\n\t-- -2\n\t-- -3\n\t-- -4\n\t-- >>> largest_divisor(8)\n\t-- 6\n\t--\
    \ -2\n\t-- -4\n\t-- >>> largest_divisor(6)\n\t-- 4\n\t-- -4\n\t-- >>> largest_divisor(10)\n\
    \t-- 8\n\t-- -4\n\t-- >>> largest_divisor(1)\n\t-- 2\n\t-- -2\n\t-- >>> largest_divisor(0.5)\n\
    \t-- 1\n\t-- -4\n\t-- >>> largest_divisor(2.0)\n\t-- 4\n\t-- >>> largest_divisor(3.0)\n\
    \t-- 8\n\t-- >>> largest_divisor(6.0)\n\t-- 16\n\t-- -4\n\t-- >>> largest_divisor(7.0)\n\
    \t-- 8\n\t-- -4\n\t-- >>> largest_divisor(8.0)\n\t-- 16\n\t-- -4\n\t-- >>> largest_divisor(9.0)\n\
    \t-- 16\n\t-- -4\n\t-- >>> largest_divisor(10.0)\n\t-- 20\n\t-- >>> largest_divisor(11.0)\n\
    \t-- 24\n\t-- -4\n\t-- >>> largest_divisor(12.0)\n\t-- 20\n\t-- -4\n\t-- >>> largest_divisor(13.0)\n\
    \t-- 24\n\t-- -4\n\t-- >>> largest_divisor(14.0)\n\t-- 24\n\t-- >>> largest_divisor(15.0)\n\
    \t-- 30\n\t-- -4\n\t-- >>> largest_divisor(16.0)\n\t-- 30\n\t-- -4\n\t-- >>> largest_divisor(17.0)\n\
    \t-- 30\n\t-- -4\n\t-- >>> largest_divisor(18.0)\n\t-- 36\n\t-- -4\n\t-- >>> largest_divisor(19.0)\n\
    \t-- 36\n\t-- -4\n\t-- >>> largest_divisor(20.0)\n\t-- 42\n\t-- -4\n\t-- >>> largest_divisor(21.0)\n\
    \t-- 42\n\t-- -4\n\t-- >>> largest_divisor(22.0)\n\t-- 48\n\t-- -4\n\t-- >>> largest_divisor(23.0)\n\
    \t-- 48\n\t-- -4\n\t-- >>> largest_divisor(24.0)\n\t-- 56\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2nybclpd.lua:98: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = nil\n    local max_divisor_value = 1\n    local dividend\
    \ = n\n    local divisor = 1\n    while dividend ~= 0 do\n        if dividend\
    \ % divisor == 0 then\n            if divisor > max_divisor then\n           \
    \     max_divisor_value = divisor\n                max_divisor = divisor\n   \
    \         end\n            divisor = divisor + 1\n        else\n            divisor\
    \ = 1\n        end\n        dividend = dividend - 1\n    end\n    return max_divisor_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmwuwdhlc.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmwuwdhlc.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpmwuwdhlc.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = 1\n  while i <= n do\n    if n % i == 0 then\n      return i\n  \
    \  end\n    i = i * 2 + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpplw7lfl8.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpplw7lfl8.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest = 1\n  for i = 2, n do\n    local c = math.gcd(i, largest)\n\
    \    if c > 1 then\n      largest = c\n    end\n  end\n  return largest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpieexo26p.lua:7:\
    \ attempt to call a nil value (field 'gcd')\nstack traceback:\n\t/tmp/tmpieexo26p.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpieexo26p.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 0\n  for i = 2, n do\n    if n % i == 0 then\n      d = i\n    end\n\
    \  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65767osz.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp65767osz.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Check base cases\n  if n < 2 then\n    return 1\n  elseif n % 2 == 0 then\n\
    \    return 2\n  else\n    -- Get the smallest number k such that n % k == 0\n\
    \    local k = math.floor(n/2)\n    -- Find the largest divisor for n / k\n  \
    \  local d = n / k\n    -- Make sure the largest divisor is smaller than n\n \
    \   if d > n then\n      k = n - 1\n      d = n / k\n    end\n    -- Get the largest\
    \ divisor for n / k\n    local e = n / d\n    -- Make sure the smallest divisor\
    \ is larger than n\n    if e < n then\n      k = n - 1\n      d = n / k\n    \
    \  e = n / d\n    end\n    -- Return the largest divisor for n\n    return k\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_78u0pf.lua:36:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpp_78u0pf.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    if n == 1 then return n end\n    for i = 2, n do\n        if n % i == 0 then\
    \ return i end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfq0h1fl6.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfq0h1fl6.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = n / 2\n    local max_mod = n % 2\n    while max_mod > 0 do\n\
    \        max_div = max_div * 2\n        max_mod = max_mod / 2\n    end\n    return\
    \ max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmp2sl2p.lua:17:\
    \ expected: 1, actual: #Inf\nstack traceback:\n\t/tmp/tmpgmp2sl2p.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max = 0\n    local index = 0\n    for i = 2, n do\n        if n % i\
    \ == 0 then\n            max = i\n            index = i\n        end\n    end\n\
    \    if n == index then\n        return n\n    end\n    return max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuk46rw5g.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpuk46rw5g.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Initialize our variables\n  local max_num = 0\n  local max_divior = 0\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1rvi8am1.lua:19: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  assert(type(n) == \"number\")\n  assert(n > 0)\n  -- No need to optimize for\
    \ negative numbers\n  if n < 1 then return 0 end\n  local div, mod = math.divmod(n,\
    \ 2)\n  while div == 0 and mod ~= 0 do\n    -- Decrement n, as we just checked\
    \ that the quotient is non-zero\n    n = n - 1\n    div, mod = math.divmod(n,\
    \ 2)\n  end\n  -- For positive n, return n if div is non-zero or n if div is 0\n\
    \  return div == 0 or n or n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdr46yj_h.lua:9:\
    \ attempt to call a nil value (field 'divmod')\nstack traceback:\n\t/tmp/tmpdr46yj_h.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdr46yj_h.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then return 1 end\n  local div = 1\n  local p = n\n  while div < p\
    \ do\n    div = div * 2\n  end\n  return p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcimadypg.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpcimadypg.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local s = math.sqrt(n)\n  if n % s == 0 then\n    if n % 2 == 0 then\n    \
    \  return n\n    end\n    return largest_divisor(n / 2)\n  elseif n == 1 then\n\
    \    return 1\n  end\n  return largest_divisor(s * (s + 1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local res = 1\n    for i = 2, n do\n        if n % i == 0 then\n        \
    \    res=i\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfcvzutc1.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfcvzutc1.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest_divisor = n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxzo38p2n.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tassert(n >= 0)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgs73auco.lua:17: 'end' expected (to close 'function' at line\
    \ 4) near <eof>\n"
  exit_code: 1
  status: Exception
