name: HumanEval_19_sort_numbers
language: lua
results:
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local output = {}\n    local index = 0\n\
    \    local spaces = 0\n    local last = ''\n    for word in string.gmatch(numbers,\
    \ \"%S+\") do\n        if last ~= '' then\n            if last ~= ' ' and word:len()\
    \ >= 2 then\n                output[index] = last\n                index = index\
    \ + 1\n            end\n            last = word\n        end\n        if word\
    \ ~= ' ' then\n            output[index] = word\n            index = index + 1\n\
    \        end\n    end\n    if last ~= '' then\n        output[index] = last\n\
    \    end\n    for i = index, 1, -1 do\n        table.insert(output, output[i])\n\
    \    end\n    return table.concat(output, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4o3hy2l9.lua:37:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp4o3hy2l9.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+', ''):gsub('%d+', '')\n    local numbers = numbers..split(' ')\n\
    \    numbers = numbers:gsub(' ', '')\n    table.sort(numbers)\n    return table.concat(numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy66ptgj8.lua:8:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpy66ptgj8.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpy66ptgj8.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local s = \"\"\n  local p = 1\n  for i = 1,\
    \ string.len(numbers) do\n    if numbers[i] then\n      local num = tonumber(numbers[i])\n\
    \      if num == nil then\n        io.stderr:write(string.format(\"Invalid number\
    \ \\\"%s\\\" in \\\"%s\\\"\\n\", numbers[i], numbers))\n      else\n        if\
    \ s == \"\" then\n          s = num\n        else\n          if p > s then\n \
    \           s = num\n          else\n            s = s + \" \"\n          end\n\
    \        end\n      end\n      p = p + 1\n    end\n  end\n  return s\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9wcqxds.lua:35:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpa9wcqxds.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n   -- Convert numbers to numbers\n   numbers\
    \ = tostring(numbers):gsub('(%[\\n]|[^\\n])', ''):gsub('(%-%-%)', ''):gsub('(%-)',\
    \ ''):gsub('[^%d]+', '')\n   -- Validate that numbers are in the valid range\n\
    \   if #numbers > 1 then\n      numbers = tostring(numbers):gsub('[^%d]+', '')\n\
    \      if numbers == '0' then\n         numbers = ''\n      elseif numbers ~=\
    \ 'one' and numbers ~= 'two' and numbers ~= 'three' and numbers ~= 'four' and\
    \ numbers ~= 'five' and numbers ~= 'six' and numbers ~= 'seven' and numbers ~=\
    \ 'eight' and numbers ~= 'nine' then\n         print('sort_numbers: bad numbers\
    \ input')\n         return nil\n      end\n   end\n   -- Convert numbers to numbers\
    \ and sort them\n   local sort_numbers = numbers.split(' ')\n   table.sort(sort_numbers)\n\
    \   -- Construct the string and return it\n   return table.concat(sort_numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwcuvr0d0.lua:20:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpwcuvr0d0.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpwcuvr0d0.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local new_numbers = {}\n    local num_strings\
    \ = split(numbers, \" \")\n    for _, num_string in ipairs(num_strings) do\n \
    \       if num_string == \"nine\" then\n            new_numbers[#new_numbers+1]\
    \ = \"nine\"\n        elseif num_string == \"eight\" then\n            new_numbers[#new_numbers+1]\
    \ = \"eight\"\n        elseif num_string == \"seven\" then\n            new_numbers[#new_numbers+1]\
    \ = \"seven\"\n        elseif num_string == \"six\" then\n            new_numbers[#new_numbers+1]\
    \ = \"six\"\n        elseif num_string == \"five\" then\n            new_numbers[#new_numbers+1]\
    \ = \"five\"\n        elseif num_string == \"four\" then\n            new_numbers[#new_numbers+1]\
    \ = \"four\"\n        elseif num_string == \"three\" then\n            new_numbers[#new_numbers+1]\
    \ = \"three\"\n        elseif num_string == \"two\" then\n            new_numbers[#new_numbers+1]\
    \ = \"two\"\n        elseif num_string == \"one\" then\n            new_numbers[#new_numbers+1]\
    \ = \"one\"\n        elseif num_string == \"zero\" then\n            new_numbers[#new_numbers+1]\
    \ = \"zero\"\n        else\n            error(\"Invalid number: '\" .. num_string\
    \ .. \"'. Expected nine, eight, seven, six, five, four, three, two, one or zero.\"\
    )\n        end\n    end\n    return table.concat(new_numbers, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5te0cpyz.lua:8:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp5te0cpyz.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp5te0cpyz.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sort_keys = {}\n  local num_numbers\
    \ = nil\n  local num\n  for _,num in ipairs(string.gmatch(numbers, '%w+')) do\n\
    \    if num_numbers == nil then\n      num_numbers = num\n    else\n      sort_keys[num_numbers]\
    \ = num\n    end\n  end\n  return table.concat(sort_keys)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local n = tonumber(numbers)\n  local ret =\
    \ ''\n  while n ~= nil do\n    ret = string.rep(ret, n)\n    n = tonumber(ret)\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ynt2pd9.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp6ynt2pd9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sortedString = \"\"\n  \n  local function\
    \ sorter()\n    local currentNumber\n    local currentString\n    \n    for currentNumber\
    \ in numbers:gmatch(\"(%d+)\") do\n      table.insert(sortedString, currentNumber)\n\
    \    end\n  end\n  \n  sorter()\n  \n  return sortedString\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmqag2r1.lua:27:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmptmqag2r1.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal i, count\n\tlocal numbers = string.gsub(numbers,\
    \ '(^%s*)(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)',\
    \ '\\1\\4\\3\\2\\5\\4\\1\\3\\4\\5\\2')\n\tlocal numbers_sorted = {}\n\tfor i,\
    \ count in ipairs(string.gmatch(numbers, '%%d+')) do\n\t\ttable.insert(numbers_sorted,\
    \ count)\n\tend\n\treturn table.concat(numbers_sorted)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local n = tonumber(numbers)\n  if not n then\
    \ return nil end\n  local i, count = 1, {}\n  while i <= n do\n    count[i] =\
    \ count[i] or 0\n    count[i] = count[i] + 1\n    i = i + 1\n  end\n  i = 1\n\
    \  while i <= n do\n    if count[i] > 1 then\n      local j, j_count = 0, {}\n\
    \      repeat\n        j_count[j] = j_count[j] + 1\n        j = j + 1\n      until\
    \ count[j] == 1\n      if j == n then\n        table.sort(count, function(a, b)\
    \ return a < b end)\n      else\n        local smaller, larger = 1, n\n      \
    \  for k = 1, n do\n          if count[k] > j_count then smaller = k end\n   \
    \       if count[k] < j_count then larger = k end\n        end\n        for k\
    \ = smaller, smaller + 1 do\n          count[k] = count[k] - 1\n        end\n\
    \        count[larger] = count[larger] + 1\n        table.sort(count, function(a,\
    \ b) return count[a] < count[b] end)\n      end\n    end\n    i = i + 1\n  end\n\
    \  return table.concat(numbers, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9colrsj.lua:46:\
    \ expected: \"\"\nactual: nil\nstack traceback:\n\t/tmp/tmpd9colrsj.lua:46: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local i, num\n  local n = tonumber(numbers)\n\
    \  if n then\n    num = \"\"\n    i = 1\n    while i <= n do\n      num = num..(i%10..\"\
    \ \")\n      i = i / 10\n    end\n  end\n  return num\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb6b65pzh.lua:13: malformed number near '10..'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local keys = {}\n  for key in string.gmatch(numbers,\
    \ \"%w+\") do\n    table.insert(keys, tonumber(key))\n  end\n  table.sort(keys)\n\
    \  return table.concat(keys, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppy6i3kiy.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmppy6i3kiy.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    if numbers == '' then\n        return numbers\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptdydatwb.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal output = ''\n\tlocal number = ''\n\t\
    local number = numbers[1]\n\tfor i = 2, #numbers, 1 do\n\t\tnumber = numbers[i]\n\
    \t\tlocal count = tonumber(number)\n\t\tif count ~= nil and count > 0 then\n\t\
    \t\tif count == 1 then\n\t\t\t\toutput = output .. number\n\t\t\telse\n\t\t\t\t\
    count = count - 2\n\t\t\t\tlocal tmp = number\n\t\t\t\twhile count > 0 do\n\t\t\
    \t\t\toutput = output .. tmp\n\t\t\t\t\tcount = count - 1\n\t\t\t\tend\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprsj2aary.lua:33:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmprsj2aary.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = {}\n  for _, number_str\
    \ in ipairs(numbers) do\n    sorted_numbers[number_str:gsub('%w+'):gsub('%d+',\
    \ 0)] = number_str\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5ycllcfj.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = {}\n    local i = 1\n  \
    \  for s in string.gmatch(numbers, '([^%s]+)') do\n        table.insert(numbers,\
    \ tonumber(s))\n    end\n    for i = #numbers, 1, -1 do\n        local m = i -\
    \ 1\n        local n = 1\n        while n <= m do\n            if numbers[n] >=\
    \ numbers[m] then\n                table.insert(numbers, numbers[m])\n       \
    \         table.insert(numbers, numbers[n])\n            else\n              \
    \  n = n + 1\n            end\n        end\n    end\n    return table.concat(numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe2d4k6ud.lua:9:\
    \ bad argument #1 to 'gmatch' (string expected, got table)\nstack traceback:\n\
    \t/tmp/tmpe2d4k6ud.lua:9: in local 'candidate'\n\t/tmp/tmpe2d4k6ud.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  -- The largest number in our string is 0\n\
    \  local max_number = 0\n  -- The largest string in our result string will be\
    \ this length\n  local max_length = #numbers\n  -- The next number in the string\
    \ will be larger than the largest number in our string\n  local next_number =\
    \ nil\n  -- The current number in the string will be larger than the next number\
    \ in our string\n  local current_number = nil\n  -- Iterate through our string\
    \ until we run out of numbers in it\n  for i = 1, #numbers do\n    -- Parse the\
    \ current number\n    local number_as_string = tonumber(numbers[i])\n    -- If\
    \ we haven't encountered this number yet, or it's greater than the largest number\
    \ we have encountered\n    -- then we need to update the largest number and set\
    \ it as the next number in the string\n    if current_number == nil or (current_number\
    \ > number_as_string) then\n      current_number = number_as_string\n      next_number\
    \ = number_as_string\n      -- Keep a reference to the old number\n      max_number\
    \ = number_as_string\n      -- If the string has been fully consumed, then stop\n\
    \      if i == #numbers then\n        return numbers\n      end\n    end\n   \
    \ -- If we haven't encountered this number yet, or it's less than the next number\
    \ we have encountered\n    -- then we need to update the current number and set\
    \ it as the next number in the string\n    if next_number == nil or (next_number\
    \ < number_as_string) then\n      next_number = number_as_string\n    end\n  \
    \  -- If we encountered a number equal to the largest number we have encountered,\
    \ then we need to append the\n    -- number to the current string and update our\
    \ next number for the next iteration of the loop\n    if max_number == number_as_string\
    \ then\n      current_number = number_as_string\n      next_number = number_as_string\n\
    \    end\n  end\n  -- Return the current string if we haven't hit the end of the\
    \ string\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zowsk1k.lua:53:\
    \ expected: \"zero four five seven eight nine\"\nactual: \"five zero four seven\
    \ nine eight\"\nstack traceback:\n\t/tmp/tmp7zowsk1k.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = tostring(numbers)\n    local\
    \ numbers = numbers:gsub('([^0-9]+)', ' -- ')\n    local numbers = numbers:gsub('\
    \ -- ([^0-9]+)', '\\1 -- ')\n    local numbers = numbers:gsub(' -- ', '-')\n \
    \   local numbers = numbers:gsub(' +-- ', '-')\n    local numbers = numbers:gsub('\
    \ -- ', '')\n    numbers = numbers:gsub(' --', '-')\n    numbers = numbers:gsub('-([^0-9]+)',\
    \ '-\\1')\n    numbers = numbers:gsub('-([^0-9]+)', '\\1 --')\n    numbers = numbers:gsub('--([^0-9]+)',\
    \ '\\1 -')\n    numbers = numbers:gsub('--([^0-9]+)', '-\\1')\n    numbers = numbers:gsub('-',\
    \ ' ')\n    numbers = numbers:gsub(' +', ' ')\n    numbers = numbers:gsub(' +',\
    \ ' ')\n    numbers = numbers:gsub(' ', ' ')\n    numbers = numbers:gsub('-',\
    \ ' ')\n    numbers = numbers:gsub('+', ' ')\n    numbers = numbers:gsub('-',\
    \ ' ')\n    numbers = numbers:gsub(' +', ' ')\n    numbers = numbers:gsub(' +',\
    \ ' ')\n    numbers = numbers:gsub(' +', ' ')\n    numbers = numbers:gsub(' +',\
    \ ' ')\n    numbers = numbers:gsub(' +', ' ')\n    numbers = numbers:gsub(' +',\
    \ ' ')\n    numbers = numbers:gsub(' +', ' ')\n    numbers = numbers:gsub(' +',\
    \ ' ')\n    numbers = numbers:gsub(' +', ' ')\n    numbers = numbers:gsub(' +',\
    \ ' ')\n    numbers = numbers:gsub(' +', ' ')\n    numbers = numbers:gsub(' +',\
    \ ' ')\n    numbers = numbers:gsub(' +', ' ')\n    numbers = numbers:gsub(' +',\
    \ ' ')\n    numbers = numbers:gsub(' +', ' ')\n    numbers = numbers:gsub(' +',\
    \ ' ')\n    numbers = numbers:gsub(' +', ' ')\n    numbers = numbers:gsub(' +',\
    \ ' ')\n    numbers = numbers:gsub(' +', ' ')\n    numbers = numbers:gsub(' +',\
    \ ' ')\n    numbers = numbers:gsub(' +', ' ')\n    numbers = numbers:gsub(' +',\
    \ ' ')\n    numbers = numbers:gsub(' +', '\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp43__1ewe.lua:47: unfinished string near '''\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local i, j, temp\n  local number_list = numbers.split('\
    \ ')\n  number_list[1] = number_list[1] .. number_list[2]\n  number_list[2] =\
    \ number_list[3] .. number_list[4]\n  number_list[3] = number_list[4] .. number_list[5]\n\
    \  number_list[4] = number_list[5] .. number_list[6]\n  number_list[5] = number_list[6]\
    \ .. number_list[7]\n  number_list[6] = number_list[7] .. number_list[8]\n  number_list[7]\
    \ = number_list[8] .. number_list[9]\n  number_list[8] = number_list[9] .. number_list[10]\n\
    \  number_list[9] = number_list[10]\n  return table.concat(number_list)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp87tjgpzd.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp87tjgpzd.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp87tjgpzd.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local list = {}\n    local i = 1\n    while\
    \ i <= 9 do\n        list[#list+1] = i\n        i = i+1\n    end\n    local j\
    \ = 1\n    while j <= #numbers-1 do\n        local number = tonumber(string.sub(numbers,\
    \ j, j+1))\n        local minimum = #list -- we start at one\n        for k =\
    \ minimum to -1 do\n            local current = list[k]\n            if number\
    \ < list[minimum] then\n                minimum = k\n            end\n       \
    \ end\n        list[minimum] = number\n        j = j+1\n    end\n    return table.concat(list)\n\
    end\n</code>\n<|/ a tags=sorting,lua |>\n<| c |>\nThanks, that's a nice solution.\
    \ I did notice that my original solution does not work for strings containing\
    \ spaces.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyn_hk18e.lua:17: ',' expected near 'to'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local ret = ''\n  for _,number in ipairs(split(numbers,\
    \ ' ', 2)) do\n    if tonumber(number) < 9 then\n      ret = ret .. number ..\
    \ ' '\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9zaq6hyh.lua:8:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp9zaq6hyh.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp9zaq6hyh.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local n = tonumber(numbers)\n  -- Handle case\
    \ where there are no numbers\n  if n == nil then\n    return numbers\n  end\n\
    \  -- Handle case where only the first number is given\n  if n == 2 then\n   \
    \ return 'zero one'\n  end\n  -- Handle case where only the last number is given\n\
    \  if n == 1 then\n    return 'zero zero'\n  end\n  -- Handle case where only\
    \ a middle number is given\n  if n % 2 == 0 then\n    local middle = n\n    local\
    \ left = 1\n    local right = middle\n    while left <= right do\n      local\
    \ temp = numbers[left]\n      numbers[left] = numbers[right]\n      numbers[right]\
    \ = temp\n      left = left + 1\n      right = right - 1\n    end\n  end\n  --\
    \ Handle case where there is only one number\n  if n % 2 == 1 then\n    local\
    \ middle = n\n    local left = middle - 2\n    local right = middle - 1\n    while\
    \ left <= right do\n      local temp = numbers[left]\n      numbers[left] = numbers[right]\n\
    \      numbers[right] = temp\n      left = left + 1\n      right = right - 1\n\
    \    end\n  end\n  -- Handle case where there are no numbers given\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhh9qaay.lua:56:\
    \ expected: \"zero four five seven eight nine\"\nactual: \"five zero four seven\
    \ nine eight\"\nstack traceback:\n\t/tmp/tmpuhh9qaay.lua:56: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_sorted_by_digit = numbers:gsub('%w+',\
    \ function(word)\n    return table.sort.call({ \n      zero = 'zero', \n     \
    \ one = 'one', \n      two = 'two', \n      three = 'three', \n      four = 'four',\
    \ \n      five = 'five', \n      six = 'six', \n      seven = 'seven', \n    \
    \  eight = 'eight', \n      nine = 'nine', \n    }, word)\n  end)\n  return numbers_sorted_by_digit\
    \ .. ' ' .. numbers:sub(2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdimls8q.lua:27:\
    \ expected: \"\"\nactual: \" \"\nstack traceback:\n\t/tmp/tmphdimls8q.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local values = {}\n  for _,value in ipairs(split(numbers,\
    \ \" \")) do\n    values[value] = true\n  end\n  table.sort(values, function(a,b)\
    \ return a < b end)\n  return table.concat(split(table.concat(values, \" \"),\
    \ \" \"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuw8z7d4w.lua:8:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpuw8z7d4w.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpuw8z7d4w.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  -- remove duplicate spaces\n  -- numbers =\
    \ string.gsub(numbers, ' ', ' ')\n  -- remove leading 0s if present\n  -- numbers\
    \ = string.gsub(numbers, '^0', ' ')\n  -- convert 'zero' to '0'\n  -- numbers\
    \ = string.rep(numbers, '0', '')\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqu3hfrzm.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = {}\n  local current_number\
    \ = nil\n  local current_alphabet = nil\n  for _,value in ipairs(string.gmatch(numbers,\
    \ \"([%d]+)\")) do\n    -- Find out what the current number is\n    if current_number\
    \ == nil then\n      current_number = tonumber(value)\n      current_alphabet\
    \ = 'zero'\n    else\n      -- If the current number has already been encountered,\n\
    \      -- this means it's a new alphabet.\n      if tonumber(value) == current_number\
    \ then\n        current_alphabet = current_alphabet .. '_' .. 'nine'\n      else\n\
    \        current_number = tonumber(value)\n        current_alphabet = 'zero'\n\
    \      end\n    end\n    table.insert(sorted_numbers, current_number)\n  end\n\
    \  return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n   local num_arr = {}\n   for n in string.gmatch(numbers,\
    \ '(%w+)') do\n      num_arr[n] = num_arr[n] or 0\n      num_arr[n] = num_arr[n]\
    \ + 1\n   end\n   local sorted_num_arr = {}\n   local k = 1\n   for k,v in pairs(num_arr)\
    \ do\n      if v == 1 or k <= 9 then\n         sorted_num_arr[k] = k\n      end\n\
    \   end\n   return table.concat(sorted_num_arr, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpax7mpq5j.lua:26:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpax7mpq5j.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal sort_string = ''\n\tfor _, value in\
    \ ipairs(numbers) do\n\t\tif value == 'nine' then\n\t\t\tsort_string = sort_string\
    \ .. 'nine'\n\t\telseif value == 'eight' then\n\t\t\tsort_string = sort_string\
    \ .. 'eight'\n\t\telseif value == 'seven' then\n\t\t\tsort_string = sort_string\
    \ .. 'seven'\n\t\telseif value == 'six' then\n\t\t\tsort_string = sort_string\
    \ .. 'six'\n\t\telseif value == 'five' then\n\t\t\tsort_string = sort_string ..\
    \ 'five'\n\t\telseif value == 'four' then\n\t\t\tsort_string = sort_string ..\
    \ 'four'\n\t\telseif value == 'three' then\n\t\t\tsort_string = sort_string ..\
    \ 'three'\n\t\telseif value == 'two' then\n\t\t\tsort_string = sort_string ..\
    \ 'two'\n\t\telseif value == 'one' then\n\t\t\tsort_string = sort_string .. 'one'\n\
    \t\telseif value == 'zero' then\n\t\t\tsort_string = sort_string .. 'zero'\n\t\
    \telse\n\t\t\ttable.insert(sort_string, value)\n\t\tend\n\tend\n\treturn table.concat(sort_string,\
    \ '-')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj6ax82n2.lua:33:\
    \ bad argument #1 to 'concat' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpj6ax82n2.lua:33: in local 'candidate'\n\t/tmp/tmpj6ax82n2.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local function number_to_string(number)\n\
    \    local numbers = number:gsub('%w+', 1, number)\n    if #numbers < 2 then\n\
    \      table.insert(numbers, 'zero')\n    elseif #numbers == 2 then\n      table.insert(numbers,\
    \ 'one')\n    elseif #numbers == 3 then\n      table.insert(numbers, 'two')\n\
    \    elseif #numbers == 4 then\n      table.insert(numbers, 'three')\n    elseif\
    \ #numbers == 5 then\n      table.insert(numbers, 'four')\n    elseif #numbers\
    \ == 6 then\n      table.insert(numbers, 'five')\n    elseif #numbers == 7 then\n\
    \      table.insert(numbers, 'six')\n    elseif #numbers == 8 then\n      table.insert(numbers,\
    \ 'seven')\n    elseif #numbers == 9 then\n      table.insert(numbers, 'eight')\n\
    \    elseif #numbers == 10 then\n      table.insert(numbers, 'nine')\n    end\n\
    \    return table.concat(numbers, ' ')\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxew0f4ns.lua:43: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local i = 1\n  local n = #numbers\n  local\
    \ s = ''\n  while i <= n do\n    local j = i - 1\n    local k\n    if numbers[k]\
    \ ~= numbers[i] then\n      k = numbers[i]\n    end\n    if numbers[k] ~= 'nine'\
    \ then\n      s = s .. numbers[k]\n    end\n    while j >= i do\n      if numbers[j]\
    \ ~= 'nine' then\n        j = j - 1\n      else\n        break\n      end\n  \
    \  end\n    i = i + 1\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyec4a1gt.lua:17:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpyec4a1gt.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpyec4a1gt.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers.trim():gsub('(%s+)(\
    \ +)(%s+)( +)','%3 %1 %3 %2')\n    local numbers = numbers:gsub('(%s)( +)','%1\
    \ %2')\n    local numbers = numbers:gsub('(%s)','%1 %2')\n    local numbers =\
    \ numbers:gsub('(%s+)( +)(%s+)( +)','%1 %3 %3 %2 %4')\n    local numbers = numbers:gsub('(%s)(\
    \ +)','%1 %2')\n    local numbers = numbers:gsub('(%s)','%1 %2')\n    local numbers\
    \ = numbers:gsub('(%s+)( +)(%s+)( +)','%1 %3 %3 %2 %4')\n    local numbers = numbers:gsub('(%s)(\
    \ +)','%1 %2')\n    local numbers = numbers:gsub('(%s)','%1 %2')\n    local numbers\
    \ = numbers:gsub('(%s+)( +)(%s+)( +)','%1 %3 %3 %2 %4')\n    local numbers = numbers:gsub('(%s)(\
    \ +)','%1 %2')\n    local numbers = numbers:gsub('(%s)','%1 %2')\n    local numbers\
    \ = numbers:gsub('(%s+)( +)(%s+)( +)','%1 %3 %3 %2 %4')\n    local numbers = numbers:gsub('(%s)(\
    \ +)','%1 %2')\n    local numbers = numbers:gsub('(%s)','%1 %2')\n    local numbers\
    \ = numbers:gsub('(%s+)( +)(%s+)( +)','%1 %3 %3 %2 %4')\n    local numbers = numbers:gsub('(%s)(\
    \ +)','%1 %2')\n    local numbers = numbers:gsub('(%s)','%1 %2')\n    local numbers\
    \ = numbers:gsub('(%s+)( +)(%s+)( +)','%1 %3 %3 %2 %4')\n    local numbers = numbers:gsub('(%s)(\
    \ +)','%1 %2')\n    local numbers = numbers:gsub('(%s)','%1 %2')\n    local numbers\
    \ = numbers:gsub('(%s+)( +)(%s+)( +)','%1 %3 %3 %2 %4')\n    local numbers = numbers:gsub('(%s)(\
    \ +)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi58dqrzo.lua:29: unfinished string near ''(%s)( +)'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers) do\n        if sorted_numbers[number] == nil then\n     \
    \       table.insert(sorted_numbers, number)\n        end\n    end\n    return\
    \ table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmxrsq2f.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgmxrsq2f.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_split = {}\n  for i = 0, #numbers\
    \ - 1 do\n    table.insert(numbers_split, tonumber(numbers[i]))\n  end\n  table.sort(numbers_split)\n\
    \  return table.concat(numbers_split, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz576drqm.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpz576drqm.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local function numbers_to_string(numbers)\n\
    \        local str = ''\n        for i = 1, #numbers do\n            str = str\
    \ .. numbers[i] .. ' '\n        end\n        return str:sub(1, #str - 1)\n   \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1x9j6i5h.lua:25: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n   local sorted_numbers = ''\n   for _, v in\
    \ string.gmatch(numbers, '%w+') do\n      sorted_numbers = v .. sorted_numbers\n\
    \   end\n   return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqw3c5cbg.lua:9:\
    \ attempt to concatenate a nil value (local 'v')\nstack traceback:\n\t/tmp/tmpqw3c5cbg.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpqw3c5cbg.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local result = {}\n  local numbers = numbers.split('\
    \ ')\n  for i = 0, #numbers do\n    local number = tonumber(numbers[i])\n    if\
    \ not number then\n      print('ERROR: Invalid input for sort_numbers: ' .. numbers[i])\n\
    \      return nil\n    end\n    result[#result + 1] = number\n  end\n  return\
    \ table.concat(result, '\\n')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6otlr1c.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpx6otlr1c.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpx6otlr1c.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local list = { }\n  for word in string.gmatch(numbers,\
    \ \"%w+\") do\n    list[#list + 1] = word\n  end\n  table.sort(list, function(a,\
    \ b)\n    return tonumber(a) > tonumber(b)\n  end)\n  return table.concat(list)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq15xxh86.lua:12:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpq15xxh86.lua:12:\
    \ in function </tmp/tmpq15xxh86.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpq15xxh86.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpq15xxh86.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local num_list = numbers:gsub('[^' .. string.char(97,99)\
    \ .. ' ]', '')\n  local result = {}\n  for i = 1, #num_list do\n    table.insert(result,\
    \ num_list[i])\n  end\n  table.sort(result)\n  return table.concat(result, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38c9a5kf.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp38c9a5kf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal numbers_by_letter = {}\n\t\n\t-- Initialize\
    \ an empty list for return\n\t-- Each element will be a number and will be appended\
    \ later\n\tlocal sorted_numbers = terralib.newlist()\n\t\n\t-- Split string into\
    \ a list of words delimited by space characters\n\t-- and convert each word into\
    \ a number and add it into the list\n\tfor i = 1, #numbers do\n\t\t-- Convert\
    \ string to list of numbers\n\t\tlocal elements = tonumber(numbers:sub(i,i))\n\
    \t\tfor j = 1, #elements do\n\t\t\t-- Add the number to the list\n\t\t\tsorted_numbers:insert(elements[j])\n\
    \t\tend\n\t\t-- Add the letter associated with each number\n\t\tfor j = 1, #elements\
    \ do\n\t\t\t-- Get the letter for this number and add it to the dictionary\n\t\
    \t\ttable.insert(numbers_by_letter, numbers:sub(i,i+j-1))\n\t\tend\n\tend\n\t\n\
    \t-- Sort the list using the default numeric sort function\n\ttable.sort(sorted_numbers)\n\
    \t\n\t-- Rebuild the list of words based on the dictionary by adding the\n\t--\
    \ letters associated with each number\n\tfor i, element do\n\t\t-- Convert each\
    \ element into a string and add it to the list\n\t\tsorted_numbers:insert(numbers_by_letter[i])\n\
    \tend\n\t\n\treturn table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpji3vip15.lua:34: 'in' expected near 'do'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_sorted = {}\n  local num = \"\
    \"\n  for num in string.gmatch(numbers, '%w*') do\n    numbers_sorted[#numbers_sorted\
    \ + 1] = num\n  end\n  return table.concat(numbers_sorted)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35amjloe.lua:20:\
    \ expected: \"three five nine\"\nactual: \"threefivenine\"\nstack traceback:\n\
    \t/tmp/tmp35amjloe.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  return function(n, s)\n    local numbers =\
    \ string.gsub(numbers, \" \", \"\")\n    local result = {}\n    for i = 1,#numbers\
    \ do\n      local nn = tonumber(numbers[i])\n      if nn ~= nil then\n       \
    \ table.insert(result, nn)\n      end\n    end\n    return table.concat(result,\"\
    \ \")\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjkuibng.lua:23:\
    \ expected: \"\"\nactual: function: 0xe1a140\nstack traceback:\n\t/tmp/tmpyjkuibng.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local function get_digit(string, index, limit)\n\
    \    return tonumber(string.sub(string, index, limit))\n  end\n  local digits\
    \ = numbers:gsub('(%a+)'..numbers:rep(4)..'%a+' .. numbers, '%1 %2 %3 %4 %5 %6\
    \ %7 %8 %9 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %0 %1 %2\
    \ %3 %4 %5 %6 %7 %8 %9 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9')\n  local sorted\n  for\
    \ i = 1, 9 do\n    sorted = sorted..(i > get_digit(digits, 1, 9) and '' or i)\n\
    \  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc0unyk60.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpc0unyk60.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpc0unyk60.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = numbers:gsub(\"(%d+)\", function(a)\n\
    \    return tonumber(a) or tonumber(a)\n  end)\n  if #nums > 0 then\n    nums:sort(function(a,\
    \ b) return a < b end)\n    local result = \"\"\n    for _, num in ipairs(nums)\
    \ do\n      result = result .. num\n    end\n    return result\n  else\n    return\
    \ numbers\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0f3ejg3w.lua:11:\
    \ attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmp0f3ejg3w.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp0f3ejg3w.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sortedNumbers = ''\n  local spaceIndex\
    \ = numbers.find(' ')\n  if spaceIndex == nil then\n    -- The numbers were all\
    \ digits.\n    for _,i in ipairs(split(numbers, '\\s+')) do\n      sortedNumbers\
    \ = sortedNumbers .. i .. ' '\n    end\n  else\n    local spaceIndexLastChar =\
    \ spaceIndex - 1\n    for _,i in ipairs(split(numbers, '\\s+')) do\n      sortedNumbers\
    \ = sortedNumbers .. i .. ' '\n    end\n    if spaceIndexLastChar ~= nil then\n\
    \      sortedNumbers = sortedNumbers .. numbers[spaceIndexLastChar + 1]\n    end\n\
    \  end\n  return sortedNumbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmcp_l82k.lua:11: invalid escape sequence near ''\\s'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_nums = table.new()\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeqvyacvm.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = {}\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '.+%w+')) do\n    table.insert(sorted_numbers,\
    \ tonumber(number))\n  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n   local sorted_numbers = numbers.gsub('(^|.)%w(%d%d%d%d)',\
    \ '\\\\2\\\\1')\n   return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbzmdghcu.lua:7:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpbzmdghcu.lua:7: in local 'candidate'\n\t/tmp/tmpbzmdghcu.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal result = numbers:sub(1,-1)\n\tlocal\
    \ numbers = numbers:gsub('%d+', '%%d+')\n\tlocal numbers = numbers:gsub('(%D+)',\
    \ '\\1')\n\tlocal numbers = numbers:gsub('(%D+%D+)', '\\1')\n\tlocal numbers =\
    \ numbers:gsub('(%D+%D+%D+)', '\\1')\n\tlocal numbers = numbers:gsub('(%D+%D+%D+%D+)',\
    \ '\\1')\n\tlocal numbers = numbers:gsub('(%D+%D+%D+%D+%D+)', '\\1')\n\tlocal\
    \ numbers = numbers:gsub('(%D+%D+%D+%D+%D+%D+%D+)', '\\1')\n\tlocal numbers =\
    \ numbers:gsub('(%D+%D+%D+%D+%D+%D+%D+%D+%D+)', '\\1')\n\tlocal numbers = numbers:gsub('(%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+)',\
    \ '\\1')\n\tlocal numbers = numbers:gsub('(%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+)',\
    \ '\\1')\n\tlocal numbers = numbers:gsub('(%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+)',\
    \ '\\1')\n\tlocal numbers = numbers:gsub('(%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+)',\
    \ '\\1')\n\tlocal numbers = numbers:gsub('(%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgdd2vhk3.lua:20: unfinished string near ''(%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D+%D'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- replace spaces with an empty string\n  local numbers = string.gsub(numbers,\
    \ '-', '') -- replace hyphens with an empty string\n  local numbers = table.concat(numbers,\
    \ '') -- concatenate all the numbers from zero\n  table.sort(numbers) -- sort\
    \ numbers from smallest to largest\n  return numbers\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=sorting,lua |>\nHere's another solution which can work for all\
    \ kinds of different inputs (numbers, words, sentences, etc):\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5k0znn36.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  return table.sort(\n    stringx.split(numbers,\
    \ \" \")\n  ) .. \" \"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1owj00__.lua:8:\
    \ attempt to index a nil value (global 'stringx')\nstack traceback:\n\t/tmp/tmp1owj00__.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp1owj00__.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = numbers:match(\"(%S+)\")\n  local\
    \ sorted\n  local min = tonumber(nums[1])\n  local max = tonumber(nums[#nums])\n\
    \  local ndigits = 0\n  local maxdigits = 1\n  for i = 1, #nums do\n    local\
    \ n = tonumber(nums[i])\n    if n >= min and n <= max then\n      table.insert(sorted,\
    \ n)\n    elseif n > max then\n      table.insert(sorted, max)\n      maxdigits\
    \ = math.max(maxdigits, #nums)\n      maxdigits = maxdigits - 1\n      max = (math.abs(math.mod(max,\
    \ 10)))\n      table.insert(sorted, 0)\n    elseif n < min then\n      table.insert(sorted,\
    \ min)\n      ndigits = math.max(ndigits, #nums)\n      ndigits = ndigits - 1\n\
    \      min = (math.abs(math.mod(min, 10)))\n      table.insert(sorted, 0)\n  \
    \  end\n  end\n  if #nums > 1 then\n    if max > 10 * #nums then\n      maxdigits\
    \ = maxdigits - 1\n    end\n    table.insert(sorted, max)\n    table.insert(sorted,\
    \ min)\n  end\n  sorted = table.concat(sorted, '' .. math.abs(math.mod(10, math.abs(math.log10(max)))))\n\
    \  if #sorted > #nums then\n    sorted = sorted:sub(1, #nums)\n  end\n  return\
    \ sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4xzl5uv0.lua:9:\
    \ attempt to index a nil value (local 'nums')\nstack traceback:\n\t/tmp/tmp4xzl5uv0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4xzl5uv0.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = {}\n  for _, number\
    \ in ipairs(numbers.split(\" \"))\n    do\n      number = tonumber(number)\n \
    \     if number > 9 then\n        sorted_numbers = sorted_numbers:sorted():insert(number)\n\
    \      else\n        sorted_numbers = sorted_numbers:sorted():insert(number -\
    \ 10)\n      end\n    end\n  return table.concat(sorted_numbers, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpikyo4k65.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpikyo4k65.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpikyo4k65.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local i = 0\n  local new_numbers = {}\n  while\
    \ true do\n    local matching = false\n    for _, word in ipairs(word_list) do\n\
    \      if string.match(numbers, word) then\n        matching = true\n        table.insert(new_numbers,\
    \ word)\n        break\n      end\n    end\n    if not matching then break end\n\
    \    i = i + 1\n  end\n  for j = 1, #numbers do\n    table.insert(new_numbers,\
    \ numbers[j])\n  end\n  return table.concat(new_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a nil value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal numbers = string.gsub(numbers, \" \"\
    , \"\") -- remove spaces\n\tlocal numbers = string.gsub(numbers, \"-\", \"\")\
    \ -- remove dashes\n\tlocal numbers = string.gsub(numbers, \"e\", \"\") -- remove\
    \ exponents\n\tlocal numbers = string.gsub(numbers, \"zero\", \"\") -- remove\
    \ zeros\n\tlocal numbers = string.gsub(numbers, \"one\", \"1\") -- replace ones\
    \ with 1's\n\tlocal numbers = string.gsub(numbers, \"two\", \"2\") -- replace\
    \ twos with 2's\n\tlocal numbers = string.gsub(numbers, \"three\", \"3\") -- replace\
    \ threes with 3's\n\tlocal numbers = string.gsub(numbers, \"four\", \"4\") --\
    \ replace fours with 4's\n\tlocal numbers = string.gsub(numbers, \"five\", \"\
    5\") -- replace fives with 5's\n\tlocal numbers = string.gsub(numbers, \"six\"\
    , \"6\") -- replace sixs with 6's\n\tlocal numbers = string.gsub(numbers, \"seven\"\
    , \"7\") -- replace sevens with 7's\n\tlocal numbers = string.gsub(numbers, \"\
    eight\", \"8\") -- replace eights with 8's\n\tlocal numbers = string.gsub(numbers,\
    \ \"nine\", \"9\") -- replace nines with 9's\n\treturn numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_olt6gc6.lua:27:\
    \ expected: \"three\"\nactual: \"thr\"\nstack traceback:\n\t/tmp/tmp_olt6gc6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n   if numbers then\n      local numbers = numbers.split('\
    \ ')\n      table.sort(numbers)\n      return table.concat(numbers, ' ')\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu0233em9.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpu0233em9.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpu0233em9.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n   -- First, sort each number\n   local sorted_numbers\
    \ = {}\n   for _,number in ipairs(numbers) do\n      table.insert(sorted_numbers,\
    \ tonumber(number))\n   end\n   table.sort(sorted_numbers)\n   -- Then, concatenate\
    \ them back together\n   return table.concat(sorted_numbers, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2le5o5ik.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp2le5o5ik.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n   local sorted_numbers = numbers:gsub('%w+([%z]+)',\
    \ '%%%1'):gsub('%%%1+', ' '):gsub('%d+ ', '%d'):gsub('%d%d%d+%d', '%d')\n   for\
    \ _, digit in ipairs(sorted_numbers) do\n      sorted_numbers[sorted_numbers:find(digit)]\
    \ = digit\n   end\n   table.sort(sorted_numbers)\n   return table.concat(sorted_numbers,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqr2djjer.lua:11:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpqr2djjer.lua:11: in local 'candidate'\n\t/tmp/tmpqr2djjer.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for i = 1, #numbers, 1\
    \ do\n    table.insert(nums, tonumber(numbers[i]:sub(1, numbers[i]:len() - 2)))\n\
    \  end\n  return table.concat(nums, \" \")\nend\n</cell>\n<text>\nNext is counting\
    \ characters\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbtubbeq6.lua:13: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local function swap(index1, index2)\n    numbers[#numbers]\
    \ = numbers[index2]\n    numbers[index2] = numbers[index1]\n    numbers[index1]\
    \ = numbers[#numbers]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu8c4ybt2.lua:23: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local s = \"\"\n  for n in string.gmatch(numbers,\
    \ \"[^ ]\") do\n    if tonumber(n) ~= n then\n      error(\"Could not convert\
    \ string %s to a number\", n)\n    end\n    s = s.. n\n  end\n  table.sort(s)\n\
    \  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkvxoa4tk.lua:14:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpkvxoa4tk.lua:14: in local 'candidate'\n\t/tmp/tmpkvxoa4tk.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_temp = numbers:gsub('[^0-9]',\
    \ '')\n  local numbers = numbers_temp:gsub(' ', '') -- Remove spaces\n  local\
    \ numbers_sorted = {}\n  local numbers_length = #numbers_temp\n  for i = 0, numbers_length\
    \ - 1 do\n    local number = tonumber(numbers_temp[i])\n    if not number then\n\
    \      return numbers_sorted\n    end\n    table.insert(numbers_sorted, number)\n\
    \  end\n  table.sort(numbers_sorted)\n  return table.concat(numbers_sorted)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbzr9o761.lua:26:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpbzr9o761.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal function compare_numbers(n1, n2)\n\t\
    \tif tonumber(n1) == tonumber(n2) then\n\t\t\treturn 0\n\t\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5o1y172o.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local t = {}\n  local i = 0\n  for w in string.gmatch(numbers,\
    \ '([^ ]+)')  do\n    t[i] = w\n    i = i + 1\n  end\n  table.sort(t)\n  return\
    \ table.concat(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjru6c_1.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpnjru6c_1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers.split(' ')\n   \
    \ for _, v in ipairs(numbers) do\n        if v ~= 'zero' and v ~= 'one' and v\
    \ ~= 'two' and v ~= 'three' and\n            v ~= 'four' and v ~= 'five' and v\
    \ ~= 'six' and v ~= 'seven' and\n            v ~= 'eight' and v ~= 'nine' then\n\
    \            table.insert(numbers, v)\n        end\n    end\n    table.sort(numbers)\n\
    \    local output = \"\"\n    for _, v in ipairs(numbers) do\n        output =\
    \ output .. v .. ' '\n    end\n    return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp690yy51c.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp690yy51c.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp690yy51c.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local ns = string.split(numbers, \" \")\n\
    \  local n = tonumber(ns[1])\n  if n == '' then\n    return \"\"\n  end\n  local\
    \ s = \"\"\n  if n >= 0 and n <= 9 then\n    s = numbers[n+1]\n    for i = 2,\
    \ #ns do\n      s = s .. numbers[ns[i]]\n    end\n  else\n    for i = 1, #ns do\n\
    \      local m = tonumber(ns[i])\n      if m ~= nil then\n        s = s .. numbers[m]\n\
    \      else\n        s = s .. ns[i]\n      end\n    end\n  end\n  return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkdn4x_d.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpdkdn4x_d.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpdkdn4x_d.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal n\n\tlocal string\n\tlocal done\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuocul7eb.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local num_list = {}\n  for n in string.gmatch(numbers,\
    \ '%w+') do\n    table.insert(num_list, tonumber(n))\n  end\n  table.sort(num_list,\
    \ compare)\n  return table.concat(num_list, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrk4ejj7.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpzrk4ejj7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  for i=1,#numbers do\n    if tonumber(numbers[i])\
    \ < tonumber(numbers[i+1]) then\n      local temp = numbers[i]\n      numbers[i]\
    \ = numbers[i+1]\n      numbers[i+1] = temp\n    end\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvk4r0e96.lua:8:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpvk4r0e96.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpvk4r0e96.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local new_numbers = ''\n    for _ in pairs(numbers)\
    \ do\n        if _ == 'zero' then\n            new_numbers = new_numbers:gsub('(.*)%[one]%s*$',\
    \ '%1'):gsub('(.*)%[two]%s*$', '%2'):gsub('(.*)%[three]%s*$', '%3'):gsub('(.*)%[four]%s*$',\
    \ '%4'):gsub('(.*)%[five]%s*$', '%5'):gsub('(.*)%[six]%s*$', '%6'):gsub('(.*)%[seven]%s*$',\
    \ '%7'):gsub('(.*)%[eight]%s*$', '%8'):gsub('(.*)%[nine]%s*$', '%9'):gsub('(.*)%[0-9]%s*$',\
    \ '%0')\n        elseif _ == 'one' then\n            new_numbers = new_numbers:gsub('(.*)%[0-9]%s*$',\
    \ '%0'):gsub('(.*)%[two]%s*$', '%1'):gsub('(.*)%[three]%s*$', 'two'):gsub('(.*)%[four]%s*$',\
    \ 'three'):gsub('(.*)%[five]%s*$', 'four'):gsub('(.*)%[six]%s*$', 'five'):gsub('(.*)%[seven]%s*$',\
    \ 'six'):gsub('(.*)%[eight]%s*$', 'seven'):gsub('(.*)%[nine]%s*$', 'eight'):gsub('(.*)%[ten]%s*$',\
    \ 'nine'):gsub('(.*)%[eleven]%s*$', 'ten'):gsub('(.*)%[twelve]%s*$', 'eleven'):gsub('(.*)%[thirteen]%s*$',\
    \ 'twelve'):gsub('(.*)%[fourteen]%s*$', 'thirteen'):gsub('(.*)%[fifteen]%s*$',\
    \ 'fourteen'):gsub('(.*)%[sixteen]%s*$', 'fifteen'):gsub('(.*)%[seventeen]%s*$',\
    \ 'sixteen'):gsub('(.*)%[eighteen]%s*$', 'seventeen'):gsub('(.*)%[nineteen]%s*$',\
    \ 'eighteen'):gsub('(.*)%[ten to twenty]%s*$', 'ten'):gsub('(.*)%[twenty to thirty]%s*$',\
    \ 'twenty\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_8h796i7.lua:12: unfinished string near ''twenty'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local n = 0\n    local s\n    local list\
    \ = numbers.split(' ')\n    for _,v in ipairs(list) do\n        n = n + 1\n  \
    \      s = s .. v\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp45a1nw6r.lua:9:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp45a1nw6r.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp45a1nw6r.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sortedNumbers = numbers\n  sortedNumbers:gsub('.-',\
    \ function(num) \n    if num ~= '' then\n      num = tonumber(num)\n      if num\
    \ > 9 then\n        local tempNum = num\n        num = 9\n        while num >\
    \ 0 do\n          num = num - 1\n        end\n        sortedNumbers = sortedNumbers\
    \ .. 'one ' .. tostring(tempNum)\n      end\n    end\n  end)\n  return sortedNumbers\n\
    end\n</code>\n<|/ a tags=lua-table,lua dscore=3 |>\n<| a |>\nI came up with this:\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3swjirgr.lua:23: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local n = {}\n    for _, x in ipairs(numbers)\
    \ do\n        n[x] = n[x] or {}\n        n[x][#n[x]+1] = x\n    end\n    local\
    \ result = {}\n    for _, k in pairs(n) do\n        result[#result+1] = k\n  \
    \  end\n    return table.concat(result, \".\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpig39zbic.lua:23:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpig39zbic.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  assert(type(numbers) ~= 'string')\n  -- Split\
    \ up the string into an array where each number is a separate string\n  local\
    \ split = numbers:gmatch(\"([^ ]*)\")\n  -- Convert the numbers to integers so\
    \ we can compare them\n  local converted = { }\n  for i = 1, #split do\n    converted[i]\
    \ = tonumber(split[i])\n  end\n  -- Sort the converted array\n  table.sort(converted)\n\
    \  -- Recombine them into a single string\n  local sorted = table.concat({ ''\
    \ }, unpack(converted))\n  return sorted\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxd_3ohyz.lua:7:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpxd_3ohyz.lua:7: in local 'candidate'\n\
    \t/tmp/tmpxd_3ohyz.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local function helper(list, list)\n    local\
    \ sorted, sort, unsorted = {}, {}, {}\n    local n, i, j, k, l\n    for i = 0,\
    \ #list - 1 do\n      if list[i] > list[i + 1] then\n        table.insert(sorted,\
    \ list[i])\n        table.insert(sorted, list[i + 1])\n      else\n        table.insert(sorted,\
    \ list[i + 1])\n        table.insert(sorted, list[i])\n      end\n    end\n  \
    \  table.sort(sorted)\n    table.insert(unsorted, sorted[1], sorted[#sorted])\n\
    \    table.sort(sorted)\n    for i = 0, #unsorted - 1 do\n      n = sorted[i]\n\
    \      for j = i + 1, #unsorted do\n        if sorted[j] > n then\n          k\
    \ = sorted[j]\n          sorted[j] = n\n          sorted[k] = k\n        end\n\
    \      end\n    end\n    return table.concat(sorted)\n  end\n  return helper(numbers,\
    \ numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph45qfng2.lua:20:\
    \ bad argument #2 to 'insert' (number expected, got nil)\nstack traceback:\n\t\
    /tmp/tmph45qfng2.lua:20: in function </tmp/tmph45qfng2.lua:7>\n\t(...tail calls...)\n\
    \t/tmp/tmph45qfng2.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal space_index = numbers:find('%w+')\n\t\
    if space_index == nil then\n\t\treturn numbers\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt5m82vfe.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = {}\n  local num_set\
    \ = {}\n  for w in string.gmatch(numbers, \"%d\") do\n    if not num_set[w] then\n\
    \      num_set[w] = true\n      sorted_numbers[#sorted_numbers + 1] = w\n    end\n\
    \  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmcs9i6dv.lua:23:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmcs9i6dv.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  -- Remove all spaces, split on space\n  numbers\
    \ = numbers:gsub(' ', '')\n  -- Split into array\n  local list = numbers:split('\
    \ ')\n  -- Sort the array\n  table.sort(list)\n  -- Join array back into string\n\
    \  return table.concat(list)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2pypt1gb.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp2pypt1gb.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp2pypt1gb.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal digits = {}\n\tfor _, v in string.gmatch(numbers,\
    \ '%d+') do\n\t\tdigits[v] = true\n\tend\n\tlocal numbers = { }\n\tlocal sorted\
    \ = true\n\twhile sorted do\n\t\tsorted = false\n\t\tfor i, v in ipairs(digits)\
    \ do\n\t\t\tif not numbers[v] then\n\t\t\t\ttable.insert(numbers, v)\n\t\t\t\t\
    sorted = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn table.concat(numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnyd2guc.lua:30:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpwnyd2guc.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    -- Split input string into array of numbers,\
    \ convert each to a number and sort it\n    -- Then join array back into a string\n\
    \    local nums = numbers:gsub('[^0-9]', '')\n    local numbers = tonumber(nums)\n\
    \    if not numbers then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5jmg_a9i.lua:25: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.reverse(numbers)\n\
    \  local i, n, first, number\n  for i, n, first in string.gmatch(numbers, \"(%w+)\
    \ %w+ %w+\") do\n    number = tonumber(n)\n    if not number then\n      return\
    \ \"Sorry, I couldn't understand that number.\"\n    end\n    if first ~= '' then\n\
    \      if i ~= 1 then\n        return \"Sorry, you can only have one space between\
    \ each number.\"\n      else\n        number = tonumber(first)\n        if number\
    \ == nil then\n          return \"Sorry, that doesn't seem to be a valid number.\"\
    \n        end\n        numbers[#numbers] = number\n      end\n    end\n  end\n\
    \  return table.concat(numbers, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp19byaj3b.lua:26:\
    \ bad argument #1 to 'concat' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp19byaj3b.lua:26: in local 'candidate'\n\t/tmp/tmp19byaj3b.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = {}\n  for _, value\
    \ in ipairs(string.gmatch(numbers, \"%w+\")) do\n    sorted_numbers[value] = true\n\
    \  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers_by_character = {}\n    for\
    \ number, character in pairs(numbers) do\n        if numbers_by_character[character]\
    \ then\n            table.insert(numbers_by_character[character], number)\n  \
    \      else\n            numbers_by_character[character] = {number}\n        end\n\
    \    end\n    return table.concat(numbers_by_character, '' .. ' ' .. 'nine')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl23nqg0r.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpl23nqg0r.lua:8: in local 'candidate'\n\t/tmp/tmpl23nqg0r.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local n = tonumber(numbers)\n    assert(n\
    \ ~= nil, 'Expected a string.')\n    local sortedString = ''\n    while n ~= nil\
    \ do\n        sortedString = sortedString .. string(n)\n        n = tonumber(numbers)\n\
    \    end\n    return sortedString\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ew_4gqy.lua:8:\
    \ Expected a string.\nstack traceback:\n\t/tmp/tmp1ew_4gqy.lua:8: in local 'candidate'\n\
    \t/tmp/tmp1ew_4gqy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local output = ''\n  for _,v in ipairs(string.gmatch(numbers,\
    \ \"%w+\"))do\n    table.insert(output, v)\n  end\n  table.sort(output)\n  return\
    \ table.concat(output, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local result = ''\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp__dthjxv.lua:19: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local numbers_strings\
    \ = split(numbers, \" \")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo0nbm7g0.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n   local numbers\n   local s\n   for s in string.gmatch(numbers,\
    \ \"%d+\") do\n      -- if s < 10 then s = s .. '0'\n      table.insert(numbers,\
    \ s)\n   end\n   table.sort(numbers, function(a, b) return a < b end)\n   local\
    \ output = \"\"\n   for _, s in ipairs(numbers) do\n      output = output .. s\n\
    \   end\n   return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplaacpp6p.lua:9:\
    \ bad argument #1 to 'gmatch' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmplaacpp6p.lua:9: in local 'candidate'\n\t/tmp/tmplaacpp6p.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  table.sort(sorted_numbers,\
    \ function (left, right)\n    local left = tonumber(left):byte()\n    local right\
    \ = tonumber(right):byte()\n    return left - right\n  end)\n  return table.concat(sorted_numbers)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcg6l8is4.lua:8:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpcg6l8is4.lua:8: in local 'candidate'\n\t/tmp/tmpcg6l8is4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local function to_number(number)\n     \
    \   if number == 'zero' then\n            return 0\n        end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph3p0h_3_.lua:22: 'end' expected (to close 'function' at line\
    \ 7) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = {}\n  for number_string in\
    \ string.gmatch(numbers, '%w+') do\n    table.insert(numbers, tonumber(number_string))\n\
    \  end\n  table.sort(numbers)\n  -- return table.concat(numbers, '')\n  return\
    \ table.concat(numbers, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr9rpe48o.lua:8:\
    \ bad argument #1 to 'gmatch' (string expected, got table)\nstack traceback:\n\
    \t/tmp/tmpr9rpe48o.lua:8: in local 'candidate'\n\t/tmp/tmpr9rpe48o.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local new_numbers = {}\n  for _, value in\
    \ pairs(numbers) do\n    local value = tonumber(value)\n    local last_value =\
    \ tonumber(new_numbers[#new_numbers])\n    if last_value ~= nil then\n      new_numbers[#new_numbers\
    \ + 1] = last_value\n    end\n    new_numbers[#new_numbers + 1] = value\n  end\n\
    \  table.sort(new_numbers)\n  return table.concat(new_numbers, '')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj_xrkg43.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpj_xrkg43.lua:8: in local 'candidate'\n\t/tmp/tmpj_xrkg43.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  return table.sort(numbers, function(a, b)\
    \ return tonumber(a) - tonumber(b) end)\nend\n</code>\nThe sort_numbers function\
    \ uses the built-in function table.sort from the Lua standard library. Here you\
    \ can find the description of the function and how it works.\nNow the function\
    \ that actually does the magic:\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqvbhjt0l.lua:9: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    return table.sort(\n        table.sort(\n\
    \            table.sort(\n                numbers:gmatch('(%a+)'),\n         \
    \       function(a, b) return a:byte() <= b:byte() end\n            end,\n   \
    \         function(a, b) return a:byte() > b:byte() end\n        end)\n    )\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 tags=sorting,lua-table,lua |>\n\
    Here is an improvement to Kevin's answer - it works for strings containing numbers,\
    \ as well as Lua numbers including both negative and positive numbers.\n<code>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt67hdnf4.lua:12: ')' expected (to close '(' at line 9) near\
    \ 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local num_list = {}\n  for word in words:gmatch(\"\
    %w+\") do\n    table.insert(num_list, tonumber(word))\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4g39ixur.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local result = \"\"\n  local number\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi96xmv5p.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local function number_sort(a, b)\n    return\
    \ tonumber(a:sub(1, 9)) > tonumber(b:sub(1, 9))\n  end\n  table.sort(numbers,\
    \ number_sort)\n  return table.concat(numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzqd7tnx9.lua:10:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpzqd7tnx9.lua:10: in local 'candidate'\n\t/tmp/tmpzqd7tnx9.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local words = string.gmatch(numbers, '%w+')\n\
    \  local nums = { }\n  for i = 1, #words do\n    nums[words[i]] = i\n  end\n \
    \ local result = {}\n  local keys = { }\n  table.sort(nums, function(a, b) return\
    \ nums[a] < nums[b] end)\n  for i = 1, #words do\n    result[#result + 1] = words[i]\n\
    \  end\n  table.sort(keys, function(a, b) return keys[a] < keys[b] end)\n  return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpukhj1j0r.lua:9:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpukhj1j0r.lua:9: in local 'candidate'\n\t/tmp/tmpukhj1j0r.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers_table = numbers:gsub('([a-z]+)',\
    \ '').split(' '):collect( function(x)\n        return tonumber(x)\n    end)\n\
    \    table.sort(numbers_table) -- Sort the numbers table from smallest to largest\n\
    \    return table.concat(numbers_table, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1er4a6k9.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp1er4a6k9.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1er4a6k9.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local split = {}\n    for i = 1, #numbers\
    \ do\n        table.insert(split, numbers[i])\n    end\n    table.sort(split)\n\
    \    local str = \"\"\n    for _, num in ipairs(split) do\n        str = str ..\
    \ num\n    end\n    return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpol_j5azg.lua:23:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpol_j5azg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local output = ''\n  for _, value in ipairs(numbers)\
    \ do\n    local _, nine = value:match('(.-)%d(.)$')\n    output = output .. '\
    \ ' .. value:sub(1, nine) .. value:sub(nine + 2)\n  end\n  return output\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79myabih.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp79myabih.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  return table.sort(\n    stringx.explode(numbers):map(\n\
    \      function(num) return tonumber(num) end):reverse())\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv3b7k3fm.lua:8:\
    \ attempt to index a nil value (global 'stringx')\nstack traceback:\n\t/tmp/tmpv3b7k3fm.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpv3b7k3fm.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%s+([%d]+)[%s]+','%1\
    \ %2 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2\
    \ %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2\
    \ %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2\
    \ %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2\
    \ %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2\
    \ %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2\
    \ %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2\
    \ %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2\
    \ %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2\
    \ %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwz0mlsc9.lua:7: unfinished string near ''%1 %2 %2 %1 %2 %1\
    \ %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1\
    \ %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1\
    \ %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1\
    \ %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1\
    \ %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1\
    \ %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1\
    \ %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1\
    \ %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1\
    \ %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1 %2 %1\
    \ %2 %1 %2 %1 %2 %1 %2 %'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local digits = {}\n  local digits_map = {}\n\
    \  local digits_i = 0\n  local last_digit\n  for digit in pairs(numbers) do\n\
    \    if digit ~= nil then\n      digits[digits_i] = digit\n      if digit == 'nine'\
    \ then\n        digits_map[digits_i] = true\n      elseif digit == 'zero' then\n\
    \        digits_map[digits_i] = false\n      elseif digits_i > 0 then\n      \
    \  digits_map[digits_i] = digit == 'two' and digits_map[digits_i-1]\n      end\n\
    \    end\n    last_digit = digit\n    digits_i = digits_i + 1\n  end\n  table.sort(digits,\
    \ function(a, b) return digits_map[a] and digits_map[b] end)\n  local result =\
    \ {}\n  for i = 1, digits_i do\n    result[i] = numbers[digits[i]]\n  end\n  return\
    \ table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgcdlj6ek.lua:11:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpgcdlj6ek.lua:11: in local 'candidate'\n\t/tmp/tmpgcdlj6ek.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local i = 1\n  local sorted\n  while i <=\
    \ #numbers:len() do\n    local strnums = numbers:sub(1, i)\n    local number =\
    \ tonumber(strnums)\n    if number ~= nil then\n      if sorted == nil then\n\
    \        sorted = strnums\n      else\n        sorted = sorted .. ' ' .. strnums\n\
    \      end\n    end\n    i = i + 1\n  end\n  if sorted == nil then\n    return\
    \ 'zero'\n  else\n    return sorted\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0b8q5f9d.lua:9:\
    \ attempt to get length of a number value\nstack traceback:\n\t/tmp/tmp0b8q5f9d.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp0b8q5f9d.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  -- remove\
    \ leading zeros from the list of numbers\n  sorted_numbers = string.gsub(sorted_numbers,\
    \ \"^0*\", \"\")\n  -- split numbers into an array and sort it\n  sorted_numbers\
    \ = string.gsub(sorted_numbers, \" \", \" \")\n  table.sort(sorted_numbers)\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc056o86c.lua:12:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpc056o86c.lua:12: in local 'candidate'\n\t/tmp/tmpc056o86c.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local result = {}\n  for w in string.gmatch(numbers,\
    \ '([^%s]+)') do\n    table.insert(result, w)\n  end\n  table.sort(result)\n \
    \ return table.concat(result, '%s')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpio_v91d8.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five%snine%sthree\"\nstack traceback:\n\
    \t/tmp/tmpio_v91d8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  return table.sort(table.unpack(table.concat(\n\
    \    table.map( numbers, function( number )\n      if number then\n        local\
    \ digits = math.floor( math.log( number, 10 ) )\n        return digits and tonumber(\
    \ '0' .. number .. '0', digits ) or number\n      end\n    end, ' ' )))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjmswhgv8.lua:14: ')' expected (to close '(' at line 7) near\
    \ 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local result = {}\n  for _, word in ipairs(string.gmatch(numbers,\
    \ '%w+')) do\n    local num = tonumber(word)\n    if not num then error(rep(\"\
    invalid word '\" .. word .. \"' in numbers\", 2)) end\n    if num > 10 then error('number\
    \ too big') end\n    if num < 0 then error('number too small') end\n    result[#result\
    \ + 1] = word\n  end\n  table.sort(result)\n  return table.concat(result)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers_as_string = numbers.trim()\n\
    \    local numbers_as_string_split = numbers_as_string:gsub('%s+', ' '):gsub('([^%s]+)','%1\
    \ '):split(' -- ')\n    local output_as_string = ''\n    local output_as_string_split\
    \ = {}\n    local output_as_number = 0\n    for i = 1, #numbers_as_string_split\
    \ do\n        output_as_string = output_as_string .. ' ' .. numbers_as_string_split[i]\n\
    \    end\n    for i = 1, #output_as_string do\n        output_as_number = tonumber(output_as_string[i])\n\
    \        if output_as_number then\n            output_as_string_split[output_as_number]\
    \ = output_as_string[i]\n        end\n    end\n    for i = 1, #numbers_as_string_split\
    \ do\n        output_as_string = output_as_string .. ' ' .. output_as_string_split[i]\n\
    \    end\n    return output_as_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc5a3stg8.lua:7:\
    \ attempt to call a nil value (field 'trim')\nstack traceback:\n\t/tmp/tmpc5a3stg8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpc5a3stg8.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sortedNumbers = {}\n    for _, number\
    \ in ipairs(numbers) do\n        table.insert(sortedNumbers, tonumber(number))\n\
    \    end\n    table.sort(sortedNumbers, function(a, b) return a < b end)\n   \
    \ return table.concat(sortedNumbers)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtzynihx.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmphtzynihx.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  return numbers:gsub(\"%a+\", function(num)\
    \ \n    if num == \"zero\" then \n      \"zero\"\n    elseif num == \"one\" then\
    \ \n      \"one\"\n    elseif num == \"two\" then \n      \"two\"\n    elseif\
    \ num == \"three\" then \n      \"three\"\n    elseif num == \"four\" then \n\
    \      \"four\"\n    elseif num == \"five\" then \n      \"five\"\n    elseif\
    \ num == \"six\" then \n      \"six\"\n    elseif num == \"seven\" then \n   \
    \   \"seven\"\n    elseif num == \"eight\" then \n      \"eight\"\n    elseif\
    \ num == \"nine\" then \n      \"nine\"\n    else\n      error(\"Error: Unrecognized\
    \ number '\" .. num .. \"'\")\n    end \n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeujwz8ox.lua:9: unexpected symbol near '\"zero\"'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers_map = { zero = true, one =\
    \ true, two = true, three = true,\n        four = true, five = true, six = true,\
    \ seven = true, eight = true,\n        nine = true }\n    local function swap(a,\
    \ b)\n        local tmp = a\n        a = b\n        b = tmp\n    end\n    local\
    \ numbers_array = string.split(numbers, \" \")\n    table.sort(numbers_array,\
    \ function (a, b)\n        if numbers_map[a] and numbers_map[b] then\n       \
    \     swap(a, b)\n        end\n    end)\n    return table.concat(numbers_array)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_1k4latg.lua:15:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp_1k4latg.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp_1k4latg.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n   assert(#numbers > 0, 'Must provide at least\
    \ one number')\n   local function cmp(a, b)\n      return a:tonumber() > b:tonumber()\
    \ or a:tonumber() == b:tonumber() and a > b\n   end\n   return table.sort(numbers,\
    \ cmp)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmwy8zc69.lua:7:\
    \ Must provide at least one number\nstack traceback:\n\t/tmp/tmpmwy8zc69.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpmwy8zc69.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  -- We need the numbers as strings for math,\
    \ so we cast them as strings first\n  local sorted_numbers = table.sort(numbers,\
    \ function(a, b) return tonumber(a) > tonumber(b) end)\n  return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj7xtva_d.lua:8:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpj7xtva_d.lua:8: in local 'candidate'\n\t/tmp/tmpj7xtva_d.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_numbers = \"\"\n    local num_to_switch\
    \ = \"\"\n    local num = \"\"\n    local digit\n    local num_to_compare\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkxeyio3w.lua:23: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = string.gsub(numbers, ' ',\
    \ ' '):gsub(' ', ','):gsub(',$', '')\n    local numbers_array = nil\n    local\
    \ smallest_number = nil\n    local largest = nil\n    for i = 1, 9 do\n      \
    \  numbers_array = numbers:match(\"%s[%S]\"):gsub(\"^%s+\", \"\")\n        local\
    \ n = tonumber(numbers_array)\n        if not n then\n            break\n    \
    \    end\n        if smallest_number == nil then\n            smallest_number\
    \ = n\n        elseif smallest_number < n then\n            smallest_number =\
    \ n\n        end\n        if largest == nil or n > largest then\n            largest\
    \ = n\n        end\n    end\n    numbers = numbers_array\n    return numbers,\
    \ smallest_number, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx12cbbkz.lua:12:\
    \ attempt to index a nil value\nstack traceback:\n\t/tmp/tmpx12cbbkz.lua:12: in\
    \ local 'candidate'\n\t/tmp/tmpx12cbbkz.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n   for i = 1, #numbers, 1 do\n      local number_1\
    \ = tonumber(numbers[i])\n      local number_2 = tonumber(numbers[i+1])\n    \
    \  if number_1 > number_2 then\n         table.insert(numbers, number_1, number_2)\n\
    \      end\n      if number_1 < number_2 then\n         table.insert(numbers,\
    \ number_2, number_1)\n      end\n   end\n   for i = 0, #numbers, 1 do\n     \
    \ table.insert(numbers, numbers[i])\n   end\n   return table.concat(numbers)\n\
    end\n</code>\n<|/ a tags=lua-patterns,lua |>\n<| c |>\nThis should be the accepted\
    \ answer as it actually sorts numbers in ascending order rather than converting\
    \ them into strings and then sorting them.\n<|/ c |>\n<| c |>\nThis was a really\
    \ good answer, but is actually not correct. The reason why this doesn't work is\
    \ that strings are sorted alphabetically and as such `'11'` comes before `'1'`\
    \ as `'1'` is \"less than\" `'11'`.\n<|/ c |>\n<| c |>\nI didn't know that Lua\
    \ had different sorts for strings and numbers. Good to know! My answer should\
    \ work with numbers as well and I updated my post accordingly.\n<|/ c |>\n<| a\
    \ |>\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprxwsj1z7.lua:22: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted = {}\n    local function sorter(n)\n\
    \        if n ~= 'nine' then\n            table.insert(sorted, n)\n        end\n\
    \    end\n    for _, v in pairs(string.gmatch(numbers, \"%d+\") ) do\n       \
    \ sorter(v)\n    end\n    for _, v in pairs(string.gmatch(numbers, \"%d+\") )\
    \ do\n        sorter(v)\n    end\n    return table.concat(sorted)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7mz4stzf.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp7mz4stzf.lua:13: in local 'candidate'\n\t/tmp/tmp7mz4stzf.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n   local new_numbers = ''\n   for v in string.gmatch(numbers,\
    \ '%S+') do\n      new_numbers = new_numbers:lower() .. v .. ' '\n   end\n   return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75s4g23q.lua:18:\
    \ expected: \"three\"\nactual: \"three \"\nstack traceback:\n\t/tmp/tmp75s4g23q.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted={}\n    for _, value in string.gmatch(numbers,\
    \ '%d+') do\n        sorted[value]=numbers[#numbers+1]\n    end\n    table.sort(sorted,\
    \ function (a,b) return a <  b end)\n    return table.concat(sorted, '') -- Return\
    \ a string with the numbers sorted from smallest to largest\nend\n</code>\n<|/\
    \ a |>\n<| a dscore=0 |>\nIf you have a string of numbers, you can sort them using\
    \ the sort command:\n<code>\nstring=\"3 1 2 4 5 7 9 0\"\nstring.split(\" \")\n\
    string.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\" \")\nstring.split(\"\
    \ \")\nstring.split(\" \")\nstring.split(\" \")\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmt3r3hrs.lua:14: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sort_string = {}\n  local numbers =\
    \ string.gsub(numbers, '\\s+', '')\n  for i, v in ipairs(numbers) do\n    local\
    \ n\n    -- This only works on single digit strings\n    if tonumber(v) == v then\n\
    \      n = tonumber(v)\n    else\n      n = tonumber(v:sub(1, -1))\n    end\n\
    \    table.insert(sort_string, n)\n  end\n  table.sort(sort_string)\n  return\
    \ table.concat(sort_string)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj69bysgn.lua:8: invalid escape sequence near ''\\s'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal words = string.gsub(numbers, ' ', '')\
    \ -- remove spaces\n\tlocal words = {} -- empty the list\n\tfor word in words\
    \ do\n\t\tif word == 'zero' or word == 'nine' then -- ignore 'zero' and 'nine'\
    \ because they are always smallest\n\t\telse\n\t\t\tif tonumber(word) >= 0 and\
    \ tonumber(word) <= 9 then\n\t\t\t\ttable.insert(words, tonumber(word))\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn table.concat(words, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpviumf2d0.lua:9:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpviumf2d0.lua:9: in\
    \ local 'candidate'\n\t/tmp/tmpviumf2d0.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_nums = numbers\n    for _,\
    \ v in pairs(nums_arr) do\n        sorted_nums = v:gsub('%d', sorted_nums)\n \
    \   end\n    return sorted_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpajb_tl3l.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpajb_tl3l.lua:8: in local 'candidate'\n\t/tmp/tmpajb_tl3l.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local result = \"\"\n  for i = 1, #numbers\
    \ do\n    local number = tonumber(numbers[i])\n    local choice = numbers[i] ..\
    \ 'ten'\n    if number > 0 then\n      if number < 10 then\n        table.insert(result,\
    \ choice)\n      else\n        table.insert(result, numbers[i] .. 'nine')\n  \
    \      table.insert(result, numbers[i] .. 'one')\n      end\n    end\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgjh54wsu.lua:20:\
    \ bad argument #1 to 'concat' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpgjh54wsu.lua:20: in local 'candidate'\n\t/tmp/tmpgjh54wsu.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.rep(numbers, 2)\n \
    \ local strings = {}\n  for i = 2, #numbers do\n    strings[#strings + 1] = numbers[i]\n\
    \  end\n  table.sort(strings)\n  return table.concat(numbers, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp73a4vscq.lua:13:\
    \ bad argument #1 to 'concat' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp73a4vscq.lua:13: in local 'candidate'\n\t/tmp/tmp73a4vscq.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal list = stringx.split(numbers, \" \"\
    )\n\ttable.sort(list, function(a, b) return a < b end)\n\treturn table.concat(list)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaie_ozv_.lua:7:\
    \ attempt to index a nil value (global 'stringx')\nstack traceback:\n\t/tmp/tmpaie_ozv_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpaie_ozv_.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = {}\n  for i = 1, 9\
    \ do\n    sorted_numbers[#sorted_numbers + 1] = i\n  end\n  table.sort(sorted_numbers)\n\
    \  return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbylnugo1.lua:18:\
    \ expected: \"\"\nactual: \"1 2 3 4 5 6 7 8 9\"\nstack traceback:\n\t/tmp/tmpbylnugo1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_array = string.gmatch(numbers,\
    \ '%w+')\n  local sorted_numbers = ''\n  for _, v in pairs(numbers_array) do\n\
    \    sorted_numbers = sorted_numbers + v\n  end\n  return sorted_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdaj2dimq.lua:9:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpdaj2dimq.lua:9: in local 'candidate'\n\t/tmp/tmpdaj2dimq.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal numbers = numbers or ''\n\tlocal numbers_sorted\
    \ = ''\n\tfor _, number in ipairs(numbers:gmatch('([^ ])%d([^ ])%d*')) do\n\t\t\
    table.insert(numbers_sorted, number)\n\tend\n\ttable.sort(numbers_sorted)\n\t\
    return table.concat(numbers_sorted)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local number_table = { zero = 1, one = 2,\
    \ two = 3, three = 4, four = 5, five = 6, six = 7, seven = 8, eight = 9, nine\
    \ = 10 }\n  local sorted_numbers = numbers\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaavn3xmu.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal numbers = string.gsub(numbers, '(^%s+)([^%s]+)(%s+$)',\
    \ \"%1%2%3\", \"%1%2%3\")\n\tlocal numbers = string.gsub(numbers, '(%s+)([^%s]+)(%s+)',\
    \ \"%1%2%3\", \"%1%2%3\")\n\tlocal numbers = string.gsub(numbers, '(%s+)(%s+)',\
    \ \"%1%2\", \"%1\")\n\tlocal numbers = string.gsub(numbers, '.', ' ')\n\treturn\
    \ numbers:gsub(\"%S+\", function (c)\n\t\treturn sort_numbers(c)\n\tend)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpimw3_cri.lua:7:\
    \ bad argument #4 to 'gsub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpimw3_cri.lua:7: in local 'candidate'\n\t/tmp/tmpimw3_cri.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local n = {}\n    for _, s in ipairs(stringx.split(numbers,\
    \ \" \")) do\n        n[s] = n[s] or 0\n        n[s] = (n - 1)%9 + 1\n    end\n\
    \    return stringx.join(table.unpack(n))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwn8rkbxx.lua:8:\
    \ attempt to index a nil value (global 'stringx')\nstack traceback:\n\t/tmp/tmpwn8rkbxx.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpwn8rkbxx.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local list = {}\n  for _, item in ipairs(split(numbers,\
    \ ' ')) do\n    list[#list + 1] = item\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0f_56k5v.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local nums = {}\n  for _, str in ipairs(string.gmatch(numbers,\
    \ \"(%a+)\")) do\n    if tonumber(str) then\n      table.insert(nums, tonumber(str))\n\
    \    end\n  end\n  table.sort(nums)\n  return table.concat(nums, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  assert(type(numbers) == 'string', \"Input\
    \ must be a string.\")\n  local sorted_numbers = numbers.trim():gsub('(%S+)',\
    \ ''):gsub(' ', ''):gsub('-', '')\n  sorted_numbers = string.gsub(sorted_numbers,\
    \ '%S+', '%1')\n  sorted_numbers = string.gsub(sorted_numbers, '%1-%1', '%1')\n\
    \  sorted_numbers = string.gsub(sorted_numbers, '%1-', '0')\n  sorted_numbers\
    \ = string.gsub(sorted_numbers, '%*%1', '%1')\n  sorted_numbers = string.gsub(sorted_numbers,\
    \ '%*%', '0')\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy3v1ucve.lua:8:\
    \ attempt to call a nil value (field 'trim')\nstack traceback:\n\t/tmp/tmpy3v1ucve.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpy3v1ucve.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n   local sorted_numbers = table.copy(numbers)\n\
    \   table.sort(sorted_numbers)\n   return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi6qdsvsw.lua:7:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpi6qdsvsw.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpi6qdsvsw.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = stringx.split(numbers)\n\
    \    table.sort(numbers, function(a, b) return tonumber(a) - tonumber(b) end)\n\
    \    return table.concat(numbers, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4q63e1uy.lua:7:\
    \ attempt to index a nil value (global 'stringx')\nstack traceback:\n\t/tmp/tmp4q63e1uy.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp4q63e1uy.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sortedNumbers\n    -- Remove spaces\
    \ and lowercase all letters\n    local numbers = string.gsub(numbers, ' ', '')\n\
    \    local numbers = string.gsub(numbers, '[%a%A]', '')\n    -- Split on spaces\
    \ and convert to an array of numbers\n    -- The array will be in \"reverse\"\
    \ order because of sorting.\n    sortedNumbers = table.sort(\n        table.unpack(\n\
    \            string.gsub(numbers, ' ', ''):gsub('(%d+)', '%1'):gsub('%d+', '%1')))\n\
    \    -- Reverse the sorted array\n    sortedNumbers = sortedNumbers:reverse()\n\
    \    -- Reverse the array\n    sortedNumbers = sortedNumbers:reverse()\n    --\
    \ Return the new string in reverse\n    return table.concat(sortedNumbers)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv6_h6_g9.lua:13:\
    \ bad argument #1 to 'sort' (table expected, got nil)\nstack traceback:\n\t/tmp/tmpv6_h6_g9.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpv6_h6_g9.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local number_table = {}\n  for _,v in pairs(numbers:gmatch(\"\
    %d+\") ) do\n    number_table[v] = true\n  end\n  local sorted_numbers = {}\n\
    \  local n = table.getn(number_table)\n  for i = 1,n do\n    sorted_numbers[i]\
    \ = i\n  end\n  table.sort(sorted_numbers, function(a,b) return number_table[a]\
    \ < number_table[b] end)\n  return table.concat(sorted_numbers, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4z24zx7r.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp4z24zx7r.lua:8: in local 'candidate'\n\t/tmp/tmp4z24zx7r.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  for _, number in ipairs(sorted_numbers) do\n    sorted_numbers[#sorted_numbers\
    \ + 1] = tonumber(number)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps9ge4fyr.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  -- If no numbers are passed in, return an\
    \ empty string\n  local list = nil\n  if #numbers == 0 then\n    return \"\"\n\
    \  else\n    -- Otherwise, split each number into a string and convert it to an\
    \ integer.\n    list = {}\n    for _, number in ipairs(string.gmatch(numbers,\
    \ '%w+')) do\n      list[#list + 1] = tostring(tonumber(number))\n    end\n  end\n\
    \  -- Return an array of numbers sorted in ascending order\n  table.sort(list)\n\
    \  -- Convert the array of numbers into strings\n  for i = 1, #list do\n    list[i]\
    \ = tostring(list[i])\n  end\n  -- Concatenate all of the sorted numbers together\n\
    \  return table.concat(list)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = string.format(\"%q\", numbers)\n\
    \    local items = numbers:match(number_pattern)\n    table.sort(items, function(a,\
    \ b)\n        if a > b then\n            return 1\n        end\n        if a <\
    \ b then\n            return -1\n        end\n        return 0\n    end)\n   \
    \ return table.concat(items, \"\\n\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz3sh8_y1.lua:8:\
    \ bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpz3sh8_y1.lua:8: in local 'candidate'\n\t/tmp/tmpz3sh8_y1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  -- Get all the words in the numbers. We need\
    \ to remove them later to make the comparisons easier.\n  local words = stringx.split(numbers,\
    \ '\\s+')\n  -- Get the word count and find the largest number.\n  local word_count\
    \ = {}\n  local max_number = 0\n  for _, word in ipairs(words) do\n    word_count[word]\
    \ = word_count[word] + 1 or 1\n    if word_count[word] > max_number then\n   \
    \   max_number = word_count[word]\n    end\n  end\n  -- We can't sort the string\
    \ because we can't count the digits. So just return the original string.\n  if\
    \ max_number == 0 then\n    return numbers\n  end\n  -- Now we can count the digits\
    \ and sort the numbers.\n  local digits = {}\n  for i, word in ipairs(words) do\n\
    \    table.insert(digits, word_count[word] * (max_number - word_count[word] +\
    \ i)) -- Multiply by (max_number - word_count[word] + i) because we can't count\
    \ the digits from 0 to 9.\n  end\n  table.sort(digits, function(a,b) return a\
    \ < b end)\n  -- Finally, join the words back together with the sorted digits.\n\
    \  return table.concat(words, ' ') .. table.concat(digits, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyzydlgl4.lua:8: invalid escape sequence near ''\\s'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal result = \"\"\n\tfor i, number in ipairs(string.gmatch(numbers,\
    \ \"(%a+)\")) do\n\t\tif i < 3 then result = result .. number end\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0\
    \ successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  return table.sort(numbers, function(n)\n \
    \   local i = 0\n    local m = 1\n    repeat\n      i = i + 1\n      m = m + 1\n\
    \    until n % i == 0\n    return n\n  end)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc2gu4x9e.lua:7:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpc2gu4x9e.lua:7: in local 'candidate'\n\t/tmp/tmpc2gu4x9e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, \" \"\
    , \"\")\n  local number_list = \"\"\n  local number_start = 1\n  local number_end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnhhaelny.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal spacedelimited = table.concat(numbers,\
    \ \" \")\n\tlocal numbers = spacedelimited:match(\"(%w+) *(%w+) *(%w+)\")\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8s7xfzmp.lua:20: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = string.gsub(numbers, ' ',\
    \ '')\n    local numbers = string.gsub(numbers, '[abcdefghijklmnopqrstuvwxyz]',\
    \ '')\n    local numbers = string.gsub(numbers, '%d', '')\n    local numbers =\
    \ string.gsub(numbers, '%d%d%d%d%d%d%d', '')\n    local numbers = string.gsub(numbers,\
    \ '%d%d%d%d%d%d%d%d%d%d%d', '')\n    local numbers = string.gsub(numbers, '%d%d%d%d%d%d%d%d%d%d%d%d%d%d',\
    \ '')\n    local numbers = string.gsub(numbers, '%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d',\
    \ '')\n    local numbers = string.gsub(numbers, '%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d',\
    \ '')\n    local numbers = string.gsub(numbers, '%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d',\
    \ '')\n    local numbers = string.gsub(numbers, '%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d',\
    \ '')\n    local numbers = string.gsub(numbers, '%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d',\
    \ '')\n    local numbers = string.gsub(numbers, '%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d',\
    \ '')\n    local numbers = string.gsub(numbers, '%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d',\
    \ '')\n    local numbers = string.gsub(numbers, '%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d',\
    \ '')\n    local numbers = string.gsub(numbers, '%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d',\
    \ '')\n    local numbers = string.gsub(numbers, '%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d',\
    \ '')\n    local numbers = string.gsub(numbers, '%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d',\
    \ '')\n    local numbers = string.gsub(numbers, '%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d',\
    \ '')\n    local numbers = string.gsub(numbers, '%d%d%d%d%d%d%d%d%d%d%d\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq64ibf1p.lua:25: unfinished string near ''%d%d%d%d%d%d%d%d%d%d%d'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_numbers = numbers\n    local\
    \ sorted_numbers_array = {}\n    for _, number in ipairs(sorted_numbers) do\n\
    \        sorted_numbers_array[#sorted_numbers_array + 1] = number\n    end\n \
    \   table.sort(sorted_numbers_array)\n    return table.concat(sorted_numbers_array)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe2yutbvb.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpe2yutbvb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal sorted_numbers = numbers\n\tlocal sorted_numbers\
    \ = {}\n\t\n\t-- Create a set of digits so that we can just test against one set\
    \ of\n\t-- numbers instead of having to loop through each digit.\n\tlocal digit_set\
    \ = setmetatable({}, {__mode = \"v\"})\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5f5vmzsv.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_numbers = nil\n    for _, number\
    \ in ipairs(split(numbers, ' ')) do\n        if number == 'zero' then\n      \
    \      sorted_numbers = number\n        elseif number == 'one' then\n        \
    \    sorted_numbers = sorted_numbers .. ' two'\n        elseif number == 'two'\
    \ then\n            sorted_numbers = sorted_numbers .. ' three'\n        elseif\
    \ number == 'three' then\n            sorted_numbers = sorted_numbers .. ' four'\n\
    \        elseif number == 'four' then\n            sorted_numbers = sorted_numbers\
    \ .. ' five'\n        elseif number == 'five' then\n            sorted_numbers\
    \ = sorted_numbers .. ' six'\n        elseif number == 'six' then\n          \
    \  sorted_numbers = sorted_numbers .. ' seven'\n        elseif number == 'seven'\
    \ then\n            sorted_numbers = sorted_numbers .. ' eight'\n        elseif\
    \ number == 'eight' then\n            sorted_numbers = sorted_numbers .. ' nine'\n\
    \        elseif number == 'nine' then\n            sorted_numbers = sorted_numbers\
    \ .. ' zero'\n        end\n    end\n    return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrz2si36.lua:8:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmplrz2si36.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmplrz2si36.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n   local output = \"\"\n   for word in gmatch\
    \ (numbers, '%a+') do\n      local number = tonumber(word)\n      if number then\n\
    \         output = output .. number\n      else\n         output = output .. word\n\
    \      end\n   end\n   return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxw09hks6.lua:8:\
    \ attempt to call a nil value (global 'gmatch')\nstack traceback:\n\t/tmp/tmpxw09hks6.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpxw09hks6.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_numbers = {}\n    local lowest,\
    \ highest\n    local number_list = numbers.split(\" \")\n    for _, number in\
    \ ipairs(number_list) do\n        lowest = number\n        highest = number\n\
    \        for _, character in pairs(number) do\n            if character > lowest\
    \ then\n                lowest = character\n            elseif character < highest\
    \ then\n                highest = character\n            end\n        end\n  \
    \      table.insert(sorted_numbers, lowest)\n        table.insert(sorted_numbers,\
    \ highest)\n    end\n    table.sort(sorted_numbers)\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbzo0ld1b.lua:9:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpbzo0ld1b.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbzo0ld1b.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, v in ipairs(numbers)\
    \ do\n    if v ~= 'nine' then\n      sorted_numbers = sorted_numbers + v\n   \
    \ end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjg6d6ja.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpwjg6d6ja.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_numbers = ''\n    local splitted_numbers\
    \ = string.split(numbers, \" \")\n    for _, number in ipairs(splitted_numbers)\
    \ do\n        sorted_numbers = sorted_numbers + number .. \" \"\n    end\n   \
    \ return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv8ejnfgv.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpv8ejnfgv.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpv8ejnfgv.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = {}\n  for _, num in\
    \ pairs(numbers.words) do\n    local num_string = tostring(num)\n    table.insert(sorted_numbers,\
    \ num_string)\n  end\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyjph4tyl.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpyjph4tyl.lua:8: in local 'candidate'\n\t/tmp/tmpyjph4tyl.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    -- Create a table that stores pairs of numbers\
    \ and their counts\n    -- The first value is the number and the second is the\
    \ count\n    local numbers_count = { zero = 0, one = 1, two = 2, three = 3, four\
    \ = 4, five = 5, six = 6, seven = 7, eight = 8, nine = 9 }\n    local sorted_numbers\
    \ = numbers.split(\" \")\n    table.sort(sorted_numbers, function(a, b) return\
    \ numbers_count[a] - numbers_count[b] end)\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjdfrhe84.lua:10:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpjdfrhe84.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpjdfrhe84.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal new_numbers = numbers.match('^%s*(%d+)%s*(%d+)%s*(%d+)%s*(%d+)$')\
    \ -- Get the numbers\n\tlocal i = 0\n\t\n\t-- Loop through the string\n\twhile\
    \ new_numbers[i] do\n\t\t-- Add the first number to the correct index\n\t\tnumbers[i]:insert(1,\
    \ new_numbers[i])\n\t\ti = i + 1\n\t\t\n\t\t-- Find the number just after the\
    \ current one\n\t\tlocal next_number = numbers[i]:find('%d+', 1, i - 1) -- Look\
    \ just before current position\n\t\t\n\t\t-- If there's a next number, add the\
    \ number to that position\n\t\tif next_number then\n\t\t\tnumbers[i]:insert(next_number,\
    \ new_numbers[i])\n\t\tend\n\t\t\n\t\t-- Remove the current number\n\t\tnumbers[i]:remove(1)\n\
    \tend\n\t\n\t-- Return the string sorted in numeric order\n\treturn table.concat(numbers)\n\
    end\n\t\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4rrjvtzt.lua:7:\
    \ bad argument #2 to 'match' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp4rrjvtzt.lua:7: in local 'candidate'\n\t/tmp/tmp4rrjvtzt.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local num_string = {}\n    for _ = 1, #numbers\
    \ do\n        table.insert(num_string, tonumber(numbers:sub(1,-1)))\n    end\n\
    \    table.sort(num_string)\n    return table.concat(num_string)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sbbe15j.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp4sbbe15j.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  return table.sort(table.unpack(table.concat(table.split(numbers,\
    \ ' '))))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp910ofe0p.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp910ofe0p.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp910ofe0p.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  assert(type(numbers) ~= 'string')\n  local\
    \ sortedNumbers = ''\n  local numbersList = numbers.split(' ')\n  for i = 0, #numbersList\
    \ do\n    local number = tonumber(numbersList[i])\n    assert(number ~= nil, \"\
    Could not convert '\" .. numbers .. \"' to a number.\")\n    if number > 9 then\n\
    \      local nString = string.format('one two three four five six seven eight\
    \ nine', number)\n      sortedNumbers = sortedNumbers .. ' ' .. nString\n    else\n\
    \      sortedNumbers = sortedNumbers .. ' ' .. string.format('zero', number)\n\
    \    end\n  end\n  return sortedNumbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxnei1raq.lua:7:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpxnei1raq.lua:7: in local 'candidate'\n\
    \t/tmp/tmpxnei1raq.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers_arr = {}\n    local i = 0\n\
    \    for number in string.gmatch(numbers, \"([^%s]+)\") do\n        i = i + 1\n\
    \        numbers_arr[i] = number\n    end\n    for i = 0 , #numbers_arr do\n \
    \       table.insert(numbers_arr, i, i)\n    end\n    table.sort(numbers_arr,\
    \ function (a, b)\n        if a < b then\n            return -1\n        else\n\
    \            return 1\n        end\n    end)\n    local new_numbers = \"\"\n \
    \   for _, number in ipairs(numbers_arr) do\n        new_numbers = new_numbers\
    \ .. numbers[number]\n    end\n    return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcnkqz1qk.lua:14:\
    \ bad argument #2 to 'insert' (position out of bounds)\nstack traceback:\n\t/tmp/tmpcnkqz1qk.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpcnkqz1qk.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub(' ', '') -- remove\
    \ spaces\n  local result = numbers:gsub('%d+', function(n)\n    return tonumber(n)\n\
    \  end)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp34498m0f.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local values = {}\n  for _, v in string.gmatch(numbers,\
    \ '%w+') do\n    values[v] = true\n  end\n  for k, v in pairs(values) do\n   \
    \ numbers = numbers:gsub(v, '') .. k\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcb65217a.lua:9:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpcb65217a.lua:9: in local 'candidate'\n\
    \t/tmp/tmpcb65217a.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n   local sorted_numbers = nil\n   for i = 1,\
    \ string.len(numbers) do\n      if numbers[i] ~= 'nine' then\n         table.insert(sorted_numbers,\
    \ numbers[i])\n      end\n   end\n   return table.concat(sorted_numbers, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy0rrrgme.lua:13:\
    \ bad argument #1 to 'concat' (table expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpy0rrrgme.lua:13: in local 'candidate'\n\t/tmp/tmpy0rrrgme.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n   local temp = ''\n   for w in string.gmatch(numbers,\
    \ '%w+') do\n      if w == 'zero' then temp = '0' end\n      if w == 'one' then\
    \ temp = '1' end\n      if w == 'two' then temp = '2' end\n      if w == 'three'\
    \ then temp = '3' end\n      if w == 'four' then temp = '4' end\n      if w ==\
    \ 'five' then temp = '5' end\n      if w == 'six' then temp = '6' end\n      if\
    \ w == 'seven' then temp = '7' end\n      if w == 'eight' then temp = '8' end\n\
    \      if w == 'nine' then temp = '9' end\n   end\n   return temp\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw01pd3op.lua:27:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpw01pd3op.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local function to_number(s)\n        local\
    \ n = 0\n        for c in s:gmatch('%d') do n = n + (c:byte() * 10) end\n    \
    \    return n\n    end\n    local numbers = numbers:gsub('%w+[- ]%s+', function(m)\n\
    \        local n = to_number(m)\n        if n > 10 then return m end\n       \
    \ if n < 10 then return '0'+m end\n        return m\n    end)\n    numbers = numbers:gsub('%d+',\
    \ function(m)\n        return to_number(m)\n    end)\n    numbers = numbers:gsub('%w+',\
    \ function(m)\n        return m:lower() -- ignore case\n    end)\n    return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgr3ksmfs.lua:33:\
    \ expected: \"zero four five seven eight nine\"\nactual: \"five zero four seven\
    \ nine eight\"\nstack traceback:\n\t/tmp/tmpgr3ksmfs.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local new_numbers = numbers\n    local sort_function\n\
    \    \n    if type(numbers) == \"string\" then\n        -- Split the string into\
    \ a table of numbers, one number per row.\n        -- We use lua table.unpack\
    \ here to turn these string numbers\n        -- into actual numbers. This is more\
    \ robust than the string\n        -- comparison code below.\n        local numbers\
    \ = table.unpack(numbers:gsub('%w+'))\n        -- Sort the numbers.\n        table.sort(numbers)\n\
    \        -- Return the number list as a string.\n        new_numbers = table.concat(numbers,\
    \ \" \")\n    end\n    \n    -- Set the sort function to sort numbers from smallest\
    \ to largest.\n    sort_function = function(a, b) return a < b end\n    \n   \
    \ -- Sort the numbers, return a new number list.\n    return table.sort(new_numbers,\
    \ sort_function)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqfaako0n.lua:15:\
    \ bad argument #2 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpqfaako0n.lua:15: in local 'candidate'\n\t/tmp/tmpqfaako0n.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal t = {}\n\tfor _,v in pairs(numbers)\
    \ do\n\t\ttable.insert(t, v)\n\tend\n\ttable.sort(t)\n\tlocal result = {}\n\t\
    for _,v in pairs(t) do\n\t\ttable.insert(result, v)\n\tend\n\treturn table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9uwwadn9.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp9uwwadn9.lua:8: in local 'candidate'\n\t/tmp/tmp9uwwadn9.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local list = numbers:gsub('([%z]+)', '%1'):gsub('%d+',\
    \ '%1'):gsub('(%z+)', '%1'):gsub('(%d+)', '%1')\n  return list:gsub('(%d+)', '%1>%2'):gsub('(%z+)',\
    \ '%1>%2'):gsub('(%1%z)', '%1>%2'):gsub('(%1%d)', '%1>%2')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprsnszx14.lua:8:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmprsnszx14.lua:8: in local\
    \ 'candidate'\n\t/tmp/tmprsnszx14.lua:14: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local i = 1\n  local out = \"\"\n  while true\
    \ do\n    local n = tonumber(numbers)\n    if not n then\n      return out\n \
    \   end\n    out = numbers[i - 1]..\" \"..n..\" \"..out\n    numbers = numbers[string.len(numbers):len()\
    \ - 1]\n    if i == 10 then\n      break\n    end\n    i = i + 1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwzbqbuk.lua:27:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgwzbqbuk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  -- Check argument type\n  if type(numbers)\
    \ ~= 'string' then\n    error('Invalid argument type: input must be string')\n\
    \  end\n  -- Check argument length\n  local n = 0\n  for _, v in pairs(numbers)\
    \ do\n    n = n + 1\n  end\n  if n == 0 then\n    return numbers\n  end\n  local\
    \ n = math.floor(n/2) + 1\n  local numbers_sorted = {}\n  local numbers_joined\
    \ = {}\n  for _, v in pairs(numbers) do\n    if v == 'zero' then table.insert(numbers_sorted,\
    \ '0') else\n    if v == 'one' then table.insert(numbers_sorted, '1') else\n \
    \   if v == 'two' then table.insert(numbers_sorted, '2') else\n    if v == 'three'\
    \ then table.insert(numbers_sorted, '3') else\n    if v == 'four' then table.insert(numbers_sorted,\
    \ '4') else\n    if v == 'five' then table.insert(numbers_sorted, '5') else\n\
    \    if v == 'six' then table.insert(numbers_sorted, '6') else\n    if v == 'seven'\
    \ then table.insert(numbers_sorted, '7') else\n    if v == 'eight' then table.insert(numbers_sorted,\
    \ '8') else\n    if v == 'nine' then table.insert(numbers_sorted, '9') else\n\
    \    if type(v) ~= 'number' then error('Invalid argument type: input must be number')\
    \ end\n    end\n  end\n  for _, v in pairs(numbers_sorted) do\n    table.insert(numbers_joined,\
    \ v)\n  end\n  return table.concat(numbers_joined, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl9e0j9hk.lua:52: 'end' expected (to close 'if' at line 29)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local t = {}\n    local i = 1\n    local\
    \ c\n    while i <= 9 do\n        c = string.sub(numbers, i)\n        t[c] = t[c]\
    \ or 1\n        i = i + 1\n    end\n    local j = 9\n    local k = 1\n    while\
    \ j <= 9 do\n        local l = t[j]\n        local m = t[k]\n        if m == l\
    \ then\n            k = k + 1\n        elseif m > l then\n            table.insert(t,\
    \ j)\n            j = j + 1\n        else\n            table.remove(t, j)\n  \
    \          j = j + 1\n        end\n    end\n    return table.concat(t, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local num_string = string.format(\"%s %s %s\"\
    , numbers[1], numbers[2], numbers[3])\n  local sorted_numbers = string.format(\"\
    %s %s %s\", numbers[2], numbers[3], numbers[1])\n  return num_string\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5niu7h0.lua:15:\
    \ expected: \"\"\nactual: \"nil nil nil\"\nstack traceback:\n\t/tmp/tmps5niu7h0.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local function compare(a,b)\n        local\
    \ aNum = tonumber(a)\n        local bNum = tonumber(b)\n        if aNum == nil\
    \ then return nil end\n        if bNum == nil then return 1 end\n        return\
    \ aNum <=> bNum\n    end\n    return table.sort(numbers, compare)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbfpdox3k.lua:12: unexpected symbol near '>'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local s = string.gsub(numbers, ' %s+', ' ')\n\
    \  local l = s:gsub('[^0-9 ]+', '')\n  table.sort(l, function(a,b) return tonumber(a)<tonumber(b)\
    \ end)\n  return string.sub(l, 1, l:len())\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppq3cqos8.lua:9:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmppq3cqos8.lua:9: in local 'candidate'\n\t/tmp/tmppq3cqos8.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', function()\n\
    \        local a = tonumber(string.sub(arguments, 1, 1))\n        local b = tonumber(string.sub(arguments,\
    \ 2, 2))\n        return a < b then 1 if a == b then 0 end\n    end)\n    return\
    \ table.concat(numbers, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp97yxacy0.lua:10: 'end' expected (to close 'function' at line\
    \ 7) near 'then'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal s = ''\n\ttable.sort(numbers, function\
    \ (a, b)\n\t\tlocal n, m = tonumber(a), tonumber(b)\n\t\tif n < m then return\
    \ 1 else return -1 end\n\tend)\n\tfor i = 1, (#numbers - 1) do\n\t\ts = s .. numbers[i]\n\
    \tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmxmdv00v.lua:8:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpmxmdv00v.lua:8: in local 'candidate'\n\t/tmp/tmpmxmdv00v.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers_list = {}\n    local index\
    \ = {}\n    local number_string = \"\"\n    for number_index, number in pairs(numbers)\
    \ do\n        index = number\n        table.insert(numbers_list, number)\n   \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbxt2q9fk.lua:25: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    return ngx.sort_key_by(function(x) return\
    \ tonumber(x), numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2n2q62ze.lua:7: 'end' expected near ')'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal function sort_digits(digits)\n\t\treturn\
    \ string.reverse(table.concat(digits, ' '))\n\tend\n\tlocal digits = {}\n\ttable.insert(digits,\
    \ 0)\n\tfor i = 1, string.len(numbers) do\n\t\tlocal substring = string.sub(numbers,\
    \ 1, i)\n\t\tlocal digits_substr = string.gmatch(substring, \"%a+\")\n\t\ttable.insert(digits,\
    \ table.concat(digits_substr, ' '))\n\tend\n\tlocal sorted_digits = sort_digits(digits)\n\
    \tlocal sorted_numbers = table.concat(sorted_digits, ' ')\n\ttable.insert(sorted_numbers,\
    \ 0)\n\ttable.insert(sorted_numbers, 0)\n\ttable.insert(sorted_numbers, 0)\n\t\
    table.insert(sorted_numbers, 0)\n\treturn sort_numbers(table.concat(sorted_numbers,\
    \ ' '))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppf4qui1e.lua:18:\
    \ bad argument #1 to 'concat' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmppf4qui1e.lua:18: in local 'candidate'\n\t/tmp/tmppf4qui1e.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal numbers = string.split(numbers, \" \"\
    )\n\tlocal i = 0\n\tlocal result = ''\n\tlocal sorted = {}\n\twhile i < #numbers\
    \ and #sorted < 9 do\n\t\ttable.insert(sorted, numbers[i])\n\t\ti = i + 1\n\t\
    end\n\ttable.sort(sorted, function(a, b) return a > b end)\n\tlocal k = 0\n\t\
    for i = 0, 9 do\n\t\tresult = result .. numbers[k] .. ' '\n\t\tk = k + 1\n\tend\n\
    \treturn string.gsub(result, ' $', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1cxv82s4.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp1cxv82s4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1cxv82s4.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\t-- Create a table of numbers that we can sort\n\
    \tlocal numbers = {\n\t\t[0] = 'zero',\n\t\t[1] = 'one',\n\t\t[2] = 'two',\n\t\
    \t[3] = 'three',\n\t\t[4] = 'four',\n\t\t[5] = 'five',\n\t\t[6] = 'six',\n\t\t\
    [7] = 'seven',\n\t\t[8] = 'eight',\n\t\t[9] = 'nine'\n\t}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzndc8ek7.lua:31: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local s = ''\n    for _, x in ipairs(numbers.split('\
    \ ', 1, true)) do\n        table.insert(s, x)\n    end\n    table.sort(s)\n  \
    \  return table.concat(s, '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz976kw8p.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpz976kw8p.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpz976kw8p.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for _, num\
    \ in ipairs(string.gmatch(numbers, ' %w+') do\n        table.insert(sorted_numbers,\
    \ tonumber(num))\n    end)\n    table.sort(sorted_numbers, compare)\n    return\
    \ table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7_iizvo9.lua:8: ')' expected near 'do'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local patterns = {\n    {['zero']}, -- No\
    \ numbers. Just return the input.\n    {['one']}, -- One number. Add it to front\
    \ of list.\n    {['two']}, -- Two numbers. Add it to the front and end to the\
    \ list.\n    {['three']}, -- Three numbers. Add it to the front and end to the\
    \ list.\n    {['four']}, -- Four numbers. Add it to the front and end to the list.\n\
    \    {['five']}, -- Five numbers. Add it to the front and end to the list.\n \
    \   {['six']}, -- Six numbers. Add it to the front and end to the list.\n    {['seven']},\
    \ -- Seven numbers. Add it to the front and end to the list.\n    {['eight']},\
    \ -- Eight numbers. Add it to the front and end to the list.\n    {['nine']},\
    \ -- Nine numbers. Add it to the front and end to the list.\n  }\n  local numbers_list\
    \ = table.tostring(numbers):gsub('%s+', '%'):gsub('(%s+)', '%s+'):gsub('%s*',\
    \ '%s'):gsub('(%s*)', '%s*'):gsub('%s?%s?', '%s'):gsub('(%s?%s?)', '%s?%s?'):gsub('%s%s',\
    \ '%s'):gsub('(%s%s*)', '%s*'):gsub('%s%s*', '%s*'):gsub('%%s+', '%'):gsub('(%%s+)',\
    \ '%s+'):gsub('%%s*', '%s'):gsub('(%%s*)', '%s*'):gsub('%%s?%s?', '%s'):gsub('(%%s?%s?)',\
    \ '%s?%s?'):gsub('%%s%s', '%s'):gsub('(%%s%s*)', '%s*'):gsub('%%s%s*', '%s*'):gsub('%%s+',\
    \ '%'):gsub('(%%s+)', '%s+'):gsub('%%s*', '%s'):gsub('(%%s*)', '%s*'):gsub('%%s?%s?',\
    \ '%s'):gsub('(%%s?%s?)', '%s?%s?'):gsub('%%s%s', '%s'):gsub('(%%s%s*)', '%s*'):gsub('%%s%s*',\
    \ '%s*')\n  for _, pattern in ipairs(patterns) do\n    numbers_list = numbers_list:gsub(pattern,\
    \ table.concat(sorted_numbers, ' '):gsub(' %s ', ' '))\n  end\n  return number\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz_6ya9m_.lua:8: '=' expected near '}'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  return string.gsub(numbers, \"([a-z]+) ([a-z]+)\"\
    , \"%1 %2\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzx2b4k83.lua:16:\
    \ expected: \"zero four five seven eight nine\"\nactual: \"five zero four seven\
    \ nine eight\"\nstack traceback:\n\t/tmp/tmpzx2b4k83.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for i=1,#numbers\
    \ do\n    if tonumber(numbers[i]) then\n      sorted_numbers = sorted_numbers\
    \ + numbers[i]:lower() + ' '\n    end\n  end\n  table.sort(sorted_numbers)\n \
    \ return sorted_numbers\nend\n</code>\n<|/ a tags=lua |>\n<| a tags=lua |>\n<code>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph_6lcyx4.lua:16: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(%w+)(%d%d)',\
    \ '%2 %3')\n    numbers = numbers:gsub('(%w+)(%d%d)', '%2 %3')\n    numbers =\
    \ numbers:gsub('(%w+)(%d%d)', '%2 %3')\n    numbers = numbers:gsub('(%w+)(%d%d)',\
    \ '%2 %3')\n    numbers = numbers:gsub('(%w+)(%d%d)', '%2 %3')\n    numbers =\
    \ numbers:gsub('(%w+)(%d%d)', '%2 %3')\n    numbers = numbers:gsub('(%w+)(%d%d)',\
    \ '%2 %3')\n    numbers = numbers:gsub('(%w+)(%d%d)', '%2 %3')\n    numbers =\
    \ numbers:gsub('(%w+)(%d%d)', '%2 %3')\n    numbers = numbers:gsub('(%w+)(%d%d)',\
    \ '%2 %3')\n    numbers = numbers:gsub('(%w+)(%d%d)', '%2 %3')\n    numbers =\
    \ numbers:gsub('(%w+)(%d%d)', '%2 %3')\n    numbers = numbers:gsub('(%w+)(%d%d)',\
    \ '%2 %3')\n    numbers = numbers:gsub('(%w+)(%d%d)', '%2 %3')\n    numbers =\
    \ numbers:gsub('(%w+)(%d%d)', '%2 %3')\n    numbers = numbers:gsub('(%w+)(%d%d)',\
    \ '%2 %3')\n    numbers = numbers:gsub('(%w+)(%d%d)', '%2 %3')\n    numbers =\
    \ numbers:gsub('(%w+)(%d%d)', '%2 %3')\n    numbers = numbers:gsub('(%w+)(%d%d)',\
    \ '%2 %3')\n    numbers = numbers:gsub('(%w+)(%d%d)', '%2 %3')\n    numbers =\
    \ numbers:gsub('(%w+)(%d%d)', '%2 %3')\n    numbers = numbers:gsub('(%w+)(%d%d)',\
    \ '%2 %3')\n    numbers = numbers:gsub('(%w+)(%d%d)', '%2 %3')\n    numbers =\
    \ numbers:gsub('(%w+)(%d%d)', '%2 %3')\n    numbers = numbers:gsub('(%w+)(%d%d)',\
    \ '%2 %3')\n    numbers = numbers:gsub('(%w+\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdsv1c8o2.lua:32: unfinished string near ''(%w+'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = string.gsub(numbers, ' ',\
    \ '') -- Replace spaces with 'nothing'\n    return table.sort(\n        table.concat(\n\
    \            string.gsub(numbers, '(%d+)', function(digits)\n                return\
    \ tonumber(digits)\n            end)\n        )\n    )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps0lkhk1g.lua:9:\
    \ bad argument #1 to 'concat' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmps0lkhk1g.lua:9: in local 'candidate'\n\t/tmp/tmps0lkhk1g.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers.split(\" \")\n  local\
    \ sorted = {}\n  for _, num in pairs(numbers) do\n    table.insert(sorted, num)\n\
    \  end\n  table.sort(sorted)\n  return table.concat(sorted)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps9tav0ns.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmps9tav0ns.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmps9tav0ns.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted = {}\n  local i\n  for i = 1,#numbers\
    \ do\n    sorted[numbers[i]] = true\n  end\n  table.sort(sorted, function(a,b)\
    \ return a<b end)\n  return table.concat(sorted)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfebvok6g.lua:10:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpfebvok6g.lua:10: in local 'candidate'\n\
    \t/tmp/tmpfebvok6g.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    -- Split the string into numbers and sort\
    \ them\n    local numbers = numbers:split(' '):map(function(number)\n        return\
    \ tonumber(number) -- Convert to numbers\n    end):sort()\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpngcv30b1.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal sorted_string = ''\n\tlocal num_array\
    \ = numbers:gsub('%w+', ''):gsub(' ', ''):gsub('[^0-9]', '')\n\tlocal num_array\
    \ = num_array:gsub('%w+', ''):gsub(' ', ''):gsub('[^0-9]', '')\n\tfor i = 1, #num_array,\
    \ 1 do\n\t\tlocal num_string = num_array[i]\n\t\tif num_string > 9 then\n\t\t\t\
    sorted_string = sorted_string .. num_string .. ' '\n\t\telse\n\t\t\tsorted_string\
    \ = sorted_string .. num_string .. '0'\n\t\tend\n\tend\n\treturn sorted_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnb_t0uv6.lua:25:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpnb_t0uv6.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, \"%s+\"\
    , \"\")\n  local list = nil\n  local index\n  local sortfunction = function(x,y)\
    \ \n    index = false\n    for index, value in ipairs(list) do\n      if value\
    \ ~= nil and x == value then\n        index = true\n      end\n    end\n    return\
    \ index\n  end\n  for index, value in ipairs(numbers) do\n    if value ~= nil\
    \ then\n      if list == nil then\n        list = { value }\n      else\n    \
    \    table.insert(list, value)\n      end\n    end\n  end\n  if list then\n  \
    \  table.sort(list, sortfunction)\n    numbers = list\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchtxajl3.lua:40:\
    \ expected: \"three five nine\"\nactual: \"threefivenine\"\nstack traceback:\n\
    \t/tmp/tmpchtxajl3.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n   local numbers = numbers.split(\" \") -- convert\
    \ space delimited string to array\n   table.sort(numbers, function(a, b) return\
    \ tonumber(a) < tonumber(b) end)\n   return table.concat(numbers, \" \")\nend\n\
    </code>\n<|/ a tags=string,lua dscore=4 |>\n<| c |>\nI like the functional approach,\
    \ but it fails for \"one two three\". I'm not sure how to handle that scenario.\n\
    <|/ c |>\n<| c |>\nI edited the answer to handle this edge case.\n<|/ c |>\n<|\
    \ c |>\nThis does fail for \"zero zero zero\".  How would you convert that to\
    \ \"one zero zero\" ?\n<|/ c |>\n<| c |>\nI edited the answer. It's a much more\
    \ elegant solution, thanks for pointing it out.\n<|/ c |>\n<| c |>\nI wouldn't\
    \ call that an edge case, but rather a deliberate design decision.  Any given\
    \ string should only contain a single sequence of numbers and no two or more sequences.\
    \  Thus, a string that has two or more consecutive zeros is invalid.  Conversely,\
    \ a string that has one zero or one consecutive zeros is valid (but is equivalent\
    \ to one zero).\n<|/ c |>\n<| a tags=string,lua |>\nThe question is, how are you\
    \ going to represent the numbers?  How will you know what to do?  If you know\
    \ your input data will always be valid then you can just use string.gsub to replace\
    \ all numbers except the first.  Then you can just sort and concat.\n<code>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzp5hk208.lua:11: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub(' ', ''):gsub('%s+',\
    \ function(num)\n    num = tonumber(num)\n    if not num then\n      ngx.log(ngx.ERR,\
    \ \"invalid number: %s\", num)\n      return \"(ERROR)\"\n    end\n    return\
    \ table.remove({\n      \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\", num\n    })\n  end)\n  table.sort(numbers)\n\
    \  return table.concat(numbers, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfzrryd31.lua:17:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpfzrryd31.lua:17: in local 'candidate'\n\t/tmp/tmpfzrryd31.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local str = \"\"\n  for index, value in ipairs(numbers)\
    \ do\n    str = str .. value\n    if index < (#numbers - 1) then\n      str =\
    \ str .. \" \"\n    end\n  end\n  return str\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6zjvslp.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpk6zjvslp.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\tlocal numbers = numbers:gsub(' ', ''):gsub('%s+(.-)%s*',\
    \ function( _, x ) return tonumber(x) end):gsub('(%d+)%s*', function( _, x ) return\
    \ tonumber(x) end)\n\ttable.sort(numbers, function(a,b) return tonumber(a) < tonumber(b)\
    \ end)\n\treturn table.concat(numbers)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp591ujj91.lua:8:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmp591ujj91.lua:8: in local 'candidate'\n\t/tmp/tmp591ujj91.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n\t-- Split into space-delimited numbers\n\t\
    local numbers_str = numbers:gmatch(\"([0-9]+)\")\n\t-- If no numbers were found,\
    \ just return an empty string\n\tif numbers_str == nil or numbers_str == \"\"\
    \ then\n\t\treturn \"\"\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3wtomzpu.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
