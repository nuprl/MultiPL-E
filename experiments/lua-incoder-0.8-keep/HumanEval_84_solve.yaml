name: HumanEval_84_solve
language: lua
prompt: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
  -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be \"\
  1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"110\".\n\
  -- For N = 147, the sum of digits will be 12 the output should be \"1100\".\n--\
  \ Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n-- Output:\n\
  -- a string of binary number\nlocal function solve(N)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
  \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
  \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
  \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- base case\n  if N == 1 then\n    return \"0\"\n  end", "    local\
    \ sum = 1\n    while N ~= 0 do\n        sum = (sum * 10) + N % 10\n        N =\
    \ N / 10\n    end\n    return tostring(sum)\nend", "    local digit = 0\n    local\
    \ sum = ''\n    \n    repeat\n        digit = N % 10\n        N = N / 10\n   \
    \     sum = digit .. sum\n    until N == 0\n    \n    return sum\nend\nassert(solve(0)\
    \ == 0)\nassert(solve(1000) == '1')\nassert(solve(150) == '110')\nassert(solve(147)\
    \ == '1100')\n</cell>\n<text>\n4.4.3\nThere is a risk that the last digit in any\
    \ number may be zero. In such case output \u201C0\u201D.", "    local sum = 0;\n\
    \    local sumstr = '';\n    while N do\n        sum = sum + math.floor((N % 2)\
    \ + 0.5)\n        N = math.floor(N/2)\n        sumstr = sumstr .. '1'\n    end\n\
    \    return sumstr\nend", "   local nums = {}\n   for i = 1, N do\n      local\
    \ digit = math.floor(i/10)\n      if nums[digit] == nil then\n         nums[digit]\
    \ = 0\n      end\n      nums[digit] = nums[digit] + 1 \n   end\n   local result\
    \ = \"\"\n   for k, v in pairs(nums) do\n      result = result .. k .. \"0\"\n\
    \   end\n   return result\nend\nprint(solve(N))", "  local result = ''\n  repeat\n\
    \    result = result .. string.rep('1', N.bit_length())\n    N = N / 2\n  until\
    \ N == 0\n  return result\nend", "    local s = \"\"\n    local n = 1\n    local\
    \ carry = 1\n    while n > 0 do\n        local t = N // 10\n        s = string.sub(s,\
    \ 1, n-1) + tostring(t)\n        n = t\n        carry = carry ^ t\n    end\n \
    \   s = tostring(carry)..s\n    return s\nend", "    if N == 0 then\n        return\
    \ \"0\"\n    end\n    if N == 1 then\n        return \"1\"\n    end\n    if N\
    \ == 2 then\n        return \"10\"\n    end\n    local ans, remainder\n    ans\
    \ = solve(N / 2) + solve((N % 2)^1)\n    remainder = N %2\n    return ans .. solve(remainder)\n\
    end", "    if N ~= 0 then\n        if N == 1 then\n            return N\n    \
    \    end\n        if N == 2 then\n            return '10'\n        end\n     \
    \   if N % 2 == 0 then\n            local firstSum = solve(N / 2)\n          \
    \  return firstSum + solve(N / 2)\n        end\n    end\n    return '1'\nend",
  "    N = tonumber(N);\n    if N == 0 then return \"0\"; end\n    return string.char(N\
    \ % 10 ^ n % 10) for n in string.gmatch(tostring(N), \"%d+\") ;\nend", "    local\
    \ s = ''\n    for i = 1, N do\n        local p = math.floor( math.log( N ) / math.log(2)\
    \ )\n        s = s..( (N % 2 == 0 and 1 or 0) * '1') + ( (N % 2 == 1 and 1 or\
    \ 0) * '0' )\n        N = N / 2\n        while N > 0 do\n            if N % 2\
    \ > 0 then\n                s = s .. '1'\n            else\n                s\
    \ = s .. '0'\n            end\n            N = N / 2\n        end\n        s =\
    \ s..( (N % 2 == 1 and 1 or 0) * '0' )\n    end\n    return s\nend", "  local\
    \ S = ''\n  local i = 0\n  while i < N do\n    S = S .. tostring(N % 10 + 1 -\
    \ (N % 10 > 0))\n    N = N / 10\n    i = i + 1\n  end\n  return S\nend", "  if\
    \ N == 0 then return \"0\" end\n  if N == 1 then return \"1\" end\n  local s =\
    \ solve(N // 2) + solve(N MOD 2)\n  return s\nend", "    local n = 0\n    while\
    \ true do\n        local c = math.floor(N / 2)\n        n = n + math.modf(N /\
    \ 2 - c * 2)\n        if n == 0 then\n            if c > 1 then\n            \
    \    return \"1\"\n            else\n                return \"0\"\n          \
    \  end\n        else\n            if n % 2 == 1 then\n                return \"\
    1\" + solve((n / 2)^2)\n            else\n                return \"0\" + solve((n\
    \ / 2)^2)\n            end\n        end\n    end\nend", "    if N < 0 then\n \
    \       return \"Error input value error.\"\n    end\n    local digits = \"\"\n\
    \    local index = 1\n    while N ~= 0 do\n        digits = digits .. string.format(\"\
    %0d\", N)\n        N = math.floor(N/10)\n        index = index + 1\n    end\n\
    \    return digits\nend", "    if N == 1 then\n        return '1'\n    end\n \
    \   if N == 0 then\n        return '0'\n    end\n    local s = solve(N / 2) +\
    \ N % 2 * '0'\n    local t = solve((N - N % 2) / 2)\n    return s + t\nend", " \
    \   local sum = 0;\n    local power = 0;\n    local num = 0;\n    local digit;\n\
    \    while N > 0 do\n        digit = math.floor((N % 16) / 16);\n        sum =\
    \ sum + digit;\n        N = math.floor((N % 16) / 16);\n        power = power\
    \ * 2;\n        if N == 0 then\n            num = \"1\"\n        else\n      \
    \      num = num..\"0\"\n        end\n    end\n    return sum..num;\nend", " \
    \   local sum = 0\n    for i = 1, 10 do\n        local digit = N mod 2\n     \
    \   sum = sum + digit\n        N = N div 2\n    end\n    return sum\nend", " \
    \ if N == 0 then return \"0\" end\n  if N == 1 then return \"1\" end\n  local\
    \ ans = solve(N/2)\n  if N % 2 == 0 then\n    return ans .. \"0\"\n  else\n  \
    \  return ans .. \"1\"\n  end\nend", "    local ans = ''\n    local n = N\n  \
    \  while n > 0 do\n        ans = string.rep('0', n%2) + ans -- convert integer\
    \ to binary string\n        n = (n/2)\n    end\n    return ans\nend", "  N = tonumber(N)\n\
    \  local s = \"\"\n  if N == 0 then return \"0\" end\n  while N do\n    s,N =\
    \ math.floor(math.log(N,2)+1),N/2\n  end\n  return s\nend", "    if N < 10 then\n\
    \        return tostring(N)\n    end", "    local total = 0\n    for i=1,N,1 do\n\
    \        total = (total*2)^i\n    end\n    \n    if total == 0 then\n        return\
    \ \"\"\n    end", "  return #(string(N:reverse():gsub(\".\", \", .\"):gsub(\"\
    ^\", \"\",\n                                              \"g\")) - \"\")\nend\n\
    print(solve(15))\nprint(solve(13))\nprint(solve(1000))\nprint(solve(999))\nprint(solve(1000\
    \ + 15 + 14 + 127))", "    if N == 0 then\n        return ''\n    end\n    local\
    \ count = 1\n    local result = ''\n    while N > 1 do\n        local digit =\
    \ math.floor(N / 2)\n        result = result + string.format('%0' + string.format('d',\
    \ digit) + 'b', digit)\n        count = count + 1\n        N = N - digit\n   \
    \ end\n    result = result + string.format('%0' + string.format('d', count) +\
    \ 'b', count)\n    return result\nend", "    if N == 0 then return \"\" end\n\
    \    if N == 1 then\n        return N\n    end\n    local ans, carry, N2 = 0,\
    \ 0, N\n    while N2 >= 0 do\n        if N2 % 2 == 1 then\n            ans = ans\
    \ + carry\n        end\n        carry = N2 % 2\n        N2 = N2 / 2\n    end\n\
    \    return ans + carry\nend", "\tlocal total = 0\n\tfor i = 1, N do\n\t\ttotal\
    \ = total + math.mod(N, 2)\n\t\tN = math.floor(N / 2)\n\tend\n\treturn tostring(total)\n\
    end", "    local s = \"\"\n    while N >= 2 do\n        s = string.concat(s, tostring(N\
    \ % 2))\n        N = math.floor(N/2)\n    end\n    return s\nend", "    local\
    \ sum = 0\n    local power = 2\n    local lastDigit = 0", "  N = tonumber(N);\n\
    \  return tostring(N):gsub(\"(%d%d%d%d%d%d%d%d%d%d)\", function (_, a) return\
    \ a end);\nend", "  if N == 0 then\n    return \"0\"\n  end\n  if N == 1 then\n\
    \    return \"1\"\n  end\n  local result = \"0\"\n  while N ~= 0 do\n    local\
    \ remainder = N % 10\n    result = result .. string.sub(string.char(math.floor(math.pow(2,\
    \ math.log(remainder, 2)) + 0.5)), -2)\n    N = N / 10\n  end\n  return result\n\
    end", "    local ans = \"\"\n    local sum = 0\n    while N > 0 do\n        sum\
    \ = sum + N % 10\n        N = N / 10\n    end\n    if sum < 2 then ans = \"0\"\
    ..ans end\n    if sum > 2 then ans = \"1\".. ans end\n    if N > 0 then ans =\
    \ ans..solve(N) end\n    return ans\nend", "  local s = ''\n  local remainder\
    \ = N % 2\n  if remainder == 1 then\n    return s\n  else\n    while true do\n\
    \      s = string.sub(s, 1, 1) .. '0' .. s\n      N = N / 2\n      if N == 0 then\n\
    \        return s\n      else\n      end\n    end\n  end\nend", "  local num =\
    \ 0\n  while N > 1 do\n    num = num + math.floor( N / 10 )\n    N = N % 10\n\
    \  end\n  return math.floor( num ):reverse()\nend", "    local binary = {}\n \
    \   local sum = 0\n    local k = 1\n    while N > 0 do\n        local d = N %\
    \ 10\n        sum = sum + d\n        binary[k] = d -- save binary\n        k =\
    \ k + 1\n        N = N / 10\n    end\n    binary[k] = 1 -- save last number\n\
    \    return table.concat(binary)\nend", "    if N == 0 then\n        return ''\n\
    \    end", "    return math.floor(math.log(math.abs(N), 2)) + 1\nend", "    local\
    \ ans = {}\n    ans[1] = 0\n    for i = 2, N do\n        local n = 0\n       \
    \ while N >= i do\n            n = n + (N % i) / i\n            N = N / i\n  \
    \      end\n        ans[i] = n\n    end\n    return table.concat(ans, \"\")\n\
    end", "    if N == 0 then return \"0\" end\n    if N == 1 then return \"1\" end\n\
    \    local result = 0\n    for i = 1, N do\n        result = result + tostring(i)\n\
    \    end\n    return tostring(result)\nend", "  local str = \"\"\n  while N >\
    \ 0 do\n    str = str .. tostring(N % 2)\n    N = math.floor(N/2)\n  end\n  return\
    \ str\nend", "    local ret = \"\"\n    local remain = N % 10\n    while remain\
    \ ~= 0 do\n        ret = ret + bin(remain)\n        remain = N / 10\n    end\n\
    \    return ret\nend", "    local s=\"\"\n    local i=0\n    while i<N do\n  \
    \      s=s+1\n        i= i+1\n    end\n    return s\nend", "    if N < 0 then\n\
    \        return nil\n    end\n    if N > 9999 then\n        return nil\n    end\n\
    \    return string.format('%g', math.floor(N / math.pow(10,3)))\nend", "    local\
    \ sum = 0\n    local result = 0\n    local n = 1\n    local sum = 0\n    for x\
    \ = 1, N do\n        n = n / 10\n        sum = sum + n\n    end\n    sum = (sum\
    \ % 10)\n    if sum == 0 then\n        result = sum\n    else\n        local temp\
    \ = sum\n        while temp > 0 do\n            if temp % 2 == 1 then\n      \
    \          result = result + 2\n            end\n            temp = temp / 2\n\
    \        end\n    end\n    return result\nend\n</cell>\n<text>\nProblem 8", " \
    \   local res = ''\n    while N > 0 do\n        local remain = math.floor(N %\
    \ 2)\n        N = math.floor(N/2)\n        res = string.format('%s%s', res, remain)\n\
    \    end\n    return res\nend", "    local sum = 0\n    local sumStr = \"\"\n\
    \    while N ~= 0 do\n        sumStr = sumStr..tostring(N % 2)..\" \"\n      \
    \  N = math.floor(N/2)\n        sum = sum + N\n    end\n    return sumStr .. sum\n\
    end", "  -- write your code in JavaScript (Node.js 10.x)\n  return '';\nend",
  "\tlocal binary = string.byte(string.sub(N,1,2)) -- First two digits\n\treturn string.sub(N,1,1)\
    \ .. binary -- First digit\nend\nprint(solve(1499))", "    local binary = \"\"\
    ;\n    local sum = 0;\n    local counter = 0;\n    repeat\n        binary = binary\
    \ + format(\"%0d\", math.floor((N - math.floor(N)) % 2));\n        N = math.floor(N/2);\n\
    \        sum = sum + N;\n        counter = counter + 1;\n    until N == 0;\n \
    \   return binary;\nend", "  local t = {}\n  for i = 0, N do\n    local n = {}\n\
    \    for j = 0, 2 do\n      n[j] = (t[i + j] % 2) == 1\n      t[i + j] = (t -\
    \ n) * 10 + t[i + j]\n    end\n  end\n  return string.format(\"%d\", t[#t])\n\
    end", "  local S = \"\"\n  local i = N - 1\n  while i ~= 0 do\n    S = S..i%2\n\
    \    i = i/2\n  end\n  return S\nend", "    local sum = 0\n    while N > 0 do\n\
    \        local digit = N % 2\n        sum = sum + digit\n        N = N/2\n   \
    \ end\n    return sum\nend", "  local function checkbin(i)\n    if i == \"1\"\
    \ then\n      return checkbin(math.floor(i / 2)) + i\n    end\n    return math.floor(i\
    \ / 2) + i\n  end\n  return checkbin(math.floor(N / 2)):reverse():gsub(\"1\",\"\
    \")\nend", "    local ret = \"\"\n    while N > 0 do\n        if N % 2 == 1 then\n\
    \            ret = ret + \"1\"\n        else\n            ret = ret + \"0\"\n\
    \        end\n        N = N / 2\n    end\n    return ret\nend", "    local digits\
    \ = N % 2\n    local sum = 0\n    while N > 0 do\n        sum = sum + math.floor((N\
    \ % 10)/2)\n        N = math.floor(N/10)\n    end\n    return sum == 0 and digits\
    \ or \"0\".. sum..\"0\"\nend", "  return N.to_s(2) .. repeat(' ', N) .. tostring(N.to_s(1))\n\
    end", "    local total = 0\n    for i=1,N do\n        local k = math.pow(10,i)\n\
    \        total = total + (N % k)\n        N = N/k\n    end\n    return total\n\
    end", "\tlocal total=0\n\tlocal tmp=N\n\twhile tmp > 0 do\n\t\ttotal=total+(tmp%2)\n\
    \t\ttmp=tmp/2\n\tend\n\treturn total\nend", "    local function add_to(a, n)\n\
    \        if n == 0 then\n            return a\n        end", "    if N == 0 then\n\
    \        return \"0\"\n    end\n    local s = solve(math.floor(N / 2) + N)\n \
    \   return s... \"1\" -- insert \"1\"\nend", "    local s = \"\"\n    local m\
    \ = math.floor(math.log(N)/math.log(2))\n    local i = 2\n    repeat\n       \
    \ s = s .. binaryDigits(N)\n        N = math.floor(N / i)\n        i = i + 1\n\
    \    until N == 0 or math.floor(math.log(N)/math.log(2)) == m\n    return s\n\
    end\n</cell>\n<code language=julia-0.6>\nsolve(3)\n</cell>\n<text>\nIII.3. Binary\
    \ digits sum\nThe sum of the digits of N is defined to be the sum of the binary\
    \ digits of the number, excluding the leftmost digit.", "  N = tonumber(N) or\
    \ error(\"N is not a number\")\n  local sum, digits = 0\n  while N >= 10 do\n\
    \    digits = digits + 1\n    sum = sum + N % 10\n    N = floor(N / 10)\n  end\n\
    \  return tostring(sum, digits)\nend", "  assert(N >= 0, 'Input out of range')\n\
    \  -- first convert to binary\n  local str1 = bit.rshift(N,1)\n  local str2 =\
    \ bit.rshift(N,2)\n  local str3 = bit.rshift(N,4)\n  local str4 = bit.rshift(N,8)\n\
    \  -- then add them and convert to string\n  local sum1 = str1 + str2\n  local\
    \ sum2 = str3 + str4\n  -- return the converted string\n  return string.format(\"\
    %b\", sum1) + string.format(\"%b\", sum2)\nend", "  local output = 0\n  local\
    \ sum = 0\n  while N > 0 do\n    sum = sum + N % 10\n    N = N / 10\n  end\n \
    \ output = string.format(\"%0d\", sum)\n  return output\nend", "    local sum\
    \ = 0\n    local n = 1", "    local result = \"\"\n    local resultLength = 1\n\
    \    for i = 1, N-1 do\n        local remainder = N % 2\n        result = result\
    \ .. \"1\"\n        if remainder == 0 then\n            resultLength = resultLength\
    \ + 1\n        end\n        N = N / 2\n    end\n    return result\nend\nprint(solve(N))",
  "    local sum = 0\n    local total = 0\n    for n = 1, N do\n        sum = sum\
    \ + math.pow(2, (n - 1))\n        total = total + math.pow(2, (n - 1))\n    end\n\
    \    return tostring(total - sum)\nend", "  local sum = 0\n  local a = '1'\n \
    \ while N > 1 do\n    sum = sum + N % 10\n    N = N / 10\n    a = '0' + a\n  end\n\
    \  return sum * a\nend", "    local sum = 0\n    local s = \"\"", "  local sum\
    \ = 0\n  local count\n  for i = 1, N do\n    count = N / 2\n    if N > 1 then\n\
    \      count = count + 1\n    end\n    sum = sum + count % 2 + count % 2 * math.floor(count\
    \ / 2)\n    N = N - count\n  end\n  return sum\nend\n</cell>\n<text>\nProblem\
    \ 3", "    local result = \"\"\n    local carry = 0\n    for i = 1, N do\n   \
    \     result = \"1\"\n        if carry > 0 then\n            result = \"0\" ..\
    \ result\n        end\n        if N >= 10 then\n            local remain = N %\
    \ 10\n            N = N - remain\n            result = \"0\" .. result .. remain\n\
    \        end\n        if i <= 5 then\n            result = \"1\" .. result\n \
    \       end\n        if i == N then\n            result = \"1\" .. result\n  \
    \      end\n        if i ~= N then\n            carry = 1\n        end\n    end\n\
    \    return result\nend", "    if N < 0 then\n        return \"0\"\n    end",
  "   -- Write your code here\n   local result = 0\n   local base = 2\n   while N\
    \ ~= 0 do\n      result = result + (N % base) * base\n      N = math.floor(N /\
    \ base)\n   end\n   print(result)\nend", "    return tostring(N:reverse():gsub(\"\
    ^\",\"\",\"1\"):reverse():gsub(\"1\",\"\",\"^\"))\nend", "    if N < 0 then return\
    \ nil end\n    if N == 0 then return '0' end\n    local a = 1\n    local b = 0\n\
    \    local c = 0\n    local d = 1\n    local sum = 0\n    while d <= N do\n  \
    \      local temp = a % 10\n        a = b\n        b = temp * 10 + d\n       \
    \ c = d + b\n        d = c / 10\n        sum = sum + temp\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.4>", "  local sum = 0\n  while N >\
    \ 0 do\n    sum = (sum + (N % 10)) % 10\n    N = N div 10\n  end\n  return sum\n\
    end", "  N = tonumber(N)\n  \n  if N > 0 and N < 10000 then\n    local total =\
    \ 0\n    local binary = \"\"\n    \n    for i = 1, N do\n      local digit = N\
    \ % 2\n      \n      if digit == 0 then\n        total = total + 1\n        \n\
    \        if total > 1 then\n          binary = binary + \"0\"\n        else\n\
    \          binary = binary + \"1\"\n        end\n      else\n        total = total\
    \ + 1\n        binary = binary + tostring(digit)\n      end\n      \n      N =\
    \ N / 2\n    end\n    \n    return binary\n  else\n    return \"error\"\n  end\n\
    end", "    if N == 1 then\n        return \"0\"\n    end\n    if N == 2 then\n\
    \        return \"1\"\n    end\n    if N == 3 then\n        return \"10\"\n  \
    \  end\n    if N == 100 then\n        return \"11\"\n    end\n    if N == 254\
    \ then\n        return \"100\"\n    end\n    if N == 466 then\n        return\
    \ \"101\"\n    end\n    if N == 1001 then\n        return \"110\"\n    end\n \
    \   if N == 2222 then\n        return \"1000\"\n    end\n    if N == 7777 then\n\
    \        return \"1111\"\n    end\n    return solve(N - 1) + solve(N / 2) + solve(N\
    \ / 10)\nend", "   local ans = 0\n   for i = 1,N do \n      ans = ans + math.floor(\
    \ math.log(N)/math.log(2)+1 ) \n   end\n   return ans*2\nend", "   N = tostring(N)\n\
    \   local s = ''\n   for i=1,N do s = s .. tostring(N % 2) and 1 or 0 end\n  \
    \ return s\nend\nprint(solve({100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148}))",
  "    if N < 0 then\n        return \"-1\"\n    end\n    local res = 1\n    while\
    \ N > 0 do\n        res = res \xD7 (N mod 2)\n        N = N div 2\n    end\n \
    \   return res\nend\n</cell>\n<code language=julia-0.6>\n# Run this cell before\
    \ close\nusing Test", "    local sum = 0\n    local last = 0\n    for i = 1, N\
    \ do\n        last = last + (N - i)*(2**i)\n    end\n    return last\nend", " \
    \   if N <= 0 then\n        return '0'\n    end\n    local sum = 0\n    for i\
    \ = 1, N do\n        local tmp = math.floor((N % 100) % 10)\n        if tmp ==\
    \ 1 then\n            sum = sum + math.floor((N % 100) / 10)\n        elseif tmp\
    \ == 2 then\n            sum = sum + math.floor((N % 100) / 100)\n        elseif\
    \ tmp == 3 then\n            sum = sum + math.floor((N % 100) / 1000)\n      \
    \  else\n            sum = sum + math.floor((N % 100) / 10000)\n        end\n\
    \        N = math.floor(N/10)\n    end\n    return tostring(sum)\nend", "    local\
    \ num = \"\"\n    while N > 0 do\n        local remain = N % 2\n        N = N/2\n\
    \        local sum = (remain == 0)\n        for i = #sum, 0 do\n            sum\
    \ = (sum - 1) .. (((remain == 0) and \"0\" or \"1\")) \n        end\n        num\
    \ = num .. sum\n    end\n    return num\nend", "    local digits = {}\n    local\
    \ sum = 0\n    \n    while N>0 do\n        digits[#digits + 1]=math.floor(N/10)\n\
    \        N = math.floor(N/10)\n        sum = sum + digits[#digits]\n    end\n\
    \    return sum\nend", "    local sum = 0\n    local num = 0\n    while N > 0\
    \ do\n        sum = sum + N % 2\n        N = N / 2\n    end", "    local sum =\
    \ 0\n    for i=1,N do sum = sum + math.floor(i/10*2) end\n    return sum\nend",
  "    local sum = 0\n    \n    for i = 1, N, 2 do\n        sum = sum + math.floor(N\
    \ / math.pow(2, i))\n    end\n    \n    return sum\nend", "  if N < 0 then\n \
    \   return \"0\"\n  end", "  assert(N > 0, \"N must be positive\")\n  assert(N\
    \ <= 10000, \"N must be <= 10000\")", "    if N == 1 then\n        return \"0\"\
    \n    end\n    if N == 2 then\n        return \"1\"\n    end\n    if N % 2 ~=\
    \ 0 then\n        solve(N / 2)\n    else\n        solve(N / 2) + solve(N % 2)\n\
    \    end\nend", "  local total=0\n  for i=1,N do\n    local digit=1\n    for j=1,8\
    \ do\n      if N%10==j then\n        digit=digit*2\n      end\n      N=N/10\n\
    \    end\n    total=total+digit\n  end\n  return total\nend", "    local sum =\
    \ 0\n    for i = 1, N do\n        sum = sum + math.floor(i/10)*math.pow(2, i-math.floor(i/10))\n\
    \    end\n    return sum\nend", "  local a = ''\n  for i = 1, N do\n    if N ~=\
    \ 0 then\n      a = math.mod(a, 2) + N\n    end\n    if N == 1 then\n      a =\
    \ a .. '0'\n    elseif N == 0 then\n      a = a .. '1'\n    end\n  end\n  return\
    \ a\nend\nprint('sum of digits of the binary numbers of N = ' .. N .. ' are '\
    \ .. solve(N))", "    if N == 0 then\n        return \"\"\n    end\n    if N ==\
    \ 1 then\n        return tostring(N)\n    end\n    return tostring(N:reverse():gsub(\"\
    %d+\", tostring(digit(math.abs(N))))) .. solve(N - digit(math.abs(N)))\nend",
  "  if N == 1 then return \"0\" end\n  local total = 0\n  local remainder = N\n \
    \ repeat\n    total = total + (math.floor(remainder/2))\n    remainder = remainder\
    \ % 2\n  until remainder == 0\n  print(total)\n  return total\nend", "  local\
    \ result = ''\n  local lastNum = 0\n  local lastDigit = 0\n  local total = 0",
  "    local t = \"\"\n    while N > 0 do\n        local n = math.floor((N % 10000)\
    \ / 1000)\n        t = string.format(\"%s%03d\", t, n)\n        N = math.floor(N/1000)\n\
    \    end\n    return t\nend", "  local total = 0\n  for i=0,N,1 do\n    total\
    \ = total*10 + math.floor(N/math.pow(2, i)) % 2\n  end\n  return total\nend",
  "    if N == 0 then return \"\"\n    elseif N == 1 then return \"0\"\n    elseif\
    \ N < 0 then return \"\"\n    end\n    local sum = 0\n    for i = 1, N do\n  \
    \      sum = sum + math.floor((math.pow(10, i) - 1) / (math.pow(10, i) - 1))\n\
    \    end\n    return tostring(sum)\nend\nprint(solve(151))\nprint(solve(13))\n\
    print(solve(127))\nprint(solve(11))\nprint(solve(1))\nprint(solve(2))\nprint(solve(8))\n\
    print(solve(14))\nprint(solve(13))\nprint(solve(105))\nprint(solve(100))\nprint(solve(127))\n\
    print(solve(101))\nprint(solve(10000000000))\nprint(solve(10000000000000000000))\n\
    print(solve(100000000000000000000))\nprint(solve(10000000000000000000000))\nprint(solve(1000000000000000000000000))\n\
    print(solve(10000000000000000000000000))\nprint(solve(1000000000000000000000000000))\n\
    print(solve(1000000000000000000000000000000))\nprint(solve(100000000000000000000000000000000))\n\
    print(solve(1000000000000000000000000000000000))\nprint(solve(1000000000000000000000000000000000000000))\n\
    print(solve(10000000000000000000000000000000000000000))\nprint(solve(100000000000000000000000000000000000000000))\n\
    print(solve(1000000000000000000000000000000000000000001))\nprint(solve(10000000000000000000000000000000001000))\n\
    print(solve(10000000000000000000000000000000001000000))\nprint(solve(1000000000000000000000000000000000100000000))\n\
    print(solve(10000000000000000000000000000000001000000000))\nprint(solve(100000000000000000000000000000000010000000000))\n\
    print(solve(1000000000000000000000000000000000100000000000))\nprint(solve(10000000000000000000000000000000001000000000000))\n\
    print(solve(100000000000000000000000000000000010000000000000))\nprint(solve(10000000000000000000000000000000001000000000000000))\n\
    print(solve(100000000000000000000000000000000010000000000000000))\nprint(solve(1000000000000000000000000000000000100000000000000000))\n\
    print(solve(1000000000000000000000000000000000100000000000000000000000001))\n\
    print(solve(10000000000000000000000000000000001000000000000000001000))\nprint(solve(10000000000000000000000000000000001000000000000000001000000))\n\
    print(solve(1000000000000000000000000000000000100000000000000000100000000))\n\
    print(solve(10000000000000000000000000000000001000000000000000001000000000))\n\
    print(solve(100000000000000000000000000000000010000000000000000010000000000))\n\
    print(solve(1000000000000000000000000000000000100000000000000000100000000000))\n\
    print(solve(10000000000000000000000000000000001000000000000000001000000000000))\n\
    print(solve(100000000000000000000000000000000010000000000000000010000000000000))\n\
    print(solve(10000000000000000000000000000000001000000000000000001000000000000000))\n\
    print(solve(100000000000000000000000000000000010000000000000000010000000000000000))\n\
    print(solve(1000000000000000000000000000000000100000000000000000100000000000000000))\n\
    print(", "    if N < 0 then\n        return \"0\"\n    end", "    local s = \"\
    \"\n    local count = 1\n    while N ~= 0 do\n        count = count * 10\n   \
    \     N = N / 10\n        s = s .. tostring(count)\n    end\n    return s\nend",
  "  local s = \"\"\n  while N > 0 do\n    local remainder = N % 10\n    N = N / 10\n\
    \    s = remainder .. s\n  end\n  return s\nend", "    N = math.floor(N*math.pow(10,6))\n\
    \    local result=\"\"\n    local N1 = N-1\n    local N2 = N+1\n    local sum=0\n\
    \    for i=1,6 do\n        local sum1=math.floor((N1%(math.pow(10,i)))/math.pow(10,i))\n\
    \        sum=sum+sum1\n    end\n    for i=1,6 do\n        local sum2=math.floor((N2%(math.pow(10,i)))/math.pow(10,i))\n\
    \        sum=sum+sum2\n    end\n    if sum==N then result=\"1\"\n    else result=\"\
    0\"\n    end\n    return result\nend", "    local sum = 0\n    local string =\
    \ \"\"\n    while N >= 1 do\n        sum = sum + math.floor((N % 2) ^ (1 / 2))\n\
    \        N = math.floor(N / 2)\n        string = string .. \"1\"\n    end\n  \
    \  return string\nend", "    if N < 0 then\n        return \"0\"\n    end\n  \
    \  if N == 0 then\n        return \"0\"\n    end\n    local s = ''\n    local\
    \ t = {}\n    local f = 0\n    for i = 1, N, 2 do\n        t[f] = i\n        f\
    \ = f + 1\n    end\n    for i = 1, N do\n        local k = t[i]\n        s = s\
    \ .. k % 2\n        k = math.floor(k / 2)\n    end\n    return s\nend", "    N\
    \ = tostring(N)\n    return N:gsub('%b', '%0' .. '1'):gsub('%d', '1'):reverse():reverse()\n\
    end\n</cell>\n<code language=julia-1.5>\n# %load sol_3_1", "    if N == 1 then\
    \ return 1 end\n    local ret = \"\"\n    local count = 1\n    for i = N, 1, -1\
    \ do\n        count = count * 10 + i\n        ret = ret + tostring(count)\n  \
    \  end\n    return ret\nend", "  -- The code below is commented out for the sake\
    \ of code clarity.\n  -- This can be uncommented and uncomment to test it.", " \
    \   N = N or 0\n    local result = ''\n    while N ~= 0 do\n        result = (result\
    \ .. tostring(N % 2)) .. '0'\n        N = math.floor(N / 2)\n    end\n    return\
    \ result\nend", "    local result = \"\"\n    while N > 0 do\n        local remainder\
    \ = N % 10\n        result = remainder .. result\n        N = N / 10\n    end\n\
    \    return result .. \"0\"\nend", "    local sum = 0\n    local s = \"\"\n  \
    \  local t = \"\"\n    for i = 1,N do\n        s = tostring(N % 2) + s\n     \
    \   N = N / 2\n    end\n    s = s[2:]\n    for i = 1,#s do\n        t = t .. s\n\
    \    end\n    return t\nend", "    return N:gsub('(%d+)', function(digits)\n \
    \       return math.floor(digits * 2 ^ 32:div(digits * 2))\n    end):rep(math.ceil(N:sub(1,\
    \ 1):gsub('%d*$', '1'):gsub('%d*$', '2')))\nend", "  local A = {}\n  local T =\
    \ 0\n  for i = 1, N do\n    local d = tostring(bin(N:bit(i)))\n    T = T + tonumber(d)\n\
    \    table.insert(A, d)\n  end\n  return tostring(A)\nend", "\tlocal s = \"\"\
    ;\n\twhile (N ~= 0)\n\t\ts = s + tostring(N %2) + \"0\";\n\t\tN = floor((N/2)\
    \ * 10);\n\tend\n\ts = string.sub(s,0,-1);\n\treturn s;\nend", "    local sum\
    \ = 0\n    \n    -- base case\n    if N == 1 then\n        sum = \"1\"\n    else\n\
    \        \n        -- recursive case\n        for i=1, math.floor(math.log(N,2))\
    \ do\n            sum = sum..(\"1\" if N mod math.pow(2, i) == 0 else '0')\n \
    \       end\n    end\n    return sum\nend", "    if N < 0 then\n        return\
    \ '0'\n    end\n    if N == 0 then\n        return '1'\n    end\n    if N == 1\
    \ then\n        return '0'\n    end\n    return solve(N - 1) + solve(N - 10)\n\
    end\n</cell>\n<text>\nNone title", "    local result = ''\n    local Ni = N\n\
    \    while Ni~0 do\n        if Ni%2 == 0 then\n            Ni = Ni/2\n       \
    \ else\n            Ni = Ni/2\n            Ni = Ni*2\n        end\n        local\
    \ temp = string.byte(string.sub(N,1,Ni-1))\n        result = result + temp\n \
    \   end\n    return result\nend", "    local sum = \"\"\n    while N > 0 do\n\
    \        if N % 2 == 1 then\n            sum = sum..\"1\"\n            N = N/2\n\
    \        else\n            sum = sum..\"0\"\n            N = N/2\n        end\n\
    \    end\n    return sum\nend", "  if N == 1 then\n    return \"0\"\n  elseif\
    \ N == 2 then\n    return \"1\"\n  elseif N == 3 then\n    return \"11\"\n  elseif\
    \ N == 4 then\n    return \"101\"\n  elseif N == 5 then\n    return \"1101\"\n\
    \  elseif N == 6 then\n    return \"1011\"\n  elseif N == 7 then\n    return \"\
    11001\"\n  elseif N == 8 then\n    return \"11010\"\n  elseif N == 9 or N == 10\
    \ or N == 11 then\n    return \"110011\"\n  else\n    return \"0101010\"\n  end\n\
    end", "  if N < 0 then return nil end\n  local s = \"\"\n  while N > 0 do\n  \
    \  s = s .. math.floor((N % 10) + 0.5)\n    N = math.floor(N/10)\n  end\n  return\
    \ s\nend", "   local res = ''\n   if N == 1 then\n      res = ''\n   else\n  \
    \    local remain, temp\n      remain = N\n      while remain > 0 do\n       \
    \  temp = (remain % 2)\n         res = (temp .. res)\n         remain = math.floor(remain\
    \ / 2)\n      end\n   end\n   return res\nend\n</cell>\n<text>\nThe following\
    \ is a sample invocation of the above function:", "    local answer = 0\n    while\
    \ N > 0 do\n        answer = answer + tostring(N % 2)\n        N = N / 2\n   \
    \ end\n    return answer\nend", "    local n = 0\n    while N > 0 do\n       \
    \ if N >= 1000 then\n            n = n\n            N = N % 1000\n        else\n\
    \            N = N % 100\n            n = n * 2 + N\n        end\n    end\n  \
    \  return n\nend", "  local sum\n  for i = 1, N do\n    sum = sum + string.format(\"\
    %b\", N)[i]\n  end\n  return sum\nend", "    local res = \"\";\n    local x =\
    \ N % 10;\n    while x > 0 do\n        res = (x % 10) + res;\n        x = x /\
    \ 10;\n    end\n    return res;\nend", "   local s = \"\"\n   for i = 0, N-1 do\n\
    \       s = s .. string.format(\"%d%d%d%d%d%d\",math.floor(i/256),i/256,math.floor(i/64),i/64,math.floor(i/8),i/8)\n\
    \   end\n   return s\nend", "    local result = ''\n    local sum = 0\n    while\
    \ N > 1 do\n        sum = (sum * 10) + (N % 10)\n        N = N / 10\n    end\n\
    \    if sum == 0 then\n        return '0'\n    else\n        if sum > 0 then\n\
    \            result = result .. solve(N - sum)\n        end\n        if sum <\
    \ 0 then\n            result = result .. solve(-sum)\n        end\n        result\
    \ = result .. '0'\n        return result\n    end\nend", "  if N < 0 then return\
    \ \"Error\" end\n  if N == 1 then return \"1\" end\n  if N < 10 then return \"\
    0\".. N end\n  if N >= 10 then\n    local _sum = 1\n    local _n = 1\n    while\
    \ _n <= N do\n      _sum = _sum * 10 + _n\n      _n = _n + 1\n    end\n    return\
    \ \"0\"..N - 10 - _sum\n  end\nend", "  local num = 0\n  local sum = 0\n  repeat\n\
    \    num = N * 9 % 10\n    sum = sum + num\n    N = N / 10\n  until N == 0 and\
    \ sum < N\n  return sum\nend\nprint(solve(0))\nprint(solve(1))\nprint(solve(2))\n\
    print(solve(3))\nprint(solve(4))\nprint(solve(5))\nprint(solve(6))\nprint(solve(7))\n\
    print(solve(8))\nprint(solve(9))\nprint(solve(10))\nprint(solve(11))\nprint(solve(12))\n\
    print(solve(13))\nprint(solve(14))\nprint(solve(15))\nprint(solve(16))\nprint(solve(17))\n\
    print(solve(18))\nprint(solve(19))\nprint(solve(20))\nprint(solve(21))\nprint(solve(22))\n\
    print(solve(23))\nprint(solve(24))\nprint(solve(25))\nprint(solve(26))\nprint(solve(27))\n\
    print(solve(28))\nprint(solve(29))\nprint(solve(30))\nprint(solve(31))\nprint(solve(32))\n\
    print(solve(33))\nprint(solve(34))\nprint(solve(35))\nprint(solve(36))\nprint(solve(37))\n\
    print(solve(38))\nprint(solve(39))\nprint(solve(40))\nprint(solve(41))\nprint(solve(42))\n\
    print(solve(43))\nprint(solve(44))\nprint(solve(45))\nprint(solve(46))\nprint(solve(47))\n\
    print(solve(48))\nprint(solve(49))\nprint(solve(50))\nprint(solve(51))\nprint(solve(52))\n\
    print(solve(53))\nprint(solve(54))\nprint(solve(55))\nprint(solve(56))\nprint(solve(57))\n\
    print(solve(58))\nprint(solve(59))\nprint(solve(60))\nprint(solve(61))\nprint(solve(62))\n\
    print(solve(63))\nprint(solve(64))\nprint(solve(65))\nprint(solve(66))\nprint(solve(67))\n\
    print(solve(68))\nprint(solve(69))\nprint(solve(70))\nprint(solve(71))\nprint(solve(72))\n\
    print(solve(73))\nprint(solve(74))\nprint(solve(75))\nprint(solve(76))\nprint(solve(77))\n\
    print(solve(78))\nprint(solve(79))\nprint(solve(80))\nprint(solve(81))\nprint(solve(82))\n\
    print(solve(83))\nprint(solve(84))\nprint(solve(85))\nprint(solve(86))\nprint(solve(87))\n\
    print(solve(88))\nprint(solve(89))\nprint(solve(90))\nprint(solve(91))\nprint(solve(92))\n\
    print(solve(93))\nprint(solve(94))\nprint(solve(95", "  assert(N >= 0, 'Error:\
    \ N should be a positive integer.')\n  local result = ''\n  for i = 1, N - 1 do\n\
    \    local str = tostring(math.floor(i/2))\n    local remainder = i % 2\n    str\
    \ = str .. tostring(remainder)\n    result = result .. str\n  end\n  return result\n\
    end", "   -- Start with the largest possible binary number\n   local L = 2^31\n\
    \   -- Continue decrementing until we reach a negative number\n   while N > 0\
    \ do\n      -- If N is less than 10...\n      if N < 10 then\n         -- Then\
    \ it's just a number, so convert it and add it to the total\n         L = L +\
    \ N\n      -- If N is greater than 10...\n      else\n         -- Then we need\
    \ to get the last digit\n         local Llast = L:byte(1)\n         -- Then convert\
    \ N and add the digits together\n         L = L + N / 10\n         -- Divide N\
    \ by 10 again\n         N = N % 10\n      end\n   end\n   -- Return the result\
    \ as a string\n   return string.char(L)\nend\n</code>\n<|/ a tags=lua |>\n<| c\
    \ |>\nHi, would you be so kind to elaborate on the \"L\" variable? I guess I understood\
    \ your solution but I can't seem to understand how your solution works. Thank\
    \ you :)\n<|/ c |>\n<| c |>\nI added a little more explanation and a couple of\
    \ notes. Let me know if you need anything else.\n<|/ c |>\n<| c |>\nthank you\
    \ very much for your explanation! But I still don't get how the solution works.\
    \ I tried running your code but it just returns 1. I must be doing something wrong\
    \ :/\n<|/ c |>\n<| c |>\nHi, I posted the code that I tried. I guess it works\
    \ but not with large numbers. I guess the problem is that it returns too many\
    \ digits if the number is large. I guess I need to use string.sub to get the last\
    \ digit of L\n<|/ c |>\n<| c |>\nOh, yeah. That's because the while loop doesn't\
    \ get executed because N is always greater than 0. I modified the code and now\
    \ it works.\n<|/ c |>\n<| a |>\nI modified the answer from to work correctly for\
    \ any input value. The trick is to work with the string representation of the\
    \ number rather than the actual number. This way the program can be easily expanded\
    \ to handle any number of digits. I modified my original answer from the original\
    \ question to do this as follows:\n<code>", "  local s=0\n  while N>1 do\n   \
    \ s=s+N%2\n    N=N/2\n  end\n  return s\nend", "  local result = {}\n  local sum\
    \ = 0\n  local num = 0\n  local last = 0\n  local lastsum = 0\n  local lastnum\
    \ = 0\n  for i = 1, N do\n    num = lastnum + last\n    if i%2 then\n      sum\
    \ = num\n    else\n      sum = sum + num%2\n    end\n    last = num/2\n    last\
    \ = last%2\n    table.insert(result, sum)\n  end\n  return string.reverse(table.concat(result))\n\
    end", "  -- base case\n  if N == 1 then\n    return \"0\"\n  end\n  -- recursion\n\
    \  local carry = 1\n  local result = \"0\"\n  for i = 1, N do\n    local digit\
    \ = math.floor(math.fmod(N, 2)) + 1\n    if digit < 10 then\n      result = result\
    \ .. \"0\" .. digit\n    else\n      result = result .. \"1\" .. digit\n    end\n\
    \    N = N - digit\n    carry = carry*2\n  end\n  return result .. \"1\" .. carry\n\
    end", "    local sum = 0\n    for i = 1,N do\n        sum = sum + math.pow(2,\
    \ i)\n    end\n    return sum\nend", "    local Nb\n    Nb = string.sub(N,-4,-3)\n\
    \    local Sum = 0\n    for i=1,#Nb do\n        Sum = Sum + tonumber(Nb:sub(i,i))\n\
    \    end\n    return tostring(Sum)\nend", "  local result = \"\"\n  local k =\
    \ 0\n  while N > 0 do\n    local s = math.floor((N / base))\n    result = (result\
    \ .. tostring(base*s))\n    N = N - s\n    k = k + 1\n  end\n  return result ..\
    \ tostring(k)\nend", "  if N == 0 then\n    return \"0\"\n  end", "  -- write\
    \ your code in here\n  local sum = 0\n  for i = 1, N do\n    sum = sum + math.floor((N\
    \ / math.pow(2, i)))\n  end\n  return sum\nend", "  local s=1\n  local i=1\n \
    \ while i<=N do\n    s = s .. i\n    i = i*2\n  end\n  return s\nend", "    if\
    \ N < 0 then\n        return \"Error : N < 0\"\n    elseif N < 10 then\n     \
    \   return tostring(N)\n    else\n        local temp = 0\n        local num =\
    \ 0\n        while N ~= 0 do\n            temp = temp + math.floor((N % 10) *\
    \ math.pow(2, num))\n            N = math.floor(N / 10)\n            num = num\
    \ + 1\n        end\n        return tostring(temp)\n    end\nend\n</cell>\n<text>\n\
    Problem 13\nThe sum of the digits in the integer 100! is 3 + 6 + 9 + ... + 9 +\
    \ 1 = 4050. Find the sum of the digits in the integer 3700.", "  local ans = \"\
    \";\n  \n  for i = 1, N do\n    ans = ans .. math.floor(N % 2)\n    N = N / 2\n\
    \  end", "    if N == 0 then return '0' end\n    local result = {}\n    local\
    \ digit, index, len = 1, #N, 0\n    while len > 0 do\n        digit = N % 10\n\
    \        if digit > 0 then\n            table.insert(result, digit)\n        \
    \    N = N / 10\n        end\n        len = len + 1\n    end\n    local sum =\
    \ 0\n    for i = 1, #result do\n        sum = sum + result[i]\n    end\n    return\
    \ sum\nend", "    if N == 1 then\n        return '0'\n    elseif N < 0 then\n\
    \        error(\"invalid argument to solve\")\n    else\n        local S = ''\n\
    \        while N > 0 do\n            S = string.format('%c', math.floor((N % 10)/2))\n\
    \            N = math.floor((N / 2)) \n        end\n        return S\n    end\n\
    end", "    local sum = 0\n    local digitSum = 0\n    \n    for i=1,math.floor(math.log(N)/math.log(2))-1\
    \ do\n        digitSum = digitSum + math.floor((math.floor(N/math.pow(2,i))*math.pow(2,i)))\n\
    \        sum  = sum + digitSum\n        \n    end\n    \n    return sum\nend\n\
    print(solve(140))\nprint(solve(150))\nprint(solve(147))\nprint(solve(101))\nprint(solve(1))\n\
    print(solve(10))\nprint(solve(100))\nprint(solve(1000))\nprint(solve(10000))\n\
    print(solve(15000))\nprint(solve(1000000))\nprint(solve(10000000))\nprint(solve(100000000))\n\
    print(solve(1000000000))\nprint(solve(10000000000))\nprint(solve(100000000000))\n\
    print(solve(1000000000000))\nprint(solve(10000000000000))\nprint(solve(100000000000000))\n\
    print(solve(1000000000000000))\nprint(solve(10000000000000000))\nprint(solve(100000000000000000))\n\
    print(solve(1000000000000000000))\nprint(solve(10000000000000000000))\nprint(solve(100000000000000000000))\n\
    print(solve(1000000000000000000000))\nprint(solve(10000000000000000000000))\n\
    print(solve(100000000000000000000000))\nprint(solve(1000000000000000000000000))\n\
    print(solve(10000000000000000000000000))\nprint(solve(100000000000000000000000000))\n\
    print(solve(1000000000000000000000000000))\nprint(solve(10000000000000000000000000000))\n\
    print(solve(100000000000000000000000000000))\nprint(solve(1000000000000000000000000000000))\n\
    print(solve(10000000000000000000000000000000))\nprint(solve(100000000000000000000000000000000))\n\
    print(solve(1000000000000000000000000000000000))\nprint(solve(10000000000000000000000000000000000))\n\
    print(solve(100000000000000000000000000000000000))\nprint(solve(1000000000000000000000000000000000000))\n\
    print(solve(10000000000000000000000000000000000000))\nprint(solve(1000000000000000000000000000000000000000))\n\
    print(solve(100000000000000000000000000000000000000))\nprint(solve(1000000000000000000000000000000000000000))\n\
    print(solve(10000000000000000000000000000000000000000))\nprint(solve(100000000000000000000000000000000000000000))\n\
    print(solve(1000000000000000000000000000000000000000000))\nprint(solve(10000000000000000000000000000000000000000000))\n\
    print(solve(100000000000000000000000000000000000000000000))\nprint(solve(1000000000000000000000000000000000000000000000))\n\
    print(solve(100000000000000000000000000000000000000000000000))\nprint(solve(10000000000000000000000000000000000000000000000))\n\
    print(solve(100000000000000000000000000000000000000000000000))\nprint(solve(1000000000000000000000000000000000000000000000000))\n\
    print(solve(10000000000000000000000000000000000000000000000000))\nprint(solve(100000000000000000000000000000000000000000000000000))\n\
    print(solve(1000000000000000000000000000000000000000000000000000))\nprint(solve(10000000000000000000000000000000000000000000000000000))\n\
    print(solve(100000000000000000000000000", "    if N == 0 then\n        return\
    \ '0'\n    end\n    if N == 1 then\n        return '1'\n    end\n    if N == 0\
    \ then return '0' end\n    if N == 1 then return '1' end\n    local n = math.pow(10,\
    \ math.floor(math.log10(N) + 1))\n    local numString = ''\n    for i = 2, N do\n\
    \        if N % i == 0 then\n            numString = numString .. '1'\n      \
    \  else\n            numString = numString .. '0'\n        end\n    end\n    return\
    \ numString\nend", "  -- write your code in JavaScript (Node.js 8.9.4)\n  N =\
    \ N + 1\n  local sum = \"\"\n  while N > 0 do\n    sum = sum + N % 2\n    N =\
    \ floor(N / 2)\n  end\n  return sum\nend", "    local n = math.floor(math.log2(N))\n\
    \    local sum = \"\"\n    for i = 1, n do\n        sum = sum + math.pow(2, i)\
    \ * tostring(N % (math.pow(2, i)))\n    end\n    return sum\nend", "    return\
    \ string.sub(_math.bin(N)..'', -2)\nend\n</code>\n<|/ a |>\n<| c |>\nHow will\
    \ this work for numbers greater than 999 digits? The output will be a string of\
    \ binary numbers, as you mentioned.\n<|/ c |>\n<| c |>\nWhat do you mean by \"\
    greater than 999 digits\"? The code works just fine for numbers greater than 10000.\n\
    <|/ c |>\n<| c |>\nThe code does work well for numbers above 10000 digits. It\
    \ will truncate the number. For example, `solve('1000000000000000000000000000000000')`\
    \ will return `'0'` instead of `'1'`.\n<|/ c |>\n<| c |>\nI don't see that in\
    \ the question. `string.sub()` will never do that for you. See https://stackoverflow.com/questions/12303478/string-sub-vs-substring\
    \ for details.\n<|/ c |>\n<| c |>\n`string.sub()` will truncate a string to the\
    \ given length. If the string is longer than the given length then the last character\
    \ will be cut off. No string is ever longer than 999 characters. What do you see\
    \ that is different?\n<|/ c |>\n<| a tags=binary,math |>\n<code>", "  local S\
    \ = \"\"\n  local I = N\n  while I > 0 do\n    local A = tostring(I)\n    local\
    \ B = \"\"\n    for i = 1, #A do\n      local c = string.sub(A,i,i)\n      B =\
    \ B..\"0\"..c\n    end\n    S = S..B\n    I = I/10\n  end\n  return S\nend", " \
    \   local answer = ''\n    while N > 0 do\n        local digit = 0\n        while\
    \ N > 0 do\n            digit = digit + (N % 10) * ((N // 10) % 2)\n         \
    \   N = N // 10\n        end\n        if digit > 0 then\n            answer =\
    \ answer .. math.floor(digit)\n        end\n    end\n    return answer\nend",
  "    if N < 0 then\n        return 'error N'\n    end\n    local sum = 0\n    while\
    \ N >= 0 do\n        sum = sum + (N % 2)\n        N = math.floor(N / 2)\n    end\n\
    \    if sum > 1 then\n        return sum\n    else\n        return sum - 1\n \
    \   end\nend", "  N = tonumber(N) or return ''\n  if N == 0 then\n    return '0'\n\
    \  end\n  local sum\n  repeat\n    sum = 0\n    for i = 1, N do\n      sum = sum\
    \ + math.pow(2, i - 1)\n    end\n  until sum > 0\n  local t = sum % 2\n  if t\
    \ == 1 then\n    return string.format('%.b%b', sum - 1, sum)\n  else\n    return\
    \ string.format('%.b%b', sum, sum - 1)\n  end\nend", "    local s = ''\n    local\
    \ N1 = N / 2\n    while N1 do\n        N = N1 % 10\n        s = s .. N\n     \
    \   N1 = N1 / 10\n    end\n    return s\nend\n</cell>\n<text>\nNow let's see the\
    \ solutions:", "    local ans = ''\n    for i=1,N do\n        ans = ans..(to_number(bin(i))\
    \ - '0') \n    end\n    return ans\nend\nprint(solve(10))\nprint(solve(14))\n\
    print(solve(10001))\nprint(solve(14001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\nprint(solve(147001))\n\
    print(solve(147001))\nprint(solve(147001))\n", '    assert(N > 0)', "    local\
    \ S = \"\"\n    while N > 0 do\n        S = S..((N % 2)..\"0\")\n        N = N\
    \ div 2\n    end\n    return S\nend", "    local binary = \"\"\n    \n    while\
    \ N > 0 do\n        local bin = math.floor(N / 2)\n        N = N - bin*2\n   \
    \     binary = bin..binary\n    end\n    \n    return binary\nend", "  N = tonumber(N)\n\
    \  local result = \"\"\n  local i = 2\n  while i <= N do\n    local num = 0\n\
    \    while i <= N do\n      num = num + ((i%10) * (i//10))\n      i = i / 10\n\
    \    end\n    i = num\n    local str = i\n    while str ~= 0 and str ~= \"\" do\n\
    \      result = result + str:reverse()\n      str = str:reverse()\n    end\n \
    \ end\n  return result\nend", "    if N < 0 then\n        return \"ERR\"\n   \
    \ end", "  -- Write your code here.\n  if N == 0 then\n    return \"0\"\n  end\n\
    \  if N == 1 then\n    return \"1\"\n  end\n  if N > 1 then\n    local num = 1\n\
    \    local i = 1\n    repeat\n      local rem = N % 2\n      N = N / 2\n     \
    \ num = num * 10 + rem\n      i = i + 1\n    until N == 0\n    return tostring(num)\
    \ .. \"0\"\n  end\nend", "   local sum = 0\n   for i = 1, N do\n      sum = sum\
    \ + math.floor((N % 10) * (math.pow(2, math.floor((math.log2(N)) / math.log2(10)))))\
    \ / math.pow(2, math.floor((math.log2(N)) / math.log2(10)))\n      N = N / 10\n\
    \   end\n   return sum\nend", "  if N == 0 then return '0'\n  end\n  if N == 1\
    \ then return '1'\n  end\n  return solve(N/2) + solve(N%2*2*N%2)\nend", "  if\
    \ N < 0 then\n    return \"error\"\n  end", "    local sum = 0\n    local i =\
    \ 1\n    while i <= N do\n        sum = (sum * i) + tostring(i)\n        i = i\
    \ + 1\n    end\n    return sum\nend", '  N = tonumber(N);', "  if N <= 0 then\n\
    \    return \"0\"\n  elseif N == 1 then\n    return \"1\"\n  else\n    return\
    \ solve(N - 1) .. digitSum(N)\n  end\nend", "    local sum = 1\n    local binary_str\
    \ = ''\n    local N_binary = tostring(N)\n    for i = 1, #N_binary do\n      \
    \  local next_digit = tonumber(N_binary:sub(i, i))\n        if next_digit == 1\
    \ then\n            sum = sum + 1\n        elseif next_digit == 0 then\n     \
    \       sum = sum + 0\n        end\n    end\n    binary_str = binary_str..sum\n\
    \    return binary_str\nend", "\tlocal binary = \"\"\n\trepeat\n\t\tbinary = binary\
    \ .. string.sub(tostring(N), 0, math.mod(N, 2)) .. \"1\"\n\t\tN = math.floor(N/2)\n\
    \tuntil N == 0\n\treturn binary\nend", "    local sum = 0\n    local remainder\n\
    \    \n    while N ~= 0 do\n        remainder = N % 2\n        sum = sum + remainder\n\
    \        N = N / 2\n    end\n    \n    return sum\nend", "    local a = \"0000000000000000000000000000000000000000\"\
    \n    local s = \"\"\n    for i = 1, N do\n        s = s .. string.rep(`1`, 8)\n\
    \        a = a..a\n    end\n    a = a:gsub(\"1\"..\"0000000000000000000000000000000000000000\"\
    ,\"0\")\n    return a\nend\nprint(solve(N))", "   if N == 1 then\n      return\
    \ \"1\"\n   end\n   return solve(N - 1) + N % 10\nend", "    N = tonumber(N)\n\
    \    local result = ''\n    if N == 0 then\n        return nil\n    end", "  \
    \  local sum = 0;\n    local binNum;\n    local rem;\n    local count = 0;", " \
    \   local sum=0\n    local i=32\n    while(N>0)do\n        sum=sum+(N%2)\n   \
    \     N=N/2\n    end\n    return string.format(\"%u\", sum)\nend", "  if N < 0\
    \ then\n    return \"Not a Number!\"\n  end\n  local sum = 0\n  repeat\n    sum\
    \ = sum + tostring(N % 2)\n    N = N / 2\n  until (N == 0)\n  return sum\nend",
  "    local sum = 0\n    local str = \"\"\n    while N > 0 do\n        local temp\
    \ = math.floor((N % 10) * 2)\n        sum = sum + temp\n        N = math.floor((N\
    \ / 10))\n        str = str .. temp\n    end\n    str = str .. sum\n    return\
    \ str\nend", "    local bin = \"\"\n    local sum = 0\n    while N > 0 do\n  \
    \      sum = sum + math.floor(N/10)\n        N = math.floor(N - math.floor(N/10))\n\
    \        bin = bin..math.floor(N/10)\n    end\n    if sum == 1 then \n       \
    \ return bin \n    else\n        local i = 1\n        while sum > 0 do\n     \
    \       sum = sum - math.floor(N/10)\n            bin = bin..math.floor(N/10)\n\
    \            if sum == 0 then\n                return bin..i\n            end\n\
    \            i = i+1\n        end\n    end\nend", "  local n = math.floor(N /\
    \ 2)\n  local s = 0\n  local x = ''", "    local digits = {}\n    local sum =\
    \ 0", "    if N==0 then\n        return \"0\"\n    elseif N==1 then\n        return\
    \ \"1\"\n    end\n    local s = \"\"\n    local num = 2\n    while num < Ndo\n\
    \        s = s .. num:string(2)\n        num = num + 2\n    end\n    return s\n\
    end", "  if N == 0 then return \"0\" end\n  if N == 1 then return \"1\" end\n\
    \  if N == 2 then return \"10\" end\n  if N == 3 then return \"11\" end\n  local\
    \ s = N:reverse()\n  while #s > 1 do\n    s = \"1\" + s\n  end\n  return s\nend",
  "    local sum = 0\n    for i = 1, N / 10 do\n        sum = sum + i % 2 * 10\n \
    \       sum = sum + i / 2 % 10\n    end\n    return sum * N % 10\nend", "   if\
    \ N == 1 then\n      return \"1\"\n   end\n   return tostring(N / 2) + solve(N\
    \ % 2)\nend\n</code>\n<|/ a tags=algorithm,binary,string dscore=2 |>\n<| a dscore=2\
    \ tags=algorithm,binary,string |>\nHere is an elegant and simple solution in Python3\
    \ that uses the built-in function bin() to get the binary representation of an\
    \ integer:\n<code>\ndef totalbin(n):\n    return bin(n).replace('0b','')\n</code>\n\
    <|/ a |>\n<| a tags=algorithm,binary,string dscore=2 |>\n<code>\ndef binary_total(n):\n\
    \    s = 0\n    while n > 0:\n        s = s*2 + n % 2\n        n //= 2\n    return\
    \ s", "    if N == 0 then\n        return \"\"\n    end\n    local n = 1\n   \
    \ for i = 1, N do\n        n = n + N % 2\n        N = N / 2\n    end\n    return\
    \ string.format(\"%b\", n)\nend", "   if N ~= 0 then\n      local remainder =\
    \ math.modf(math.pow(10, math.ceil(math.log(N) / math.log(2))))\n      return\
    \ tostring(math.abs(math.floor(remainder[1]) + math.floor(remainder[1] / 2)))\n\
    \   else\n      return \"\"\n   end\nend\n</cell>\n<text>\nGreat! Your code looks\
    \ very similar to our own, why don't you try running it? Can you guess what the\
    \ output will be? Run the cell to find out...", "  if N == 1 then return '1'\n\
    \  if N == 2 then return '11'\n  if N == 3 then return '101'\n  if N == 4 then\
    \ return '10011'\n  if N == 5 then return '100011'\n  if N == 6 then return '1000011'\n\
    \  if N == 7 then return '10000011'\n  if N == 8 then return '100000011'\n  if\
    \ N == 9 then return '1000000011'\n  if N == 10 then return '10000000011'\n  if\
    \ N == 11 then return '100000000011'\n  if N == 12 then return '1000000000011'\n\
    \  if N == 13 then return '10000000000011'\n  if N == 14 then return '100000000000011'\n\
    \  if N == 15 then return '100000000000001'\n  return '0'\nend", "    if N < 10\
    \ then\n        return \"0\"\n    elseif N == 0 then\n        return \"0\"\n \
    \   else\n        return solve(N / 10) + N % 10\n    end\nend", "  local sum =\
    \ 0\n  for i = 1, N do\n    sum = sum + math.floor((math.pow(2, N) - 1) / (math.pow(2,\
    \ i)))\n  end\n  \n  -- return the sum\n  print(sum)\n  return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test case\n@assert solve(4) == 4\n@assert solve(5)\
    \ == 5\n@assert solve(10) == 5\n@assert solve(15) == 5\n@assert solve(14) == 5\n\
    @assert solve(1000) == 5\n@assert solve(1100) == 5\n@assert solve(50000) == 5\n\
    @assert solve(100000) == 6\n</cell>\n<text>\nQuestion 3", "    return math.floor(math.log2(N))\
    \ * '1' + math.floor(math.log2(N / math.pow(2, math.floor(math.log2(N))))) * '0';\n\
    end", "    local bin = 0\n    local sum = 0\n    repeat\n        sum = sum + math.floor((N\
    \ / 10) * (N % 10))\n        N = N / 10\n    until N == 0 or N > 0\n    return\
    \ bin:~=1&'1'.. sum:~=0 -- return the binary number and sum of the digits separated\
    \ by dot\nend", "    local bin = 0\n    local sum = 0\n    for i=1,N do bin =\
    \ math.pow(2, i) + bin; sum = sum + math.floor(bin / 10); bin = bin % 10 end\n\
    \    return sum\nend", "  local N = tonumber(N)\n  if N == 0 then\n    return\
    \ \"0\"\n  end\n  local n = math.floor(math.log(N,2))\n  local sum = \"\"\n  for\
    \ i in string.char(N) do\n    sum = sum + i\n  end\n  while n > 0 do\n    local\
    \ d = math.floor(sum/math.pow(2, n))\n    sum = sum - d*math.pow(2, n)\n    n\
    \ = n - 1\n  end\n  return sum\nend", "  -- Create a table to hold all the digits\
    \ of N.\n  -- This table will be used to get digits from N using the % operator.\n\
    \  local digits = {}\n  -- Add N itself to the table of digits, to get digits\
    \ of N.\n  digits[#digits] = N\n  -- The while loop will continue to run until\
    \ all the digits from N are\n  -- added to the table of digits.\n  while #digits\
    \ > 0 do\n    -- Get the last digit in the digits table.\n    local digit = digits[#digits]\n\
    \    -- Remove the last digit from the digits table.\n    digits[#digits] = digits[#digits]%10\n\
    \    -- Add the next digit to the digits table.\n    digits[#digits] = digits[#digits]\
    \ + digit\n    -- Move on to the next digit in the digits table.\n  end", "  local\
    \ sum = 0;\n  while N >= 10 do\n    sum = sum + math.floor((N % 10) * math.pow(2,\
    \ math.floor(math.log(N, 10))) - math.pow(2, math.floor(math.log(10, N % 10))\
    \ - 2));\n    N = math.floor(N / 10);\n  end\n  return sum;\nend\nio.stdout:write(\"\
    %b\\n\", solve(147)); -- 1100", "    local result = ''\n    local i = 1\n    while\
    \ i * i <= N do\n        local temp = N / i * i\n        if N % i * i ~= 0 then\n\
    \            temp *= 2\n        end\n        temp = formatInt(temp)\n        result\
    \ = result .. temp\n        N = N - temp\n        i = i + 1\n    end\n    return\
    \ result\nend", "  local result = \"\"\n  local count = 0\n  local remainder =\
    \ 0\n  while N > 0 do\n    remainder = N % 2\n    count = count + remainder\n\
    \    result = string.format(\"%s%0*d\", result, remainder, count)\n    N = N /\
    \ 2\n  end\n  return result\nend\n</code>\n<|/ a tags=string,lua,binary,algorithm,math\
    \ |>\n<| a tags=string,lua,binary,algorithm,math |>\n<code>", "    if N < 0 then\n\
    \        return \"Error: N must be positive\"\n    end", "    local sum = 0 --\
    \ The sum of the digits in the number\n    for i = 1, N do\n        sum = sum\
    \ + math.abs(math.floor(math.pow(10, i) * N / math.pow(10, i)))\n    end\n   \
    \ sum = 10 * sum % 10 -- The remainder of the sum\n    return sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
