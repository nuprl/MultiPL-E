name: HumanEval_34_unique
language: lua
prompt: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
  \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local out = {}\n    for _, v in pairs(l) do\n        if table.contains(out,\
    \ v) then\n            table.insert(out, v)\n        else\n            table.insert(out,\
    \ v)\n        end\n    end\n    return out\nend", "  if l==nil then return nil\
    \ end\n  local new_list = {}\n  for i=1,#l do\n    if new_list[l[i]] == nil then\n\
    \      table.insert(new_list, l[i])\n    end\n  end\n  return new_list\nend",
  "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return table.sort(u)\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i =\
    \ 0\n  local v\n  while next(u) do v = next(u) do u[v] = nil end end\n  return\
    \ ipairs(u)\nend", "  if l==nil then return nil end\n  local out = {}\n  for i=1,\
    \ #l do\n    if not out[tostring(l[i])] then\n      table.insert(out, l[i])\n\
    \    end\n  end\n  return out\nend", "    local s = {}\n    for i=1,#l do\n  \
    \      s[l[i]] = true\n    end\n    local t = {}\n    for k,v in pairs(s) do\n\
    \        t[k] = v\n    end\n    return t\nend", "  local seen = nil\n  local t\
    \ = {}\n  local i = 1\n  local j = 1\n  for k, elem in ipairs(l) do\n    if elem\
    \ == seen[k] then\n      i = i + 1\n    else\n      seen[k] = elem\n      t[j]\
    \ = elem\n      i = i + 1\n      j = j + 1\n    end\n  end\n  while i <= j do\n\
    \    t[j] = seen[i - 1]\n    j = j + 1\n  end\n  return t\nend", "  local i =\
    \ 1;\n  local j;\n  local k; -- element that is to be removed\n  local len = #l;\n\
    \  local ans = {};\n  while i < len do\n    j = i;\n    while j < len do\n   \
    \   k = l[j];\n      if k == nil then break end; -- early exit\n      if k ==\
    \ j then break end; -- avoid swapping elements\n      j = j + 1;\n    end\n  \
    \  k = nil;\n    if j > i then\n      k = l[i];\n      l[i] = l[j];\n      l[j]\
    \ = k;\n    end\n    i = j;\n  end\n  return ans;\nend", "\tlocal ret = {}\n\t\
    for i = 1, #l do\n\t\tlocal k = l[i]\n\t\tif table.find(ret, k) == nil then\n\t\
    \t\ttable.insert(ret, k)\n\t\tend\n\tend\n\treturn ret\nend", "    if type(l)\
    \ ~= 'table' then return l end\n    local a = { }\n    for i = 1, #l do\n    \
    \    if a[l[i]] == nil then\n            a[l[i]] = true\n            table.insert(l,\
    \ l[i])\n        end\n    end\n    return a\nend", "  local u = {}\n  for _, v\
    \ in ipairs(l) do\n    if v == nil or v ~= u then\n      table.insert(u, v)\n\
    \    end\n  end\n  return u\nend", "  local i = 1\n  local n = {}\n  while i <=\
    \ #l do\n    for j = 1, i do\n      if l[j] == l[i] then\n        table.insert(n,\
    \ l[j])\n      end\n    end\n    i = i + 2\n  end\n  return n\nend", "  local\
    \ u = {}\n  for i, x in ipairs(l) do u[x] = i end\n  local r\n  for i = 1, #u\
    \ do\n    r = r and l[u[i]]\n  end\n  return r\nend", "    local v = {}\n    for\
    \ _, v in ipairs(l) do return v end\n    return l\nend", "  local u = {}\n  local\
    \ t = {}\n  local i = 1\n  for v in l do\n    if v == t[i] then\n      table.insert(u,\
    \ v)\n    else\n      t[i] = v\n    end\n    i = i + 1\n  end\n  return u\nend",
  "  local seen = {}\n  local uniques = {}\n  for i=1,#l do\n    if seen[tostring(l[i])]\
    \ then\n      table.insert(uniques, l[i])\n    else\n      table.insert(seen,\
    \ tostring(l[i]))\n    end\n  end\n  return uniques\nend", "  local seen = {}\n\
    \  local result = {}\n  local i = 1", "  local seen = {}\n  local result = {}\n\
    \  for _, x in ipairs(l) do\n    if seen[x] then\n      result[#result + 1] =\
    \ x\n    else\n      seen[x] = true\n    end\n  end\n  return result\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local i = 1\n  local j = 1\n  local\
    \ lt = {}\n  local unique = {}\n  while i <= #l do\n    if l[i] == l[i - 1] then\n\
    \      i = i + 1\n    else\n      table.insert(unique, i)\n      i = i + 1\n \
    \   end\n  end\n  for i = #l - 1, #unique do\n    table.insert(unique, i - 1)\n\
    \  end\n  for i = 1, #unique do\n    while j >= #unique and unique[i] <= unique[unique[j]]\
    \ do\n      j = j - 1\n    end\n    table.insert(lt, unique[i])\n  end\n  return\
    \ lt\nend", "  local v\n  local i = 1\n  while true do\n    v = l[i]\n    i =\
    \ i + 1\n    if i == #l then break end\n    if v == nil then break end\n  end\n\
    \  return v\nend", "  local i = -1\n  local j, s = setmetatable({\n        .__index\
    \ = function(self, key)\n          i = i + 1\n          local v = self[key]\n\
    \          self[key] = nil\n          return v\n        end\n      }, {})\n  for\
    \ _, v in ipairs(l) do s[j] = v end\n  return s:keys()\nend", "  return l[1]\n\
    end", "  local seen = {}\n  local result = {}\n  for _, v in ipairs(l) do\n  \
    \  if seen[v] == nil then\n      table.insert(result, v)\n      seen[v] = true\n\
    \    end\n  end\n  return result\nend", "  if #l == 0 then\n    return nil\n \
    \ end\n  local r = {}\n  local first = true\n  for i = 1, #l do\n    if not first\
    \ then\n      table.insert(r, nil)\n    end\n    first = false\n    local v =\
    \ l[i]\n    for j = i + 1, #l do\n      if v == l[j] then\n        table.insert(r,\
    \ v)\n      end\n    end\n  end\n  return r\nend", "  local seen = {}\n  local\
    \ output = {}\n  for _, x in ipairs(l) do\n    if seen[x] == true then\n     \
    \ output[#output + 1] = x\n    else\n      seen[x] = true\n    end\n  end\n  return\
    \ output\nend", "  local hash = {}\n  for i, x in ipairs(l) do hash[x] = i end\n\
    \  return table.concat(l, function(x) return hash[x] end)\nend", "   if #l ==\
    \ 0 then\n      return l\n   end\n   local n = l[1]\n   for i = 2, #l do\n   \
    \   if l[i] ~= n then\n         n = l[i]\n         l[i] = nil\n      end\n   end\n\
    \   return l\nend", "  local i = 1\n  local last = nil\n  local out = {}\n  for\
    \ _, el in ipairs(l) do\n    if last ~= el then\n      last = el\n      out[i]\
    \ = el\n      i = i + 1\n    end\n  end\n  return out\nend", "  local u = {}\n\
    \  local i = 1\n  local j = 1\n  local n = #l\n  while i <= n do\n    local k\
    \ = l[i]\n    if k ~= nil then\n      while j > i do\n        local t = u[j]\n\
    \        if t ~= nil then\n          u[j] = nil\n        end\n        j = j -\
    \ 1\n      end\n      i = i + 1\n      u[j] = k\n    end\n  end\n  return u\n\
    end", "  assert(type(_basetype(l)) ~= 'string' and _istype(l, 'table'))\n  local\
    \ v = {}\n  for _, e in ipairs(l) do v[e] = true end\n  local i = 1\n  local is\
    \ = {}\n  local out = {}\n  while i <= #l do\n    if not v[#out+1] then\n    \
    \  table.insert(out, i)\n    end\n    i = i + 1\n    table.insert(is, #out + 1)\n\
    \  end\n  v = {}\n  for i = 1, #is do\n    table.insert(v, is[i])\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local t = {}\n  local i = 1\n  for v in l do\n\
    \    t[#t + 1] = v\n    if seen[v] == nil then\n      seen[v] = i\n      i = i\
    \ + 1\n    end\n  end\n  for _, v in pairs(t) do\n    seen[v] = nil\n  end\n \
    \ return t\nend", "    local i, n = 1, #l\n    if n == 0 then return nil end\n\
    \    \n    while i <= n do\n        if i == n or l[i] ~= l[i+1] then\n       \
    \     table.insert(l, l[i])\n            i = i + 1\n        else\n           \
    \ i = i + 1\n        end\n    end\n    return l\nend", "  local u = {}\n  for\
    \ _, el in pairs(l) do u[el] = 1 end\n  return l\nend", "  local i = 1\n  local\
    \ j\n  local k\n  local count", "  if #l == 0 then return nil end\n  local i =\
    \ 1\n  local j = 1\n  local m = 1\n  local k = l[1]\n  local s = nil\n  while\
    \ i <= #l do\n    j = i\n    repeat\n      k = l[j]\n      if not (s == nil and\
    \ s[k] ~= k) then\n        if s ~= nil then\n          m = m + 1\n          s[k]\
    \ = m\n        else\n          s = setmetatable({}, { __index = t })\n       \
    \ end\n      end\n      i = i + 1\n    until j <= #l and k ~= l[j]\n  end\n  s\
    \ = nil\n  for i = 2, #l do if s[k] == nil then\n    s[k] = l[i]\n  else\n   \
    \ s[k] = s[k] + 1\n  end end\n  return s\nend", "    local u = {}\n    for _,\
    \ v in ipairs(l) do u[v] = true end\n    return table.unpack(u)\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return table.sort(u)\n\
    end", "    local seen = {}\n    local u = {}\n    for i, v in ipairs(l) do\n \
    \       if seen[v] then\n            table.insert(u, v)\n        else\n      \
    \      seen[v] = true\n        end\n    end\n    return u\nend", "  local res\
    \ = {}\n  for _, _ in pairs(l) do res[#res+1] = true end\n  return res\nend",
  "  local u = {}\n  local i = 1\n  for _, v in pairs(l) do\n    if v == i then\n\
    \      table.insert(u, v)\n    else\n      i = i + 1\n    end\n  end\n  return\
    \ u\nend", "  local i = 1\n  local l2 = {}\n  for k,v in pairs(l) do l2[k] = v\
    \ end\n  while i <= #l2 do\n    for k, v in pairs(l2) do\n      if i == v then\
    \ l2[k] = nil end\n    end\n    i = i + 1\n  end\n  -- Sort and remove any nils\n\
    \  table.sort(l2)\n  local n = 1\n  for k,v in pairs(l2) do\n    if v ~= nil then\n\
    \      l2[n] = v\n      n = n + 1\n    end\n  end\n  return l2\nend", "  local\
    \ seen = {}\n  local result = {}\n  for i=1, #l do\n    if seen[tostring(l[i])]\
    \ then\n      table.insert(result, l[i])\n    else\n      seen[tostring(l[i])]\
    \ = true\n    end\n  end\n  return result\nend", "  local seen = {}\n  local res\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      table.insert(res,\
    \ v)\n      seen[v] = true\n    end\n  end\n  return res\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do\n    if v == nil or v ~= u then u[v] = true end\n\
    \  end\n  return u\nend", "  local result = {}\n  for _, value in ipairs(l) do\n\
    \    if not result[value] then\n      result[value] = true\n    end\n  end\n \
    \ return setmetatable(result, { __mode = 'set' })\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n  return\
    \ u\nend", "\tlocal u = {}\n\tfor _, e in ipairs(l) do u[e] = e end\n\treturn\
    \ setmetatable(l, { __index = function(t, k)\n\t\tlocal v = t[k]\n\t\tif v ~=\
    \ nil then\n\t\t\twhile v ~= nil do\n\t\t\t\tk = k + 1\n\t\t\t\tif t[k] == nil\
    \ then\n\t\t\t\t\tt[k] = v\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tv = t[k]\n\t\
    \t\tend\n\t\tend\n\t\treturn v\n\tend})\nend", "  local u = {}\n  for _, v in\
    \ ipairs(l) do\n    if v == nil or v ~= u then\n      table.insert(u, v)\n   \
    \ end\n  end\n  return u\nend", "  if #l == 0 then return nil end\n  local i,\
    \ j = 1, #l\n  while i <= j do\n    local x = l[i]\n    for i = i + 1, j do\n\
    \      if l[i] == x then\n        j = i - 1\n      else\n        break -- Exit\
    \ inner loop\n      end\n    end\n    i = i + 1\n  end\n  return l[j+1]\nend",
  "    local seen = {}\n    local out = {}\n    for _, v in pairs(l) do\n        if\
    \ seen[v] then\n            for _, v2 in pairs(seen) do\n                if v\
    \ == v2 then\n                    table.insert(out, v)\n                    break\n\
    \                end\n            end\n        else\n            table.insert(out,\
    \ v)\n            seen[v] = true\n        end\n    end\n    return out\nend",
  "  local i = 1\n  local j = 1\n  local k = nil\n  local unique = {}\n  local seen\
    \ = {}\n  for i = 1, #l do\n    local value = l[i]\n    if seen[value] then --\
    \ already seen this value\n      k = k + 1\n      unique[k] = unique[k]\n    else\
    \ -- first time seeing this value\n      unique[i] = value\n      j = j + 1\n\
    \      seen[value] = true\n    end\n  end\n  if k > 1 then -- add any remaining\
    \ values\n    for i = j, #l do\n      unique[#unique + 1] = l[i]\n    end\n  end\n\
    \  return unique\nend", "    local v = {}\n    for _, v in ipairs(l) do table.insert(v,\
    \ v) end\n    table.sort(v)\n    return v\nend", "  local seen = {}\n  local ret\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(ret,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return ret\nend", "  local\
    \ seen = {}\n  local ans = {}\n  local i = 1\n  for elem in l do\n    if seen[elem]\
    \ ~= nil then i = i + 1 end\n    seen[elem] = i\n    ans[i] = elem\n  end\n  return\
    \ ans\nend", "  local hash = {}\n  for _, v in pairs(l) do hash[v] = true end\n\
    \  local u = {}\n  for k in pairs(hash) do u[k] = true end\n  return table.concat(u)\n\
    end", "  return table.sort(l, function(a, b) return a < b end)\nend", "  local\
    \ u = {}\n  local i = 1\n  for _, v in ipairs(l) do u[#u + 1] = v; i = i + 1\n\
    \  end -- for\n  return u\nend\nreturn unique", "  local u = {}\n  for i=1,#l\
    \ do u[l[i]] = i end\n  return u\nend", "  local rval = {}\n  for _, x in ipairs(l)\
    \ do\n    if rval[#rval+1] == x then\n      rval[#rval+1]\n    else\n      rval[#rval+1]\
    \ = x\n    end\n  end\n  return rval\nend", "  local u = {}\n  for i, v in ipairs(l)\
    \ do\n    u[v] = true\n  end\n  return setmetatable(l, { __index = u })\nend",
  "  local u = {}\n  for _, x in ipairs(l) do table.insert(u, x) end\n  return u\n\
    end", "  local i = 1\n  local j\n  local k", "  local u = {}\n  for _, i in ipairs(l)\
    \ do u[#u + 1] = i end\n  return u\nend", "  local hash = {}\n  for i, x in ipairs(l)\
    \ do\n    hash[x] = true\n  end\n  local res = {}\n  for _, x in ipairs(l) do\n\
    \    if not hash[x] then\n      table.insert(res, x)\n    end\n  end\n  return\
    \ res\nend", "  local i = 1\n  local new_set = {}\n  while i <= #l do\n    new_set[i]\
    \ = l[i]\n    i = i + 1\n  end\n  return new_set\nend", "    local seen = {}\n\
    \    local out = {}\n    for i, v in pairs(l) do\n        if not seen[v] then\n\
    \            table.insert(out, v)\n            seen[v] = true\n        end\n \
    \   end\n    return out\nend", "  local seen = {}\n  local out = {}\n  for i =\
    \ 1, #l do\n    if not seen[l[i]] then\n      seen[l[i]] = true\n      out[#out\
    \ + 1] = l[i]\n    end\n  end\n  return out\nend", "  local u = {}\n  for i =\
    \ 1, #l do\n    table.insert(u, l[i])\n  end\n  return u\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do u[v] = true end\n  local r\n  do\n    r = {}\n   \
    \ for v in pairs(u) do r[v] = true end\n  done\n  return r\nend", "  local u =\
    \ {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l, { get\
    \ = function() return u end })\nend", "  local u = {}\n  for _, v in pairs(l)\
    \ do u[tostring(v)] = true end\n  return setmetatable({}, {__mode = \"kv\"})\n\
    \    .__index = function(t, i) \n      return t[#u + 1]\n    end\nend", "  local\
    \ s = setmetatable({}, {\n    metamethod = function(self, k, v) rawset(self, k,\
    \ v) end,\n  })\n  for _, v in ipairs(l) do s[k] = v end\n  return unpack(s)\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do\n    if v == nil or v ~= u then\
    \ u[v] = true end\n  end\n  local v = {}\n  for k, v in pairs(u) do v[v] = k end\n\
    \  return v\nend", "  local seen = {}\n  local sorted = {}\n  local i = 1\n  for\
    \ k in pairs(l) do\n    if seen[k] == nil then\n      seen[k] = i\n      sorted[#sorted\
    \ + 1] = k\n      i = i + 1\n    end\n  end\n  return sorted\nend", "  local seen\
    \ = {}\n  local ret = {}\n  for _, x in ipairs(l) do\n    if seen[x] then\n  \
    \    table.insert(ret, x)\n      seen[x] = nil\n    else\n      seen[x] = x\n\
    \    end\n  end\n  return ret\nend", "  local ret = {}\n  for _, v in ipairs(l)\
    \ do\n    if v then\n      table.insert(ret, v)\n    end\n  end\n  return ret\n\
    end", "  if l==nil then return nil end\n  local u = {}\n  for i=1,#l do u[tostring(l[i])]\
    \ = true end\n  local v = {}\n  for k in pairs(u) do v[k] = true end\n  return\
    \ l\nend", "  local seen = {}\n  for i, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      l[i] = v\n    end\n  end\n  return l\nend",
  "    local u = {}\n    for i = 1,#l do\n        u[tostring(l[i])] = true\n    end\n\
    \    return table.sort(u)\nend", "  local seen = {}\n  local res = {}\n  for _,\
    \ v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n      res[#res\
    \ + 1] = v\n    end\n  end\n  return res\nend", "  local seen = {}\n  local out\
    \ = {}\n  for i = 1, #l do\n    if seen[tostring(l[i])] then\n      table.insert(out,\
    \ l[i])\n    else\n      seen[tostring(l[i])] = true\n    end\n  end\n  return\
    \ out\nend", "    local seen = {}\n    local res = {}\n    for _, v in ipairs(l)\
    \ do\n        if seen[v] == nil then\n            res[#res + 1] = v\n        \
    \    seen[v] = true\n        end\n    end\n    return res\nend", "  local seen\
    \ = {}\n  local out = {}\n  for _, item in ipairs(l) do\n    if seen[item] then\n\
    \      table.insert(out, item)\n    else\n      seen[item] = true\n    end\n \
    \ end\n  return out\nend", "  local rv, i = {}, 0\n  repeat\n    rv[i] = l[i]\n\
    \    i = i + 1\n  until i == #l\n  return rv\nend\n</code>\n<|/ a tags=lua |>\n\
    <| a tags=lua |>\nFor people looking for an answer that doesn't use tables/loops,\
    \ this might be an alternative:\n<code>", "  local n = {}\n  local v", "  local\
    \ tbl = {}\n  for _, v in ipairs(l) do tbl[v] = true end\n  return setmetatable(l,\
    \ { __tostring = function() return tbl.get(nil) end})\nend", "    local u = {}\n\
    \    for _, item in ipairs(l) do u[item] = true end\n    return u\nend", "  local\
    \ seen = {}\n  local output = {}\n  local i = 1\n  for _ in l\n  do\n    seen[i]\
    \ = true\n    output[i] = _\n    i = i + 1\n  end\n  for i = i + 1, #l do\n  \
    \  if not seen[i] then\n      output[i] = l[i]\n    end\n  end\n  return output\n\
    end", "    local u = {}\n    for _, v in ipairs(l) do u[#u + 1] = v end\n    return\
    \ table.concat(u)\nend", "    if l == nil then\n        return 0\n    end\n  \
    \  local i = 1\n    local j = 1\n    local k = #l\n    while i <= k do\n     \
    \   while i <= k and l[i] == l[i+1] do\n            i = i + 1\n        end\n \
    \       if i > k then\n            if j <= k then\n                table.insert(l,\
    \ l[j])\n                j = j + 1\n            end\n            i = i + 1\n \
    \       end\n    end\n    return l\nend", "  local c = {}\n  local i = 1\n  for\
    \ val in l:gmatch(\"(.-)(%d+)\") do\n    c[#c + 1] = c[#c] + val\n  end\n  table.sort(c,\
    \ function(left, right)\n    return table[#c + 1] > table[#c + 2]\n  end)\n  local\
    \ unique = {}\n  for i = 1, #c do\n    unique[#unique + 1] = string.sub(c[i],\
    \ 1, #c[i])\n  end\n  return unique\nend", "  local i = #l\n  while i > 1 do\n\
    \    local j = i - 1\n    while j > 1 do\n      if l[i] == l[j] then\n       \
    \ l[j] = nil\n        j = j - 1\n      end\n    end\n    i = i - 1\n  end\n  return\
    \ l\nend", "  local u = {}\n  local v", "  local tbl = {}\n  for _, v in ipairs(l)\
    \ do\n    table.insert(tbl, v)\n  end\n  table.sort(tbl)\n  return tbl\nend",
  "    local seen = {}\n    local ret = {}", "    local out = {}\n    local i = 1",
  "  local seen = {}\n  local result", "  local i = 1\n  local j = 1\n  local k =\
    \ #l + 1\n  local v\n  while i <= k do\n    if j > i then\n      local x = l[j]\n\
    \      j = i\n      while i <= k do\n        if l[i] ~= x then\n          v =\
    \ l[j]\n          l[j] = l[i]\n          l[i] = v\n          k = k - 1\n     \
    \   end\n        i = i + 1\n      end\n    end\n    i = i + 1\n  end\n  return\
    \ l\nend", "  local s = {}\n  local i = 1\n  for _, v in pairs(l) do\n    s[v]\
    \ = true\n    i = i + 1\n  end\n  i = i + 1\n  local v\n  while i do\n    v =\
    \ math.random(i)\n    if not s[v] then\n      s[v] = true\n      i = i - 1\n \
    \   end\n  end\n  return unpack(pairs(s))\nend", "  local seen = set{}\n  local\
    \ out = {}\n  for _, el in ipairs(l) do\n    if seen[el] then\n      table.insert(out,\
    \ el)\n    else\n      table.insert(seen, el)\n    end\n  end\n  return out\n\
    end", "  local seen = {}\n  local u = {}\n  for i, x in ipairs(l) do\n    if not\
    \ seen[x] then\n      table.insert(u, x)\n      seen[x] = true\n    end\n  end\n\
    \  return u\nend", "  local i = 1\n  local j = 1\n  local k = nil\n  local l =\
    \ nil\n  local m = {}\n  local done = false", "  local tbl = {}\n  local done\
    \ = {}\n  for _, v in ipairs(l) do\n    if tbl[v] then\n      done[v] = true\n\
    \    else\n      tbl[v] = true\n    end\n  end", "  local i = 1\n  local uniques\
    \ = {}\n  while i <= #l do\n    local v = l[i]\n    if v in uniques then -- Avoid\
    \ repetition\n      i = i + 1\n    else\n      uniques[v] = true\n      i = i\
    \ + 1\n    end\n  end\n  return table.concat(uniques)\nend", "    local seen =\
    \ {}\n    local out = {}\n    for i, v in ipairs(l) do\n        if seen[v] ==\
    \ nil then\n            seen[v] = true\n            out[#out + 1] = v\n      \
    \  end\n    end\n    return out\nend", "  if l==nil then\n    return l\n  else\n\
    \    local set = { }\n    local t = { }\n    for i,v in ipairs(l) do\n       \
    \ if v ~= nil then\n            if not set[v] then\n                set[v] = true\n\
    \                t[#t+1] = v\n            end\n        end\n    end\n    return\
    \ t\n  end\nend", "  local seen = {}\n  local out = {}\n  for i=1,#l do\n    if\
    \ seen[tostring(l[i])] == nil then\n      seen[tostring(l[i])] = true\n      out[#out\
    \ + 1] = l[i]\n    end\n  end\n  return out\nend", "  if type(l) ~= 'table' then\
    \ return l end", "    local set = { }\n    for i, v in ipairs(l) do\n        if\
    \ set[v] == nil then\n            set[v] = true\n            table.insert(l, v)\n\
    \        end\n    end\n    return set\nend", "    local u = {}\n    for _, v in\
    \ pairs(l) do u[v] = true end\n    return table.sort(u)\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do\n    if v and not v[unique._key] then\n      v[unique._key]\
    \ = true\n      table.insert(u, v)\n    end\n  end\n  return u\nend", "  local\
    \ u = {}\n  for i = 1, #l do\n    u[tostring(l[i])] = true\n  end\n  local res\
    \ = {}\n  for k, v in pairs(u) do\n    if v then\n      table.insert(res, k)\n\
    \    end\n  end\n  return res\nend", "    local i = 1\n    local ans = {}\n  \
    \  while i <= #l do\n        local el = l[i]\n        if el.v ~= nil then\n  \
    \          table.insert(ans, el.v)\n        end\n        i = i + 1\n    end\n\
    \    return ans\nend", "  local u = {}\n  for _, x in ipairs(l) do u[x] = true\
    \ end\n  local i = 1\n  local v\n  for v in pairs(u) do\n    if i > 1 then return\
    \ v end\n    i = i + 1\n  end\nend", "  local tbl = {}\n  local i = 1\n  for elem\
    \ in l do\n    tbl[elem] = true\n    i = i + 1\n  end\n  local n = #tbl\n  if\
    \ n > 0 then\n    local j = 1\n    for i = 1, n do\n      if tbl[i] then\n   \
    \     j = j + 1\n        tbl[j] = true\n      end\n    end\n  end\n  return tbl\n\
    end", "  local i, j = 1, 1\n  local m = {}\n  local r\n  repeat\n    r = l[j]\n\
    \    while i <= #l and r == l[i] do\n      m = { r}\n      i = i + 1\n      j\
    \ = j + 1\n    end\n  until i <= #l and j <= #l\n  return m\nend", "  local seen\
    \ = {}\n  local sorted = {}\n  for i=1,#l do\n    if seen[l[i]] then\n      table.insert(sorted,l[i])\n\
    \    else\n      seen[l[i]] = true\n    end\n  end\n  return sorted\nend", " \
    \ if l==nil then return nil end\n  local l2 = {}\n  for i=1,#l do l2[tostring(l[i])]\
    \ = true end\n  return setmetatable(l2, {__mode = \"kv\"})\nend", "  local seen\
    \ = {}\n  local res = {}\n  local j = 0\n  local key\n  for i = 1, #l do\n   \
    \ local t = l[i]\n    if not seen[t] then\n      seen[t] = true\n      j = j +\
    \ 1\n      res[j] = t\n    end\n  end\n  return res\nend", "  local seen = {}\n\
    \  local out = {}\n  for i=1,#l do local k = l[i]\n    if seen[k] == nil then\
    \ table.insert(out, k) seen[k] = true end\n  end\n  return out\nend", "  if l==nil\
    \ then return nil end\n  local c = {}\n  for i=1,#l do c[l[i]] = true end\n  local\
    \ u = {}\n  for k,v in pairs(c) do u[v] = k end\n  return u\nend", "  local set\
    \ = {}\n  local i = 1\n  for elem in l\n    do\n    table.insert(set, elem)\n\
    \    i = i + 1\n  end\n  while i <= #set\n    do\n    table.insert(set, set[i])\n\
    \    i = i + 1\n  end\n  return set\nend", "  local hash = {}\n  for _, v in ipairs(l)\
    \ do hash[v] = true end\n  local seen = {}\n  local ret = {}\n  for _, v in ipairs(l)\
    \ do\n    if not hash[v] then\n      table.insert(ret, v)\n    elseif seen[v]\
    \ then\n      table.insert(ret, v)\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return ret\nend", "  local t = {}\n  table.sort(l, function(a, b) return\
    \ a < b end)\n  for i = 1, table.getn(l) do\n    if l[i] ~= t[#t] then\n     \
    \ t[#t] = l[i]\n    end\n  end\n  return t\nend", "  assert(l, \"nil\")\n  local\
    \ t = {}\n  local i = 1\n  for v in pairs(l) do t[#t + 1] = v end\n  return t\n\
    end\n_G.unique = unique", "  local i = 1\n  local j = 1\n  local k = l[1]", " \
    \ local hash = {}\n  for i = 1, #l do\n    hash[tostring(l[i])] = true\n  end\n\
    \  return pairs(hash)\nend", "    local seen = {}\n    local ret = {}\n    for\
    \ i, v in ipairs(l) do\n        if seen[v] then -- if already seen, skip\n   \
    \     elseif v == nil then -- nil values get dropped\n        else -- add unique\
    \ value\n            table.insert(ret, v)\n        end\n        seen[v] = true\
    \ -- mark seen as seen\n    end\n    return ret\nend", "    local out = {}\n \
    \   for _, e in ipairs(l) do\n        if out[#out + 1] == e then\n           \
    \ out[#out + 1] = 1\n        else\n            out[#out + 1] = e\n        end\n\
    \    end\n    return out\nend", "  local seen = {}\n  local n = 1\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    seen[v] = nil\n    n += 1\n  end\n  local result\
    \ = {}\n  for i = 1, n do\n    result[#result + 1] = l[i]\n  end\n  return result\n\
    end", "  local seen = { }\n  local result = { }\n  for i=1, #l do\n    if seen[tostring(l[i])]\
    \ then\n      result[#result+1] = tostring(l[i])\n    else\n      table.insert(result,\
    \ tostring(l[i]))\n      seen[tostring(l[i])] = true\n    end\n  end\n  return\
    \ result\nend", "    local u = {}\n    for _, v in ipairs(l) do\n        u[v]\
    \ = true\n    end\n    return ipairs(u).sort()\nend", "  local u = {}\n  local\
    \ i = 1\n  for _, v in ipairs(l) do\n    if v ~= l[i] then\n      u[#u + 1] =\
    \ v\n    end\n    i = i + 1\n  end\n  return u\nend", "  local u = {}\n  for i\
    \ = 1,#l do\n    table.insert(u, l[i])\n  end\n  return u\nend", "  local u =\
    \ {}\n  for i = 1, #l do\n    local k = l[i]\n    if k ~= nil and k ~= i then\n\
    \      u[k] = true\n    end\n  end\n  table.sort(u)\n  -- remove nil\n  for i\
    \ = #u, 0, -1 do\n    if u[i] ~= nil then\n      table.remove(l, i)\n    end\n\
    \  end\n  return l\nend", "  local seen = {}\n  local res = {}\n  for i = 1, #l\
    \ do\n    if seen[tostring(l[i])] == nil then\n      table.insert(res, l[i])\n\
    \      seen[tostring(l[i])] = true\n    end\n  end\n  return res\nend", "   local\
    \ i = 1\n   local last = nil\n   repeat\n      if l[i] == last then\n        \
    \ i = i + 1\n      else\n         last = l[i]\n      end\n   until i < #l\n  \
    \ return l\nend", "  local s = Set()\n  for _, el in ipairs(l) do\n    if not\
    \ s.has(el) then\n      s:insert(el)\n    end\n  end\n  return s:to_list()\nend",
  "    local i = 1\n    local len = #l\n    local u = {}\n    while i <= len do\n\
    \        local j = i\n        while j > 1 do\n            if l[j] == l[j - 1]\
    \ then\n                l[j] = nil\n                i = j - 1\n            else\n\
    \                j = j - 1\n            end\n        end\n        u[i] = l[i]\n\
    \        i = i + 1\n    end\n    return u\nend", "  return table.sort(\n    table.mapcat(\n\
    \      function(a) return a end,\n      tsort(l, function(a, b) return a < b end)),\n\
    \    function(a, b) return a < b end)\nend", "  local u = {}\n  for i, v in ipairs(l)\
    \ do u[v] = true end\n  local n = {}\n  for k, v in pairs(u) do n[k] =  v end\n\
    \  return n\nend", "  local hash = {}\n  local i = 1\n  local j = #l + 1\n  while\
    \ i <= j do\n    hash[#hash + 1] = l[i]\n    i = i + 1\n    j = j + 1\n  end\n\
    \  while #hash > 0 do\n    local k = #hash\n    hash[k] = nil\n    i = i + 1\n\
    \    j = j - 1\n  end\n  return l\nend", "  local seen = {}\n  local out = {}\n\
    \  for i = 1, #l do\n    if seen[l[i]] then\n      out[#out + 1] = l[i]\n    else\n\
    \      seen[l[i]] = true\n    end\n  end\n  return out\nend", "  if l==nil then\n\
    \    return nil\n  end\n  local t = {}\n  local i = nil\n  for i=1,#l do\n   \
    \ if t[tostring(l[i])] == nil then\n      t[tostring(l[i])] = l[i]\n    end\n\
    \  end\n  return t\nend", "  local u = {}\n  for i = 1, #l do u[tostring(l[i])]\
    \ = i end\n  table.sort(u)\n  return table.unpack(u)\nend", "  local rv, set =\
    \ {}, {}\n  for _, v in ipairs(l) do\n    if set[v] == nil then\n      set[v]\
    \ = true\n      rv[#rv + 1] = v\n    end\n  end\n  return rv\nend", "   local\
    \ s = nil\n   for _, v in ipairs(l) do\n      if s == nil or v ~= s then\n   \
    \      s = v\n      else\n         return nil\n      end\n   end\n   return s\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return table.sort(u)\n\
    end", "    local s = {}\n    for _, v in pairs(l) do\n        if s[v] == nil then\n\
    \            s[v] = true\n            return v\n        end\n    end\nend", " \
    \ local u = {}\n  for i = 1, #l do u[l[i]] = true end\n  table.sort(u)\n  return\
    \ table.unpack(u)\nend", "    local seen = {}\n    for _, item in pairs(l) do\n\
    \        if seen[item] then continue end\n        seen[item] = true\n        table.insert(l,\
    \ item)\n    end\n    return l\nend", "  if l == nil then return nil end\n  local\
    \ i = 1\n  local l2 = {}\n  while i <= #l do\n    if not l2[l[i]] then\n     \
    \ table.insert(l2, l[i])\n    end\n    i = i + 1\n  end\n  return l2\nend", " \
    \ local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return table.unpack(u)\n\
    end", "    local v = {}\n    for _, v in ipairs(l) do\n        if v == true then\n\
    \            v = nil\n            break\n        end\n    end\n    return v\n\
    end", "  local set = {}\n  set.__index = set\n  local i = 1\n  local len = #l",
  "    local data = {}\n    for _, v in ipairs(l) do\n        data[v] = true\n   \
    \ end\n    return setmetatable(l, { __mode = 'kv' })\nend", "    local i = 1\n\
    \    local j = 1\n    local k\n    local v\n    local l2 = {}\n    for k, v in\
    \ pairs(l) do\n        while i <= v do\n            l2[#l2 + 1] = k\n        \
    \    i = i + 1\n        end\n    end\n    i = 2\n    while i <= #l2 do\n     \
    \   for j = i + 1 to #l2 do\n            if l2[i] < l2[j] then\n             \
    \   local temp = l2[j]\n                l2[j] = l2[i]\n                l2[i] =\
    \ temp\n                i = i + 1\n            end\n        end\n        i = i\
    \ + 1\n    end\n    return l2\nend", "  local t = {}\n  local i = 1\n  for v in\
    \ l\n    do\n      if v~=t[i] then\n        t[i] = v\n        i = i + 1\n    \
    \  end\n    end\n  return t\nend\n</code>\n<|/ a tags=lua,lua-table dscore=4 |>\n\
    <| a tags=lua,lua-table |>\n<code>\nt={1,2,3}\nt.sort, table.sort(t), unpack(t)\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nThis only works on Lua 5.1+\n<|/ c |>\n<|\
    \ c |>\nDoesn't work on Lua 5.2. Use Lua 5.1 instead.\n<|/ c |>\n<| a tags=lua,lua-table\
    \ |>\nSince Lua 5.2, you can use the built-in table.reduce function.\n<code>",
  "  local n = {}\n  local hash = {}\n  local i = 1\n  for i=1, #l do\n    hash[tostring(l[i])]\
    \ = true\n  end\n  for i=1, #l do\n    if hash[tostring(l[i])] then\n      n[#n+1]\
    \ = tostring(l[i])\n    end\n  end\n  return n\nend", "  local result = {}\n \
    \ for _, el in ipairs(l) do\n    if not result[el] then\n      result[el] = true\n\
    \    end\n  end\n  return result\nend", "  if l==nil then return nil end\n  if\
    \ #l>1 then return table.sort(l,function(a,b) return a>b end) end\n  local t={}\n\
    \  for k,v in pairs(l) do t[#t+1]=v end\n  return t\nend", "  local seen = { }\n\
    \  for i = 1, #l do seen[tostring(l[i])] = true end\n  local result = { }\n  for\
    \ k, v in pairs(seen) do table.insert(result, k) end\n  return result\nend", " \
    \   local i = 1\n    local last = nil\n    for i = 1, #l do\n        if last ~=\
    \ l[i] then\n            last = l[i]\n            table.insert(l, last)\n    \
    \    end\n    end\n    return l\nend", "  if type(l) ~= 'table' then return l\
    \ end\n  local u = {}\n  for v in pairs(l) do u[v] = true end\n  local i = 1\n\
    \  for v in pairs(l) do u[v] = nil end, i = i + 1\n  return i\nend", "  if #l\
    \ == 0 then\n    return l\n  end\n  local hash = {}\n  local i = 1\n  while i\
    \ <= #l do\n    hash[tostring(l[i])] = true\n    i = i + 1\n  end\n  local i =\
    \ 1\n  local t\n  while i <= #l do\n    t = l[i]\n    if hash[t] then\n      table.insert(l,\
    \ i)\n    end\n    i = i + 1\n  end\n  return l\nend", "  local res = {}\n  local\
    \ i = 1\n  for _, v in pairs(l) do\n    if v ~= res[i - 1] then\n      res[i]\
    \ = v\n      i = i + 1\n    end\n  end\n  return table.unpack(res, i, #l)\nend",
  "  local i = 1\n  local j = 1\n  local n = #l\n  local u = {}\n  while i <= n do\n\
    \    if l[i] ~= l[j] then\n      table.insert(u, l[j])\n      j = j + 1\n    end\n\
    \    i = i + 1\n  end\n  return u\nend", "  local seen = {}\n  local res = {}",
  "\tlocal new_l = {}\n\tfor _, value in pairs(l) do\n\t\tif table.find(new_l, value)\
    \ == nil then\n\t\t\ttable.insert(new_l, value)\n\t\tend\n\tend\n\treturn new_l\n\
    end", "  local u = {}\n  local i = 1\n  for _, v in pairs(l) do\n    if v ~= l[i]\
    \ then\n      u[#u + 1] = v\n    end\n    i = i + 1\n  end\n  return u\nend",
  "    local seen = {}\n    local t\n    for i = 1, #l do\n        t = l[i]\n    \
    \    if seen[t] then\n            continue\n        end\n        seen[t] = true\n\
    \    end\n    return l\nend", "  local table = {}\n  for _, el in ipairs(l) do\n\
    \    table[el] = true\n  end\n  return table.keys()\nend", "  local u = {}\n \
    \ for i, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  return u\nend", " \
    \   local u = {}\n    for _, v in ipairs(l) do u[v] = true end\n    return setmetatable(l,\
    \ { __index = function() return u end })\nend", "  local seen = {}\n  local ret\
    \ = {}\n  for _, x in ipairs(l) do\n    seen[x] = true\n    ret[#ret + 1] = x\n\
    \  end\n  return ret\nend", "  if l==nil then return nil end\n  local i = 1\n\
    \  local j = #l\n  while i <= j do\n    local k = i - 1\n    while k > -1 and\
    \ l[k] == l[i] do\n      k = k - 1\n    end\n    if k > -1 then\n      l[k+1],\
    \ l[i] = l[i], l[k]\n      i = i + 1\n      j = j - 1\n    else\n      i = i +\
    \ 1\n    end\n  end\n  j = 1\n  while j <= #l do\n    l[j+1], l[1] = l[1], l[j]\n\
    \    j = j + 1\n  end\n  return l\nend", "  if l==nil then return nil end\n  local\
    \ i = 1\n  local is = {}\n  while i <= #l do\n    local e=l[i]\n    if is[e] ==\
    \ nil then\n      is[e] = true\n      i = i + 1\n    end\n  end\n  return l[#is]\n\
    end", "  if l==nil then return nil end\n  local a = l\n  local n = 1\n  local\
    \ v\n  while n > 1 do\n    v = a[math.random(n)]\n    for i = 1, n do\n      if\
    \ v == a[i] then\n        a = a[i..n]\n        n = n - 1\n        break\n    \
    \  end\n    end\n  end\n  return a\nend", "  local seen = {}\n  local ret = {}\n\
    \  for i = 1, #l do\n    if seen[l[i]] then\n      table.insert(ret, l[i])\n \
    \   else\n      seen[l[i]] = true\n    end\n  end\n  return ret\nend", "  local\
    \ seen = {}\n  local out = {}", "  local seen = {}\n  local unique_result\n  unique_result\
    \ = nil\n  for i = 1, #l do\n    local value = l[i]\n    if not seen[value] then\n\
    \      seen[value] = true\n      unique_result = value\n    end\n  end\n  return\
    \ unique_result\nend", "  local hash = {}\n  local i = 1\n  for i = 1, #l do\n\
    \    hash[l[i]] = l[i]\n  end\n  local result = {}\n  for k, v in pairs(hash)\
    \ do\n    result[#result + 1] = v\n  end\n  return result\nend", "  local u =\
    \ {}\n  for _, v in pairs(l) do u[v] = true end\n  return setmetatable(l, { __tostring\
    \ = function() return table.concat(u, ',') end })\nend", "  local u = {}\n  local\
    \ i = 1", "  local r = {\n    i, j = 1, #l + 1\n  }\n  r:sort(function(a, b) return\
    \ a > b end)\n  repeat\n    i = r.i\n    j = r.j\n    if l[i] ~= l[j] then\n \
    \     l[i] = nil\n    end\n  until not j\n  return l\nend", "    local seen =\
    \ {}\n    local u = {}\n    for k, v in pairs(l) do\n        if seen[v] then\n\
    \            table.insert(u, v)\n        else\n            seen[v] = true\n  \
    \      end\n    end\n    return u\nend", "  local u = {}\n  for _, x in ipairs(l)\
    \ do u[x] = true end\n  return setmetatable({\n      __tostring = function() return\
    \ \"[\" .. table.concat(l, \", \") .. \"]\" end,\n      concat = function(t) return\
    \ table.concat(t, \", \") end,\n      n = #u,\n      subset = function(self, ixs)\n\
    \        local t = {}\n        for _, v in ipairs(ixs) do t[v] = self[v] end\n\
    \        return t\n      end,\n      sort = function(t) return table.sort(t) end,\n\
    \      map = function(self, f) return table.map(f, self) end,\n      update =\
    \ function(self, i, x)\n        self[i] = x\n      end,\n      clone = function(self)\
    \ return setmetatable({\n        __tostring = function() return self.__tostring\
    \ end,\n        concat = function(t) return table.concat(t) end,\n        sort\
    \ = function() return unique end,\n        map = function(self, f) return table.map(f,\
    \ self) end,\n        update = function(self, i, x)\n          self[i] = x\n \
    \       end,\n        clone = function(self) return unique end,\n      }, self)\
    \ end,\n    }, u)\nend", "  local result = {}\n  local i = 1\n  for val in l do\n\
    \    if result[val] == nil then\n      result[val] = i\n      i = i + 1\n    end\n\
    \  end\n  return result\nend", "    local seen = {}\n    for _,v in ipairs(l)\
    \ do\n        seen[v] = true\n    end\n    local t = {}\n    for k,v in pairs(seen)\
    \ do\n        table.insert(t,k)\n    end\n    return t\nend", "    local u = {}\n\
    \    for _, v in ipairs(l) do u[v] = true end\n    return setmetatable(l, { __index\
    \ = u })\nend", "    local i = 1\n    local r = {l[1]}\n    local v", "  local\
    \ seen = {}\n  local t = {}\n  for _, e in ipairs(l) do\n    if seen[e] then\n\
    \      t[#t + 1] = e\n    else\n      seen[e] = true\n    end\n  end\n  return\
    \ t\nend", "  local u = {}\n  local i = 1\n  for _, el in ipairs(l) do u[el] =\
    \ i \n  i = i + 1\n  end\n  return table.concat(u)\nend", "  return l:reduce(function\
    \ (v, n)\n    local ok = false\n    for i = 1, #v do\n      if v[i] == n then\n\
    \        ok = true\n        break\n      end\n    end\n    if not ok then\n  \
    \    table.insert(v, n)\n    end\n    return v\n  end, {})\nend", "  local u =\
    \ {}\n  for _, elem in ipairs(l) do\n    table.insert(u, elem)\n  end\n  table.sort(u)\n\
    \  return u\nend", "    local seen = {}\n    local out = {}\n    for _, _ in ipairs(l)\
    \ do\n        if seen[_] then\n            table.insert(out, seen[_])\n      \
    \  else\n            seen[_] = true\n        end\n    end\n    return out\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=list,lua |>\nIf you don't want to use any\
    \ table functions you can use this:\n<code>", "  if l==nil then return nil end\n\
    \  local out = {}\n  for k,v in pairs(l) do\n    if out[v] == nil then out[v]\
    \ = k end\n  end\n  return out\nend", "  local t = {}\n  for i = 1, #l do\n  \
    \  if t[tostring(l[i])] == nil then t[tostring(l[i])] = i end\n  end\n  return\
    \ t\nend", "  local u = {}\n  for _, x in ipairs(l) do u[x] = true end\n  return\
    \ setmetatable({}, {__index=u})\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do t[v] = true end\n  return t\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
