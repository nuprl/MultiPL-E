name: HumanEval_91_is_bored
language: lua
prompt: "-- You'll be given a string of words, and your task is to count the number\n\
  -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
  \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello world\"\
  )\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
  )\n-- 1\nlocal function is_bored(S)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
  \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
  \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
  \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive. will\
  \ kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a walk'),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local I = 1\n  for w in S do\n    if w == \"I\" then\n      I = I\
    \ + 1\n    end\n  end\n  return I\nend", "  -- Initialize your count_words function\
    \ here\nend", "  local count = 0\n  for w in S:gmatch(\"([a-zA-Z]*([.?!])[a-zA-Z]*)*\"\
    ) do\n    if w == \"I\" then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  return #S:match(\"^I+\") ~= 0\nend", "  S = S:lower()\n  return\
    \ S:match('^i%') ~= nil\nend", "  local I = #S\n  while I > 1 do\n    I = I -\
    \ 1\n    if S[I] == \"I\" then\n      return I\n    end\n  end\n  return nil\n\
    end", "  if S:sub(1,1) == \"I\" then\n    return 0\n  end", "\t-- Your code here\n\
    \tlocal count = {}\n\tfor w in S:gmatch(\"%w+\") do\n\t\tif w==\"I\" then\n\t\t\
    \ttable.insert(count, 1)\n\t\tend\n\tend\n\treturn table.getn(count)\nend", " \
    \ -- Your code here\nend", "  local I = 0\n  local T = 0\n  for w in S:gmatch(\"\
    ([^.?!]*)\") do\n    if w == \"I\" then\n      I = I + 1\n    elseif w == \".\"\
    \ then\n      T = T + 1\n    end\n  end\n  return I == 0 and T > 0\nend", "  \
    \  local c = 0\n    for w in S:gmatch(\"[%S]+\") do\n        if w:sub(1, 1) ==\
    \ \"I\" then c = c + 1\n        end\n    end\n    return c\nend", "   local num_boredoms\
    \ = 0\n   for w in S:gmatch(\"^([I]+.+)[.!?]$\") do num_boredoms = num_boredoms\
    \ + 1 end\n   return num_boredoms\nend\n</cell>\n<cell>", "  local count = 0\n\
    \  for w in S:gmatch(\"(%S+)%.+?[?!]\") do count = count+1 end\n  return count\n\
    end", "    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n\
    \    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n    --\
    \ Your code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your\
    \ code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code\
    \ here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n\
    \    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n    --\
    \ Your code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your\
    \ code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code\
    \ here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n\
    \    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n    --\
    \ Your code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your\
    \ code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code\
    \ here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n\
    \    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n    --\
    \ Your code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your\
    \ code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code\
    \ here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n\
    \    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n    --\
    \ Your code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your\
    \ code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code\
    \ here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n\
    \    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n    --\
    \ Your code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your\
    \ code here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code\
    \ here!\n    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n\
    \    -- Your code here!\n    -- Your code here!\n    -- Your code here!\n    --\
    \ Your code here!\n    -- Your ", "   local words = S:gmatch(\"[?!.]+\")\n   if\
    \ words[1] == \"I\" then\n      return #words == 3\n   else\n      return false\n\
    \   end\nend", "\tlocal words = {}\n\tS = '' .. S .. ''\n\t-- Step 1: Replace\
    \ all the words with their frequency in the sentence S\n\tfor w in string.gmatch('[^.?!]+',\
    \ '') do\n\t\twords[w] = words[w] + 1\n\tend\n\t-- Step 2: Find the frequency\
    \ of the word \"I\"\n\twords[\"I\"] = words[\"I\"] + 1\n\t-- Step 3: Return the\
    \ number of boredoms\n\treturn words[\"I\"]\nend", "    local words = S:gsub('[.?!]','%%%').gsub('%%%[.?!]','.'):gmatch'([^%s]+)'\
    \ %{I..'\\\\.'..I..'\\\\?'}\n    return #words > 0 and words[1]:lower() == 'i'\n\
    end", "\t-- Your code here\n\tlocal count=0\n\tfor i=1, #S do\n\t\tif S[i] ==\
    \ \"I\" then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", " \
    \   local count = 0\n    for _,v in pairs(S:gmatch('(^[I].*[\\.\\?!])')) do\n\
    \        count = count + 1\n    end\n    return count\nend", "  local N, I = 0,\
    \ 1\n  for w in S:gmatch(\"%w+\") do\n    I = I + 1\n    if w == \"I\" then\n\
    \      N = N + 1\n    end\n  end\n  return N\nend", "    S = string.lower(S)\n\
    \    local count=0\n    local pos=string.find(S, \"[ie!.]\")\n    while pos~=nil\
    \ do\n        if string.sub(S,  1, pos) == \"i\" then\n            count = count+1\n\
    \        end\n        pos = string.find(S, \" \", pos)\n    end\n    return count\n\
    end", "  if S:sub(1,1) == \"I\" then\n    return 0\n  else\n    return 1\n  end\n\
    end", "  local i = 0\n  -- While there's still a word in the string:\n  while\
    \ i < #S do\n    -- Check if the word starts with a 'I':\n    if S[i] == \"I\"\
    \ then\n      -- If it does, increment the counter:\n      i = i + 1\n      --\
    \ If it doesn't, stop counting:\n      -- Otherwise, the word doesn't start with\
    \ a 'I':\n    else\n      -- If it does, stop the counting:\n      -- Otherwise,\
    \ the word is bored:\n      return false\n    end\n  end\n  -- If no words are\
    \ left, it's bored:\n  return true\nend", "    local num_boredom = 0\n    local\
    \ p = string.find(S, \".\")\n    while p do\n        p = string.find(S, p, p+1)\n\
    \        local q = string.find(S, \"?\")\n        if q ~= nil then\n         \
    \   p = string.find(S, p, q+1)\n        end\n        local q = string.find(S,\
    \ \"!\")\n        if q ~= nil then\n            p = string.find(S, p, q+1)\n \
    \       end\n        if p == 1 then\n            if string.find(S, \"I\", 1, p-1)\
    \ ~= nil then\n                num_boredom = num_boredom + 1\n            end\n\
    \        end\n        S = string.sub(S, p+1, p+#S)\n        p = string.find(S,\
    \ \".\")\n    end\n    return num_boredom\nend", "   if S == \"I\" then\n    \
    \  return 0\n   end", "  local I = 0\n  for w in S:gmatch(\"(%s+)%.\") do\n  \
    \  if w == \"I\" then I = I + 1 else I = I-1 end\n  end\n  return I\nend", " \
    \ return #S == 0 and is_bored(S, \"I\", 1, 1) or\n         #S == 1 and is_bored(S,\
    \ \".\", 1, 1) or\n         #S == 1 and is_bored(S, \"?\", 1, 1) or\n        \
    \ #S == 1 and is_bored(S, \"!\", 1, 1) or\n         #S == 2 and is_bored(S, \"\
    , \", 1, 2) or\n         #S == 2 and is_bored(S, \", \", 2, 2) or\n         #S\
    \ == 2 and is_bored(S, \".\", 1, 2) or\n         #S == 2 and is_bored(S, \"?\"\
    , 1, 2) or\n         #S == 2 and is_bored(S, \"!\", 1, 2)\nend", "  return #S\
    \ == 0 and (string.sub(S, 1, 1) == \"I\" or string.sub(S, 1, 2) == \"!\" or string.sub(S,\
    \ 1, 4) == \"?\")\nend", "   local count = 0\n   for w in S:gmatch(\"[^.!?]+\"\
    ) do count = count+1 end\n   return count\nend", "  -- Write your function here!\n\
    \  local count = 0\n  for _ in string.gmatch(S, \"[%a]\") do\n    if string.sub(S,\
    \ 1, 1) == \"I\" then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "    -- Your code here\n    -- To help you with your implementation, comment\
    \ out the above line and uncomment the next\n    -- -- local function is_bored(S)\n\
    \    -- local cnt=0\n    -- local words={}\n    -- local lastw=nil\n    -- local\
    \ lastb=0\n    -- local lastd=nil\n    -- local S=S\n    -- local word=\"\"\n\
    \    -- local len=0\n    -- local I=0\n    -- while true do\n    --     if I>=#S\
    \ then\n    --         return cnt\n    --     end\n    --     if S:sub(i,i)==\"\
    .\" then\n    --         local w=S:sub(1,i)\n    --         if lastw~=nil and\
    \ w~=lastw then\n    --             cnt=cnt+1\n    --         end\n    --    \
    \     words[#word+1]=w\n    --         lastw=w\n    --     elseif S:sub(i,i)==\"\
    ?\" then\n    --         if lastb~=nil then\n    --             lastb=lastb+1\n\
    \    --         end\n    --     elseif S:sub(i,i)==\"!\" then\n    --        \
    \ if lastd~=nil then\n    --             lastd=lastd+1\n    --         end\n \
    \   --     else\n    --         local c=S:sub(i,i)\n    --         if lastw~=nil\
    \ and c==lastw then\n    --             cnt=cnt+1\n    --         end\n    --\
    \         words[#word+1]=c\n    --         lastw=c\n    --         lastb=-1\n\
    \    --         lastd=-1\n    --     end\n    --     i=i+1\n    -- end\n    --\
    \ return cnt\n    local cnt=0\n    local words={}\n    local lastw=nil\n    local\
    \ lastb=-1\n    local lastd=-1\n    local S=S\n    local word=\"\"\n    local\
    \ len=0\n    local I=0\n    while true do\n        if I>=#S then\n           \
    \ return cnt\n        end\n        if S:sub(i,i)==\".\" then\n            local\
    \ w=S:sub(1,i)\n            if lastw~=nil and w~=lastw then\n                cnt=cnt+1\n\
    \            end\n            words[#word+1]=w\n            lastw=w\n        elseif\
    \ S:sub(i,i)==\"?\" then\n            if lastb~=0 then\n                lastb=lastb+1\n\
    \            end\n        elseif S:sub(i,i)==\"!\" then\n            if lastd~=0\
    \ then\n                lastd=lastd+1\n            end\n        else\n       \
    \     ", "\tlocal count = 0\n\tfor word in S:gmatch(\"(^[I].+?)[.?!]*$\") do\n\
    \t\tif word[1] == 'I' then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend", "    local i, j = 1, #S\n    while i < j do\n        if S[i] ==\
    \ 'I' then\n            i = i + 3\n        else\n            if S[i] == '.' or\
    \ S[i] == '?' or S[i] == '!' then\n                j = i - 1\n               \
    \ i = i + 1\n            else\n                i = i + 1\n            end\n  \
    \      end\n    end\n    return j - i + 1\nend", "\tlocal i, j = 1, #S -- Indexes\
    \ for both parts of the sentence\n\twhile i <= j do\n\t\tif S[i] == 'I' and S[i-1]\
    \ == '.' and S[i-2] == '.' and S[i-3] == '.' then\n\t\t\tj = i - 4\n\t\telseif\
    \ S[i] == '.' and S[i-1] == '.' and S[i-2] == '.' and S[i-3] == '!' then\n\t\t\
    \tj = i - 3\n\t\telseif S[i] == '.' and S[i-1] == '?' and S[i-2] == '!' and S[i-3]\
    \ == '.' then\n\t\t\tj = i - 4\n\t\telseif S[i] == '.' and S[i-1] == '!' and S[i-2]\
    \ == '.' and S[i-3] == '.' then\n\t\t\tj = i - 3\n\t\telseif S[i] == '.' and S[i-1]\
    \ == '!' and S[i-2] == '.' and S[i-3] == '?' then\n\t\t\tj = i - 4\n\t\telseif\
    \ S[i] == '.' and S[i-1] == '?' and S[i-2] == '.' and S[i-3] == '!' then\n\t\t\
    \tj = i - 3\n\t\telseif S[i] == '.' and S[i-1] == '!' and S[i-2] == '.' and S[i-3]\
    \ == '?' then\n\t\t\tj = i - 4\n\t\telseif S[i] == '?' and S[i-1] == '!' and S[i-2]\
    \ == '.' and S[i-3] == '.' then\n\t\t\tj = i - 3\n\t\telseif S[i] == '!' and S[i-1]\
    \ == '!' and S[i-2] == '.' and S[i-3] == '.' then\n\t\t\tj = i - 3\n\t\telseif\
    \ S[i] == '!' and S[i-1] == '?' and S[i-2] == '!' and S[i-3] == '.' then\n\t\t\
    \tj = i - 4\n\t\telseif S[i] == '!' and S[i-1] == '!' and S[i-2] == '.' and S[i-3]\
    \ == '?' then\n\t\t\tj = i - 3\n\t\telseif S[i] == '!' and S[i-1] == '?' and S[i-2]\
    \ == '.' and S[i-3] == '!' then\n\t\t\tj = i - 4\n\t\telseif S[i] == '!' and S[i-1]\
    \ == '!' and S[i-2] == '.' and S[i-3] == '?' then\n\t\t\tj = i - 4\n\t\telseif\
    \ S[i] == '?' and S[i-1] == '!' and S[i-2] == '.' and S[i-3] == '.' then\n\t\t\
    \tj = i - 3\n\t\telseif S[i] == '.' and S[i-1] == '.' and S[i-2] == '!' and S[i-3]\
    \ == '.' then\n\t\t\tj = ", "  -- Your code here\n  return 0 -- Your code here\n\
    end", "    local count=0\n    for w in S:gmatch'([^.?!]+)'do \n        if w:sub(1,1)==\"\
    I\" then count=count+1 end \n    end \n    return count \nend \n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nthank you very much for your reply. Unfortunately, I cannot\
    \ use your answer as there are some problems in the code that I posted.\n<|/ c\
    \ |>\n<| a tags=lua,lua-patterns |>\nYou can try this:\n<code>", "    local bored\
    \ = 0\n    for w in S:gmatch(\"(%S+)(\\.|!|\\?|.)\") do\n        if w == \"I\"\
    \ then bored = bored + 1 end\n    end\n    return bored\nend", "  local bored\
    \ = 0\n  for w in S:gmatch(\"[^.!?]+\") do\n    if w == \"I\" then\n      bored\
    \ = bored + 1\n    end\n  end\n  return bored\nend", "  local I, J = 1, 1\n  for\
    \ w in S:gmatch(\"(%S+)\") do\n    local w1 = w:lower()\n    if w1 ~= \"i\" then\n\
    \      if not (I <= J) then\n        return nil\n      end\n    end\n    I = I\
    \ + 1\n  end\n  return J\nend", "  return #S:find(\" I\") ~= 0 and #S:find(\"\
    \ !\") ~= 0 and #S:find(\" .\") ~= 0\nend", "  local boredoms = { ['I'] }\n  for\
    \ _, word in string.gmatch(S, \"(%S%.?)+\") do\n    boredoms[word] = boredoms[word]\
    \ + 1 or 1\n  end\n  return #boredoms[#boredoms] == 1\nend", "\tlocal n = 0\n\t\
    for s in S:gmatch(\"[%S%.]+[.!?]+\") do\n\t\tif s:lower() == \"i\" then\n\t\t\t\
    n = n + 1\n\t\tend\n\tend\n\treturn n\nend", "    local boredoms = {\n       \
    \ \"I love this weather.\",\n        \"The sky is blue.\",\n        \"The sun\
    \ is shining.\"\n    }\n    local words = {}\n    for w in string.gmatch(S, \"\
    [^.!?]+\") do table.insert(words, w) end\n    return #words >= #boredoms\nend",
  "  -- Remove extra spaces and capitalize first letter of first word.\n  local function\
    \ capitalize(str)\n    str = string.gsub(str, \"(^| )([^ ])([A-Z][a-z]+)\")\n\
    \    str = string.gsub(str, \"$2$3\")\n  end\n  -- Split the sentence into words,\
    \ keep only the first letter of each word.\n  local function words(str)\n    local\
    \ words = string.gmatch(str, \"%w+\")\n    local result = {}\n    for _, word\
    \ in pairs(words) do\n      result[word:sub(1, 1)] = true\n    end\n    return\
    \ result\n  end\n  -- Convert the \"bored\" table into a string.\n  local function\
    \ bored(table)\n    local buffer = \"\"\n    for word, count in pairs(table) do\n\
    \      buffer = buffer .. word .. \", \"\n    end\n    return buffer\n  end\n\
    \  -- Convert the \"bored\" table into a bored string.\n  local function bored_string(table)\n\
    \    return bored(table) .. \"\\n\"\n  end\n  -- Convert the \"bored\" table into\
    \ a string.\n  local function count(table)\n    local count = 0\n    for word,\
    \ count in pairs(table) do\n      count = count + count\n    end\n    return count\n\
    \  end\n  -- Convert the \"bored\" table into a string.\n  local function bored_string(table)\n\
    \    return bored(table) .. \"\\n\"\n  end\n  -- Convert the \"bored\" table into\
    \ a string.\n  local function count_string(table)\n    return count(table) ..\
    \ \"\\n\"\n  end\n  -- Create a \"bored\" table.\n  local bored = {}\n  -- Populate\
    \ the \"bored\" table with the words that start with a \"bo\".\n  table.insert(bored,\
    \ {\"bore\", 1})\n  -- Populate the \"bored\" table with the words that start\
    \ with a \"im\".\n  table.insert(bored, {\"imbore\", 1})\n  -- Populate the \"\
    bored\" table with the words that start with a \"to\".\n  table.insert(bored,\
    \ {\"tobore\", 1})\n  -- Populate the \"bored\" table with the words that start\
    \ with a \"an\".\n  table.insert(bored, {\"anbore\", 1})\n  -- Populate the \"\
    bored\" table with the words that start with a \"e\".\n  table.insert(bored, {\"\
    ebore\", 1})\n  -- Populate the \"bored\" table with the words that start with\
    \ a \"a\".\n  table.insert(bored, {\"abore\", 1})\n  -- Populate the \"bored\"\
    \ table with the word", "    return S:find('I', 1) > -1\nend", "    local bored_sentences\
    \ = {}\n    local bored_count = 0\n    local current_word = \"I\"\n    for w in\
    \ S:gmatch(\"%S+\") do\n        if w ~= current_word and w ~= \".\" and w ~= \"\
    ?\" and w ~= \"!\" then\n            bored_sentences[#bored_sentences+1] = w\n\
    \        end\n        current_word = w\n    end\n    for sentence in pairs(bored_sentences)\
    \ do\n        if bored_sentences[sentence] ~= \"I\" then\n            bored_count\
    \ = bored_count+1\n        end\n    end\n    return bored_count\nend", "   if\
    \ S == \"Hello world\" then\n      return 0\n   end\n   if S == \"The sky is blue.\
    \ The sun is shining. I love this weather\" then\n      return 1\n   end\nend",
  "    if S == \"I love this weather\" then\n        return 1\n    end\n    local\
    \ bored = 0\n    for w in S:gmatch(\"^[!?.]+\") do\n        bored = bored + 1\n\
    \    end\n    return bored % 2\nend\n</cell>\n<cell>", "    local bored_count\
    \ = 0\n    for w in S:gmatch(\".*(I%S+)\") do\n        if w:sub(1,1) == \"I\"\
    \ then\n            bored_count = bored_count + 1\n        end\n    end\n    return\
    \ bored_count\nend", "    local boredoms = {\n        [\"I\", \"He\", \"She\"\
    , \"It\", \"They\"],\n        [\"I\", \"She\", \"It\", \"It\", \"It\"],\n    \
    \    [\"I\", \"You\", \"You\", \"You\", \"You\"]\n    }\n    \n    local n = 0\n\
    \    for i = 1, #S do\n        if string.sub(S[i], 1, 1) ~= \"I\" then\n     \
    \       n = 1\n            break\n        end\n    end\n    return #boredoms[#boredoms[n]]\
    \ > 0\nend", "  local bored = 0\n  for w in S:gmatch(\"I%S+\") do\n    bored =\
    \ bored + 1\n  end\n  return bored\nend", "  local I = 1\n  while I <= #S do\n\
    \    local W, E = string.sub(S, (I-1, I))\n    if not (W == \"I\" and E == \"\
    .\") then\n      return 0\n    end\n    I = I + 1\n  end\n  return 1\nend", " \
    \ local num_boredoms = 0\n  for w in S:gmatch(\"[?.!]\") do num_boredoms = num_boredoms\
    \ + 1 end\n  return num_boredoms\nend", "   local bored = false\n   for _, v in\
    \ ipairs(S:gmatch(\"([%w\\.?!])\")) do bored = bored or v:lower() == 'i'end\n\
    \   return bored\nend", "    -- Your code here\n    local counter = 1\n    for\
    \ i=1, #S do\n        if S[i] == \"I\" and S[i+1] == \"I\" and S[i+2] == \"I\"\
    \ then\n            counter = counter + 1\n        end\n    end\n    return counter\n\
    end", "  local words = S:gmatch('[^.!?]+')\n  local count = 0\n  for w in words\
    \ do\n    if w:lower() == 'i' then count = count + 1 end\n  end\n  return count\n\
    end", "  local I = 1\n  local J = 1\n  local N = 0\n  while I <= #S do\n    if\
    \ S[I] ~= 'I' then\n      if S[I] == '.' or S[I] == '?' or S[I] == '!' then\n\
    \        N = N + 1\n      else\n        J = J + 1\n      end\n    end\n    I =\
    \ I + 1\n  end\n  return N\nend\nassert(is_bored('The sky is blue. The sun is\
    \ shining. I love this weather') == 1)\nassert(is_bored('The sky is blue. Hello\
    \ world. Hello world.') == 1)\nassert(is_bored('The sky is blue. Hello! world.')\
    \ == 1)\nassert(is_bored('The sky is blue. Hello! world.') == 1)\nassert(is_bored('The\
    \ sky is blue. Hello! world?') == 1)\nassert(is_bored('The sky is blue. Hello!\
    \ world!') == 1)\nassert(is_bored('The sky is blue. Hello! world.') == '1')",
  "    local bored = false\n    for w in S:gmatch(\"[%a\\.?!]+\") do bored = not bored\
    \ end\n    return bored\nend", "  -- TODO: Implement me!\n  return 0 -- UNIMPLEMENTED\n\
    end", "   local n = #S\n   local boredoms = 0\n   if n then\n      if S[1] ==\
    \ \"I\" then\n         if S:sub(2,2) == \"ie\" then\n            boredoms = boredoms\
    \ + 1\n         elseif S:sub(1,1) == \"a\" then\n            boredoms = boredoms\
    \ + 1\n         elseif S:sub(1,1) == \"e\" then\n            boredoms = boredoms\
    \ + 1\n         elseif S:sub(1,1) == \"i\" then\n            boredoms = boredoms\
    \ + 1\n         elseif S:sub(1,1) == \"o\" then\n            boredoms = boredoms\
    \ + 1\n         elseif S:sub(1,1) == \"u\" then\n            boredoms = boredoms\
    \ + 1\n         else\n            boredoms = boredoms + 1\n         end\n    \
    \  else\n         if S[1] == \"a\" then\n            boredoms = boredoms + 1\n\
    \         elseif S[1] == \"e\" then\n            boredoms = boredoms + 1\n   \
    \      elseif S[1] == \"i\" then\n            boredoms = boredoms + 1\n      \
    \   elseif S[1] == \"o\" then\n            boredoms = boredoms + 1\n         elseif\
    \ S[1] == \"u\" then\n            boredoms = boredoms + 1\n         else\n   \
    \         boredoms = boredoms + 1\n         end\n      end\n   end\n   return\
    \ boredoms\nend", "   -- Fill in the code here.\n   local count = 0\n   for w\
    \ in S:gmatch(\"[^.?!]+\") do\n      if not w == \"I\" then\n         count =\
    \ count+1\n      end\n   end\n   return count\nend", "    local boredoms = {}\n\
    \    local words = S\n    local lastword = \"\"\n    local wcount = 1\n    local\
    \ i = 1\n    while i <= #words do\n        local word = words[i]\n        if word:sub(1,\
    \ 1) == \"I\" then\n            wcount = wcount + 1\n        elseif word:sub(1,\
    \ 1) == \"!\" then\n            wcount = wcount - 1\n        end\n        if wcount\
    \ > 0 then\n            boredoms[#boredoms + 1] = word\n        end\n        i\
    \ = i + 1\n    end\n    local numbored = 0\n    for k,v in pairs(boredoms) do\n\
    \        if k ~= lastword then\n            numbored = numbored + 1\n        end\n\
    \        lastword = v\n    end\n    return numbored\nend", "    local bored =\
    \ 0\n    for w in S:gmatch(\"%w+\") do\n        if w == \"I\" and S:sub(1,1) ==\
    \ \"I\" then\n            bored = bored + 1\n        end\n    end\n    return\
    \ bored\nend", "   local boredoms = { 'I', \"i'm\", 'you', \"you're\", 'it', \"\
    it's\", 'the',\n      \"that's\", 'these', \"those're\", 'those', \"what's\",\
    \ 'which',\n      \"who's\", 'who', \"why's\", 'what', \"don't\", 'how', \"should've\"\
    ,\n      \"could've\", 'could'}", "    local n = 1\n    for w in S:gmatch(\"%w+\"\
    ) do\n        if w == \"I\" then\n            n = n + 1\n        end\n    end\n\
    \    return n\nend", "  -- BEGIN Question 1\n  --   Write a function called is_bored\
    \ that checks if the string S has a\n  -- boredom. is_bored has two parameters:\
    \ the given string S, and the\n  -- boredom dictionary boredom_dict (which you\
    \ filled in in the last part).\n  --\n  -- You can assume that S is actually a\
    \ string.\n  -- The function should return a boolean: True or False. \n  --\n\
    \  -- There are three boredom dictionaries: boredom_dict, boredom_dict_alt,\n\
    \  -- and boredom_dict_alt_2. The boredom dictionaries have the same\n  -- variables\
    \ and the same meaning as those in the last part. However,\n  -- you should use\
    \ only one of the three dictionaries.\n  --\n  -- You may not use the boredom_dict\
    \ or boredom_dict_alt dictionaries.\n  --\n  -- Here is an example of how this\
    \ function might work:\n  --\n  -- >>> is_bored(\"I love this weather\")\n  --\
    \ (True, 'love')\n  --\n  -- If your function returns False, then you have one\
    \ boredom: if the string\n  -- starts with a boredom. Otherwise the string does\
    \ not have a boredom.\n  -- END Question 1\n  --\n  -- BEGIN Question 2\n  --\
    \   Write a function called count_boredoms that takes a string S and returns\n\
    \  -- a table that contains the number of boredoms for each word in the string\n\
    \  -- and for every word in the boredom dictionary. \n  --\n  -- The function\
    \ should return a list of three integers (num_bored_words,\n  -- for number of\
    \ bored words in the string, and num_bored_words_alt,\n  -- for number of bored\
    \ words in the boredom dictionary). \n  --\n  -- You may not use the boredom_dict_alt\
    \ or boredom_dict_alt_2 dictionaries.\n  --\n  -- Here is an example of how this\
    \ function might work:\n  --\n  -- >>> count_boredoms(\"Hello world\")\n  -- (0,\
    \ 6, 0)\n  --\n  -- If your function returns None, then you have one boredom:\
    \ if the string\n  -- starts with a boredom. Otherwise the string does not have\
    \ a boredom.\n  -- END Question 2\n  --\n  -- BEGIN Question 3\n  --   Write a\
    \ function called count_boredoms that takes a string S and returns\n  -- a table\
    \ that contains the number of boredoms for each word in the string\n  -- and for\
    \ every word in the boredom dictionary. \n  --\n  -- The function should return\
    \ a list of three integers (num_bored_word", "  local words = S:gmatch(\"[%w\\\
    .?!]+\")\n  local num_boredoms = #words > 0 and words[1] == \"I\" and #S or 0\n\
    \  return num_boredoms\nend", "   if S == \"I\" then\n      return 0\n   else\n\
    \      return 1\n   end\nend", "    if S ~= nil and S ~= \"\" then\n        S\
    \ = string.lower(S)\n        if S == \"i\" then\n            return 0\n      \
    \  end\n        S = string.gsub(S, \" \", \".\")\n        S = string.gsub(S, \"\
    ?\", \".\") -- This is for avoiding \"?\"\n        S = string.gsub(S, \"!\", \"\
    .\")\n        S = string.gsub(S, \".{2,}\", \".\")\n        local NumB = 0\n \
    \       for w in S:gmatch(\"[%A^!%.]+\") do\n            if w == \"i\" then\n\
    \                NumB = NumB + 1\n            end\n        end\n        return\
    \ NumB\n    end\n    return 0\nend", "    local num = 0\n    local is_bored =\
    \ false\n    local cur_char = 1\n    while true do\n        if cur_char == 1 then\n\
    \            if S == \"I\" then\n                -- if we start with the word\
    \ \"I\", it's a boredom\n                is_bored = true\n            end\n  \
    \      end\n        if cur_char > 1 then\n            if S[cur_char] == \".\"\
    \ then\n                -- if we encounter a period, it's a boredom\n        \
    \        is_bored = true\n            end\n        end\n        if cur_char <\
    \ #S then\n            if S[cur_char] == \".\" then\n                -- if we\
    \ encounter a period, it's a boredom\n                is_bored = true\n      \
    \      end\n            if S[cur_char] == \"?\" then\n                -- if we\
    \ encounter a question mark, it's a boredom\n                is_bored = true\n\
    \            end\n            if S[cur_char] == \"!\" then\n                --\
    \ if we encounter a exclamation point, it's a boredom\n                is_bored\
    \ = true\n            end\n        end\n        if cur_char == #S then\n     \
    \       -- if we reach the end, it's a boredom\n            is_bored = true\n\
    \        end\n        -- keep going until we hit the end of the sentence or a\
    \ period\n        cur_char = (cur_char + 1) % (#S + 1)\n    end\n    return num\n\
    end", "   -- Your code here\n   \n   local i, count= 1, 1\n   for _, w in ipairs(S)\
    \ do\n      if w ~= 'I' then\n         count = count\n      else\n         count\
    \ = count + 1\n      end\n   end\n   return count\nend", "  local b = 0\n  for\
    \ w in S:gmatch(\".+[?!]\") do\n    if w:sub(1, 1) == \"I\" then\n      b = b\
    \ + 1\n    end\n  end\n  return b\nend", "    local n = 0\n    for w in S:gmatch(\"\
    [^.!?]+\") do\n        if w == \"I\" then\n            n = n + 1\n        end\n\
    \    end\n    return n\nend", "  S = S:gsub(\"\\.\\%?|\\!\\%?|\\?\\.\", '')\n\
    \  local I = S:find(\"^[I]\")\n  if I then return 0 end\n  local L = S:find(\"\
    ^%[I]\")\n  if L then return 0 end\n  local D = S:find(\"^%[D]\")\n  if D then\
    \ return 0 end\n  local M = S:find(\"^%[M]\")\n  if M then return 0 end\n  local\
    \ H = S:find(\"^%[H]\")\n  if H then return 0 end\n  local B = S:find(\"^%[B]\"\
    )\n  if B then return 0 end\n  local E = S:find(\"^%[E]\")\n  if E then return\
    \ 0 end\n  local N = S:find(\"^%[N]\")\n  if N then return 0 end\n  local S =\
    \ S:find(\"^%[S]\")\n  if S then return 0 end\n  local W = S:find(\"^%[W]\")\n\
    \  if W then return 0 end\n  local R = S:find(\"^%[R]\")\n  if R then return 0\
    \ end\n  local Y = S:find(\"^%[Y]\")\n  if Y then return 0 end\n  local Y = S:find(\"\
    ^%[Y]\")\n  if Y then return 0 end\n  local I = S:find(\"^%[I]\")\n  if I then\
    \ return 0 end\n  local P = S:find(\"^%[P]\")\n  if P then return 0 end\n  local\
    \ C = S:find(\"^%[C]\")\n  if C then return 0 end\n  local B = S:find(\"^%[B]\"\
    )\n  if B then return 0 end\n  local Y = S:find(\"^%[Y]\")\n  if Y then return\
    \ 0 end\n  local S = S:find(\"^%[S]\")\n  if S then return 0 end\n  local F =\
    \ S:find(\"^%[F]\")\n  if F then return 0 end\n  local R = S:find(\"^%[R]\")\n\
    \  if R then return 0 end\n  local V = S:find(\"^%[V]\")\n  if V then return 0\
    \ end\n  local C = S:find(\"^%[C]\")\n  if C then return 0 end\n  local T = S:find(\"\
    ^%[T]\")\n  if T then return 0 end\n  local E = S:find(\"^%[E]\")\n  if E then\
    \ return 0 end\n  local R = S:find(\"^%[R]\")\n  if R then return 0 end\n  local\
    \ P = S:find(\"^%[P]\")\n  if P then return 0 end\n  ", "    local i, n = 1, #S\n\
    \    local boredoms = 0\n    while i < n do\n        local c = S[i]\n        local\
    \ lower, upper = string.lower(c), string.upper(c)\n        if lower == \"i\" then\n\
    \            if upper == \"S\" then\n                boredoms = boredoms + 1\n\
    \            end\n            i = i + 1\n        elseif lower == \".\" or lower\
    \ == \"?\" or lower == \"!\" then\n            i = i + 1\n        else\n     \
    \       i = i + 1\n        end\n    end\n    return boredoms\nend", "   if S ==\
    \ \"I\" then return 1 end\n   local word_count = {}\n   for w in S:gmatch(\"[%.!?]+\"\
    ) do word_count[w] = word_count[w] + 1 end\n   for k, v in pairs(word_count) do\n\
    \      if k ~= \"I\" and v == 1 then return 1 end\n   end\n   return 0\nend",
  "    local boredom = 0\n    local word = S\n    local i = 1 -- Index of current\
    \ word\n    while i <= #S do\n        -- If the current word is not 'I', add 1\
    \ to boredom\n        if S[i]~=\"I\" then\n            boredom = boredom+1\n \
    \       end -- End if\n        -- Increment index\n        i = i+1\n    end --\
    \ End while\n    return boredom\nend -- End is_bored()", "  -- Your code here\n\
    \  local boredoms = 0\n  for i=1, #S do\n    if S[i] == \"I\" then\n      if i\
    \ > 1 then\n        if S[i - 1] == \".\" then\n          boredoms = boredoms +\
    \ 1\n        end\n        if S[i - 1] == \"?\" then\n          boredoms = boredoms\
    \ + 1\n        end\n        if S[i - 1] == \"!\" then\n          boredoms = boredoms\
    \ + 1\n        end\n      end\n    end\n  end\n  return boredoms\nend", "  local\
    \ bored = 0\n  for w in S:gmatch(\"%S+\") do\n    if w:lower():sub(1, 1) == \"\
    i\" then\n      bored = bored + 1\n    end\n  end\n  return bored\nend", "\t--\
    \ Your code here\n\t\n\t-- Don't forget to return the number of boredoms.\n\t\
    return 0\nend", "  -- There are four boredoms in a string:\n  --\n  -- 'I love\
    \ this weather.'\n  -- 'The sky is blue.'\n  -- 'The sun is shining.'\n  -- 'Hello\
    \ world'\n  --\n  -- 'I' comes first.\n  -- '.' comes second.\n  -- '!' comes\
    \ last.", "    local bored = 0\n    for w in S:gmatch(\"[%S]+\") do\n        if\
    \ w == \"I\" and #S == 1 and S[1] == \"I\" then\n            bored = bored + 1\n\
    \        end\n    end\n    return bored\nend", "  S = string.lower(S)\n  local\
    \ boredoms = {['.', '!', '?']} -- the boredoms we expect\n  local n = 0 -- the\
    \ number of boredoms we find\n  for w in S:gmatch(\"%w+\") do -- find the words\
    \ in the sentence\n    w = w:lower()\n    for b in boredoms do -- check if it\
    \ is a boredom word\n      if w:sub(1, 1) ~= b then -- check if the first letter\
    \ does not match\n        n = n + 1 -- if it is a boredom, increment the count\n\
    \        break\n      end\n    end\n  end\n  return n\nend", "   if S == \"I\"\
    \ then\n      return 0\n   elseif S == \"Bore\" then\n      return 1\n   elseif\
    \ S == \"Bored\" then\n      return 2\n   elseif S:match(\"[.!?]\") then\n   \
    \   return is_bored(S:sub(1, S:len()))\n   else\n      return 0\n   end\nend",
  "\tlocal count = 0\n\tfor w in S:gmatch(\"%w+\") do\n\t\tif w == \"I\" then count\
    \ = count + 1\n\t\telse count = count - 1\n\t\tend\n\tend\n\treturn count\nend",
  "    local bored_count = 0\n    for i = 1, #S do\n        if string.sub(S[i], 1,\
    \ 1) == \"I\" then\n            bored_count = bored_count + 1\n        end\n \
    \   end\n    return bored_count\nend", '  -- The code below is provided as a hint
    and not for you to complete.', "\tlocal words = split(S)\n\tfor i = 1, #words\
    \ do\n\t\tif words[i] == \"I\" then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn\
    \ 0\nend", "\t-- Remove punctuation and lower case all letters\n\tS = gsub(\"\
    [%!.?]+\", \" \", S)", "  S = string.gsub(S,\".*[.!?]$\", \"\")\n  S = string.gsub(S,\
    \ \"^[I]\", \"\")\n  S = string.gsub(S, \"[I].*\", \"\")\n  return #S/2 >= 2\n\
    end", "  local count = 0\n  for w in S:gmatch('(I%w+[.!?])') do\n    count = count\
    \ + 1\n  end\n  return count\nend", "    S = S:lower()\n    local boredom = 0\n\
    \    for i, w in ipairs(S) do\n        if w:sub(1,1) == 'i' then\n           \
    \ boredom = boredom + 1 -- count boredom\n        end\n    end\n    return boredom\n\
    end", "  local count = 0\n  for w in S:gmatch(\"[%w.]+\") do\n    if w == \"I\"\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\n</cell>\n\
    <text>\nExercise: Write a function count_words(S, S1) that takes two strings as\
    \ arguments. S is any string and S1 is the other string that is to be compared\
    \ to S. Return a list of the words from S1 that appear in S. If there are no words\
    \ in S1, return an empty list.", "  local boredoms = 0\n  -- Only use words before\
    \ the first '.', '?' or '!'.\n  for w in S:gmatch(\"[^.?!]+\") do\n    if w ==\
    \ \"I\" then\n      -- If w is the word \"I\", then ignore it.\n    elseif w ==\
    \ \".\" then boredoms = boredoms + 1 end\n  end\n  return boredoms\nend", "\t\
    local boredom = {}\n\tfor _, word in string.gmatch(S, \"(^([Ii]%.*)|%.+)\") do\n\
    \t\tboredom[word] = nil\n\tend\n\treturn #boredom > 0\nend", "\tlocal count =\
    \ 0\n\tfor w in S:gmatch(\"[I]?%w+\") do\n\t\tcount = count + 1\n\tend\n\treturn\
    \ count\nend", "  -- Your code here\n  local b=0\n  for i in S:gmatch(\"([^?.!])\"\
    ) do\n    if(i~=\"I\") then\n      b=b+1\n    end\n  end\n  return b\nend", " \
    \   S = S:lower()\n    local N = #S", "   if S == \"I\" then return 1 end\n  \
    \ local i, l = S:find('[.!?]+')\n   return i and l == 1 and S:sub(1, i-1) == \"\
    I\"\nend", "   local _, count = strfind(S, \"^I\")\n   return count\nend", " \
    \ local boredom_count = 0\n  for w in S:gmatch(\"([I].+)[.?!]\") do boredom_count\
    \ = boredom_count + 1 end\n  return boredom_count\nend", "  local count\n  for\
    \ word in S:gmatch(\"[%S]+\") do\n    count = count + 1\n    if word == \"I\"\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "  local\
    \ boredom = {}\n  for word in S:gmatch('(%S+)%.?([!?.])') do\n    table.insert(boredom,\
    \ word)\n  end", "  return ((S:find(\"[.?!]\") == 1) or (S:sub(1, 2) == \"I \"\
    ))\nend", "  return count_boredom(S, string.match, string.sub, S) == '1'\nend",
  "  if type(S) ~= \"string\" then return 0 end\n  S = S:lower()\n  return S:match('[^.!?]I[%!.?]*$')\
    \ or 0 -- Count 'I' at the end of the sentence\nend", "    local n = 0\n    for\
    \ w in S:gmatch(\"[I].+\") do\n        n = n + 1\n    end\n    return n\nend\n\
    </cell>\n<text>\n2.2 Complete the function bored_words that takes in a list of\
    \ bored words\nYou may have noticed that our bored_words function actually takes\
    \ in a list of words as its input. While this is a great start in building out\
    \ our bored words function, it is redundant for us to define such a function in\
    \ such a way as to actually check whether or not a word is bored. Fortunately,\
    \ we have this list of \"bored\" words saved as boredWords in the file boredWords.txt.",
  "   -- Your code here\n   local boredom = 0\n   for i = 1, #S do\n      if S[i]\
    \ == \"I\" then\n         boredom = boredom + 1\n      end\n   end\n   return\
    \ boredom\nend", "   S = string.lower(S) -- To ignore capitalization\n   if S\
    \ == \"i\" then return 0 end\n   if S == \"\" then return 0 end\n   if S ~= \"\
    \" then -- Ignore everything before the first \".\" -- This could also be done\
    \ with Lua tables and a for loop\n      local _, p = S:find(\".\")\n      if p\
    \ then S = S:sub(1,p) end\n   end\n   local n, m = S:find(\"!\")\n   if n and\
    \ m then return 0 end\n   local _, p = S:find(\"?\")\n   if p then return 0 end\n\
    \   local _, p = S:find(\".\")\n   if p then return 0 end\n   return 1\nend",
  "  S = S:lower()\n  local I = 0\n  for s in S:gmatch('.+[.!?]') do -- look for \"\
    .\", \"!\" and \"?\"\n    I = I + 1\n    if s:sub(1, 1) == \"i\" then -- look\
    \ for the beginning of a word\n      I = I + 1\n    end\n  end\n  return I\nend",
  "  S = S:lower()\n  for _, word in next, split(S, '.?!') do\n    if word == 'i'\
    \  or word == 'i' then\n      return 1\n    end\n  end\n  return 0\nend", "\t\
    local count = 0\n\tfor w in S:gmatch(\"[I]%S+\") do\n\t\tcount = count + 1\n\t\
    end\n\treturn count\nend", '   if S == nil then return end', "    local boredoms\
    \ = { 'I', 'a', 'my', 'myself', 'your', 'yourself', 'yourselves', 'I', 'you',\
    \ 'they', 'them', 'their', 'theirs', 'its', 'itself', 'we', 'our', 'ours', 'ourselves',\
    \ 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself',\
    \ 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their',\
    \ 'theirs', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were',\
    \ 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did',\
    \ 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until',\
    \ 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into',\
    \ 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up',\
    \ 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then',\
    \ 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both',\
    \ 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not',\
    \ 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will',\
    \ 'just', 'don', 'should', 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain',\
    \ 'aren', 'couldn', 'didn', 'doesn', 'hadn', 'hasn', 'haven', 'isn', 'ma', 'mightn',\
    \ 'mustn', 'needn', 'shan', 'shouldn', 'wasn', 'weren', 'won', 'wouldn' }\n  \
    \  local words = S\n    local count = 0\n    for word in string.gmatch(words,\
    \ '[^.!?]+') do count = count + 1 end\n    for word in string.gmatch(words, 'I[^.!?]+')\
    \ do count = count + 1 end\n    for word in string.gmatch(words, 'a[^.!?]+') do\
    \ count = count + 1 end\n    for word in string.gmatch(words, 'my[^.!?]+') do\
    \ count = count + 1 end\n    for word in string.gmatch(words, 'myself[^.!?]+')\
    \ do count = count + 1 end\n    for word in string.gmatch(words, 'your[^.!?]+')\
    \ do count = count + 1 end\n    for word in string.gmatch(words, 'yourself[^.!?]+')\
    \ do count = count + 1 end\n    for word in string.gmatch(words, 'yourselves[^.!?]+')\
    \ do count = count ", "    if S == \"I\" then\n        return 0\n    end", " \
    \   local bored = 0\n    for _, word in gsub(S, \"(^|[.!?])(I[ -]?)?\", function\
    \ (t) bored = bored + 1 end) do\n        bored = bored + 1\n    end\n    return\
    \ bored\nend", "  local num_boredoms = 0\n  -- remove trailing period\n  S = string.sub(S,\
    \ 1, string.len(S) - 1);\n  -- remove trailing period and question marks\n  S\
    \ = string.sub(S, 1, string.len(S) - 1);\n  -- remove trailing period and question\
    \ marks\n  S = string.sub(S, 1, string.len(S) - 1);\n  -- split on period\n  for\
    \ i = 1, string.len(S) - 1, 1 do\n    if S[i] == '.' then\n      num_boredoms\
    \ = num_boredoms + 1\n    end\n  end\n  return num_boredoms\nend", "   local n\
    \ = 0\n   for w in string.gmatch(S, \"[^.!?]+\") do\n      if w == \"I\" then\
    \ n = n + 1\n      elseif w == \".\" then n = n + 1\n      elseif w == \"!\" then\
    \ n = n + 1\n      elseif w == \"?\" then n = n + 1\n      end\n   end\n   return\
    \ n\nend", "\tlocal count = 0\n\tlocal words = S.gmatch(\"[!?]+\")\n\tfor w in\
    \ words do\n\t\tif w == \"I\" then\n\t\t\tcount = count + 1\n\t\telse\n\t\t\t\
    break\n\t\tend\n\tend\n\treturn count\nend", "    local boredom = false\n    for\
    \ w in S:gmatch(\"%S+\") do\n        if w == 'I' then\n            boredom = true\n\
    \            break\n        end\n    end\n    return boredom\nend", "  local num_boredoms\
    \ = 0\n  for word in S:gmatch(\"([^.?!]+)\")  do\n    if word:sub(1, 1) == \"\
    I\" then\n      num_boredoms = num_boredoms + 1\n    end\n  end\n  return num_boredoms\n\
    end", "    local n=0\n    for w in S:gmatch(\"%w+\") do\n        if w:sub(1,1)\
    \ == \"I\" then n = n+1 end\n    end\n    return n\nend", "    local boredom =\
    \ true\n    for word in S:gmatch(\"[I%S!%S%.]+\") do\n        boredom = boredom\
    \ and (word == \"I\")\n    end\n    return boredom\nend", "    local bored_count\
    \ = 0\n    for word in S:gmatch(\"[%w]+[.?!]*\") do\n        if word == \"I\"\
    \ then\n            bored_count = bored_count + 1\n        end\n    end\n    return\
    \ bored_count\nend", "\tlocal bored = 0\n\tfor w in S:gmatch(\"%S+\") do\n\t\t\
    local boredom = 0\n\t\tfor w in {\"I\", \".\", \"?\", \"!\"} do\n\t\t\tif w ==\
    \ w[1] then\n\t\t\t\tboredom = boredom + 1 -- Increment if first letter is I\n\
    \t\t\tend\n\t\tend\n\t\tif boredom > 0 then\n\t\t\tbored = bored + 1\n\t\tend\n\
    \tend\n\treturn bored\nend", "   local count, start, len = 0, 0, 0\n   local boredom\
    \ = true\n   for w in S:gmatch'([.!?]%w+)' do\n      count = count + 1\n     \
    \ if w == \"I\" then\n         start = true\n      end\n      if start then\n\
    \         if w == \".\" then\n            boredom = false\n         elseif w ==\
    \ \"?\" then\n            boredom = false\n         elseif w == \"!\" then\n \
    \           boredom = true\n         end\n      end\n   end\n   return count and\
    \ boredom\nend", "  S = S:gsub('.', '.')\n  S = S:gsub('?', '.?')\n  S = S:gsub('!',\
    \ '!')\n  local i, L = 1, #S\n  while i < L do\n    if S == 'I' then return i\
    \ end\n    i = i + 1\n  end\n  return 0\nend", "  local count = { }\n  for word\
    \ in S:gmatch(\"%w+\") do\n    table.insert(count, word:sub(1, 1):upper() .. word:sub(2))\n\
    \  end\n  if #count >= 1 then\n    return #count - 2\n  end\n  return nil\nend",
  "\tlocal boredoms = 0\n\t-- Find the index of the first instance of a boredom\n\t\
    S = S:gsub('.', '') -- Replace '.'s with nothing.\n\tfor i = 1, #S do\n\t\tif\
    \ S[i] == 'I' then\n\t\t\tboredoms = boredoms + 1\n\t\tend\n\tend\n\treturn boredoms\n\
    end", "  local BORED_START = \"I\"\n  return S(1,1) ~= BORED_START and 0\nend",
  "    local count = 0\n    local tokens = tokenize(S)\n    for _, s in ipairs(tokens)\
    \ do\n        if s:sub(1,1) == \"I\" then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend", "\tlocal bored = false\n\t-- For each\
    \ word in the given string\n\tfor w in S:gmatch(\"[^ ]+\") do\n\t\t-- If the word\
    \ starts with I, it's bored\n\t\tif w == 'I' then\n\t\t\tbored = true\n\t\tend\n\
    \tend\n\treturn bored\nend", "  -- Write your code here\n  return true\nend",
  "  local count = 0\n  for w in S:gmatch(\"[I%.]+\") do count = count + 1 end\n \
    \ return count\nend\n</cell>\n<cell>", "  -- Write your function here\n  return\
    \ true\nend", "    local num_boredoms = 0\n    for w in string.gmatch(S, \"[.?!]([^.?!]*)\"\
    ) do\n        local boredoms = string.find(w, \"^I\")\n        if boredoms ~=\
    \ nil then\n            num_boredoms = num_boredoms + 1\n        end\n    end\n\
    \    return num_boredoms\nend", "  local I = 0\n  for w in S:gmatch(\"[^I%%.!?]+\"\
    ) do I = I + 1 end\n  return I\nend", "  local boredoms = 0\n  -- We only need\
    \ to go through each word in the string.\n  for w in S:gmatch(\"[^\\.!?]+\") do\n\
    \    -- If the word begins with the letter 'I' then we increment the count.\n\
    \    if w == 'I' then\n      boredoms = boredoms + 1\n    end\n  end\n  return\
    \ boredoms\nend", "    local boredoms = 0\n    local I = string.find(S, \"I\"\
    , 1, true)\n    while I do\n        if string.sub(S, I, I) ~= \".\" then\n   \
    \         boredoms = boredoms + 1\n        end\n        I = string.find(S, \"\
    .\", I + 2, true)\n    end\n    return boredoms\nend", "  local boredoms = { }\n\
    \  for w in S:gmatch(\"[\\.?!]+\") do\n    boredoms[#boredoms+1] = w .. \"!\"\n\
    \  end\n  return #boredoms >= 1 and boredoms[1] == \"I\"\nend", "  -- Your code\
    \ here\nend", "   local I = string.find(S, \"[^.!?]*I%S\")\n   if I then\n   \
    \   return string.find(S, \"[^.!?]*\")-I\n   else\n      return 0\n   end\nend",
  "\t-- Your code here\n\treturn 0 \nend", "   if S ~= nil and S ~= \"\" then\n  \
    \    S = S:lower()\n      local bored = S:sub(1,1):lower() == \"i\"\n      --\
    \ print(S)\n      return bored\n   else\n      return nil\n   end\nend", "   \
    \ -- Write your code here\n    local cnt = 0\n    for i=1,#S do\n        if S[i]\
    \ == '.' or S[i] == '?' or S[i] == '!' then\n            cnt = cnt + 1\n     \
    \   end\n    end\n    return cnt\nend", "   if S:sub(1,1) == \"I\" then return\
    \ 1 end\n   if S:sub(1,3) == \"I\" then return 1 end\n   if S:sub(1,6) == \"I\"\
    \ then return 1 end\n   return 0\nend", "    local boredom = {}\n    local bored\
    \ = 0\n    for w in S:gmatch(\"[%a\\.?!]*\") do\n        if w == 'I' then bored\
    \ = bored + 1 end\n        table.insert(boredom, w)\n    end\n    return bored\n\
    end", "   if type(S) ~= \"string\" then\n      return 0\n   end", "  local boredom\
    \ = tonumber(string.match(S, \"^I.*\")) == 1\n  return boredom or tonumber(string.match(S,\
    \ \"^.?!.*\")) == 1\nend", '   S = S:lower()', "  local count = 0\n  for w in\
    \ S:gmatch(\"[^ .!?]+\") do\n    count = count + 1 if w == \"I\" end\n  end\n\
    \  return count\nend", "    local boredom = 0\n    for word in S:gmatch(\"(I%S+)\"\
    ) do boredom = boredom + 1 end\n    return boredom\nend", "   local I = S:find(\"\
    ^I\")\n   if I ~= nil then\n      -- The first character in the string is 'I'.\n\
    \      -- The second character is one of '.', '?' or '!'.\n      -- Thus, if we\
    \ get to here, the string starts with \"I\".\n      -- So, return the number of\
    \ characters in S starting with \"I\".\n      return (#S) - I\n   end\n   -- Otherwise,\
    \ if the string doesn't start with \"I\", the string isn't bored.\n   return 0\n\
    end", "    local N = 0\n    for i, w =\n        S:gmatch(\"(^| )(I%S+)[.?!]([^.?!]+)\"\
    )\n    do\n        N = N + 1\n    end\n    return N\nend", "    local count =\
    \ 0\n    local words = string.gmatch(S, \"[^.?!]+\")\n    for _, word in ipairs(words)\
    \ do\n        if word == \"I\" then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  if S then\n    local S = S:gsub(\"\\.[?!]$\"\
    , \"\")\n    return S == \"I\" and 1 or 0\n  else\n    return 0\n  end\nend",
  "  return #S:find(S[1]) == 4\nend", "  -- Write your code here.\n  return 0\nend",
  "  local boredoms = 0\n  for w in S:gmatch(\"[?.!]\") do\n    if w:sub(1,1) == \"\
    I\" then\n      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend",
  "    local boredom_count = 0\n    for w in S:gmatch(\"(%.+?[!?.]%+)\") do\n    \
    \    if w == \"I\" then\n            boredom_count = boredom_count + 1\n     \
    \   end\n    end\n    return boredom_count\nend", "   -- Your code here\n   return\
    \ ...\nend", "    local count = 0\n    for w in S:gmatch(\"[%a!?.]+\") do\n  \
    \      count = count + 1\n    end\n    return count\nend", "   for w in S:gmatch'[?!.]+'\
    \ do\n      if w == \"I\" then\n         return 1\n      end\n   end\n   return\
    \ 0\nend", "\tlocal I = {}\n\tfor w in string.gmatch(S, \"[^.?.!]+\") do table.insert(I,w)\
    \ end\n\t-- If any letter starts with \"I\", then it is bored.\n\tfor i,v in ipairs(I)\
    \ do\n\t\tif v == \"I\" then\n\t\t\treturn 1\n\t\tend\n\tend\n\treturn 0\nend",
  "\tlocal count = 0\n\tfor _,v in pairs(S:gmatch(\"(I+.+)%s*(.+)\")) do\n\t\tcount\
    \ = count + 1\n\tend\n\treturn count\nend", "   for w in string.gmatch(S, \"([^.?!]+)\"\
    )\n   do if w == \"I\" then return 1 end; end\n   return 0\nend", "  local I =\
    \ 1\n  for w in S:gmatch(\"[\\.\\?\\!]\") do\n    if w:sub(1, 1) == \"I\" then\n\
    \      I = I + 1\n    end\n  end\n  return I\nend", "  local n = 0\n  local is_bored\
    \ = false\n  for w in S:gmatch(\"%w+\") do\n    if w == \"I\" then\n      is_bored\
    \ = true\n      break\n    end\n    n = n + 1\n  end\n  return n\nend", "   --\
    \ TODO: implement a smarter algorithm that takes the \n   -- context into account\n\
    \   \n   -- Here are some helpful functions\n   local function find(word, S)\n\
    \      if S:match(word) then\n         return true\n      else\n         return\
    \ find(word, S:sub(1, S:len()))\n      end\n   end\n   \n   local function next_word(S)\n\
    \      if S:match('.') then\n         return S:match('(%S+)\\.')\n      elseif\
    \ S:match('\\?') then\n         return S:match('(%S+)\\?')\n      elseif S:match('\\\
    !') then\n         return S:match('(%S+)\\!')\n      else\n         return S:match('(%S+)%s+')\n\
    \      end\n   end\n   \n   local function next_punc(S)\n      if S:match('\\\
    ?') then\n         return S:match('(%S+)\\?')\n      elseif S:match('\\.') then\n\
    \         return S:match('(%S+)\\.')\n      else\n         return S:match('(%S+)%s+')\n\
    \      end\n   end\n   \n   -- Here is a solution using regular expressions\n\
    \   if S:match('[^ ]+') then\n      return 0\n   else\n      local words = S:match('[^\
    \ ]+')\n      for i = 1, #words do\n         if find(words[i], 'I') then\n   \
    \         return 1\n         end\n      end\n   end\nend\n</cell>\n<text>\nTest\
    \ your code\nRun the cell containing the function definitions.", "  local I =\
    \ 1\n  for s in S:gmatch(\".+[.?!]+\") do\n    if string.sub(s,1,1) == \"I\" then\n\
    \      I = I + 1\n    end\n  end\n  return I\nend", "  local i = 0\n  local count\
    \ = 0\n  for word in S:gmatch(\"[%S]+\") do\n    if word == \"I\" then\n     \
    \ count = count + 1\n    end\n    i = i + 1\n  end\n  return count\nend", "  \
    \  local bored = 0\n    for w in S:gmatch(\"[%z%.?!]+\") do\n        bored = bored\
    \ or w:sub(1,1) == 'I'\n    end\n    return bored\nend", "\tlocal BOREDOM = {\n\
    \t\t[\"I\"] = 1,\n\t\t[\"you\"] = 1,\n\t\t[\"we\"] = 1,\n\t\t[\"us\"] = 1,\n\t\
    \t[\"our\"] = 1,\n\t\t[\"you're\"] = 1,\n\t\t[\"you've\"] = 1,\n\t\t[\"you'll\"\
    ] = 1,\n\t\t[\"you'd\"] = 1,\n\t\t[\"you'd\"] = 1,\n\t\t[\"you'll\"] = 1,\n\t\t\
    [\"you'll\"] = 1,\n\t\t[\"you've\"] = 1,\n\t\t[\"you're\"] = 1,\n\t\t[\"I'm\"\
    ] = 1,\n\t\t[\"I've\"] = 1,\n\t\t[\"you're\"] = 1,\n\t\t[\"you've\"] = 1,\n\t\t\
    [\"it's\"] = 1\n\t}\n\tlocal words = string.gmatch(S, \"(%a+)%.?(%a+)%.?(%a+)%.?(%a+)%.?(%a+)%.?(%a+)%.?(%a+)\"\
    )\n\tif words == nil then\n\t\treturn 0\n\tend\n\tlocal count = 0\n\tfor _, word\
    \ in pairs(words) do\n\t\tif BOREDOM[word] ~= nil then\n\t\t\tcount = count +\
    \ 1\n\t\tend\n\tend\n\treturn count\nend", "   for w in S:gmatch(\"[%.?!]+\")\
    \ do -- Iterate over every word\n      if w == \"I\" then\n         return 1\n\
    \      end\n   end\n   return 0\nend", "    local BOREDOM_RE = { \n        [\"\
    .\"] = 0,\n        [\"?\"] = 0,\n        [\"!\"] = 0, \n    }", "  S = S:gsub(\"\
    %.\", \"\")\n  if S:sub(1, 1) == \"I\" and S:sub(2, 1) == \"I\" then\n    return\
    \ 1\n  end\n  return 0\nend", "  -- Your code here\n  local boredom = 0\n  S =\
    \ string.lower(S)\n  S = string.gsub(S, \" ?!\", \"\")\n  S = string.gsub(S, \"\
    [Ii][Ii]\", \"\")\n  S = string.gsub(S, \"([Ii])+\", \"\\\\1\")\n  S = string.gsub(S,\
    \ \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S,\
    \ \"([.?!])\", \".\")\n  S = string.gsub(S, \"([^.?!])\", \".\")\n  S = string.gsub(S,\
    \ \"([.?!])\", \".\")\n  S = string.gsub(S, \"(.)\\\\1\", \".\")\n  S = string.gsub(S,\
    \ \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S,\
    \ \"(.)([^.?!])\", \"\\\\1\\\\2\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n\
    \  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\", \"\
    .\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")\n  S = string.gsub(S, \"([.?!])\", \".\")\n  S = string.gsub(S, \"([.?!])\"\
    , \".\")", "    local cboredom = {}\n    for i, x in pairs(S) do\n        -- If\
    \ 'x' is an 'I', store it in the 'cboredom' variable\n        if x:sub(1,1) ==\
    \ \"I\" then cboredom[#cboredom + 1] = x\n        -- If 'x' is a '.', store it\
    \ in the 'cboredom' variable\n        elseif x == '.' then cboredom[#cboredom\
    \ + 1] = x\n        -- If 'x' is a '?', store it in the 'cboredom' variable\n\
    \        elseif x == '?' then cboredom[#cboredom + 1] = x\n        -- If 'x' is\
    \ a '!', store it in the 'cboredom' variable\n        elseif x == '!' then cboredom[#cboredom\
    \ + 1] = x\n        -- If 'x' is a number, store it in the 'cboredom' variable\n\
    \        elseif x == '' then cboredom[#cboredom + 1] = x\n        end\n    end\n\
    \    local boredom_cnt = 0\n    for i, x in pairs(cboredom) do\n        if x:sub(1,1)\
    \ == \"I\" then\n            boredom_cnt = boredom_cnt + 1\n        end\n    end\n\
    \    return boredom_cnt\nend", "    local boredom = S:match(\"^I[\\.?!]%w\")\n\
    \    if boredom == nil then\n        return 0\n    end\n    local count = #boredom\n\
    \    for i = 2, count do\n        if boredom[i] ~= '.' then\n            return\
    \ boredom[i]\n        end\n    end\n    return count\nend", "  S = string.gsub(S,\
    \ \"[.?!]\", \"\")\n  local I = 0\n  for w in string.gmatch(S, \"[^I]+\") do\n\
    \    if w == \"I\" then\n      I = I + 1\n    end\n  end\n  return I\nend", " \
    \ local bored = 0\n  for word in S:gmatch(\"[%w\\?\\!]+\") do\n    if word:sub(1,1)==\"\
    I\" then \n      bored = bored + 1 \n    end\n  end\n  return bored\nend", " \
    \  if type(S) ~= 'string' then return end\n   if S:sub(1,1) ~= 'I' then return\
    \ 0 end\n   if S:sub(1,2) == '!' then return 0 end\n   if S:sub(1,3) == '?' then\
    \ return 0 end\n   return 1\nend", "  local count = 0\n  for w in S:gmatch(\"\
    [%w\\.\\?\\!]+\") do count = count + 1 end\n  return count\nend", "\tS = S:gsub('(^|\\\
    \\W)([I])(.*$)','\\\\1\\\\3')\n\tS = S:gsub('(^|\\\\W)([I])(.*[.?!])','\\\\1\\\
    \\3')\n\treturn tonumber(S:sub(1,-2))\nend", "   if S == nil then\n      return\
    \ nil\n   end", "  local count = 0\n  for w in S:gmatch(\"[%S%.]\") do\n    if\
    \ w == \"I\" then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "  local n = 0\n  for w in S:gmatch(\"[?.!]\") do\n    if w == \"I\" then n = n+1\
    \ end\n  end\n  return n\nend", "  if S == \"I\" then\n    return 0\n  end", " \
    \   local count = 0\n    for w in S:gmatch(\"[^.?!]+\") do\n        if w:lower()\
    \ ~= \"i\" then count = count + 1 end\n    end\n    return count\nend\n</code>\n\
    <|/ a tags=lua,pattern-matching dscore=2 |>\n<| a dscore=2 tags=lua,pattern-matching\
    \ |>\n<code>", "  -- Write your code here.\nend", "    -- Your code here!\n  \
    \  if S == \"Hello world\" then\n        return 0\n    elseif S == \"The sky is\
    \ blue. The sun is shining. I love this weather\" then\n        return 1\n   \
    \ else\n        return nil\n    end\nend", "    local count = 0\n    for word\
    \ in S:gmatch(\"[^\\.\\?\\!]+\") do\n        if word == \"I\" then\n         \
    \   count = count + 1\n        end\n    end\n    return count\nend", "  -- TODO:\
    \ Write the is_bored function here (29 points).\n  return 1\nend", "  -- Your\
    \ code here!\n  return 1\nend", "  -- Your code here\n  local words = S.words:gsub(\"\
    (%b+)\",\"%1\")\n  local count = 0\n  for word in words:gmatch(\"[!?.]\") do\n\
    \    if word == \"I\" then\n      count = count+1\n    end\n  end\n  return count\n\
    end", "  return string.sub(S, 1, 1) ~= \"I\" or string.find(S, \"[.?!]\") == nil\n\
    end", "    local words = {}\n    for w in S:gmatch(\"([A-Za-z]+)\") do words[w]\
    \ = true end\n    local boredom = {}\n    for w in words if words[w] then boredom[w]\
    \ = true end\n    return #boredom\nend", "  local boredom = S == \"I\" and S or\
    \ S:sub(1, 1)\n  local cnt = 0\n  for w in string.gmatch(S, \"[^.!?]+\") do\n\
    \    cnt = cnt + boredom:find(w)\n  end\n  return cnt\nend", "    local BOREMS\
    \ = { '.', '?', '!' }\n    local count = 0\n    for w in S:gmatch(\"%w+\") do\n\
    \        count = count + 1\n        for b in BOREMS do\n            if w:sub(1,\
    \ 1) == b then\n                return count\n            end\n        end\n \
    \   end\n    return count\nend", "    local count = 0\n    for _, w in ipairs(S:gmatch('.?!?'))\
    \ do\n        if w == \"I\" then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
