name: HumanEval_124_valid_date
language: lua
results:
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   local date_parts = string.split(date,\
    \ \"-\")\n   local month_count = 0\n   for i,v in pairs(date_parts) do\n     \
    \ if i%2 ~= 0 then\n         month_count = month_count + 1\n      end\n   end\n\
    \   if month_count >= 1 and month_count <= 12 then\n      if string.len(date_parts[2])>0\
    \ and string.len(date_parts[2])<11 then\n         return true\n      end\n   \
    \   if string.len(date_parts[2])>1 and string.len(date_parts[2])<12 then\n   \
    \      return true\n      end\n      if string.len(date_parts[2])>2 then\n   \
    \      return true\n      end\n   else\n      return false\n   end\nend\n</code>\n\
    <|/ a tags=lua,lua-patterns dscore=0 |>\n<| c |>\nThat works great but can you\
    \ please explain to me the logic behind it ?\n<|/ c |>\n<| c |>\nI hope this helps\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuz4fkxpc.lua:36: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if not date or #date == 0 then\n\
    \    return false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2kgj6wqq.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    date = string.gsub(string.format(\"\
    %1$s%2$s%3$s\", \"01\", \"01\", \"1970\"), \"-\", \"\")\n    local day = 1\n \
    \   local month = 1\n    local year = 1970\n    local day = string.sub(date, 2,\
    \ 2)\n    local month = string.sub(date, 4, 2)\n    local year = string.sub(date,\
    \ 6, 4)\n    local year = tonumber(year)\n    if year < 1970 then\n        year\
    \ = 1970\n    end\n    if month < 1 or month > 12 then\n        month = 1\n  \
    \  end\n    month = (month - 1) * ((12 + month - 1) % 12 + 1)\n    if day < 1\
    \ or day > 31 then\n        day = 1\n    end\n    if day > 30 then\n        day\
    \ = 30\n    end\n    if day > 29 then\n        day = 29\n    end\n    if day >\
    \ 28 then\n        day = 28\n    end\n    if day > 28 then\n        day = 28\n\
    \    end\n    return month == day and year > 1900\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz1wc2u16.lua:15:\
    \ invalid option '%$' to 'format'\nstack traceback:\n\t/tmp/tmpz1wc2u16.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpz1wc2u16.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month,day,year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = month-1\n    if month < 1 or month\
    \ > 12 then\n        return false\n    end\n    if day < 1 or day > 29 then\n\
    \        return false\n    end\n    if month == 1 then\n        if day > 31 then\n\
    \            return false\n        else\n            return true\n        end\n\
    \    elseif month == 3 then\n        if day > 30 then\n            return false\n\
    \        else\n            return true\n        end\n    elseif month == 5 then\n\
    \        if day > 31 then\n            return false\n        else\n          \
    \  return true\n        end\n    elseif month == 7 then\n        if day > 31 then\n\
    \            return false\n        else\n            return true\n        end\n\
    \    elseif month == 8 then\n        if day > 31 then\n            return false\n\
    \        else\n            return true\n        end\n    elseif month == 10 then\n\
    \        if day > 31 then\n            return false\n        else\n          \
    \  return true\n        end\n    elseif month == 12 then\n        if day > 31\
    \ then\n            return false\n        else\n            return true\n    \
    \    end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsedcn524.lua:77:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpsedcn524.lua:77: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tdate = date:lower()\n\tlocal months\
    \ = {\n\t\t[1] = '01',\n\t\t[3] = '03',\n\t\t[5] = '05',\n\t\t[7] = '07',\n\t\t\
    [8] = '08',\n\t\t[10] = '10',\n\t\t[12] = '12',\n\t}\n\tlocal days = {\n\t\t[1]\
    \ = 1,\n\t\t[3] = 1,\n\t\t[5] = 1,\n\t\t[7] = 1,\n\t\t[8] = 1,\n\t\t[10] = 1,\n\
    \t\t[12] = 31,\n\t\t[13] = 30,\n\t\t[14] = 31,\n\t}\n\tlocal months_ok = months[string.match(date,\
    \ \"%m-%d-%Y\")] ~= nil\n\tlocal days_ok = days[string.match(date, \"%d-%d-%Y\"\
    )] ~= nil\n\tlocal days_ok = days_ok and days_ok and days_ok and days_ok and days_ok\n\
    \tlocal days_ok = days_ok and days_ok and days_ok and days_ok and days_ok\n\t\
    local days_ok = days_ok and days_ok and days_ok and days_ok and days_ok\n\tlocal\
    \ years = string.match(date, \"%d-%d-%Y\")\n\tlocal years = years and years and\
    \ years and years and years and years\n\tlocal years = years and years and years\
    \ and years and years and years\n\tlocal years = years and years and years and\
    \ years and years and years\n\tlocal years = years and years and years and years\
    \ and years and years\n\tlocal years = years and years and years and years and\
    \ years and years\n\tlocal years = years and years and years and years and years\
    \ and years\n\tlocal years = years and years and years and years and years and\
    \ years\n\tlocal years = years and years and years and years and years and years\n\
    \tlocal years = years and years and years and years and years and years\n\tlocal\
    \ years = years and years and years and years and years and years\n\tlocal years\
    \ = years and years and years and years and years and years\n\tlocal years = years\
    \ and years and years and years and years and years\n\tlocal years = years and\
    \ years and years and years and years and years\n\tlocal years = years and years\
    \ and years and years and years and years\n\tlocal years = years and years and\
    \ years and years and years and years\n\tlocal years = years and years and year\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwbkdbxam.lua:80: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif not date or date == '' then\n\
    \t\treturn false\n\telseif type(date) == 'string' then\n\t\tif #date == 0 then\n\
    \t\t\treturn false\n\t\tend\n\t\t-- check the date\n\t\tlocal d, m, y = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n\t\tif not d or not m or not y then\n\t\t\treturn false\n\
    \t\tend\n\t\t-- check the number of days\n\t\tif d < 1 or d > 31 then\n\t\t\t\
    return false\n\t\telseif m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m ==\
    \ 10 or\n\t\t   m == 12 then\n\t\t\tif d < 1 or d > 30 then\n\t\t\t\treturn false\n\
    \t\t\telseif m == 2 then\n\t\t\t\tif d < 1 or d > 29 then\n\t\t\t\t\treturn false\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t-- check the months\n\t\tif m == 1 or m ==\
    \ 3 or m == 5 or m == 7 or m == 8 or m == 10 or\n\t\t   m == 12 then\n\t\t\tif\
    \ d < 1 or d > 31 then\n\t\t\t\treturn false\n\t\t\telseif m == 2 then\n\t\t\t\
    \tif d < 1 or d > 29 then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\
    end\n\t\t-- check the year\n\t\tif y <= 0 or y >= 4000 then\n\t\t\treturn false\n\
    \t\tend\n\telse\n\t\treturn false\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ypmiiuf.lua:27:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmp_ypmiiuf.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmp_ypmiiuf.lua:63: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local months = {\"1\", \"3\", \"\
    5\", \"7\", \"8\", \"10\", \"12\"}\n  local days = {\"31\", \"30\", \"29\"}\n\
    \  local years = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\",\
    \ \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\"\
    , \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"\
    , \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\"\
    , \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\"\
    , \"2038\", \"2039\", \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\"\
    , \"2046\", \"2047\", \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\"\
    , \"2054\", \"2055\", \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\"\
    , \"2062\", \"2063\", \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\"\
    , \"2070\", \"2071\", \"2072\", \"2073\", \"2074\", \"2075\", \"2076\", \"2077\"\
    , \"2078\", \"2079\", \"2080\", \"2081\", \"2082\", \"2083\", \"2084\", \"2085\"\
    , \"2086\", \"2087\", \"2088\", \"2089\", \"2090\", \"2091\", \"2092\", \"2093\"\
    , \"2094\", \"2095\", \"2096\", \"2097\", \"2098\", \"2099\", \"2100\", \"2101\"\
    , \"2102\", \"2103\", \"2104\", \"2105\", \"2106\", \"2107\", \"2108\", \"2109\"\
    , \"2110\", \"2111\", \"2112\", \"2113\", \"2114\", \"2115\", \"2116\", \"2117\"\
    , \"2118\", \"2119\", \"2120\", \"2121\", \"2122\", \"2123\", \"2124\", \"2125\"\
    , \"2126\", \"2127\", \"2128\", \"2129\", \"2130\", \"2131\", \"2132\", \"2133\"\
    , \"2134\", \"2135\", \"2136\", \"2137\", \"2138\", \"2139\", \"2140\", \"2141\"\
    , \"2142\", \"2143\", \"2144\", \"2145\", \"2146\", \"2147\", \"2148\", \"2149\"\
    , \"2150\", \"2151\", \"2152\", \"2153\", \"2154\", \"2155\", \"2156\", \"2157\"\
    , \"2158\", \"2159\", \"2160\", \"2161\", \"2162\", \"2163\", \"2164\", \"2165\"\
    , \"2166\", \"2167\", \"2168\", \"2169\", \"2170\", \"2171\", \"2172\", \"2173\"\
    , \"2174\", \"2175\", \"2176\", \"2177\", \"2178\", \"2179\", \"\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk67yvl2m.lua:17: unfinished string near '\"'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == nil or date == ''\
    \ then\n        return false\n    end\n    local date_arr = string.split(date,'-')\n\
    \    if #date_arr == 3 then\n        if date_arr[1] < 1 or date_arr[1] > 12 then\n\
    \            return false\n        end\n        if date_arr[2] < 1 or date_arr[2]\
    \ > 31 then\n            return false\n        end\n        if date_arr[1] > date_arr[2]\
    \ then\n            return false\n        end\n    elseif #date_arr == 4 then\n\
    \        if date_arr[1] < 1 or date_arr[1] > 12 then\n            return false\n\
    \        end\n        if date_arr[2] < 1 or date_arr[2] > 31 then\n          \
    \  return false\n        end\n        if date_arr[3] < 1 or date_arr[3] > 30 then\n\
    \            return false\n        end\n        if date_arr[1] > date_arr[2] or\
    \ date_arr[1] > date_arr[3] then\n            return false\n        end\n    elseif\
    \ #date_arr == 5 then\n        if date_arr[1] < 1 or date_arr[1] > 12 then\n \
    \           return false\n        end\n        if date_arr[2] < 1 or date_arr[2]\
    \ > 31 then\n            return false\n        end\n        if date_arr[3] < 1\
    \ or date_arr[3] > 30 then\n            return false\n        end\n        if\
    \ date_arr[4] < 1 or date_arr[4] > 29 then\n            return false\n       \
    \ end\n        if date_arr[1] > date_arr[2] or date_arr[1] > date_arr[3] or date_arr[1]\
    \ > date_arr[4] then\n            return false\n        end\n    elseif #date_arr\
    \ == 6 then\n        if date_arr[1] < 1 or date_arr[1] > 12 then\n           \
    \ return false\n        end\n        if date_arr[2] < 1 or date_arr[2] > 31 then\n\
    \            return false\n        end\n        if date_arr[3] < 1 or date_arr[3]\
    \ > 30 then\n            return false\n        end\n        if date_arr[4] < 1\
    \ or date_arr[4] > 29 then\n            return false\n        end\n        if\
    \ date_arr[5] < 1 or date_arr[5] > 31 then\n            return false\n       \
    \ end\n        if date_arr[1] > date_arr[2] or date_arr[1] > date_arr[3] or date_arr[1]\
    \ > date_arr[4] or date_arr[1] > date_arr[5] then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc30uuz4m.lua:18:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpc30uuz4m.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpc30uuz4m.lua:84: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil then\n    return\
    \ false\n  end\n  local date_format = string.gsub(date, '^([0-9]+[-/])?[0-9]+[-/]?([0-9]+)$',\
    \ '%d-%d-%d')\n  local day = tonumber(date_format:match('%d'))\n  local month\
    \ = tonumber(date_format:match('%m'))\n  local year = tonumber(date_format:match('%Y'))\n\
    \  if day == nil or month == nil or year == nil then\n    return false\n  end\n\
    \  if month == 1 then\n    if day > 31 then\n      return false\n    end\n  elseif\
    \ month == 3 then\n    if day > 30 then\n      return false\n    end\n  elseif\
    \ month == 5 then\n    if day > 29 then\n      return false\n    end\n  end\n\
    \  if month == 0 then\n    if day > 31 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplqu9s6us.lua:49:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplqu9s6us.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal month, day, year = string.match(date,\
    \ \"^([0-9]+)-([0-9]+)-([0-9]+)$\")\n\tif not month then\n\t\treturn False\n\t\
    end\n\t--\n\t-- Check month\n\tif month < 1 or month > 12 then\n\t\treturn false\n\
    \tend\n\t--\n\t-- Check days\n\tif day < 1 or day > 31 then\n\t\treturn false\n\
    \tend\n\t--\n\t-- Check year\n\tif year and string.len(year) ~= 4 then\n\t\treturn\
    \ false\n\tend\n\t--\n\t-- Check months\n\tif month == 2 then\n\t\treturn false\n\
    \tend\n\t--\n\t-- Check leap year\n\tif month == 2 and (day > 29 or day > 28)\
    \ then\n\t\treturn false\n\tend\n\t--\n\t-- Check valid date\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt8r972yd.lua:21:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpt8r972yd.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpt8r972yd.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if not date or date ~= '' then\
    \ return false end\n  local date_part = string.match(date, '(%d+)-(%d+)-(%d+)')\n\
    \  if not date_part then return false end\n  if date_part[2] < 1 or date_part[2]\
    \ > 12 then return false end\n  if date_part[1] < 1 or date_part[1] > 12 then\
    \ return false end\n  if date_part[3] < 1 or date_part[3] > 31 then return false\
    \ end\n  if date_part[1] == 12 and date_part[3] > 30 then return false end\n \
    \ if date_part[1] == 2 and date_part[3] > 29 then return false end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1d01444.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz1d01444.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == '' then\n        return\
    \ false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmper2li2qg.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil or date == \"\"\
    \ then return false end\n  \n  local days = {\"31\", \"28\", \"31\", \"30\", \"\
    31\", \"30\", \"31\", \"31\", \"30\", \"31\", \"30\", \"31\"}\n  local months\
    \ = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"\
    11\", \"12\"} \n  \n  local dateDays = string.match(date, \"(%d+)\\-\") \n  local\
    \ dateMonths = string.match(date, \"(%d+)\\-(%d+)\") \n  \n  if dateDays ~= nil\
    \ and tonumber(dateDays) >= 1 and tonumber(dateDays) <= 31 then\n    \n    if\
    \ dateMonths ~= nil and tonumber(dateMonths) >= 1 and tonumber(dateMonths) <=\
    \ 12 then\n      \n      if dateDays ~= nil and tonumber(dateDays) <= days[dateMonths]\
    \ then\n        \n        return true\n      else\n        return false\n    \
    \  end\n    else\n      return false\n    end\n  else\n    return false\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_7me_0sj.lua:20: invalid escape sequence near '\"(%d+)\\-'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal ms = os.date(\"*t\", date)\n\
    \tlocal day = tonumber(ms.day)\n\tlocal month = tonumber(ms.month)\n\tlocal year\
    \ = tonumber(ms.year)\n\t\n\tif day == nil or month == nil or year == nil then\n\
    \t\treturn false\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc21gmq7u.lua:45: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"^%d-%d-%d$\")\n  if month < 1 or month > 12 then\n    return False\n  end\n\
    \  if day < 1 or day > 31 then\n    return False\n  end\n  if year < 1 or year\
    \ > 20 then\n    return False\n  end\n  if month == 2 and day == 29 then\n   \
    \ return False\n  end\n  if month == 3 and day == 30 then\n    return False\n\
    \  end\n  if month == 4 and day == 29 then\n    return False\n  end\n  if month\
    \ == 6 and day == 29 then\n    return False\n  end\n  if month == 9 and day ==\
    \ 30 then\n    return False\n  end\n  if month == 11 and day == 30 then\n    return\
    \ False\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkmhqxzje.lua:16:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpkmhqxzje.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpkmhqxzje.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date ~= nil and date ~= \"\"\
    \ then\n    local split_date = string.split(date, \"-\")\n    if (split_date[2]\
    \ ~= nil and split_date[2] ~= \"\") and (split_date[1] ~= nil and split_date[1]\
    \ ~= \"\") and (split_date[2] ~= nil and split_date[2] ~= \"\") and (split_date[3]\
    \ ~= nil and split_date[3] ~= \"\") and (split_date[1] ~= nil and split_date[1]\
    \ ~= \"\") then\n      local month, day, year = tonumber(split_date[1]), tonumber(split_date[2]),\
    \ tonumber(split_date[3])\n      if (month >= 1 and month <= 12) and (day >= 1\
    \ and day <= 31) and (day > 0 and day <= 29) and (day >= 1 and day <= 31) and\
    \ ((day > 0 and day <= 30) or (day > 1 and day <= 29)) then\n        local m,\
    \ d, y = tonumber(split_date[1]), tonumber(split_date[2]), tonumber(split_date[3])\n\
    \        -- If month is greater than 12\n        if (month > 12) then\n      \
    \    m = m-1\n          y = y+1\n          d = m+12\n        end\n        if (m\
    \ < 1 or m > 12) then\n          return false\n        end\n        if (d < 1\
    \ or d > 31) then\n          return false\n        end\n        if (y < 1 or y\
    \ > 365) then\n          return false\n        end\n      else\n        return\
    \ false\n      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk9393_kl.lua:16:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpk9393_kl.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpk9393_kl.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local year = tonumber(string.sub(date,1,4))\
    \ or 0\n    local month = tonumber(string.sub(date,5,6)) or 0\n    local day =\
    \ tonumber(string.sub(date,7,8)) or 0\n    return year and year > 0 and month\
    \ and month > 0 and day and day > 0 and day <= 31 and month <= 12 and day <= 30\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpje6i1rxk.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpje6i1rxk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if not date or date == '' or\
    \ date == 'Invalid date' then\n        return false\n    end\n    local date_parts\
    \ = string.match(date, \"%d-%m-%Y\")\n    if not date_parts then\n        return\
    \ false\n    end\n    local date_date_parts = string.match(date_parts, \"%d-%d-%Y\"\
    )\n    if not date_date_parts then\n        return false\n    end\n    local month,\
    \ day, year = date_date_parts:match(\"%d-%d-%d+\")\n    if month == nil or day\
    \ == nil or year == nil then\n        return false\n    end\n    if month < 1\
    \ or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31\
    \ then\n        return false\n    end\n    if day > 30 then\n        return false\n\
    \    end\n    if day == 29 and month == 2 then\n        return false\n    end\n\
    \    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or\
    \ month == 10 or month == 12 and day > 31 then\n        return false\n    end\n\
    \    if month == 4 or month == 6 or month == 9 or month == 11 and day > 30 then\n\
    \        return false\n    end\n    if month == 2 then\n        if day == 29 then\n\
    \            return false\n        elseif day > 29 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf4kmt4po.lua:61:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf4kmt4po.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\n   \
    \ local month = string.match(date, \"^(%d-%m-%y)?$\") or 0\n    local day = string.match(date,\
    \ \"^%d-%m-(%d-%y)?$\") or 0\n    local year = string.match(date, \"^%d-%m-(%d-%y)?$\"\
    ) or 0\n    local month_table = {\n        [1] = 1,\n        [3] = 1\n    }\n\
    \    local day_table = {\n        [1] = 1,\n        [4] = 1\n    }\n    local\
    \ year_table = {\n        [1] = 1,\n        [5] = 1\n    }\n    if month ~= nil\
    \ then\n        if month > 12 then\n            return false\n        end\n  \
    \      if month < 1 then\n            return false\n        end\n    end\n   \
    \ if day ~= nil then\n        if day > 30 then\n            return false\n   \
    \     end\n        if day < 1 then\n            return false\n        end\n  \
    \  end\n    if year ~= nil then\n        if year < 1 then\n            return\
    \ false\n        end\n        if year > 99 then\n            return false\n  \
    \      end\n    end\n    if month ~= nil and day ~= nil and year ~= nil then\n\
    \        if month_table[month] == nil then\n            return false\n       \
    \ end\n        if day_table[day] == nil then\n            return false\n     \
    \   end\n        if year_table[year] == nil then\n            return false\n \
    \       end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmq1s6xxr.lua:72:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmq1s6xxr.lua:72:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal day, month, year=string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n\tif (year and month and day) then\n\t\tmonth=tonumber(month)\n\
    \t\tyear=tonumber(year)\n\t\tif (month and day and year) then\n\t\t\t-- Validate\
    \ the month.\n\t\t\t-- months must be between 1-12\n\t\t\tif (month<1 or month>12)\
    \ then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\t\n\t\t\t-- Validate the day.\n\t\
    \t\t-- days in the months must be between 1-31\n\t\t\tif (day<1 or day>31) then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\t\t\n\t\t\t-- Validate the year.\n\t\t\t--\
    \ years must be between 0000-9999\n\t\t\tif (year<0000 or year>9999) then\n\t\t\
    \t\treturn false\n\t\t\tend\n\t\t\t\n\t\t\t-- Validate the days of the month \n\
    \t\t\t-- The months should not be less than 1 or higher than 12.\n\t\t\tif (month\
    \ and day) then\n\t\t\t\t-- Validate the days of the months.\n\t\t\t\tif (month\
    \ and day) then\n\t\t\t\t\t-- Validate the number of days.\n\t\t\t\t\tif (month==2\
    \ and day>=29) then\n\t\t\t\t\t\treturn false\n\t\t\t\t\telseif (month==4 and\
    \ day>=30) then\n\t\t\t\t\t\treturn false\n\t\t\t\t\telseif (month==6 and day>=31)\
    \ then\n\t\t\t\t\t\treturn false\n\t\t\t\t\telseif (month==9 and day>=31) then\n\
    \t\t\t\t\t\treturn false\n\t\t\t\t\telseif (month==11 and day>=30) then\n\t\t\t\
    \t\t\treturn false\n\t\t\t\t\telseif (month==12 and day>=31) then\n\t\t\t\t\t\t\
    return false\n\t\t\t\t\telse\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgs_yv7ve.lua:28:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpgs_yv7ve.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpgs_yv7ve.lua:69: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your code here\n  return\
    \ not (date == nil or date == '' or date == '-' or date == '' or date == '0000-00-00'\
    \ or date == '0000-00-00 00:00:00' or date == '0000-00-00T00:00:00' or date ==\
    \ '0000-00-00T00:00:00.00Z' or date == '0000-00-00T00:00:00.00-0Z' or date ==\
    \ '0000-00-00T00:00:00.000000000-0Z' or date == '0000-00-00 00:00:00.000-0Z' or\
    \ date == '0000-00-00 00:00:00.000000-00Z' or date == '0000-00-00 00:00:00.0000000-00Z'\
    \ or date == '0000-00-00 00:00:00.00000000-00Z' or date == '0000-00-00 00:00:00.000000000-00Z'\
    \ or date == '0000-00-00T00:00:00.000-0Z' or date == '0000-00-00T00:00:00.000000-00Z'\
    \ or date == '0000-00-00T00:00:00.0000000-00Z' or date == '0000-00-00T00:00:00.00000000-00Z'\
    \ or date == '0000-00-00T00:00:00.000000000-00Z' or date == '0000-00-00 00:00:00.000-0Z'\
    \ or date == '0000-00-00 00:00:00.000000-00Z' or date == '0000-00-00 00:00:00.0000000-00Z'\
    \ or date == '0000-00-00 00:00:00.00000000-00Z' or date == '0000-00-00 00:00:00.000000000-00Z'\
    \ or date == '0000-00-00 00:00:00.000000000-00Z' or date == '0000-00-00T00:00:00.000-0Z'\
    \ or date == '0000-00-00T00:00:00.000000-00Z' or date == '0000-00-00T00:00:00.0000000-00Z'\
    \ or date == '0000-00-00T00:00:00.00000000-00Z' or date == '0000-00-00T00:00:00.000000000-00Z'\
    \ or date == '0000-00-00 00:00:00.000-0Z' or date == '0000-00-00 00:00:00.000000-00Z'\
    \ or date == '0000-00-00 00:00:00.0000000-00Z' or date == '0000-00-00 00:00:00.00000000-00Z'\
    \ or date == '0000-00-00 00:00:00.000000000-00Z' or date == '0000-00-00 00:00:00.000000000-00Z')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjaqulvqz.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjaqulvqz.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local m, d, y = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  -- Check that m is valid. \n  -- If m is empty the month\
    \ is invalid. \n  -- If m is empty the day is invalid.\n  -- If m is empty the\
    \ year is invalid.\n  if m == '' or m == nil then\n    return false\n  end\n \
    \ -- Check that m is between 1 and 12. \n  if m > 12 or m < 1 then\n    return\
    \ false\n  end\n  -- Check that d is not less than 1 or greater than 31.\n  if\
    \ d < 1 or d > 31 then\n    return false\n  end\n  -- Check that d is not less\
    \ than 1 or greater than 30.\n  if d < 1 or d > 30 then\n    return false\n  end\n\
    \  -- Check that m is between 1 and 12.\n  if m > 12 or m < 1 then\n    return\
    \ false\n  end\n  -- Check that y is in the correct format.\n  local year, month,\
    \ day = string.match(date, '(%d+)-(%d+)-(%d+)')\n  if year == '' then\n    return\
    \ false\n  end\n  if month == nil or month == '' then\n    return false\n  end\n\
    \  if day == nil or day == '' then\n    return false\n  end\n  -- Check that y\
    \ is a valid year.\n  if y == '' or y == nil then\n    return false\n  end\n \
    \ -- Check that y is a valid year.\n  if y ~= nil and y ~= '' and y ~= 0 and y\
    \ ~= '0' then\n    year = tonumber(y)\n    -- Check that m is a valid month.\n\
    \    if month == '' or month == nil then\n      return false\n    end\n    if\
    \ month == '' or month == nil then\n      return false\n    end\n    if month\
    \ == '' or month == nil then\n      return false\n    end\n    if month == ''\
    \ or month == nil then\n      return false\n    end\n    if month == '' or month\
    \ == nil then\n      return false\n    end\n    if month == '' or month == nil\
    \ then\n      return false\n    end\n    if month == '' or month == nil then\n\
    \      return false\n    end\n    if month == '' or month == nil then\n      return\
    \ false\n    end\n    if month == '' or month == nil then\n      return false\n\
    \    end\n    if month == '' or month == nil then\n      return false\n    end\n\
    \    if month == '' or month == nil then\n      return false\n    end\n    if\
    \ month == '' or month == nil then\n      return false\n    end\n    if month\
    \ == '' or month == nil then\n      return false\n    end\n    if month == ''\
    \ or month == nil then\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc84j3aj_.lua:120: 'end' expected (to close 'if' at line 97)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == nil then\n       \
    \ return false\n    end\n    local months = {\n        [1] = '01',\n        [3]\
    \ = '03',\n        [5] = '05',\n        [7] = '07',\n        [8] = '08',\n   \
    \     [10] = '10',\n        [12] = '12'\n    }\n    local d = tonumber(date, 10)\n\
    \    if d == nil then\n        return false\n    end\n    -- Validate number of\
    \ days\n    local num_days = math.abs(d)\n    if num_days > 31 then\n        return\
    \ false\n    end\n    if num_days > 30 then\n        return false\n    end\n \
    \   -- Validate number of month\n    local months_count = math.abs(months[month(d)])\n\
    \    if months_count > 12 then\n        return false\n    end\n    -- Validate\
    \ year\n    local year_count = math.abs(year(d))\n    if year_count > 2020 then\n\
    \        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh0opc1h.lua:55:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpeh0opc1h.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal day, month, year = string.match(date,\
    \ '(%d+)\\-(%d+)\\-(%d+)') \n\tday  = tonumber(day)\n\tmonth = tonumber(month)\n\
    \tyear = tonumber(year)\n\tif day < 1 or day > 31 or (month == 0 and day > 31)\
    \ or (month == 12 and day > 30) then\n\t\treturn false\n\tend\n\tif month < 1\
    \ or month > 12 then\n\t\treturn false\n\tend\n\tif year < 1000 and year > -1000\
    \  then\n\t\treturn false\n\tend\n\tif year < 0 or year > 9999 then\n\t\treturn\
    \ false\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpekjbajuo.lua:15: invalid escape sequence near ''(%d+)\\-'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    date = date:match(\n        \"\
    ^%d+[-/-](%d+)[-/-](%d+)$\"\n    )\n    \n    if date == nil then return false\
    \ end\n    \n    --First validate date\n    local date_year = tonumber(date[1])\
    \ \n    local date_month = tonumber(date[2])\n    local date_day = tonumber(date[3])\n\
    \    \n    --Validate the month\n    --Only months between 1 and 12 are allowed\n\
    \    local month = date_month - 1\n    \n    if month < 1 or (month == 12 and\
    \ date_day > 29) then return false end\n    \n    --Validate the day\n    --Only\
    \ days between 1 and 31 are allowed\n    local day = date_day - 1\n    \n    if\
    \ day < 1 or (day > 31 and month > 12) then return false end\n    \n    --Validate\
    \ the year\n    --Only years between 1950 and 2100 are allowed\n    local year\
    \ = date_year\n    \n    if year < 1950 or year > 2100 then return false end\n\
    \    \n    return true\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\nIt can be done\
    \ using Lua pattern. See the following code. \n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbmhsc1rj.lua:46: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil or date == \"\"\
    \ then\n      return false\n   else\n      local days_of_month = {\n         [1]\
    \ = 0, -- Jan\n         [2] = 1, -- Feb\n         [3] = 2, -- Mar\n         [4]\
    \ = 3, -- Apr\n         [5] = 4, -- May\n         [6] = 5, -- Jun\n         [7]\
    \ = 6, -- Jul\n         [8] = 7, -- Aug\n         [9] = 8, -- Sep\n         [10]\
    \ = 9, -- Oct\n         [11] = 10, -- Nov\n         [12] = 11, -- Dec\n      }\n\
    \      local days_of_year = {\n         [0] = 31, -- Jan\n         [1] = 28, --\
    \ Feb\n         [2] = 31, -- Mar\n         [3] = 31, -- Apr\n         [4] = 30,\
    \ -- May\n         [5] = 31, -- Jun\n         [6] = 30, -- Jul\n         [7] =\
    \ 31, -- Aug\n         [8] = 30, -- Sep\n         [9] = 31, -- Oct\n         [10]\
    \ = 30, -- Nov\n         [11] = 31, -- Dec\n      }\n      local days_of_week\
    \ = {\n         [0] = 1, -- Sun\n         [1] = 7, -- Mon\n         [2] = 2, --\
    \ Tue\n         [3] = 3, -- Wed\n         [4] = 4, -- Thu\n         [5] = 5, --\
    \ Fri\n         [6] = 6, -- Sat\n      }\n      local months_of_year = {\n   \
    \      [0] = \"Jan\", -- Jan\n         [1] = \"Feb\", -- Feb\n         [2] = \"\
    Mar\", -- Mar\n         [3] = \"Apr\", -- Apr\n         [4] = \"May\", -- May\n\
    \         [5] = \"Jun\", -- Jun\n         [6] = \"Jul\", -- Jul\n         [7]\
    \ = \"Aug\", -- Aug\n         [8] = \"Sep\", -- Sep\n         [9] = \"Oct\", --\
    \ Oct\n         [10] = \"Nov\", -- Nov\n         [11] = \"Dec\", -- Dec\n    \
    \  }\n      local date_pattern = \"%d-%m-%Y\"\n      local date_parts = string.match(date,\
    \ date_pattern)\n      local date_parts_count = string.len(date_parts)\n     \
    \ -- Validate the date parts and date format.\n      if date_parts_count ~= 3\
    \ then\n         return false\n      elseif date_parts[1] ~= 1 or date_parts[2]\
    \ ~= 1 or date_parts[3] ~= 4 then\n         return false\n      elseif date_parts[2]\
    \ > 12 or date_parts[2] < 1 then\n         return false\n      elseif date_parts[1]\
    \ > 12 or date_parts[1] < 1 or date_parts[2] > 12 or date_parts[2] < 1 then\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0znl73uf.lua:102: 'end' expected (to close 'if' at line 73)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if not date then return False end\n\
    \  -- If the date string is empty return False\n  if date == '' or date == 'N/A'\
    \ then return False end\n  -- If the date string has less than or equal to 4 characters\
    \ return False\n  if #date < 4 then return False end\n  -- If the date has more\
    \ than 4 characters, remove the last character and return False\n  if #date >\
    \ 4 then \n    date = date:sub(1,-1)\n    return False \n  end\n  -- If the day\
    \ is less than 1 or higher than 31, return False\n  -- If the month is less than\
    \ 1 or higher than 12, return False\n  -- If the year is less than 1 or higher\
    \ than current year - 1 then return False\n  -- If the year is more than current\
    \ year - 1 then return True\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvicyvg0c.lua:35:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpvicyvg0c.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil then\n    return\
    \ false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb31dq9dd.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local valid, year, month, day,\
    \ daycount, first\n    year = tonumber(year) or \"\"\n    month = tonumber(month)\
    \ or \"\"\n    day = tonumber(day) or \"\"\n    first = tonumber(first) or \"\"\
    \n    daycount = tonumber(daycount) or \"\"\n    if not date or not year or not\
    \ month or not day or first==\"--\" or daycount==\"--\" then\n        return false\n\
    \    end\n    month = month:gsub(\"[01-12]\", \"\")\n    daycount = daycount:gsub(\"\
    [01-01]\", \"\")\n    year = year:gsub(\"^0+$\", \"\")\n    year = year:gsub(\"\
    ^([1-9][0-9]{3})$\", \"\\1\")\n    day = day:gsub(\"^([1-9][0-9]{3})$\", \"\\\
    1\")\n    first = first:gsub(\"^([1-9][0-9]{3})$\", \"\\1\")\n    daycount = daycount\
    \ or \"31\"\n    first = first or \"01\"\n    month = month or \"12\"\n    year\
    \ = year or \"1980\"\n    local year = tonumber(year)\n    local month = tonumber(month)\n\
    \    local day = tonumber(day)\n    local first = tonumber(first)\n    local daycount\
    \ = tonumber(daycount)\n    if year==nil or month==nil or day==nil or first==nil\
    \ or daycount==nil then\n        return false\n    end\n    local year1 = tonumber(year):gsub(\"\
    ^([1-9][0-9]{3})$\", \"\\1\")\n    local month1 = tonumber(month):gsub(\"^([1-9][0-9]{3})$\"\
    , \"\\1\")\n    local day1 = tonumber(day):gsub(\"^([1-9][0-9]{3})$\", \"\\1\"\
    )\n    local first1 = tonumber(first):gsub(\"^([1-9][0-9]{3})$\", \"\\1\")\n \
    \   local daycount1 = tonumber(daycount):gsub(\"^([1-9][0-9]{3})$\", \"\\1\")\n\
    \    if year1==nil or month1==nil or day1==nil or first1==nil or daycount1==nil\
    \ then\n        return false\n    end\n    local day1val = day1:sub(1, 1)\n  \
    \  local first1val = first1:sub(1, 1)\n    local month1val = month1:sub(1, 1)\n\
    \    local daycount1val = daycount1:sub(1, 1)\n    if month1val == \"0\" then\n\
    \        month1val = month1val .. \"1\"\n    end\n    if day1val == \"0\" then\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd2cbunvr.lua:80: 'end' expected (to close 'if' at line 57)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   local year = tonumber(string.sub(date,\
    \ 6, 7))\n   local month = tonumber(string.sub(date, 1, 2))\n   local day = tonumber(string.sub(date,\
    \ 4, 5))\n   if year and month and day and month >= 1 and month <= 12 and day\
    \ >= 1 and day <= 31 and day % 5 == 4 then\n      if month == 1 then return day\
    \ > 0 and day <= 29 or day < 1 and day % 5 == 0 and day <= 29 end\n      if month\
    \ == 3 then return day > 0 and day <= 29 end\n      if month == 5 then return\
    \ day > 0 and day <= 29 end\n      if month == 7 then return day > 0 and day <=\
    \ 29 end\n      if month == 8 then return day > 0 and day <= 29 end\n      if\
    \ month == 10 then return day > 0 and day <= 29 end\n      if month == 12 then\
    \ return day > 0 and day <= 29 end\n   end\n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9hpq6c5.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk9hpq6c5.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif not date then\n\t\treturn false\n\
    \tend\n\t\n\tlocal months = { '01','02','03','04','05','06','07','08','09','10','11','12'\
    \ }\n\tlocal days = { '01','02','03','04','05','06','07','08','09','10','11','12'\
    \ }\n\tlocal years = { '2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015','2016','2017','2018','2019','2020','2021','2022','2023','2024','2025','2026','2027','2028','2029','2030','2031'\
    \ }\n\t\n\tlocal date_parts = string.match(date, '%d-%m-%Y')\n\t\n\tif not date_parts\
    \ then\n\t\treturn false\n\tend\n\t\n\tlocal month = date_parts[1]\n\tlocal day\
    \ = date_parts[2]\n\tlocal year = date_parts[3]\n\t\n\tif not months[month] then\n\
    \t\treturn false\n\tend\n\t\n\tif not days[day] then\n\t\treturn false\n\tend\n\
    \t\n\tif not years[year] then\n\t\treturn false\n\tend\n\t\n\tlocal months_count\
    \ = months[month]\n\tlocal days_count = days[day]\n\tlocal years_count = years[year]\n\
    \t\n\tif months_count > 12 then\n\t\treturn false\n\tend\n\t\n\tif days_count\
    \ > 31 then\n\t\treturn false\n\tend\n\t\n\tif months_count <= 1 and days_count\
    \ <= 1 then\n\t\treturn false\n\tend\n\t\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq74pt9jn.lua:67:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq74pt9jn.lua:67:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if not date then return false\
    \ end\n    local date_day = tonumber(date:sub(1,2))\n    local date_month = tonumber(date:sub(-2,-1))\n\
    \    local date_year = tonumber(date:sub(-4,-1))\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvc5fxole.lua:41: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date ~= nil then\n    local\
    \ month, day, year = string.match(date, \"(%d+)-(%d+)-(%d+)\")\n    if month and\
    \ day and year then\n      if month >= 1 and month <= 12 and day >= 1 and day\
    \ <= 31 and year ~= nil then\n        return true\n      elseif month >= 4 and\
    \ month <= 11 and day >= 1 and day <= 30 and year ~= nil then\n        return\
    \ true\n      elseif month == 2 and (day >= 1 and day <= 29) then\n        return\
    \ true\n      elseif month >= 1 and month <= 12 and day >= 1 and day <= 31 and\
    \ year == nil then\n        return true\n      elseif month >= 4 and month <=\
    \ 11 and day >= 1 and day <= 30 and year == nil then\n        return true\n  \
    \    elseif month == 2 and (day >= 1 and day <= 29) and year == nil then\n   \
    \     return true\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpspcmnbw0.lua:18:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmpspcmnbw0.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpspcmnbw0.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil or date == '' then\n\
    \      return false\n   else\n      local month = string.sub(date, 1, 2)\n   \
    \   local day = string.sub(date, 4, 2)\n      local year = string.sub(date, 6,\
    \ 4)\n      -- Check validity of months\n      if month == '01' or month == '03'\
    \ or month == '05' or month == '07' or month == '08' or month == '10' or month\
    \ == '12' then\n         if day ~= '00' and day ~= '01' and day ~= '02' and day\
    \ ~= '03' and day ~= '04' and day ~= '05' and day ~= '06' and day ~= '07' and\
    \ day ~= '08' and day ~= '09' and day ~= '10' and day ~= '11' and day ~= '12'\
    \ then\n            return true\n         else\n            return false\n   \
    \      end\n      else\n         return false\n      end\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpm0fqms.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdpm0fqms.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif date == nil then\n\t\treturn\
    \ false\n\tend\n\tif date == \"\" then\n\t\treturn false\n\tend\n\tif date ==\
    \ \"0000-00-00\" or date == \"\" then\n\t\treturn false\n\tend\n\t\n\tlocal m\
    \ = date:match(\"^(%w-%d-%y)$\")\n\tif m ~= nil then\n\t\treturn true\n\tend\n\
    \t\n\tm = date:match(\"^(%w-%d-%y)-(%w-%d-%y)$\")\n\tif m ~= nil then\n\t\treturn\
    \ true\n\tend\n\t\n\tm = date:match(\"^(%w-%d-%y)-(%w-%d-%y)-(%w-%d-%y)$\")\n\t\
    if m ~= nil then\n\t\treturn true\n\tend\n\t\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplaycy_6_.lua:46:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplaycy_6_.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- 1. The date string is not empty.\n\
    \  if date ~= nil and date ~= \"\" then\n    local date_arr = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local month = {0,0,0,0,0,0,0,0,0,0,0,0}\n    local\
    \ day = {0,0,0,0,0,0,0,0,0,0,0,0}\n    local year = tonumber(date_arr[3])\n  \
    \  local month = tonumber(date_arr[1])\n    local day = tonumber(date_arr[2])\n\
    \    \n    -- 2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    if month == 1 or month == 3 or month\
    \ == 5 or month == 7 or\n        month == 8 or month == 10 or month == 12 or month\
    \ == 14 or\n        month == 16 or month == 18 or month == 20 or month == 24 or\n\
    \        month == 26 or month == 28 or month == 3 or month == 5 then\n      if\
    \ day < 1 or day > 31 then\n        return False\n      else\n        month[1]\
    \ = 1\n        month[2] = 1\n        month[3] = 1\n        month[4] = 1\n    \
    \    month[5] = 1\n        month[6] = 1\n        month[7] = 1\n        month[8]\
    \ = 1\n        month[9] = 1\n        month[10] = 1\n        month[11] = 1\n  \
    \      month[12] = 1\n      end\n    elseif month == 4 or month == 6 or month\
    \ == 9 or month == 11 or month == 13 or month == 15 or month == 17 then\n    \
    \  if day < 1 or day > 30 then\n        return False\n      else\n        month[4]\
    \ = 1\n        month[6] = 1\n        month[9] = 1\n        month[11] = 1\n   \
    \     month[13] = 1\n        month[15] = 1\n        month[17] = 1\n      end\n\
    \    elseif month == 2 then\n      if day < 1 or day > 29 then\n        return\
    \ False\n      else\n        month[2] = 1\n        month[3] = 1\n        month[5]\
    \ = 1\n        month[7] = 1\n        month[8] = 1\n        month[10] = 1\n   \
    \     month[11] = 1\n        month[13] = 1\n        month[15] = 1\n        month[17]\
    \ = 1\n      end\n    end\n    \n    -- 3. The months should not be less than\
    \ 1 or higher than 12.\n    if month[1] < 1 or month[1] > 12 then\n      return\
    \ False\n    end\n    \n    -- 4. The date should be in the format: mm-dd-yyyy\n\
    \    -- for example: \n    -- valid_date('03-11-2000') => True\n    -- valid_date('15-01-2012')\
    \ => False\n    -- valid_date('04-0-2040') => False\n    -- valid_date('06-04-2020')\
    \ => \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcxs69nl9.lua:107: 'end' expected (to close 'if' at line 16)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- TODO: Write your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp028t026q.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp028t026q.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local day = string.sub(date,\
    \ \"%w\", 1)\n    local month = string.sub(date, \"%m\", 1)\n    local year =\
    \ string.sub(date, \"%y\", 1)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp54njm0if.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local result = true\n    local\
    \ day, month, year, day = string.match(date,\"(%d+)(%d+)(%d+)\")\n    if day and\
    \ month and year then\n        if month < 1 or month > 12 then\n            result\
    \ = false\n        end\n        if day < 1 or day > 31 then\n            if day\
    \ < 1 then\n                result = false\n            else\n               \
    \ result = false\n            end\n        elseif day > 30 then\n            if\
    \ day > 29 then\n                result = false\n            end\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt413hidr.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt413hidr.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- TODO: Implement function here\n\
    \    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7gh61lq.lua:22:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpp7gh61lq.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- remove spaces\n    date =\
    \ string.gsub(date, \" \", \"\")\n    -- remove dashes\n    date = string.gsub(date,\
    \ \"-\", \"\")\n    -- convert mm-dd-yy to yyyy-mm-dd\n    local date_arr = string.gsub(date,\
    \ \"/\", \"-\")\n    date_arr = string.gsub(date_arr, \"-\", \"\")\n    date_arr\
    \ = string.gsub(date_arr, \"/\", \"-\")\n    date_arr = string.gsub(date_arr,\
    \ \"/\", \"-\")\n    date_arr = string.gsub(date_arr, \"/\", \"-\")\n    date_arr\
    \ = string.gsub(date_arr, \"/\", \"-\")\n    date_arr = string.gsub(date_arr,\
    \ \"/\", \"-\")\n    date_arr = string.gsub(date_arr, \"/\", \"-\")\n    date_arr\
    \ = string.gsub(date_arr, \"/\", \"-\")\n    date_arr = string.gsub(date_arr,\
    \ \"/\", \"-\")\n    date_arr = string.gsub(date_arr, \"-\", \"\")\n    date_arr\
    \ = string.gsub(date_arr, \"-\", \"\")\n    date_arr = string.gsub(date_arr, \"\
    -\", \"\")\n    date_arr = string.gsub(date_arr, \"-\", \"\")\n    -- convert\
    \ dd-mm-yy to yyyy-dd-mm\n    local date_arr2 = string.gsub(date_arr, \"-\", \"\
    -\")\n    date_arr2 = string.gsub(date_arr2, \"-\", \"-\")\n    date_arr2 = string.gsub(date_arr2,\
    \ \"-\", \"-\")\n    date_arr2 = string.gsub(date_arr2, \"-\", \"-\")\n    date_arr2\
    \ = string.gsub(date_arr2, \"-\", \"-\")\n    date_arr2 = string.gsub(date_arr2,\
    \ \"-\", \"-\")\n    date_arr2 = string.gsub(date_arr2, \"-\", \"-\")\n    date_arr2\
    \ = string.gsub(date_arr2, \"-\", \"-\")\n    date_arr2 = string.gsub(date_arr2,\
    \ \"-\", \"-\")\n    date_arr2 = string.gsub(date_arr2, \"-\", \"-\")\n    date_arr2\
    \ = string.gsub(date_arr2, \"-\", \"-\")\n    date_arr2 = string.gsub(date_arr2,\
    \ \"-\", \"-\")\n    date_arr2 = string.gsub(date_arr2, \"-\", \"-\")\n    date_arr2\
    \ = string.gsub(date_arr2, \"-\", \"-\")\n    -- remove dashes\n    date_arr2\
    \ = string.gsub(date_arr2, \"/\", \"\")\n    date_arr2 = string.gsub(date_arr2,\
    \ \"-\", \"\")\n    date_arr2 = string.gsub(date_arr2, \"/\", \"\")\n    date_arr2\
    \ = string.gsub(date_arr2, \"/\", \"\")\n    date_arr2 = string.gsub(date_arr2,\
    \ \"-\", \"\")\n    date_arr2 = string.gsub(date_arr2, \"/\", \"\")\n    -- \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqvn48e6w.lua:79: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local valid_year = true\n   \
    \ local valid_month = true\n    local valid_day = true\n    local valid_monthday\
    \ = true\n    local valid_year = true\n    local valid_month = true\n    local\
    \ valid_day = true\n    local valid_monthday = true\n    local month = tonumber(date:sub(1,2))\n\
    \    local day = tonumber(date:sub(3,5))\n    local year = tonumber(date:sub(6,10))\n\
    \    if month == nil then\n        month = 1\n        day = tonumber(date:sub(8,10))\n\
    \    elseif month == \"\" then\n        month = 1\n        day = tonumber(date:sub(8,10))\n\
    \    elseif month < 1 or month > 12 then\n        valid_year = false\n    end\n\
    \    if day == nil then\n        day = 1\n    elseif day == \"\" then\n      \
    \  day = 1\n    elseif day < 1 or day > 31 then\n        valid_day = false\n \
    \   end\n    if month == nil then\n        month = 1\n        year = tonumber(date:sub(10,13))\n\
    \    elseif month < 1 or month > 12 then\n        valid_month = false\n    end\n\
    \    if day == nil then\n        day = 1\n    elseif day == \"\" then\n      \
    \  day = 1\n    elseif day < 1 or day > 30 then\n        valid_monthday = false\n\
    \    end\n    if month == nil then\n        month = 1\n        year = tonumber(date:sub(13,16))\n\
    \    elseif month < 1 or month > 12 then\n        valid_month = false\n    end\n\
    \    if day == nil then\n        day = 1\n    elseif day == \"\" then\n      \
    \  day = 1\n    elseif day < 1 or day > 29 then\n        valid_monthday = false\n\
    \    end\n    if month == nil then\n        month = 1\n        year = tonumber(date:sub(16,19))\n\
    \    elseif month < 1 or month > 12 then\n        valid_month = false\n    end\n\
    \    if day == nil then\n        day = 1\n    elseif day == \"\" then\n      \
    \  day = 1\n    elseif day < 1 or day > 30 then\n        valid_monthday = false\n\
    \    end\n    if year == nil then\n        year = 1\n    elseif year < 1 or year\
    \ > 9999 then\n        valid_year = false\n    end\n    return valid_year and\
    \ valid_month and valid_day and valid_monthday\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=lua-table,lua |>\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz9mfxvcq.lua:88: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local year = tonumber(date:match('%d-%m-%Y'))\n\
    \    if not year then\n        return false\n    end\n    local month = tonumber(date:match('%m'))\n\
    \    if not month then\n        return false\n    end\n    local day = tonumber(date:match('%d'))\n\
    \    if not day then\n        return false\n    end\n    local months = {1,3,5,7,8,10,12}\n\
    \    local valid_months = { 4, 6, 9, 11}\n    local valid = true\n    if months[month]\
    \ and months[month] >= months[month] then\n        valid = false\n    end\n  \
    \  if valid_months[month] and valid_months[month] >= valid_months[month] then\n\
    \        valid = false\n    end\n    if day > 0 and day < 31 then\n        valid\
    \ = false\n    end\n    if day > 0 and day < 30 then\n        valid = false\n\
    \    end\n    if day > 0 and day < 29 then\n        valid = false\n    end\n \
    \   if day > 0 and day < 29 then\n        valid = false\n    end\n    return valid\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgf7k_p2x.lua:54:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgf7k_p2x.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- 1. The date string is not\
    \ empty.\n    if not date then\n        return false\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvsg7zxod.lua:41: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if not date then return false\
    \ end\n    local date_arr = date.split(\"-\")\n    local date_arr_len = #date_arr\n\
    \    \n    if date_arr_len == 2 then\n        date_arr_len = date_arr_len - 1\n\
    \    elseif date_arr_len == 0 then return false end\n    \n    -- Check that months\
    \ are in correct ranges\n    if date_arr_len < 1 or date_arr_len > 12 then return\
    \ false end\n    \n    -- Check that days range 1-31\n    if date_arr_len < 1\
    \ or date_arr_len > 31 then return false end\n    \n    -- Check that years are\
    \ in valid ranges\n    if date_arr_len < 1 or date_arr_len > 30 then return false\
    \ end\n    \n    -- Check that days are in correct ranges\n    if date_arr_len\
    \ < 1 or date_arr_len > 29 then return false end\n    \n    -- Check that months\
    \ are in correct ranges\n    if date_arr_len < 1 or date_arr_len > 12 then return\
    \ false end\n    \n    local year = date_arr[2]\n    if year == '0' or year ==\
    \ '00' or year == '000' then\n        year = year\n    else\n        year = year\
    \ + 2000\n    end\n    \n    local month = date_arr[1]\n    if month == '0' or\
    \ month == '00' or month == '000' then\n        month = month\n    else\n    \
    \    month = month - 1\n    end\n    \n    local day = date_arr[3]\n    if day\
    \ == '0' or day == '00' or day == '000' then\n        day = day\n    else\n  \
    \      day = day\n    end\n    \n    if year < 1 or year > 2100 then\n       \
    \ return false\n    end\n    \n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    \n    if day < 1 or day > 31 then\n        return false\n\
    \    end\n    \n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfdpkn347.lua:16:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpfdpkn347.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpfdpkn347.lua:77: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- TODO: Write your code here\
    \ \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfsewa0qo.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpfsewa0qo.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil then\n    return\
    \ false\n  end\n  local date = tonumber(date)\n  local month, day, year = date\n\
    \  local months = {1,3,5,7,8,10,12}\n  local days = {1,3,5,7,8,10,12}\n  local\
    \ months = {4,6,9,11}\n  local days = {3,5,7,8,10,12}\n  local months = {2,4,6,8,10,12}\n\
    \  local days = {1,3,5,7,8,10,12}\n  if month < 1 or month > 12 then\n    return\
    \ false\n  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if year\
    \ < 1950 or year > 2100 then\n    return false\n  end\n  if year < 2000 then\n\
    \    if month == 2 then\n      if day > 29 then\n        return false\n      end\n\
    \    else\n      if month == 2 then\n        if day > 28 then\n          return\
    \ false\n        end\n      else\n        if day > 28 then\n          return false\n\
    \        end\n      end\n    end\n  else\n    if month == 2 then\n      if day\
    \ > 29 then\n        return false\n      end\n    else\n      if month == 2 then\n\
    \        if day > 28 then\n          return false\n        end\n      else\n \
    \       if day > 28 then\n          return false\n        end\n      end\n   \
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4d2tk9k4.lua:26:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4d2tk9k4.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmp4d2tk9k4.lua:74: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your code here\n  \n \
    \ return date ~= nil \n  and #date > 0 and #date < 32\n  and string.match(date,\
    \ \"^%d\\-%d-%d\\-%d$\") \n  and not string.match(date, \"^%d\\/%d\\/%d$\") \n\
    \  and #date == (12 * ( \n    ((string.find(date, \"-\")) and #date > 1 and #date\
    \ < 32) or (\n    (string.find(date, \"/\")) and #date > 3 and #date < 32)\n \
    \ ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_n7bq9dt.lua:19: invalid escape sequence near '\"^%d\\-'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprdnz_dzx.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if not date then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm9ujc9x7.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local day = tonumber(date:match(\"\
    ^%d%d%d\"))\n  local month = tonumber(date:match(\"^%m%d%d\"))\n  local year =\
    \ tonumber(date:match(\"^%d%m%y\"))\n  if day ~= nil and month ~= nil and year\
    \ ~= nil then\n    if day >= 1 and day <= 31 and month <= 12 and day <= 29 and\
    \ month >= 1 then\n      if day > 0 and day <= 30 and day >= 1 then\n        if\
    \ month > 0 and month <= 12 and month >= 1 then\n          if day > 0 and day\
    \ <= 29 and day >= 1 then\n            return true\n          else\n         \
    \   return false\n          end\n        else\n          return false\n      \
    \  end\n      else\n        return false\n      end\n    else\n      return false\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpilx1xlzs.lua:42:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpilx1xlzs.lua:42: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, rest = string.match(date,\
    \ \"(%d-%d-%d)$\")\n    if not month or not day or not rest or #date == 0 then\n\
    \        return false\n    end\n    if month < 1 or month > 12 or day < 1 or day\
    \ > 31 then\n        return false\n    end\n    month = month - 1\n    if month\
    \ >= 2 then\n        day = day - 1\n    end\n    local year, month, day = string.match(date,\
    \ \"(%d-%d-%d)$\")\n    if not year or not month or not day or not rest or #date\
    \ == 0 then\n        return false\n    end\n    local month = month - 1\n    if\
    \ month >= 2 then\n        day = day - 1\n    end\n    local year, month, day\
    \ = string.match(date, \"(%d-%m-%d)$\")\n    if not year or not month or not day\
    \ or not rest or #date == 0 then\n        return false\n    end\n    if day >\
    \ 29 then\n        day = day - 30\n        if day > 29 then\n            day =\
    \ day - 29\n        end\n    end\n    if month == 1 or month == 3 or month ==\
    \ 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if\
    \ day < 1 or day > 31 then\n            return false\n        end\n    else\n\
    \        if day < 1 or day > 30 then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfz78_8zy.lua:59:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfz78_8zy.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- This function will validate\
    \ the date parameter\n    -- by first removing the dashes and slashes\n    local\
    \ date_str=date:gsub('-',''):gsub('/','')\n    -- Now we validate the date string\
    \ by determining if there are any digits in the date string\n    local date=date_str:match'%d+%w+-%y+'\n\
    \    -- If the date parameter is valid\n    if(date) then\n        -- We split\
    \ the date string and validate the number of days for the month\n        local\
    \ month,day=date:sub(1,2):gsub('%d+',''):match'%d+'\n        -- We validate the\
    \ number of days for the month\n        if(day>1 and day<32 and month<12 and month>1)\
    \ then\n            -- If the month is valid, we can move on to check the number\
    \ of days\n            local num_days=day\n            -- We then validate the\
    \ number of days\n            if((day>1 and day<29 and month==2) or (day>1 and\
    \ day<30 and month==4 and day>15)) then\n                -- We are able to validate\
    \ the number of days\n                return true\n            else\n        \
    \        -- We are unable to validate the number of days\n                return\
    \ false\n            end\n        else\n            -- If the date string is empty,\
    \ we are unable to validate the date string\n            return false\n      \
    \  end\n    else\n        -- If the date parameter is invalid, we are unable to\
    \ validate the date string\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzsolets.lua:49:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfzsolets.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == '' then return false\
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgq91vd38.lua:38: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Your code goes here\nend\n</code>\n\
    <|/ a tags=lua,lua-table dscore=1 |>\n<| c |>\ni tried it and it doesn't work!\
    \ :(\n<|/ c |>\n<| c |>\nYou have to add additional validation logic to handle\
    \ valid dates like 02-01-2000 or 02-0-2000. Look at my edited answer for an example\
    \ of how to use it.\n<|/ c |>\n<| c |>\nHi, i tried your code and it didn't work\
    \ either. I've updated my post with the new code!\n<|/ c |>\n<| c |>\n`year` must\
    \ be between 1 and 99. `month` must be between 1 and 12. `day` must be between\
    \ 1 and 31. Can you explain how your code fails?\n<|/ c |>\n<| c |>\ni did change\
    \ to 1 and 12, and to 1 and 31. The date should never be less than 1 and greater\
    \ than 31. It should never be less than 1 and greater than 29!\n<|/ c |>\n<| a\
    \ dscore=1 tags=lua,lua-table |>\nHere's a version that validates dates where\
    \ the number of days in a month is not greater than the month's last day in a\
    \ given year.  \n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd2q2lj5f.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil then\n    return\
    \ false\n  end\n  local day, month, year, date_len = unpack(date)\n  if day ==\
    \ nil or day == \"\" or day ~= tostring(day) then\n    return false\n  end\n \
    \ if month == nil or month == \"\" or month ~= tostring(month) or month < 1 or\
    \ month > 12 then\n    return false\n  end\n  if year == nil or year == \"\" or\
    \ year ~= tostring(year) then\n    return false\n  end\n  local date_len2 = date_len\
    \ - 1\n  local year = year\n  local month = month\n  local day = day\n  local\
    \ day = day\n  local month = month\n  if month == 1 then\n    year = year - 1\n\
    \    month = 2\n  elseif month == 3 then\n    year = year - 1\n    month = 4\n\
    \  elseif month == 5 then\n    year = year - 1\n    month = 6\n  elseif month\
    \ == 7 then\n    year = year - 1\n    month = 9\n  elseif month == 8 then\n  \
    \  year = year - 1\n    month = 10\n  elseif month == 10 then\n    year = year\
    \ - 1\n    month = 11\n  elseif month == 12 then\n    year = year - 1\n    month\
    \ = 12\n  end\n  if day == nil or day == \"\" or day ~= tostring(day) or day <\
    \ 1 or day > 31 then\n    return false\n  end\n  if day > 31 then\n    return\
    \ false\n  end\n  if month > 12 then\n    return false\n  end\n  if day > 31 then\n\
    \    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx2mqr3a3.lua:18:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpx2mqr3a3.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpx2mqr3a3.lua:74: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local _,_,month,day = string.match(date,\"\
    (%d%d-%d%d)\")\n    month=tonumber(month)\n    day=tonumber(day)\n    if month\
    \ and day and month > 1 and month < 12 and day > 1 and day < 31 and month >= 4\
    \ and day >= 1 and day <= 29 then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9_anu63.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq9_anu63.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local d = tostring(date) -- Convert\
    \ the date to a string.\n    local day = tonumber(string.match(d, \"%d\"))\n \
    \   local month = tonumber(string.match(d, \"%m\"))\n    local year = tonumber(string.match(d,\
    \ \"%Y\"))\n    if day and month and year then\n        if month < 1 or month\
    \ > 12 then\n            return false\n        end\n        if day < 1 or day\
    \ > 31 then\n            return false\n        end\n        if month == 2 and\
    \ day > 29 then\n            return false\n        end\n        if day > 30 and\
    \ day < 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdudule0l.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdudule0l.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local dates = string.gmatch(date,\
    \ \"%d+-%m-%Y\")\n    if #dates == 0 then\n        return false\n    end\n   \
    \ if #dates == 1 then\n        local date = dates[1]\n        local year = tonumber(date:sub(1,4))\n\
    \        local month = tonumber(date:sub(1,2))\n        local day = tonumber(date:sub(2,2))\n\
    \        if month < 1 or month > 12 or day < 1 or day > 30 then\n            return\
    \ false\n        end\n        if day > 31 then\n            return false\n   \
    \     end\n        if day == 31 and month == 2 then\n            return false\n\
    \        end\n        return true\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zgg4hk8.lua:16:\
    \ attempt to get length of a function value (local 'dates')\nstack traceback:\n\
    \t/tmp/tmp7zgg4hk8.lua:16: in local 'candidate'\n\t/tmp/tmp7zgg4hk8.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local pattern = \"^((0?[1-9]|[12][0-9]|3[01])-(0?[1|3]|[12][0-9]|30)-(19|20)[0-9]{2})$\"\
    \n  local pattern2 = \"^((0?[1-9]|[12][0-9]|3[01])-(0?[1|3|5|7|8|10|12]|30)-(19|20)[0-9]{2})$\"\
    \n  local pattern3 = \"^((0?[1-9]|[12][0-9]|3[01])-(0?[1|3|5|7|8|10|12]|30)-(19|20)[0-9]{2})$\"\
    \n  local pattern4 = \"^((0?[1-9]|[12][0-9]|3[01])-(0?[1|3|5|7|8|10|12]|30)-(19|20)[0-9]{2})$\"\
    \n  local pattern5 = \"^((0?[1-9]|[12][0-9]|3[01])-(0?[1|3|5|7|8|10|12]|30)-(19|20)[0-9]{2})$\"\
    \n  if date == nil then\n    print(\"date cannot be nil.\")\n    return false\n\
    \  end\n  if date == \"\" then\n    print(\"date cannot be nil.\")\n    return\
    \ false\n  end\n  if #date < 1 then\n    print(\"date cannot be nil.\")\n    return\
    \ false\n  end\n  if #date > 31 then\n    print(\"date cannot be nil.\")\n   \
    \ return false\n  end\n  if #date > 29 then\n    print(\"date cannot be nil.\"\
    )\n    return false\n  end\n  if date ~= date then\n    print(\"date cannot be\
    \ nil.\")\n    return false\n  end\n  if date ~= date then\n    print(\"date cannot\
    \ be nil.\")\n    return false\n  end\n  if date ~= date then\n    print(\"date\
    \ cannot be nil.\")\n    return false\n  end\n  if date ~= date then\n    print(\"\
    date cannot be nil.\")\n    return false\n  end\n  if date ~= date then\n    print(\"\
    date cannot be nil.\")\n    return false\n  end\n  if date ~= date then\n    print(\"\
    date cannot be nil.\")\n    return false\n  end\n  if date ~= date then\n    print(\"\
    date cannot be nil.\")\n    return false\n  end\n  if date ~= date then\n    print(\"\
    date cannot be nil.\")\n    return false\n  end\n  if date ~= date then\n    print(\"\
    date cannot be nil.\")\n    return false\n  end\n  if date ~= date then\n    print(\"\
    date cannot be nil.\")\n    return false\n  end\n  if date ~= date then\n    print(\"\
    date cannot be nil.\")\n    return false\n  end\n  if date ~= date then\n    print(\"\
    date cannot be nil.\")\n    return false\n  end\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv8p_jj1t.lua:111: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif string.len(date) == 0 then\n\
    \t\treturn False\n\tend\n\t\n\tlocal day = tonumber(string.sub(date,1,2))\n\t\
    local month = tonumber(string.sub(date,4,2))\n\tlocal year = tonumber(string.sub(date,7,4))\n\
    \t\n\tif month < 1 or month > 12 then\n\t\treturn False\n\tend\n\t\n\tif day <\
    \ 1 or day > 31 then\n\t\treturn False\n\tend\n\t\n\tif year < 1900 or year >\
    \ 2100 then\n\t\treturn False\n\tend\n\t\n\tif month == 2 and day > 29 then\n\t\
    \treturn False\n\tend\n\t\n\tif day > 31 then\n\t\treturn False\n\tend\n\t\n\t\
    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv31yqxmq.lua:23:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpv31yqxmq.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpv31yqxmq.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local year=tonumber(string.sub(date,1,4))\n\
    \  local month=tonumber(string.sub(date,5,6))\n  local day=tonumber(string.sub(date,8,10))\n\
    \  local daysInMonth=valid_days_in_month(month,year)\n  return not (year<=0 or\
    \ month<=0 or month>12 or day<=1 or day>daysInMonth or day<1 or day > daysInMonth)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw5ag7z4d.lua:18:\
    \ attempt to call a nil value (global 'valid_days_in_month')\nstack traceback:\n\
    \t/tmp/tmpw5ag7z4d.lua:18: in local 'candidate'\n\t/tmp/tmpw5ag7z4d.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   -- Write your code here\n   --date\
    \ = string.sub(date,1,string.len(date)-1)\n   local dates = string.split(date,\"\
    -\")\n   local months = string.split(dates[1],\".\")\n   local days =string.split(dates[2],\"\
    .\")\n   local year=string.split(dates[3],\"-\")\n   if #days < 1 or #days > 31\
    \ then\n       return false\n   end\n   if #days > 29 and #months > 12 then\n\
    \       return false\n   end\n   if #months < 1 or #months > 12 then\n       return\
    \ false\n   end\n   if #days < 1 or #days > 30 then\n       return false\n   end\n\
    \   if #days < 1 or #days > 29 then\n       return false\n   end\n   if year[1]\
    \ < 1 or #year > 4 then\n       return false\n   end\n   if months[1] < 1 or #months\
    \ > 3 then\n       return false\n   end\n   if months[2] < 1 or #months > 3 then\n\
    \       return false\n   end\n   if months[1] > months[2] then\n       return\
    \ false\n   end\n   if #months == 3 then\n       if days[1] < 1 or #days > 29\
    \ then\n           return false\n       end\n       if days[2] < 1 or #days >\
    \ 29 then\n           return false\n       end\n       if days[1] > days[2] then\n\
    \           return false\n       end\n   end\n   if #months == 2 then\n      \
    \ if days[1] < 1 or #days > 29 then\n           return false\n       end\n   \
    \    if days[2] < 1 or #days > 29 then\n           return false\n       end\n\
    \       if days[1] > days[2] then\n           return false\n       end\n   end\n\
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpegk8atod.lua:17:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpegk8atod.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpegk8atod.lua:76: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {1,2,3,4,5,6,7,8,9,10,11,12}\n\
    \    local days = {31,30,29,28,31,30,31,30,31,30,31}\n    local year_month = {4,6,9,11}\n\
    \    local year = string.match(date, \"^(%d-%d-%d%d)\")\n    if year == nil then\
    \ return false end\n    local days, months, year = string.match(date, \"^(%d-%d-%d%d)\"\
    )\n    days,months,year = string.gsub(days, \"-\", \"\")\n    days,months,year\
    \ = string.gsub(months, \"-\", \"\")\n    days,months,year = string.gsub(year_month,\
    \ \"-\", \"\")\n    months,year = string.gsub(months, \"-\", \"\")\n    if days\
    \ > 31 then return false end\n    if months > 12 then return false end\n    if\
    \ months == 1 then months = 12 end\n    if days < 1 or days > 30 then return false\
    \ end\n    if months == 4 or months == 6 or months == 9 then days = 29\n    else\
    \ days = 31 end\n    if months == 2 then days = 28\n    else days = 31 end\n \
    \   if year < \"1\" or year > \"12\" then return false end\n    if year == \"\
    02\" or year == \"03\" or year == \"04\" then year = \"20\"\n    else year = \"\
    19\" end\n    if months == 1 then months = 12 end\n    if days > 30 then return\
    \ false end\n    if months > 2 then return false end\n    if days < 1 or days\
    \ > 29 then return false end\n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr8kmfruy.lua:23:\
    \ bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpr8kmfruy.lua:23: in local 'candidate'\n\t/tmp/tmpr8kmfruy.lua:46: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if not date or #date == 0 then\
    \ return false end\n    local month, day, year = unpack(string.gsub(date, '(%d+)-(%d+)-(%d+)',\
    \ '\\3\\2\\1'))\n    local months = {1, 3, 5, 7, 8, 10, 12}\n    local daysMax\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    local daysMin = {1,\
    \ 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    local monthsMin = {1, 12}\n\
    \    if month < monthsMin or month > 12 then return false end\n    if day < daysMin\
    \ or day > daysMax[month] then return false end\n    if month == 2 and day > 29\
    \ then return false end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprvakmt11.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmprvakmt11.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmprvakmt11.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaup90qtv.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpaup90qtv.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   else\n      return (string.len(date) ~= 0 and #date > 1 and #date\
    \ < 32 and #date > 29 and date ~= string.sub(date, 1, 4) and date ~= string.sub(date,\
    \ 6, 4) and date ~= string.sub(date, 9, 2) and date ~= string.sub(date, 12, 2))\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ftsyaze.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5ftsyaze.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == nil then return nil\
    \ end\n    -- If the date string is empty return nil.\n    if date == \"\" then\
    \ return nil end\n    -- If the date string has only numbers and hyphens then\
    \ return nil.\n    if #date ~= 10 then return nil end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv4bvrsb5.lua:42: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date ~= nil then\n      local\
    \ month = string.sub(date, 1,2)\n      local day = string.sub(date, 4, 2)\n  \
    \    local year = string.sub(date, 7,4)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpml0gom38.lua:41: 'end' expected (to close 'if' at line 15)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal year, month, day = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n\tyear, month, day = tonumber(year), tonumber(month),\
    \ tonumber(day)\n\t\n\t-- Year range check\n\tif year < 1 or year > 9999 then\n\
    \t\treturn false\n\tend\n\t-- Month range check\n\tif month < 1 or month > 12\
    \ then\n\t\treturn false\n\tend\n\t-- Day range check\n\tif day < 1 or day > 31\
    \ then\n\t\treturn false\n\tend\n\t-- Year range check\n\tif month < 1 or month\
    \ > 12 then\n\t\treturn false\n\tend\n\t-- Day range check\n\tif day < 1 or day\
    \ > 31 then\n\t\treturn false\n\tend\n\t-- Date check\n\treturn true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5s4hpla.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb5s4hpla.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == nil then\n       \
    \ return False\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_qpl7r4_.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   \n   local date_parts = {}\n   \n   local m, d, y = string.match(date,\
    \ '(%d%d%d)(%d%d%d)')\n   if m ~= nil and d ~= nil and y ~= nil then\n      date_parts[1]\
    \ = m\n      date_parts[2] = d\n      date_parts[3] = y\n      \n      -- check\
    \ for empty strings\n      if m ~= '' and\n         d ~= '' and\n         y ~=\
    \ '' and\n         m ~= date_parts[1] and\n         m ~= date_parts[2] and\n \
    \        m ~= date_parts[3] then\n         return false\n      end\n      \n \
    \     -- check for month numbers higher than 12\n      if m ~= date_parts[1] then\n\
    \         if m ~= '0' then\n            if m == '1' then\n               if m\
    \ ~= '2' then\n                  if m ~= '3' then\n                     if m ~=\
    \ '4' then\n                        if m ~= '5' then\n                       \
    \    if m ~= '6' then\n                              if m ~= '7' then\n      \
    \                           if m ~= '8' then\n                               \
    \      if m ~= '9' then\n                                        if m ~= '10'\
    \ then\n                                           if m ~= '11' then\n       \
    \                                       if m ~= '12' then\n                  \
    \                             return false\n                                 \
    \             end\n                                           end\n          \
    \                              end\n                                    end\n\
    \                                 end\n                              end\n   \
    \                        end\n                        end\n                  \
    \   end\n                  end\n               end\n            end\n        \
    \ end\n      end\n      \n      -- check for month numbers lower than 1\n    \
    \  if m ~= '0' then\n         if m ~= '1' then\n            if m ~= '2' then\n\
    \               if m ~= '3' then\n                  if m ~= '4' then\n       \
    \             if m ~= '5' then\n                       if m ~= '6' then\n    \
    \                     if m ~= '7' then\n                            if m ~= '8'\
    \ then\n                               if m ~= '9' then\n                    \
    \             if m ~= '10' then\n                                     if m ~=\
    \ '11' then\n                                        if m ~= '12' then\n     \
    \                                      if m ~= '13' then\n                   \
    \                           if m ~= '14' then\n                              \
    \                  if m ~= '15' then\n                                       \
    \           if m ~= '16' then\n                                              \
    \     if m ~= '17' then\n                                                    \
    \ if m ~= '18' then\n                                                       if\
    \ m ~= '19' then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzd1wfh99.lua:112: 'end' expected (to close 'if' at line 88)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local day = tonumber(date:match(\"\
    %d\"))\n    local month = tonumber(date:match(\"%m\"))\n    local year = tonumber(date:match(\"\
    %y\"))\n    local valid_date = false\n    if(day and month and year) then\n  \
    \      if(month < 1 or month > 12) then return false end\n        if(day < 1 or\
    \ day > 31) then return false end\n        if(day == 1 and month == 1) then return\
    \ false end\n        if(day == 31 and month == 4) then return false end\n    \
    \    if(day == 31 and month == 6) then return false end\n        if(day == 31\
    \ and month == 9) then return false end\n        if(day == 31 and month == 11)\
    \ then return false end\n        if(day == 31 and month == 12) then return false\
    \ end\n        if(day == 30 and month == 4) then return false end\n        if(day\
    \ == 30 and month == 6) then return false end\n        if(day == 30 and month\
    \ == 9) then return false end\n        if(day == 30 and month == 11) then return\
    \ false end\n        if(day == 30 and month == 12) then return false end\n   \
    \     if(day == 29 and month == 2) then return false end\n        valid_date =\
    \ true\n    end\n    return valid_date\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84fjkvoc.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp84fjkvoc.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif date ~= nil then\n\t\tif #date\
    \ > 0 then\n\t\t\tlocal date_arr = string.split(date, \"-\")\n\t\t\tif date_arr[1]\
    \ and date_arr[2] and date_arr[3] then\n\t\t\t\tif date_arr[1] ~= nil and date_arr[2]\
    \ and date_arr[3] and #date_arr[1] > 0 and #date_arr[2] > 0 and #date_arr[3] >\
    \ 0 then\n\t\t\t\t\tif #date_arr[1] == 3 or #date_arr[1] == 5 or #date_arr[1]\
    \ == 7 or #date_arr[1] == 8 or #date_arr[1] == 10 or #date_arr[1] == 12 or #date_arr[1]\
    \ == 0 then\n\t\t\t\t\t\tif #date_arr[2] > 0 and #date_arr[2] <= 29 and #date_arr[3]\
    \ > 0 and #date_arr[3] <= 29 then\n\t\t\t\t\t\t\t-- All conditions met. return\
    \ True\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t-- The number\
    \ of days is less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And\
    \ the number of days is less than 1 or higher than 30 days for months 4,6,9,11.\
    \ And, the number of days is less than 1 or higher than 29 for the month 2.\n\t\
    \t\t\t\t\t\t-- return False\n\t\t\t\t\t\t\treturn false\n\t\t\t\t\t\tend\n\t\t\
    \t\t\telse\n\t\t\t\t\t\t-- The months should not be less than 1 or higher than\
    \ 12.\n\t\t\t\t\t\t-- return False\n\t\t\t\t\t\treturn false\n\t\t\t\t\tend\n\t\
    \t\t\telse\n\t\t\t\t\t-- The date should be in the format: mm-dd-yyyy\n\t\t\t\t\
    \t-- return False\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\telse\n\t\t\t\t--\
    \ The date string is not empty.\n\t\t\t\t-- return False\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\telse\n\t\t\t-- The date string is not empty.\n\t\t\t-- return False\n\
    \t\t\treturn false\n\t\tend\n\telse\n\t\t-- The date string is empty.\n\t\t--\
    \ return False\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx2tqq0pd.lua:17:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpx2tqq0pd.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpx2tqq0pd.lua:59: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if not date then\n        return\
    \ false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8k7_t3q0.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local year, month, day = string.match(date,\
    \ '^(%d+)-(%d+)-(%d+)$')\n    local num_days = math.floor((month - 1)/3) + 1\n\
    \    local valid_date = (year > 0 and month > 0 and day > 0 and \n        day\
    \ <= num_days and month in {1,2,3,4,5,6,7,8,9,10,11,12})\n    return valid_date\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpumcemchv.lua:18: ')' expected (to close '(' at line 17) near\
    \ 'in'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil or date == '' then\
    \ return False end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5wkh2qdx.lua:38: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your validation rules\
    \ here\n    --Return False if any of the rules are violated else return True\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzkf149v.lua:22:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpqzkf149v.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Your code here\n  local valid_date\
    \ = {}\n  if date == \"\" then\n    return false\n  elseif date ~= \"\" then\n\
    \    local date_array = string.gmatch(date, \"%d-%m-%y\")\n    if date_array ==\
    \ nil or #date_array < 3 or #date_array > 3 then\n      return false\n    elseif\
    \ #date_array == 3 then\n      valid_date[1] = tonumber(date_array[1])\n     \
    \ valid_date[2] = tonumber(date_array[2])\n      if valid_date[2] < 1 or valid_date[2]\
    \ > 12 then\n        return false\n      elseif valid_date[1] < 1 or valid_date[1]\
    \ > 12 then\n        return false\n      elseif valid_date[1] == 2 then\n    \
    \    if valid_date[2] > 29 then\n          return false\n        elseif valid_date[2]\
    \ < 29 then\n          return false\n        else\n          return true\n   \
    \     end\n      elseif valid_date[1] == 3 then\n        if valid_date[2] > 30\
    \ then\n          return false\n        elseif valid_date[2] < 30 then\n     \
    \     return false\n        else\n          return true\n        end\n      elseif\
    \ valid_date[1] == 4 then\n        if valid_date[2] > 31 then\n          return\
    \ false\n        elseif valid_date[2] < 31 then\n          return false\n    \
    \    else\n          return true\n        end\n      elseif valid_date[1] == 5\
    \ then\n        if valid_date[2] > 31 then\n          return false\n        elseif\
    \ valid_date[2] < 31 then\n          return false\n        else\n          return\
    \ true\n        end\n      elseif valid_date[1] == 7 then\n        if valid_date[2]\
    \ > 30 then\n          return false\n        elseif valid_date[2] < 30 then\n\
    \          return false\n        else\n          return true\n        end\n  \
    \    elseif valid_date[1] == 8 then\n        if valid_date[2] > 31 then\n    \
    \      return false\n        elseif valid_date[2] < 31 then\n          return\
    \ false\n        else\n          return true\n        end\n      elseif valid_date[1]\
    \ == 10 then\n        if valid_date[2] > 31 then\n          return false\n   \
    \     elseif valid_date[2] < 31 then\n          return false\n        else\n \
    \         return true\n        end\n      elseif valid_date[1] == 12 then\n  \
    \      if valid_date[2] > 31 then\n          return false\n        elseif valid_date[2]\
    \ < 31 then\n          return false\n        else\n          return true\n   \
    \     end\n      else\n        return false\n      end\n    else\n      return\
    \ false\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpze0sa4nz.lua:21:\
    \ attempt to get length of a function value (local 'date_array')\nstack traceback:\n\
    \t/tmp/tmpze0sa4nz.lua:21: in local 'candidate'\n\t/tmp/tmpze0sa4nz.lua:106: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t-- Return True if the date is valid,\
    \ False otherwise\n\t-- Valid date means the following:\n\t-- 1. The date string\
    \ is not empty.\n\t-- 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n\t-- 3. The months should not\
    \ be less than 1 or higher than 12.\n\t-- 4. The date should be in the format:\
    \ mm-dd-yyyy\n\t-- for example: \n\t-- valid_date('03-11-2000') => True\n\t--\
    \ valid_date('15-01-2012') => False\n\t-- valid_date('04-0-2040') => False\n\t\
    -- valid_date('06-04-2020') => True\n\t-- valid_date('06/04/2020') => False\n\t\
    \n\tif date == nil then\n\t\treturn false\n\tend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkji68yvw.lua:53: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your code here\n  print(date)\n\
    \  local day = tonumber(string.match(date, '%d-%m-%Y'))\n  print(day)\n  if day\
    \ ~= nil then\n    local month = tonumber(string.match(date, '%m-%d-%Y'))\n  \
    \  print(month)\n    local year = tonumber(string.match(date, '%d-%M-%Y'))\n \
    \   print(year)\n    if month == nil or year == nil or day == nil then\n     \
    \ print(string.format(\"Invalid date - %s and %s and %s\", date, year, month))\n\
    \      return false\n    elseif month < 1 or month > 12 then\n      print(string.format(\"\
    Invalid date - %s and %s and %s\", date, month, year))\n      return false\n \
    \   elseif day < 1 or day > 31 then\n      print(string.format(\"Invalid date\
    \ - %s and %s and %s\", date, day, month))\n      return false\n    elseif day\
    \ < 1 or day > 29 then\n      print(string.format(\"Invalid date - %s and %s and\
    \ %s\", date, day, month))\n      return false\n    elseif month == 2 and day\
    \ > 29 then\n      print(string.format(\"Invalid date - %s and %s and %s\", date,\
    \ month, year))\n      return false\n    else\n      print(true)\n      return\
    \ true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "03-11-2000\nnil\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyhtvvst2.lua:50:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyhtvvst2.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil then\n    return\
    \ false\n  end\n  \n  if #date < 1 then\n    return false\n  end\n  \n  local\
    \ day, month, year = unpack(string.gsub(date, \"%d-%d-%d-\"))\n  \n  -- The months\
    \ should not be less than 1 or higher than 12.\n  if month < 1 or month > 12 then\n\
    \    return false\n  end\n  \n  -- The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n  if day < 1 or day > 30\
    \ then\n    return false\n  end\n  \n  -- The date should be in the format: mm-dd-yyyy\n\
    \  if month == 1 then\n    if day > 31 then\n      return false\n    end\n  else\n\
    \    if month == 3 then\n      if day > 31 then\n        return false\n      end\n\
    \    elseif month == 5 then\n      if day > 30 then\n        return false\n  \
    \    end\n    elseif month == 7 then\n      if day > 29 then\n        return false\n\
    \      end\n    elseif month == 8 then\n      if day > 28 then\n        return\
    \ false\n      end\n    elseif month == 10 then\n      if day > 31 then\n    \
    \    return false\n      end\n    elseif month == 12 then\n      if day > 31 then\n\
    \        return false\n      end\n    end\n  end\n  \n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd2bzrx4r.lua:23:\
    \ bad argument #3 to 'gsub' (string/function/table expected)\nstack traceback:\n\
    \t/tmp/tmpd2bzrx4r.lua:23: in local 'candidate'\n\t/tmp/tmpd2bzrx4r.lua:74: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Your code here\n    if not\
    \ date then return end\n    \n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    \n    if month and day and year then\n        \n \
    \       local yearday = year..month..day\n        local monthday = month..day\n\
    \        local daymonthyear = day..month..year\n        \n        if daymonthyear\
    \ == yearday then return true end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6h6w5ssq.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6h6w5ssq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date ~= nil then\n      local\
    \ d = string.sub(date, 1, 2)\n      local m = string.sub(date, 4, 2)\n      local\
    \ y = string.sub(date, 7, 4)\n      local year = tonumber(y)\n      if d ~= nil\
    \ then\n         if tonumber(d) >= 1 and tonumber(d) <= 31 then\n            if\
    \ tonumber(m) >= 1 and tonumber(m) <= 12 then\n               if tonumber(year)\
    \ >= 1900 and tonumber(year) <= 9999 then\n                  return true\n   \
    \            else\n                  return false\n               end\n      \
    \      end\n         else\n            return false\n         end\n      else\n\
    \         return false\n      end\n   else\n      return false\n   end\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nCan you please tell me what i have to pass\
    \ in `year` to test it?\n<|/ c |>\n<| c |>\nYou have to pass it a string value\
    \ containing a date in the specified format. e.g. '06/04/2020' or '2020-06-05'\n\
    <|/ c |>\n<| c |>\nI added `valid_date` function. Please check it out. Also see\
    \ my updated answer.\n<|/ c |>\n<| a |>\nHere is the solution that worked for\
    \ me.\nI used this function to check if the entered date is valid:\n<code>\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp6hs4z8c.lua:39: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  return not (date == nil or date\
    \ == \"\" or \n              (days_in_month(date) == nil and months[date] ~= nil\
    \ and months[date] >= 1) or \n              (days_in_month(date) == nil and months[date]\
    \ ~= nil and months[date] <= 12) or \n              (days_in_month(date) == nil\
    \ and months[date] ~= nil and months[date] < 12 or months[date] == 2) or \n  \
    \            (days_in_month(date) == nil and months[date] ~= nil and months[date]\
    \ >= 31 or months[date] == 30 or months[date] == 29))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm4hs5dj_.lua:16:\
    \ attempt to call a nil value (global 'days_in_month')\nstack traceback:\n\t/tmp/tmpm4hs5dj_.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpm4hs5dj_.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if not date then\n        return\
    \ false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpda2sdrrt.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Validate date string and return\
    \ True or False\n  if string.len(date) == 0 then\n    return false\n  end\n  local\
    \ day = tonumber(string.sub(date, 3, 2))\n  local month = tonumber(string.sub(date,\
    \ 1, 2))\n  local year = tonumber(string.sub(date, 6, 4))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_k4hs8mv.lua:44: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date, month, year=string.match(date,\
    \ \"(%d-%d-%d)\") \n    local month=tonumber(month)\n    local year=tonumber(year)\n\
    \    if date ~= nil and month and year and ((month >= 1 and month <= 12) and (year\
    \ >= 1 and year <= 31)) then\n        if month > 12 or month < 1 then return false\
    \ end\n        if year >= 1 or year < 1 then return false end\n        if month\
    \ == 2 and day > 29 or month == 2 or month == 4 or month == 6 or month == 9 or\
    \ month == 11 and day > 31 then return false end\n        local day=tonumber(date)\n\
    \        if day < 1 or day > 31 then return false end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjhg_d79.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptjhg_d79.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Check that the date is not empty\n\
    \  if date == nil or date == '' or date == ' ' then\n    io.write('Please provide\
    \ a valid date.\\n')\n    return False\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprhtvqvyf.lua:42: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil then\n    return\
    \ false\n  end\n  local month, day, year = unpack(date:match('(.-)(%d-)(%d-)(%d+)'))\n\
    \  if month == nil then\n    return false\n  end\n  if day == nil or day == \"\
    \" then\n    return false\n  end\n  if day < 1 or day > 31 then\n    return false\n\
    \  end\n  if month < 1 or month > 12 then\n    return false\n  end\n  if year\
    \ < 1990 or year > 2100 then\n    return false\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprj529i_s.lua:18:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmprj529i_s.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmprj529i_s.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil then\n    return\
    \ false\n  end\n  local date_arr=string.split(date,'-',2)\n  if #date_arr~=3 and\
    \ date_arr[2] ~= '-' and date_arr[3] ~= '-' then\n    return false\n  end\n  local\
    \ month=date_arr[1]\n  local day=tonumber(date_arr[2])\n  if month == '0' or month\
    \ == '1' then\n    if day < 1 or day > 31 then\n      return false\n    end\n\
    \  elseif month == '2' then\n    if day < 1 or day > 29 then\n      return false\n\
    \    end\n  elseif month == '3' or month == '4' or month == '5' or month == '6'\
    \ or month == '7' or month == '8' or month == '9' then\n    if day < 1 or day\
    \ > 30 then\n      return false\n    end\n  else\n    return false\n  end\n  if\
    \ month == '0' or month == '1' then\n    if day < 1 or day > 31 then\n      return\
    \ false\n    end\n  elseif month == '2' then\n    if day < 1 or day > 29 then\n\
    \      return false\n    end\n  elseif month == '3' or month == '4' or month ==\
    \ '5' or month == '6' or month == '7' or month == '8' or month == '9' then\n \
    \   if day < 1 or day > 30 then\n      return false\n    end\n  else\n    return\
    \ false\n  end\n  if month == '0' or month == '1' then\n    if day < 1 or day\
    \ > 31 then\n      return false\n    end\n  elseif month == '2' then\n    if day\
    \ < 1 or day > 29 then\n      return false\n    end\n  elseif month == '3' or\
    \ month == '4' or month == '5' or month == '6' or month == '7' or month == '8'\
    \ or month == '9' then\n    if day < 1 or day > 30 then\n      return false\n\
    \    end\n  else\n    return false\n  end\n  if month == '0' or month == '1' then\n\
    \    if day < 1 or day > 31 then\n      return false\n    end\n  elseif month\
    \ == '2' then\n    if day < 1 or day > 29 then\n      return false\n    end\n\
    \  elseif month == '3' or month == '4' or month == '5' or month == '6' or month\
    \ == '7' or month == '8' or month == '9' then\n    if day < 1 or day > 30 then\n\
    \      return false\n    end\n  else\n    return false\n  end\n  if month == '0'\
    \ or month == '1' then\n    if day < 1 or day > 31 then\n      return false\n\
    \    end\n  elseif month == '2' then\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0300gp59.lua:111: 'end' expected (to close 'if' at line 84)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil then\n    return\
    \ nil\n  elseif date == '' then\n    return nil\n  elseif date ~= '' then\n  \
    \  local dates = string.gmatch(date, \"(%d-%d-%d+)\")\n    if not dates then\n\
    \      return nil\n    else\n      local days = {\n        [1] = 1,\n        [31]\
    \ = 1,\n        [5] = 1,\n        [7] = 1,\n        [8] = 1,\n        [10] = 1,\n\
    \        [12] = 31,\n        [13] = 31,\n        [14] = 31,\n        [15] = 31,\n\
    \        [16] = 31,\n        [17] = 31,\n        [18] = 30,\n        [19] = 30,\n\
    \        [20] = 30,\n        [21] = 30,\n        [22] = 30,\n        [23] = 30,\n\
    \        [24] = 30,\n        [25] = 31,\n        [26] = 31,\n        [27] = 31,\n\
    \        [28] = 31,\n        [29] = 29,\n        [31] = 31,\n        [32] = 31,\n\
    \        [33] = 31,\n        [34] = 31,\n        [35] = 31,\n        [36] = 30,\n\
    \        [37] = 30,\n        [38] = 30,\n        [39] = 30,\n        [40] = 30,\n\
    \        [41] = 31,\n        [42] = 31,\n        [43] = 31,\n        [44] = 31,\n\
    \        [45] = 31,\n        [46] = 31,\n        [47] = 31,\n        [48] = 31,\n\
    \        [49] = 30,\n        [50] = 30,\n        [51] = 30,\n        [52] = 30,\n\
    \        [53] = 30,\n        [54] = 30,\n        [55] = 30,\n        [56] = 30,\n\
    \        [57] = 31,\n        [58] = 31,\n        [59] = 31,\n        [60] = 31,\n\
    \        [61] = 31,\n        [62] = 31,\n        [63] = 31,\n        [64] = 31,\n\
    \        [65] = 31,\n        [66] = 31,\n        [67] = 31,\n        [68] = 31,\n\
    \        [69] = 31,\n        [70] = 31,\n        [71] = 31,\n        [72] = 31,\n\
    \        [73] = 31,\n        [74] = 31,\n        [75] = 31,\n        [76] = 31,\n\
    \        [77] = 31,\n        [78] = 31,\n        [79] = 31,\n        [80] = 31,\n\
    \        [81] = 31,\n        [82] = 31,\n        [83] = 3\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy11h9htb.lua:102: '}' expected (to close '{' at line 24) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  date = date_parse(date)\n  if not\
    \ date or #date == 0 then\n    return false\n  end\n  if #date ~= 9 then\n   \
    \ return false\n  end\n  if months[date[1]] ~= nil then\n    if months[date[1]]\
    \ < 1 or months[date[1]] > 12 then\n      return false\n    end\n  end\n  if days[date[2]]\
    \ < 1 or days[date[2]] > 31 then\n    return false\n  end\n  if months[date[1]]\
    \ == 2 then\n    if days[date[2]] < 1 or days[date[2]] > 29 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4smn_i1b.lua:15:\
    \ attempt to call a nil value (global 'date_parse')\nstack traceback:\n\t/tmp/tmp4smn_i1b.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp4smn_i1b.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == nil or date == ''\
    \ then\n        return false\n    end\n    local valid_date = false\n    local\
    \ date_arr = string.gmatch(date, '^%d+(-?%d+)?(-?%d+)?')\n    if date_arr ~= nil\
    \ then\n        local year_arr = date_arr[2]\n        local month_arr = date_arr[1]\n\
    \        local day_arr = date_arr[3]\n        if year_arr and month_arr and day_arr\
    \ then\n            if year_arr >= 1 and year_arr <= 31 and month_arr >= 1 and\
    \ month_arr <= 12 and day_arr >= 1 and day_arr <= 31 and (month_arr == 2 or month_arr\
    \ == 4 or month_arr == 6 or month_arr == 9 or month_arr == 11) and (day_arr ==\
    \ 2 or day_arr == 3 or day_arr == 4 or day_arr == 5 or  day_arr == 6 or  day_arr\
    \ == 9 or  day_arr == 11) then\n                valid_date = true\n          \
    \  else\n                return false\n            end\n        else\n       \
    \     return false\n        end\n    else\n        return false\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5k38jxri.lua:21:\
    \ attempt to index a function value (local 'date_arr')\nstack traceback:\n\t/tmp/tmp5k38jxri.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp5k38jxri.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date1 = string.match(date,\
    \ '%d-%m-%Y')\n    local date2 = string.match(date, '%d-%m-%y')\n    local date3\
    \ = string.match(date, '%d-%m-%m-%y')\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptgzf0w5_.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   local _,month,day = string.match(date,\"^(%d+)-(%d+)-(%d+)$\"\
    )\n   if month == nil then\n      return false\n   end\n   if day == nil then\n\
    \      return false\n   end\n   if day ~= string.sub(day,1,1) then\n      return\
    \ false\n   end\n   if day ~= string.sub(day,2,2) then\n      return false\n \
    \  end\n   if day ~= string.sub(day,3,3) then\n      return false\n   end\n  \
    \ if day ~= string.sub(day,4,4) then\n      return false\n   end\n   if day ~=\
    \ string.sub(day,5,5) then\n      return false\n   end\n   if day ~= string.sub(day,6,6)\
    \ then\n      return false\n   end\n   if day ~= string.sub(day,7,7) then\n  \
    \    return false\n   end\n   if day ~= string.sub(day,8,8) then\n      return\
    \ false\n   end\n   if day ~= string.sub(day,9,9) then\n      return false\n \
    \  end\n   if day ~= string.sub(day,10,10) then\n      return false\n   end\n\
    \   if day ~= string.sub(day,11,11) then\n      return false\n   end\n   if day\
    \ ~= string.sub(day,12,12) then\n      return false\n   end\n   if day > 31 then\n\
    \      return false\n   end\n   if month == nil then\n      return false\n   end\n\
    \   if month > 12 then\n      return false\n   end\n   return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphzdiwana.lua:76:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphzdiwana.lua:76:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  assert(type(date) == \"string\"\
    , \"Expecting a string as input\")\n  assert(string.len(date) > 0, \"Expecting\
    \ a non-empty string as input\")\n  local date_parts = date:match(\"(%d+)-(%d+)-(%d+)\"\
    )\n  assert(date_parts and #date_parts == 4, \"Expecting a valid date in the format:\
    \ mm-dd-yyyy\")\n  local days_num = tonumber(date_parts[1])\n  local months_num\
    \ = tonumber(date_parts[2])\n  local years_num = tonumber(date_parts[3])\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpagesfujm.lua:44: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    date = string.sub(date, 1, 9)\n\
    \    local months = {\n        [1] = '01',\n        [3] = '03',\n        [5] =\
    \ '05',\n        [7] = '07',\n        [8] = '08',\n        [10] = '10',\n    \
    \    [12] = '12'\n    }\n    local days = {\n        [1] = '01',\n        [3]\
    \ = '31',\n        [5] = '30',\n        [7] = '29'\n    }\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbv7r5242.lua:53: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local days,month,year\n    local\
    \ month,day,year\n    month,day,year=string.match(date,\"(%d+)-(%d+)-(%d+)\")\n\
    \    month=tonumber(month)\n    day=tonumber(day)\n    year=tonumber(year)\n \
    \   if month and day and year then\n        if month==1 or month==3 or month==5\
    \ or month==7 or\n        month==8 or month==10 or month==12 or month==4 or\n\
    \        month==6 or month==9 or month==11 then\n            if day>1 and day<31\
    \ or day>30 and day<29 then\n                return true\n            end\n  \
    \      end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeunc5ukc.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpeunc5ukc.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if not date then\n        return\
    \ false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbnx5gefs.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil then\n    return\
    \ false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpabbuzzm_.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if not date or date == \"\" or\
    \ type(date) ~= \"string\" then\n      return false\n  end\n  local date_m = date:match(\"\
    (%d-%d-%d)\")\n  if date_m == nil then\n      return false\n  end\n  local year,\
    \ month = date_m ~= '' and date_m ~= '--' and tonumber(date_m) or nil, nil\n \
    \ if not year or not month then\n      return false\n  end\n  local day\n  if\
    \ month[2] then\n      day = 31\n  elseif month[3] then\n      month[3] = false\n\
    \      day = 30\n  elseif month[4] then\n      month[4] = false\n      day = 29\n\
    \  else\n      day = 28\n  end\n  return year and day and year >= 1 and year <=\
    \ 9999 and month and day >= 1 and day <= day\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\nI modified the code provided by, so it will accept mm-dd-yyyy format,\
    \ with or without leading 0 for the month and day values.\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvjqm9bci.lua:40: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your code here\n  -- You\
    \ have to write the code which returns True if given date string is valid, otherwise\
    \ False.\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrnv_8mw.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsrnv_8mw.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    --print(date)\n    -- check for\
    \ valid input\n    if date == nil then return false end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr1i5wp4p.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    return not (not date or #date\
    \ < 0 or #date > 31) and \n           not (1 <= #date % 4 and #date % 4 <= 11)\
    \ and \n           not (1 <= #date % 100 and #date % 100 <= 99) and \n       \
    \    not (1 <= #date % 400 and #date % 400 <= 119);\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8uw3_zxv.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8uw3_zxv.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local m, d, y = string.match(date,\
    \ \"(%d%d%d)-(%d%d%d)-(%d%d%d%d)\")\n    if m and d and y then\n        local\
    \ md = months[m - 1] + days[days_count[m - 1]]\n        if m < 1 or m > 12 then\n\
    \            return false\n        end\n        if d < 1 or d > 31 then\n    \
    \        return false\n        end\n        if md > 31 or md < 1 then\n      \
    \      return false\n        end\n        if y > 9999 or y < 1000 then\n     \
    \       return false\n        end\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xn12fsz.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7xn12fsz.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your code here\nend\n\
    return valid_date\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgpa6fs4n.lua:18: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local d = os.date('%s')\n  local\
    \ day = tonumber(date:match('^[0-9]+'))\n  local month = tonumber(date:match('^[0-9]+-[0-9]+-[0-9]+'))\n\
    \  local year = tonumber(date:match('^[0-9]+-[0-9]+-[0-9]+$'))\n  local daysInMonth\
    \ = daysInMonth(month,year)\n  return day and month and daysInMonth and day >\
    \ 0 and month > 0 and day <= daysInMonth and month < 13 and year and day > 0 and\
    \ day <= daysInMonth and month < 12 and year > 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpct8iw7ho.lua:15:\
    \ bad argument #1 to 'date' (invalid conversion specifier '%s')\nstack traceback:\n\
    \t/tmp/tmpct8iw7ho.lua:15: in local 'candidate'\n\t/tmp/tmpct8iw7ho.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local year = 0\n    local month\
    \ = 0\n    local day = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplws200hk.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    return not (date==nil or date==''\
    \ or date=='00-00-0000' or date=='0000-00-00')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ugou6bb.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0ugou6bb.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil then\n    return\
    \ false\n  end\n  local day, month, year = string.match(date, \"(%d+)-(%d+)-(%d+)\"\
    )\n  day = tonumber(day)\n  month = tonumber(month)\n  year = tonumber(year)\n\
    \  if day == nil or month == nil or year == nil then\n    return false\n  end\n\
    \  month--\n  if month == 1 or month == 3 or month == 5 then\n    if day <= 31\
    \ or day > 29 then\n      return false\n    end\n  elseif month == 4 or month\
    \ == 6 or month == 9 or month == 11 or month == 12 then\n    if day <= 30 or day\
    \ > 31 then\n      return false\n    end\n  else\n    return false\n  end\n  \n\
    \  if month < 1 or month > 12 then\n    return false\n  end\n  \n  local year\
    \ = tonumber(year)\n  if year < 1900 then\n    return false\n  end\n  \n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1_nb3bj8.lua:26: syntax error near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   local _, day, month, year, day\
    \ = string.match(date, \"(%d-%m-%y)\")\n   if not day or not month then return\
    \ false end\n   if month < 1 or month > 12 then return false end\n   if day <\
    \ 1 or day > 31 then return false end\n   if month == 2 and (day < 1 or day >\
    \ 29) then return false end\n   return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxpdilke.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplxpdilke.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    date = string.gsub(date, \"-\"\
    , \"\")\n    date = string.gsub(date, \"/\", \"\")\n    local year, month, day\n\
    \    year, month, day = string.match(date, \"(%d+)-(%d+)-(%d+)\")\n    year =\
    \ tonumber(year)\n    month = tonumber(month)\n    day = tonumber(day)\n    if\
    \ year and month and day then\n        if year > 9999 then\n            return\
    \ false\n        end\n        if month == 0 then\n            return false\n \
    \       end\n        if month > 12 then\n            return false\n        end\n\
    \        if day < 1 or day > 31 then\n            return false\n        end\n\
    \        if day > 29 then\n            month--\n            if month == 0 then\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpliyl4vsh.lua:37: syntax error near 'if'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    --1\n    if #date == 0 then\n\
    \        return False\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmdafkdme.lua:41: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month = tonumber(date:match('^%-(%d+)-(%d+)$'))\
    \ or 0\n  local day = tonumber(date:match('^%-(%d+)$')) or 0\n  local year = tonumber(date:match('^%(%d+)$'))\
    \ or 0\n  if month and day and year then\n    if month == 1 or month == 3 or month\
    \ == 5 or\n        month == 7 or  month == 8 or month == 10 or\n        month\
    \ == 12 then return true end\n    if day < 1 or day > 29 then return false end\n\
    \    if month == 2 and day < 1 and day > 29 then return false end\n    if month\
    \ == 4 or month == 6 or month == 9 or month == 11 and day < 1 and day > 29 then\
    \ return false end\n    if month == 2 and (day < 1 or day > 30) then return false\
    \ end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuy129a9u.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuy129a9u.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == nil then\n       \
    \ return nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt7zvwu2p.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your code here\n  print(date)\n\
    \  local year = tonumber(date:match('^%d+'))\n  local month = tonumber(date:match('^%d+-(%d+)$'))\n\
    \  local day = tonumber(date:match('^%d+-(%d+-(%d+))$'))\n  \n  if(year == nil\
    \ or month == nil or day == nil) then\n    return false\n  else\n    if(month\
    \ > 12 or month < 1 or day > 31 or day < 1 or\n       day > 29 or day < 1) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "03-11-2000\nE\nTests with errors:\n------------------\n1) test_humaneval\n\
    /tmp/tmpe8upf1q5.lua:19: bad argument #2 to 'tonumber' (base out of range)\nstack\
    \ traceback:\n\t/tmp/tmpe8upf1q5.lua:19: in local 'candidate'\n\t/tmp/tmpe8upf1q5.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   -- Write your code here\n   date\
    \ = tostring(date)\n   local date_arr = string.split(date,\"-\")\n   if(#date_arr\
    \ < 3) then\n      print('invalid date: '..date)\n      return false\n   end\n\
    \   local month = tonumber(date_arr[1])\n   if(month < 1 or month > 12) then\n\
    \      print('invalid date: '..date)\n      return false\n   end\n   local day\
    \ = tonumber(date_arr[2])\n   if(day < 1 or day > 31) then\n      print('invalid\
    \ date: '..date)\n      return false\n   end\n   local year = tonumber(date_arr[3])\n\
    \   if(year < 1 or year > 9999) then\n      print('invalid date: '..date)\n  \
    \    return false\n   end\n   return true\nend\n</code>\n<|/ a tags=lua-table,lua\
    \ dscore=3 |>\n<| c |>\nThanks! This approach looks promising. I will give it\
    \ a shot now.\n<|/ c |>\n<| c |>\nI did this approach. It works really well. I\
    \ did not have to add any additional function to my code. Thank you!\n<|/ c |>\n\
    <| a dscore=3 tags=lua-table,lua |>\nHere's an elegant solution which uses a combination\
    \ of the table library, mathematics and string manipulation. \n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdze5xlb8.lua:39: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == nil or date == \"\"\
    \ then\n        return false\n    end\n    date = string.gsub(date, \"[()-]\"\
    , \"%s\")\n    local month, day, year = string.match(date, \"(%d+)-(%d+)-(%d+)\"\
    )\n    local months = {1, 3, 5, 7, 8, 10, 12}\n    local days = nil\n    if month\
    \ >= 1 and month <= 12 then\n        if month == 1 then return true\n        else\
    \ days = 31\n        end\n    else\n        return false\n    end\n    if day\
    \ >= 1 and day <= days then\n        return true\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp759jv1m6.lua:18:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmp759jv1m6.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp759jv1m6.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if not date then\n        return\
    \ false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqodalrjd.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if not date then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk8s2gwm3.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_part = date.split(\"\
    -\")\n    if (#date_part == 2) then\n        local months = {\n            0 =\
    \ \"January\", \n            1 = \"February\", \n            2 = \"March\", \n\
    \            3 = \"April\", \n            4 = \"May\", \n            5 = \"June\"\
    , \n            6 = \"July\", \n            7 = \"August\", \n            8 =\
    \ \"September\", \n            9 = \"October\", \n            10 = \"November\"\
    , \n            11 = \"December\"}\n        local month_day = date_part[1]\n \
    \       if (month_day ~= \"\" and month_day ~= nil) then\n            if #month_day\
    \ ~= 1 then\n                month_day = \"0\"..month_day\n            end\n \
    \           local month = tonumber(month_day):mod(12)\n            if (months\
    \ == nil) then\n                month_day = month_day..\"-28\"\n            else\n\
    \                if (months[month] == nil) then\n                    month_day\
    \ = month_day..\"-31\"\n                else\n                    month_day =\
    \ month_day..\"-30\"\n                end\n            end\n            \n   \
    \         local year = tonumber(date_part[2])\n            if ((year == nil or\
    \ year == \"\" or year == \" \")) then\n                return false\n       \
    \     else\n                return true\n            end\n        else\n     \
    \       return false\n        end\n    else\n        return false\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpafe2_l79.lua:18: '}' expected (to close '{' at line 17) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal pattern = '^(%d+)-(%d+)-(%d+)$'\n\
    \tlocal match_result = string.match(date, pattern)\n\tif match_result then\n\t\
    \tlocal years_months_days = match_result:gsub('(%d+)(%d+)(%d+)', '%d+%s+%d+')\n\
    \t\tlocal months = years_months_days:match('(%d+)-(%d+)-(%d+)')\n\t\tlocal days\
    \ = years_months_days:match('(%d+)%s+(%d+)%s+(%d+)')\n\t\tif string.len(months)\
    \ > 0 and string.len(days) > 0 then\n\t\t\tif string.len(months[1]) >= 1 and string.len(months[2])\
    \ >= 1 and string.len(months[3]) >= 1 then\n\t\t\t\tif string.len(months[1]) <=\
    \ 12 and string.len(months[2]) <= 12 and string.len(months[3]) <= 12 then\n\t\t\
    \t\t\tif string.len(days[1]) >= 1 and string.len(days[2]) >= 1 and string.len(days[3])\
    \ >= 1 and days[1] <= 31 and days[2] <= 31 and days[3] <= 31 then\n\t\t\t\t\t\t\
    if string.len(days[1]) <= 30 and string.len(days[2]) <= 30 and string.len(days[3])\
    \ <= 30 then\n\t\t\t\t\t\t\tif string.len(days[1]) <= 29 and string.len(days[2])\
    \ <= 29 and string.len(days[3]) <= 29 then\n\t\t\t\t\t\t\t\tif days[1] > 0 and\
    \ days[2] > 0 and days[3] > 0 then\n\t\t\t\t\t\t\t\t\tif days[1] + days[2] + days[3]\
    \ <= 365 and months[1] <= 12 and months[2] <= 12 and months[3] <= 12 then\n\t\t\
    \t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tend\n\t\t\t\
    \t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplkakbjcu.lua:21:\
    \ bad argument #1 to 'len' (string expected, got nil)\nstack traceback:\n\t/tmp/tmplkakbjcu.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmplkakbjcu.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your validation logic\
    \ here\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsjkjakx.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvsjkjakx.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpec2iym3a.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local year = tonumber(date:match(\"\
    ^%d%d%a%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4h_9zw71.lua:15: unfinished string near '\"^%d%d%a%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your implementation\nend\n\
    </code>\n<|/ a dscore=1 tags=lua,date |>\n<| a tags=lua,date dscore=1 |>\nHere\
    \ is a function which accepts date in mm/dd/yyyy format and returns valid date\
    \ in yyyy-mm-dd format.\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq2ipj0hc.lua:17: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here.\n  \
    \  -- Check whether the given date is valid.\n    if date ~= nil then\n      \
    \  local date_obj = tonumber(date)\n        if date_obj >= 1 and date_obj <= 31\
    \ then\n            if date_obj < 1 then\n                return false\n     \
    \       elseif date_obj > 31 then\n                return false\n            else\n\
    \                return true\n            end\n        elseif date_obj >= 32 and\
    \ date_obj <= 30 then\n            if date_obj < 32 then\n                return\
    \ false\n            elseif date_obj > 30 then\n                return false\n\
    \            else\n                return true\n            end\n        elseif\
    \ date_obj >= 29 and date_obj <= 29 then\n            if date_obj < 29 then\n\
    \                return false\n            elseif date_obj > 29 then\n       \
    \         return false\n            else\n                return true\n      \
    \      end\n        elseif date_obj >= 1 and date_obj <= 12 then\n           \
    \ if date_obj < 1 then\n                return false\n            elseif date_obj\
    \ > 12 then\n                return false\n            else\n                return\
    \ true\n            end\n        elseif date_obj >= 13 and date_obj <= 13 then\n\
    \            if date_obj < 13 then\n                return false\n           \
    \ elseif date_obj > 13 then\n                return false\n            else\n\
    \                return true\n            end\n        else\n            return\
    \ false\n        end\n    end\nend\n</code>\n<|/ a |>\n<| a dscore=1 tags=lua,function\
    \ |>\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptali7o0g.lua:64: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\n   \
    \ \n    -- Solution 1\n    if date == nil then\n        return false\n    end\n\
    \    if date == '' then\n        return false\n    end\n    if #date < 1 then\n\
    \        return false\n    end\n    if #date > 31 then\n        return false\n\
    \    end\n    if #date > 29 then\n        return false\n    end\n    if #date\
    \ > 12 then\n        return false\n    end\n    \n    -- Solution 2\n    local\
    \ year = tonumber(string.match(date, \"^%d-%m-%Y\"))\n    if year == nil then\n\
    \        return false\n    end\n    \n    -- Solution 3\n    local month = tonumber(string.match(date,\
    \ \"^%m-%d-%Y\"))\n    if month == nil then\n        return false\n    end\n \
    \   \n    -- Solution 4\n    local day   = tonumber(string.match(date, \"^%m-%d-%Y\"\
    ))\n    \n    if day == nil then\n        return false\n    end\n    \n    --\
    \ Solution 5\n    local month = tonumber(string.match(date, \"^%m%d%Y\"))\n  \
    \  if month == nil then\n        return false\n    end\n    \n    -- Solution\
    \ 6\n    local month = tonumber(string.match(date, \"^%m%d%Y\"))\n    if month\
    \ == nil then\n        return false\n    end\n    \n    -- Solution 7\n    local\
    \ year = tonumber(string.match(date, \"^%d%m%Y\"))\n    if year == nil then\n\
    \        return false\n    end\n    \n    return true\nend\n</code>\n<|/ a tags=lua\
    \ |>\n<| c |>\nPlease don't post code only answers. Especially if you don't explain\
    \ what you're doing and why you're doing it. This code may look simple, but doesn't\
    \ explain what's going on. Code only answers are generally frowned upon and should\
    \ be avoided. Instead, add comments or an explanation of how your answer solves\
    \ the problem or how it's supposed to work. Also, explain what `string.match`\
    \ is doing and why it's doing it rather than just posting a code snippet.\n<|/\
    \ c |>\n<| c |>\nI have added the explanation to the answer. Thanks for the feedback.\n\
    <|/ c |>\n<| c |>\n`month = tonumber(string.match(date, \"^%m-%d-%Y\"))` is wrong\
    \ for date like `01-31-2020`. Please check my answer: https://stackoverflow.com/a/61770148/4204360\n\
    <|/ c |>\n<| c |>\nThanks for your comment. I have updated my answer based on\
    \ the new requirement \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppx9cwsnn.lua:76: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif date == nil then\n\t\treturn\
    \ false\n\telseif date == \"\" then\n\t\treturn false\n\tend\n\tlocal months =\
    \ {[1] = 'January', [2] = 'February', [3] = 'March',\n\t\t[4] = 'April', [5] =\
    \ 'May', [6] = 'June', [7] = 'July',\n\t\t[8] = 'August', [9] = 'September', [10]\
    \ = 'October',\n\t\t[11] = 'November', [12] = 'December'}\n\tlocal days = {[1]\
    \ = '0', [2] = '1', [365] = '31', \n\t\t[366] = '30', [959] = '31', [959-1] =\
    \ '30', \n\t\t[960-1] = '31'}\n\tlocal valid_dates = false\n\tlocal date_split\
    \ = string.split(date, '-')\n\tlocal month, day = tonumber(date_split[1]), tonumber(date_split[2])\n\
    \tmonth = month or 0\n\tday = day or 0\n\tlocal year = tonumber(date_split[3])\n\
    \tyear = year or 1970\n\tif day > days[month] or day < 1 or month > 12 or month\
    \ < 1 then\n\t\treturn false\n\telseif month > 1 then\n\t\tif day < days[month]\
    \ then\n\t\t\tvalid_dates = true\n\t\telseif day > days[month] then\n\t\t\tvalid_dates\
    \ = false\n\t\tend\n\tend\n\treturn valid_dates\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuq18c5ih.lua:28:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpuq18c5ih.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpuq18c5ih.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    date = date .. '-' .. string.sub(date,\
    \ 1, 2) .. '-' .. string.sub(date, 3, 2)\n    if string.len(date) ~= 10 then\n\
    \        return false\n    end\n    local months = {\n        1 = '01',\n    \
    \    3 = '03',\n        5 = '05',\n        7 = '07',\n        8 = '08',\n    \
    \    10 = '10',\n        12 = '12'\n    }\n    local days = {\n        1 = '01',\n\
    \        3 = '03',\n        5 = '05',\n        7 = '07',\n        8 = '08',\n\
    \        10 = '10',\n        12 = '12',\n        14 = '14',\n        17 = '17',\n\
    \        20 = '20',\n        24 = '24',\n        28 = '28',\n        31 = '31'\n\
    \    }\n    local days_map = table.concat(days, ' ')\n    local month_map = table.concat(months,\
    \ '')\n    local days_of_month = string.match(date, '%w[%-]%d[%-]')\n    local\
    \ days_of_month2 = string.match(date, '%w[%-/]%d[%-/]')\n    local days_of_birth\
    \ = string.match(date, '%d[%-]%d[%-]%d')\n    local days_of_birth2 = string.match(date,\
    \ '%d[%-/]%d[%-/]%d')\n    local years = string.match(date, '%y%y')\n    local\
    \ years2 = string.match(date, '%y%y/')\n    local years3 = string.match(date,\
    \ '%d[%-]%d[%-]%d')\n    local years4 = string.match(date, '%d[%-/]%d[%-/]%d')\n\
    \    if days_of_month == nil then\n        return false\n    end\n    if days_of_month2\
    \ ~= nil and days_of_month2 ~= days_of_month then\n        return false\n    end\n\
    \    if days_of_birth2 == nil and days_of_birth == nil then\n        return false\n\
    \    end\n    if days_of_birth2 ~= nil and days_of_birth2 ~= days_of_birth then\n\
    \        return false\n    end\n    if years3 ~= nil and years4 ~= nil then\n\
    \        return false\n    end\n    if days_of_month == days_of_birth and days_of_month\
    \ == days_of_birth2 then\n        return \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj_sjs_r7.lua:20: '}' expected (to close '{' at line 19) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == nil then return nil\
    \ end\n    local date_parts = string.match(date, \"(%d+)-(%d+)-(%d+)\")\n    if\
    \ date_parts == nil then\n        return nil\n    end\n    \n    local month =\
    \ tonumber(date_parts[1])\n    local day = tonumber(date_parts[2])\n    local\
    \ year = tonumber(date_parts[3])\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgsbcm89_.lua:46: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Check if the date string is\
    \ not empty\n    if date == nil then\n        return false\n    end\n    -- Check\
    \ if number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
    \ And the number of days is not less than 1 or higher than 30 days for months\
    \ 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the\
    \ month 2.\n    if not date then\n        return false\n    end\n    -- Check\
    \ if month is not less than 1 or higher than 12\n    -- Check if the number of\
    \ days is equal to 31 and it is less than 1 month or greater than 31 days.\n \
    \   if #date == 1 and (date[1] < 1 or date[1] > 31) then\n        return false\n\
    \    end\n    if #date == 2 and date[2] < 1 or date[2] > 29 then\n        return\
    \ false\n    end\n    if #date == 3 and (date[1] < 1 or date[1] > 12 or date[2]\
    \ < 1 or date[2] > 31) then\n        return false\n    end\n    -- Check if the\
    \ number of days is equal to 29 and it is less than 1 month or greater than 29\
    \ days.\n    if #date == 2 and date[2] < 1 or date[2] > 29 then\n        return\
    \ false\n    end\n    -- Check if the number of days is equal to 30 and it is\
    \ less than 1 month or greater than 30 days.\n    if #date == 3 and date[2] <\
    \ 1 or date[2] > 30 then\n        return false\n    end\n    -- Check if the number\
    \ of days is equal to 31 and it is less than 1 month or greater than 31 days.\n\
    \    if #date == 4 and date[2] < 1 or date[2] > 31 then\n        return false\n\
    \    end\n    -- Check if the number of days is equal to 32 and it is less than\
    \ 1 month or greater than 31 days.\n    if #date == 5 and date[2] < 1 or date[2]\
    \ > 31 then\n        return false\n    end\n    -- Check if the number of days\
    \ is equal to 30 and it is less than 1 month or greater than 31 days.\n    if\
    \ #date == 6 and date[2] < 1 or date[2] > 31 then\n        return false\n    end\n\
    \    -- Check if the number of days is equal to 31 and it is less than 1 month\
    \ or greater than 31 days.\n    if #date == 7 and date[2] < 1 or date[2] > 31\
    \ then\n        return false\n    end\n    -- Check if the number of days is equal\
    \ to 32 and it is less than 1 month or greater than 31 days.\n    if #date ==\
    \ 8 and date[2] < 1 or date[2] > 31 then\n        return false\n    end\n    --\
    \ Check if the number of days is equal to 31 and it is less than 1 month or greater\
    \ than 31 days.\n    if #date == 9 and date[2] < 1 or date[2] > 31 then\n    \
    \    return false\n    end\n    -- Check if the number of days is equal to 32\
    \ and it is less than 1 month or greater than 31 days.\n    if #\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppe9sl64c.lua:68: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your validation rules\
    \ here.\n  -- The date string is not empty.\n  if not date then\n    return nil\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj27ldspu.lua:42: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  \n  if date:len() < 1 then\n  \
    \  return false\n  end\n  \n  if date:sub(1, 1) ~= '-' or date:sub(1, 2) == '-'\
    \ then\n    return false\n  end\n  \n  if date:sub(2, 2) ~= '-' or date:sub(3,\
    \ 2) ~= '-' or date:sub(4, 2) == '-' or date:sub(6, 2) == '-' then\n    return\
    \ false\n  end\n  \n  local year = tonumber(date:sub(5, 2))\n  local month = tonumber(date:sub(3,\
    \ 2))\n  local day = tonumber(date:sub(2, 2))\n  \n  if year ~= nil and month\
    \ > 0 and day > 0 and month < 13 and day < 32 and month > 1 and day > 0 and day\
    \ <= 30 and day >= 1 and month < 13 and day <= 29 and day > 0 and day >= 1 and\
    \ month > 2 and day > 0 and day <= 30 and day >= 1 then\n    return true\n  end\n\
    \  \n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplg3kut6a.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplg3kut6a.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local day = tonumber(string.sub(date,\
    \ 2, 3))\n    local month = tonumber(string.sub(date, 1, 2))\n    local year =\
    \ tonumber(string.sub(date, 1, 2))\n    local date = \"%02d%02d%02d\"\n    day\
    \ = day == 0 and 1 or day\n    month = month == 0 and 1 or month\n    -- if the\
    \ day is invalid, day will be set to 1 and year will be set to year + 1\n    --\
    \ if the month is invalid, month will be set to 1 and year will be set to year\n\
    \    -- if the year is invalid, month will be set to 1 and year will be set to\
    \ year + 1\n    if day == nil then day = 1\n    if month == nil then month = 1\n\
    \    if year == nil then year = year + 1\n    day = day..\"-%02d-%02d\"\n    month\
    \ = month..\"-%02d\"\n    year = year..\"-%02d\"\n    if string.find(date..month,\
    \ day, 1,1) and string.find(date..month, year, 1,1) then\n        if string.find(date..month,\
    \ day, 1,2) and string.find(date..month, year, 1,2) then\n            if string.find(date..month,\
    \ day, 1,3) and string.find(date..month, year, 1,3) then\n                if string.find(date..month,\
    \ day, 1,4) and string.find(date..month, year, 1,4) then\n                   \
    \ if string.find(date..month, day, 1,5) and string.find(date..month, year, 1,5)\
    \ then\n                        if string.find(date..month, day, 1,6) and string.find(date..month,\
    \ year, 1,6) then\n                            if string.find(date..month, day,\
    \ 1,7) and string.find(date..month, year, 1,7) then\n                        \
    \        if string.find(date..month, day, 1,8) and string.find(date..month, year,\
    \ 1,8) then\n                                    if string.find(date..month, day,\
    \ 1,9) and string.find(date..month, year, 1,9) then\n                        \
    \                if string.find(date..month, day, 1,10) and string.find(date..month,\
    \ year, 1,10) then\n                                            if string.find(date..month,\
    \ day, 1,11) and string.find(date..month, year, 1,11) then\n                 \
    \                               if string.find(date..month, day, 1,12) and string.find(date..month,\
    \ year, 1,12) then\n                                                    return\
    \ true\n                                                end\n                \
    \                            end\n                                        end\n\
    \                                    end\n                                end\n\
    \                            end\n                        end\n              \
    \      end\n                end\n            end\n        end\n    end\n    return\
    \ false\nend\n</code>\n<|/ a |>\n<| c |>\nYou don't need to check all 12 months...\
    \ just the first two. Months 3,4 and 5 are sufficient (because they have 31 days)...\n\
    <|/ c |>\n<| c |>\nthanks for the answ\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdmz8jhku.lua:57: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif date == nil then\n\t\treturn\
    \ false\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp43szh80z.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal day = tonumber(date:sub(1,2))\
    \ \n\tlocal month = tonumber(date:sub(2,2)) \n\tlocal year = tonumber(date:sub(4,4))\
    \ \n\t-- check for empty\n\tif day == nil or month == nil or year == nil then\
    \ return false end\n\t-- check for invalid months\n\tif month < 1 or month > 12\
    \ then return false end\n\t-- check for invalid dates\n\tif day == 0 or day >\
    \ 31 then return false end\n\t-- check for invalid dates\n\tif month == 0 or month\
    \ > 12 then return false end\n\t-- check for invalid dates\n\tif year == nil or\
    \ year < 1 or year > 3000 then return false end\n\t-- check the validity of the\
    \ day\n\tif day < 1 or day > 31 then return false end\n\t-- check the validity\
    \ of the year\n\tif day < 1 or day > 31 then return false end\n\t-- check the\
    \ validity of the month\n\tif month < 1 or month > 12 then return false end\n\t\
    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8j3zdim.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk8j3zdim.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date=='' then\n    print('Date\
    \ cannot be empty')\n    return false\n  end\n  if #date<1 then\n    print('Date\
    \ cannot be less than 1')\n    return false\n  end\n  if #date>31 then\n    print('Date\
    \ cannot be greater than 31')\n    return false\n  end\n  if month(date) ~= 1\
    \ or month(date)~=12 or month(date)~=2 then\n    print('Date must be in the format:\
    \ mm-dd-yyyy')\n    return false\n  end\n  if #date<2 then\n    print('Date must\
    \ be in the format: mm-dd-yyyy')\n    return false\n  end\n  if month(date) ~=\
    \ month(date) then\n    print('Date cannot be less than 1')\n    return false\n\
    \  end\n  if day(date) ~= day(date) then\n    print('Date cannot be less than\
    \ 1')\n    return false\n  end\n  if year(date) ~= year(date) then\n    print('Date\
    \ cannot be less than 1')\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_372z32i.lua:27:\
    \ attempt to call a nil value (global 'month')\nstack traceback:\n\t/tmp/tmp_372z32i.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmp_372z32i.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local year = int(string.format(\"\
    %.2d\", string.sub(date, 1, 4)))\n    local month = int(string.sub(string.format(\"\
    %.2d\", string.sub(date, 1, 2)), 3, 4))\n    local day = int(string.sub(string.format(\"\
    %.2d\", string.sub(date, 5, 6)), 7, 8))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsj9uevog.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local year = tonumber(string.sub(date,\
    \ 1, 4))\n    local month = tonumber(string.sub(date, 5, 2)) - 1\n    local day\
    \ = tonumber(string.sub(date, 7, 2))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpexix1fad.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if not date or #date == 0 then\n\
    \        return false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp73t4vdki.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    date = string.gsub(date,\"%b\"\
    ,\"-\")\n    date = string.gsub(date,\"%d\",\" \")\n    date = string.gsub(date,\"\
    %Y\",\"\")\n    date = string.gsub(date,\"%m\",\" \")\n    date = string.gsub(date,\"\
    %m\",\"\")\n    date = string.gsub(date,\"%h\",\" \")\n    date = string.gsub(date,\"\
    %h\",\"\")\n    \n    local function month_check (month,days)\n        if month\
    \ < 1 or month > 12 then\n            return false\n        end\n        if days\
    \ < 1 or days > 29 then\n            return false\n        end\n    end\n    \n\
    \    local function day_check (day,month,year)\n        if day < 1 or day > 31\
    \ then\n            return false\n        end\n        if month == 1 or month\
    \ == 3 or month == 5 or month == 7 or month == 8 or month == 10 then\n       \
    \     if day < 1 or day > 29 then\n                return false\n            end\n\
    \        elseif month == 4 or month == 6 or month == 9 or month == 11 or month\
    \ == 12 then\n            if day < 1 or day > 30 then\n                return\
    \ false\n            end\n        end\n        \n        if month == 2 then\n\
    \            if day < 1 or day > 29 then\n                return false\n     \
    \       end\n        end\n    end\n    \n    local function year (year)\n    \
    \    if year < 1 or year > 9999 then\n            return false\n        end\n\
    \    end\n    \n    local function check_date (date)\n        if date == \"\"\
    \ then\n            return false\n        end\n        \n        local year =\
    \ string.match(date,\"%d+%b-%y\")\n        local month = string.match(date,\"\
    %d+%b-%y\")\n        local day = string.match(date,\"%d+%b-%y\")\n        \n \
    \       local month2 = string.match(date,\"%b-%%d-%Y\")\n        local day2 =\
    \ string.match(date,\"%b-%%d-%Y\")\n        \n        local day3 = string.match(date,\"\
    %m-%d-%y\")\n        local month3 = string.match(date,\"%m-%d-%y\")\n        \n\
    \        if month2 ~= month3 then\n            local day1 = string.match(date,\"\
    %d-%b-%y\")\n            local month1 = string.match(date,\"%d-%b-%y\")\n    \
    \        \n            local day12 = string.match(date,\"%m-%d-%y\")\n       \
    \     local month12 = string.match(date,\"%m-%d-%y\")\n            \n        \
    \    if day ~= day1 or month2 ~= month1 or day2 ~= day12 or month3 ~= month12\
    \ then\n                return false\n            else\n                return\
    \ true\n            end\n        else\n            if \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprk72j1h6.lua:88: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n   if not month or not day or not year then return false\
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdhz4uj1h.lua:39: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local year = tonumber(date:match(\"\
    %d+\"))\n    local month = tonumber(date:match(\"%m+\"))\n    local day = tonumber(date:match(\"\
    %d+\"))\n    if year and month and day then\n        if month == 0 then\n    \
    \        if day <= 1 or day > 30 then\n                return false\n        \
    \    end\n        else\n            if month == 1 then\n                if day\
    \ <= 1 or day > 29 then\n                    return false\n                end\n\
    \            else\n                if month == 3 or month == 5 or month == 7 or\
    \ month == 8 or month == 10 or month == 12 or month == 1 or month == 4 or month\
    \ == 6 or month == 9 or month == 11 or month == 2 then\n                    if\
    \ day <= 1 or day > 31 then\n                        return false\n          \
    \          end\n                else\n                    if day <= 1 or day >\
    \ 30 then\n                        return false\n                    end\n   \
    \             end\n            end\n        end\n    else\n        return false\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqj9wkfbu.lua:49:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqj9wkfbu.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_regex = string.gsub(date,\
    \ '^(%d+)-(%d+)-(%d+)$', '\\\\1-\\\\2-\\\\3')\n    local m = date:match(date_regex)\n\
    \    \n    if m == nil then\n        return false\n    end\n    \n    local year\
    \ = tonumber(m[2])\n    local month = tonumber(m[1])\n    local day = tonumber(m[3])\n\
    \    \n    if year < 1 or month < 1 or day < 1 then\n        return false\n  \
    \  end\n    \n    if year > 9999 or month > 12 or day > 31 then\n        return\
    \ false\n    end\n    \n    if day > 29 or day < 1 then\n        return false\n\
    \    end\n    \n    if month == 1 or month == 3 or month == 5 or\n        month\
    \ == 7 or month == 8 or month == 10 or\n        month == 12 or month == 14 then\n\
    \        if day > 31 then\n            return false\n        end\n    end\n  \
    \  \n    if month == 4 or month == 6 or\n        month == 9 or month == 11 then\n\
    \        if day > 30 then\n            return false\n        end\n    end\n  \
    \  \n    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    \n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07h6tmgq.lua:65:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp07h6tmgq.lua:65:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil then\n        return false\n   \
    \ end\n    if year == nil then\n        return false\n    end\n    local max_days_in_month\
    \ = 21 -- Since we count from 1 instead of 0\n    if month >= 1 and month <= 12\
    \ then\n        -- If it is December, the month must be valid.\n        if month\
    \ == 12 and day > max_days_in_month then\n            return false\n        end\n\
    \        -- The month must be valid.\n        if month >= 4 and month <= 12 then\n\
    \            -- If it is February, the day must be valid.\n            if month\
    \ == 2 and day > max_days_in_month then\n                return false\n      \
    \      end\n        end\n    end\n    local max_days_in_year = 28\n    if year\
    \ >= 1 and year <= max_days_in_year then\n        -- The year must be valid.\n\
    \        if day > max_days_in_year then\n            return false\n        end\n\
    \    end\n    -- The date must be in the format: mm-dd-yyyy\n    -- for example:\
    \ \n    -- valid_date('03-11-2000') => True\n    -- valid_date('15-01-2012') =>\
    \ False\n    -- valid_date('04-0-2040') => False\n    -- valid_date('06-04-2020')\
    \ => True\n    -- valid_date('06/04/2020') => False\n    return true\nend\nreturn\
    \ valid_date\nend\nreturn is_valid_date\nend\nreturn generate_valid_date\nend\n\
    return is_valid_date\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkyagpzcx.lua:53: <eof> expected near 'end'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local pattern = '^((0[1-9]|[12][0-9]|3[01])[-](0[1-9]|1[012])[-](19|20)\\\
    d\\d$)'\n  local pattern1 = '^((0[1-9]|[12][0-9]|3[01])[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01])$)'\n\
    \  local pattern2 = '^((0[1-9]|[12][0-9]|3[01])[-](0[1-9]|[12][0-9]|3[01])[-](19|20)\\\
    d\\d$)'\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpou9_jrhj.lua:15: invalid escape sequence near ''^((0[1-9]|[12][0-9]|3[01])[-](0[1-9]|1[012])[-](19|20)\\\
    d'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t--date:gsub(\"-\",\"/\")\n\tif\
    \ date == nil then return false end\n\tif date == \"\" then return false end\n\
    \tlocal month = tonumber(date:sub(1,2)) \n\tlocal day = tonumber(date:sub(3,4))\n\
    \tlocal year = tonumber(date:sub(6,10))\n\t-- Check month\n\tif month < 1 or month\
    \ > 12 then return false end\n\t-- Check day\n\tif day < 1 or day > 31 then return\
    \ false end\n\t-- Check year\n\tif year < 1 or year > 2020 then return false end\n\
    \t-- Check day of month\n\tlocal month_days = {\n\t\t[1] = 31,\n\t\t[3] = 31,\n\
    \t\t[5] = 30,\n\t\t[7] = 29,\n\t\t[10] = 29,\n\t\t[12] = 30\n\t}\n\t-- Check month\n\
    \tif month > 1 then\n\t\tlocal months_count = month - 1\n\t\tif month_days[months_count]\
    \ ~= day then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplshp4wnj.lua:49:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplshp4wnj.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local d, m, y = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)') \n    if d ~= nil and d > 0 and d <= 31 then\n        return\
    \ true\n    end\n    if m ~= nil and m > 1 and m <= 12 then\n        return true\n\
    \    end\n    if y ~= nil and y > 0 and y <= 10 then\n        return true\n  \
    \  end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpanjeczgq.lua:16:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmpanjeczgq.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpanjeczgq.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == nil then return false\
    \ end\n    if date == '' then return false end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_sgk4ff0.lua:39: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  \n  -- Check date\n  if date ==\
    \ nil then\n    return false\n  end\n  \n  -- Validate date string length\n  if\
    \ #date < 1 then\n    return false\n  end\n  \n  -- Validate date\n  if #date\
    \ > 7 then\n    return false\n  end\n  \n  -- Validate months\n  local months\
    \ = {}\n  months[1] = '01'\n  months[2] = '03'\n  months[3] = '05'\n  months[4]\
    \ = '07'\n  months[5] = '08'\n  months[6] = '10'\n  months[7] = '12'\n  \n  for\
    \ i = 1, 12 do\n    if months[i] ~= date:sub(1,2) then\n      return false\n \
    \   end\n  end\n  \n  -- Validate days\n  local days = {}\n  days[1] = '01'\n\
    \  days[2] = '02'\n  days[3] = '03'\n  days[4] = '04'\n  days[5] = '05'\n  days[6]\
    \ = '06'\n  days[7] = '07'\n  days[8] = '08'\n  days[9] = '09'\n  days[10] = '10'\n\
    \  days[11] = '11'\n  days[12] = '12'\n  \n  for i = 1, 31 do\n    if days[i]\
    \ ~= date:sub(-2,-1) then\n      return false\n    end\n  end\n  \n  -- Validate\
    \ year\n  if date:sub(1,4) <= 0 or date:sub(1,4) >= year then\n    return false\n\
    \  end\n  \n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsyebog8.lua:79:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdsyebog8.lua:79:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil then\n    ngx.log(ngx.ERR,\
    \ \"Date is not provided\")\n    return False\n  end\n  if #date == 0 then\n \
    \   ngx.log(ngx.ERR, \"Date is empty\")\n    return False\n  end\n  if #date <\
    \ 1 then\n    ngx.log(ngx.ERR, \"Date less than one day\")\n    return False\n\
    \  end\n  if #date > 31 then\n    ngx.log(ngx.ERR, \"Date greater than 31 days\"\
    )\n    return False\n  end\n  if #date > 29 then\n    ngx.log(ngx.ERR, \"Date\
    \ greater than 29 days\")\n    return False\n  end\n  if date ~= string.sub(date,\
    \ 1, 2) then\n    ngx.log(ngx.ERR, \"Incorrect date format\")\n    return False\n\
    \  end\n  if date ~= string.sub(date, 3, 4) then\n    ngx.log(ngx.ERR, \"Incorrect\
    \ date format\")\n    return False\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnn3n3gvo.lua:36:\
    \ attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpnn3n3gvo.lua:36:\
    \ in local 'candidate'\n\t/tmp/tmpnn3n3gvo.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if not date then return False end\n\
    \  local month, day, year = string.match(date, '(%d%d-%d)(%d%d)(%d%d)')\n  month\
    \ = tonumber(month)\n  day = tonumber(day)\n  year = tonumber(year)\n  if not\
    \ month or not day or not year then\n    return false\n  end\n  if month > 12\
    \ or month < 1 or day > 31 or day < 1 then\n    return false\n  end\n  if month\
    \ == 4 or month == 6 then\n    if day > 30 then\n      return false\n    end\n\
    \  else\n    if day > 29 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9hex6cp.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg9hex6cp.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif not date then\n\t\treturn false\n\
    \tend\n\tlocal day1, month1, year1 = string.match(date, '(%d+)-(%d+)-(%d+)')\n\
    \tlocal day2, month2, year2 = string.match(date, '(%d+)-(%d+)-(%d+)')\n\tlocal\
    \ day3, month3, year3 = string.match(date, '(%d+)-(%d+)-(%d+)')\n\tlocal day4,\
    \ month4, year4 = string.match(date, '(%d+)-(%d+)-(%d+)')\n\tlocal day5, month5,\
    \ year5 = string.match(date, '(%d+)-(%d+)-(%d+)')\n\tlocal day6, month6, year6\
    \ = string.match(date, '(%d+)-(%d+)-(%d+)')\n\tlocal day7, month7, year7 = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n\tlocal day8, month8, year8 = string.match(date, '(%d+)-(%d+)-(%d+)')\n\
    \tlocal day9, month9, year9 = string.match(date, '(%d+)-(%d+)-(%d+)')\n\tlocal\
    \ day10, month10, year10 = string.match(date, '(%d+)-(%d+)-(%d+)')\n\tlocal day11,\
    \ month11, year11 = string.match(date, '(%d+)-(%d+)-(%d+)')\n\tlocal day12, month12,\
    \ year12 = string.match(date, '(%d+)-(%d+)-(%d+)')\n\tlocal month1 = month1 and\
    \ month1:match(\"%d+\")\n\tlocal month2 = month2 and month2:match(\"%d+\")\n\t\
    local month3 = month3 and month3:match(\"%d+\")\n\tlocal month4 = month4 and month4:match(\"\
    %d+\")\n\tlocal month5 = month5 and month5:match(\"%d+\")\n\tlocal month6 = month6\
    \ and month6:match(\"%d+\")\n\tlocal month7 = month7 and month7:match(\"%d+\"\
    )\n\tlocal month8 = month8 and month8:match(\"%d+\")\n\tlocal month9 = month9\
    \ and month9:match(\"%d+\")\n\tlocal month10 = month10 and month10:match(\"%d+\"\
    )\n\tlocal month11 = month11 and month11:match(\"%d+\")\n\tlocal month12 = month12\
    \ and month12:match(\"%d+\")\n\tlocal day1 = day1 and day1:match(\"%d+\")\n\t\
    local day2 = day2 and day2:match(\"%d+\")\n\tlocal day3 = day3 and day3:match(\"\
    %d+\")\n\tlocal day4 = day4 and day4:match(\"%d+\")\n\tlocal day5 = day5 and day\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcnnvbpmy.lua:69: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  \n  local date_array = string.explode('-',date)\
    \ -- split date string into array in order [month,day,year]\n  -- month should\
    \ be 1-12\n  if date_array[1] < 1 or date_array[1] > 12 then return False end\n\
    \  -- day should be 1-31\n  if date_array[2] < 1 or date_array[2] > 31 then return\
    \ False end\n  -- year should be from 2010 to 2020\n  if date_array[3] < 2010\
    \ then return False end\n  if date_array[3] > 2020 then return False end\n  \n\
    \  return true -- returns True or False based on above rules\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5gz1eqe.lua:16:\
    \ attempt to call a nil value (field 'explode')\nstack traceback:\n\t/tmp/tmpd5gz1eqe.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpd5gz1eqe.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local d, m, y = string.match(date,\
    \ \"%d-%d-%d\")\n    if not d or d == '' or d ~= '%d' then return false end\n\
    \    if tonumber(m) < 1 or tonumber(m) > 12 or tonumber(y) < 1 or tonumber(y)\
    \ > 2020 then\n        return false\n    end\n    if tonumber(d) < 1 or tonumber(d)\
    \ > 29 then\n        return false\n    end\n    if m == 2 and d >= 1 then\n  \
    \      return false\n    end\n    if m == 3 and d >= 1 then\n        return false\n\
    \    end\n    if m == 4 and d >= 1 then\n        return false\n    end\n    if\
    \ m == 5 and d >= 1 then\n        return false\n    end\n    if m == 6 and d >=\
    \ 1 then\n        return false\n    end\n    if m == 7 and d >= 1 then\n     \
    \   return false\n    end\n    if m == 8 and d >= 1 then\n        return false\n\
    \    end\n    if m == 9 and d >= 1 then\n        return false\n    end\n    if\
    \ m == 10 and d >= 1 then\n        return false\n    end\n    if m == 11 and d\
    \ >= 1 then\n        return false\n    end\n    if m == 12 and d >= 1 then\n \
    \       return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk042vf0v.lua:62:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk042vf0v.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month,day,year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if month == nil then\n    return False\n  else\n \
    \   month = int(month)\n    day = int(day)\n    year = int(year)\n  end\n  if\
    \ year > datetime.year(0) or year < datetime.year() or month < 1 or month > 12\
    \ then\n    return false\n  end\n  if month == 1 then month = 2 end\n  if month\
    \ == 2 then month = 3 end\n  if month == 3 then month = 31 end\n  if month ==\
    \ 4 then month = 4 end\n  if month == 5 then month = 6  \n  if month == 6 then\
    \ month = 6 end\n  if month == 7 then month = 8 end\n  if month == 8 then month\
    \ = 9 end\n  if month == 9 then month = 10 end\n  if month == 10 then month =\
    \ 11 end\n  if month == 11 then month = 12 end\n  if day < 1 or day > 31 then\n\
    \    return false\n  end\n  if month == 4 or month == 6 or month == 9 or month\
    \ == 11 and day > 30 then\n    return false\n  end\n  if month == 2 and day >\
    \ 29 then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo6vlnsvr.lua:70: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tassert(type(date) == 'string',\
    \ 'Expected a string. ' .. type(date) .. ' was given.')\n\tdate = string.gsub(date,\
    \ '-', '')\n\tdate = string.gsub(date, '/', '')\n\tdate = string.gsub(date, '\
    \ ', '')\n\tlocal month,day,year = string.match(date, '(%d%d%d)')\n\tmonth = tonumber(month)\n\
    \tday = tonumber(day)\n\tyear = tonumber(year)\n\tassert(month >= 1, 'Months should\
    \ be in the range 1..12. ' .. month .. ' was given.')\n\tassert(day >= 1 and day\
    \ <= 31, 'Days should be in the range 1..31. ' .. day .. ' was given.')\n\tassert(month\
    \ >= 1 and month <= 12, 'Months should be in the range 1..12. ' .. month .. '\
    \ was given.')\n\tassert(year >= 1900 and year <= 2039, 'Years should be in the\
    \ range 1900..2039. ' .. year .. ' was given.')\n\tif month >= 3 then \n\t\tmonth\
    \ = month - 2\n\telseif month == 1 then \n\t\tmonth = 12\n\telse\n\t\treturn false\n\
    \tend\n\tlocal date_valid = false\n\tif day <= 29 then\n\t\tif month >= 5 then\n\
    \t\t\tdate_valid = true\n\t\telse\n\t\t\tdate_valid = false\n\t\tend\n\telseif\
    \ day > 29 then\n\t\tif month >= 4 then\n\t\t\tdate_valid = true\n\t\telse\n\t\
    \t\tdate_valid = false\n\t\tend\n\tend\n\treturn date_valid\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpogpzm13z.lua:24:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpogpzm13z.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpogpzm13z.lua:54: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ nil\n   end\n   if #date > 0 then\n      if #date < 9 then\n         return\
    \ nil\n      elseif #date == 9 then\n         return true\n      elseif #date\
    \ == 10 then\n         return false\n      elseif #date == 11 then\n         return\
    \ false\n      elseif #date == 12 then\n         return true\n      elseif #date\
    \ == 13 then\n         return true\n      elseif #date == 14 then\n         return\
    \ true\n      elseif #date == 15 then\n         return true\n      elseif #date\
    \ == 16 then\n         return true\n      elseif #date == 17 then\n         return\
    \ true\n      elseif #date == 18 then\n         return true\n      elseif #date\
    \ == 19 then\n         return true\n      elseif #date == 20 then\n         return\
    \ true\n      elseif #date == 21 then\n         return true\n      elseif #date\
    \ == 22 then\n         return true\n      elseif #date == 23 then\n         return\
    \ true\n      elseif #date == 24 then\n         return true\n      elseif #date\
    \ == 25 then\n         return true\n      elseif #date == 26 then\n         return\
    \ true\n      elseif #date == 27 then\n         return true\n      elseif #date\
    \ == 28 then\n         return true\n      elseif #date == 29 then\n         return\
    \ true\n      elseif #date == 30 then\n         return true\n      elseif #date\
    \ == 31 then\n         return true\n      elseif #date == 32 then\n         return\
    \ true\n      elseif #date == 33 then\n         return true\n      elseif #date\
    \ == 34 then\n         return true\n      elseif #date == 35 then\n         return\
    \ true\n      elseif #date == 36 then\n         return true\n      elseif #date\
    \ == 37 then\n         return true\n      elseif #date == 38 then\n         return\
    \ true\n      elseif #date == 39 then\n         return true\n      elseif #date\
    \ == 40 then\n         return true\n      elseif #date == 41 then\n         return\
    \ true\n      elseif #date == 42 then\n         return true\n      elseif #date\
    \ == 43 then\n         return true\n      elseif #date == 44 then\n         return\
    \ true\n      elseif #date \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppz13ov05.lua:94: 'then' expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- write your logic here\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5df8s26.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd5df8s26.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  \n  if date ~= nil then\n    \n\
    \    -- Check date is not empty\n    if date ~= \"\" then\n    \n      -- Split\
    \ date string into date and month parts\n      local date_parts = string.gsub(date,\
    \ \"-\", \":\"), \n                         string.gsub(\":\", \"/\", \"-\")\n\
    \      \n      -- Calculate number of days in each month\n      local years =\
    \ {}, months = {}\n      for i = 1, 12 do \n        table.insert(years, date_parts[2][i])\n\
    \        table.insert(months, date_parts[1][i])\n      end\n      \n      -- Number\
    \ of days in each month\n      local days_in_month = {}\n      for i = 3, 1, -1\
    \ do \n        table.insert(days_in_month, #years[i] + #months[i])\n      end\n\
    \      \n      -- Calculate number of days in date\n      local date_days = {}\n\
    \      for i = 1, 11 do\n        table.insert(date_days, #years[i] + #months[i]\
    \ + #days_in_month[i])\n      end\n      \n      -- Check if date is valid according\
    \ to rules above\n      if #date_days <= 0 or #date_days >= 31 or\n         #months\
    \ <= 0 or #months >= 12 or\n         #days <= 0 or #days > 30 then\n        return\
    \ false\n      end\n      \n      -- Check if months are legal\n      if #months\
    \ <= 0 or #months > 12 then\n        return false\n      end\n      \n      --\
    \ Check if days are legal\n      if #days <= 0 or #days > 30 then\n        return\
    \ false\n      end\n      \n      -- Check if date is in the right format\n  \
    \    local months_format = {}\n      \n      for i = 1, 12 do \n        months_format[i]\
    \ = months[i]\n      end\n      \n      local date_parts = string.gsub(date, \"\
    -\", \":\"), \n                           string.gsub(\":\", \"/\", \"-\")\n \
    \     \n      local date_months = {}\n      for i = 1, 12 do \n        table.insert(date_months,\
    \ date_parts[2][i])\n      end\n      \n      local date_days = {}\n      for\
    \ i = 1, 11 do\n        table.insert(date_days, date_parts[2][i] + date_parts[1][i]\
    \ + date_parts[0][i])\n      end\n      \n      -- Compare months and days\n \
    \     if date_months == months_format and date_days == #date_parts then\n    \
    \    return true\n      else\n        return false\n      end\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoptv1_0t.lua:26: unexpected symbol near '='\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {'01','02','03','04','05','06','07','08','09','10','11','12'}\n\
    \    local days = {0,31,28,31,30,31,30,31,31,30,31,30,31}\n    local months_count\
    \ = 0\n    local days_count = 0\n    local year_count = 0\n    local month_check\
    \ = {}\n    local days_check = {}\n    local year_check = {}\n    \n    local\
    \ month_start = tonumber(date:sub(1,2):sub(1,1):sub(1,1)) -- Get month number\n\
    \    local month_end = tonumber(date:sub(1,2):sub(2,1):sub(1,1)) -- Get month\
    \ number\n    \n    month_count = month_count+1\n    \n    month_check = months[month_start]\n\
    \    \n    -- Checking for number of days in months\n    if month_count==1 then\n\
    \        days_count = days[month_end]\n    elseif month_count==3 then\n      \
    \  days_count = days[month_end]\n    elseif month_count==5 then\n        days_count\
    \ = days[month_end]\n    elseif month_count==7 then\n        days_count = days[month_end]\n\
    \    elseif month_count==8 then\n        days_count = days[month_end]\n    elseif\
    \ month_count==10 then\n        days_count = days[month_end]\n    elseif month_count==12\
    \ then\n        days_count = days[month_end]\n    end\n    \n    -- Checking for\
    \ number of days in months for leap years\n    if month_check == '01' then\n \
    \       if days_count > 29 then\n            days_count = days_count - 29\n  \
    \      end\n    elseif month_check == '02' then\n        if days_count > 28 then\n\
    \            days_count = days_count - 28\n        end\n    elseif month_check\
    \ == '03' then\n        if days_count > 31 then\n            days_count = days_count\
    \ - 31\n        end\n    elseif month_check == '04' then\n        if days_count\
    \ > 30 then\n            days_count = days_count - 30\n        end\n    elseif\
    \ month_check == '05' then\n        if days_count > 31 then\n            days_count\
    \ = days_count - 31\n        end\n    elseif month_check == '06' then\n      \
    \  if days_count > 30 then\n            days_count = days_count - 30\n       \
    \ end\n    elseif month_check == '07' then\n        if days_count > 31 then\n\
    \            days_count = days_count - 31\n        end\n    elseif month_check\
    \ == '08' then\n        if days_count > 31 \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx1ppdvgu.lua:79: 'then' expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local year = tonumber(date:sub(1,4))\n\
    \    local month = tonumber(date:sub(1,2))\n    local day = tonumber(date:sub(2,2))\n\
    \    \n    local months = {\n        [0] = 'Jan', 'Feb', 'Mar', 'Apr', 'May',\
    \ 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n    }\n    \n    local years\
    \ = {\n        [0] = '01', '02', '03', '04', '05', '06', '07', '08', '09', '10',\
    \ '11', '12'\n    }\n    \n    local valid_date = true\n    \n    if year == 0\
    \ then\n        valid_date = false\n    else if year > 12 then\n        valid_date\
    \ = false\n    else if day > 0 then\n        valid_date = false\n    else if month\
    \ > 0 then\n        valid_date = false\n    else\n        valid_date = true\n\
    \    end\n    \n    if valid_date == true then\n        local months_count = months[month]\n\
    \        local days_count = day\n        \n        if month == 2 then\n      \
    \      months_count = 'Dec'\n            days_count = '31'\n        else\n   \
    \         months_count = '31'\n            days_count = '30'\n        end\n  \
    \      \n        if day == 0 then\n            days_count = '1'\n        else\n\
    \            days_count = '1'\n        end\n        \n        local months_count\
    \ = months_count\n        local days_count = days_count\n        \n        if\
    \ month == 1 then\n            months_count = 'Jan'\n            days_count =\
    \ '31'\n        elseif month == 3 then\n            months_count = 'Mar'\n   \
    \         days_count = '31'\n        elseif month == 5 then\n            months_count\
    \ = 'May'\n            days_count = '31'\n        elseif month == 7 then\n   \
    \         months_count = 'Jul'\n            days_count = '31'\n        elseif\
    \ month == 8 then\n            months_count = 'Aug'\n            days_count =\
    \ '31'\n        elseif month == 10 then\n            months_count = 'Oct'\n  \
    \          days_count = '31'\n        elseif month == 12 then\n            months_count\
    \ = 'Dec'\n            days_count = '31'\n        end\n        \n        if day\
    \ == 0 then\n            days_count = '1'\n        else\n            days_count\
    \ = '1'\n        end\n        \n        local months_count = months_count\n  \
    \      local days_count = days_count\n        \n        local days_array = {\n\
    \            [1] = 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'\n        }\n\
    \        \n        local days_count = day\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpav2b4dmm.lua:121: 'end' expected (to close 'if' at line 41)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local valid, err = validateDate(date);\n\
    \    return valid, err;\nend\n</code>\nYou can then use this function as your\
    \ validator in your schema:\n<code>\nrequire 'luarocks.require'\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4q03x_yi.lua:18: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp06cqfkm9.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month = tonumber(string.sub(date,\
    \ 6, -1))\n    local day = tonumber(string.sub(date, 0, 2))\n    local year =\
    \ tonumber(string.sub(date, 3, 4))\n    -- return true or false\n    if month\
    \ < 1 or month > 12 or day < 1 or day > 31 or year < 1 or year > 9999 then\n \
    \       return false\n    end\n    local month = month - 1\n    if month > 0 then\n\
    \        day = day - 1\n        if day > 0 then\n            year = year - 1\n\
    \            if month > 0 then\n                year = year - 1\n            \
    \    if month > 0 then\n                    month = month - 1\n              \
    \      if month > 0 then\n                        day = day - 1\n            \
    \            if day > 0 then\n                            month = month - 1\n\
    \                            if month > 0 then\n                             \
    \   day = day - 1\n                                if day > 0 then\n         \
    \                           month = month - 1\n                              \
    \  end\n                            end\n                        end\n       \
    \             end\n                end\n            end\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmkb8xua.lua:53:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsmkb8xua.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif date == nil then\n\t\treturn\
    \ false\n\tend\n\tif string.len(date) == 0 then\n\t\treturn false\n\tend\n\tif\
    \ days_in_month(string.sub(date, 1,2)) < 1 or days_in_month(string.sub(date, 1,2))\
    \ > 31 then\n\t\treturn false\n\tend\n\tif days_in_month(string.sub(date, 4,2))\
    \ < 1 or days_in_month(string.sub(date, 4,2)) > 30 then\n\t\treturn false\n\t\
    end\n\tif days_in_month(string.sub(date, 6,2)) < 1 or days_in_month(string.sub(date,\
    \ 6,2)) > 29 then\n\t\treturn false\n\tend\n\tif string.sub(date, 1,2) == '01'\
    \ and string.sub(date, 4,2) == '04' and string.sub(date, 6,2) == '06' then\n\t\
    \treturn true\n\tend\n\tif string.sub(date, 1,2) ~= '01' or string.sub(date, 4,2)\
    \ ~= '04' or string.sub(date, 6,2) ~= '06' then\n\t\treturn false\n\tend\n\treturn\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1fdapg6v.lua:21:\
    \ attempt to call a nil value (global 'days_in_month')\nstack traceback:\n\t/tmp/tmp1fdapg6v.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp1fdapg6v.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if not date or date=='' then\n\
    \        return false\n    end\n    \n    local month = tonumber(string.sub(date,1,2))\n\
    \    if month<1 or month>12 then\n        return false\n    end\n    \n    local\
    \ day = tonumber(string.sub(date,4,5))\n    if day<1 or day>31 then\n        return\
    \ false\n    end\n    \n    local year = tonumber(string.sub(date,7,10))\n   \
    \ if year<1 or year>9999 then\n        return false\n    end\n    \n    if month==2\
    \ and day==29 then\n        return false\n    end\n    \n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1dzahy1t.lua:25:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp1dzahy1t.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmp1dzahy1t.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.match(date,\
    \ \"%d-%d-%d\")\n    -- Check that the date is not empty\n    if date_split ==\
    \ nil or date_split == \"\" then\n        return false\n    end\n    -- check\
    \ that the date does not exceed the max number of days\n    -- 1-31\n    local\
    \ days_in_month = 0\n    if date_split[1] == 1 then\n        days_in_month = 28\n\
    \    elseif date_split[1] == 3 then\n        days_in_month = 31\n    elseif date_split[1]\
    \ == 5 then\n        days_in_month = 30\n    elseif date_split[1] == 7 then\n\
    \        days_in_month = 31\n    elseif date_split[1] == 8 then\n        days_in_month\
    \ = 30\n    elseif date_split[1] == 10 then\n        days_in_month = 31\n    elseif\
    \ date_split[1] == 12 then\n        days_in_month = 30\n    end\n    if days_in_month\
    \ > 31 then\n        return false\n    end\n    -- check that the date does not\
    \ exceed the max number of days\n    -- 1-30\n    if date_split[2] == 0 then\n\
    \        days_in_month = 30\n    elseif date_split[2] == 1 then\n        days_in_month\
    \ = 31\n    elseif date_split[2] == 3 then\n        days_in_month = 30\n    elseif\
    \ date_split[2] == 5 then\n        days_in_month = 31\n    elseif date_split[2]\
    \ == 7 then\n        days_in_month = 30\n    elseif date_split[2] == 8 then\n\
    \        days_in_month = 31\n    elseif date_split[2] == 10 then\n        days_in_month\
    \ = 30\n    elseif date_split[2] == 12 then\n        days_in_month = 31\n    end\n\
    \    if days_in_month > 30 then\n        return false\n    end\n    -- check that\
    \ the date does not exceed the max number of days\n    -- 1-29\n    if date_split[3]\
    \ == 0 then\n        days_in_month = 30\n    elseif date_split[3] == 1 then\n\
    \        days_in_month = 31\n    elseif date_split[3] == 3 then\n        days_in_month\
    \ = 30\n    elseif date_split[3] == 5 then\n        days_in_month = 31\n    elseif\
    \ date_split[3] == 7 then\n        days_in_month = 30\n    elseif date_split[3]\
    \ == 8 then\n        days_in_month = 31\n    elseif date_split[3] == 10 then\n\
    \        days_in_month = 30\n    elseif date_split[3] == 12 then\n        days_in_month\
    \ = 31\n    end\n    if days_in_month > 29 then\n        return false\n    end\n\
    \    -- check that the month is not less than 1 or higher than 12\n    if date_split[1]\
    \ < 1 or date_split[1] > 12 then\n        return false\n    end\n    if date_split[2]\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiamq1x1x.lua:90: 'then' expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif date == nil then\n\t\treturn\
    \ false\n\tend\n\tif date == '' or date == 'Invalid date' then\n\t\treturn false\n\
    \tend\n\tlocal date_string = date:sub(1,2):sub(1,2)..date:sub(2,2)..date:sub(3,4)\n\
    \tif date_string:match('^1?[0-9]-') then\n\t\tlocal months = date_string:match('^1?[0-9]-[0-9]-[0-9]{4}$')\n\
    \t\tif months:match('^1?[0-9]-[0-9]{2}-[0-9]{4}$') then\n\t\t\tlocal days_string\
    \ = date_string:match('^1?[0-9]-[0-9]-[0-9]{2}$')\n\t\t\tif days_string:match('^1?[0-9]-[0-9]{2}-[0-9]{2}$')\
    \ then\n\t\t\t\tlocal years = date_string:match('^1?[0-9]-[0-9]{4}$')\n\t\t\t\t\
    if years:match('^1?[0-9]{4}$') then\n\t\t\t\t\treturn true\n\t\t\t\telse\n\t\t\
    \t\t\treturn false\n\t\t\t\tend\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\
    \t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\t\treturn false\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4kcdy76i.lua:24:\
    \ attempt to index a nil value (local 'months')\nstack traceback:\n\t/tmp/tmp4kcdy76i.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp4kcdy76i.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil then return nil\
    \ end\n  if not date then return nil end\n  if date ~= date then return nil end\n\
    \  local dates = string.gmatch(date, '%d-%d-%d+') \n  if not dates or #dates ==\
    \ 0 then\n    return nil\n  else\n    if dates[1] <= 12 and dates[3] <= 31 and\
    \ dates[5] <= 29 then\n      return true\n    end\n  end\n  return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpisxv0mmg.lua:19:\
    \ attempt to get length of a function value (local 'dates')\nstack traceback:\n\
    \t/tmp/tmpisxv0mmg.lua:19: in local 'candidate'\n\t/tmp/tmpisxv0mmg.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil then\n    error(\"\
    Invalid date\")\n  end\n  if date == \"\" then\n    error(\"Date can not be blank\"\
    )\n  end\n  local dateArray = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n  if\
    \ dateArray == nil then\n    error(\"Invalid date format\")\n  end\n  if dateArray[2]\
    \ ~= nil then\n    if dateArray[2] > 31 then\n      error(\"Invalid month\")\n\
    \    end\n    if dateArray[2] > 30 then\n      error(\"Invalid month\")\n    end\n\
    \    if dateArray[2] > 29 then\n      error(\"Invalid month\")\n    end\n  end\n\
    \  if dateArray[1] < 1 or dateArray[1] > 12 then\n    error(\"Invalid month\"\
    )\n  end\n  if dateArray[2] < 1 or dateArray[2] > 31 then\n    error(\"Invalid\
    \ day\")\n  end\n  if dateArray[3] ~= '-' or dateArray[3] ~= '-' then\n    error(\"\
    Invalid date\")\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptqolzavp.lua:25:\
    \ attempt to index a function value (local 'dateArray')\nstack traceback:\n\t\
    /tmp/tmptqolzavp.lua:25: in local 'candidate'\n\t/tmp/tmptqolzavp.lua:51: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif not date then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5sqsfmp1.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif date == '' then\n\t\treturn\
    \ false\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm88zhi9j.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+):(%d+)/%d+:(%d+)\")\n    if month == nil then\n        return false\n\
    \    end\n    if month < 1 or month > 12 then\n        return false\n    end\n\
    \    if day == nil then\n        return false\n    end\n    if day < 1 or day\
    \ > 31 then\n        return false\n    end\n    if year == nil then\n        return\
    \ false\n    end\n    if year < \"0001\" or year > \"9999\" then\n        return\
    \ false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_u1hvkz.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo_u1hvkz.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  date = string.gsub(date, \"[^-%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpew22ev1h.lua:15: unfinished string near '\"[^-%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-%s%d-'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxg6464sa.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   date = string.lower(date)\n  \
    \ if date == '' or date == 'null' then return false end\n   local days, month,\
    \ year= string.match(date, '(%d+)-([%d]+)-([%d]+)')\n   if days == nil then return\
    \ false end\n   if month == nil then return false end\n   if year == nil then\
    \ return false end\n   local days_int  = tonumber(days)\n   local month_int =\
    \ tonumber(month)\n   local year_int = tonumber(year)\n   if days_int == nil then\
    \ return false end\n   if month_int == nil then return false end\n   if year_int\
    \ == nil then return false end\n   if days_int <= 0 or days_int > 31 then return\
    \ false end\n   if month_int <= 0 or month_int > 12 then return false end\n  \
    \ if year_int > 2020 and year_int <= 2050 then return false end\n   return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3yh9exhs.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3yh9exhs.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil then\n    return\
    \ nil\n  elseif date == '' then\n    return false\n  end\n  local month, day,\
    \ rest = string.match(date, '(%d+)(%d+)(%d+)')\n  month = tonumber(month)\n  day\
    \ = tonumber(day)\n  if day ~= nil then\n    day = day > 0 and day <= 29 and day\
    \ > 0 and day <= 31 and day > 0 and day <= 31\n  end\n  if month ~= nil then\n\
    \    month = month > 0 and month <= 12 and month > 0 and month <= 12 and month\
    \ > 0 and month <= 12\n  end\n  if day ~= nil then\n    day = day > 0 and day\
    \ <= 29 and day > 0 and day <= 31 and day > 0 and day <= 31\n  end\n  if month\
    \ and day then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnpmbt0y2.lua:30:\
    \ attempt to compare number with boolean\nstack traceback:\n\t/tmp/tmpnpmbt0y2.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpnpmbt0y2.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date1, date2 = date.month,\
    \ date.day\n    return date1 ~= nil and date2 ~= nil and date2 <= 31 and date1\
    \ ~= 0 and date1 > 0 and date1 < 12 and date2 ~= nil and date2 <= 29 and date1\
    \ ~= nil and date2 > 0 and date1 < 31 and date2 ~= nil and date2 > 0 and date1\
    \ < 30\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqmkk_5c6.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqmkk_5c6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4k6h1hzd.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4k6h1hzd.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    return date ~= nil and string.len(date)\
    \ ~= 0 and \n        string.sub( date, 0, 2 ) ~= '' and\n        string.sub( date,\
    \ 2, 2 ) ~= '-' and\n        string.sub( date, 4, 4 ) ~= '-' and\n        string.sub(\
    \ date, 6, 4 ) ~= '-' and\n        string.sub( date, 8, 2 ) ~= '-' and\n     \
    \   string.sub( date, 10, 2 ) ~= '-' and\n        string.sub( date, 12, 2 ) ~=\
    \ '-' and\n        string.sub( date, 12, 2 ) ~= '+' and\n        (string.sub(\
    \ date, 12, 2 ) ~= '-' or\n        (string.sub( date, 12, 2 ) ~= '+' and string.sub(\
    \ date, 12, 1 ) ~= '-'))\nend\n</code>\nEDIT: If you don't want to use a library\
    \ function, you can rewrite your function using substrings and indexOf functions\
    \ as follows:\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps9m_qk81.lua:27: unexpected symbol near '<'\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- 1. The date string is not empty.\n\
    \  -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n  -- 3. The months should not be less than 1 or higher\
    \ than 12.\n  -- 4. The date should be in the format: mm-dd-yyyy\n  -- for example:\
    \ \n  -- valid_date('03-11-2000') => True\n  -- valid_date('15-01-2012') => False\n\
    \  -- valid_date('04-0-2040') => False\n  -- valid_date('06-04-2020') => True\n\
    \  -- valid_date('06/04/2020') => False\n  if date == '' or date == nil then\n\
    \    return false\n  end\n  \n  local year = tonumber(date:match(\"^(0?[1-9]|[12][0-9]|3[01])(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|30)$\"\
    )) or nil\n  local month = tonumber(date:match(\"^(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[012])$\"\
    )) or nil\n  local day = tonumber(date:match(\"^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])(0?[1-9]|1[012])$\"\
    )) or nil\n  \n  if year == nil or month == nil or day == nil then\n    return\
    \ false\n  end\n  \n  -- 1. The date string is not empty.\n  -- 2. The number\
    \ of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
    \ And the number of days is not less than 1 or higher than 30 days for months\
    \ 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the\
    \ month 2.\n  -- 3. The months should not be less than 1 or higher than 12.\n\
    \  -- 4. The date should be in the format: mm-dd-yyyy\n  -- for example: \n  --\
    \ valid_date('03-11-2000') => True\n  -- valid_date('15-01-2012') => False\n \
    \ -- valid_date('04-0-2040') => False\n  -- valid_date('06-04-2020') => True\n\
    \  -- valid_date('06/04/2020') => False\n  if year == nil then\n    return false\n\
    \  end\n  \n  if month == nil then\n    return false\n  end\n  \n  if day == nil\
    \ then\n    return \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxf1eriir.lua:57: 'end' expected (to close 'if' at line 55)\
    \ near '='\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal month, day, year = string.match(date,\
    \ '%m-%d-%Y')\n\tif month < 1 or month > 12 then\n\t\treturn false\n\tend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprs7diai0.lua:41: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == '' or date == '-'\
    \ then\n        return false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4tjn1du8.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12',\n    }\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpknatw15q.lua:46: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil then return false\
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpktpo_tfh.lua:38: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil then return false\
    \ end\n  if date == '' then return false end\n  if #date < 1 then return false\
    \ end\n  if #date > 31 then return false end\n  if months[string.sub(date, 2,\
    \ 2)] <= 0 then return false end\n  if months[string.sub(date, 4, 2)] <= 0 then\
    \ return false end\n  if months[string.sub(date, 6, 2)] <= 0 then return false\
    \ end\n  if string.sub(date, 8, 2) ~= '-' and string.sub(date, 10, 2) ~= '-' and\
    \ string.sub(date, 12, 2) ~= '-' then return false end\n  \n  local month_index\n\
    \  if months[string.sub(date, 2, 2)] == 1 then month_index = 2 end\n  if months[string.sub(date,\
    \ 4, 2)] == 1 then month_index = 3 end\n  if months[string.sub(date, 6, 2)] ==\
    \ 1 then month_index = 4 end\n  if months[string.sub(date, 8, 2)] == 1 then month_index\
    \ = 5 end\n  if months[string.sub(date, 10, 2)] == 1 then month_index = 6 end\n\
    \  if months[string.sub(date, 12, 2)] == 1 then month_index = 7 end\n  if month_index\
    \ == nil then return false end\n  \n  if string.sub(date, 2, 1) ~= '-' then\n\
    \    if string.sub(date, 2, 1) == '0' then\n      if string.sub(date, 2, 2) ==\
    \ '0' then\n        if string.sub(date, 2, 3) == '0' then\n          if string.sub(date,\
    \ 2, 4) == '0' then\n            if string.sub(date, 2, 5) == '0' then\n     \
    \         return true\n            end\n          end\n        end\n      end\n\
    \    end\n  end\n  \n  if string.sub(date, 4, 1) ~= '-' then\n    if string.sub(date,\
    \ 4, 1) == '0' then\n      if string.sub(date, 4, 2) == '0' then\n        if string.sub(date,\
    \ 4, 3) == '0' then\n          if string.sub(date, 4, 4) == '0' then\n       \
    \     if string.sub(date, 4, 5) == '0' then\n              return true\n     \
    \       end\n          end\n        end\n      end\n    end\n  end\n  \n  if string.sub(date,\
    \ 6, 1) ~= '-' then\n    if string.sub(date, 6, 1) == '0' then\n      if string.sub(date,\
    \ 6, 2) == '0' then\n        if string.sub(date, 6, 3) == '0' then\n         \
    \ if string.sub(date, 6, 4) == '0' then\n            if string.sub(date, 6, 5)\
    \ == '0' then\n              return true\n            end\n          end\n   \
    \     end\n      end\n    end\n  end\n  \n  if string.sub(date, 8, 1) ~= '-' then\n\
    \    if string.sub(date, 8, 1) == '0' then\n      if string.sub(date, \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa5mdwvg0.lua:78: ')' expected (to close '(' at line 77) near\
    \ '='\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Check for not empty string.\n\
    \  if date == nil or date == \"\" then return false end\n  -- Check whether it\
    \ matches the expected format: mm-dd-yyyy\n  local date_m = string.match(date,\
    \ '%d-%m-%Y')\n  if date_m == nil or date_m == \"\" then return false end\n  --\
    \ Check if month is not less than 1 or higher than 12.\n  local month_m\n  month_m\
    \ = tonumber(date_m:sub(1, 2))\n  if month_m < 1 or month_m * 12 > 12 then return\
    \ false end\n  -- Check if year is not less than 1 or higher than 9999.\n  local\
    \ year_m\n  year_m = tonumber(date_m:sub(4, 5))\n  if year_m < 1 or year_m * 12\
    \ * 9999 > 9999 then return false end\n  -- Check for the conditions listed above.\n\
    \  local d = tonumber(date_m:sub(2, 3))\n  local m = tonumber(date_m:sub(1, 2))\n\
    \  local y = tonumber(date_m:sub(4, 5))\n  -- If days are less than 1 or higher\
    \ than 31 then return false.\n  if d < 1 or d > 31 then return false end\n  --\
    \ If months are less than 1 or higher than 12 then return false.\n  if m < 1 or\
    \ m * 12 > 12 then return false end\n  -- If years are less than 1 or higher than\
    \ 9999 then return false.\n  if y < 1 or y * 12 * 9999 > 9999 then return false\
    \ end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1v1ojxf2.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1v1ojxf2.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\t-- Your code here\n\tlocal year,\
    \ month, day = string.match(date, \"(%d+)-(%d+)-(%d+)\")\n\tif year and month\
    \ and day then\n\t\tif year < 1 or year > 9999 or month < 1 or month > 12 or month\
    \ == 2 then\n\t\t\treturn false\n\t\telseif day < 1 or day > 31 then\n\t\t\treturn\
    \ false\n\t\telseif month == 1 then\n\t\t\tif day == 29 then\n\t\t\t\treturn true\n\
    \t\t\telseif day < 1 or day > 29 then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\
    \treturn true\n\t\t\tend\n\t\telseif month == 3 then\n\t\t\tif day == 29 then\n\
    \t\t\t\treturn true\n\t\t\telseif day < 1 or day > 29 then\n\t\t\t\treturn false\n\
    \t\t\telse\n\t\t\t\treturn true\n\t\t\tend\n\t\telseif month == 5 then\n\t\t\t\
    if day == 29 then\n\t\t\t\treturn true\n\t\t\telseif day < 1 or day > 29 then\n\
    \t\t\t\treturn false\n\t\t\telse\n\t\t\t\treturn true\n\t\t\tend\n\t\telseif month\
    \ == 7 then\n\t\t\tif day == 29 then\n\t\t\t\treturn true\n\t\t\telseif day <\
    \ 1 or day > 29 then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\treturn true\n\t\
    \t\tend\n\t\telseif month == 8 then\n\t\t\tif day == 29 then\n\t\t\t\treturn true\n\
    \t\t\telseif day < 1 or day > 29 then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\
    \treturn true\n\t\t\tend\n\t\telseif month == 10 then\n\t\t\tif day == 29 then\n\
    \t\t\t\treturn true\n\t\t\telseif day < 1 or day > 29 then\n\t\t\t\treturn false\n\
    \t\t\telse\n\t\t\t\treturn true\n\t\t\tend\n\t\telseif month == 12 then\n\t\t\t\
    if day == 29 then\n\t\t\t\treturn true\n\t\t\telseif day < 1 or day > 29 then\n\
    \t\t\t\treturn false\n\t\t\telse\n\t\t\t\treturn true\n\t\t\tend\n\t\telseif month\
    \ == 4 then\n\t\t\tif day == 29 then\n\t\t\t\treturn true\n\t\t\telseif day <\
    \ 1 or day > 29 then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\treturn true\n\t\
    \t\tend\n\t\telseif month == 6 then\n\t\t\tif day == 29 then\n\t\t\t\treturn true\n\
    \t\t\telseif day < 1 or day > 29 then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\
    \treturn true\n\t\t\tend\n\t\telseif month == 9 then\n\t\t\tif day == 29 then\n\
    \t\t\t\treturn true\n\t\t\telseif day < 1 or day > 29 then\n\t\t\t\treturn false\n\
    \t\t\telse\n\t\t\t\treturn true\n\t\t\tend\n\t\telseif month == 11 then\n\t\t\t\
    if day == 29 then\n\t\t\t\treturn true\n\t\t\telseif day < 1 or day > 29 then\n\
    \t\t\t\treturn false\n\t\t\telse\n\t\t\t\treturn true\n\t\t\tend\n\t\telse\n\t\
    \t\treturn false\n\t\tend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp46ko6k69.lua:136: 'end' expected (to close 'if' at line 17)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == nil then return end\n\
    \    local months = {0,1,2,3,4,5,6,7,8,9,10,11,12}\n    local days = {1,31,28,31,30,31,30,31,30,31,30,31}\n\
    \    local years = math.floor(date:match('([0-9]+)-([0-9]+)-([0-9]+)'))\n    if\
    \ months[years] < 1 or months[years] > 12 then return false end\n    if days[months[years]]\
    \ < 1 or days[months[years]] > days[months[years-1]] then return false end\n \
    \   local month1 = months[years] - 1\n    local month2 = months[years+1] - 1\n\
    \    local day1 = days[month1] - 1\n    local day2 = days[month2]\n    if month2\
    \ < 1 or month2 > 12 then return false end\n    if day2 < 1 or day1 > day2 then\
    \ return false end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1ma_86h.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn1ma_86h.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your logic here\n  \n\
    \  -- return True if the date is valid otherwise False.\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0yjaz4b.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps0yjaz4b.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month = tonumber(string.sub(date,\
    \ 3, 2))\n    local day = tonumber(string.sub(date, 5, 2))\n    local year = tonumber(string.sub(date,\
    \ 8, 4))\n    \n    if month == nil or day == nil or year == nil then\n      \
    \  return nil\n    end\n    \n    month = month - 1\n    day = day - 1\n    year\
    \ = year - 1\n    \n    if month < 1 or month > 12 then\n        return nil\n\
    \    end\n    \n    if day < 1 or day > 31 then\n        return nil\n    end\n\
    \    \n    if month == 1 and day < 21 then\n        return nil\n    end\n    \n\
    \    if month == 2 and day < 29 then\n        return nil\n    end\n    \n    if\
    \ day == 31 and (month == 1 or month == 3 and day < 21) then\n        return nil\n\
    \    end\n    \n    if day == 30 and (month == 1 or month == 3 and day < 31) then\n\
    \        return nil\n    end\n    \n    if day == 29 and (month == 2 or month\
    \ == 4 and day < 30) then\n        return nil\n    end\n    \n    if month ==\
    \ 2 and day < 29 then\n        return nil\n    end\n    \n    if day == 29 and\
    \ (month == 4 or month == 6 and day < 30) then\n        return nil\n    end\n\
    \    \n    return not ((month == 1 or month == 3 or month == 5 or month == 7 or\
    \ month == 8 or month == 10 or month == 12) and (day < 31 or day > 30) and (day\
    \ < 29 and month == 2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpygftovdf.lua:69:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpygftovdf.lua:69: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == '' then\n        return\
    \ false\n    end\n    local m1, d1, y1 =\n    string.match(date, '(%d+)-(%d+)-(%d+)')\n\
    \    if m1 ~= nil and d1 ~= nil and y1 ~= nil then\n        if m1 <= 12 and m1\
    \ >= 1 then\n            if d1 <= 31 and d1 >= 1 then\n                if y1 <=\
    \ 29 and y1 >= 1 then\n                    if m1 > 2 then\n                  \
    \      if m1 > 12 then\n                            -- invalid date\n        \
    \                    return false\n                        else\n            \
    \                -- valid date\n                        end\n                \
    \    end\n                else\n                    -- invalid day\n         \
    \           return false\n                end\n            else\n            \
    \    -- invalid day\n                return false\n            end\n        else\n\
    \            -- invalid month\n            return false\n        end\n    else\n\
    \        -- invalid date\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxqg_zuw3.lua:21:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpxqg_zuw3.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpxqg_zuw3.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tlocal year = tonumber(date:sub(1,4))\n\
    \tlocal month = tonumber(date:sub(2,2))\n\tlocal day = tonumber(date:sub(3,2))\n\
    \treturn (not year or not month or not day) and false or year and month and day\
    \ and day > 0 and day <= 31 and month > 0 and month <= 12 and year >= 1900\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpln_4h6b0.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpln_4h6b0.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {1,2,3,4,5,6,7,8,9,10,11,12}\n\
    \    local days = {0,31,28,31,30,31,30,31,30,31,30,31}\n    local dateArr = string.gmatch(date,\
    \ \"(%d+)(-%d)-(%d+)\")\n    if (dateArr[1] and dateArr[1] >= 1 and dateArr[1]\
    \ < 32 and dateArr[2] and dateArr[2] >= 1 and dateArr[2] < 32 and dateArr[3] and\
    \ dateArr[3] >= 1 and dateArr[3] < 32 and dateArr[4] and dateArr[4] >= 0 and dateArr[4]\
    \ <= 12) and #dateArr[4] == 2 then\n        if (#months[dateArr[1]] + #days[dateArr[1]]\
    \ >= 1 and #months[dateArr[1]] + #days[dateArr[1]] <= 31) and #months[dateArr[2]]\
    \ + #days[dateArr[2]] >= 1 and #months[dateArr[2]] + #days[dateArr[2]] <= 29 and\
    \ #months[dateArr[3]] + #days[dateArr[3]] >= 1 and #months[dateArr[3]] + #days[dateArr[3]]\
    \ <= 30 then\n            -- Check for leap years\n            if (dateArr[1]\
    \ == 2 and dateArr[2] == 29 or dateArr[1] == 2 and dateArr[2] == 30 or dateArr[1]\
    \ == 3 and dateArr[2] == 29 or dateArr[1] == 3 and dateArr[2] == 30) then\n  \
    \              return true\n            else\n                return false\n \
    \           end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpozlbru81.lua:18:\
    \ attempt to index a function value (local 'dateArr')\nstack traceback:\n\t/tmp/tmpozlbru81.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpozlbru81.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if not date or #date == 0 then\n\
    \    return false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3tq_agzy.lua:40: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local is_valid = true\n    if\
    \ date == nil then\n        return false\n    end\n    local year = tonumber(string.sub(date,\
    \ 1, 4))\n    local month = tonumber(string.sub(date, 5, 2))\n    local day =\
    \ tonumber(string.sub(date, 7, 2))\n    if year == nil then\n        return false\n\
    \    end\n    if month == nil or month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day == nil or day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 1 or month == 3 or month == 5 or\n        month\
    \ == 7 or month == 8 or month == 10 or\n        month == 12 then\n        if day\
    \ == 1 or day == 3 or day == 5 or\n            day == 7 or day == 8 or day ==\
    \ 10 or\n            day == 12 then\n            day = nil\n        end\n    else\n\
    \        if day == 4 or day == 6 or day == 9 or day == 11 then\n            day\
    \ = nil\n        end\n    end\n    if month == 2 or month == 4 or month == 6 or\
    \ month == 8 or month == 10 or month == 12 then\n        if day == 2 or day ==\
    \ 4 or day == 6 or day == 9 or day == 11 then\n            day = nil\n       \
    \ end\n    end\n    if month == 2 and day == 29 then\n        day = nil\n    end\n\
    \    return year and day and month\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8sdfno5.lua:58:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz8sdfno5.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date1 = date.split(\"-\"\
    )\n    local date2 = date1[2]..\"-\"..date1[1]..\"-\"..date1[0]\n    if date1[3]==\"\
    \ \" then date1[3] = date1[3] .. \"0\" end\n    if date2[3]==\" \" then date2[3]\
    \ = date2[3] .. \"0\" end\n    local days,months,year,month,dayofyear\n    if\
    \ #date1<2 then\n        return false\n    elseif #date1<6 then\n        return\
    \ false\n    elseif #date1>3 then\n        days = date1[2]\n        months = date1[1]\n\
    \        year = date1[3]\n    elseif #date1>6 then\n        days = date1[4] \n\
    \        months = date1[5] \n        year = date1[6]\n    elseif #date1>9 then\n\
    \        days = date1[7] \n        months = date1[8] \n        year = date1[9]\n\
    \    else\n        return false\n    end\n    if month==\" \" then month = month\
    \ .. \"0\" end\n    if day==\" \" then day = day .. \"0\" end\n    if #month<1\
    \ then\n        return false\n    elseif #month>12 then\n        return false\n\
    \    end\n    if #day<1 then\n        return false\n    elseif #day>31 then\n\
    \        return false\n    elseif #day>30 then\n        return false\n    end\n\
    \    if year==\" \" then year = year .. \"0\" end\n    if month==\" \" then month\
    \ = month .. \"0\" end\n    if year==\" \" then year = year .. \"0\" end\n   \
    \ month1 = tonumber(month)\n    year1 = tonumber(year)\n    days1 = tonumber(days)\n\
    \    if year1<1 or year1>12 then return false end\n    if month1<1 or month1>12\
    \ then return false end\n    if days1<1 or days1>31 then return false end\n  \
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpghwiqqp8.lua:15:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpghwiqqp8.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpghwiqqp8.lua:68: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
